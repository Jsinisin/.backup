Info	2024-10-06 21:54:03.089	default_logger_delegate.cpp:238	msedge (8350)	"Logger initialized with default format:%level	%datetime{%Y-%M-%d %H:%m:%s.%g}	%fbase:%line	msedge (8350)	""%msg""	%func	%thread"	void mipns::DefaultLoggerDelegate::InitHelper(const string&)	134551288415936
Info	2024-10-06 21:54:03.089	default_logger_delegate.cpp:239	msedge (8350)	"Logger initialized with cached log format:%level	%msg"	void mipns::DefaultLoggerDelegate::InitHelper(const string&)	134551288415936
Info	2024-10-06 21:54:03.089	default_logger_delegate.cpp:240	msedge (8350)	"Log file:/home/user/.config/microsoft-edge/Default/Sync Data/mip/logs/mip_sdk.miplog"	void mipns::DefaultLoggerDelegate::InitHelper(const string&)	134551288415936
Info	2024-10-06 21:54:03.089	default_logger_delegate.cpp:241	msedge (8350)	"Machine name: [unknown-host], User name: [user]"	void mipns::DefaultLoggerDelegate::InitHelper(const string&)	134551288415936
Warning	2024-10-06 21:54:03.089	diagnostic_factory.cpp:203	msedge (8350)	"CreateEventContext: Provided Cloud type is invalid - using the default cloud and databoundary"	std::shared_ptr<mipns::EventContext> mipns::CreateEventContextInternal(mipns::Cloud, mipns::DataBoundary, const mipns::CloudManager&, std::function<mipns::DiagnosticClientHandle(mipns::Cloud, mipns::DataBoundary)>)	134551288415936
Info	2024-10-06 21:54:03.089	mip_core_context_impl.cpp:123	msedge (8350)	"Loading context for application: [Microsoft Edge], Application version: [129.0.2792.79], Application ID: [ecd6b820-32c2-49b6-98a6-444530e5a77a], Process name: [msedge], MIP SDK version: [1.14.110], Path: [/home/user/.config/microsoft-edge/Default/Sync Data/mip]"	mipns::MipCoreContextImpl::MipCoreContextImpl(const std::shared_ptr<const mipns::MipConfiguration>&, const std::shared_ptr<mipns::OneDSAriaHelper>&, const std::shared_ptr<mipns::ProtectionCloudManager>&, const std::shared_ptr<mipns::PolicyCloudManager>&)	134551288415936
Warning	2024-10-06 21:54:03.090	protection_profile_impl_cc.cpp:98	msedge (8350)	"Deprecated API call - please provide the auth delegate when creating the protection engine instead"	mip_cc_result MIP_CC_CreateProtectionProfileSettings(mip_cc_mip_context, mip_cc_cache_storage_type, const void*, mip_cc_consent_callback, mip_cc_handle**, mip_cc_error*)	134551288415936
Info	2024-10-06 21:54:03.090	protection_profile_impl.cpp:62	msedge (8350)	"Starting API call: protection_profile_pre_initialize"	std::shared_ptr<mipns::TelemetryContext> mipns::PreInitializeProtection(const mipns::ProtectionProfile::Settings&)	134551288415936
Info	2024-10-06 21:54:03.090	protection_profile_impl.cpp:55	msedge (8350)	"Loading protection profile. EUL caching state: [1]"	mipns::PreInitializeProtection(const mipns::ProtectionProfile::Settings&)::<lambda(const std::shared_ptr<mipns::TelemetryContext>&)>	134551288415936
Info	2024-10-06 21:54:03.090	protection_profile_impl.cpp:62	msedge (8350)	"Ended API call: protection_profile_pre_initialize"	std::shared_ptr<mipns::TelemetryContext> mipns::PreInitializeProtection(const mipns::ProtectionProfile::Settings&)	134551288415936
Info	2024-10-06 21:54:03.090	protection_profile_impl.cpp:170	msedge (8350)	"Starting API call: protection_profile_load"	static std::shared_ptr<mipns::ProtectionProfile> mipns::ProtectionProfile::Load(const mipns::ProtectionProfile::Settings&)	134551288415936
Info	2024-10-06 21:54:03.092	openssl_crypto_delegate_impl.cpp:118	msedge (8350)	"OpenSSL provider loaded: [default]"	mipns::OpenSslCryptoDelegateImpl::OpenSslCryptoDelegateImpl()::<lambda(OSSL_PROVIDER*, void*)>	134551288415936
Info	2024-10-06 21:54:03.094	storage_manager.cpp:86	msedge (8350)	"StorageManager configured to use in-memory caching."	mipns::StorageManager::StorageManager(const std::shared_ptr<mipns::MipContext>&, const string&, bool, const std::shared_ptr<mipns::LicenseStore>&, const std::shared_ptr<mipns::StorageDelegate>&)	134551288415936
Info	2024-10-06 21:54:03.094	storage_manager.cpp:95	msedge (8350)	"Protection storage path: :memory:"	mipns::StorageManager::StorageManager(const std::shared_ptr<mipns::MipContext>&, const string&, bool, const std::shared_ptr<mipns::LicenseStore>&, const std::shared_ptr<mipns::StorageDelegate>&)	134551288415936
Info	2024-10-06 21:54:03.094	protection_profile_impl.cpp:195	msedge (8350)	"Protection API configured to use default HttpDelegate"	mipns::ProtectionProfileImpl::ProtectionProfileImpl(const mipns::ProtectionProfile::Settings&, const std::shared_ptr<mipns::ProtectionEngineManager>&, const std::shared_ptr<mipns::HttpDelegate>&, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const std::shared_ptr<mipns::TelemetryContext>&)	134551288415936
Info	2024-10-06 21:54:03.094	protection_profile_impl.cpp:201	msedge (8350)	"Protection API configured to use default TaskDispatcherDelegate"	mipns::ProtectionProfileImpl::ProtectionProfileImpl(const mipns::ProtectionProfile::Settings&, const std::shared_ptr<mipns::ProtectionEngineManager>&, const std::shared_ptr<mipns::HttpDelegate>&, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const std::shared_ptr<mipns::TelemetryContext>&)	134551288415936
Info	2024-10-06 21:54:03.094	protection_profile_impl.cpp:170	msedge (8350)	"Ended API call: protection_profile_load"	static std::shared_ptr<mipns::ProtectionProfile> mipns::ProtectionProfile::Load(const mipns::ProtectionProfile::Settings&)	134551288415936
Info	2024-10-06 21:54:03.094	protection_profile_impl.cpp:301	msedge (8350)	"Starting API call: protection_profile_add_engine"	virtual std::shared_ptr<mipns::ProtectionEngine> mipns::ProtectionProfileImpl::AddEngine(const mipns::ProtectionEngine::Settings&)	134551288415936
Info	2024-10-06 21:54:03.094	protection_engine_manager.cpp:63	msedge (8350)	"Adding engine with ID 33371c2f-7b42-46f6-8e31-97a8553bcada"	std::shared_ptr<mipns::ProtectionEngine> mipns::ProtectionEngineManager::AddEngine(const mipns::ProtectionEngine::Settings&, const std::shared_ptr<mipns::TelemetryContext>&)	134551288415936
Info	2024-10-06 21:54:03.095	protection_profile_impl.cpp:301	msedge (8350)	"Ended API call: protection_profile_add_engine"	virtual std::shared_ptr<mipns::ProtectionEngine> mipns::ProtectionProfileImpl::AddEngine(const mipns::ProtectionEngine::Settings&)	134551288415936
Info	2024-10-06 21:54:03.095	protection_engine_impl.cpp:1125	msedge (8350)	"Starting API call: protection_engine_create_publishing_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForPublishing(const mipns::ProtectionHandler::PublishingSettings&, const std::shared_ptr<void>&)	134551288415936
Info	2024-10-06 21:54:03.095	protection_engine_impl.cpp:1125	msedge (8350)	"Starting API task: protection_engine_create_publishing_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForPublishing(const mipns::ProtectionHandler::PublishingSettings&, const std::shared_ptr<void>&)	134551288415936
Info	2024-10-06 21:54:03.095	service_discovery_helper.cpp:177	msedge (8350)	"Using cloud endpoint base url domain 'https://api.aadrm.com' for service discovery"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.095	service_discovery_helper.cpp:201	msedge (8350)	"No redirected url found.  DNS will be checked"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.095	service_discovery_helper.cpp:219	msedge (8350)	"No cached DNS entry found"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.095	service_discovery_helper.cpp:254	msedge (8350)	"Service Details Domain: https://api.aadrm.com"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.095	service_discovery_helper.cpp:255	msedge (8350)	"Service Details DNS-resolved URL: https://api.aadrm.com"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.095	service_discovery_helper.cpp:279	msedge (8350)	"Service Details Endpoint Type: Azure RMS"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.095	service_discovery_helper.cpp:289	msedge (8350)	"Service discovery disabled. Using default service URLs"	std::shared_ptr<mipns::ServiceDiscoveryDetails> mipns::ServiceDiscoveryHelper::FindCachedServiceDiscoveryDetails(const std::shared_ptr<mipns::ServiceDetails>&)	134551288415936
Info	2024-10-06 21:54:03.096	protection_http_provider.cpp:45	msedge (8350)	"https://api.aadrm.com/my/v2/publishinglicenses is auto-approved and requires no user consent."	virtual bool mipns::ProtectionHttpProvider::RequestUserConsent(const string&, const mipns::Identity&, const string&)	134551288415936
Info	2024-10-06 21:54:03.096	auth_info_store.cpp:80	msedge (8350)	"Failed to find OAuth2 challenge in cache. Domain: api.aadrm.com IssuerId: ''"	std::__cxx11::string mipns::AuthInfoStore::FindChallenge(const string&, const string&)	134551288415936
Info	2024-10-06 21:54:03.096	auth_request_transformer.cpp:48	msedge (8350)	"Failed to get auth token from cached auth header. Failed with: [InternalError: 'Cannot parse empty auth header or request URL']"	virtual void mipns::AuthRequestTransformer::TransformRequestPriorToInitialSend(mipns::HttpRequestBase&, const std::shared_ptr<void>&)	134551288415936
Info	2024-10-06 21:54:03.633	http_client_base.cpp:44	msedge (8350)	"HTTP response time (seconds): 0.536045 ID: b7406eb9-75c6-4f40-806f-1ab9074bf50b"	mipns::HttpClientBase::SendAsync(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<void>&, const std::function<void(std::shared_ptr<mipns::HttpOperation>)>&)::<lambda(const std::shared_ptr<mipns::HttpOperation>&)>	134550436972224
Info	2024-10-06 21:54:03.633	http_director_impl.cpp:38	msedge (8350)	"Received HTTP response: ID: b7406eb9-75c6-4f40-806f-1ab9074bf50b, Status: 401, Time: 2024-10-07T03:54:03Z, Body: {""Message"":""Authorization has been denied for this request.""}, Headers['Date'] = 'Mon, 07 Oct 2024 03:54:02 GMT', Headers['Pragma'] = 'no-cache', Headers['Expires'] = '-1', Headers['X-Cache'] = 'CONFIG_NOCACHE', Headers['Content-Type'] = 'application/json; charset=utf-8', Headers['X-MSEdge-Ref'] = 'Ref A: 4574E51BACDF4B77A7F63D268DF40AD5 Ref B: BL2EDGE1309 Ref C: 2024-10-07T03:54:03Z', Headers['X-Powered-By'] = 'ASP.NET', Headers['Cache-Control'] = 'no-cache', Headers['CorrelationId'] = 'b7406eb9-75c6-4f40-806f-1ab9074bf50b', Headers['Content-Length'] = '61', Headers['WWW-Authenticate'] = 'Bearer resource=""https://aadrm.com"", realm="""", authorization=""https://login.windows.net/common/oauth2/authorize""', Headers['X-AspNet-Version'] = '4.0.30319', Headers['client-request-id'] = 'b7406eb9-75c6-4f40-806f-1ab9074bf50b', Headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551288415936
Info	2024-10-06 21:54:03.633	auth_request_transformer.cpp:155	msedge (8350)	"Requesting auth token from app. Resource: 'https://aadrm.com', Authority: 'https://login.windows.net/common', Scope: '', Claims: ''"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551288415936
Info	2024-10-06 21:54:03.633	auth_request_transformer.cpp:169	msedge (8350)	"Authentication response time (seconds): 1.9835e-05"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551288415936
Warning	2024-10-06 21:54:03.633	auth_info_store.cpp:58	msedge (8350)	"Removing OAuth2 challenge from cache. Domain: api.aadrm.com IssuerId: ''"	void mipns::AuthInfoStore::DeleteChallenge(const string&, const string&)	134551288415936
Error	2024-10-06 21:54:03.634	http_director_impl.cpp:269	msedge (8350)	"HTTP operation failed Failed with: [NoAuthTokenError: 'Client application failed to provide authentication token for HTTP request.']"	void mipns::HttpDirectorImpl::OnHttpOperationFailed(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<mipns::HttpResponse>&, const std::__exception_ptr::exception_ptr&, const std::function<void(const std::__exception_ptr::exception_ptr&)>&)	134551288415936
Info	2024-10-06 21:54:03.634	api_log_cache.cpp:58	msedge (8350)	"{{========================================= API CACHED LOGS BEGIN =========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551288415936
Info	2024-10-06 21:54:03.634	protection_engine_impl.cpp:1125	msedge (8350)	"Starting API call: protection_engine_create_publishing_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForPublishing(const mipns::ProtectionHandler::PublishingSettings&, const std::shared_ptr<void>&)	134551288415936
Info	2024-10-06 21:54:03.634	protection_engine_impl.cpp:1125	msedge (8350)	"Starting API task: protection_engine_create_publishing_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForPublishing(const mipns::ProtectionHandler::PublishingSettings&, const std::shared_ptr<void>&)	134551288415936
Info	2024-10-06 21:54:03.634	service_discovery_helper.cpp:177	msedge (8350)	"Using cloud endpoint base url domain 'https://api.aadrm.com' for service discovery"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.634	service_discovery_helper.cpp:201	msedge (8350)	"No redirected url found.  DNS will be checked"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Trace	2024-10-06 21:54:03.634	dnsinfo_store.cpp:68	msedge (8350)	"+DnsInfoStore::FindDnsResult"	const string mipns::DnsInfoStore::FindDnsResult(const string&, const string&)	134551288415936
Trace	2024-10-06 21:54:03.634	persistent_store_impl.cpp:126	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: DnsInfoStore started"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Trace	2024-10-06 21:54:03.634	sqlite_storage_table.cpp:186	msedge (8350)	"SQLiteStorageTable::Find: Trying to find rows for table: DnsInfoStore"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Trace	2024-10-06 21:54:03.634	sqlite_storage_table.cpp:213	msedge (8350)	"Found no matching rows."	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Trace	2024-10-06 21:54:03.634	persistent_store_impl.cpp:136	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: DnsInfoStore completed"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Trace	2024-10-06 21:54:03.634	dnsinfo_store.cpp:78	msedge (8350)	"-DnsInfoStore::FindDnsResult"	const string mipns::DnsInfoStore::FindDnsResult(const string&, const string&)	134551288415936
Info	2024-10-06 21:54:03.634	service_discovery_helper.cpp:219	msedge (8350)	"No cached DNS entry found"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.634	service_discovery_helper.cpp:254	msedge (8350)	"Service Details Domain: https://api.aadrm.com"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.634	service_discovery_helper.cpp:255	msedge (8350)	"Service Details DNS-resolved URL: https://api.aadrm.com"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.634	service_discovery_helper.cpp:279	msedge (8350)	"Service Details Endpoint Type: Azure RMS"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551288415936
Info	2024-10-06 21:54:03.634	service_discovery_helper.cpp:289	msedge (8350)	"Service discovery disabled. Using default service URLs"	std::shared_ptr<mipns::ServiceDiscoveryDetails> mipns::ServiceDiscoveryHelper::FindCachedServiceDiscoveryDetails(const std::shared_ptr<mipns::ServiceDetails>&)	134551288415936
Trace	2024-10-06 21:54:03.634	json_serializer_impl.cpp:477	msedge (8350)	" +JsonSerializer::SerializePublishCustomRequest"	virtual std::vector<unsigned char> mipns::JsonSerializer::SerializePublishCustomRequest(const mipns::PublishCustomRequest&)	134551288415936
Trace	2024-10-06 21:54:03.634	json_serializer_impl.cpp:678	msedge (8350)	" -JsonSerializer::SerializePublishCustomRequest"	virtual std::vector<unsigned char> mipns::JsonSerializer::SerializePublishCustomRequest(const mipns::PublishCustomRequest&)	134551288415936
Info	2024-10-06 21:54:03.634	protection_http_provider.cpp:45	msedge (8350)	"https://api.aadrm.com/my/v2/publishinglicenses is auto-approved and requires no user consent."	virtual bool mipns::ProtectionHttpProvider::RequestUserConsent(const string&, const mipns::Identity&, const string&)	134551288415936
Trace	2024-10-06 21:54:03.634	persistent_store_impl.cpp:126	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: AuthInfoStore started"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Trace	2024-10-06 21:54:03.634	sqlite_storage_table.cpp:186	msedge (8350)	"SQLiteStorageTable::Find: Trying to find rows for table: AuthInfoStore"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Trace	2024-10-06 21:54:03.634	sqlite_storage_table.cpp:213	msedge (8350)	"Found no matching rows."	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Trace	2024-10-06 21:54:03.634	persistent_store_impl.cpp:136	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: AuthInfoStore completed"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Info	2024-10-06 21:54:03.634	auth_info_store.cpp:80	msedge (8350)	"Failed to find OAuth2 challenge in cache. Domain: api.aadrm.com IssuerId: ''"	std::__cxx11::string mipns::AuthInfoStore::FindChallenge(const string&, const string&)	134551288415936
Info	2024-10-06 21:54:03.634	auth_request_transformer.cpp:48	msedge (8350)	"Failed to get auth token from cached auth header. Failed with: [InternalError: 'Cannot parse empty auth header or request URL']"	virtual void mipns::AuthRequestTransformer::TransformRequestPriorToInitialSend(mipns::HttpRequestBase&, const std::shared_ptr<void>&)	134551288415936
Trace	2024-10-06 21:54:03.634	http_client_base.cpp:80	msedge (8350)	"Adding HTTP operation 'b7406eb9-75c6-4f40-806f-1ab9074bf50b'"	void mipns::HttpClientBase::AddOperation(const std::shared_ptr<mipns::HttpOperationBase>&, const std::function<void(const std::shared_ptr<mipns::HttpOperation>&)>&)	134551288415936
Trace	2024-10-06 21:54:03.634	http_client_base.cpp:92	msedge (8350)	"Removing HTTP operation 'b7406eb9-75c6-4f40-806f-1ab9074bf50b'"	bool mipns::HttpClientBase::RemoveOperation(const string&)	134550436972224
Info	2024-10-06 21:54:03.634	http_client_base.cpp:44	msedge (8350)	"HTTP response time (seconds): 0.536045 ID: b7406eb9-75c6-4f40-806f-1ab9074bf50b"	mipns::HttpClientBase::SendAsync(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<void>&, const std::function<void(std::shared_ptr<mipns::HttpOperation>)>&)::<lambda(const std::shared_ptr<mipns::HttpOperation>&)>	134550436972224
Trace	2024-10-06 21:54:03.634	http_director_impl.cpp:33	msedge (8350)	"HTTP callback executed on thread 134551288415936"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551288415936
Info	2024-10-06 21:54:03.634	http_director_impl.cpp:38	msedge (8350)	"Received HTTP response: ID: b7406eb9-75c6-4f40-806f-1ab9074bf50b, Status: 401, Time: 2024-10-07T03:54:03Z, Body: {""Message"":""Authorization has been denied for this request.""}, Headers['Date'] = 'Mon, 07 Oct 2024 03:54:02 GMT', Headers['Pragma'] = 'no-cache', Headers['Expires'] = '-1', Headers['X-Cache'] = 'CONFIG_NOCACHE', Headers['Content-Type'] = 'application/json; charset=utf-8', Headers['X-MSEdge-Ref'] = 'Ref A: 4574E51BACDF4B77A7F63D268DF40AD5 Ref B: BL2EDGE1309 Ref C: 2024-10-07T03:54:03Z', Headers['X-Powered-By'] = 'ASP.NET', Headers['Cache-Control'] = 'no-cache', Headers['CorrelationId'] = 'b7406eb9-75c6-4f40-806f-1ab9074bf50b', Headers['Content-Length'] = '61', Headers['WWW-Authenticate'] = 'Bearer resource=""https://aadrm.com"", realm="""", authorization=""https://login.windows.net/common/oauth2/authorize""', Headers['X-AspNet-Version'] = '4.0.30319', Headers['client-request-id'] = 'b7406eb9-75c6-4f40-806f-1ab9074bf50b', Headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551288415936
Trace	2024-10-06 21:54:03.634	protection_auth_challenge_provider.cpp:223	msedge (8350)	"Trimming '/oauth2/authorize' from authority 'https://login.windows.net/common/oauth2/authorize'"	virtual std::shared_ptr<mipns::AuthDelegate::OAuth2Challenge> mipns::ProtectionAuthChallengeProvider::GetChallengeFromAuthHeader(const string&, const string&)	134551288415936
Info	2024-10-06 21:54:03.634	auth_request_transformer.cpp:155	msedge (8350)	"Requesting auth token from app. Resource: 'https://aadrm.com', Authority: 'https://login.windows.net/common', Scope: '', Claims: ''"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551288415936
Info	2024-10-06 21:54:03.634	auth_request_transformer.cpp:169	msedge (8350)	"Authentication response time (seconds): 1.9835e-05"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551288415936
Warning	2024-10-06 21:54:03.634	auth_info_store.cpp:58	msedge (8350)	"Removing OAuth2 challenge from cache. Domain: api.aadrm.com IssuerId: ''"	void mipns::AuthInfoStore::DeleteChallenge(const string&, const string&)	134551288415936
Trace	2024-10-06 21:54:03.634	persistent_store_impl.cpp:111	msedge (8350)	"PersistentStoreImpl::Delete: Trying to delete rows for table: AuthInfoStore started"	virtual void mipns::PersistentStoreImpl::Delete(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Trace	2024-10-06 21:54:03.634	sqlite_storage_table.cpp:163	msedge (8350)	"SQLiteStorageTable::Delete: Trying to delete rows for table: AuthInfoStore"	virtual void mipns::SQLiteStorageTable::Delete(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Trace	2024-10-06 21:54:03.634	persistent_store_impl.cpp:120	msedge (8350)	"PersistentStoreImpl::Delete: Trying to delete rows for table: AuthInfoStore completed"	virtual void mipns::PersistentStoreImpl::Delete(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551288415936
Error	2024-10-06 21:54:03.634	http_director_impl.cpp:269	msedge (8350)	"HTTP operation failed Failed with: [NoAuthTokenError: 'Client application failed to provide authentication token for HTTP request.']"	void mipns::HttpDirectorImpl::OnHttpOperationFailed(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<mipns::HttpResponse>&, const std::__exception_ptr::exception_ptr&, const std::function<void(const std::__exception_ptr::exception_ptr&)>&)	134551288415936
Info	2024-10-06 21:54:03.634	api_log_cache.cpp:78	msedge (8350)	"{{========================================= API CACHED LOGS END ==========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551288415936
Error	2024-10-06 21:54:03.634	protection_engine_impl.cpp:1125	msedge (8350)	"Failed API call: protection_engine_create_publishing_protection_handler Failed with: [NoAuthTokenError: 'Client application failed to provide authentication token for HTTP request., CorrelationId=94cf7581-7ae7-4139-ae9b-6fc2f578a35a, CorrelationId.Description=ProtectionEngine']"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForPublishing(const mipns::ProtectionHandler::PublishingSettings&, const std::shared_ptr<void>&)	134551288415936
Info	2024-10-06 21:54:03.634	api_log_cache.cpp:58	msedge (8350)	"{{========================================= API CACHED LOGS BEGIN =========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551288415936
Error	2024-10-06 21:54:03.634	protection_engine_impl.cpp:1125	msedge (8350)	"Failed API call: protection_engine_create_publishing_protection_handler Failed with: [NoAuthTokenError: 'Client application failed to provide authentication token for HTTP request., CorrelationId=94cf7581-7ae7-4139-ae9b-6fc2f578a35a, CorrelationId.Description=ProtectionEngine']"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForPublishing(const mipns::ProtectionHandler::PublishingSettings&, const std::shared_ptr<void>&)	134551288415936
Info	2024-10-06 21:54:03.634	api_log_cache.cpp:78	msedge (8350)	"{{========================================= API CACHED LOGS END ==========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551288415936
Warning	2024-10-06 21:54:03.634	api_utils.h:232	msedge (8350)	"Start calling error callback for API: protection_engine_create_publishing_protection_handler"	mipns::TryExecuteFailureCallback(const FailureFunc&, const std::__exception_ptr::exception_ptr&, bool, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const string&, const std::shared_ptr<mipns::ApiContext>&) [with FailureFunc = mipns::ProtectionEngineImpl::CreateProtectionHandlerForPublishing(const mipns::ProtectionHandler::PublishingSettings&, const std::shared_ptr<void>&)::<lambda(const std::__exception_ptr::exception_ptr&)>; std::__cxx11::string = std::__cxx11::basic_string<char>]::<lambda()>	134551288415936
Warning	2024-10-06 21:54:03.635	api_utils.h:234	msedge (8350)	"Ended calling error callback for API: protection_engine_create_publishing_protection_handler"	mipns::TryExecuteFailureCallback(const FailureFunc&, const std::__exception_ptr::exception_ptr&, bool, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const string&, const std::shared_ptr<mipns::ApiContext>&) [with FailureFunc = mipns::ProtectionEngineImpl::CreateProtectionHandlerForPublishing(const mipns::ProtectionHandler::PublishingSettings&, const std::shared_ptr<void>&)::<lambda(const std::__exception_ptr::exception_ptr&)>; std::__cxx11::string = std::__cxx11::basic_string<char>]::<lambda()>	134551288415936
Info	2024-10-06 21:54:03.635	http_director_impl.cpp:141	msedge (8350)	"Sending HTTP request: ID: b7406eb9-75c6-4f40-806f-1ab9074bf50b, Type: POST, Url: https://api.aadrm.com/my/v2/publishinglicenses, Body Size: 218, Headers['Accept'] = 'application/json', Headers['Content-Type'] = 'application/json', Headers['Accept-Language'] = 'en-US', Headers['x-ms-rms-platform-id'] = 'AppName=Microsoft Edge;AppVersion=129.0.2792.79;DevicePlatform=WindowsStore;SDKVersion=4.3;UniqueId=ecd6b820-32c2-49b6-98a6-444530e5a77a;OsName=Arch Linux;OsVersion=6.11.2-arch1-1;MipVersion=1.14.110;'"	void mipns::HttpDirectorImpl::DoSendHttp(bool, const std::shared_ptr<mipns::HttpTelemetryHelper>&, const std::shared_ptr<mipns::HttpRequestBase>&, const std::shared_ptr<void>&, const std::function<void(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<mipns::HttpResponse>&)>&, const std::function<void(const std::__exception_ptr::exception_ptr&)>&)	134551288415936
Info	2024-10-06 21:54:03.635	protection_engine_impl.cpp:1125	msedge (8350)	"Ended API call: protection_engine_create_publishing_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForPublishing(const mipns::ProtectionHandler::PublishingSettings&, const std::shared_ptr<void>&)	134551288415936
Warning	2024-10-06 21:54:04.415	diagnostic_factory.cpp:203	msedge (8350)	"CreateEventContext: Provided Cloud type is invalid - using the default cloud and databoundary"	std::shared_ptr<mipns::EventContext> mipns::CreateEventContextInternal(mipns::Cloud, mipns::DataBoundary, const mipns::CloudManager&, std::function<mipns::DiagnosticClientHandle(mipns::Cloud, mipns::DataBoundary)>)	134551298901696
Info	2024-10-06 21:54:04.415	mip_core_context_impl.cpp:123	msedge (8350)	"Loading context for application: [Microsoft Edge], Application version: [129.0.2792.79], Application ID: [ecd6b820-32c2-49b6-98a6-444530e5a77a], Process name: [msedge], MIP SDK version: [1.14.110], Path: [/home/user/.config/microsoft-edge/Default/Sync Data/mip]"	mipns::MipCoreContextImpl::MipCoreContextImpl(const std::shared_ptr<const mipns::MipConfiguration>&, const std::shared_ptr<mipns::OneDSAriaHelper>&, const std::shared_ptr<mipns::ProtectionCloudManager>&, const std::shared_ptr<mipns::PolicyCloudManager>&)	134551298901696
Warning	2024-10-06 21:54:04.415	protection_profile_impl_cc.cpp:98	msedge (8350)	"Deprecated API call - please provide the auth delegate when creating the protection engine instead"	mip_cc_result MIP_CC_CreateProtectionProfileSettings(mip_cc_mip_context, mip_cc_cache_storage_type, const void*, mip_cc_consent_callback, mip_cc_handle**, mip_cc_error*)	134551298901696
Info	2024-10-06 21:54:04.416	protection_profile_impl.cpp:62	msedge (8350)	"Starting API call: protection_profile_pre_initialize"	std::shared_ptr<mipns::TelemetryContext> mipns::PreInitializeProtection(const mipns::ProtectionProfile::Settings&)	134551298901696
Info	2024-10-06 21:54:04.416	protection_profile_impl.cpp:55	msedge (8350)	"Loading protection profile. EUL caching state: [1]"	mipns::PreInitializeProtection(const mipns::ProtectionProfile::Settings&)::<lambda(const std::shared_ptr<mipns::TelemetryContext>&)>	134551298901696
Info	2024-10-06 21:54:04.416	protection_profile_impl.cpp:62	msedge (8350)	"Ended API call: protection_profile_pre_initialize"	std::shared_ptr<mipns::TelemetryContext> mipns::PreInitializeProtection(const mipns::ProtectionProfile::Settings&)	134551298901696
Info	2024-10-06 21:54:04.416	protection_profile_impl.cpp:170	msedge (8350)	"Starting API call: protection_profile_load"	static std::shared_ptr<mipns::ProtectionProfile> mipns::ProtectionProfile::Load(const mipns::ProtectionProfile::Settings&)	134551298901696
Info	2024-10-06 21:54:04.418	storage_manager.cpp:86	msedge (8350)	"StorageManager configured to use in-memory caching."	mipns::StorageManager::StorageManager(const std::shared_ptr<mipns::MipContext>&, const string&, bool, const std::shared_ptr<mipns::LicenseStore>&, const std::shared_ptr<mipns::StorageDelegate>&)	134551298901696
Info	2024-10-06 21:54:04.418	storage_manager.cpp:95	msedge (8350)	"Protection storage path: :memory:"	mipns::StorageManager::StorageManager(const std::shared_ptr<mipns::MipContext>&, const string&, bool, const std::shared_ptr<mipns::LicenseStore>&, const std::shared_ptr<mipns::StorageDelegate>&)	134551298901696
Info	2024-10-06 21:54:04.418	protection_profile_impl.cpp:195	msedge (8350)	"Protection API configured to use default HttpDelegate"	mipns::ProtectionProfileImpl::ProtectionProfileImpl(const mipns::ProtectionProfile::Settings&, const std::shared_ptr<mipns::ProtectionEngineManager>&, const std::shared_ptr<mipns::HttpDelegate>&, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const std::shared_ptr<mipns::TelemetryContext>&)	134551298901696
Info	2024-10-06 21:54:04.418	protection_profile_impl.cpp:201	msedge (8350)	"Protection API configured to use default TaskDispatcherDelegate"	mipns::ProtectionProfileImpl::ProtectionProfileImpl(const mipns::ProtectionProfile::Settings&, const std::shared_ptr<mipns::ProtectionEngineManager>&, const std::shared_ptr<mipns::HttpDelegate>&, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const std::shared_ptr<mipns::TelemetryContext>&)	134551298901696
Info	2024-10-06 21:54:04.418	protection_profile_impl.cpp:170	msedge (8350)	"Ended API call: protection_profile_load"	static std::shared_ptr<mipns::ProtectionProfile> mipns::ProtectionProfile::Load(const mipns::ProtectionProfile::Settings&)	134551298901696
Info	2024-10-06 21:54:04.418	protection_profile_impl.cpp:301	msedge (8350)	"Starting API call: protection_profile_add_engine"	virtual std::shared_ptr<mipns::ProtectionEngine> mipns::ProtectionProfileImpl::AddEngine(const mipns::ProtectionEngine::Settings&)	134551298901696
Info	2024-10-06 21:54:04.418	protection_engine_manager.cpp:63	msedge (8350)	"Adding engine with ID 6f0f2fe4-6c14-4e39-8a72-f7a5af6edb18"	std::shared_ptr<mipns::ProtectionEngine> mipns::ProtectionEngineManager::AddEngine(const mipns::ProtectionEngine::Settings&, const std::shared_ptr<mipns::TelemetryContext>&)	134551298901696
Info	2024-10-06 21:54:04.419	protection_profile_impl.cpp:301	msedge (8350)	"Ended API call: protection_profile_add_engine"	virtual std::shared_ptr<mipns::ProtectionEngine> mipns::ProtectionProfileImpl::AddEngine(const mipns::ProtectionEngine::Settings&)	134551298901696
Info	2024-10-06 21:54:04.420	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:04.420	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:04.420	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:04.420	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get ID in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:04.420	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:04.420	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get TenantId in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:04.421	protection_engine_impl.cpp:1403	msedge (8350)	"Starting API call: protection_engine_create_consuming_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:04.421	protection_engine_impl.cpp:1403	msedge (8350)	"Starting API task: protection_engine_create_consuming_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:04.421	usage_restrictions_client.cpp:136	msedge (8350)	"Searching for cached usage restrictions response"	virtual std::shared_ptr<mipns::UsageRestrictionsResponse> mipns::UsageRestrictionsClient::FindCachedRestResponse(const mipns::UsageRestrictionsClientArgs&)	134551298901696
Info	2024-10-06 21:54:04.421	service_discovery_helper.cpp:170	msedge (8350)	"Using publishing license domains for service discovery"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:04.421	service_discovery_helper.cpp:201	msedge (8350)	"No redirected url found.  DNS will be checked"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:04.421	service_discovery_helper.cpp:219	msedge (8350)	"No cached DNS entry found"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:04.421	service_discovery_helper.cpp:254	msedge (8350)	"Service Details Domain: https://05579d0b-9e42-472b-af69-0e387411fa7d.rms.na.aadrm.com/_wmcs/licensing"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:04.421	service_discovery_helper.cpp:255	msedge (8350)	"Service Details DNS-resolved URL: https://api.aadrm.com"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:04.421	service_discovery_helper.cpp:279	msedge (8350)	"Service Details Endpoint Type: Azure RMS"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:04.421	service_discovery_helper.cpp:289	msedge (8350)	"Service discovery disabled. Using default service URLs"	std::shared_ptr<mipns::ServiceDiscoveryDetails> mipns::ServiceDiscoveryHelper::FindCachedServiceDiscoveryDetails(const std::shared_ptr<mipns::ServiceDetails>&)	134551298901696
Info	2024-10-06 21:54:04.421	protection_http_provider.cpp:45	msedge (8350)	"https://api.aadrm.com/my/v2/enduserlicenses is auto-approved and requires no user consent."	virtual bool mipns::ProtectionHttpProvider::RequestUserConsent(const string&, const mipns::Identity&, const string&)	134551298901696
Info	2024-10-06 21:54:04.421	auth_info_store.cpp:80	msedge (8350)	"Failed to find OAuth2 challenge in cache. Domain: api.aadrm.com IssuerId: 'b2591bd2-a19a-498b-87a4-b27e6b697e26'"	std::__cxx11::string mipns::AuthInfoStore::FindChallenge(const string&, const string&)	134551298901696
Info	2024-10-06 21:54:04.421	auth_request_transformer.cpp:48	msedge (8350)	"Failed to get auth token from cached auth header. Failed with: [InternalError: 'Cannot parse empty auth header or request URL']"	virtual void mipns::AuthRequestTransformer::TransformRequestPriorToInitialSend(mipns::HttpRequestBase&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:04.680	http_client_base.cpp:44	msedge (8350)	"HTTP response time (seconds): 0.257815 ID: 0bc5a7d0-d93e-40d4-9839-e459694c00d8"	mipns::HttpClientBase::SendAsync(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<void>&, const std::function<void(std::shared_ptr<mipns::HttpOperation>)>&)::<lambda(const std::shared_ptr<mipns::HttpOperation>&)>	134550594258624
Info	2024-10-06 21:54:04.680	http_director_impl.cpp:38	msedge (8350)	"Received HTTP response: ID: 0bc5a7d0-d93e-40d4-9839-e459694c00d8, Status: 401, Time: 2024-10-07T03:54:04Z, Body: {""Message"":""Authorization has been denied for this request.""}, Headers['Date'] = 'Mon, 07 Oct 2024 03:54:04 GMT', Headers['Pragma'] = 'no-cache', Headers['Expires'] = '-1', Headers['X-Cache'] = 'CONFIG_NOCACHE', Headers['Content-Type'] = 'application/json; charset=utf-8', Headers['X-MSEdge-Ref'] = 'Ref A: CA81B6E855A94AEBB11D7581EECC6BD0 Ref B: CH1AA2020605029 Ref C: 2024-10-07T03:54:04Z', Headers['X-Powered-By'] = 'ASP.NET', Headers['Cache-Control'] = 'no-cache', Headers['CorrelationId'] = '0bc5a7d0-d93e-40d4-9839-e459694c00d8', Headers['Content-Length'] = '61', Headers['WWW-Authenticate'] = 'Bearer resource=""https://aadrm.com"", realm=""50c4fd83-7d96-42ea-b5b2-82425b3355b5"", authorization=""https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize""', Headers['X-AspNet-Version'] = '4.0.30319', Headers['client-request-id'] = '0bc5a7d0-d93e-40d4-9839-e459694c00d8', Headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551298901696
Info	2024-10-06 21:54:04.680	auth_request_transformer.cpp:155	msedge (8350)	"Requesting auth token from app. Resource: 'https://aadrm.com', Authority: 'https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5', Scope: '50c4fd83-7d96-42ea-b5b2-82425b3355b5', Claims: ''"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:04.680	auth_request_transformer.cpp:169	msedge (8350)	"Authentication response time (seconds): 3.6666e-05"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.186	http_client_base.cpp:44	msedge (8350)	"HTTP response time (seconds): 1.50521 ID: d0a2ecbc-f739-429c-8065-91650aa456e2"	mipns::HttpClientBase::SendAsync(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<void>&, const std::function<void(std::shared_ptr<mipns::HttpOperation>)>&)::<lambda(const std::shared_ptr<mipns::HttpOperation>&)>	134550510372544
Info	2024-10-06 21:54:06.186	http_director_impl.cpp:38	msedge (8350)	"Received HTTP response: ID: d0a2ecbc-f739-429c-8065-91650aa456e2, Status: 200, Time: 2024-10-07T03:54:06Z, Body: SCRUBBED, Headers['Date'] = 'Mon, 07 Oct 2024 03:54:05 GMT', Headers['Pragma'] = 'no-cache', Headers['Expires'] = '-1', Headers['x-cache'] = 'CONFIG_NOCACHE', Headers['Content-Type'] = 'application/json; charset=utf-8', Headers['x-msedge-ref'] = 'Ref A: C2ED9AB7B5C74D48B9ABAF0A8B361CAA Ref B: CO1EDGE1419 Ref C: 2024-10-07T03:54:04Z', Headers['x-powered-by'] = 'ASP.NET, ASP.NET', Headers['Cache-Control'] = 'no-cache', Headers['correlationid'] = 'd0a2ecbc-f739-429c-8065-91650aa456e2', Headers['Content-Length'] = '1066', Headers['x-aspnet-version'] = '4.0.30319', Headers['client-request-id'] = 'd0a2ecbc-f739-429c-8065-91650aa456e2', Headers['strict-transport-security'] = 'max-age=31536000; includeSubDomains, max-age=31536000; includeSubDomains'"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551298901696
Info	2024-10-06 21:54:06.186	auth_info_store.cpp:50	msedge (8350)	"Adding OAuth2 challenge to cache. Domain: api.aadrm.com IssuerId: 'b2591bd2-a19a-498b-87a4-b27e6b697e26' Challenge: 'Bearer resource=""https://aadrm.com"", realm=""50c4fd83-7d96-42ea-b5b2-82425b3355b5"", authorization=""https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize""'"	void mipns::AuthInfoStore::AddChallenge(const string&, const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.187	usage_restrictions_client.cpp:253	msedge (8350)	"Examining a usage restrictions response:AccessStatus: AccessGrantedTemplateId: 00000000-0000-0000-0000-000000000000Name: Restricted AccessReferrer: Owner: Jason.Novak@myaccess.coopCipherMode: MICROSOFT.CBC4KAllowOfflineAccess: 0LicenseValidUntil: 2024-10-07T03:54:06ZContentId: eca9a0ae-757b-492f-960b-41891ff8a3a8LabelId: 00000000-0000-0000-0000-000000000000FromTemplate: 0"	void mipns::ValidateAndLogLicenseResponse(const mipns::UsageRestrictionsResponse&, bool, const std::shared_ptr<mipns::TelemetryContext>&, const std::shared_ptr<mipns::TelemetryManager>&)	134551298901696
Info	2024-10-06 21:54:06.187	api_utils.h:195	msedge (8350)	"Start calling success callback for API: protection_engine_create_consuming_protection_handler"	mipns::TryExecuteSuccessCallback(const SuccessFunc&, const ResultType&, bool, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const string&, const std::shared_ptr<mipns::ApiContext>&) [with SuccessFunc = mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)::<lambda(const std::shared_ptr<mipns::UsageRestrictionsResponse>&)>; ResultType = std::shared_ptr<mipns::UsageRestrictionsResponse>; std::__cxx11::string = std::__cxx11::basic_string<char>]::<lambda()>	134551298901696
Info	2024-10-06 21:54:06.187	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.187	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.187	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.187	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.187	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.188	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:06.188	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get ID in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	api_log_cache.cpp:58	msedge (8350)	"{{========================================= API CACHED LOGS BEGIN =========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551298901696
Info	2024-10-06 21:54:06.188	protection_engine_impl.cpp:1403	msedge (8350)	"Starting API call: protection_engine_create_consuming_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.188	protection_engine_impl.cpp:1403	msedge (8350)	"Starting API task: protection_engine_create_consuming_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)	134551298901696
Trace	2024-10-06 21:54:06.188	user_cert_store.cpp:92	msedge (8350)	"+UserCertStore::FindUserCert"	const string mipns::UserCertStore::FindUserCert(const string&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.188	persistent_store_impl.cpp:126	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: UserCertStore started"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	sqlite_storage_table.cpp:186	msedge (8350)	"SQLiteStorageTable::Find: Trying to find rows for table: UserCertStore"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	sqlite_storage_table.cpp:213	msedge (8350)	"Found no matching rows."	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	persistent_store_impl.cpp:136	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: UserCertStore completed"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	user_cert_store.cpp:102	msedge (8350)	"+UserCertStore::FindUserCert"	const string mipns::UserCertStore::FindUserCert(const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	usage_restrictions_client.cpp:136	msedge (8350)	"Searching for cached usage restrictions response"	virtual std::shared_ptr<mipns::UsageRestrictionsResponse> mipns::UsageRestrictionsClient::FindCachedRestResponse(const mipns::UsageRestrictionsClientArgs&)	134551298901696
Trace	2024-10-06 21:54:06.188	license_store.cpp:97	msedge (8350)	"+PersistentLicenseStore::FindLicense"	virtual std::__cxx11::string mipns::PersistentLicenseStore::FindLicense(const string&, const string&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.188	persistent_store_impl.cpp:126	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: LicenseStore started"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	sqlite_storage_table.cpp:186	msedge (8350)	"SQLiteStorageTable::Find: Trying to find rows for table: LicenseStore"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	sqlite_storage_table.cpp:213	msedge (8350)	"Found no matching rows."	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	persistent_store_impl.cpp:136	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: LicenseStore completed"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	license_store.cpp:110	msedge (8350)	"-PersistentLicenseStore::FindLicense"	virtual std::__cxx11::string mipns::PersistentLicenseStore::FindLicense(const string&, const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	service_discovery_helper.cpp:170	msedge (8350)	"Using publishing license domains for service discovery"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	service_discovery_helper.cpp:201	msedge (8350)	"No redirected url found.  DNS will be checked"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.188	dnsinfo_store.cpp:68	msedge (8350)	"+DnsInfoStore::FindDnsResult"	const string mipns::DnsInfoStore::FindDnsResult(const string&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.188	persistent_store_impl.cpp:126	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: DnsInfoStore started"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	sqlite_storage_table.cpp:186	msedge (8350)	"SQLiteStorageTable::Find: Trying to find rows for table: DnsInfoStore"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	sqlite_storage_table.cpp:213	msedge (8350)	"Found no matching rows."	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	persistent_store_impl.cpp:136	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: DnsInfoStore completed"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	dnsinfo_store.cpp:78	msedge (8350)	"-DnsInfoStore::FindDnsResult"	const string mipns::DnsInfoStore::FindDnsResult(const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	service_discovery_helper.cpp:219	msedge (8350)	"No cached DNS entry found"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	service_discovery_helper.cpp:254	msedge (8350)	"Service Details Domain: https://05579d0b-9e42-472b-af69-0e387411fa7d.rms.na.aadrm.com/_wmcs/licensing"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	service_discovery_helper.cpp:255	msedge (8350)	"Service Details DNS-resolved URL: https://api.aadrm.com"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	service_discovery_helper.cpp:279	msedge (8350)	"Service Details Endpoint Type: Azure RMS"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	service_discovery_helper.cpp:289	msedge (8350)	"Service discovery disabled. Using default service URLs"	std::shared_ptr<mipns::ServiceDiscoveryDetails> mipns::ServiceDiscoveryHelper::FindCachedServiceDiscoveryDetails(const std::shared_ptr<mipns::ServiceDetails>&)	134551298901696
Trace	2024-10-06 21:54:06.188	json_serializer_impl.cpp:383	msedge (8350)	" +JsonSerializer::SerializePublishingLicenseRequest"	std::vector<unsigned char> mipns::JsonSerializer::SerializePublishingLicenseRequest(const mipns::PublishingLicenseRequest&)	134551298901696
Trace	2024-10-06 21:54:06.188	json_serializer_impl.cpp:391	msedge (8350)	"Base64 Encoded Publishing License: "	std::vector<unsigned char> mipns::JsonSerializer::SerializePublishingLicenseRequest(const mipns::PublishingLicenseRequest&)	134551298901696
Trace	2024-10-06 21:54:06.188	json_serializer_impl.cpp:405	msedge (8350)	" -JsonSerializer::SerializePublishingLicenseRequest"	std::vector<unsigned char> mipns::JsonSerializer::SerializePublishingLicenseRequest(const mipns::PublishingLicenseRequest&)	134551298901696
Info	2024-10-06 21:54:06.188	protection_http_provider.cpp:45	msedge (8350)	"https://api.aadrm.com/my/v2/enduserlicenses is auto-approved and requires no user consent."	virtual bool mipns::ProtectionHttpProvider::RequestUserConsent(const string&, const mipns::Identity&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.188	persistent_store_impl.cpp:126	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: AuthInfoStore started"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	sqlite_storage_table.cpp:186	msedge (8350)	"SQLiteStorageTable::Find: Trying to find rows for table: AuthInfoStore"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	sqlite_storage_table.cpp:213	msedge (8350)	"Found no matching rows."	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	persistent_store_impl.cpp:136	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: AuthInfoStore completed"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Info	2024-10-06 21:54:06.188	auth_info_store.cpp:80	msedge (8350)	"Failed to find OAuth2 challenge in cache. Domain: api.aadrm.com IssuerId: 'b2591bd2-a19a-498b-87a4-b27e6b697e26'"	std::__cxx11::string mipns::AuthInfoStore::FindChallenge(const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	auth_request_transformer.cpp:48	msedge (8350)	"Failed to get auth token from cached auth header. Failed with: [InternalError: 'Cannot parse empty auth header or request URL']"	virtual void mipns::AuthRequestTransformer::TransformRequestPriorToInitialSend(mipns::HttpRequestBase&, const std::shared_ptr<void>&)	134551298901696
Trace	2024-10-06 21:54:06.188	http_client_base.cpp:80	msedge (8350)	"Adding HTTP operation '0bc5a7d0-d93e-40d4-9839-e459694c00d8'"	void mipns::HttpClientBase::AddOperation(const std::shared_ptr<mipns::HttpOperationBase>&, const std::function<void(const std::shared_ptr<mipns::HttpOperation>&)>&)	134551298901696
Trace	2024-10-06 21:54:06.188	http_client_base.cpp:92	msedge (8350)	"Removing HTTP operation '0bc5a7d0-d93e-40d4-9839-e459694c00d8'"	bool mipns::HttpClientBase::RemoveOperation(const string&)	134550594258624
Info	2024-10-06 21:54:06.188	http_client_base.cpp:44	msedge (8350)	"HTTP response time (seconds): 0.257815 ID: 0bc5a7d0-d93e-40d4-9839-e459694c00d8"	mipns::HttpClientBase::SendAsync(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<void>&, const std::function<void(std::shared_ptr<mipns::HttpOperation>)>&)::<lambda(const std::shared_ptr<mipns::HttpOperation>&)>	134550594258624
Trace	2024-10-06 21:54:06.188	http_director_impl.cpp:33	msedge (8350)	"HTTP callback executed on thread 134551298901696"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551298901696
Info	2024-10-06 21:54:06.188	http_director_impl.cpp:38	msedge (8350)	"Received HTTP response: ID: 0bc5a7d0-d93e-40d4-9839-e459694c00d8, Status: 401, Time: 2024-10-07T03:54:04Z, Body: {""Message"":""Authorization has been denied for this request.""}, Headers['Date'] = 'Mon, 07 Oct 2024 03:54:04 GMT', Headers['Pragma'] = 'no-cache', Headers['Expires'] = '-1', Headers['X-Cache'] = 'CONFIG_NOCACHE', Headers['Content-Type'] = 'application/json; charset=utf-8', Headers['X-MSEdge-Ref'] = 'Ref A: CA81B6E855A94AEBB11D7581EECC6BD0 Ref B: CH1AA2020605029 Ref C: 2024-10-07T03:54:04Z', Headers['X-Powered-By'] = 'ASP.NET', Headers['Cache-Control'] = 'no-cache', Headers['CorrelationId'] = '0bc5a7d0-d93e-40d4-9839-e459694c00d8', Headers['Content-Length'] = '61', Headers['WWW-Authenticate'] = 'Bearer resource=""https://aadrm.com"", realm=""50c4fd83-7d96-42ea-b5b2-82425b3355b5"", authorization=""https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize""', Headers['X-AspNet-Version'] = '4.0.30319', Headers['client-request-id'] = '0bc5a7d0-d93e-40d4-9839-e459694c00d8', Headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551298901696
Trace	2024-10-06 21:54:06.188	protection_auth_challenge_provider.cpp:223	msedge (8350)	"Trimming '/oauth2/authorize' from authority 'https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize'"	virtual std::shared_ptr<mipns::AuthDelegate::OAuth2Challenge> mipns::ProtectionAuthChallengeProvider::GetChallengeFromAuthHeader(const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	auth_request_transformer.cpp:155	msedge (8350)	"Requesting auth token from app. Resource: 'https://aadrm.com', Authority: 'https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5', Scope: '50c4fd83-7d96-42ea-b5b2-82425b3355b5', Claims: ''"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.188	auth_request_transformer.cpp:169	msedge (8350)	"Authentication response time (seconds): 3.6666e-05"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551298901696
Trace	2024-10-06 21:54:06.188	http_client_base.cpp:80	msedge (8350)	"Adding HTTP operation 'd0a2ecbc-f739-429c-8065-91650aa456e2'"	void mipns::HttpClientBase::AddOperation(const std::shared_ptr<mipns::HttpOperationBase>&, const std::function<void(const std::shared_ptr<mipns::HttpOperation>&)>&)	134551298901696
Trace	2024-10-06 21:54:06.188	http_client_base.cpp:92	msedge (8350)	"Removing HTTP operation 'd0a2ecbc-f739-429c-8065-91650aa456e2'"	bool mipns::HttpClientBase::RemoveOperation(const string&)	134550510372544
Info	2024-10-06 21:54:06.188	http_client_base.cpp:44	msedge (8350)	"HTTP response time (seconds): 1.50521 ID: d0a2ecbc-f739-429c-8065-91650aa456e2"	mipns::HttpClientBase::SendAsync(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<void>&, const std::function<void(std::shared_ptr<mipns::HttpOperation>)>&)::<lambda(const std::shared_ptr<mipns::HttpOperation>&)>	134550510372544
Trace	2024-10-06 21:54:06.188	http_director_impl.cpp:33	msedge (8350)	"HTTP callback executed on thread 134551298901696"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551298901696
Info	2024-10-06 21:54:06.188	http_director_impl.cpp:38	msedge (8350)	"Received HTTP response: ID: d0a2ecbc-f739-429c-8065-91650aa456e2, Status: 200, Time: 2024-10-07T03:54:06Z, Body: SCRUBBED, Headers['Date'] = 'Mon, 07 Oct 2024 03:54:05 GMT', Headers['Pragma'] = 'no-cache', Headers['Expires'] = '-1', Headers['x-cache'] = 'CONFIG_NOCACHE', Headers['Content-Type'] = 'application/json; charset=utf-8', Headers['x-msedge-ref'] = 'Ref A: C2ED9AB7B5C74D48B9ABAF0A8B361CAA Ref B: CO1EDGE1419 Ref C: 2024-10-07T03:54:04Z', Headers['x-powered-by'] = 'ASP.NET, ASP.NET', Headers['Cache-Control'] = 'no-cache', Headers['correlationid'] = 'd0a2ecbc-f739-429c-8065-91650aa456e2', Headers['Content-Length'] = '1066', Headers['x-aspnet-version'] = '4.0.30319', Headers['client-request-id'] = 'd0a2ecbc-f739-429c-8065-91650aa456e2', Headers['strict-transport-security'] = 'max-age=31536000; includeSubDomains, max-age=31536000; includeSubDomains'"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551298901696
Trace	2024-10-06 21:54:06.188	protection_auth_challenge_provider.cpp:223	msedge (8350)	"Trimming '/oauth2/authorize' from authority 'https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize'"	virtual std::shared_ptr<mipns::AuthDelegate::OAuth2Challenge> mipns::ProtectionAuthChallengeProvider::GetChallengeFromAuthHeader(const string&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.188	protection_auth_challenge_provider.cpp:223	msedge (8350)	"Trimming '/oauth2/authorize' from authority 'https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize'"	virtual std::shared_ptr<mipns::AuthDelegate::OAuth2Challenge> mipns::ProtectionAuthChallengeProvider::GetChallengeFromAuthHeader(const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	auth_info_store.cpp:50	msedge (8350)	"Adding OAuth2 challenge to cache. Domain: api.aadrm.com IssuerId: 'b2591bd2-a19a-498b-87a4-b27e6b697e26' Challenge: 'Bearer resource=""https://aadrm.com"", realm=""50c4fd83-7d96-42ea-b5b2-82425b3355b5"", authorization=""https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize""'"	void mipns::AuthInfoStore::AddChallenge(const string&, const string&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.188	persistent_store_impl.cpp:66	msedge (8350)	"PersistentStoreImpl::InsertOrReplace: Trying to insert a row for table: AuthInfoStore started"	virtual void mipns::PersistentStoreImpl::InsertOrReplace(const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	sqlite_storage_table.cpp:69	msedge (8350)	"SQLiteStorageTable::InsertOrReplace: Trying to insert a row for table: AuthInfoStore"	virtual void mipns::SQLiteStorageTable::InsertOrReplace(const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	persistent_store_impl.cpp:74	msedge (8350)	"PersistentStoreImpl::InsertOrReplace: Trying to insert a row for table: AuthInfoStore completed"	virtual void mipns::PersistentStoreImpl::InsertOrReplace(const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.188	json_serializer_impl.cpp:821	msedge (8350)	" +JsonSerializer::DeserializeUsageRestrictionsResponse"	mipns::UsageRestrictionsResponse mipns::JsonSerializer::DeserializeUsageRestrictionsResponse(const char*, size_t)	134551298901696
Trace	2024-10-06 21:54:06.188	json_serializer_impl.cpp:1026	msedge (8350)	" -JsonSerializer::DeserializeUsageRestrictionsResponse"	mipns::UsageRestrictionsResponse mipns::JsonSerializer::DeserializeUsageRestrictionsResponse(const char*, size_t)	134551298901696
Info	2024-10-06 21:54:06.188	usage_restrictions_client.cpp:253	msedge (8350)	"Examining a usage restrictions response:AccessStatus: AccessGrantedTemplateId: 00000000-0000-0000-0000-000000000000Name: Restricted AccessReferrer: Owner: Jason.Novak@myaccess.coopCipherMode: MICROSOFT.CBC4KAllowOfflineAccess: 0LicenseValidUntil: 2024-10-07T03:54:06ZContentId: eca9a0ae-757b-492f-960b-41891ff8a3a8LabelId: 00000000-0000-0000-0000-000000000000FromTemplate: 0"	void mipns::ValidateAndLogLicenseResponse(const mipns::UsageRestrictionsResponse&, bool, const std::shared_ptr<mipns::TelemetryContext>&, const std::shared_ptr<mipns::TelemetryManager>&)	134551298901696
Info	2024-10-06 21:54:06.188	api_utils.h:195	msedge (8350)	"Start calling success callback for API: protection_engine_create_consuming_protection_handler"	mipns::TryExecuteSuccessCallback(const SuccessFunc&, const ResultType&, bool, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const string&, const std::shared_ptr<mipns::ApiContext>&) [with SuccessFunc = mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)::<lambda(const std::shared_ptr<mipns::UsageRestrictionsResponse>&)>; ResultType = std::shared_ptr<mipns::UsageRestrictionsResponse>; std::__cxx11::string = std::__cxx11::basic_string<char>]::<lambda()>	134551298901696
Trace	2024-10-06 21:54:06.188	license_parser.cpp:736	msedge (8350)	"+LicenseParser::GetPublishingLicenseAsString"	static std::__cxx11::string mipns::LicenseParser::GetPublishingLicenseAsString(const std::vector<unsigned char>&)	134551298901696
Trace	2024-10-06 21:54:06.188	license_parser.cpp:755	msedge (8350)	"-LicenseParser::GetPublishingLicenseAsString"	static std::__cxx11::string mipns::LicenseParser::GetPublishingLicenseAsString(const std::vector<unsigned char>&)	134551298901696
Trace	2024-10-06 21:54:06.188	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY/DISTRIBUTIONPOINT/OBJECT[@type=      'Referral-Info']/ADDRESS[@type='URL']/text()]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.188	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Trace	2024-10-06 21:54:06.188	license_parser.cpp:312	msedge (8350)	"Could not get referral URL from license"	std::__cxx11::string {anonymous}::GetReferralInfoFromXrmlLicense(const mipns::xml::XmlDocument&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.188	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY/DESCRIPTOR]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.188	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Trace	2024-10-06 21:54:06.188	license_parser.cpp:455	msedge (8350)	"Could not get descriptor node from xml license"	std::shared_ptr<mipns::LicenseDescriptorImpl> {anonymous}::GetLicenseDescriptor(const mipns::xml::XmlDocument&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.188	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY/DISTRIBUTIONPOINT/OBJECT[@type=      'DKE-Customer-URL']/DKEADDRESS[@type='URL']/text()]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.188	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Trace	2024-10-06 21:54:06.188	license_parser.cpp:325	msedge (8350)	"Double key url not found"	std::__cxx11::string {anonymous}::GetDoubleKeyUrlFromXrmlLicense(const mipns::xml::XmlDocument&)	134551298901696
Trace	2024-10-06 21:54:06.188	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY/WORK/PRECONDITIONLIST/TIME/INTERVALTIME]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.188	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Trace	2024-10-06 21:54:06.188	license_parser.cpp:342	msedge (8350)	"Content valid for days value not found"	mipns::chrono::Days {anonymous}::GetContentValidForDays(const mipns::xml::XmlDocument&)	134551298901696
Trace	2024-10-06 21:54:06.188	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY/WORK/PRECONDITIONLIST/TIME/RANGETIME/UNTIL]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.188	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Trace	2024-10-06 21:54:06.188	license_parser.cpp:401	msedge (8350)	"Content valid until date value not found"	std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long int, std::ratio<1, 1000000000> > > {anonymous}::GetContentValidUntilDate(const mipns::xml::XmlDocument&)	134551298901696
Trace	2024-10-06 21:54:06.188	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY[@type='Microsoft Official Rights Template']/AUTHENTICATEDDATA[@name='ID' and @id='LABEL']/text()]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.188	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:06.188	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get ID in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:06.188	api_log_cache.cpp:78	msedge (8350)	"{{========================================= API CACHED LOGS END ==========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551298901696
Info	2024-10-06 21:54:06.188	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:06.189	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get TenantId in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:06.189	api_log_cache.cpp:58	msedge (8350)	"{{========================================= API CACHED LOGS BEGIN =========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551298901696
Trace	2024-10-06 21:54:06.189	license_parser.cpp:376	msedge (8350)	"Could not get Label ID from xml publish license"	mipns::LabelInfo {anonymous}::GetLabelInfo(const mipns::xml::XmlDocument&, bool)	134551298901696
Trace	2024-10-06 21:54:06.189	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY[@type='Microsoft Official Rights Template']/AUTHENTICATEDDATA[@name='TenantId' and @id='LABEL']/text()]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.189	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:06.189	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get TenantId in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:06.189	api_log_cache.cpp:78	msedge (8350)	"{{========================================= API CACHED LOGS END ==========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551298901696
Info	2024-10-06 21:54:06.189	api_utils.h:197	msedge (8350)	"Ended calling success callback for API: protection_engine_create_consuming_protection_handler"	mipns::TryExecuteSuccessCallback(const SuccessFunc&, const ResultType&, bool, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const string&, const std::shared_ptr<mipns::ApiContext>&) [with SuccessFunc = mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)::<lambda(const std::shared_ptr<mipns::UsageRestrictionsResponse>&)>; ResultType = std::shared_ptr<mipns::UsageRestrictionsResponse>; std::__cxx11::string = std::__cxx11::basic_string<char>]::<lambda()>	134551298901696
Info	2024-10-06 21:54:06.189	http_director_impl.cpp:141	msedge (8350)	"Sending HTTP request: ID: d0a2ecbc-f739-429c-8065-91650aa456e2, Type: POST, Url: https://api.aadrm.com/my/v2/enduserlicenses, Body Size: 9708, Headers['Accept'] = 'application/json', Headers['Content-Type'] = 'application/json', Headers['Authorization'] = 'Name:Jason Novak;UOID:ae2e01c8-24d6-49ab-ad1c-90678a93ca00;Tenant:50c4fd83-7d96-42ea-b5b2-82425b3355b5;Audience:https://aadrm.com;Scopes:user_impersonation;, Headers['Accept-Language'] = 'en-US', Headers['x-ms-rms-request-id'] = '0bc5a7d0-d93e-40d4-9839-e459694c00d8', Headers['x-ms-rms-platform-id'] = 'AppName=Microsoft Edge;AppVersion=129.0.2792.79;DevicePlatform=WindowsStore;SDKVersion=4.3;UniqueId=ecd6b820-32c2-49b6-98a6-444530e5a77a;OsName=Arch Linux;OsVersion=6.11.2-arch1-1;MipVersion=1.14.110;'"	void mipns::HttpDirectorImpl::DoSendHttp(bool, const std::shared_ptr<mipns::HttpTelemetryHelper>&, const std::shared_ptr<mipns::HttpRequestBase>&, const std::shared_ptr<void>&, const std::function<void(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<mipns::HttpResponse>&)>&, const std::function<void(const std::__exception_ptr::exception_ptr&)>&)	134551298901696
Info	2024-10-06 21:54:06.189	http_director_impl.cpp:141	msedge (8350)	"Sending HTTP request: ID: 0bc5a7d0-d93e-40d4-9839-e459694c00d8, Type: POST, Url: https://api.aadrm.com/my/v2/enduserlicenses, Body Size: 9708, Headers['Accept'] = 'application/json', Headers['Content-Type'] = 'application/json', Headers['Accept-Language'] = 'en-US', Headers['x-ms-rms-platform-id'] = 'AppName=Microsoft Edge;AppVersion=129.0.2792.79;DevicePlatform=WindowsStore;SDKVersion=4.3;UniqueId=ecd6b820-32c2-49b6-98a6-444530e5a77a;OsName=Arch Linux;OsVersion=6.11.2-arch1-1;MipVersion=1.14.110;'"	void mipns::HttpDirectorImpl::DoSendHttp(bool, const std::shared_ptr<mipns::HttpTelemetryHelper>&, const std::shared_ptr<mipns::HttpRequestBase>&, const std::shared_ptr<void>&, const std::function<void(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<mipns::HttpResponse>&)>&, const std::function<void(const std::__exception_ptr::exception_ptr&)>&)	134551298901696
Info	2024-10-06 21:54:06.189	protection_engine_impl.cpp:1403	msedge (8350)	"Ended API call: protection_engine_create_consuming_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.189	protection_handler_impl.cpp:427	msedge (8350)	" +ProtectionHandlerImpl::DecryptBuffer"	virtual int64_t mipns::ProtectionHandlerImpl::DecryptBuffer(int64_t, const uint8_t*, int64_t, uint8_t*, int64_t, bool)	134551298901696
Info	2024-10-06 21:54:06.189	protection_handler_impl.cpp:441	msedge (8350)	" -ProtectionHandlerImpl::DecryptBuffer"	virtual int64_t mipns::ProtectionHandlerImpl::DecryptBuffer(int64_t, const uint8_t*, int64_t, uint8_t*, int64_t, bool)	134551298901696
Info	2024-10-06 21:54:06.189	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.189	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.189	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:06.189	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get ID in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:06.190	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:06.190	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get TenantId in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:06.190	protection_engine_impl.cpp:1403	msedge (8350)	"Starting API call: protection_engine_create_consuming_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.190	protection_engine_impl.cpp:1403	msedge (8350)	"Starting API task: protection_engine_create_consuming_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.190	usage_restrictions_client.cpp:136	msedge (8350)	"Searching for cached usage restrictions response"	virtual std::shared_ptr<mipns::UsageRestrictionsResponse> mipns::UsageRestrictionsClient::FindCachedRestResponse(const mipns::UsageRestrictionsClientArgs&)	134551298901696
Info	2024-10-06 21:54:06.190	service_discovery_helper.cpp:170	msedge (8350)	"Using publishing license domains for service discovery"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.190	service_discovery_helper.cpp:201	msedge (8350)	"No redirected url found.  DNS will be checked"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.190	service_discovery_helper.cpp:219	msedge (8350)	"No cached DNS entry found"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.190	service_discovery_helper.cpp:254	msedge (8350)	"Service Details Domain: https://05579d0b-9e42-472b-af69-0e387411fa7d.rms.na.aadrm.com/_wmcs/licensing"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.190	service_discovery_helper.cpp:255	msedge (8350)	"Service Details DNS-resolved URL: https://api.aadrm.com"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.190	service_discovery_helper.cpp:279	msedge (8350)	"Service Details Endpoint Type: Azure RMS"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.190	service_discovery_helper.cpp:289	msedge (8350)	"Service discovery disabled. Using default service URLs"	std::shared_ptr<mipns::ServiceDiscoveryDetails> mipns::ServiceDiscoveryHelper::FindCachedServiceDiscoveryDetails(const std::shared_ptr<mipns::ServiceDetails>&)	134551298901696
Info	2024-10-06 21:54:06.190	protection_http_provider.cpp:45	msedge (8350)	"https://api.aadrm.com/my/v2/enduserlicenses is auto-approved and requires no user consent."	virtual bool mipns::ProtectionHttpProvider::RequestUserConsent(const string&, const mipns::Identity&, const string&)	134551298901696
Info	2024-10-06 21:54:06.190	auth_info_store.cpp:76	msedge (8350)	"Found OAuth2 challenge in cache. Domain: api.aadrm.com IssuerId: 'b2591bd2-a19a-498b-87a4-b27e6b697e26' Challenge: 'Bearer resource=""https://aadrm.com"", realm=""50c4fd83-7d96-42ea-b5b2-82425b3355b5"", authorization=""https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize""'"	std::__cxx11::string mipns::AuthInfoStore::FindChallenge(const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.190	auth_request_transformer.cpp:155	msedge (8350)	"Requesting auth token from app. Resource: 'https://aadrm.com', Authority: 'https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5', Scope: '50c4fd83-7d96-42ea-b5b2-82425b3355b5', Claims: ''"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.190	auth_request_transformer.cpp:169	msedge (8350)	"Authentication response time (seconds): 2.4514e-05"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.547	http_client_base.cpp:44	msedge (8350)	"HTTP response time (seconds): 0.3559 ID: 77cea57b-b348-445d-a78b-31fa7bf34dd5"	mipns::HttpClientBase::SendAsync(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<void>&, const std::function<void(std::shared_ptr<mipns::HttpOperation>)>&)::<lambda(const std::shared_ptr<mipns::HttpOperation>&)>	134550562801344
Info	2024-10-06 21:54:06.547	http_director_impl.cpp:38	msedge (8350)	"Received HTTP response: ID: 77cea57b-b348-445d-a78b-31fa7bf34dd5, Status: 200, Time: 2024-10-07T03:54:06Z, Body: SCRUBBED, Headers['Date'] = 'Mon, 07 Oct 2024 03:54:05 GMT', Headers['Pragma'] = 'no-cache', Headers['Expires'] = '-1', Headers['X-Cache'] = 'CONFIG_NOCACHE', Headers['Content-Type'] = 'application/json; charset=utf-8', Headers['X-MSEdge-Ref'] = 'Ref A: 58AFD4F47BFC497FB8624808B79F42DB Ref B: CH1AA2020604025 Ref C: 2024-10-07T03:54:06Z', Headers['X-Powered-By'] = 'ASP.NET', Headers['Cache-Control'] = 'no-cache', Headers['CorrelationId'] = '77cea57b-b348-445d-a78b-31fa7bf34dd5', Headers['Content-Length'] = '1066', Headers['X-AspNet-Version'] = '4.0.30319', Headers['client-request-id'] = '77cea57b-b348-445d-a78b-31fa7bf34dd5', Headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551298901696
Info	2024-10-06 21:54:06.547	usage_restrictions_client.cpp:253	msedge (8350)	"Examining a usage restrictions response:AccessStatus: AccessGrantedTemplateId: 00000000-0000-0000-0000-000000000000Name: Restricted AccessReferrer: Owner: Jason.Novak@myaccess.coopCipherMode: MICROSOFT.CBC4KAllowOfflineAccess: 0LicenseValidUntil: 2024-10-07T03:54:06ZContentId: eca9a0ae-757b-492f-960b-41891ff8a3a8LabelId: 00000000-0000-0000-0000-000000000000FromTemplate: 0"	void mipns::ValidateAndLogLicenseResponse(const mipns::UsageRestrictionsResponse&, bool, const std::shared_ptr<mipns::TelemetryContext>&, const std::shared_ptr<mipns::TelemetryManager>&)	134551298901696
Info	2024-10-06 21:54:06.547	api_utils.h:195	msedge (8350)	"Start calling success callback for API: protection_engine_create_consuming_protection_handler"	mipns::TryExecuteSuccessCallback(const SuccessFunc&, const ResultType&, bool, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const string&, const std::shared_ptr<mipns::ApiContext>&) [with SuccessFunc = mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)::<lambda(const std::shared_ptr<mipns::UsageRestrictionsResponse>&)>; ResultType = std::shared_ptr<mipns::UsageRestrictionsResponse>; std::__cxx11::string = std::__cxx11::basic_string<char>]::<lambda()>	134551298901696
Info	2024-10-06 21:54:06.547	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.547	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.547	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.547	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.547	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Info	2024-10-06 21:54:06.547	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:06.547	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get ID in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:06.547	api_log_cache.cpp:58	msedge (8350)	"{{========================================= API CACHED LOGS BEGIN =========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551298901696
Info	2024-10-06 21:54:06.547	protection_engine_impl.cpp:1403	msedge (8350)	"Starting API call: protection_engine_create_consuming_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.547	protection_engine_impl.cpp:1403	msedge (8350)	"Starting API task: protection_engine_create_consuming_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)	134551298901696
Trace	2024-10-06 21:54:06.547	user_cert_store.cpp:92	msedge (8350)	"+UserCertStore::FindUserCert"	const string mipns::UserCertStore::FindUserCert(const string&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.547	persistent_store_impl.cpp:126	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: UserCertStore started"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.547	sqlite_storage_table.cpp:186	msedge (8350)	"SQLiteStorageTable::Find: Trying to find rows for table: UserCertStore"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.547	sqlite_storage_table.cpp:213	msedge (8350)	"Found no matching rows."	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.547	persistent_store_impl.cpp:136	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: UserCertStore completed"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.547	user_cert_store.cpp:102	msedge (8350)	"+UserCertStore::FindUserCert"	const string mipns::UserCertStore::FindUserCert(const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.547	usage_restrictions_client.cpp:136	msedge (8350)	"Searching for cached usage restrictions response"	virtual std::shared_ptr<mipns::UsageRestrictionsResponse> mipns::UsageRestrictionsClient::FindCachedRestResponse(const mipns::UsageRestrictionsClientArgs&)	134551298901696
Trace	2024-10-06 21:54:06.547	license_store.cpp:97	msedge (8350)	"+PersistentLicenseStore::FindLicense"	virtual std::__cxx11::string mipns::PersistentLicenseStore::FindLicense(const string&, const string&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.547	persistent_store_impl.cpp:126	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: LicenseStore started"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.547	sqlite_storage_table.cpp:186	msedge (8350)	"SQLiteStorageTable::Find: Trying to find rows for table: LicenseStore"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.547	sqlite_storage_table.cpp:213	msedge (8350)	"Found no matching rows."	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.547	persistent_store_impl.cpp:136	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: LicenseStore completed"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.547	license_store.cpp:110	msedge (8350)	"-PersistentLicenseStore::FindLicense"	virtual std::__cxx11::string mipns::PersistentLicenseStore::FindLicense(const string&, const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	service_discovery_helper.cpp:170	msedge (8350)	"Using publishing license domains for service discovery"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	service_discovery_helper.cpp:201	msedge (8350)	"No redirected url found.  DNS will be checked"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.548	dnsinfo_store.cpp:68	msedge (8350)	"+DnsInfoStore::FindDnsResult"	const string mipns::DnsInfoStore::FindDnsResult(const string&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.548	persistent_store_impl.cpp:126	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: DnsInfoStore started"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.548	sqlite_storage_table.cpp:186	msedge (8350)	"SQLiteStorageTable::Find: Trying to find rows for table: DnsInfoStore"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.548	sqlite_storage_table.cpp:213	msedge (8350)	"Found no matching rows."	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.548	persistent_store_impl.cpp:136	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: DnsInfoStore completed"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.548	dnsinfo_store.cpp:78	msedge (8350)	"-DnsInfoStore::FindDnsResult"	const string mipns::DnsInfoStore::FindDnsResult(const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	service_discovery_helper.cpp:219	msedge (8350)	"No cached DNS entry found"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	service_discovery_helper.cpp:254	msedge (8350)	"Service Details Domain: https://05579d0b-9e42-472b-af69-0e387411fa7d.rms.na.aadrm.com/_wmcs/licensing"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	service_discovery_helper.cpp:255	msedge (8350)	"Service Details DNS-resolved URL: https://api.aadrm.com"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	service_discovery_helper.cpp:279	msedge (8350)	"Service Details Endpoint Type: Azure RMS"	std::shared_ptr<mipns::ServiceDetails> mipns::ServiceDiscoveryHelper::GetServiceDetailsWithLicense(const std::vector<std::__cxx11::basic_string<char> >&, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	service_discovery_helper.cpp:289	msedge (8350)	"Service discovery disabled. Using default service URLs"	std::shared_ptr<mipns::ServiceDiscoveryDetails> mipns::ServiceDiscoveryHelper::FindCachedServiceDiscoveryDetails(const std::shared_ptr<mipns::ServiceDetails>&)	134551298901696
Trace	2024-10-06 21:54:06.548	json_serializer_impl.cpp:383	msedge (8350)	" +JsonSerializer::SerializePublishingLicenseRequest"	std::vector<unsigned char> mipns::JsonSerializer::SerializePublishingLicenseRequest(const mipns::PublishingLicenseRequest&)	134551298901696
Trace	2024-10-06 21:54:06.548	json_serializer_impl.cpp:391	msedge (8350)	"Base64 Encoded Publishing License: "	std::vector<unsigned char> mipns::JsonSerializer::SerializePublishingLicenseRequest(const mipns::PublishingLicenseRequest&)	134551298901696
Trace	2024-10-06 21:54:06.548	json_serializer_impl.cpp:405	msedge (8350)	" -JsonSerializer::SerializePublishingLicenseRequest"	std::vector<unsigned char> mipns::JsonSerializer::SerializePublishingLicenseRequest(const mipns::PublishingLicenseRequest&)	134551298901696
Info	2024-10-06 21:54:06.548	protection_http_provider.cpp:45	msedge (8350)	"https://api.aadrm.com/my/v2/enduserlicenses is auto-approved and requires no user consent."	virtual bool mipns::ProtectionHttpProvider::RequestUserConsent(const string&, const mipns::Identity&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.548	persistent_store_impl.cpp:126	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: AuthInfoStore started"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.548	sqlite_storage_table.cpp:186	msedge (8350)	"SQLiteStorageTable::Find: Trying to find rows for table: AuthInfoStore"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::SQLiteStorageTable::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Trace	2024-10-06 21:54:06.548	persistent_store_impl.cpp:136	msedge (8350)	"PersistentStoreImpl::Find: Trying to find rows for table: AuthInfoStore completed"	virtual std::vector<std::vector<std::__cxx11::basic_string<char> > > mipns::PersistentStoreImpl::Find(const std::vector<std::__cxx11::basic_string<char> >&, const std::vector<std::__cxx11::basic_string<char> >&)	134551298901696
Info	2024-10-06 21:54:06.548	auth_info_store.cpp:76	msedge (8350)	"Found OAuth2 challenge in cache. Domain: api.aadrm.com IssuerId: 'b2591bd2-a19a-498b-87a4-b27e6b697e26' Challenge: 'Bearer resource=""https://aadrm.com"", realm=""50c4fd83-7d96-42ea-b5b2-82425b3355b5"", authorization=""https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize""'"	std::__cxx11::string mipns::AuthInfoStore::FindChallenge(const string&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.548	protection_auth_challenge_provider.cpp:223	msedge (8350)	"Trimming '/oauth2/authorize' from authority 'https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize'"	virtual std::shared_ptr<mipns::AuthDelegate::OAuth2Challenge> mipns::ProtectionAuthChallengeProvider::GetChallengeFromAuthHeader(const string&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.548	protection_auth_challenge_provider.cpp:223	msedge (8350)	"Trimming '/oauth2/authorize' from authority 'https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5/oauth2/authorize'"	virtual std::shared_ptr<mipns::AuthDelegate::OAuth2Challenge> mipns::ProtectionAuthChallengeProvider::GetChallengeFromAuthHeader(const string&, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	auth_request_transformer.cpp:155	msedge (8350)	"Requesting auth token from app. Resource: 'https://aadrm.com', Authority: 'https://login.windows.net/50c4fd83-7d96-42ea-b5b2-82425b3355b5', Scope: '50c4fd83-7d96-42ea-b5b2-82425b3355b5', Claims: ''"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.548	auth_request_transformer.cpp:169	msedge (8350)	"Authentication response time (seconds): 2.4514e-05"	std::__cxx11::string mipns::AuthRequestTransformer::GetAuthToken(const mipns::AuthDelegate::OAuth2Challenge&, const std::shared_ptr<void>&)	134551298901696
Trace	2024-10-06 21:54:06.548	http_client_base.cpp:80	msedge (8350)	"Adding HTTP operation '77cea57b-b348-445d-a78b-31fa7bf34dd5'"	void mipns::HttpClientBase::AddOperation(const std::shared_ptr<mipns::HttpOperationBase>&, const std::function<void(const std::shared_ptr<mipns::HttpOperation>&)>&)	134551298901696
Trace	2024-10-06 21:54:06.548	http_client_base.cpp:92	msedge (8350)	"Removing HTTP operation '77cea57b-b348-445d-a78b-31fa7bf34dd5'"	bool mipns::HttpClientBase::RemoveOperation(const string&)	134550562801344
Info	2024-10-06 21:54:06.548	http_client_base.cpp:44	msedge (8350)	"HTTP response time (seconds): 0.3559 ID: 77cea57b-b348-445d-a78b-31fa7bf34dd5"	mipns::HttpClientBase::SendAsync(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<void>&, const std::function<void(std::shared_ptr<mipns::HttpOperation>)>&)::<lambda(const std::shared_ptr<mipns::HttpOperation>&)>	134550562801344
Trace	2024-10-06 21:54:06.548	http_director_impl.cpp:33	msedge (8350)	"HTTP callback executed on thread 134551298901696"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551298901696
Info	2024-10-06 21:54:06.548	http_director_impl.cpp:38	msedge (8350)	"Received HTTP response: ID: 77cea57b-b348-445d-a78b-31fa7bf34dd5, Status: 200, Time: 2024-10-07T03:54:06Z, Body: SCRUBBED, Headers['Date'] = 'Mon, 07 Oct 2024 03:54:05 GMT', Headers['Pragma'] = 'no-cache', Headers['Expires'] = '-1', Headers['X-Cache'] = 'CONFIG_NOCACHE', Headers['Content-Type'] = 'application/json; charset=utf-8', Headers['X-MSEdge-Ref'] = 'Ref A: 58AFD4F47BFC497FB8624808B79F42DB Ref B: CH1AA2020604025 Ref C: 2024-10-07T03:54:06Z', Headers['X-Powered-By'] = 'ASP.NET', Headers['Cache-Control'] = 'no-cache', Headers['CorrelationId'] = '77cea57b-b348-445d-a78b-31fa7bf34dd5', Headers['Content-Length'] = '1066', Headers['X-AspNet-Version'] = '4.0.30319', Headers['client-request-id'] = '77cea57b-b348-445d-a78b-31fa7bf34dd5', Headers['Strict-Transport-Security'] = 'max-age=31536000; includeSubDomains'"	void {anonymous}::LogHttpOperationDetails(const std::shared_ptr<mipns::HttpOperation>&)	134551298901696
Trace	2024-10-06 21:54:06.548	json_serializer_impl.cpp:821	msedge (8350)	" +JsonSerializer::DeserializeUsageRestrictionsResponse"	mipns::UsageRestrictionsResponse mipns::JsonSerializer::DeserializeUsageRestrictionsResponse(const char*, size_t)	134551298901696
Trace	2024-10-06 21:54:06.548	json_serializer_impl.cpp:1026	msedge (8350)	" -JsonSerializer::DeserializeUsageRestrictionsResponse"	mipns::UsageRestrictionsResponse mipns::JsonSerializer::DeserializeUsageRestrictionsResponse(const char*, size_t)	134551298901696
Info	2024-10-06 21:54:06.548	usage_restrictions_client.cpp:253	msedge (8350)	"Examining a usage restrictions response:AccessStatus: AccessGrantedTemplateId: 00000000-0000-0000-0000-000000000000Name: Restricted AccessReferrer: Owner: Jason.Novak@myaccess.coopCipherMode: MICROSOFT.CBC4KAllowOfflineAccess: 0LicenseValidUntil: 2024-10-07T03:54:06ZContentId: eca9a0ae-757b-492f-960b-41891ff8a3a8LabelId: 00000000-0000-0000-0000-000000000000FromTemplate: 0"	void mipns::ValidateAndLogLicenseResponse(const mipns::UsageRestrictionsResponse&, bool, const std::shared_ptr<mipns::TelemetryContext>&, const std::shared_ptr<mipns::TelemetryManager>&)	134551298901696
Info	2024-10-06 21:54:06.548	api_utils.h:195	msedge (8350)	"Start calling success callback for API: protection_engine_create_consuming_protection_handler"	mipns::TryExecuteSuccessCallback(const SuccessFunc&, const ResultType&, bool, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const string&, const std::shared_ptr<mipns::ApiContext>&) [with SuccessFunc = mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)::<lambda(const std::shared_ptr<mipns::UsageRestrictionsResponse>&)>; ResultType = std::shared_ptr<mipns::UsageRestrictionsResponse>; std::__cxx11::string = std::__cxx11::basic_string<char>]::<lambda()>	134551298901696
Trace	2024-10-06 21:54:06.548	license_parser.cpp:736	msedge (8350)	"+LicenseParser::GetPublishingLicenseAsString"	static std::__cxx11::string mipns::LicenseParser::GetPublishingLicenseAsString(const std::vector<unsigned char>&)	134551298901696
Trace	2024-10-06 21:54:06.548	license_parser.cpp:755	msedge (8350)	"-LicenseParser::GetPublishingLicenseAsString"	static std::__cxx11::string mipns::LicenseParser::GetPublishingLicenseAsString(const std::vector<unsigned char>&)	134551298901696
Trace	2024-10-06 21:54:06.548	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY/DISTRIBUTIONPOINT/OBJECT[@type=      'Referral-Info']/ADDRESS[@type='URL']/text()]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.548	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Trace	2024-10-06 21:54:06.548	license_parser.cpp:312	msedge (8350)	"Could not get referral URL from license"	std::__cxx11::string {anonymous}::GetReferralInfoFromXrmlLicense(const mipns::xml::XmlDocument&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.548	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY/DESCRIPTOR]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.548	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Trace	2024-10-06 21:54:06.548	license_parser.cpp:455	msedge (8350)	"Could not get descriptor node from xml license"	std::shared_ptr<mipns::LicenseDescriptorImpl> {anonymous}::GetLicenseDescriptor(const mipns::xml::XmlDocument&, const string&)	134551298901696
Trace	2024-10-06 21:54:06.548	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY/DISTRIBUTIONPOINT/OBJECT[@type=      'DKE-Customer-URL']/DKEADDRESS[@type='URL']/text()]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.548	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Trace	2024-10-06 21:54:06.548	license_parser.cpp:325	msedge (8350)	"Double key url not found"	std::__cxx11::string {anonymous}::GetDoubleKeyUrlFromXrmlLicense(const mipns::xml::XmlDocument&)	134551298901696
Trace	2024-10-06 21:54:06.548	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY/WORK/PRECONDITIONLIST/TIME/INTERVALTIME]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.548	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Trace	2024-10-06 21:54:06.548	license_parser.cpp:342	msedge (8350)	"Content valid for days value not found"	mipns::chrono::Days {anonymous}::GetContentValidForDays(const mipns::xml::XmlDocument&)	134551298901696
Trace	2024-10-06 21:54:06.548	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY/WORK/PRECONDITIONLIST/TIME/RANGETIME/UNTIL]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.548	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Trace	2024-10-06 21:54:06.548	license_parser.cpp:401	msedge (8350)	"Content valid until date value not found"	std::chrono::time_point<std::chrono::_V2::system_clock, std::chrono::duration<long int, std::ratio<1, 1000000000> > > {anonymous}::GetContentValidUntilDate(const mipns::xml::XmlDocument&)	134551298901696
Trace	2024-10-06 21:54:06.548	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY[@type='Microsoft Official Rights Template']/AUTHENTICATEDDATA[@name='ID' and @id='LABEL']/text()]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.548	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:06.548	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get ID in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	api_log_cache.cpp:78	msedge (8350)	"{{========================================= API CACHED LOGS END ==========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551298901696
Info	2024-10-06 21:54:06.548	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:06.548	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get TenantId in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	api_log_cache.cpp:58	msedge (8350)	"{{========================================= API CACHED LOGS BEGIN =========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551298901696
Trace	2024-10-06 21:54:06.548	license_parser.cpp:376	msedge (8350)	"Could not get Label ID from xml publish license"	mipns::LabelInfo {anonymous}::GetLabelInfo(const mipns::xml::XmlDocument&, bool)	134551298901696
Trace	2024-10-06 21:54:06.548	xml_document_impl.cpp:75	msedge (8350)	"XPath returned no results. XPath: [/Root/XrML/BODY[@type='Microsoft Official Rights Template']/AUTHENTICATEDDATA[@name='TenantId' and @id='LABEL']/text()]"	virtual std::vector<std::shared_ptr<mipns::xml::XmlNode> > mipns::xml::XmlDocumentImpl::SelectNodes(const string&, const std::shared_ptr<mipns::xml::XmlNode>&) const	134551298901696
Info	2024-10-06 21:54:06.548	license_parser.cpp:233	msedge (8350)	"XPath returned no results"	std::vector<std::shared_ptr<mipns::xml::XmlNode> > {anonymous}::GetXmlNodesFromPath(const mipns::xml::XmlDocument&, const string&, const std::shared_ptr<mipns::xml::XmlNode>&)	134551298901696
Error	2024-10-06 21:54:06.548	license_parser.cpp:299	msedge (8350)	"GetAppDataNode - Failed to get TenantId in PL app data section, parsing failed"	std::__cxx11::string {anonymous}::GetAppDataNode(const mipns::xml::XmlDocument&, const string&, bool, const string&)	134551298901696
Info	2024-10-06 21:54:06.548	api_log_cache.cpp:78	msedge (8350)	"{{========================================= API CACHED LOGS END ==========================================================}}"	void mipns::ApiLogCache::LogAllMessages(std::shared_ptr<mipns::LoggerDelegate>)	134551298901696
Info	2024-10-06 21:54:06.548	api_utils.h:197	msedge (8350)	"Ended calling success callback for API: protection_engine_create_consuming_protection_handler"	mipns::TryExecuteSuccessCallback(const SuccessFunc&, const ResultType&, bool, const std::shared_ptr<mipns::TaskDispatcherDelegate>&, const string&, const std::shared_ptr<mipns::ApiContext>&) [with SuccessFunc = mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)::<lambda(const std::shared_ptr<mipns::UsageRestrictionsResponse>&)>; ResultType = std::shared_ptr<mipns::UsageRestrictionsResponse>; std::__cxx11::string = std::__cxx11::basic_string<char>]::<lambda()>	134551298901696
Info	2024-10-06 21:54:06.548	http_director_impl.cpp:141	msedge (8350)	"Sending HTTP request: ID: 77cea57b-b348-445d-a78b-31fa7bf34dd5, Type: POST, Url: https://api.aadrm.com/my/v2/enduserlicenses, Body Size: 9708, Headers['Accept'] = 'application/json', Headers['Content-Type'] = 'application/json', Headers['Authorization'] = 'Name:Jason Novak;UOID:ae2e01c8-24d6-49ab-ad1c-90678a93ca00;Tenant:50c4fd83-7d96-42ea-b5b2-82425b3355b5;Audience:https://aadrm.com;Scopes:user_impersonation;, Headers['Accept-Language'] = 'en-US', Headers['x-ms-rms-platform-id'] = 'AppName=Microsoft Edge;AppVersion=129.0.2792.79;DevicePlatform=WindowsStore;SDKVersion=4.3;UniqueId=ecd6b820-32c2-49b6-98a6-444530e5a77a;OsName=Arch Linux;OsVersion=6.11.2-arch1-1;MipVersion=1.14.110;'"	void mipns::HttpDirectorImpl::DoSendHttp(bool, const std::shared_ptr<mipns::HttpTelemetryHelper>&, const std::shared_ptr<mipns::HttpRequestBase>&, const std::shared_ptr<void>&, const std::function<void(const std::shared_ptr<mipns::HttpRequest>&, const std::shared_ptr<mipns::HttpResponse>&)>&, const std::function<void(const std::__exception_ptr::exception_ptr&)>&)	134551298901696
Info	2024-10-06 21:54:06.548	protection_engine_impl.cpp:1403	msedge (8350)	"Ended API call: protection_engine_create_consuming_protection_handler"	virtual std::shared_ptr<mipns::ProtectionHandler> mipns::ProtectionEngineImpl::CreateProtectionHandlerForConsumption(const mipns::ProtectionHandler::ConsumptionSettings&, const std::shared_ptr<void>&)	134551298901696
Info	2024-10-06 21:54:06.548	protection_handler_impl.cpp:427	msedge (8350)	" +ProtectionHandlerImpl::DecryptBuffer"	virtual int64_t mipns::ProtectionHandlerImpl::DecryptBuffer(int64_t, const uint8_t*, int64_t, uint8_t*, int64_t, bool)	134551298901696
Info	2024-10-06 21:54:06.549	protection_handler_impl.cpp:441	msedge (8350)	" -ProtectionHandlerImpl::DecryptBuffer"	virtual int64_t mipns::ProtectionHandlerImpl::DecryptBuffer(int64_t, const uint8_t*, int64_t, uint8_t*, int64_t, bool)	134551298901696
