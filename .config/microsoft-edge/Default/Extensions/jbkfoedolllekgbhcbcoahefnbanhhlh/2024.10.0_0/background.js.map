{"version":3,"file":"background.js","mappings":"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AY/hB,KAAK40E,UAAgC,QAApB,EAAA50E,KAAK40E,SAAS7yD,cAAM,QAAU,GAC1E,GAAe,KAAXA,EAAe,CAEjB,MADc/hB,KAAKmrI,KAAK9vG,EAAE,oBAAqBr7B,KAAKgrI,cAAcvpI,K,CAIpE,OAAOsgB,CACT,CAOA,qBAAA+lH,GACE,OAAO9nI,KAAKmrI,KAAK9vG,EAAE,uBAAwBr7B,KAAKgrI,cAAcvpI,KAChE,EC5DK,MAAM8pI,GAAkB,CAC7B,SACA,UACA,YACA,QACA,UACA,UACA,SACA,OACA,WACA,WACA,WACA,UACA,UACA,SACA,WACA,UACA,WACA,WACA,WACA,WACA,UACA,UACA,WACA,SACA,SACA,UACA,YACA,YACA,UACA,WACA,WACA,WACA,UACA,WACA,SACA,OACA,QACA,WACA,UACA,OACA,UACA,UACA,SACA,SACA,WACA,YACA,SACA,WACA,WACA,WACA,UACA,OACA,UACA,YACA,WACA,WACA,UACA,YACA,OACA,SACA,WACA,YACA,YACA,YACA,YACA,SACA,QACA,YACA,WACA,SACA,UACA,SACA,SACA,WACA,QACA,SACA,YACA,YACA,YACA,YACA,YACA,OACA,UACA,SACA,SACA,QACA,YACA,SACA,QACA,UACA,QACA,WACA,UACA,YACA,QACA,YACA,YACA,SACA,WACA,YACA,UACA,QACA,OACA,OACA,OACA,MACA,OACA,YACA,QACA,YACA,QACA,UACA,UACA,YACA,QACA,QACA,YACA,WACA,SACA,QACA,QACA,WACA,WACA,UACA,WACA,SACA,OACA,QACA,QACA,QACA,YACA,QACA,WACA,UACA,WACA,WACA,OACA,WACA,SACA,SACA,WACA,QACA,YACA,QACA,WACA,YACA,YACA,WACA,YACA,YACA,SACA,YACA,YACA,SACA,UACA,UACA,WACA,OACA,QACA,QACA,QACA,UACA,WACA,UACA,WACA,QACA,SACA,WACA,QACA,YACA,UACA,QACA,QACA,SACA,WACA,SACA,YACA,SACA,UACA,WACA,YACA,UACA,YACA,UACA,SACA,UACA,UACA,UACA,SACA,SACA,WACA,OACA,YACA,UACA,QACA,SACA,SACA,SACA,UACA,UACA,YACA,YACA,UACA,SACA,UACA,YACA,YACA,WACA,QACA,YACA,QACA,QACA,WACA,YACA,WACA,WACA,UACA,WACA,UACA,YACA,UACA,YACA,WACA,WACA,WACA,SACA,UACA,YACA,WACA,SACA,WACA,WACA,YACA,WACA,YACA,WACA,YACA,YACA,YACA,YACA,SACA,UACA,QACA,QACA,UACA,SACA,UACA,SACA,WACA,WACA,UACA,SACA,WACA,QACA,SACA,UACA,YACA,SACA,UACA,YACA,YACA,WACA,WACA,YACA,UACA,WACA,QACA,YACA,YACA,UACA,QACA,YACA,YACA,YACA,YACA,WACA,WACA,UACA,UACA,QACA,QACA,WACA,QACA,OACA,WACA,YACA,YACA,WACA,OACA,QACA,WACA,WACA,QACA,QACA,YACA,UACA,WACA,QACA,SACA,UACA,SACA,UACA,UACA,UACA,SACA,UACA,OACA,QACA,QACA,SACA,UACA,UACA,QACA,SACA,UACA,SACA,YACA,WACA,QACA,MACA,SACA,YACA,SACA,YACA,UACA,QACA,QACA,OACA,QACA,QACA,SACA,YACA,SACA,WACA,SACA,UACA,WACA,UACA,UACA,YACA,YACA,YACA,SACA,WACA,QACA,OACA,WACA,OACA,SACA,YACA,UACA,SACA,SACA,UACA,YACA,WACA,YACA,YACA,SACA,QACA,SACA,WACA,YACA,YACA,WACA,UACA,YACA,WACA,UACA,UACA,WACA,QACA,WACA,YACA,SACA,YACA,SACA,SACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,SACA,SACA,WACA,SACA,UACA,WACA,QACA,WACA,UACA,OACA,QACA,QACA,SACA,QACA,QACA,SACA,UACA,SACA,QACA,OACA,OACA,SACA,WACA,SACA,SACA,WACA,YACA,YACA,WACA,SACA,SACA,YACA,WACA,WACA,UACA,YACA,WACA,WACA,YACA,UACA,UACA,WACA,YACA,WACA,WACA,YACA,WACA,WACA,YACA,WACA,WACA,YACA,WACA,YACA,SACA,WACA,WACA,YACA,WACA,QACA,WACA,YACA,SACA,QACA,UACA,QACA,UACA,SACA,WACA,QACA,SACA,UACA,SACA,SACA,YACA,UACA,QACA,UACA,WACA,QACA,SACA,WACA,SACA,UACA,YACA,UACA,QACA,WACA,SACA,SACA,SACA,WACA,QACA,WACA,WACA,SACA,SACA,UACA,WACA,WACA,SACA,YACA,UACA,SACA,WACA,SACA,UACA,SACA,UACA,QACA,WACA,UACA,WACA,SACA,UACA,SACA,OACA,YACA,UACA,YACA,SACA,WACA,YACA,UACA,WACA,YACA,WACA,OACA,YACA,SACA,QACA,QACA,QACA,SACA,SACA,QACA,OACA,QACA,OACA,YACA,WACA,YACA,UACA,UACA,SACA,SACA,UACA,UACA,UACA,QACA,OACA,QACA,UACA,YACA,YACA,QACA,YACA,YACA,QACA,WACA,YACA,SACA,UACA,SACA,QACA,QACA,UACA,QACA,QACA,WACA,QACA,QACA,UACA,UACA,WACA,SACA,OACA,WACA,QACA,WACA,UACA,WACA,OACA,OACA,WACA,WACA,UACA,OACA,SACA,UACA,QACA,SACA,YACA,QACA,QACA,UACA,SACA,QACA,QACA,WACA,UACA,WACA,WACA,OACA,SACA,UACA,SACA,SACA,UACA,UACA,YACA,OACA,SACA,SACA,QACA,OACA,MACA,UACA,OACA,UACA,SACA,UACA,WACA,QACA,WACA,WACA,WACA,QACA,UACA,SACA,SACA,QACA,OACA,YACA,YACA,OACA,YACA,SACA,QACA,SACA,UACA,WACA,UACA,QACA,QACA,QACA,SACA,UACA,WACA,YACA,OACA,YACA,WACA,SACA,QACA,OACA,SACA,WACA,SACA,SACA,WACA,SACA,WACA,YACA,YACA,SACA,SACA,QACA,SACA,UACA,OACA,SACA,SACA,WACA,YACA,UACA,WACA,SACA,SACA,WACA,UACA,UACA,QACA,QACA,QACA,QACA,UACA,UACA,SACA,YACA,OACA,QACA,QACA,UACA,UACA,YACA,UACA,UACA,YACA,YACA,UACA,UACA,YACA,YACA,YACA,UACA,WACA,SACA,SACA,YACA,SACA,SACA,WACA,QACA,QACA,UACA,WACA,YACA,SACA,WACA,WACA,SACA,WACA,QACA,QACA,WACA,QACA,YACA,SACA,WACA,SACA,YACA,SACA,SACA,SACA,WACA,WACA,YACA,YACA,WACA,WACA,UACA,QACA,SACA,UACA,SACA,SACA,UACA,UACA,QACA,OACA,QACA,YACA,SACA,OACA,UACA,YACA,YACA,WACA,WACA,UACA,UACA,UACA,WACA,WACA,WACA,QACA,QACA,SACA,SACA,SACA,UACA,YACA,WACA,QACA,OACA,SACA,OACA,SACA,UACA,OACA,WACA,OACA,SACA,UACA,SACA,YACA,QACA,UACA,QACA,SACA,QACA,SACA,SACA,QACA,QACA,WACA,UACA,OACA,UACA,OACA,WACA,WACA,UACA,YACA,WACA,UACA,YACA,OACA,UACA,UACA,UACA,YACA,QACA,SACA,WACA,SACA,WACA,UACA,WACA,SACA,QACA,SACA,SACA,UACA,SACA,QACA,OACA,SACA,WACA,WACA,SACA,UACA,SACA,SACA,SACA,QACA,YACA,SACA,UACA,SACA,UACA,UACA,WACA,OACA,YACA,UACA,UACA,SACA,YACA,UACA,UACA,UACA,YACA,UACA,YACA,UACA,UACA,QACA,UACA,SACA,YACA,SACA,UACA,WACA,WACA,YACA,YACA,YACA,WACA,SACA,YACA,QACA,SACA,UACA,UACA,WACA,UACA,YACA,WACA,YACA,QACA,YACA,YACA,UACA,UACA,UACA,SACA,YACA,QACA,SACA,WACA,SACA,UACA,YACA,YACA,QACA,UACA,UACA,UACA,OACA,OACA,SACA,SACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,YACA,UACA,YACA,UACA,WACA,SACA,UACA,WACA,WACA,UACA,YACA,WACA,UACA,SACA,SACA,SACA,UACA,YACA,SACA,QACA,UACA,YACA,SACA,SACA,YACA,QACA,UACA,YACA,UACA,WACA,WACA,UACA,SACA,SACA,QACA,SACA,YACA,WACA,WACA,SACA,SACA,SACA,WACA,WACA,YACA,YACA,YACA,UACA,WACA,WACA,QACA,WACA,QACA,QACA,UACA,YACA,UACA,YACA,WACA,SACA,SACA,UACA,QACA,QACA,YACA,WACA,UACA,QACA,UACA,YACA,YACA,WACA,UACA,WACA,UACA,UACA,QACA,UACA,UACA,WACA,QACA,UACA,SACA,WACA,WACA,WACA,UACA,WACA,SACA,WACA,UACA,QACA,QACA,SACA,SACA,OACA,YACA,UACA,QACA,YACA,SACA,QACA,QACA,UACA,QACA,WACA,SACA,UACA,QACA,QACA,YACA,YACA,YACA,WACA,YACA,YACA,QACA,QACA,QACA,OACA,WACA,SACA,WACA,WACA,QACA,WACA,WACA,SACA,YACA,UACA,QACA,UACA,WACA,SACA,OACA,SACA,UACA,WACA,SACA,SACA,QACA,OACA,SACA,QACA,QACA,QACA,QACA,QACA,WACA,QACA,SACA,WACA,SACA,WACA,WACA,YACA,SACA,UACA,UACA,WACA,UACA,SACA,SACA,OACA,QACA,QACA,OACA,QACA,WACA,SACA,SACA,QACA,YACA,QACA,WACA,UACA,UACA,WACA,UACA,WACA,UACA,QACA,QACA,QACA,UACA,SACA,WACA,OACA,OACA,QACA,QACA,QACA,UACA,QACA,SACA,YACA,WACA,QACA,SACA,UACA,SACA,UACA,WACA,QACA,SACA,WACA,OACA,SACA,QACA,UACA,QACA,QACA,UACA,WACA,UACA,UACA,WACA,QACA,SACA,UACA,WACA,YACA,QACA,WACA,SACA,SACA,YACA,SACA,UACA,QACA,YACA,UACA,UACA,WACA,YACA,YACA,OACA,WACA,SACA,UACA,SACA,QACA,UACA,MACA,WACA,SACA,UACA,SACA,YACA,YACA,YACA,WACA,YACA,WACA,WACA,OACA,OACA,OACA,OACA,WACA,WACA,UACA,WACA,SACA,YACA,YACA,UACA,SACA,YACA,WACA,WACA,WACA,SACA,WACA,OACA,OACA,OACA,UACA,QACA,QACA,SACA,QACA,WACA,UACA,UACA,WACA,UACA,YACA,YACA,SACA,YACA,UACA,YACA,YACA,YACA,YACA,YACA,YACA,UACA,UACA,SACA,UACA,SACA,YACA,WACA,WACA,YACA,UACA,YACA,WACA,WACA,YACA,WACA,YACA,UACA,UACA,UACA,WACA,UACA,YACA,UACA,QACA,YACA,UACA,WACA,WACA,SACA,WACA,YACA,YACA,UACA,YACA,YACA,UACA,OACA,UACA,WACA,YACA,YACA,WACA,YACA,YACA,WACA,YACA,UACA,WACA,UACA,WACA,WACA,WACA,YACA,YACA,YACA,YACA,WACA,WACA,UACA,YACA,UACA,WACA,YACA,YACA,YACA,UACA,UACA,YACA,YACA,YACA,WACA,YACA,YACA,YACA,UACA,WACA,YACA,UACA,YACA,WACA,UACA,YACA,YACA,WACA,UACA,UACA,UACA,UACA,WACA,UACA,YACA,UACA,UACA,YACA,OACA,SACA,SACA,UACA,SACA,UACA,SACA,OACA,QACA,OACA,WACA,YACA,UACA,SACA,SACA,SACA,YACA,YACA,WACA,WACA,YACA,QACA,WACA,UACA,WACA,YACA,SACA,UACA,WACA,UACA,YACA,YACA,UACA,SACA,SACA,WACA,YACA,SACA,SACA,YACA,OACA,UACA,SACA,QACA,QACA,QACA,YACA,YACA,WACA,YACA,UACA,SACA,UACA,WACA,QACA,UACA,WACA,UACA,SACA,WACA,OACA,WACA,YACA,WACA,WACA,SACA,WACA,UACA,WACA,YACA,YACA,SACA,QACA,YACA,QACA,UACA,UACA,QACA,QACA,QACA,UACA,WACA,WACA,WACA,WACA,SACA,SACA,UACA,YACA,QACA,UACA,UACA,YACA,SACA,WACA,YACA,SACA,WACA,WACA,WACA,WACA,WACA,SACA,QACA,QACA,SACA,QACA,QACA,WACA,UACA,WACA,YACA,UACA,WACA,UACA,WACA,OACA,UACA,QACA,QACA,QACA,UACA,SACA,WACA,UACA,UACA,UACA,WACA,UACA,YACA,SACA,WACA,UACA,QACA,QACA,QACA,QACA,OACA,QACA,SACA,UACA,UACA,QACA,QACA,UACA,UACA,YACA,UACA,YACA,UACA,QACA,YACA,SACA,UACA,WACA,WACA,YACA,UACA,WACA,YACA,UACA,UACA,WACA,QACA,OACA,SACA,UACA,UACA,YACA,OACA,UACA,UACA,WACA,SACA,SACA,WACA,WACA,YACA,WACA,UACA,YACA,WACA,UACA,YACA,UACA,QACA,SACA,UACA,UACA,UACA,SACA,OACA,SACA,SACA,SACA,SACA,YACA,UACA,QACA,QACA,QACA,UACA,SACA,UACA,SACA,SACA,YACA,QACA,QACA,QACA,OACA,SACA,UACA,YACA,UACA,YACA,WACA,YACA,UACA,MACA,QACA,SACA,UACA,UACA,WACA,SACA,YACA,YACA,MACA,MACA,WACA,SACA,QACA,WACA,SACA,QACA,QACA,WACA,QACA,UACA,YACA,SACA,WACA,QACA,SACA,SACA,WACA,YACA,QACA,WACA,WACA,YACA,UACA,WACA,WACA,UACA,OACA,OACA,YACA,OACA,YACA,OACA,WACA,SACA,WACA,WACA,UACA,OACA,SACA,WACA,UACA,WACA,WACA,UACA,UACA,UACA,UACA,WACA,SACA,YACA,WACA,SACA,UACA,YACA,QACA,OACA,YACA,SACA,WACA,QACA,UACA,WACA,SACA,QACA,SACA,SACA,QACA,QACA,YACA,QACA,WACA,SACA,WACA,YACA,WACA,UACA,SACA,YACA,YACA,UACA,YACA,UACA,YACA,WACA,OACA,WACA,UACA,SACA,YACA,YACA,YACA,QACA,WACA,SACA,WACA,YACA,SACA,SACA,OACA,OACA,SACA,SACA,WACA,SACA,WACA,SACA,UACA,SACA,YACA,YACA,YACA,WACA,UACA,YACA,WACA,WACA,WACA,UACA,SACA,WACA,SACA,WACA,UACA,YACA,WACA,YACA,YACA,QACA,WACA,UACA,UACA,SACA,SACA,OACA,WACA,YACA,WACA,SACA,YACA,QACA,WACA,QACA,WACA,YACA,SACA,WACA,WACA,WACA,YACA,YACA,YACA,WACA,YACA,WACA,UACA,QACA,SACA,WACA,SACA,YACA,YACA,WACA,SACA,YACA,WACA,SACA,WACA,YACA,YACA,WACA,SACA,QACA,SACA,QACA,UACA,SACA,UACA,UACA,OACA,YACA,YACA,WACA,YACA,SACA,UACA,YACA,WACA,SACA,SACA,SACA,WACA,YACA,YACA,UACA,UACA,QACA,WACA,SACA,SACA,WACA,QACA,UACA,YACA,UACA,YACA,YACA,WACA,WACA,YACA,YACA,UACA,WACA,WACA,UACA,UACA,UACA,UACA,YACA,WACA,WACA,SACA,YACA,YACA,WACA,YACA,YACA,SACA,WACA,YACA,WACA,UACA,QACA,UACA,WACA,UACA,UACA,YACA,WACA,SACA,UACA,YACA,UACA,WACA,WACA,YACA,WACA,YACA,YACA,WACA,WACA,WACA,YACA,YACA,UACA,OACA,WACA,SACA,YACA,QACA,OACA,SACA,UACA,YACA,WACA,YACA,WACA,WACA,YACA,YACA,MACA,WACA,YACA,WACA,OACA,SACA,OACA,WACA,QACA,SACA,SACA,UACA,SACA,QACA,UACA,SACA,YACA,QACA,QACA,SACA,SACA,UACA,UACA,UACA,SACA,SACA,UACA,WACA,YACA,YACA,WACA,YACA,WACA,YACA,WACA,WACA,WACA,SACA,WACA,WACA,UACA,YACA,WACA,UACA,UACA,YACA,WACA,WACA,WACA,YACA,WACA,UACA,UACA,YACA,YACA,WACA,OACA,YACA,UACA,OACA,UACA,YACA,YACA,WACA,WACA,YACA,SACA,UACA,WACA,UACA,WACA,SACA,YACA,YACA,WACA,WACA,YACA,YACA,YACA,WACA,UACA,YACA,WACA,UACA,WACA,UACA,YACA,UACA,WACA,WACA,UACA,WACA,UACA,WACA,UACA,WACA,WACA,WACA,WACA,QACA,QACA,QACA,YACA,UACA,WACA,WACA,WACA,WACA,SACA,WACA,YACA,YACA,WACA,WACA,WACA,YACA,QACA,SACA,SACA,OACA,WACA,WACA,QACA,QACA,QACA,QACA,OACA,SACA,YACA,SACA,QACA,UACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,UACA,QACA,QACA,SACA,WACA,YACA,WACA,UACA,UACA,WACA,WACA,WACA,WACA,UACA,QACA,OACA,YACA,SACA,SACA,OACA,SACA,WACA,SACA,OACA,OACA,QACA,OACA,OACA,WACA,YACA,YACA,WACA,YACA,WACA,UACA,UACA,YACA,WACA,YACA,QACA,UACA,UACA,OACA,UACA,WACA,YACA,YACA,WACA,YACA,YACA,YACA,SACA,SACA,WACA,SACA,SACA,QACA,OACA,UACA,QACA,QACA,QACA,UACA,WACA,YACA,WACA,WACA,SACA,WACA,SACA,SACA,WACA,UACA,UACA,UACA,QACA,QACA,QACA,YACA,UACA,WACA,UACA,UACA,UACA,QACA,QACA,WACA,SACA,OACA,MACA,SACA,YACA,UACA,WACA,UACA,WACA,WACA,QACA,OACA,OACA,SACA,SACA,MACA,OACA,SACA,WACA,OACA,UACA,WACA,WACA,MACA,OACA,SACA,YACA,YACA,UACA,UACA,WACA,SACA,SACA,OACA,OACA,UACA,OACA,QACA,QACA,QACA,UACA,UACA,WACA,UACA,YACA,UACA,WACA,UACA,WACA,WACA,OACA,QACA,UACA,UACA,UACA,SACA,UACA,QACA,UACA,UACA,WACA,WACA,WACA,UACA,UACA,UACA,YACA,YACA,UACA,YACA,SACA,SACA,UACA,QACA,UACA,SACA,WACA,SACA,YACA,YACA,SACA,WACA,UACA,QACA,SACA,SACA,OACA,OACA,QACA,QACA,QACA,YACA,OACA,SACA,UACA,YACA,UACA,WACA,YACA,UACA,YACA,YACA,OACA,WACA,SACA,OACA,UACA,SACA,WACA,YACA,WACA,MACA,YACA,UACA,YACA,SACA,YACA,SACA,SACA,WACA,WACA,YACA,UACA,YACA,SACA,QACA,YACA,UACA,SACA,QACA,YACA,UACA,SACA,YACA,WACA,WACA,WACA,UACA,YACA,YACA,WACA,SACA,MACA,WACA,WACA,YACA,QACA,UACA,SACA,MACA,UACA,WACA,MACA,YACA,QACA,YACA,WACA,YACA,QACA,UACA,QACA,QACA,UACA,SACA,UACA,YACA,YACA,QACA,WACA,UACA,SACA,SACA,WACA,SACA,YACA,QACA,UACA,YACA,WACA,OACA,QACA,WACA,UACA,WACA,UACA,UACA,WACA,WACA,YACA,WACA,YACA,WACA,WACA,WACA,WACA,UACA,UACA,YACA,QACA,MACA,SACA,YACA,SACA,YACA,YACA,WACA,UACA,YACA,SACA,SACA,YACA,YACA,WACA,UACA,UACA,WACA,WACA,YACA,QACA,SACA,UACA,UACA,YACA,YACA,UACA,YACA,WACA,YACA,YACA,WACA,YACA,WACA,SACA,WACA,WACA,UACA,WACA,SACA,UACA,WACA,WACA,YACA,UACA,SACA,UACA,YACA,YACA,YACA,UACA,WACA,YACA,WACA,YACA,YACA,WACA,WACA,SACA,SACA,SACA,UACA,UACA,SACA,SACA,YACA,WACA,YACA,WACA,SACA,UACA,SACA,SACA,YACA,SACA,SACA,WACA,UACA,WACA,UACA,YACA,WACA,WACA,WACA,UACA,WACA,QACA,OACA,SACA,OACA,WACA,YACA,YACA,WACA,WACA,YACA,WACA,WACA,UACA,QACA,SACA,WACA,UACA,UACA,YACA,SACA,YACA,YACA,WACA,SACA,SACA,UACA,YACA,SACA,SACA,UACA,QACA,QACA,WACA,YACA,YACA,WACA,WACA,WACA,SACA,YACA,YACA,WACA,UACA,QACA,UACA,YACA,YACA,SACA,WACA,WACA,YACA,YACA,WACA,UACA,UACA,WACA,UACA,QACA,YACA,SACA,YACA,WACA,UACA,QACA,WACA,YACA,YACA,UACA,UACA,OACA,YACA,YACA,YACA,WACA,WACA,QACA,WACA,UACA,OACA,QACA,YACA,SACA,QACA,UACA,UACA,WACA,YACA,YACA,YACA,SACA,WACA,YACA,WACA,UACA,UACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,SACA,YACA,YACA,YACA,YACA,QACA,OACA,YACA,SACA,UACA,SACA,QACA,WACA,OACA,SACA,YACA,WACA,WACA,SACA,UACA,YACA,YACA,YACA,YACA,YACA,QACA,SACA,WACA,YACA,SACA,SACA,WACA,UACA,YACA,WACA,UACA,UACA,UACA,YACA,WACA,WACA,YACA,SACA,WACA,UACA,YACA,YACA,WACA,YACA,SACA,YACA,WACA,WACA,UACA,YACA,YACA,SACA,YACA,UACA,YACA,YACA,QACA,SACA,WACA,WACA,YACA,WACA,WACA,WACA,YACA,UACA,SACA,WACA,SACA,YACA,UACA,UACA,SACA,YACA,UACA,UACA,OACA,SACA,UACA,SACA,OACA,QACA,UACA,OACA,WACA,SACA,SACA,WACA,UACA,UACA,YACA,QACA,UACA,OACA,UACA,YACA,YACA,UACA,UACA,WACA,SACA,UACA,WACA,SACA,YACA,YACA,UACA,WACA,WACA,MACA,QACA,UACA,SACA,SACA,OACA,OACA,SACA,SACA,WACA,WACA,WACA,WACA,WACA,QACA,QACA,UACA,SACA,UACA,WACA,YACA,WACA,SACA,SACA,QACA,SACA,SACA,WACA,UACA,YACA,QACA,QACA,QACA,QACA,UACA,SACA,WACA,WACA,YACA,UACA,UACA,QACA,WACA,QACA,UACA,SACA,WACA,SACA,SACA,SACA,UACA,OACA,SACA,QACA,WACA,SACA,WACA,WACA,UACA,UACA,YACA,QACA,WACA,QACA,UACA,WACA,WACA,YACA,SACA,UACA,UACA,WACA,MACA,OACA,UACA,UACA,WACA,WACA,YACA,YACA,QACA,UACA,QACA,QACA,YACA,UACA,WACA,WACA,OACA,UACA,YACA,YACA,YACA,WACA,WACA,SACA,QACA,UACA,WACA,SACA,WACA,UACA,YACA,YACA,WACA,UACA,WACA,WACA,WACA,YACA,YACA,WACA,OACA,UACA,SACA,QACA,QACA,SACA,SACA,QACA,QACA,OACA,QACA,QACA,QACA,WACA,OACA,SACA,UACA,QACA,WACA,UACA,UACA,QACA,SACA,UACA,WACA,OACA,MACA,MACA,OACA,QACA,OACA,WACA,SACA,WACA,SACA,WACA,SACA,OACA,OACA,OACA,UACA,WACA,WACA,YACA,SACA,WACA,WACA,WACA,UACA,WACA,UACA,WACA,UACA,WACA,YACA,WACA,UACA,WACA,WACA,WACA,SACA,SACA,UACA,WACA,WACA,MACA,QACA,WACA,WACA,UACA,YACA,WACA,YACA,WACA,QACA,QACA,UACA,UACA,YACA,SACA,UACA,QACA,WACA,WACA,WACA,UACA,UACA,UACA,WACA,WACA,UACA,WACA,SACA,YACA,WACA,YACA,WACA,UACA,WACA,YACA,WACA,UACA,SACA,WACA,SACA,YACA,WACA,QACA,UACA,UACA,WACA,SACA,SACA,QACA,SACA,WACA,YACA,YACA,WACA,QACA,SACA,UACA,QACA,UACA,YACA,SACA,OACA,QACA,YACA,UACA,WACA,WACA,YACA,SACA,QACA,QACA,SACA,WACA,YACA,WACA,QACA,YACA,SACA,MACA,QACA,MACA,YACA,UACA,QACA,OACA,YACA,WACA,UACA,SACA,SACA,UACA,YACA,SACA,YACA,WACA,OACA,SACA,QACA,SACA,SACA,WACA,UACA,MACA,SACA,UACA,SACA,SACA,UACA,SACA,UACA,SACA,UACA,SACA,MACA,WACA,YACA,SACA,UACA,WACA,QACA,OACA,OACA,SACA,OACA,QACA,OACA,SACA,MACA,SACA,UACA,WACA,WACA,QACA,UACA,YACA,SACA,QACA,YACA,WACA,YACA,UACA,YACA,WACA,WACA,SACA,YACA,YACA,YACA,WACA,YACA,UACA,YACA,UACA,UACA,UACA,QACA,QACA,YACA,SACA,UACA,YACA,QACA,OACA,WACA,YACA,WACA,SACA,WACA,SACA,SACA,SACA,QACA,UACA,SACA,WACA,QACA,QACA,SACA,QACA,UACA,UACA,UACA,QACA,YACA,SACA,YACA,UACA,SACA,WACA,YACA,QACA,UACA,QACA,WACA,UACA,WACA,UACA,SACA,UACA,UACA,UACA,UACA,SACA,UACA,SACA,UACA,WACA,WACA,SACA,YACA,YACA,UACA,WACA,QACA,QACA,QACA,UACA,WACA,UACA,OACA,SACA,YACA,UACA,SACA,OACA,OACA,WACA,OACA,UACA,QACA,WACA,WACA,YACA,OACA,UACA,QACA,UACA,OACA,OACA,OACA,QACA,WACA,YACA,QACA,SACA,OACA,SACA,OACA,SACA,WACA,OACA,UACA,SACA,SACA,SACA,OACA,OACA,OACA,WACA,YACA,WACA,YACA,SACA,SACA,WACA,UACA,YACA,WACA,WACA,UACA,WACA,QACA,WACA,WACA,UACA,UACA,UACA,WACA,UACA,SACA,UACA,QACA,WACA,QACA,QACA,UACA,YACA,QACA,QACA,YACA,UACA,UACA,YACA,WACA,SACA,YACA,SACA,YACA,YACA,UACA,QACA,OACA,UACA,WACA,WACA,YACA,SACA,QACA,UACA,WACA,OACA,YACA,OACA,QACA,YACA,WACA,WACA,QACA,UACA,YACA,QACA,YACA,QACA,SACA,WACA,OACA,UACA,OACA,WACA,SACA,QACA,QACA,SACA,WACA,SACA,QACA,SACA,UACA,QACA,QACA,SACA,UACA,QACA,OACA,SACA,WACA,WACA,UACA,UACA,YACA,UACA,WACA,SACA,QACA,YACA,WACA,WACA,QACA,UACA,YACA,QACA,OACA,WACA,QACA,OACA,UACA,UACA,YACA,UACA,QACA,SACA,WACA,OACA,OACA,QACA,QACA,UACA,OACA,SACA,MACA,UACA,WACA,YACA,WACA,UACA,WACA,SACA,SACA,UACA,UACA,MACA,UACA,QACA,OACA,UACA,OACA,SACA,SACA,YACA,SACA,UACA,SACA,UACA,YACA,UACA,WACA,WACA,YACA,WACA,WACA,YACA,YACA,WACA,SACA,UACA,WACA,UACA,WACA,YACA,YACA,YACA,UACA,UACA,WACA,WACA,UACA,WACA,YACA,WACA,UACA,UACA,YACA,YACA,YACA,WACA,WACA,YACA,YACA,WACA,WACA,UACA,WACA,SACA,YACA,SACA,QACA,YACA,YACA,UACA,WACA,UACA,YACA,QACA,SACA,WACA,WACA,YACA,WACA,WACA,WACA,YACA,UACA,WACA,YACA,SACA,WACA,WACA,WACA,YACA,WACA,QACA,UACA,WACA,YACA,YACA,YACA,UACA,UACA,UACA,QACA,UACA,OACA,SACA,QACA,UACA,YACA,QACA,SACA,YACA,WACA,UACA,WACA,YACA,OACA,UACA,SACA,QACA,QACA,SACA,WACA,SACA,WACA,SACA,OACA,WACA,WACA,YACA,YACA,YACA,SACA,SACA,YACA,WACA,UACA,WACA,WACA,WACA,YACA,YACA,WACA,WACA,YACA,UACA,WACA,YACA,YACA,UACA,WACA,OACA,OACA,QACA,UACA,YACA,UACA,QACA,UACA,YACA,QACA,SACA,SACA,SACA,UACA,UACA,WACA,WACA,UACA,YACA,QACA,WACA,QACA,SACA,SACA,YACA,QACA,WACA,SACA,UACA,UACA,UACA,UACA,QACA,YACA,WACA,WACA,UACA,WACA,SACA,SACA,WACA,OACA,MACA,OACA,OACA,OACA,QACA,SACA,WACA,SACA,QACA,YACA,WACA,UACA,SACA,YACA,WACA,YACA,WACA,WACA,SACA,SACA,YACA,YACA,SACA,WACA,SACA,OACA,SACA,UACA,WACA,WACA,SACA,SACA,SACA,UACA,SACA,YACA,UACA,QACA,OACA,UACA,OACA,SACA,YACA,MACA,SACA,UACA,WACA,YACA,WACA,YACA,YACA,YACA,SACA,WACA,WACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,MACA,UACA,QACA,OACA,OACA,MACA,WACA,WACA,WACA,UACA,YACA,YACA,WACA,WACA,WACA,SACA,QACA,OACA,QACA,WACA,SACA,SACA,YACA,WACA,WACA,QACA,YACA,WACA,UACA,WACA,UACA,YACA,WACA,UACA,YACA,WACA,WACA,WACA,YACA,WACA,YACA,YACA,WACA,WACA,WACA,SACA,SACA,YACA,UACA,WACA,YACA,YACA,WACA,SACA,UACA,YACA,YACA,WACA,UACA,YACA,YACA,QACA,WACA,YACA,WACA,SACA,WACA,YACA,YACA,WACA,UACA,YACA,UACA,WACA,YACA,WACA,UACA,YACA,YACA,YACA,UACA,YACA,SACA,WACA,SACA,SACA,MACA,OACA,SACA,OACA,QACA,MACA,OACA,YACA,WACA,YACA,YACA,WACA,WACA,UACA,WACA,WACA,YACA,YACA,UACA,QACA,UACA,YACA,UACA,OACA,YACA,SACA,QACA,MACA,MACA,SACA,SACA,YACA,UACA,WACA,YACA,SACA,YACA,WACA,MACA,UACA,UACA,SACA,UACA,UACA,WACA,QACA,OACA,QACA,UACA,UACA,OACA,UACA,YACA,OACA,OACA,YACA,UACA,QACA,SACA,SACA,MACA,QACA,SACA,QACA,SACA,WACA,OACA,UACA,UACA,MACA,SACA,YACA,SACA,UACA,OACA,UACA,WACA,WACA,YACA,QACA,OACA,MACA,SACA,WACA,YACA,SACA,UACA,WACA,YACA,WACA,QACA,YACA,WACA,YACA,OACA,SACA,WACA,UACA,QACA,YACA,QACA,UACA,UACA,OACA,SACA,QACA,OACA,WACA,WACA,OACA,SACA,UACA,SACA,UACA,WACA,SACA,QACA,OACA,UACA,YACA,UACA,SACA,WACA,WACA,QACA,WACA,UACA,SACA,QACA,QACA,SACA,WACA,OACA,MACA,OACA,SACA,OACA,WACA,WACA,SACA,OACA,OACA,WACA,WACA,YACA,WACA,OACA,SACA,SACA,WACA,SACA,WACA,UACA,UACA,UACA,OACA,UACA,UACA,YACA,WACA,SACA,UACA,UACA,OACA,SACA,QACA,OACA,UACA,WACA,OACA,QACA,WACA,QACA,QACA,QACA,SACA,UACA,QACA,OACA,UACA,UACA,WACA,YACA,WACA,SACA,SACA,QACA,UACA,WACA,SACA,UACA,SACA,OACA,OACA,QACA,SACA,WACA,WACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,YACA,YACA,WACA,YACA,WACA,YACA,QACA,UACA,SACA,QACA,SACA,UACA,SACA,OACA,QACA,OACA,OACA,QACA,OACA,QACA,OACA,SACA,WACA,UACA,SACA,WACA,SACA,UACA,UACA,SACA,WACA,SACA,WACA,SACA,WACA,OACA,WACA,OACA,SACA,QACA,SACA,SACA,WACA,UACA,UACA,YACA,OACA,UACA,SACA,YACA,UACA,QACA,OACA,SACA,OACA,OACA,UACA,SACA,UACA,YACA,WACA,SACA,UACA,QACA,WACA,SACA,WACA,YACA,YACA,SACA,UACA,YACA,UACA,UACA,WACA,MACA,OACA,SACA,UACA,UACA,WACA,SACA,WACA,WACA,SACA,QACA,QACA,OACA,OACA,UACA,YACA,QACA,QACA,UACA,WACA,OACA,QACA,WACA,WACA,SACA,SACA,WACA,UACA,OACA,OACA,MACA,UACA,UACA,SACA,OACA,OACA,WACA,YACA,SACA,SACA,SACA,UACA,QACA,SACA,QACA,YACA,UACA,SACA,SACA,YACA,YACA,QACA,UACA,YACA,WACA,YACA,YACA,SACA,WACA,UACA,SACA,YACA,WACA,YACA,UACA,UACA,SACA,QACA,WACA,WACA,YACA,YACA,OACA,QACA,OACA,YACA,OACA,SACA,WACA,SACA,YACA,UACA,YACA,WACA,QACA,YACA,SACA,QACA,YACA,WACA,WACA,SACA,WACA,WACA,QACA,OACA,UACA,YACA,WACA,UACA,SACA,UACA,WACA,QACA,YACA,WACA,YACA,YACA,YACA,UACA,YACA,WACA,WACA,SACA,WACA,UACA,YACA,WACA,WACA,QACA,YACA,SACA,YACA,OACA,OACA,SACA,UACA,YACA,UACA,WACA,UACA,WACA,UACA,YACA,WACA,SACA,SACA,QACA,QACA,YACA,UACA,UACA,UACA,YACA,WACA,YACA,SACA,UACA,UACA,YACA,QACA,UACA,SACA,UACA,QACA,WACA,SACA,SACA,SACA,OACA,MACA,WACA,YACA,UACA,UACA,WACA,QACA,QACA,YACA,YACA,SACA,WACA,SACA,SACA,UACA,WACA,SACA,YACA,SACA,UACA,SACA,QACA,YACA,SACA,YACA,YACA,UACA,SACA,YACA,SACA,UACA,WACA,SACA,UACA,UACA,UACA,YACA,WACA,UACA,WACA,YACA,WACA,WACA,YACA,OACA,SACA,YACA,YACA,SACA,SACA,SACA,SACA,WACA,WACA,WACA,QACA,WACA,WACA,UACA,QACA,SACA,YACA,SACA,UACA,SACA,WACA,WACA,UACA,QACA,SACA,SACA,WACA,SACA,UACA,YACA,SACA,UACA,YACA,WACA,QACA,WACA,OACA,YACA,WACA,WACA,UACA,MACA,YACA,SACA,WACA,WACA,YACA,YACA,YACA,WACA,UACA,UACA,WACA,WACA,WACA,YACA,WACA,WACA,WACA,WACA,WACA,WACA,UACA,YACA,UACA,WACA,UACA,YACA,QACA,SACA,WACA,SACA,YACA,WACA,UACA,WACA,YACA,YACA,YACA,WACA,MACA,SACA,WACA,UACA,YACA,WACA,WACA,WACA,QACA,YACA,WACA,YACA,YACA,UACA,WACA,SACA,QACA,OACA,WACA,YACA,SACA,WACA,YACA,SACA,YACA,QACA,QACA,YACA,WACA,UACA,WACA,UACA,WACA,QACA,YACA,YACA,QACA,QACA,UACA,OACA,QACA,SACA,QACA,SACA,OACA,OACA,MACA,MACA,WACA,QACA,OACA,SACA,UACA,WACA,WACA,YACA,YACA,SACA,WACA,QACA,YACA,UACA,QACA,QACA,WACA,UACA,YACA,SACA,QACA,YACA,QACA,YACA,WACA,SACA,UACA,YACA,WACA,QACA,QACA,SACA,YACA,QACA,UACA,UACA,SACA,YACA,QACA,UACA,SACA,WACA,OACA,YACA,YACA,SACA,OACA,SACA,SACA,SACA,UACA,YACA,UACA,OACA,QACA,MACA,OACA,OACA,SACA,QACA,YACA,OACA,SACA,SACA,UACA,QACA,SACA,UACA,YACA,WACA,SACA,WACA,UACA,SACA,WACA,WACA,WACA,YACA,OACA,SACA,UACA,SACA,WACA,SACA,WACA,SACA,YACA,SACA,SACA,WACA,WACA,YACA,WACA,YACA,YACA,UACA,UACA,OACA,SACA,OACA,UACA,QACA,OACA,MACA,YACA,SACA,WACA,WACA,SACA,UACA,QACA,OACA,SACA,WACA,WACA,QACA,QACA,SACA,SACA,WACA,YACA,QACA,WACA,QACA,UACA,SACA,UACA,SACA,UACA,SACA,UACA,SACA,WACA,UACA,WACA,YACA,UACA,WACA,WACA,UACA,UACA,UACA,UACA,UACA,SACA,WACA,WACA,YACA,QACA,SACA,QACA,MACA,MACA,QACA,MACA,YACA,WACA,WACA,SACA,WACA,UACA,WACA,YACA,SACA,YACA,OACA,UACA,YACA,YACA,WACA,YACA,WACA,YACA,YACA,WACA,WACA,YACA,WACA,SACA,YACA,SACA,UACA,YACA,YACA,WACA,WACA,SACA,QACA,SACA,UACA,SACA,UACA,UACA,OACA,MACA,OACA,WACA,OACA,MACA,QACA,WACA,QACA,OACA,UACA,WACA,OACA,WACA,UACA,WACA,UACA,QACA,SACA,WACA,OACA,WACA,QACA,UACA,YACA,UACA,OACA,SACA,OACA,OACA,OACA,OACA,UACA,OACA,OACA,WACA,UACA,YACA,YACA,YACA,WACA,QACA,UACA,WACA,SACA,WACA,WACA,YACA,YACA,MACA,YACA,UACA,QACA,QACA,OACA,QACA,QACA,SACA,UACA,SACA,WACA,WACA,WACA,WACA,UACA,WACA,UACA,WACA,WACA,QACA,WACA,SACA,WACA,WACA,UACA,WACA,SACA,UACA,SACA,UACA,UACA,WACA,WACA,UACA,YACA,YACA,UACA,UACA,SACA,UACA,UACA,WACA,WACA,WACA,UACA,WACA,WACA,WACA,YACA,WACA,YACA,YACA,WACA,WACA,UACA,WACA,SACA,OACA,QACA,OACA,UACA,UACA,WACA,UACA,WACA,WACA,YACA,YACA,WACA,YACA,WACA,WACA,WACA,WACA,YACA,YACA,YACA,YACA,YACA,UACA,YACA,YACA,YACA,UACA,WACA,WACA,WACA,WACA,YACA,WACA,WACA,WACA,WACA,WACA,WACA,WACA,YACA,WACA,YACA,WACA,UACA,UACA,WACA,WACA,WACA,YACA,YACA,WACA,UACA,YACA,WACA,YACA,YACA,WACA,YACA,YACA,WACA,WACA,WACA,UACA,YACA,WACA,YACA,YACA,YACA,WACA,YACA,YACA,WACA,WACA,YACA,YACA,YACA,WACA,YACA,WACA,UACA,WACA,WACA,WACA,UACA,YACA,WACA,YACA,MACA,SACA,UACA,YACA,UACA,YACA,SACA,WACA,SACA,QACA,QACA,YACA,UACA,WACA,WACA,WACA,SACA,SACA,UACA,SACA,WACA,UACA,QACA,QACA,SACA,UACA,SACA,YACA,OACA,WACA,YACA,SACA,WACA,WACA,UACA,WACA,SACA,UACA,WACA,QACA,WACA,OACA,YACA,QACA,UACA,WACA,YACA,UACA,YACA,SACA,QACA,YACA,YACA,SACA,QACA,UACA,UACA,WACA,YACA,SACA,UACA,YACA,WACA,YACA,YACA,YACA,WACA,YACA,YACA,YACA,WACA,WACA,YACA,SACA,UACA,YACA,SACA,SACA,QACA,UACA,UACA,SACA,WACA,SACA,SACA,UACA,UACA,UACA,SACA,UACA,YACA,SACA,UACA,YACA,QACA,WACA,WACA,UACA,WACA,YACA,WACA,UACA,UACA,UACA,YACA,WACA,WACA,WACA,QACA,SACA,SACA,UACA,SACA,WACA,UACA,QACA,YACA,SACA,WACA,YACA,OACA,WACA,UACA,QACA,YACA,UACA,SACA,YACA,YACA,SACA,WACA,QACA,YACA,WACA,SACA,SACA,UACA,UACA,WACA,SACA,QACA,QACA,SACA,UACA,WACA,UACA,SACA,SACA,QACA,SACA,WACA,WACA,YACA,WACA,WACA,YACA,WACA,UACA,SACA,OACA,SACA,WACA,UACA,SACA,UACA,UACA,YACA,WACA,UACA,YACA,QACA,SACA,UACA,WACA,YACA,MACA,WACA,UACA,QACA,YACA,YACA,YACA,YACA,UACA,YACA,SACA,WACA,UACA,YACA,QACA,OACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,QACA,OACA,YACA,YACA,SACA,YACA,QACA,SACA,WACA,QACA,YACA,SACA,YACA,YACA,QACA,UACA,UACA,SACA,UACA,YACA,SACA,UACA,YACA,QACA,YACA,QACA,SACA,WACA,UACA,UACA,WACA,QACA,UACA,QACA,SACA,UACA,UACA,SACA,WACA,UACA,WACA,WACA,UACA,WACA,YACA,YACA,WACA,WACA,SACA,UACA,YACA,YACA,UACA,WACA,YACA,WACA,UACA,UACA,WACA,UACA,YACA,WACA,QACA,WACA,QACA,SACA,YACA,SACA,WACA,YACA,UACA,OACA,OACA,OACA,OACA,OACA,QACA,OACA,UACA,WACA,SACA,OACA,YACA,UACA,QACA,MACA,OACA,OACA,OACA,UACA,UACA,WACA,YACA,SACA,QACA,SACA,QACA,SACA,QACA,SACA,SACA,QACA,SACA,WACA,QACA,OACA,YACA,UACA,YACA,UACA,SACA,OACA,OACA,UACA,OACA,SACA,SACA,QACA,WACA,WACA,UACA,WACA,YACA,OACA,SACA,WACA,WACA,SACA,YACA,WACA,UACA,SACA,WACA,QACA,OACA,SACA,WACA,WACA,SACA,UACA,SACA,UACA,WACA,SACA,SACA,UACA,YACA,UACA,UACA,QACA,SACA,WACA,QACA,UACA,OACA,WACA,YACA,UACA,QACA,SACA,MACA,WACA,SACA,WACA,UACA,WACA,YACA,SACA,UACA,WACA,YACA,UACA,WACA,WACA,UACA,YACA,UACA,SACA,WACA,YACA,UACA,UACA,SACA,YACA,YACA,UACA,YACA,WACA,YACA,YACA,SACA,UACA,WACA,WACA,UACA,WACA,YACA,WACA,UACA,SACA,UACA,SACA,YACA,YACA,YACA,SACA,UACA,YACA,UACA,QACA,UACA,YACA,UACA,YACA,YACA,WACA,UACA,SACA,UACA,UACA,YACA,UACA,UACA,WACA,SACA,YACA,WACA,QACA,SACA,YACA,UACA,UACA,SACA,QACA,WACA,QACA,QACA,QACA,SACA,SACA,WACA,UACA,UACA,YACA,QACA,YACA,WACA,WACA,YACA,QACA,UACA,YACA,UACA,YACA,UACA,WACA,YACA,WACA,WACA,UACA,UACA,UACA,UACA,YACA,YACA,YACA,UACA,WACA,YACA,UACA,YACA,UACA,WACA,YACA,WACA,YACA,YACA,YACA,WACA,YACA,WACA,WACA,QACA,QACA,YACA,SACA,WACA,YACA,SACA,YACA,WACA,WACA,YACA,WACA,UACA,QACA,UACA,YACA,WACA,SACA,YACA,YACA,WACA,WACA,QACA,WACA,SACA,SACA,WACA,WACA,YACA,WACA,UACA,UACA,YACA,YACA,UACA,UACA,WACA,YACA,QACA,SACA,QACA,YACA,QACA,UACA,MACA,UACA,SACA,YACA,SACA,SACA,MACA,OACA,YACA,OACA,UACA,QACA,YACA,OACA,SACA,SACA,QACA,WACA,YACA,YACA,UACA,WACA,OACA,QACA,SACA,QACA,WACA,YACA,WACA,SACA,WACA,YACA,QACA,UACA,WACA,SACA,SACA,UACA,SACA,SACA,WACA,YACA,OACA,QACA,YACA,WACA,UACA,WACA,WACA,YACA,SACA,YACA,UACA,WACA,UACA,SACA,QACA,UACA,OACA,SACA,WACA,UACA,YACA,SACA,QACA,WACA,QACA,WACA,QACA,UACA,YACA,YACA,UACA,UACA,QACA,UACA,UACA,SACA,YACA,YACA,WACA,UACA,SACA,QACA,UACA,UACA,YACA,YACA,YACA,QACA,QACA,QACA,UACA,YACA,QACA,OACA,SACA,YACA,WACA,YACA,QACA,QACA,OACA,SACA,SACA,OACA,SACA,QACA,SACA,WACA,YACA,WACA,YACA,WACA,QACA,SACA,SACA,OACA,OACA,SACA,SACA,UACA,SACA,UACA,UACA,WACA,UACA,SACA,OACA,SACA,QACA,SACA,WACA,OACA,SACA,QACA,YACA,SACA,SACA,SACA,UACA,SACA,UACA,UACA,UACA,QACA,OACA,SACA,SACA,OACA,UACA,SACA,QACA,SACA,SACA,UACA,YACA,WACA,QACA,YACA,WACA,WACA,UACA,WACA,OACA,YACA,WACA,UACA,YACA,YACA,YACA,WACA,SACA,WACA,WACA,WACA,UACA,YACA,SACA,QACA,UACA,SACA,SACA,UACA,SACA,UACA,UACA,WACA,WACA,SACA,SACA,YACA,SACA,SACA,SACA,SACA,YACA,YACA,UACA,SACA,WACA,UACA,WACA,YACA,UACA,YACA,YACA,SACA,YACA,UACA,YACA,YACA,YACA,SACA,SACA,UACA,SACA,WACA,WACA,SACA,YACA,YACA,UACA,WACA,WACA,YACA,WACA,UACA,UACA,UACA,YACA,YACA,UACA,YACA,SACA,YACA,UACA,WACA,WACA,WACA,YACA,YACA,SACA,SACA,UACA,SACA,WACA,WACA,WACA,WACA,YACA,UACA,UACA,WACA,UACA,UACA,YACA,SACA,YACA,YACA,UACA,SACA,WACA,YACA,SACA,SACA,UACA,UACA,SACA,SACA,SACA,WACA,YACA,WACA,UACA,YACA,UACA,UACA,WACA,YACA,QACA,SACA,SACA,YACA,YACA,UACA,YACA,UACA,YACA,SACA,WACA,UACA,YACA,YACA,UACA,WACA,WACA,QACA,QACA,UACA,UACA,YACA,WACA,WACA,WACA,UACA,QACA,UACA,YACA,UACA,SACA,SACA,SACA,WACA,SACA,YACA,OACA,SACA,SACA,UACA,UACA,WACA,SACA,WACA,WACA,YACA,YACA,QACA,UACA,YACA,SACA,UACA,SACA,YACA,UACA,UACA,UACA,WACA,SACA,WACA,YACA,YACA,WACA,YACA,YACA,UACA,UACA,WACA,WACA,YACA,WACA,SACA,SACA,SACA,WACA,UACA,SACA,UACA,YACA,YACA,UACA,SACA,SACA,WACA,YACA,SACA,WACA,WACA,SACA,WACA,UACA,SACA,UACA,QACA,WACA,SACA,YACA,SACA,YACA,YACA,UACA,UACA,WACA,YACA,YACA,YACA,OACA,UACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,UACA,UACA,YACA,UACA,QACA,SACA,WACA,UACA,SACA,WACA,WACA,WACA,WACA,SACA,SACA,QACA,UACA,UACA,YACA,YACA,YACA,WACA,WACA,UACA,WACA,YACA,YACA,YACA,SACA,WACA,WACA,WACA,WACA,SACA,WACA,UACA,WACA,SACA,SACA,WACA,YACA,YACA,SACA,WACA,YACA,SACA,YACA,YACA,UACA,UACA,UACA,UACA,WACA,SACA,SACA,WACA,UACA,UACA,UACA,UACA,UACA,UACA,UACA,YACA,YACA,QACA,SACA,UACA,SACA,UACA,UACA,WACA,QACA,SACA,UACA,UACA,UACA,SACA,UACA,YACA,WACA,WACA,UACA,YACA,YACA,SACA,YACA,SACA,WACA,UACA,YACA,UACA,UACA,WACA,YACA,SACA,SACA,WACA,YACA,SACA,SACA,SACA,SACA,SACA,SACA,SACA,UACA,QACA,SACA,UACA,OACA,SACA,SACA,WACA,UACA,UACA,WACA,SACA,OACA,SACA,UACA,OACA,UACA,QACA,QACA,UACA,SACA,OACA,OACA,QACA,UACA,OACA,UACA,WACA,WACA,UACA,SACA,WACA,UACA,OACA,SACA,OACA,UACA,UACA,QACA,QACA,YACA,WACA,YACA,YACA,UACA,WACA,SACA,UACA,QACA,UACA,OACA,QACA,WACA,SACA,WACA,SACA,SACA,WACA,YACA,UACA,WACA,YACA,WACA,QACA,QACA,QACA,OACA,OACA,SACA,SACA,OACA,SACA,UACA,UACA,WACA,WACA,WACA,YACA,UACA,YACA,UACA,UACA,QACA,SACA,QACA,SACA,SACA,UACA,SACA,UACA,OACA,SACA,SACA,MACA,SACA,OACA,SACA,WACA,UACA,QACA,YACA,UACA,SACA,UACA,QACA,OACA,SACA,UACA,QACA,OACA,OACA,OACA,MACA,UACA,WACA,YACA,SACA,YACA,SACA,YACA,UACA,WACA,QACA,UACA,SACA,YACA,YACA,SACA,WACA,UACA,OACA,OACA,UACA,QACA,OACA,QACA,OACA,QACA,SACA,WACA,SACA,SACA,QACA,SACA,QACA,OACA,WACA,SACA,UACA,YACA,YACA,OACA,SACA,WACA,WACA,WACA,YACA,SACA,UACA,WACA,UACA,YACA,UACA,SACA,WACA,UACA,UACA,YACA,UACA,YACA,YACA,WACA,QACA,WACA,YACA,OACA,QACA,UACA,YACA,QACA,UACA,YACA,UACA,OACA,YACA,QACA,UACA,WACA,QACA,YACA,YACA,UACA,WACA,WACA,YACA,QACA,QACA,SACA,UACA,QACA,UACA,SACA,QACA,YACA,MACA,UACA,SACA,UACA,WACA,QACA,UACA,WACA,UACA,WACA,OACA,UACA,UACA,WACA,QACA,YACA,SACA,WACA,YACA,SACA,QACA,UACA,YACA,WACA,QACA,YACA,SACA,WACA,YACA,SACA,WACA,YACA,WACA,UACA,UACA,YACA,QACA,QACA,WACA,QACA,QACA,UACA,QACA,SACA,YACA,YACA,SACA,YACA,SACA,UACA,QACA,WACA,SACA,YACA,UACA,WACA,WACA,SACA,WACA,WACA,WACA,YACA,YACA,QACA,UACA,UACA,SACA,WACA,SACA,WACA,YACA,SACA,SACA,UACA,YACA,WACA,WACA,UACA,UACA,WACA,QACA,QACA,WACA,YACA,SACA,UACA,WACA,YACA,YACA,SACA,UACA,SACA,YACA,SACA,UACA,WACA,WACA,QACA,SACA,WACA,WACA,WACA,SACA,WACA,UACA,UACA,UACA,SACA,WACA,YACA,YACA,WACA,OACA,UACA,WACA,WACA,YACA,YACA,UACA,WACA,YACA,SACA,UACA,OACA,SACA,WACA,YACA,YACA,YACA,YACA,WACA,QACA,YACA,SACA,SACA,SACA,WACA,YACA,SACA,SACA,YACA,UACA,WACA,QACA,UACA,UACA,SACA,WACA,UACA,UACA,SACA,WACA,QACA,YACA,YACA,UACA,UACA,WACA,SACA,QACA,SACA,UACA,YACA,UACA,SACA,QACA,QACA,WACA,UACA,YACA,UACA,QACA,QACA,UACA,UACA,QACA,UACA,WACA,QACA,SACA,QACA,UACA,QACA,YACA,UACA,UACA,UACA,YACA,QACA,SACA,OACA,QACA,QACA,QACA,QACA,UACA,SACA,WACA,SACA,SACA,UACA,WACA,YACA,SACA,UACA,SACA,UACA,QACA,UACA,YACA,UACA,QACA,OACA,QACA,YACA,QACA,QACA,WACA,UACA,WACA,WACA,QACA,WACA,YACA,WACA,UACA,UACA,YACA,YACA,UACA,YACA,SACA,YACA,SACA,QACA,QACA,UACA,WACA,WACA,SACA,WACA,UACA,UACA,QACA,UACA,YACA,YACA,WACA,QACA,SACA,WACA,WACA,YACA,WACA,SACA,SACA,SACA,SACA,SACA,UACA,WACA,YACA,SACA,QACA,SACA,WACA,UACA,UACA,YACA,OACA,QACA,OACA,MACA,UACA,WACA,UACA,SACA,SACA,SACA,OACA,UACA,WACA,WACA,SACA,SACA,UACA,OACA,YACA,QACA,OACA,OACA,SACA,YACA,SACA,YACA,SACA,WACA,SACA,UACA,YACA,SACA,UACA,SACA,WACA,WACA,UACA,SACA,UACA,MACA,QACA,SACA,SACA,SACA,UACA,WACA,YACA,UACA,UACA,QACA,UACA,WACA,YACA,UACA,UACA,OACA,SACA,SACA,WACA,SACA,UACA,YACA,WACA,WACA,UACA,SACA,SACA,SACA,OACA,QACA,QACA,QACA,SACA,UACA,UACA,WACA,UACA,UACA,WACA,WACA,WACA,WACA,WACA,WACA,SACA,YACA,UACA,WACA,WACA,QACA,UACA,WACA,WACA,UACA,QACA,YACA,UACA,OACA,UACA,UACA,WACA,YACA,SACA,QACA,OACA,UACA,QACA,WACA,YACA,UACA,WACA,QACA,UACA,OACA,OACA,QACA,QACA,QACA,SACA,QACA,YACA,SACA,SACA,UACA,QACA,SACA,YACA,UACA,WACA,YACA,WACA,WACA,QACA,WACA,YACA,SACA,OACA,OACA,SACA,WACA,SACA,SACA,UACA,WACA,SACA,OACA,YACA,UACA,SACA,OACA,OACA,QACA,QACA,MACA,QACA,UACA,YACA,UACA,WACA,UACA,QACA,WACA,QACA,YACA,QACA,QACA,QACA,UACA,QACA,OACA,SACA,YACA,YACA,UACA,QACA,UACA,SACA,UACA,SACA,SACA,WACA,YACA,SACA,WACA,QACA,UACA,UACA,OACA,QACA,QACA,SACA,QACA,QACA,SACA,WACA,QACA,QACA,UACA,WACA,SACA,UACA,SACA,QACA,UACA,UACA,QACA,QACA,WACA,YACA,YACA,UACA,YACA,WACA,WACA,YACA,YACA,YACA,WACA,UACA,WACA,WACA,YACA,WACA,QACA,OACA,QACA,UACA,SACA,WACA,QACA,YACA,YACA,WACA,YACA,UACA,WACA,UACA,WACA,SACA,YACA,YACA,WACA,YACA,SACA,QACA,YACA,UACA,WACA,YACA,UACA,WACA,QACA,OACA,SACA,YACA,SACA,SACA,QACA,SACA,QACA,QACA,UACA,SACA,UACA,UACA,WACA,UACA,WACA,QACA,SACA,WACA,YACA,UACA,YACA,WACA,YACA,UACA,WACA,SACA,WACA,WACA,SACA,WACA,WACA,WACA,UACA,WACA,UACA,UACA,WACA,SACA,SACA,YACA,SACA,SACA,UACA,QACA,WACA,SACA,QACA,QACA,QACA,WACA,SACA,SACA,WACA,YACA,UACA,UACA,WACA,SACA,UACA,SACA,QACA,SACA,SACA,SACA,QACA,QACA,QACA,SACA,YACA,YACA,SACA,SACA,SACA,SACA,SACA,OACA,OACA,OACA,UACA,WACA,WACA,QACA,SACA,WACA,SACA,WACA,WACA,YACA,SACA,WACA,YACA,YACA,WACA,UACA,YACA,QACA,WACA,WACA,SACA,SACA,SACA,YACA,UACA,YACA,YACA,SACA,QACA,UACA,QACA,QACA,UACA,WACA,WACA,YACA,UACA,WACA,YACA,YACA,YACA,WACA,WACA,UACA,UACA,QACA,QACA,QACA,SACA,WACA,YACA,SACA,UACA,WACA,WACA,YACA,UACA,QACA,WACA,UACA,YACA,UACA,WACA,SACA,WACA,UACA,WACA,UACA,YACA,UACA,UACA,WACA,QACA,QACA,SACA,YACA,SACA,UACA,SACA,UACA,YACA,UACA,QACA,YACA,WACA,WACA,YACA,QACA,QACA,QACA,YACA,WACA,YACA,YACA,UACA,OACA,SACA,UACA,OACA,SACA,UACA,YACA,YACA,WACA,YACA,UACA,OACA,QACA,UACA,UACA,YACA,SACA,WACA,YACA,QACA,YACA,YACA,UACA,WACA,UACA,WACA,WACA,WACA,SACA,WACA,SACA,UACA,YACA,OACA,SACA,QACA,QACA,QACA,QACA,QACA,YACA,YACA,YACA,UACA,QACA,QACA,SACA,QACA,QACA,YACA,YACA,WACA,UACA,UACA,WACA,YACA,WACA,UACA,YACA,YACA,QACA,QACA,QACA,WACA,UACA,WACA,YACA,WACA,WACA,YACA,YACA,WACA,WACA,YACA,WACA,UACA,QACA,QACA,SACA,SACA,SACA,WACA,YACA,QACA,SACA,UACA,SACA,WACA,SACA,SACA,SACA,SACA,WACA,SACA,WACA,SACA,SACA,WACA,YACA,WACA,YACA,SACA,YACA,UACA,WACA,QACA,SACA,QACA,UACA,UACA,UACA,WACA,SACA,QACA,UACA,UACA,SACA,QACA,UACA,WACA,SACA,UACA,YACA,QACA,QACA,UACA,UACA,WACA,QACA,SACA,WACA,SACA,UACA,YACA,UACA,WACA,SACA,QACA,YACA,YACA,YACA,UACA,WACA,WACA,WACA,YACA,UACA,WACA,SACA,WACA,UACA,YACA,WACA,YACA,YACA,WACA,SACA,UACA,WACA,YACA,YACA,YACA,UACA,YACA,YACA,UACA,UACA,WACA,YACA,YACA,UACA,WACA,SACA,WACA,WACA,UACA,SACA,SACA,YACA,UACA,YACA,OACA,UACA,SACA,SACA,OACA,WACA,YACA,UACA,SACA,YACA,WACA,QACA,UACA,QACA,WACA,WACA,WACA,SACA,UACA,UACA,UACA,SACA,OACA,SACA,WACA,YACA,SACA,YACA,YACA,YACA,WACA,WACA,WACA,WACA,YACA,YACA,SACA,WACA,SACA,UACA,YACA,UACA,YACA,SACA,WACA,UACA,YACA,YACA,SACA,UACA,WACA,UACA,UACA,UACA,UACA,WACA,UACA,YACA,YACA,WACA,SACA,WACA,UACA,YACA,WACA,QACA,UACA,UACA,WACA,YACA,YACA,OACA,YACA,UACA,YACA,OACA,WACA,QACA,OACA,QACA,QACA,QACA,QACA,QACA,SACA,UACA,UACA,YACA,YACA,UACA,WACA,WACA,WACA,UACA,WACA,QACA,QACA,SACA,SACA,UACA,UACA,QACA,SACA,QACA,QACA,QACA,WACA,WACA,YACA,WACA,UACA,UACA,WACA,UACA,WACA,WACA,YACA,YACA,QACA,SACA,UACA,UACA,QACA,WACA,SACA,SACA,YACA,UACA,YACA,UACA,SACA,WACA,QACA,OACA,UACA,WACA,UACA,UACA,WACA,UACA,YACA,MACA,UACA,OACA,SACA,SACA,WACA,OACA,QACA,SACA,WACA,QACA,SACA,OACA,SACA,UACA,UACA,UACA,WACA,UACA,WACA,WACA,UACA,UACA,OACA,YACA,SACA,SACA,UACA,QACA,SACA,SACA,WACA,OACA,SACA,QACA,YACA,UACA,QACA,WACA,SACA,WACA,SACA,QACA,SACA,QACA,OACA,OACA,UACA,YACA,OACA,QACA,QACA,WACA,WACA,UACA,UACA,YACA,QACA,SACA,WACA,UACA,UACA,YACA,WACA,WACA,QACA,UACA,QACA,QACA,SACA,UACA,WACA,WACA,YACA,YACA,UACA,WACA,SACA,QACA,QACA,QACA,WACA,SACA,SACA,WACA,YACA,SACA,SACA,SACA,WACA,SACA,YACA,SACA,WACA,YACA,YACA,UACA,WACA,OACA,QACA,WACA,WACA,OACA,YACA,UACA,QACA,QACA,QACA,SACA,WACA,UACA,OACA,QACA,UACA,UACA,YACA,YACA,WACA,UACA,OACA,SACA,OACA,OACA,QACA,SACA,UACA,YACA,UACA,SACA,WACA,SACA,SACA,WACA,SACA,WACA,OACA,UACA,OACA,SACA,SACA,SACA,UACA,YACA,SACA,SACA,SACA,QACA,UACA,QACA,WACA,UACA,QACA,UACA,YACA,UACA,UACA,WACA,YACA,QACA,UACA,SACA,WACA,WACA,YACA,YACA,YACA,YACA,YACA,WACA,UACA,YACA,UACA,UACA,WACA,QACA,QACA,SACA,WACA,WACA,OACA,YACA,WACA,YACA,UACA,QACA,SACA,OACA,UACA,UACA,YACA,SACA,SACA,QACA,WACA,SACA,QACA,WACA,YACA,WACA,UACA,YACA,UACA,UACA,WACA,WACA,WACA,UACA,YACA,SACA,WACA,WACA,UACA,QACA,SACA,YACA,WACA,UACA,YACA,UACA,WACA,WACA,UACA,OACA,SACA,WACA,UACA,UACA,UACA,WACA,WACA,SACA,WACA,UACA,UACA,YACA,SACA,WACA,QACA,SACA,QACA,QACA,UACA,QACA,SACA,YACA,UACA,WACA,WACA,YACA,QACA,MACA,QACA,WACA,UACA,UACA,UACA,MACA,UACA,QACA,SACA,WACA,QACA,SACA,UACA,WACA,WACA,YACA,OACA,SACA,UACA,SACA,SACA,OACA,QACA,OACA,MACA,QACA,QACA,QACA,WACA,SACA,YACA,SACA,QACA,QACA,UACA,YACA,OACA,WACA,QACA,QACA,QACA,YACA,UACA,UACA,WACA,SACA,SACA,UACA,SACA,QACA,OACA,QACA,WACA,YACA,QACA,YACA,WACA,SACA,YACA,SACA,YACA,YACA,WACA,UACA,YACA,YACA,YACA,YACA,YACA,UACA,UACA,UACA,YACA,WACA,SACA,SACA,WACA,WACA,YACA,YACA,UACA,WACA,YACA,UACA,YACA,WACA,WACA,YACA,WACA,WACA,WACA,UACA,WACA,WACA,YACA,UACA,YACA,YACA,UACA,UACA,SACA,YACA,YACA,UACA,QACA,SACA,UACA,SACA,YACA,WACA,WACA,YACA,WACA,WACA,WACA,SACA,YACA,YACA,WACA,UACA,UACA,UACA,UACA,YACA,UACA,YACA,WACA,QACA,YACA,UACA,YACA,SACA,YACA,YACA,WACA,WACA,YACA,YACA,WACA,WACA,YACA,WACA,YACA,YACA,UACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,YACA,YACA,YACA,YACA,WACA,WACA,YACA,YACA,YACA,YACA,YACA,YACA,WACA,UACA,SACA,YACA,UACA,YACA,WACA,UACA,WACA,UACA,SACA,WACA,SACA,YACA,UACA,WACA,YACA,WACA,YACA,WACA,UACA,YACA,SACA,YACA,YACA,YACA,SACA,WACA,UACA,YACA,UACA,WACA,WACA,YACA,YACA,UACA,WACA,YACA,SACA,YACA,WACA,WACA,YACA,WACA,WACA,WACA,WACA,SACA,UACA,WACA,YACA,YACA,WACA,YACA,UACA,WACA,YACA,UACA,YACA,WACA,YACA,WACA,UACA,YACA,SACA,SACA,UACA,WACA,UACA,UACA,YACA,YACA,QACA,YACA,YACA,YACA,YACA,YACA,QACA,WACA,YACA,SACA,WACA,OACA,YACA,WACA,WACA,UACA,SACA,YACA,YACA,UACA,UACA,UACA,WACA,WACA,YACA,UACA,SACA,YACA,YACA,YACA,YACA,UACA,WACA,WACA,QACA,YACA,WACA,WACA,WACA,YACA,YACA,UACA,WACA,WACA,YACA,UACA,SACA,YACA,WACA,WACA,WACA,WACA,YACA,YACA,YACA,YACA,UACA,WACA,UACA,YACA,UACA,WACA,YACA,UACA,YACA,WACA,UACA,YACA,YACA,WACA,YACA,SACA,WACA,SACA,YACA,WACA,UACA,WACA,WACA,YACA,WACA,YACA,YACA,YACA,YACA,WACA,SACA,YACA,WACA,UACA,WACA,UACA,YACA,YACA,SACA,SACA,YACA,YACA,YACA,WACA,SACA,YACA,YACA,WACA,SACA,YACA,YACA,UACA,SACA,YACA,SACA,WACA,WACA,SACA,SACA,WACA,UACA,WACA,YACA,YACA,UACA,WACA,WACA,YACA,WACA,WACA,SACA,WACA,YACA,SACA,YACA,YACA,WACA,WACA,WACA,YACA,YACA,YACA,WACA,YACA,WACA,WACA,SACA,WACA,WACA,SACA,WACA,WACA,YACA,WACA,WACA,YACA,YACA,WACA,YACA,YACA,WACA,YACA,UACA,YACA,YACA,WACA,WACA,WACA,SACA,UACA,WACA,YACA,UACA,UACA,YACA,WACA,UACA,WACA,WACA,SACA,QACA,QACA,UACA,WACA,WACA,YACA,SACA,YACA,YACA,YACA,YACA,UACA,YACA,SACA,UACA,WACA,UACA,UACA,WACA,SACA,UACA,WACA,WACA,YACA,WACA,YACA,WACA,WACA,YACA,UACA,WACA,YACA,SACA,WACA,YACA,UACA,QACA,YACA,SACA,WACA,YACA,SACA,UACA,YACA,YACA,YACA,SACA,YACA,WACA,UACA,UACA,YACA,YACA,QACA,SACA,UACA,WACA,YACA,SACA,UACA,UACA,WACA,SACA,SACA,SACA,WACA,YACA,SACA,OACA,QACA,UACA,WACA,UACA,SACA,SACA,UACA,SACA,UACA,WACA,UACA,UACA,WACA,WACA,UACA,SACA,UACA,SACA,WACA,SACA,SACA,UACA,QACA,SACA,WACA,UACA,SACA,SACA,YACA,UACA,SACA,QACA,UACA,OACA,YACA,OACA,QACA,QACA,UACA,UACA,UACA,SACA,SACA,QACA,UACA,SACA,SACA,WACA,WACA,WACA,YACA,UACA,YACA,UACA,QACA,SACA,SACA,YACA,QACA,UACA,SACA,SACA,WACA,UACA,YACA,WACA,WACA,SACA,UACA,UACA,UACA,UACA,UACA,UACA,WACA,WACA,SACA,WACA,OACA,QACA,SACA,YACA,SACA,WACA,SACA,WACA,UACA,SACA,YACA,WACA,WACA,YACA,UACA,QACA,QACA,YACA,WACA,UACA,UACA,SACA,QACA,UACA,SACA,YACA,WACA,UACA,OACA,SACA,OACA,UACA,OACA,WACA,YACA,SACA,QACA,OACA,WACA,UACA,QACA,WACA,SACA,UACA,WACA,YACA,WACA,UACA,UACA,YACA,WACA,UACA,UACA,YACA,WACA,SACA,SACA,QACA,QACA,UACA,WACA,QACA,OACA,YACA,UACA,WACA,UACA,UACA,SACA,WACA,UACA,QACA,QACA,WACA,WACA,UACA,WACA,YACA,UACA,YACA,QACA,WACA,WACA,UACA,WACA,QACA,UACA,OACA,WACA,SACA,UACA,UACA,QACA,SACA,UACA,QACA,QACA,SACA,YACA,MACA,QACA,SACA,QACA,QACA,QACA,SACA,QACA,OACA,SACA,OACA,UACA,SACA,SACA,QACA,OACA,UACA,SACA,UACA,SACA,WACA,YACA,YACA,WACA,YACA,UACA,SACA,SACA,YACA,UACA,UACA,WACA,YACA,UACA,OACA,UACA,QACA,QACA,WACA,SACA,OACA,WACA,SACA,OACA,QACA,QACA,WACA,QACA,YACA,SACA,QACA,WACA,UACA,QACA,WACA,UACA,WACA,SACA,MACA,OACA,SACA,QACA,SACA,QACA,QACA,YACA,UACA,OACA,OACA,YACA,WACA,UACA,SACA,WACA,WACA,WACA,WACA,SACA,WACA,SACA,YACA,UACA,SACA,YACA,OACA,OACA,QACA,UACA,OACA,OACA,UACA,SACA,WACA,SACA,OACA,QACA,WACA,SACA,OACA,SACA,OACA,OACA,WACA,QACA,UACA,SACA,SACA,WACA,SACA,MACA,OACA,YACA,YACA,YACA,YACA,YACA,UACA,OACA,OACA,SACA,OACA,QACA,OACA,OACA,UACA,UACA,YACA,QACA,YACA,YACA,QACA,QACA,QACA,MACA,UACA,QACA,SACA,WACA,UACA,WACA,SACA,UACA,UACA,UACA,UACA,QACA,UACA,UACA,YACA,UACA,WACA,UACA,YACA,UACA,OACA,QACA,QACA,MACA,UACA,UACA,OACA,OACA,OACA,WACA,WACA,SACA,WACA,QACA,UACA,OACA,MACA,YACA,UACA,QACA,MACA,SACA,QACA,QACA,OACA,SACA,SACA,OACA,QACA,MACA,UACA,QACA,MACA,WACA,OACA,YACA,QACA,YACA,UACA,UACA,QACA,OACA,MACA,SACA,SACA,OACA,SACA,YACA,YACA,UACA,QC/lPF,SAASC,GAAeC,GACtB,MAAMzjI,EAAMyjI,EAAW7jI,MAAM,IAE7B,OAAOsB,OAAOm6H,OAAOr7H,EACvB,CAEA,MAAM0jI,GAAoBF,GAAe,YAG5BG,GAAQziI,OAAOm6H,OAAO,CAEjCuI,KAAM1iI,OAAOm6H,OAAO,CAClBwI,UAAWL,GAAe,8BAC1BM,UAAWN,GAAe,6BAC1BO,MAAOP,GAAe,cACtBQ,QAASN,KAIXO,aAAc/iI,OAAOm6H,OAAO,CAC1BwI,UAAWL,GAAe,4BAC1BM,UAAWN,GAAe,8BAC1BO,MAAOP,GAAe,YACtBQ,QAASN,OAOAQ,GAAoB,IAAI5lI,OACnC,0D,2SC3BK,MAAM6lI,GAIX,WAAA3sI,CAAoB2G,GAAA,KAAAA,OAAAA,CAAqB,CAWnC,qBAAAimI,CAAsBt8H,EAAec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dA,IAGJ/vH,MAAM+vH,GACNx9H,KAAKqG,GAAKm3H,EAAWn3H,GACvB,ECTK,MAAM,GAAb,cACE,KAAAuiG,SAAU,EAEV,KAAA9mB,QAAwB,GACxB,KAAAhM,QAAwB,GACxB,KAAAinE,oBAA0C,GAC1C,KAAArlE,YAAgC,GAChC,KAAAulE,wBAA8C,EAChD,E,gBCKO,MAAe,GAAtB,cACE,KAAAhjH,eAAyB,KAEf,KAAAje,WAAyB,IAAIzc,GAAkB,GAE/C,KAAA89I,aAAe,iBAEf,KAAAC,mBAAqB,CAC7B,WACA,YACA,aACA,cACA,OACA,OACA,YACA,WACA,SACA,cACA,YACA,MACA,UACA,WACA,YACA,aACA,UACA,aACA,MACA,MACA,KACA,QACA,SACA,IACA,SACA,UACA,cACA,QAGA,YAGQ,KAAAC,mBAAqB,CAC7B,OACA,OACA,YACA,WACA,aACA,QACA,SACA,KACA,SACA,UACA,QACA,iBACA,SACA,OACA,UACA,WACA,MACA,cACA,aACA,YACA,QACA,YACA,SACA,WAGA,MACA,gBAGQ,KAAAC,gBAAkB,CAC1B,OACA,QACA,UACA,WACA,OACA,cACA,YACA,WACA,YACA,WACA,OAGA,aAGQ,KAAAC,cAA0B,CAClC,MACA,aACA,YACA,OACA,OACA,WACA,YACA,SACA,UACA,YACA,OACA,MACA,UACA,WACA,OACA,WACA,MAGA,MACA,WAGQ,KAAAC,gBAAkB,CAC1BC,SAAU,QACVC,gBAAgB,EAmSpB,CAhSE,gBAAc9iH,GACZ,OAA8B,MAAvB96B,KAAKi6B,cACd,CAEU,QAAA4jH,CAAShsI,GAEjB,IAAK7R,KAAK89I,2BAA2BjsI,GACnC,OAAO,KAET,MACMksI,GADS,IAAIC,WACAC,gBAAgBpsI,EAAM,mBACzC,OAAc,MAAPksI,GAAmD,MAApCA,EAAIG,cAAc,eAAyBH,EAAM,IACzE,CAEU,QAAAI,CAAStsI,EAAcusI,EAAiBxtI,EAAe,CAAC,GAChE,MAAMytI,EAAyCn1I,OAAOH,OACpD,CAAEq1I,OAAQA,GACVp+I,KAAK09I,gBACL9sI,GAEFiB,EAAO7R,KAAKs+I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AA2B,CACzC,mBACA,cACA,WACA,SACA,QACA,YACA,cACA,aACA,YACA,gBAGc,GAAAC,uBAAmC,IAC9CF,GAA4BC,eAC/B,eAGc,GAAAE,qBAAiC,CAC/C,UACA,YACA,kBACA,aACA,OACA,OAGc,GAAAC,0BAAsC,CACpD,UACA,YACA,kBACA,aACA,UAGc,GAAAC,qBAAiC,CAC/C,YACA,SACA,cACA,WACA,SACA,KACA,QACA,UACA,cACA,eACA,QACA,eACA,YACA,SACA,YAGc,GAAAC,0BAAsC,CACpD,YACA,SACA,cACA,WACA,QACA,UACA,eACA,YACA,UAGc,GAAAC,qBAAiC,CAC/C,SACA,WACA,gBACA,kBACA,QACA,UACA,cACA,cACA,WACA,aACA,SACA,QACA,UACA,QACA,UACA,kBACA,0BACA,mBAGc,GAAAC,0BAAsC,CACpD,QACA,UACA,QACA,UACA,kBACA,2BAGc,GAAAC,sBAAkC,CAChD,YACA,eACA,WACA,aACA,QACA,UACA,SACA,cACA,YACA,wBACA,mBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,eACA,YACA,eACA,YACA,oBACA,iBACA,oBACA,iBACA,gBACA,kBACA,aACA,eACA,0BACA,wBACA,qBACA,UACA,cACA,cACA,eACA,UAGc,GAAAC,qBAAiC,CAC/C,WACA,cACA,UACA,YACA,QACA,UACA,SACA,cACA,YACA,uBACA,kBACA,QACA,OACA,UACA,SACA,cACA,YACA,SACA,QACA,UACA,YACA,gBACA,cACA,cACA,YACA,cACA,YACA,mBACA,iBACA,mBACA,iBACA,cACA,gBACA,iBACA,mBACA,yBACA,uBACA,cACA,qBACA,uBACA,gBACA,gBACA,UAGc,GAAAC,cAA0B,CACxC,MACA,MACA,OACA,SACA,SACA,WACA,WACA,MACA,MACA,OACA,MACA,OACA,UACA,YACA,gBACA,gBACA,SACA,aACA,oBACA,MACA,OAGc,GAAAC,oBAAgC,CAC9C,UACA,YACA,aACA,WACA,WAGc,GAAAC,yBAAqC,CAAC,IAAK,IAAK,IAAK,KAG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","sources":["webpack:///webpack/runtime/chunk loaded","webpack:///webpack/runtime/create fake namespace object","webpack:///../../libs/common/src/platform/enums/log-level-type.enum.ts","webpack:///../../libs/common/src/platform/services/console-log.service.ts","webpack:///../../libs/common/src/auth/enums/authentication-type.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/token-two-factor.request.ts","webpack:///../../libs/common/src/platform/misc/utils.ts","webpack:///../../libs/common/src/auth/services/webauthn-login/request/webauthn-login-response.request.ts","webpack:///../../libs/common/src/auth/services/webauthn-login/request/webauthn-login-assertion-response.request.ts","webpack:///../../libs/common/src/platform/enums/encryption-type.enum.ts","webpack:///../../libs/common/src/platform/enums/file-upload-type.enum.ts","webpack:///../../libs/common/src/platform/enums/hash-purpose.enum.ts","webpack:///../../libs/common/src/platform/enums/html-storage-location.enum.ts","webpack:///../../libs/common/src/platform/enums/kdf-type.enum.ts","webpack:///../../libs/common/src/platform/enums/key-suffix-options.enum.ts","webpack:///../../libs/common/src/platform/enums/storage-location.enum.ts","webpack:///../../libs/common/src/platform/enums/theme-type.enum.ts","webpack:///../../libs/common/src/platform/models/domain/symmetric-crypto-key.ts","webpack:///../../libs/auth/src/common/models/domain/login-credentials.ts","webpack:///../../libs/auth/src/common/models/domain/user-decryption-options.ts","webpack:///../../libs/common/src/platform/models/domain/enc-string.ts","webpack:///../../libs/common/src/platform/state/derive-definition.ts","webpack:///../../libs/common/src/platform/state/state.provider.ts","webpack:///../../libs/common/src/platform/state/deserialization-helpers.ts","webpack:///../../libs/common/src/platform/state/key-definition.ts","webpack:///../../libs/common/src/platform/state/user-key-definition.ts","webpack:///../../libs/common/src/platform/state/state-definition.ts","webpack:///../../libs/common/src/platform/state/state-definitions.ts","webpack:///../../libs/common/src/platform/state/state-event-registrar.service.ts","webpack:///../../libs/common/src/platform/state/state-event-runner.service.ts","webpack:///../../libs/auth/src/common/services/pin/pin.service.implementation.ts","webpack:///../../libs/common/src/auth/enums/authentication-status.ts","webpack:///../../libs/auth/src/common/services/login-email/login-email.service.ts","webpack:///../../libs/common/src/platform/misc/range-with-default.ts","webpack:///../../libs/common/src/auth/models/domain/kdf-config.ts","webpack:///../../libs/common/src/models/response/base.response.ts","webpack:///../../libs/common/src/models/response/error.response.ts","webpack:///../../libs/common/src/platform/scheduling/task-scheduler.service.ts","webpack:///../../libs/common/src/platform/scheduling/default-task-scheduler.service.ts","webpack:///../../libs/common/src/platform/scheduling/scheduled-task-name.enum.ts","webpack:///../../libs/common/src/auth/enums/two-factor-provider-type.ts","webpack:///../../libs/common/src/auth/models/domain/force-set-password-reason.ts","webpack:///../../libs/common/src/enums/client-type.enum.ts","webpack:///../../libs/common/src/enums/device-type.enum.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/device.request.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/token.request.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/password-token.request.ts","webpack:///../../libs/common/src/auth/models/response/identity-captcha.response.ts","webpack:///../../libs/common/src/auth/models/response/master-password-policy.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/key-connector-user-decryption-option.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/trusted-device-user-decryption-option.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/webauthn-prf-decryption-option.response.ts","webpack:///../../libs/common/src/auth/models/response/user-decryption-options/user-decryption-options.response.ts","webpack:///../../libs/common/src/auth/models/response/identity-token.response.ts","webpack:///../../libs/common/src/auth/models/response/identity-two-factor.response.ts","webpack:///../../libs/common/src/enums/event-system-user.enum.ts","webpack:///../../libs/common/src/enums/event-type.enum.ts","webpack:///../../libs/common/src/enums/http-status-code.enum.ts","webpack:///../../libs/common/src/enums/integration-type.enum.ts","webpack:///../../libs/common/src/enums/native-messaging-version.enum.ts","webpack:///../../libs/common/src/enums/notification-type.enum.ts","webpack:///../../libs/common/src/models/request/keys.request.ts","webpack:///../../libs/common/src/platform/models/domain/account.ts","webpack:///../../libs/auth/src/common/login-strategies/auth-request-login.strategy.ts","webpack:///../../libs/common/src/platform/models/domain/domain-base.ts","webpack:///../../libs/common/src/admin-console/models/domain/master-password-policy-options.ts","webpack:///../../libs/auth/src/common/login-strategies/password-login.strategy.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/sso-token.request.ts","webpack:///../../libs/auth/src/common/login-strategies/sso-login.strategy.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/user-api-token.request.ts","webpack:///../../libs/auth/src/common/login-strategies/user-api-login.strategy.ts","webpack:///../../libs/common/src/auth/models/request/identity-token/webauthn-login-token.request.ts","webpack:///../../libs/auth/src/common/login-strategies/webauthn-login.strategy.ts","webpack:///../../libs/auth/src/common/services/login-strategies/login-strategy.state.ts","webpack:///../../libs/auth/src/common/services/user-decryption-options/user-decryption-options.service.ts","webpack:///../../libs/common/src/auth/models/domain/admin-auth-req-storable.ts","webpack:///../../libs/common/src/auth/models/request/passwordless-auth.request.ts","webpack:///../../libs/auth/src/common/services/auth-request/auth-request.service.ts","webpack:///../../libs/common/src/enums/feature-flag.enum.ts","webpack:///../../libs/common/src/admin-console/enums/organization-api-key-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/organization-connection-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/organization-user-status-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/organization-user-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/policy-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/provider-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/provider-user-status-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/provider-user-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/scim-provider-type.enum.ts","webpack:///../../libs/common/src/admin-console/enums/provider-status-type.enum.ts","webpack:///../../libs/auth/src/common/services/accounts/lock.service.ts","webpack:///../../libs/common/src/admin-console/models/data/organization.data.ts","webpack:///../../libs/common/src/admin-console/models/domain/organization.ts","webpack:///../../libs/common/src/admin-console/services/organization/organization.service.ts","webpack:///../../libs/common/src/models/response/list.response.ts","webpack:///../../libs/common/src/admin-console/models/data/policy.data.ts","webpack:///../../libs/common/src/admin-console/models/domain/policy.ts","webpack:///../../libs/common/src/admin-console/models/response/policy.response.ts","webpack:///../../libs/common/src/admin-console/services/policy/policy-api.service.ts","webpack:///../../libs/common/src/admin-console/models/domain/reset-password-policy-options.ts","webpack:///../../libs/common/src/admin-console/services/policy/policy.service.ts","webpack:///../../libs/common/src/admin-console/models/domain/provider.ts","webpack:///../../libs/common/src/admin-console/services/provider.service.ts","webpack:///../../libs/common/src/auth/abstractions/account.service.ts","webpack:///../../libs/common/src/auth/services/account.service.ts","webpack:///../../libs/common/src/auth/services/auth.service.ts","webpack:///../../libs/common/src/models/request/update-avatar.request.ts","webpack:///../../libs/common/src/auth/services/avatar.service.ts","webpack:///../../libs/common/src/auth/models/request/secret-verification.request.ts","webpack:///../../libs/common/src/auth/models/request/update-devices-trust.request.ts","webpack:///../../libs/common/src/auth/services/device-trust.service.implementation.ts","webpack:///../../libs/common/src/auth/abstractions/devices/views/device.view.ts","webpack:///../../libs/common/src/auth/services/devices/devices.service.implementation.ts","webpack:///../../libs/common/src/auth/abstractions/devices/responses/device.response.ts","webpack:///../../libs/common/src/auth/models/response/protected-device.response.ts","webpack:///../../libs/common/src/auth/services/devices/requests/trusted-device-keys.request.ts","webpack:///../../libs/common/src/auth/services/devices-api.service.implementation.ts","webpack:///../../libs/common/src/auth/services/kdf-config.service.ts","webpack:///../../libs/common/src/auth/models/request/key-connector-user-key.request.ts","webpack:///../../libs/common/src/auth/models/request/set-key-connector-key.request.ts","webpack:///../../libs/common/src/auth/services/key-connector.service.ts","webpack:///../../libs/common/src/auth/services/master-password/master-password.service.ts","webpack:///../../libs/common/src/auth/services/sso-login.service.ts","webpack:///../../libs/common/src/enums/vault-timeout-action.enum.ts","webpack:///../../libs/common/src/types/vault-timeout.type.ts","webpack:///../../libs/common/src/auth/models/domain/set-tokens-result.ts","webpack:///../../libs/common/src/auth/services/token.state.ts","webpack:///../../libs/common/src/auth/services/token.service.ts","webpack:///../../libs/auth/src/common/utilities/decode-jwt-token-to-json.utility.ts","webpack:///../../libs/common/src/auth/enums/verification-type.ts","webpack:///../../libs/common/src/auth/services/user-verification/user-verification-api.service.ts","webpack:///../../libs/common/src/auth/models/request/verify-otp.request.ts","webpack:///../../libs/common/src/auth/services/user-verification/user-verification.service.ts","webpack:///../../libs/common/src/auth/types/verification.ts","webpack:///../../libs/common/src/autofill/constants/index.ts","webpack:///../../libs/common/src/autofill/services/autofill-settings.service.ts","webpack:///../../libs/common/src/autofill/services/badge-settings.service.ts","webpack:///../../libs/common/src/models/domain/domain-service.ts","webpack:///../../libs/common/src/autofill/services/domain-settings.service.ts","webpack:///../../libs/common/src/autofill/services/user-notification-settings.service.ts","webpack:///../../libs/common/src/billing/services/account/billing-account-profile-state.service.ts","webpack:///../../libs/common/src/platform/biometrics/biometric.state.ts","webpack:///../../libs/common/src/platform/biometrics/biometric-state.service.ts","webpack:///../../libs/common/src/platform/factories/account-factory.ts","webpack:///../../libs/common/src/platform/factories/global-state-factory.ts","webpack:///../../libs/common/src/platform/factories/state-factory.ts","webpack:///../../libs/common/src/platform/messaging/message.listener.ts","webpack:///../../libs/common/src/platform/messaging/message.sender.ts","webpack:///../../libs/common/src/platform/messaging/types.ts","webpack:///../../libs/common/src/platform/messaging/helpers.ts","webpack:///../../libs/common/src/platform/messaging/subject-message.sender.ts","webpack:///../../libs/common/src/platform/misc/lazy.ts","webpack:///../../libs/common/src/platform/misc/sequentialize.ts","webpack:///../../libs/common/src/platform/models/domain/global-state.ts","webpack:///../../libs/common/src/platform/services/app-id.service.ts","webpack:///../../libs/common/src/platform/models/response/server-config.response.ts","webpack:///../../libs/common/src/platform/services/config/config-api.service.ts","webpack:///../../libs/common/src/platform/abstractions/config/server-config.ts","webpack:///../../libs/common/src/platform/abstractions/environment.service.ts","webpack:///../../libs/common/src/platform/models/data/server-config.data.ts","webpack:///../../libs/common/src/platform/services/config/default-config.service.ts","webpack:///../../libs/common/src/platform/services/container.service.ts","webpack:///../../libs/common/src/platform/services/cryptography/initializer-key.ts","webpack:///../../libs/common/src/vault/enums/cipher-type.ts","webpack:///../../libs/common/src/vault/enums/cipher-reprompt-type.ts","webpack:///../../libs/common/src/vault/enums/field-type.enum.ts","webpack:///../../libs/common/src/vault/enums/linked-id-type.enum.ts","webpack:///../../libs/common/src/vault/enums/secure-note-type.enum.ts","webpack:///../../libs/common/src/vault/models/data/attachment.data.ts","webpack:///../../libs/common/src/vault/models/data/card.data.ts","webpack:///../../libs/common/src/vault/models/data/field.data.ts","webpack:///../../libs/common/src/vault/models/data/identity.data.ts","webpack:///../../libs/common/src/vault/models/data/fido2-credential.data.ts","webpack:///../../libs/common/src/vault/models/data/login-uri.data.ts","webpack:///../../libs/common/src/vault/models/data/login.data.ts","webpack:///../../libs/common/src/vault/models/data/password-history.data.ts","webpack:///../../libs/common/src/vault/models/data/secure-note.data.ts","webpack:///../../libs/common/src/vault/models/data/cipher.data.ts","webpack:///../../libs/common/src/vault/models/view/attachment.view.ts","webpack:///../../libs/common/src/vault/linked-field-option.decorator.ts","webpack:///../../libs/common/src/vault/utils.ts","webpack:///../../libs/common/src/vault/models/view/item.view.ts","webpack:///../../libs/common/src/vault/models/view/card.view.ts","webpack:///../../libs/common/src/vault/models/view/field.view.ts","webpack:///../../libs/common/src/vault/models/view/identity.view.ts","webpack:///../../libs/common/src/vault/models/view/fido2-credential.view.ts","webpack:///../../libs/common/src/platform/misc/safe-urls.ts","webpack:///../../libs/common/src/vault/models/view/login-uri.view.ts","webpack:///../../libs/common/src/vault/models/view/login.view.ts","webpack:///../../libs/common/src/vault/models/view/password-history.view.ts","webpack:///../../libs/common/src/vault/models/view/secure-note.view.ts","webpack:///../../libs/common/src/vault/models/view/cipher.view.ts","webpack:///../../libs/common/src/vault/models/domain/attachment.ts","webpack:///../../libs/common/src/vault/models/domain/card.ts","webpack:///../../libs/common/src/vault/models/domain/field.ts","webpack:///../../libs/common/src/vault/models/domain/identity.ts","webpack:///../../libs/common/src/vault/models/domain/fido2-credential.ts","webpack:///../../libs/common/src/vault/models/domain/login-uri.ts","webpack:///../../libs/common/src/vault/models/domain/login.ts","webpack:///../../libs/common/src/vault/models/domain/password.ts","webpack:///../../libs/common/src/vault/models/domain/secure-note.ts","webpack:///../../libs/common/src/vault/models/domain/cipher.ts","webpack:///../../libs/common/src/platform/services/cryptography/get-class-initializer.ts","webpack:///../../libs/common/src/platform/services/cryptography/bulk-encrypt.service.implementation.ts","webpack:///../../libs/common/src/platform/models/domain/enc-array-buffer.ts","webpack:///../../libs/common/src/platform/models/domain/encrypted-object.ts","webpack:///../../libs/common/src/platform/services/cryptography/encrypt.service.implementation.ts","webpack:///../../libs/common/src/platform/services/cryptography/fallback-bulk-encrypt.service.ts","webpack:///../../libs/common/src/platform/services/cryptography/multithread-encrypt.service.implementation.ts","webpack:///../../libs/common/src/platform/abstractions/fido2/fido2-active-request-manager.abstraction.ts","webpack:///../../libs/common/src/platform/abstractions/fido2/fido2-authenticator.service.abstraction.ts","webpack:///../../libs/common/src/platform/services/fido2/fido2-active-request-manager.ts","webpack:///../../libs/common/src/platform/services/fido2/cbor.ts","webpack:///../../libs/common/src/platform/services/fido2/ecdsa-utils.ts","webpack:///../../libs/common/src/platform/services/fido2/fido2-utils.ts","webpack:///../../libs/common/src/platform/services/fido2/guid-utils.ts","webpack:///../../libs/common/src/platform/services/fido2/fido2-authenticator.service.ts","webpack:///../../libs/common/src/platform/abstractions/fido2/fido2-client.service.abstraction.ts","webpack:///../../libs/common/src/platform/services/fido2/domain-utils.ts","webpack:///../../libs/common/src/platform/services/fido2/fido2-client.service.ts","webpack:///../../libs/common/src/platform/services/file-upload/azure-file-upload.service.ts","webpack:///../../libs/common/src/platform/services/file-upload/bitwarden-file-upload.service.ts","webpack:///../../libs/common/src/platform/services/file-upload/file-upload.service.ts","webpack:///../../libs/common/src/platform/services/key-generation.service.ts","webpack:///../../libs/common/src/state-migrations/migration-builder.ts","webpack:///../../libs/common/src/state-migrations/migrator.ts","webpack:///../../libs/common/src/state-migrations/migrations/10-move-ever-had-user-key-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/11-move-org-keys-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/12-move-environment-state-to-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/13-move-provider-keys-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/14-move-biometric-client-key-half-state-to-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/15-move-folder-state-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/16-move-last-sync-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/17-move-enable-passkeys-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/18-move-autofill-settings-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/19-migrate-require-password-on-start.ts","webpack:///../../libs/common/src/state-migrations/migrations/20-move-private-key-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/21-move-collections-state-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/22-move-collapsed-groupings-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/23-move-biometric-prompts-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/24-move-sm-onboarding-key-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/25-move-clear-clipboard-to-autofill-settings-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/26-revert-move-last-sync-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/27-move-badge-settings-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/28-move-biometric-unlock-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/29-move-user-notification-settings-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/30-move-policy-state-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/31-move-enable-context-menu-to-autofill-settings-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/32-move-preferred-language.ts","webpack:///../../libs/common/src/state-migrations/migrations/33-move-app-id-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/34-move-domain-settings-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/35-move-theme-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/36-move-show-card-and-identity-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/37-move-avatar-color-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/38-migrate-token-svc-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/39-move-billing-account-profile-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/4-remove-ever-been-unlocked.ts","webpack:///../../libs/common/src/state-migrations/migrations/40-move-organization-state-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/41-move-event-collection-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/42-move-enable-favicon-to-domain-settings-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/43-move-auto-confirm-finger-prints-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/44-move-user-decryption-options-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/45-merge-environment-state.ts","webpack:///../../libs/common/src/state-migrations/migrations/46-delete-orphaned-biometric-prompt-data.ts","webpack:///../../libs/common/src/state-migrations/migrations/47-move-desktop-settings.ts","webpack:///../../libs/common/src/state-migrations/migrations/48-move-ddg-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/49-move-account-server-configs.ts","webpack:///../../libs/common/src/state-migrations/migrations/5-add-key-type-to-org-keys.ts","webpack:///../../libs/common/src/state-migrations/migrations/50-move-key-connector-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/51-move-remembered-email-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/52-delete-installed-version.ts","webpack:///../../libs/common/src/state-migrations/migrations/53-migrate-device-trust-svc-to-state-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/54-move-encrypted-sends.ts","webpack:///../../libs/common/src/state-migrations/migrations/55-move-master-key-state-to-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/56-move-auth-requests.ts","webpack:///../../libs/common/src/state-migrations/migrations/57-move-cipher-service-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/58-remove-refresh-token-migrated-state-provider-flag.ts","webpack:///../../libs/common/src/state-migrations/migrations/59-move-kdf-config-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/6-remove-legacy-etm-key.ts","webpack:///../../libs/common/src/state-migrations/migrations/60-known-accounts.ts","webpack:///../../libs/common/src/state-migrations/migrations/61-move-pin-state-to-providers.ts","webpack:///../../libs/common/src/state-migrations/migrations/62-migrate-vault-timeout-settings-svc-to-state-provider.ts","webpack:///../../libs/common/src/state-migrations/migrations/63-migrate-password-settings.ts","webpack:///../../libs/common/src/state-migrations/migrations/64-migrate-generator-history.ts","webpack:///../../libs/common/src/state-migrations/migrations/65-migrate-forwarder-settings.ts","webpack:///../../libs/common/src/state-migrations/migrations/66-move-final-desktop-settings.ts","webpack:///../../libs/common/src/state-migrations/migrations/67-remove-unassigned-items-banner-dismissed.ts","webpack:///../../libs/common/src/state-migrations/migrations/68-move-last-sync-date.ts","webpack:///../../libs/common/src/state-migrations/migrations/7-move-biometric-auto-prompt-to-account.ts","webpack:///../../libs/common/src/state-migrations/migrations/8-move-state-version.ts","webpack:///../../libs/common/src/state-migrations/migrations/9-move-browser-settings-to-global.ts","webpack:///../../libs/common/src/state-migrations/migrations/min-version.ts","webpack:///../../libs/common/src/state-migrations/migrate.ts","webpack:///../../libs/common/src/platform/services/migration-builder.service.ts","webpack:///../../libs/common/src/state-migrations/migration-helper.ts","webpack:///../../libs/common/src/platform/services/migration-runner.ts","webpack:///../../libs/common/src/platform/models/domain/state.ts","webpack:///../../libs/common/src/platform/services/state.service.ts","webpack:///../../libs/common/src/platform/services/system.service.ts","webpack:///../../libs/common/src/platform/services/user-auto-unlock-key.service.ts","webpack:///../../libs/common/src/platform/models/domain/decrypt-parameters.ts","webpack:///../../libs/common/src/platform/services/web-crypto-function.service.ts","webpack:///../../libs/common/src/platform/state/user-state.ts","webpack:///../../libs/common/src/platform/state/implementations/default-active-user-state.ts","webpack:///../../libs/common/src/platform/state/implementations/default-active-user-state.provider.ts","webpack:///../../libs/common/src/platform/state/state-update-options.ts","webpack:///../../libs/common/src/platform/state/implementations/util.ts","webpack:///../../libs/common/src/platform/state/implementations/state-base.ts","webpack:///../../libs/common/src/platform/state/implementations/default-global-state.ts","webpack:///../../libs/common/src/platform/state/implementations/default-global-state.provider.ts","webpack:///../../libs/common/src/platform/state/implementations/default-single-user-state.ts","webpack:///../../libs/common/src/platform/state/implementations/default-single-user-state.provider.ts","webpack:///../../libs/common/src/platform/state/implementations/default-state.provider.ts","webpack:///../../libs/common/src/platform/state/implementations/inline-derived-state.ts","webpack:///../../libs/common/src/platform/storage/primary-secondary-storage.service.ts","webpack:///../../libs/common/src/tools/send/enums/send-type.ts","webpack:///../../libs/common/src/platform/storage/window-storage.service.ts","webpack:///../../libs/common/src/admin-console/models/data/provider.data.ts","webpack:///../../libs/common/src/tools/send/models/data/send-file.data.ts","webpack:///../../libs/common/src/tools/send/models/data/send-text.data.ts","webpack:///../../libs/common/src/tools/send/models/data/send.data.ts","webpack:///../../libs/common/src/admin-console/models/response/selection-read-only.response.ts","webpack:///../../libs/common/src/vault/models/response/collection.response.ts","webpack:///../../libs/common/src/vault/models/data/collection.data.ts","webpack:///../../libs/common/src/vault/models/data/folder.data.ts","webpack:///../../libs/common/src/platform/sync/core-sync.service.ts","webpack:///../../libs/common/src/platform/sync/default-sync.service.ts","webpack:///../../libs/common/src/platform/theming/theme-state.service.ts","webpack:///../../libs/common/src/admin-console/models/response/organization-connection.response.ts","webpack:///../../libs/common/src/vault/models/api/card.api.ts","webpack:///../../libs/common/src/vault/models/api/field.api.ts","webpack:///../../libs/common/src/vault/models/api/identity.api.ts","webpack:///../../libs/common/src/vault/models/api/fido2-credential.api.ts","webpack:///../../libs/common/src/vault/models/api/login-uri.api.ts","webpack:///../../libs/common/src/vault/models/api/login.api.ts","webpack:///../../libs/common/src/vault/models/api/secure-note.api.ts","webpack:///../../libs/common/src/vault/models/response/attachment.response.ts","webpack:///../../libs/common/src/vault/models/response/password-history.response.ts","webpack:///../../libs/common/src/vault/models/response/cipher.response.ts","webpack:///../../libs/common/src/admin-console/models/response/organization-export.response.ts","webpack:///../../libs/common/src/admin-console/models/response/organization-sponsorship-sync-status.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-organization.response.ts","webpack:///../../libs/common/src/admin-console/models/api/permissions.api.ts","webpack:///../../libs/admin-console/src/common/organization-user/models/responses/organization-user-bulk-public-key.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-user-bulk-public-key.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-user-bulk.response.ts","webpack:///../../libs/common/src/admin-console/models/response/provider/provider-user.response.ts","webpack:///../../libs/common/src/auth/models/response/api-key.response.ts","webpack:///../../libs/common/src/auth/models/response/auth-request.response.ts","webpack:///../../libs/common/src/auth/models/response/device-verification.response.ts","webpack:///../../libs/common/src/auth/models/response/key-connector-user-key.response.ts","webpack:///../../libs/common/src/auth/models/response/prelogin.response.ts","webpack:///../../libs/common/src/auth/models/response/register.response.ts","webpack:///../../libs/common/src/auth/models/response/sso-pre-validate.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-authenticator.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-duo.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-email.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-provider.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-recover.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-web-authn.response.ts","webpack:///../../libs/common/src/auth/models/response/two-factor-yubi-key.response.ts","webpack:///../../libs/common/src/billing/models/response/billing.response.ts","webpack:///../../libs/common/src/billing/models/response/billing-history.response.ts","webpack:///../../libs/common/src/billing/models/response/billing-payment.response.ts","webpack:///../../libs/common/src/admin-console/models/response/profile-organization.response.ts","webpack:///../../libs/common/src/admin-console/models/response/profile-provider-organization.response.ts","webpack:///../../libs/common/src/admin-console/models/response/profile-provider.response.ts","webpack:///../../libs/common/src/models/response/profile.response.ts","webpack:///../../libs/common/src/billing/models/response/payment.response.ts","webpack:///../../libs/common/src/billing/models/response/plan.response.ts","webpack:///../../libs/common/src/billing/models/response/subscription.response.ts","webpack:///../../libs/common/src/billing/models/response/tax-info.response.ts","webpack:///../../libs/common/src/billing/models/response/tax-rate.response.ts","webpack:///../../libs/common/src/models/request/collection-bulk-delete.request.ts","webpack:///../../libs/common/src/models/response/breach-account.response.ts","webpack:///../../libs/common/src/models/response/global-domain.response.ts","webpack:///../../libs/common/src/models/response/domains.response.ts","webpack:///../../libs/common/src/models/response/event.response.ts","webpack:///../../libs/common/src/models/response/user-key.response.ts","webpack:///../../libs/common/src/tools/send/models/api/send-file.api.ts","webpack:///../../libs/common/src/tools/send/models/api/send-text.api.ts","webpack:///../../libs/common/src/tools/send/models/response/send.response.ts","webpack:///../../libs/common/src/vault/models/response/folder.response.ts","webpack:///../../libs/common/src/platform/sync/sync.response.ts","webpack:///../../libs/common/src/vault/models/response/attachment-upload-data.response.ts","webpack:///../../libs/common/src/vault/models/response/optional-cipher.response.ts","webpack:///../../libs/common/src/services/api.service.ts","webpack:///../../libs/common/src/services/audit.service.ts","webpack:///../../libs/common/src/platform/misc/throttle.ts","webpack:///../../libs/common/src/models/data/event.data.ts","webpack:///../../libs/common/src/services/event/key-definitions.ts","webpack:///../../libs/common/src/services/event/event-collection.service.ts","webpack:///../../libs/common/src/models/request/event.request.ts","webpack:///../../libs/common/src/services/event/event-upload.service.ts","webpack:///../../libs/common/src/models/response/notification.response.ts","webpack:///../../libs/common/src/services/notifications.service.ts","webpack:///../../libs/common/src/services/search.service.ts","webpack:///../../libs/common/src/services/vault-timeout/vault-timeout-settings.state.ts","webpack:///../../libs/common/src/services/vault-timeout/vault-timeout-settings.service.ts","webpack:///../../libs/common/src/tools/password-strength/password-strength.service.ts","webpack:///../../libs/common/src/tools/send/models/request/send.request.ts","webpack:///../../libs/common/src/tools/send/models/response/send-access.response.ts","webpack:///../../libs/common/src/tools/send/models/response/send-file-download-data.response.ts","webpack:///../../libs/common/src/tools/send/models/response/send-file-upload-data.response.ts","webpack:///../../libs/common/src/tools/send/services/send-api.service.ts","webpack:///../../libs/common/src/tools/send/services/key-definitions.ts","webpack:///../../libs/common/src/tools/send/services/send-state.provider.ts","webpack:///../../libs/common/src/tools/send/models/view/send-file.view.ts","webpack:///../../libs/common/src/tools/send/models/view/send-text.view.ts","webpack:///../../libs/common/src/tools/send/models/view/send.view.ts","webpack:///../../libs/common/src/tools/send/models/domain/send-file.ts","webpack:///../../libs/common/src/tools/send/models/domain/send-text.ts","webpack:///../../libs/common/src/tools/send/models/domain/send.ts","webpack:///../../libs/common/src/tools/send/models/request/send-with-id.request.ts","webpack:///../../libs/common/src/tools/send/services/send.service.ts","webpack:///../../libs/common/src/tools/send/send-kdf.ts","webpack:///../../libs/common/src/vault/models/domain/sorted-ciphers-cache.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-delete.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-move.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-restore.request.ts","webpack:///../../libs/common/src/vault/models/request/attachment.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-with-id.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-share.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-bulk-update-collections.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-collections.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-create.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-partial.request.ts","webpack:///../../libs/common/src/vault/models/request/cipher-share.request.ts","webpack:///../../libs/common/src/vault/services/key-state/ciphers.state.ts","webpack:///../../libs/common/src/vault/services/cipher.service.ts","webpack:///../../libs/common/src/vault/models/view/collection.view.ts","webpack:///../../libs/common/src/vault/models/domain/collection.ts","webpack:///../../libs/common/src/vault/models/domain/tree-node.ts","webpack:///../../libs/common/src/vault/service-utils.ts","webpack:///../../libs/common/src/vault/services/collection.service.ts","webpack:///../../libs/common/src/vault/services/file-upload/cipher-file-upload.service.ts","webpack:///../../libs/common/src/vault/models/request/folder.request.ts","webpack:///../../libs/common/src/vault/services/folder/folder-api.service.ts","webpack:///../../libs/common/src/vault/models/view/folder.view.ts","webpack:///../../libs/common/src/vault/models/domain/folder.ts","webpack:///../../libs/common/src/vault/models/request/folder-with-id.request.ts","webpack:///../../libs/common/src/vault/services/key-state/folder.state.ts","webpack:///../../libs/common/src/vault/services/folder/folder.service.ts","webpack:///../../libs/common/src/vault/services/totp.service.ts","webpack:///../../libs/common/src/vault/services/key-state/vault-settings.state.ts","webpack:///../../libs/common/src/vault/services/vault-settings/vault-settings.service.ts","webpack:///../../libs/tools/generator/core/src/strategies/storage.ts","webpack:///../../libs/tools/generator/core/src/data/default-passphrase-boundaries.ts","webpack:///../../libs/tools/generator/core/src/data/default-passphrase-generation-options.ts","webpack:///../../libs/tools/generator/core/src/data/default-password-boundaries.ts","webpack:///../../libs/tools/generator/core/src/data/default-password-generation-options.ts","webpack:///../../libs/tools/generator/core/src/policies/default-policy-evaluator.ts","webpack:///../../libs/tools/generator/core/src/policies/passphrase-generator-options-evaluator.ts","webpack:///../../libs/tools/generator/core/src/policies/password-generator-options-evaluator.ts","webpack:///../../libs/tools/generator/core/src/data/policies.ts","webpack:///../../libs/tools/generator/core/src/policies/passphrase-least-privilege.ts","webpack:///../../libs/tools/generator/core/src/policies/password-least-privilege.ts","webpack:///../../libs/tools/generator/core/src/data/generators.ts","webpack:///../../libs/tools/generator/core/src/data/default-catchall-options.ts","webpack:///../../libs/tools/generator/core/src/data/default-addy-io-options.ts","webpack:///../../libs/tools/generator/core/src/data/default-eff-username-options.ts","webpack:///../../libs/tools/generator/core/src/data/default-duck-duck-go-options.ts","webpack:///../../libs/tools/generator/core/src/data/default-fastmail-options.ts","webpack:///../../libs/tools/generator/core/src/data/default-forward-email-options.ts","webpack:///../../libs/tools/generator/core/src/data/default-subaddress-generator-options.ts","webpack:///../../libs/tools/generator/core/src/data/default-firefox-relay-options.ts","webpack:///../../libs/tools/generator/core/src/data/forwarders.ts","webpack:///../../libs/tools/generator/core/src/data/default-simple-login-options.ts","webpack:///../../libs/common/src/tools/state/buffered-key-definition.ts","webpack:///../../libs/tools/generator/core/src/integration/addy-io.ts","webpack:///../../libs/tools/generator/core/src/integration/duck-duck-go.ts","webpack:///../../libs/tools/generator/core/src/integration/fastmail.ts","webpack:///../../libs/tools/generator/core/src/integration/firefox-relay.ts","webpack:///../../libs/tools/generator/core/src/integration/forward-email.ts","webpack:///../../libs/tools/generator/core/src/integration/simple-login.ts","webpack:///../../libs/tools/generator/core/src/data/integrations.ts","webpack:///../../libs/tools/generator/core/src/data/username-digits.ts","webpack:///../../libs/tools/generator/core/src/data/generator-types.ts","webpack:///../../libs/tools/generator/core/src/engine/crypto-service-randomizer.ts","webpack:///../../libs/tools/generator/core/src/services/default-generator.service.ts","webpack:///../../libs/common/src/tools/state/user-state-subject.ts","webpack:///../../libs/common/src/tools/rx.ts","webpack:///../../libs/tools/generator/core/src/rx.ts","webpack:///../../libs/common/src/tools/integration/integration-context.ts","webpack:///../../libs/tools/generator/core/src/engine/forwarder-context.ts","webpack:///../../libs/common/src/platform/misc/wordlist.ts","webpack:///../../libs/tools/generator/core/src/engine/data.ts","webpack:///../../libs/tools/generator/core/src/engine/email-randomizer.ts","webpack:///../../libs/tools/generator/core/src/engine/email-calculator.ts","webpack:///../../libs/tools/generator/core/src/engine/password-randomizer.ts","webpack:///../../libs/tools/generator/core/src/engine/username-randomizer.ts","webpack:///../../libs/common/src/tools/state/buffered-state.ts","webpack:///../../libs/common/src/tools/state/data-packer.abstraction.ts","webpack:///../../libs/common/src/tools/state/padded-data-packer.ts","webpack:///../../libs/common/src/tools/state/secret-key-definition.ts","webpack:///../../libs/common/src/tools/state/secret-state.ts","webpack:///../../libs/common/src/tools/state/user-encryptor.abstraction.ts","webpack:///../../libs/common/src/tools/state/user-key-encryptor.ts","webpack:///../../libs/tools/generator/core/src/abstractions/generator-strategy.abstraction.ts","webpack:///../../libs/tools/generator/core/src/engine/rpc/create-forwarding-address.ts","webpack:///../../libs/tools/generator/core/src/engine/rpc/get-account-id.ts","webpack:///../../libs/tools/generator/core/src/util.ts","webpack:///../../libs/tools/generator/core/src/strategies/options-classifier.ts","webpack:///../../libs/tools/generator/core/src/strategies/forwarder-generator-strategy.ts","webpack:///../../libs/tools/generator/core/src/strategies/passphrase-generator-strategy.ts","webpack:///../../libs/tools/generator/core/src/strategies/password-generator-strategy.ts","webpack:///../../libs/tools/generator/core/src/strategies/catchall-generator-strategy.ts","webpack:///../../libs/tools/generator/core/src/strategies/subaddress-generator-strategy.ts","webpack:///../../libs/tools/generator/core/src/strategies/eff-username-generator-strategy.ts","webpack:///../../libs/tools/generator/extensions/history/src/generated-password-history.ts","webpack:///../../libs/tools/generator/extensions/history/src/generated-credential.ts","webpack:///../../libs/tools/generator/extensions/history/src/generator-history.abstraction.ts","webpack:///../../libs/common/src/tools/state/secret-classifier.ts","webpack:///../../libs/tools/generator/extensions/history/src/key-definitions.ts","webpack:///../../libs/tools/generator/extensions/history/src/legacy-password-history-decryptor.ts","webpack:///../../libs/tools/generator/extensions/history/src/local-generator-history.service.ts","webpack:///../../libs/tools/generator/extensions/navigation/src/default-generator-navigation.ts","webpack:///../../libs/tools/generator/extensions/navigation/src/generator-navigation-evaluator.ts","webpack:///../../libs/tools/generator/extensions/navigation/src/generator-navigation-policy.ts","webpack:///../../libs/tools/generator/extensions/navigation/src/key-definitions.ts","webpack:///../../libs/tools/generator/extensions/navigation/src/default-generator-navigation.service.ts","webpack:///../../libs/common/src/admin-console/models/domain/password-generator-policy-options.ts","webpack:///../../libs/tools/generator/extensions/legacy/src/legacy-password-generation.service.ts","webpack:///../../libs/tools/generator/extensions/legacy/src/create-legacy-password-generation-service.ts","webpack:///../../libs/common/src/tools/integration/rpc/rest-client.ts","webpack:///../../libs/tools/generator/extensions/legacy/src/legacy-username-generation.service.ts","webpack:///../../libs/tools/generator/extensions/legacy/src/create-legacy-username-generation-service.ts","webpack:///../../libs/importer/src/services/import-api.service.ts","webpack:///../../libs/common/src/models/request/import-ciphers.request.ts","webpack:///../../libs/common/src/models/request/import-organization-ciphers.request.ts","webpack:///../../libs/common/src/models/request/kvp.request.ts","webpack:///../../libs/common/src/vault/models/request/collection.request.ts","webpack:///../../libs/common/src/vault/models/request/collection-with-id.request.ts","webpack:///../../libs/importer/src/models/import-result.ts","webpack:///../../libs/importer/src/importers/base-importer.ts","webpack:///../../libs/importer/src/importers/ascendo-csv-importer.ts","webpack:///../../libs/importer/src/importers/avast/avast-csv-importer.ts","webpack:///../../libs/importer/src/importers/avast/avast-json-importer.ts","webpack:///../../libs/importer/src/importers/avira-csv-importer.ts","webpack:///../../libs/importer/src/importers/blackberry-csv-importer.ts","webpack:///../../libs/importer/src/importers/chrome-csv-importer.ts","webpack:///../../libs/importer/src/importers/bitwarden/bitwarden-csv-importer.ts","webpack:///../../libs/common/src/models/export/utils.ts","webpack:///../../libs/common/src/models/export/card.export.ts","webpack:///../../libs/common/src/models/export/field.export.ts","webpack:///../../libs/common/src/models/export/identity.export.ts","webpack:///../../libs/common/src/models/export/fido2-credential.export.ts","webpack:///../../libs/common/src/models/export/login-uri.export.ts","webpack:///../../libs/common/src/models/export/login.export.ts","webpack:///../../libs/common/src/models/export/password-history.export.ts","webpack:///../../libs/common/src/models/export/secure-note.export.ts","webpack:///../../libs/common/src/models/export/cipher.export.ts","webpack:///../../libs/common/src/models/export/cipher-with-ids.export.ts","webpack:///../../libs/common/src/models/export/collection.export.ts","webpack:///../../libs/common/src/models/export/collection-with-id.export.ts","webpack:///../../libs/common/src/models/export/folder.export.ts","webpack:///../../libs/common/src/models/export/folder-with-id.export.ts","webpack:///../../libs/importer/src/importers/bitwarden/bitwarden-json-importer.ts","webpack:///../../libs/importer/src/importers/bitwarden/bitwarden-password-protected-importer.ts","webpack:///../../libs/importer/src/importers/blur-csv-importer.ts","webpack:///../../libs/importer/src/importers/buttercup-csv-importer.ts","webpack:///../../libs/importer/src/importers/clipperz-html-importer.ts","webpack:///../../libs/importer/src/importers/codebook-csv-importer.ts","webpack:///../../libs/importer/src/importers/dashlane/dashlane-csv-importer.ts","webpack:///../../libs/importer/src/importers/dashlane/dashlane-json-importer.ts","webpack:///../../libs/importer/src/importers/encryptr-csv-importer.ts","webpack:///../../libs/importer/src/importers/enpass/enpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/enpass/enpass-json-importer.ts","webpack:///../../libs/importer/src/importers/firefox-csv-importer.ts","webpack:///../../libs/importer/src/importers/fsecure/fsecure-fsk-types.ts","webpack:///../../libs/importer/src/importers/fsecure/fsecure-fsk-importer.ts","webpack:///../../libs/importer/src/importers/gnome-json-importer.ts","webpack:///../../libs/importer/src/importers/kaspersky-txt-importer.ts","webpack:///../../libs/importer/src/importers/keepass2-xml-importer.ts","webpack:///../../libs/importer/src/importers/keepassx-csv-importer.ts","webpack:///../../libs/importer/src/importers/keeper/keeper-csv-importer.ts","webpack:///../../libs/importer/src/importers/lastpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/logmeonce-csv-importer.ts","webpack:///../../libs/importer/src/importers/meldium-csv-importer.ts","webpack:///../../libs/importer/src/importers/msecure-csv-importer.ts","webpack:///../../libs/importer/src/importers/myki-csv-importer.ts","webpack:///../../libs/importer/src/importers/nordpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-1pif-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/types/onepassword-1pux-importer-types.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-1pux-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/cipher-import-context.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-csv-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-mac-csv-importer.ts","webpack:///../../libs/importer/src/importers/onepassword/onepassword-win-csv-importer.ts","webpack:///../../libs/importer/src/importers/padlock-csv-importer.ts","webpack:///../../libs/importer/src/importers/passkeep-csv-importer.ts","webpack:///../../libs/importer/src/importers/passky/passky-json-importer.ts","webpack:///../../libs/importer/src/importers/passman-json-importer.ts","webpack:///../../libs/importer/src/importers/passpack-csv-importer.ts","webpack:///../../libs/importer/src/importers/passwordagent-csv-importer.ts","webpack:///../../libs/importer/src/importers/passwordboss-json-importer.ts","webpack:///../../libs/importer/src/importers/passworddragon-xml-importer.ts","webpack:///../../libs/importer/src/importers/passwordsafe-xml-importer.ts","webpack:///../../libs/importer/src/importers/passwordwallet-txt-importer.ts","webpack:///../../libs/importer/src/importers/protonpass/types/protonpass-json-type.ts","webpack:///../../libs/importer/src/importers/protonpass/protonpass-json-importer.ts","webpack:///../../libs/importer/src/importers/psono/psono-json-importer.ts","webpack:///../../libs/importer/src/importers/remembear-csv-importer.ts","webpack:///../../libs/importer/src/importers/roboform-csv-importer.ts","webpack:///../../libs/importer/src/importers/safari-csv-importer.ts","webpack:///../../libs/importer/src/importers/safeincloud-xml-importer.ts","webpack:///../../libs/importer/src/importers/saferpass-csv-importer.ts","webpack:///../../libs/importer/src/importers/securesafe-csv-importer.ts","webpack:///../../libs/importer/src/importers/splashid-csv-importer.ts","webpack:///../../libs/importer/src/importers/stickypassword-xml-importer.ts","webpack:///../../libs/importer/src/importers/truekey-csv-importer.ts","webpack:///../../libs/importer/src/importers/upm-csv-importer.ts","webpack:///../../libs/importer/src/importers/yoti-csv-importer.ts","webpack:///../../libs/importer/src/importers/zohovault-csv-importer.ts","webpack:///../../libs/importer/src/models/import-options.ts","webpack:///../../libs/importer/src/services/import.service.ts","webpack:///../../libs/tools/export/vault-export/vault-export-core/src/services/export-helper.ts","webpack:///../../libs/tools/export/vault-export/vault-export-core/src/services/vault-export.service.ts","webpack:///../../libs/tools/export/vault-export/vault-export-core/src/services/base-vault-export.service.ts","webpack:///../../libs/tools/export/vault-export/vault-export-core/src/services/org-vault-export.service.ts","webpack:///../../libs/tools/export/vault-export/vault-export-core/src/services/individual-vault-export.service.ts","webpack:///./src/browser/safariApp.ts","webpack:///./src/platform/services/browser-clipboard.service.ts","webpack:///./src/platform/services/platform-utils/browser-platform-utils.service.ts","webpack:///./src/platform/browser/browser-api.register-content-scripts-polyfill.ts","webpack:///./src/platform/browser/browser-api.ts","webpack:///./src/autofill/background/auto-submit-login.background.ts","webpack:///./src/autofill/background/context-menus.background.ts","webpack:///./src/platform/popup/browser-popup-utils.ts","webpack:///./src/auth/popup/utils/auth-popout-window.ts","webpack:///./src/vault/popup/utils/vault-popout-window.ts","webpack:///./src/autofill/enums/notification-queue-message-type.enum.ts","webpack:///./src/autofill/background/notification.background.ts","webpack:///./src/autofill/background/overlay-notifications.background.ts","webpack:///../../libs/common/src/vault/icon/build-cipher-icon.ts","webpack:///./src/autofill/enums/autofill-overlay.enum.ts","webpack:///./src/autofill/enums/autofill-port.enum.ts","webpack:///./src/autofill/utils/index.ts","webpack:///./src/autofill/background/overlay.background.ts","webpack:///./src/autofill/background/tabs.background.ts","webpack:///./src/autofill/background/web-request.background.ts","webpack:///./src/autofill/browser/main-context-menu-handler.ts","webpack:///./src/autofill/browser/cipher-context-menu-handler.ts","webpack:///./src/autofill/browser/context-menu-clicked-handler.ts","webpack:///./src/autofill/deprecated/background/overlay.background.deprecated.ts","webpack:///./src/vault/background/abort-manager.ts","webpack:///./src/autofill/fido2/enums/fido2-content-script.enum.ts","webpack:///./src/autofill/fido2/enums/fido2-port-name.enum.ts","webpack:///./src/autofill/fido2/background/fido2.background.ts","webpack:///./src/autofill/fido2/services/browser-fido2-user-interface.service.ts","webpack:///./src/autofill/enums/autofill-message.enums.ts","webpack:///./src/autofill/models/autofill-script.ts","webpack:///./src/autofill/services/abstractions/autofill.service.ts","webpack:///./src/autofill/services/autofill-constants.ts","webpack:///./src/autofill/services/autofill.service.ts","webpack:///./src/platform/listeners/update-badge.ts","webpack:///./src/platform/messaging/chrome-message.sender.ts","webpack:///./src/platform/offscreen-document/offscreen-document.service.ts","webpack:///../../libs/common/src/platform/biometrics/biometric.service.ts","webpack:///./src/platform/services/browser-biometrics.service.ts","webpack:///./src/platform/services/background-browser-biometrics.service.ts","webpack:///../../libs/common/src/admin-console/models/domain/encrypted-organization-key.ts","webpack:///../../libs/common/src/platform/abstractions/crypto.service.ts","webpack:///../../libs/common/src/platform/services/key-state/org-keys.state.ts","webpack:///../../libs/common/src/platform/services/key-state/provider-keys.state.ts","webpack:///../../libs/common/src/platform/services/key-state/user-key.state.ts","webpack:///../../libs/common/src/platform/services/crypto.service.ts","webpack:///../../libs/common/src/platform/misc/convert-values.ts","webpack:///./src/platform/services/browser-crypto.service.ts","webpack:///../../libs/common/src/platform/services/default-environment.service.ts","webpack:///./src/platform/services/browser-environment.service.ts","webpack:///./src/platform/browser/from-chrome-event.ts","webpack:///./src/platform/services/abstractions/abstract-chrome-storage-api.service.ts","webpack:///./src/platform/services/browser-local-storage.service.ts","webpack:///./src/platform/services/browser-memory-storage.service.ts","webpack:///./src/platform/services/abstractions/script-injector.service.ts","webpack:///./src/platform/services/browser-script-injector.service.ts","webpack:///../../libs/common/src/platform/services/translation.service.ts","webpack:///../../libs/common/src/platform/services/i18n.service.ts","webpack:///./src/platform/services/i18n.service.ts","webpack:///../../libs/common/src/platform/abstractions/storage.service.ts","webpack:///./src/platform/storage/port-name.ts","webpack:///./src/platform/services/local-backed-session-storage.service.ts","webpack:///../../libs/common/src/platform/misc/compare-values.ts","webpack:///./src/platform/services/platform-utils/background-platform-utils.service.ts","webpack:///./src/platform/services/popup-view-cache-background.service.ts","webpack:///./src/platform/services/abstractions/browser-task-scheduler.service.ts","webpack:///./src/platform/services/task-scheduler/browser-task-scheduler.service.ts","webpack:///./src/platform/services/task-scheduler/background-task-scheduler.service.ts","webpack:///./src/platform/services/task-scheduler/foreground-task-scheduler.service.ts","webpack:///../../libs/common/src/platform/state/storage/memory-storage.service.ts","webpack:///./src/platform/storage/background-memory-storage.service.ts","webpack:///../../libs/common/src/platform/services/storage-service.provider.ts","webpack:///./src/platform/storage/browser-storage-service.provider.ts","webpack:///./src/platform/storage/foreground-memory-storage.service.ts","webpack:///./src/platform/storage/offscreen-storage.service.ts","webpack:///./src/platform/sync/sync-service.listener.ts","webpack:///./src/platform/sync/foreground-sync.service.ts","webpack:///./src/platform/utils/from-chrome-runtime-messaging.ts","webpack:///../../libs/common/src/services/vault-timeout/vault-timeout.service.ts","webpack:///./src/services/vault-timeout/vault-timeout.service.ts","webpack:///./src/tools/config/fileless-importer-injected-scripts.ts","webpack:///./src/tools/enums/fileless-import.enums.ts","webpack:///./src/tools/background/fileless-importer.background.ts","webpack:///../../libs/angular/src/vault/vault-filter/models/vault-filter.model.ts","webpack:///../../libs/common/src/admin-console/abstractions/organization/organization.service.abstraction.ts","webpack:///../../libs/angular/src/vault/vault-filter/models/dynamic-tree-node.model.ts","webpack:///../../libs/common/src/vault/services/key-state/collapsed-groupings.state.ts","webpack:///../../libs/common/src/vault/abstractions/folder/folder.service.abstraction.ts","webpack:///../../libs/common/src/vault/abstractions/cipher.service.ts","webpack:///../../libs/common/src/vault/abstractions/collection.service.ts","webpack:///../../libs/common/src/admin-console/abstractions/policy/policy.service.abstraction.ts","webpack:///../../libs/angular/src/vault/vault-filter/services/vault-filter.service.ts","webpack:///./src/vault/services/vault-filter.service.ts","webpack:///./src/background/commands.background.ts","webpack:///./src/background/idle.background.ts","webpack:///./src/background/nativeMessaging.background.ts","webpack:///./src/background/runtime.background.ts","webpack:///./src/platform/background.ts","webpack:///./src/background/main.background.ts","webpack:///webpack/bootstrap","webpack:///webpack/runtime/define property getters","webpack:///webpack/runtime/get javascript chunk filename","webpack:///webpack/runtime/global","webpack:///webpack/runtime/hasOwnProperty shorthand","webpack:///webpack/runtime/make namespace object","webpack:///webpack/runtime/node module decorator","webpack:///webpack/runtime/publicPath","webpack:///webpack/runtime/jsonp chunk loading","webpack:///webpack/startup"],"sourcesContent":["var deferred = [];\n__webpack_require__.O = function(result, chunkIds, fn, priority) {\n\tif(chunkIds) {\n\t\tpriority = priority || 0;\n\t\tfor(var i = deferred.length; i > 0 && deferred[i - 1][2] > priority; i--) deferred[i] = deferred[i - 1];\n\t\tdeferred[i] = [chunkIds, fn, priority];\n\t\treturn;\n\t}\n\tvar notFulfilled = Infinity;\n\tfor (var i = 0; i < deferred.length; i++) {\n\t\tvar chunkIds = deferred[i][0];\n\t\tvar fn = deferred[i][1];\n\t\tvar priority = deferred[i][2];\n\t\tvar fulfilled = true;\n\t\tfor (var j = 0; j < chunkIds.length; j++) {\n\t\t\tif ((priority & 1 === 0 || notFulfilled >= priority) && Object.keys(__webpack_require__.O).every(function(key) { return __webpack_require__.O[key](chunkIds[j]); })) {\n\t\t\t\tchunkIds.splice(j--, 1);\n\t\t\t} else {\n\t\t\t\tfulfilled = false;\n\t\t\t\tif(priority < notFulfilled) notFulfilled = priority;\n\t\t\t}\n\t\t}\n\t\tif(fulfilled) {\n\t\t\tdeferred.splice(i--, 1)\n\t\t\tvar r = fn();\n\t\t\tif (r !== undefined) result = r;\n\t\t}\n\t}\n\treturn result;\n};","var getProto = Object.getPrototypeOf ? function(obj) { return Object.getPrototypeOf(obj); } : function(obj) { return obj.__proto__; };\nvar leafPrototypes;\n// create a fake namespace object\n// mode & 1: value is a module id, require it\n// mode & 2: merge all properties of value into the ns\n// mode & 4: return value when already ns object\n// mode & 16: return value when it's Promise-like\n// mode & 8|1: behave like require\n__webpack_require__.t = function(value, mode) {\n\tif(mode & 1) value = this(value);\n\tif(mode & 8) return value;\n\tif(typeof value === 'object' && value) {\n\t\tif((mode & 4) && value.__esModule) return value;\n\t\tif((mode & 16) && typeof value.then === 'function') return value;\n\t}\n\tvar ns = Object.create(null);\n\t__webpack_require__.r(ns);\n\tvar def = {};\n\tleafPrototypes = leafPrototypes || [null, getProto({}), getProto([]), getProto(getProto)];\n\tfor(var current = mode & 2 && value; typeof current == 'object' && !~leafPrototypes.indexOf(current); current = getProto(current)) {\n\t\tObject.getOwnPropertyNames(current).forEach(function(key) { def[key] = function() { return value[key]; }; });\n\t}\n\tdef['default'] = function() { return value; };\n\t__webpack_require__.d(ns, def);\n\treturn ns;\n};","export enum LogLevelType {\n  Debug,\n  Info,\n  Warning,\n  Error,\n}\n","import { LogService as LogServiceAbstraction } from \"../abstractions/log.service\";\nimport { LogLevelType } from \"../enums/log-level-type.enum\";\n\nexport class ConsoleLogService implements LogServiceAbstraction {\n  protected timersMap: Map<string, [number, number]> = new Map();\n\n  constructor(\n    protected isDev: boolean,\n    protected filter: (level: LogLevelType) => boolean = null,\n  ) {}\n\n  debug(message?: any, ...optionalParams: any[]) {\n    if (!this.isDev) {\n      return;\n    }\n    this.write(LogLevelType.Debug, message, ...optionalParams);\n  }\n\n  info(message?: any, ...optionalParams: any[]) {\n    this.write(LogLevelType.Info, message, ...optionalParams);\n  }\n\n  warning(message?: any, ...optionalParams: any[]) {\n    this.write(LogLevelType.Warning, message, ...optionalParams);\n  }\n\n  error(message?: any, ...optionalParams: any[]) {\n    this.write(LogLevelType.Error, message, ...optionalParams);\n  }\n\n  write(level: LogLevelType, message?: any, ...optionalParams: any[]) {\n    if (this.filter != null && this.filter(level)) {\n      return;\n    }\n\n    switch (level) {\n      case LogLevelType.Debug:\n        // eslint-disable-next-line\n        console.log(message, ...optionalParams);\n        break;\n      case LogLevelType.Info:\n        // eslint-disable-next-line\n        console.log(message, ...optionalParams);\n        break;\n      case LogLevelType.Warning:\n        // eslint-disable-next-line\n        console.warn(message, ...optionalParams);\n        break;\n      case LogLevelType.Error:\n        // eslint-disable-next-line\n        console.error(message, ...optionalParams);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","export enum AuthenticationType {\n  Password = 0,\n  Sso = 1,\n  UserApiKey = 2,\n  AuthRequest = 3,\n  WebAuthn = 4,\n}\n","import { TwoFactorProviderType } from \"../../../enums/two-factor-provider-type\";\n\nexport class TokenTwoFactorRequest {\n  constructor(\n    public provider: TwoFactorProviderType = null,\n    public token: string = null,\n    public remember: boolean = false,\n  ) {}\n}\n","/* eslint-disable no-useless-escape */\nimport * as path from \"path\";\n\nimport { Buffer as BufferLib } from \"buffer/\";\nimport { Observable, of, switchMap } from \"rxjs\";\nimport { getHostname, parse } from \"tldts\";\nimport { Merge } from \"type-fest\";\n\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\nimport { I18nService } from \"../abstractions/i18n.service\";\n\nconst nodeURL = typeof self === \"undefined\" ? require(\"url\") : null;\n\ndeclare global {\n  /* eslint-disable-next-line no-var */\n  var bitwardenContainerService: BitwardenContainerService;\n}\n\ninterface BitwardenContainerService {\n  getCryptoService: () => CryptoService;\n  getEncryptService: () => EncryptService;\n}\n\nexport class Utils {\n  static inited = false;\n  static isNode = false;\n  static isBrowser = true;\n  static isMobileBrowser = false;\n  static isAppleMobileBrowser = false;\n  static global: typeof global = null;\n  // Transpiled version of /\\p{Emoji_Presentation}/gu using https://mothereff.in/regexpu. Used for compatability in older browsers.\n  static regexpEmojiPresentation =\n    /(?:[\\u231A\\u231B\\u23E9-\\u23EC\\u23F0\\u23F3\\u25FD\\u25FE\\u2614\\u2615\\u2648-\\u2653\\u267F\\u2693\\u26A1\\u26AA\\u26AB\\u26BD\\u26BE\\u26C4\\u26C5\\u26CE\\u26D4\\u26EA\\u26F2\\u26F3\\u26F5\\u26FA\\u26FD\\u2705\\u270A\\u270B\\u2728\\u274C\\u274E\\u2753-\\u2755\\u2757\\u2795-\\u2797\\u27B0\\u27BF\\u2B1B\\u2B1C\\u2B50\\u2B55]|\\uD83C[\\uDC04\\uDCCF\\uDD8E\\uDD91-\\uDD9A\\uDDE6-\\uDDFF\\uDE01\\uDE1A\\uDE2F\\uDE32-\\uDE36\\uDE38-\\uDE3A\\uDE50\\uDE51\\uDF00-\\uDF20\\uDF2D-\\uDF35\\uDF37-\\uDF7C\\uDF7E-\\uDF93\\uDFA0-\\uDFCA\\uDFCF-\\uDFD3\\uDFE0-\\uDFF0\\uDFF4\\uDFF8-\\uDFFF]|\\uD83D[\\uDC00-\\uDC3E\\uDC40\\uDC42-\\uDCFC\\uDCFF-\\uDD3D\\uDD4B-\\uDD4E\\uDD50-\\uDD67\\uDD7A\\uDD95\\uDD96\\uDDA4\\uDDFB-\\uDE4F\\uDE80-\\uDEC5\\uDECC\\uDED0-\\uDED2\\uDED5-\\uDED7\\uDEEB\\uDEEC\\uDEF4-\\uDEFC\\uDFE0-\\uDFEB]|\\uD83E[\\uDD0C-\\uDD3A\\uDD3C-\\uDD45\\uDD47-\\uDD78\\uDD7A-\\uDDCB\\uDDCD-\\uDDFF\\uDE70-\\uDE74\\uDE78-\\uDE7A\\uDE80-\\uDE86\\uDE90-\\uDEA8\\uDEB0-\\uDEB6\\uDEC0-\\uDEC2\\uDED0-\\uDED6])/g;\n  static readonly validHosts: string[] = [\"localhost\"];\n  static readonly originalMinimumPasswordLength = 8;\n  static readonly minimumPasswordLength = 12;\n  static readonly DomainMatchBlacklist = new Map<string, Set<string>>([\n    [\"google.com\", new Set([\"script.google.com\"])],\n  ]);\n\n  static init() {\n    if (Utils.inited) {\n      return;\n    }\n\n    Utils.inited = true;\n    Utils.isNode =\n      typeof process !== \"undefined\" &&\n      (process as any).release != null &&\n      (process as any).release.name === \"node\";\n    Utils.isBrowser = typeof window !== \"undefined\";\n\n    Utils.isMobileBrowser = Utils.isBrowser && this.isMobile(window);\n    Utils.isAppleMobileBrowser = Utils.isBrowser && this.isAppleMobile(window);\n\n    if (Utils.isNode) {\n      Utils.global = global;\n    } else if (Utils.isBrowser) {\n      Utils.global = window;\n    } else {\n      // If it's not browser or node then it must be a service worker\n      Utils.global = self;\n    }\n  }\n\n  static fromB64ToArray(str: string): Uint8Array {\n    if (str == null) {\n      return null;\n    }\n\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"base64\"));\n    } else {\n      const binaryString = Utils.global.atob(str);\n      const bytes = new Uint8Array(binaryString.length);\n      for (let i = 0; i < binaryString.length; i++) {\n        bytes[i] = binaryString.charCodeAt(i);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUrlB64ToArray(str: string): Uint8Array {\n    return Utils.fromB64ToArray(Utils.fromUrlB64ToB64(str));\n  }\n\n  static fromHexToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"hex\"));\n    } else {\n      const bytes = new Uint8Array(str.length / 2);\n      for (let i = 0; i < str.length; i += 2) {\n        bytes[i / 2] = parseInt(str.substr(i, 2), 16);\n      }\n      return bytes;\n    }\n  }\n\n  static fromUtf8ToArray(str: string): Uint8Array {\n    if (Utils.isNode) {\n      return new Uint8Array(Buffer.from(str, \"utf8\"));\n    } else {\n      const strUtf8 = unescape(encodeURIComponent(str));\n      const arr = new Uint8Array(strUtf8.length);\n      for (let i = 0; i < strUtf8.length; i++) {\n        arr[i] = strUtf8.charCodeAt(i);\n      }\n      return arr;\n    }\n  }\n\n  static fromByteStringToArray(str: string): Uint8Array {\n    if (str == null) {\n      return null;\n    }\n    const arr = new Uint8Array(str.length);\n    for (let i = 0; i < str.length; i++) {\n      arr[i] = str.charCodeAt(i);\n    }\n    return arr;\n  }\n\n  static fromBufferToB64(buffer: ArrayBuffer): string {\n    if (buffer == null) {\n      return null;\n    }\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"base64\");\n    } else {\n      let binary = \"\";\n      const bytes = new Uint8Array(buffer);\n      for (let i = 0; i < bytes.byteLength; i++) {\n        binary += String.fromCharCode(bytes[i]);\n      }\n      return Utils.global.btoa(binary);\n    }\n  }\n\n  static fromBufferToUrlB64(buffer: ArrayBuffer): string {\n    return Utils.fromB64toUrlB64(Utils.fromBufferToB64(buffer));\n  }\n\n  static fromB64toUrlB64(b64Str: string) {\n    return b64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  static fromBufferToUtf8(buffer: ArrayBuffer): string {\n    return BufferLib.from(buffer).toString(\"utf8\");\n  }\n\n  static fromBufferToByteString(buffer: ArrayBuffer): string {\n    return String.fromCharCode.apply(null, new Uint8Array(buffer));\n  }\n\n  // ref: https://stackoverflow.com/a/40031979/1090359\n  static fromBufferToHex(buffer: ArrayBuffer): string {\n    if (Utils.isNode) {\n      return Buffer.from(buffer).toString(\"hex\");\n    } else {\n      const bytes = new Uint8Array(buffer);\n      return Array.prototype.map\n        .call(bytes, (x: number) => (\"00\" + x.toString(16)).slice(-2))\n        .join(\"\");\n    }\n  }\n\n  /**\n   * Converts a hex string to an ArrayBuffer.\n   * Note: this doesn't need any Node specific code as parseInt() / ArrayBuffer / Uint8Array\n   * work the same in Node and the browser.\n   * @param {string} hexString - A string of hexadecimal characters.\n   * @returns {ArrayBuffer} The ArrayBuffer representation of the hex string.\n   */\n  static hexStringToArrayBuffer(hexString: string): ArrayBuffer {\n    // Check if the hexString has an even length, as each hex digit represents half a byte (4 bits),\n    // and it takes two hex digits to represent a full byte (8 bits).\n    if (hexString.length % 2 !== 0) {\n      throw \"HexString has to be an even length\";\n    }\n\n    // Create an ArrayBuffer with a length that is half the length of the hex string,\n    // because each pair of hex digits will become a single byte.\n    const arrayBuffer = new ArrayBuffer(hexString.length / 2);\n\n    // Create a Uint8Array view on top of the ArrayBuffer (each position represents a byte)\n    // as ArrayBuffers cannot be edited directly.\n    const uint8Array = new Uint8Array(arrayBuffer);\n\n    // Loop through the bytes\n    for (let i = 0; i < uint8Array.length; i++) {\n      // Extract two hex characters (1 byte)\n      const hexByte = hexString.substr(i * 2, 2);\n\n      // Convert hexByte into a decimal value from base 16. (ex: ff --> 255)\n      const byteValue = parseInt(hexByte, 16);\n\n      // Place the byte value into the uint8Array\n      uint8Array[i] = byteValue;\n    }\n\n    return arrayBuffer;\n  }\n\n  static fromUrlB64ToB64(urlB64Str: string): string {\n    let output = urlB64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += \"==\";\n        break;\n      case 3:\n        output += \"=\";\n        break;\n      default:\n        throw new Error(\"Illegal base64url string!\");\n    }\n\n    return output;\n  }\n\n  static fromUrlB64ToUtf8(urlB64Str: string): string {\n    return Utils.fromB64ToUtf8(Utils.fromUrlB64ToB64(urlB64Str));\n  }\n\n  static fromUtf8ToB64(utfStr: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(utfStr, \"utf8\").toString(\"base64\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.btoa(utfStr)));\n    }\n  }\n\n  static fromUtf8ToUrlB64(utfStr: string): string {\n    return Utils.fromBufferToUrlB64(Utils.fromUtf8ToArray(utfStr));\n  }\n\n  static fromB64ToUtf8(b64Str: string): string {\n    if (Utils.isNode) {\n      return Buffer.from(b64Str, \"base64\").toString(\"utf8\");\n    } else {\n      return decodeURIComponent(escape(Utils.global.atob(b64Str)));\n    }\n  }\n\n  // ref: http://stackoverflow.com/a/2117523/1090359\n  static newGuid(): string {\n    return \"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx\".replace(/[xy]/g, (c) => {\n      const r = (Math.random() * 16) | 0;\n      const v = c === \"x\" ? r : (r & 0x3) | 0x8;\n      return v.toString(16);\n    });\n  }\n\n  static guidRegex = /^[0-9a-f]{8}-[0-9a-f]{4}-[1-5][0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/;\n\n  static isGuid(id: string) {\n    return RegExp(Utils.guidRegex, \"i\").test(id);\n  }\n\n  static getHostname(uriString: string): string {\n    if (Utils.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"about:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"file:\")) {\n      return null;\n    }\n\n    // Does uriString contain invalid characters\n    // TODO Needs to possibly be extended, although '!' is a reserved character\n    if (uriString.indexOf(\"!\") > 0) {\n      return null;\n    }\n\n    try {\n      const hostname = getHostname(uriString, { validHosts: this.validHosts });\n      if (hostname != null) {\n        return hostname;\n      }\n    } catch {\n      return null;\n    }\n    return null;\n  }\n\n  static getHost(uriString: string): string {\n    const url = Utils.getUrl(uriString);\n    try {\n      return url != null && url.host !== \"\" ? url.host : null;\n    } catch {\n      return null;\n    }\n  }\n\n  static getDomain(uriString: string): string {\n    if (Utils.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    if (uriString.startsWith(\"data:\")) {\n      return null;\n    }\n\n    if (uriString.startsWith(\"about:\")) {\n      return null;\n    }\n\n    try {\n      const parseResult = parse(uriString, {\n        validHosts: this.validHosts,\n        allowPrivateDomains: true,\n      });\n      if (parseResult != null && parseResult.hostname != null) {\n        if (parseResult.hostname === \"localhost\" || parseResult.isIp) {\n          return parseResult.hostname;\n        }\n\n        if (parseResult.domain != null) {\n          return parseResult.domain;\n        }\n        return null;\n      }\n    } catch {\n      return null;\n    }\n    return null;\n  }\n\n  static getQueryParams(uriString: string): Map<string, string> {\n    const url = Utils.getUrl(uriString);\n    if (url == null || url.search == null || url.search === \"\") {\n      return null;\n    }\n    const map = new Map<string, string>();\n    const pairs = (url.search[0] === \"?\" ? url.search.substr(1) : url.search).split(\"&\");\n    pairs.forEach((pair) => {\n      const parts = pair.split(\"=\");\n      if (parts.length < 1) {\n        return;\n      }\n      map.set(\n        decodeURIComponent(parts[0]).toLowerCase(),\n        parts[1] == null ? \"\" : decodeURIComponent(parts[1]),\n      );\n    });\n    return map;\n  }\n\n  static getSortFunction<T>(\n    i18nService: I18nService,\n    prop: { [K in keyof T]: T[K] extends string ? K : never }[keyof T],\n  ): (a: T, b: T) => number {\n    return (a, b) => {\n      if (a[prop] == null && b[prop] != null) {\n        return -1;\n      }\n      if (a[prop] != null && b[prop] == null) {\n        return 1;\n      }\n      if (a[prop] == null && b[prop] == null) {\n        return 0;\n      }\n\n      // The `as unknown as string` here is unfortunate because typescript doesn't property understand that the return of T[prop] will be a string\n      return i18nService.collator\n        ? i18nService.collator.compare(a[prop] as unknown as string, b[prop] as unknown as string)\n        : (a[prop] as unknown as string).localeCompare(b[prop] as unknown as string);\n    };\n  }\n\n  static isNullOrWhitespace(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str.trim() === \"\";\n  }\n\n  static isNullOrEmpty(str: string): boolean {\n    return str == null || typeof str !== \"string\" || str == \"\";\n  }\n\n  static isPromise(obj: any): obj is Promise<unknown> {\n    return (\n      obj != undefined && typeof obj[\"then\"] === \"function\" && typeof obj[\"catch\"] === \"function\"\n    );\n  }\n\n  static nameOf<T>(name: string & keyof T) {\n    return name;\n  }\n\n  static assign<T>(target: T, source: Partial<T>): T {\n    return Object.assign(target, source);\n  }\n\n  static iterateEnum<O extends object, K extends keyof O = keyof O>(obj: O) {\n    return (Object.keys(obj).filter((k) => Number.isNaN(+k)) as K[]).map((k) => obj[k]);\n  }\n\n  static getUrl(uriString: string): URL {\n    if (this.isNullOrWhitespace(uriString)) {\n      return null;\n    }\n\n    uriString = uriString.trim();\n\n    return Utils.getUrlObject(uriString);\n  }\n\n  static camelToPascalCase(s: string) {\n    return s.charAt(0).toUpperCase() + s.slice(1);\n  }\n\n  /**\n   * There are a few ways to calculate text color for contrast, this one seems to fit accessibility guidelines best.\n   * https://stackoverflow.com/a/3943023/6869691\n   *\n   * @param {string} bgColor\n   * @param {number} [threshold] see stackoverflow link above\n   * @param {boolean} [svgTextFill]\n   * Indicates if this method is performed on an SVG <text> 'fill' attribute (e.g. <text fill=\"black\"></text>).\n   * This check is necessary because the '!important' tag cannot be used in a 'fill' attribute.\n   */\n  static pickTextColorBasedOnBgColor(bgColor: string, threshold = 186, svgTextFill = false) {\n    const bgColorHexNums = bgColor.charAt(0) === \"#\" ? bgColor.substring(1, 7) : bgColor;\n    const r = parseInt(bgColorHexNums.substring(0, 2), 16); // hexToR\n    const g = parseInt(bgColorHexNums.substring(2, 4), 16); // hexToG\n    const b = parseInt(bgColorHexNums.substring(4, 6), 16); // hexToB\n    const blackColor = svgTextFill ? \"black\" : \"black !important\";\n    const whiteColor = svgTextFill ? \"white\" : \"white !important\";\n    return r * 0.299 + g * 0.587 + b * 0.114 > threshold ? blackColor : whiteColor;\n  }\n\n  static stringToColor(str: string): string {\n    let hash = 0;\n    for (let i = 0; i < str.length; i++) {\n      hash = str.charCodeAt(i) + ((hash << 5) - hash);\n    }\n    let color = \"#\";\n    for (let i = 0; i < 3; i++) {\n      const value = (hash >> (i * 8)) & 0xff;\n      color += (\"00\" + value.toString(16)).substr(-2);\n    }\n    return color;\n  }\n\n  /**\n   * @throws Will throw an error if the ContainerService has not been attached to the window object\n   */\n  static getContainerService(): BitwardenContainerService {\n    if (this.global.bitwardenContainerService == null) {\n      throw new Error(\"global bitwardenContainerService not initialized.\");\n    }\n    return this.global.bitwardenContainerService;\n  }\n\n  static validateHexColor(color: string) {\n    return /^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$/.test(color);\n  }\n\n  /**\n   * Converts map to a Record<string, V> with the same data. Inverse of recordToMap\n   * Useful in toJSON methods, since Maps are not serializable\n   * @param map\n   * @returns\n   */\n  static mapToRecord<K extends string | number, V>(map: Map<K, V>): Record<string, V> {\n    if (map == null) {\n      return null;\n    }\n    if (!(map instanceof Map)) {\n      return map;\n    }\n    return Object.fromEntries(map);\n  }\n\n  /**\n   * Converts record to a Map<string, V> with the same data. Inverse of mapToRecord\n   * Useful in fromJSON methods, since Maps are not serializable\n   *\n   * Warning: If the record has string keys that are numbers, they will be converted to numbers in the map\n   * @param record\n   * @returns\n   */\n  static recordToMap<K extends string | number, V>(record: Record<K, V>): Map<K, V> {\n    if (record == null) {\n      return null;\n    } else if (record instanceof Map) {\n      return record;\n    }\n\n    const entries = Object.entries(record);\n    if (entries.length === 0) {\n      return new Map();\n    }\n\n    if (isNaN(Number(entries[0][0]))) {\n      return new Map(entries) as Map<K, V>;\n    } else {\n      return new Map(entries.map((e) => [Number(e[0]), e[1]])) as Map<K, V>;\n    }\n  }\n\n  /** Applies Object.assign, but converts the type nicely using Type-Fest Merge<Destination, Source> */\n  static merge<Destination, Source>(\n    destination: Destination,\n    source: Source,\n  ): Merge<Destination, Source> {\n    return Object.assign(destination, source) as unknown as Merge<Destination, Source>;\n  }\n\n  /**\n   * encodeURIComponent escapes all characters except the following:\n   * alphabetic, decimal digits, - _ . ! ~ * ' ( )\n   * https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent#encoding_for_rfc3986\n   */\n  static encodeRFC3986URIComponent(str: string): string {\n    return encodeURIComponent(str).replace(\n      /[!'()*]/g,\n      (c) => `%${c.charCodeAt(0).toString(16).toUpperCase()}`,\n    );\n  }\n\n  /**\n   * Normalizes a path for defense against attacks like traversals\n   * @param denormalizedPath\n   * @returns\n   */\n  static normalizePath(denormalizedPath: string): string {\n    return path.normalize(decodeURIComponent(denormalizedPath)).replace(/^(\\.\\.(\\/|\\\\|$))+/, \"\");\n  }\n\n  private static isMobile(win: Window) {\n    let mobile = false;\n    ((a) => {\n      if (\n        /(android|bb\\d+|meego).+mobile|avantgo|bada\\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(\n          a,\n        ) ||\n        /1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\\-(n|u)|c55\\/|capi|ccwa|cdm\\-|cell|chtm|cldc|cmd\\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\\-s|devi|dica|dmob|do(c|p)o|ds(12|\\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\\-|_)|g1 u|g560|gene|gf\\-5|g\\-mo|go(\\.w|od)|gr(ad|un)|haie|hcit|hd\\-(m|p|t)|hei\\-|hi(pt|ta)|hp( i|ip)|hs\\-c|ht(c(\\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\\-(20|go|ma)|i230|iac( |\\-|\\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\\/)|klon|kpt |kwc\\-|kyo(c|k)|le(no|xi)|lg( g|\\/(k|l|u)|50|54|\\-[a-w])|libw|lynx|m1\\-w|m3ga|m50\\/|ma(te|ui|xo)|mc(01|21|ca)|m\\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\\-2|po(ck|rt|se)|prox|psio|pt\\-g|qa\\-a|qc(07|12|21|32|60|\\-[2-7]|i\\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\\-|oo|p\\-)|sdk\\/|se(c(\\-|0|1)|47|mc|nd|ri)|sgh\\-|shar|sie(\\-|m)|sk\\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\\-|v\\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\\-|tdg\\-|tel(i|m)|tim\\-|t\\-mo|to(pl|sh)|ts(70|m\\-|m3|m5)|tx\\-9|up(\\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\\-|your|zeto|zte\\-/i.test(\n          a.substr(0, 4),\n        )\n      ) {\n        mobile = true;\n      }\n    })(win.navigator.userAgent || win.navigator.vendor || (win as any).opera);\n    return mobile || win.navigator.userAgent.match(/iPad/i) != null;\n  }\n\n  static delay(ms: number): Promise<void> {\n    return new Promise((resolve) => setTimeout(resolve, ms));\n  }\n\n  /**\n   * Generate an observable from a function that returns a promise.\n   * Similar to the rxjs function {@link from} with one big exception:\n   * {@link from} will not re-execute the function when observers resubscribe.\n   * {@link Util.asyncToObservable} will execute `generator` for every\n   * subscribe, making it ideal if the value ever needs to be refreshed.\n   * */\n  static asyncToObservable<T>(generator: () => Promise<T>): Observable<T> {\n    return of(undefined).pipe(switchMap(() => generator()));\n  }\n\n  /**\n   * Return the number of days remaining before a target date arrives.\n   * Returns 0 if the day has already passed.\n   */\n  static daysRemaining(targetDate: Date): number {\n    const diffTime = targetDate.getTime() - Date.now();\n    const msPerDay = 86400000;\n    return Math.max(0, Math.floor(diffTime / msPerDay));\n  }\n\n  private static isAppleMobile(win: Window) {\n    return (\n      win.navigator.userAgent.match(/iPhone/i) != null ||\n      win.navigator.userAgent.match(/iPad/i) != null\n    );\n  }\n\n  private static getUrlObject(uriString: string): URL {\n    // All the methods below require a protocol to properly parse a URL string\n    // Assume http if no other protocol is present\n    const hasProtocol = uriString.indexOf(\"://\") > -1;\n    if (!hasProtocol && uriString.indexOf(\".\") > -1) {\n      uriString = \"http://\" + uriString;\n    } else if (!hasProtocol) {\n      return null;\n    }\n\n    try {\n      if (nodeURL != null) {\n        return new nodeURL.URL(uriString);\n      }\n\n      return new URL(uriString);\n    } catch (e) {\n      // Ignore error\n    }\n\n    return null;\n  }\n}\n\nUtils.init();\n","import { Utils } from \"../../../../platform/misc/utils\";\n\nexport abstract class WebAuthnLoginResponseRequest {\n  id: string;\n  rawId: string;\n  type: string;\n  extensions: Record<string, unknown>;\n\n  constructor(credential: PublicKeyCredential) {\n    this.id = credential.id;\n    this.rawId = Utils.fromBufferToUrlB64(credential.rawId);\n    this.type = credential.type;\n\n    // WARNING: do not add PRF information here by mapping\n    // credential.getClientExtensionResults() into the extensions property,\n    // as it will be sent to the server (leaking credentials).\n    this.extensions = {}; // Extensions are handled client-side\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../../platform/misc/utils\";\n\nimport { WebAuthnLoginResponseRequest } from \"./webauthn-login-response.request\";\n\n// base 64 strings\nexport interface WebAuthnLoginAssertionResponseData {\n  authenticatorData: string;\n  signature: string;\n  clientDataJSON: string;\n  userHandle: string;\n}\n\nexport class WebAuthnLoginAssertionResponseRequest extends WebAuthnLoginResponseRequest {\n  response: WebAuthnLoginAssertionResponseData;\n\n  constructor(credential: PublicKeyCredential) {\n    super(credential);\n\n    if (!(credential.response instanceof AuthenticatorAssertionResponse)) {\n      throw new Error(\"Invalid authenticator response\");\n    }\n\n    this.response = {\n      authenticatorData: Utils.fromBufferToUrlB64(credential.response.authenticatorData),\n      signature: Utils.fromBufferToUrlB64(credential.response.signature),\n      clientDataJSON: Utils.fromBufferToUrlB64(credential.response.clientDataJSON),\n      userHandle: Utils.fromBufferToUrlB64(credential.response.userHandle),\n    };\n  }\n\n  static fromJSON(json: Jsonify<WebAuthnLoginAssertionResponseRequest>) {\n    return Object.assign(Object.create(WebAuthnLoginAssertionResponseRequest.prototype), json);\n  }\n}\n","export enum EncryptionType {\n  AesCbc256_B64 = 0,\n  AesCbc128_HmacSha256_B64 = 1,\n  AesCbc256_HmacSha256_B64 = 2,\n  Rsa2048_OaepSha256_B64 = 3,\n  Rsa2048_OaepSha1_B64 = 4,\n  Rsa2048_OaepSha256_HmacSha256_B64 = 5,\n  Rsa2048_OaepSha1_HmacSha256_B64 = 6,\n}\n\n/** The expected number of parts to a serialized EncString of the given encryption type.\n * For example, an EncString of type AesCbc256_B64 will have 2 parts, and an EncString of type\n * AesCbc128_HmacSha256_B64 will have 3 parts.\n *\n * Example of annotated serialized EncStrings:\n * 0.iv|data\n * 1.iv|data|mac\n * 2.iv|data|mac\n * 3.data\n * 4.data\n *\n * @see EncString\n * @see EncryptionType\n * @see EncString.parseEncryptedString\n */\nexport const EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE = {\n  [EncryptionType.AesCbc256_B64]: 2,\n  [EncryptionType.AesCbc128_HmacSha256_B64]: 3,\n  [EncryptionType.AesCbc256_HmacSha256_B64]: 3,\n  [EncryptionType.Rsa2048_OaepSha256_B64]: 1,\n  [EncryptionType.Rsa2048_OaepSha1_B64]: 1,\n  [EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64]: 2,\n  [EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64]: 2,\n};\n","export enum FileUploadType {\n  Direct = 0,\n  Azure = 1,\n}\n","export enum HashPurpose {\n  ServerAuthorization = 1,\n  LocalAuthorization = 2,\n}\n","export enum HtmlStorageLocation {\n  Local = \"local\",\n  Memory = \"memory\",\n  Session = \"session\",\n}\n","export enum KdfType {\n  PBKDF2_SHA256 = 0,\n  Argon2id = 1,\n}\n","export enum KeySuffixOptions {\n  Auto = \"auto\",\n  Biometric = \"biometric\",\n  Pin = \"pin\",\n}\n","export enum StorageLocation {\n  Both = \"both\",\n  Disk = \"disk\",\n  Memory = \"memory\",\n}\n","export enum ThemeType {\n  System = \"system\",\n  Light = \"light\",\n  Dark = \"dark\",\n  Nord = \"nord\",\n  SolarizedDark = \"solarizedDark\",\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncryptionType } from \"../../enums\";\n\nexport class SymmetricCryptoKey {\n  key: Uint8Array;\n  encKey?: Uint8Array;\n  macKey?: Uint8Array;\n  encType: EncryptionType;\n\n  keyB64: string;\n  encKeyB64: string;\n  macKeyB64: string;\n\n  meta: any;\n\n  constructor(key: Uint8Array, encType?: EncryptionType) {\n    if (key == null) {\n      throw new Error(\"Must provide key\");\n    }\n\n    if (encType == null) {\n      if (key.byteLength === 32) {\n        encType = EncryptionType.AesCbc256_B64;\n      } else if (key.byteLength === 64) {\n        encType = EncryptionType.AesCbc256_HmacSha256_B64;\n      } else {\n        throw new Error(\"Unable to determine encType.\");\n      }\n    }\n\n    this.key = key;\n    this.encType = encType;\n\n    if (encType === EncryptionType.AesCbc256_B64 && key.byteLength === 32) {\n      this.encKey = key;\n      this.macKey = null;\n    } else if (encType === EncryptionType.AesCbc128_HmacSha256_B64 && key.byteLength === 32) {\n      this.encKey = key.slice(0, 16);\n      this.macKey = key.slice(16, 32);\n    } else if (encType === EncryptionType.AesCbc256_HmacSha256_B64 && key.byteLength === 64) {\n      this.encKey = key.slice(0, 32);\n      this.macKey = key.slice(32, 64);\n    } else {\n      throw new Error(\"Unsupported encType/key length.\");\n    }\n\n    if (this.key != null) {\n      this.keyB64 = Utils.fromBufferToB64(this.key);\n    }\n    if (this.encKey != null) {\n      this.encKeyB64 = Utils.fromBufferToB64(this.encKey);\n    }\n    if (this.macKey != null) {\n      this.macKeyB64 = Utils.fromBufferToB64(this.macKey);\n    }\n  }\n\n  toJSON() {\n    // The whole object is constructed from the initial key, so just store the B64 key\n    return { keyB64: this.keyB64 };\n  }\n\n  static fromString(s: string): SymmetricCryptoKey {\n    if (s == null) {\n      return null;\n    }\n\n    const arrayBuffer = Utils.fromB64ToArray(s);\n    return new SymmetricCryptoKey(arrayBuffer);\n  }\n\n  static fromJSON(obj: Jsonify<SymmetricCryptoKey>): SymmetricCryptoKey {\n    return SymmetricCryptoKey.fromString(obj?.keyB64);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { AuthenticationType } from \"@bitwarden/common/auth/enums/authentication-type\";\nimport { TokenTwoFactorRequest } from \"@bitwarden/common/auth/models/request/identity-token/token-two-factor.request\";\nimport { WebAuthnLoginAssertionResponseRequest } from \"@bitwarden/common/auth/services/webauthn-login/request/webauthn-login-assertion-response.request\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { UserKey, MasterKey } from \"@bitwarden/common/types/key\";\n\nexport class PasswordLoginCredentials {\n  readonly type = AuthenticationType.Password;\n\n  constructor(\n    public email: string,\n    public masterPassword: string,\n    public captchaToken?: string,\n    public twoFactor?: TokenTwoFactorRequest,\n  ) {}\n}\n\nexport class SsoLoginCredentials {\n  readonly type = AuthenticationType.Sso;\n\n  constructor(\n    public code: string,\n    public codeVerifier: string,\n    public redirectUrl: string,\n    public orgId: string,\n    /**\n     * Optional email address for SSO login.\n     * Used for looking up 2FA token on clients that support remembering 2FA token.\n     */\n    public email?: string,\n    public twoFactor?: TokenTwoFactorRequest,\n  ) {}\n}\n\nexport class UserApiLoginCredentials {\n  readonly type = AuthenticationType.UserApiKey;\n\n  constructor(\n    public clientId: string,\n    public clientSecret: string,\n  ) {}\n}\n\nexport class AuthRequestLoginCredentials {\n  readonly type = AuthenticationType.AuthRequest;\n\n  constructor(\n    public email: string,\n    public accessCode: string,\n    public authRequestId: string,\n    public decryptedUserKey: UserKey,\n    public decryptedMasterKey: MasterKey,\n    public decryptedMasterKeyHash: string,\n    public twoFactor?: TokenTwoFactorRequest,\n  ) {}\n\n  static fromJSON(json: Jsonify<AuthRequestLoginCredentials>) {\n    return Object.assign(\n      new AuthRequestLoginCredentials(\n        json.email,\n        json.accessCode,\n        json.authRequestId,\n        null,\n        null,\n        json.decryptedMasterKeyHash,\n        json.twoFactor\n          ? new TokenTwoFactorRequest(\n              json.twoFactor.provider,\n              json.twoFactor.token,\n              json.twoFactor.remember,\n            )\n          : json.twoFactor,\n      ),\n      {\n        decryptedUserKey: SymmetricCryptoKey.fromJSON(json.decryptedUserKey) as UserKey,\n        decryptedMasterKey: SymmetricCryptoKey.fromJSON(json.decryptedMasterKey) as MasterKey,\n      },\n    );\n  }\n}\n\nexport class WebAuthnLoginCredentials {\n  readonly type = AuthenticationType.WebAuthn;\n\n  constructor(\n    public token: string,\n    public deviceResponse: WebAuthnLoginAssertionResponseRequest,\n    public prfKey?: SymmetricCryptoKey,\n  ) {}\n\n  static fromJSON(json: Jsonify<WebAuthnLoginCredentials>) {\n    return new WebAuthnLoginCredentials(\n      json.token,\n      Object.assign(\n        Object.create(WebAuthnLoginAssertionResponseRequest.prototype),\n        json.deviceResponse,\n      ),\n      SymmetricCryptoKey.fromJSON(json.prfKey),\n    );\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { KeyConnectorUserDecryptionOptionResponse } from \"@bitwarden/common/auth/models/response/user-decryption-options/key-connector-user-decryption-option.response\";\nimport { TrustedDeviceUserDecryptionOptionResponse } from \"@bitwarden/common/auth/models/response/user-decryption-options/trusted-device-user-decryption-option.response\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/src/auth/models/response/identity-token.response\";\n\n/**\n * Key Connector decryption options. Intended to be sent to the client for use after authentication.\n * @see {@link UserDecryptionOptions}\n */\nexport class KeyConnectorUserDecryptionOption {\n  /** The URL of the key connector configured for this user. */\n  keyConnectorUrl: string;\n\n  /**\n   * Initializes a new instance of the KeyConnectorUserDecryptionOption from a response object.\n   * @param response The key connector user decryption option response object.\n   * @returns A new instance of the KeyConnectorUserDecryptionOption or undefined if `response` is nullish.\n   */\n  static fromResponse(\n    response: KeyConnectorUserDecryptionOptionResponse,\n  ): KeyConnectorUserDecryptionOption | undefined {\n    if (response == null) {\n      return undefined;\n    }\n    const options = new KeyConnectorUserDecryptionOption();\n    options.keyConnectorUrl = response?.keyConnectorUrl ?? null;\n    return options;\n  }\n\n  /**\n   * Initializes a new instance of a KeyConnectorUserDecryptionOption from a JSON object.\n   * @param obj JSON object to deserialize.\n   * @returns A new instance of the KeyConnectorUserDecryptionOption or undefined if `obj` is nullish.\n   */\n  static fromJSON(\n    obj: Jsonify<KeyConnectorUserDecryptionOption>,\n  ): KeyConnectorUserDecryptionOption | undefined {\n    if (obj == null) {\n      return undefined;\n    }\n    return Object.assign(new KeyConnectorUserDecryptionOption(), obj);\n  }\n}\n\n/**\n * Trusted device decryption options. Intended to be sent to the client for use after authentication.\n * @see {@link UserDecryptionOptions}\n */\nexport class TrustedDeviceUserDecryptionOption {\n  /** True if an admin has approved an admin auth request previously made from this device. */\n  hasAdminApproval: boolean;\n  /** True if the user has a device capable of approving an auth request. */\n  hasLoginApprovingDevice: boolean;\n  /** True if the user has manage reset password permission, as these users must be forced to have a master password. */\n  hasManageResetPasswordPermission: boolean;\n  /** True if tde is disabled but user has not set a master password yet. */\n  isTdeOffboarding: boolean;\n\n  /**\n   * Initializes a new instance of the TrustedDeviceUserDecryptionOption from a response object.\n   * @param response The trusted device user decryption option response object.\n   * @returns A new instance of the TrustedDeviceUserDecryptionOption or undefined if `response` is nullish.\n   */\n  static fromResponse(\n    response: TrustedDeviceUserDecryptionOptionResponse,\n  ): TrustedDeviceUserDecryptionOption | undefined {\n    if (response == null) {\n      return undefined;\n    }\n    const options = new TrustedDeviceUserDecryptionOption();\n    options.hasAdminApproval = response?.hasAdminApproval ?? false;\n    options.hasLoginApprovingDevice = response?.hasLoginApprovingDevice ?? false;\n    options.hasManageResetPasswordPermission = response?.hasManageResetPasswordPermission ?? false;\n    options.isTdeOffboarding = response?.isTdeOffboarding ?? false;\n    return options;\n  }\n\n  /**\n   * Initializes a new instance of the TrustedDeviceUserDecryptionOption from a JSON object.\n   * @param obj JSON object to deserialize.\n   * @returns A new instance of the TrustedDeviceUserDecryptionOption or undefined if `obj` is nullish.\n   */\n  static fromJSON(\n    obj: Jsonify<TrustedDeviceUserDecryptionOption>,\n  ): TrustedDeviceUserDecryptionOption | undefined {\n    if (obj == null) {\n      return undefined;\n    }\n    return Object.assign(new TrustedDeviceUserDecryptionOption(), obj);\n  }\n}\n\n/**\n * Represents the decryption options the user has configured on the server. This is intended to be sent\n * to the client on authentication, and can be used to determine how to decrypt the user's vault.\n */\nexport class UserDecryptionOptions {\n  /** True if the user has a master password configured on the server. */\n  hasMasterPassword: boolean;\n  /** {@link TrustedDeviceUserDecryptionOption} */\n  trustedDeviceOption?: TrustedDeviceUserDecryptionOption;\n  /** {@link KeyConnectorUserDecryptionOption} */\n  keyConnectorOption?: KeyConnectorUserDecryptionOption;\n\n  /**\n   * Initializes a new instance of the UserDecryptionOptions from a response object.\n   * @param response user decryption options response object\n   * @returns A new instance of the UserDecryptionOptions.\n   * @throws If the response is nullish, this method will throw an error. User decryption options\n   * are required for client initialization.\n   */\n  // TODO: Change response type to `UserDecryptionOptionsResponse` after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n  static fromResponse(response: IdentityTokenResponse): UserDecryptionOptions {\n    if (response == null) {\n      throw new Error(\"User Decryption Options are required for client initialization.\");\n    }\n\n    const decryptionOptions = new UserDecryptionOptions();\n\n    if (response.userDecryptionOptions) {\n      // If the response has userDecryptionOptions, this means it's on a post-TDE server version and can interrogate\n      // the new decryption options.\n      const responseOptions = response.userDecryptionOptions;\n      decryptionOptions.hasMasterPassword = responseOptions.hasMasterPassword;\n\n      decryptionOptions.trustedDeviceOption = TrustedDeviceUserDecryptionOption.fromResponse(\n        responseOptions.trustedDeviceOption,\n      );\n\n      decryptionOptions.keyConnectorOption = KeyConnectorUserDecryptionOption.fromResponse(\n        responseOptions.keyConnectorOption,\n      );\n    } else {\n      // If the response does not have userDecryptionOptions, this means it's on a pre-TDE server version and so\n      // we must base our decryption options on the presence of the keyConnectorUrl.\n      // Note that the presence of keyConnectorUrl implies that the user does not have a master password, as in pre-TDE\n      // server versions, a master password short-circuited the addition of the keyConnectorUrl to the response.\n      // TODO: remove this check after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n      const usingKeyConnector = response.keyConnectorUrl != null;\n      decryptionOptions.hasMasterPassword = !usingKeyConnector;\n      if (usingKeyConnector) {\n        decryptionOptions.keyConnectorOption = new KeyConnectorUserDecryptionOption();\n        decryptionOptions.keyConnectorOption.keyConnectorUrl = response.keyConnectorUrl;\n      }\n    }\n    return decryptionOptions;\n  }\n\n  /**\n   * Initializes a new instance of the UserDecryptionOptions from a JSON object.\n   * @param obj JSON object to deserialize.\n   * @returns A new instance of the UserDecryptionOptions. Will initialize even if the JSON object is nullish.\n   */\n  static fromJSON(obj: Jsonify<UserDecryptionOptions>): UserDecryptionOptions {\n    const decryptionOptions = Object.assign(new UserDecryptionOptions(), obj);\n\n    decryptionOptions.trustedDeviceOption = TrustedDeviceUserDecryptionOption.fromJSON(\n      obj?.trustedDeviceOption,\n    );\n\n    decryptionOptions.keyConnectorOption = KeyConnectorUserDecryptionOption.fromJSON(\n      obj?.keyConnectorOption,\n    );\n\n    return decryptionOptions;\n  }\n}\n","import { Jsonify, Opaque } from \"type-fest\";\n\nimport { EncryptionType, EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE } from \"../../enums\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { SymmetricCryptoKey } from \"./symmetric-crypto-key\";\n\nexport class EncString implements Encrypted {\n  encryptedString?: EncryptedString;\n  encryptionType?: EncryptionType;\n  decryptedValue?: string;\n  data?: string;\n  iv?: string;\n  mac?: string;\n\n  constructor(\n    encryptedStringOrType: string | EncryptionType,\n    data?: string,\n    iv?: string,\n    mac?: string,\n  ) {\n    if (data != null) {\n      this.initFromData(encryptedStringOrType as EncryptionType, data, iv, mac);\n    } else {\n      this.initFromEncryptedString(encryptedStringOrType as string);\n    }\n  }\n\n  get ivBytes(): Uint8Array {\n    return this.iv == null ? null : Utils.fromB64ToArray(this.iv);\n  }\n\n  get macBytes(): Uint8Array {\n    return this.mac == null ? null : Utils.fromB64ToArray(this.mac);\n  }\n\n  get dataBytes(): Uint8Array {\n    return this.data == null ? null : Utils.fromB64ToArray(this.data);\n  }\n\n  toJSON() {\n    return this.encryptedString as string;\n  }\n\n  static fromJSON(obj: Jsonify<EncString>): EncString {\n    if (obj == null) {\n      return null;\n    }\n\n    return new EncString(obj);\n  }\n\n  private initFromData(encType: EncryptionType, data: string, iv: string, mac: string) {\n    if (iv != null) {\n      this.encryptedString = (encType + \".\" + iv + \"|\" + data) as EncryptedString;\n    } else {\n      this.encryptedString = (encType + \".\" + data) as EncryptedString;\n    }\n\n    // mac\n    if (mac != null) {\n      this.encryptedString = (this.encryptedString + \"|\" + mac) as EncryptedString;\n    }\n\n    this.encryptionType = encType;\n    this.data = data;\n    this.iv = iv;\n    this.mac = mac;\n  }\n\n  private initFromEncryptedString(encryptedString: string) {\n    this.encryptedString = encryptedString as EncryptedString;\n    if (!this.encryptedString) {\n      return;\n    }\n\n    const { encType, encPieces } = EncString.parseEncryptedString(this.encryptedString);\n\n    this.encryptionType = encType;\n\n    if (encPieces.length !== EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE[encType]) {\n      return;\n    }\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64:\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        this.mac = encPieces[2];\n        break;\n      case EncryptionType.AesCbc256_B64:\n        this.iv = encPieces[0];\n        this.data = encPieces[1];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n        this.data = encPieces[0];\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        this.data = encPieces[0];\n        this.mac = encPieces[1];\n        break;\n      default:\n        return;\n    }\n  }\n\n  private static parseEncryptedString(encryptedString: string): {\n    encType: EncryptionType;\n    encPieces: string[];\n  } {\n    const headerPieces = encryptedString.split(\".\");\n    let encType: EncryptionType;\n    let encPieces: string[] = null;\n\n    if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        return { encType: NaN, encPieces: [] };\n      }\n    } else {\n      encPieces = encryptedString.split(\"|\");\n      encType =\n        encPieces.length === 3\n          ? EncryptionType.AesCbc128_HmacSha256_B64\n          : EncryptionType.AesCbc256_B64;\n    }\n\n    return {\n      encType,\n      encPieces,\n    };\n  }\n\n  static isSerializedEncString(s: string): boolean {\n    if (s == null) {\n      return false;\n    }\n\n    const { encType, encPieces } = this.parseEncryptedString(s);\n\n    if (isNaN(encType) || encPieces.length === 0) {\n      return false;\n    }\n\n    return EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE[encType] === encPieces.length;\n  }\n\n  async decrypt(orgId: string, key: SymmetricCryptoKey = null): Promise<string> {\n    if (this.decryptedValue != null) {\n      return this.decryptedValue;\n    }\n\n    try {\n      if (key == null) {\n        key = await this.getKeyForDecryption(orgId);\n      }\n      if (key == null) {\n        throw new Error(\"No key to decrypt EncString with orgId \" + orgId);\n      }\n\n      const encryptService = Utils.getContainerService().getEncryptService();\n      this.decryptedValue = await encryptService.decryptToUtf8(this, key);\n    } catch (e) {\n      this.decryptedValue = \"[error: cannot decrypt]\";\n    }\n    return this.decryptedValue;\n  }\n\n  private async getKeyForDecryption(orgId: string) {\n    const cryptoService = Utils.getContainerService().getCryptoService();\n    return orgId != null\n      ? await cryptoService.getOrgKey(orgId)\n      : await cryptoService.getUserKeyWithLegacySupport();\n  }\n}\n\nexport type EncryptedString = Opaque<string, \"EncString\">;\n","import { Jsonify } from \"type-fest\";\n\nimport { UserId } from \"../../types/guid\";\nimport { DerivedStateDependencies, StorageKey } from \"../../types/state\";\n\nimport { KeyDefinition } from \"./key-definition\";\nimport { StateDefinition } from \"./state-definition\";\nimport { UserKeyDefinition } from \"./user-key-definition\";\n\ndeclare const depShapeMarker: unique symbol;\n/**\n * A set of options for customizing the behavior of a {@link DeriveDefinition}\n */\ntype DeriveDefinitionOptions<TFrom, TTo, TDeps extends DerivedStateDependencies = never> = {\n  /**\n   * A function to use to convert values from TFrom to TTo. This is called on each emit of the parent state observable\n   * and the resulting value will be emitted from the derived state observable.\n   *\n   * @param from Populated with the latest emission from the parent state observable.\n   * @param deps Populated with the dependencies passed into the constructor of the derived state.\n   * These are constant for the lifetime of the derived state.\n   * @returns  The derived state value or a Promise that resolves to the derived state value.\n   */\n  derive: (from: TFrom, deps: TDeps) => TTo | Promise<TTo>;\n  /**\n   * A function to use to safely convert your type from json to your expected type.\n   *\n   * **Important:** Your data may be serialized/deserialized at any time and this\n   *  callback needs to be able to faithfully re-initialize from the JSON object representation of your type.\n   *\n   * @param jsonValue The JSON object representation of your state.\n   * @returns The fully typed version of your state.\n   */\n  deserializer: (serialized: Jsonify<TTo>) => TTo;\n  /**\n   * An object defining the dependencies of the derive function. The keys of the object are the names of the dependencies\n   * and the values are the types of the dependencies.\n   *\n   * for example:\n   * ```\n   * {\n   *   myService: MyService,\n   *   myOtherService: MyOtherService,\n   * }\n   * ```\n   */\n  [depShapeMarker]?: TDeps;\n  /**\n   * The number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   * Defaults to 1000ms.\n   */\n  cleanupDelayMs?: number;\n  /**\n   * Whether or not to clear the derived state when cleanup occurs. Defaults to true.\n   */\n  clearOnCleanup?: boolean;\n};\n\n/**\n * DeriveDefinitions describe state derived from another observable, the value type of which is given by `TFrom`.\n *\n * The StateDefinition is used to describe the domain of the state, and the DeriveDefinition\n * sub-divides that domain into specific keys. These keys are used to cache data in memory and enables derived state to\n * be calculated once regardless of multiple execution contexts.\n */\n\nexport class DeriveDefinition<TFrom, TTo, TDeps extends DerivedStateDependencies> {\n  /**\n   * Creates a new instance of a DeriveDefinition. Derived state is always stored in memory, so the storage location\n   * defined in @link{StateDefinition} is ignored.\n   *\n   * @param stateDefinition The state definition for which this key belongs to.\n   * @param uniqueDerivationName The name of the key, this should be unique per domain.\n   * @param options A set of options to customize the behavior of {@link DeriveDefinition}.\n   * @param options.derive A function to use to convert values from TFrom to TTo. This is called on each emit of the parent state observable\n   * and the resulting value will be emitted from the derived state observable.\n   * @param options.cleanupDelayMs The number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   * Defaults to 1000ms.\n   * @param options.dependencyShape An object defining the dependencies of the derive function. The keys of the object are the names of the dependencies\n   * and the values are the types of the dependencies.\n   * for example:\n   * ```\n   * {\n   *   myService: MyService,\n   *   myOtherService: MyOtherService,\n   * }\n   * ```\n   *\n   * @param options.deserializer A function to use to safely convert your type from json to your expected type.\n   *   Your data may be serialized/deserialized at any time and this needs callback needs to be able to faithfully re-initialize\n   *   from the JSON object representation of your type.\n   */\n  constructor(\n    readonly stateDefinition: StateDefinition,\n    readonly uniqueDerivationName: string,\n    readonly options: DeriveDefinitionOptions<TFrom, TTo, TDeps>,\n  ) {}\n\n  /**\n   * Factory that produces a {@link DeriveDefinition} from a {@link KeyDefinition} or {@link DeriveDefinition} and new name.\n   *\n   * If a `KeyDefinition` is passed in, the returned definition will have the same key as the given key definition, but\n   * will not collide with it in storage, even if they both reside in memory.\n   *\n   * If a `DeriveDefinition` is passed in, the returned definition will instead use the name given in the second position\n   * of the tuple. It is up to you to ensure this is unique within the domain of derived state.\n   *\n   * @param options A set of options to customize the behavior of {@link DeriveDefinition}.\n   * @param options.derive A function to use to convert values from TFrom to TTo. This is called on each emit of the parent state observable\n   * and the resulting value will be emitted from the derived state observable.\n   * @param options.cleanupDelayMs The number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   * Defaults to 1000ms.\n   * @param options.dependencyShape An object defining the dependencies of the derive function. The keys of the object are the names of the dependencies\n   * and the values are the types of the dependencies.\n   * for example:\n   * ```\n   * {\n   *   myService: MyService,\n   *   myOtherService: MyOtherService,\n   * }\n   * ```\n   *\n   * @param options.deserializer A function to use to safely convert your type from json to your expected type.\n   *   Your data may be serialized/deserialized at any time and this needs callback needs to be able to faithfully re-initialize\n   *   from the JSON object representation of your type.\n   * @param definition\n   * @param options\n   * @returns\n   */\n  static from<TFrom, TTo, TDeps extends DerivedStateDependencies = never>(\n    definition:\n      | KeyDefinition<TFrom>\n      | UserKeyDefinition<TFrom>\n      | [DeriveDefinition<unknown, TFrom, DerivedStateDependencies>, string],\n    options: DeriveDefinitionOptions<TFrom, TTo, TDeps>,\n  ) {\n    if (isFromDeriveDefinition(definition)) {\n      return new DeriveDefinition(definition[0].stateDefinition, definition[1], options);\n    } else {\n      return new DeriveDefinition(definition.stateDefinition, definition.key, options);\n    }\n  }\n\n  static fromWithUserId<TKeyDef, TTo, TDeps extends DerivedStateDependencies = never>(\n    definition:\n      | KeyDefinition<TKeyDef>\n      | UserKeyDefinition<TKeyDef>\n      | [DeriveDefinition<unknown, TKeyDef, DerivedStateDependencies>, string],\n    options: DeriveDefinitionOptions<[UserId, TKeyDef], TTo, TDeps>,\n  ) {\n    if (isFromDeriveDefinition(definition)) {\n      return new DeriveDefinition(definition[0].stateDefinition, definition[1], options);\n    } else {\n      return new DeriveDefinition(definition.stateDefinition, definition.key, options);\n    }\n  }\n\n  get derive() {\n    return this.options.derive;\n  }\n\n  deserialize(serialized: Jsonify<TTo>): TTo {\n    return this.options.deserializer(serialized);\n  }\n\n  get cleanupDelayMs() {\n    return this.options.cleanupDelayMs < 0 ? 0 : (this.options.cleanupDelayMs ?? 1000);\n  }\n\n  get clearOnCleanup() {\n    return this.options.clearOnCleanup ?? true;\n  }\n\n  buildCacheKey(): string {\n    return `derived_${this.stateDefinition.name}_${this.uniqueDerivationName}`;\n  }\n\n  /**\n   * Creates a {@link StorageKey} that points to the data for the given derived definition.\n   * @returns A key that is ready to be used in a storage service to get data.\n   */\n  get storageKey(): StorageKey {\n    return `derived_${this.stateDefinition.name}_${this.uniqueDerivationName}` as StorageKey;\n  }\n}\n\nfunction isFromDeriveDefinition(\n  definition:\n    | KeyDefinition<unknown>\n    | UserKeyDefinition<unknown>\n    | [DeriveDefinition<unknown, unknown, DerivedStateDependencies>, string],\n): definition is [DeriveDefinition<unknown, unknown, DerivedStateDependencies>, string] {\n  return Array.isArray(definition);\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\nimport { DerivedStateDependencies } from \"../../types/state\";\n\nimport { DeriveDefinition } from \"./derive-definition\";\nimport { DerivedState } from \"./derived-state\";\nimport { GlobalState } from \"./global-state\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in docs\nimport { GlobalStateProvider } from \"./global-state.provider\";\nimport { KeyDefinition } from \"./key-definition\";\nimport { UserKeyDefinition } from \"./user-key-definition\";\nimport { ActiveUserState, SingleUserState } from \"./user-state\";\n// eslint-disable-next-line @typescript-eslint/no-unused-vars -- used in docs\nimport { ActiveUserStateProvider, SingleUserStateProvider } from \"./user-state.provider\";\n\n/** Convenience wrapper class for {@link ActiveUserStateProvider}, {@link SingleUserStateProvider},\n * and {@link GlobalStateProvider}.\n */\nexport abstract class StateProvider {\n  /** @see{@link ActiveUserStateProvider.activeUserId$} */\n  abstract activeUserId$: Observable<UserId | undefined>;\n\n  /**\n   * Gets a state observable for a given key and userId.\n   *\n   * @remarks If userId is falsy the observable returned will attempt to point to the currently active user _and not update if the active user changes_.\n   * This is different to how `getActive` works and more similar to `getUser` for whatever user happens to be active at the time of the call.\n   * If no user happens to be active at the time this method is called with a falsy userId then this observable will not emit a value until\n   * a user becomes active. If you are not confident a user is active at the time this method is called, you may want to pipe a call to `timeout`\n   * or instead call {@link getUserStateOrDefault$} and supply a value you would rather have given in the case of no passed in userId and no active user.\n   *\n   * @param keyDefinition - The key definition for the state you want to get.\n   * @param userId - The userId for which you want the state for. If not provided, the state for the currently active user will be returned.\n   */\n  abstract getUserState$<T>(keyDefinition: UserKeyDefinition<T>, userId?: UserId): Observable<T>;\n\n  /**\n   * Gets a state observable for a given key and userId\n   *\n   * @remarks If userId is falsy the observable return will first attempt to point to the currently active user but will not follow subsequent active user changes,\n   * if there is no immediately available active user, then it will fallback to returning a default value in an observable that immediately completes.\n   *\n   * @param keyDefinition - The key definition for the state you want to get.\n   * @param config.userId - The userId for which you want the state for. If not provided, the state for the currently active user will be returned.\n   * @param config.defaultValue - The default value that should be wrapped in an observable if no active user is immediately available and no truthy userId is passed in.\n   */\n  abstract getUserStateOrDefault$<T>(\n    keyDefinition: UserKeyDefinition<T>,\n    config: { userId: UserId | undefined; defaultValue?: T },\n  ): Observable<T>;\n\n  /**\n   * Sets the state for a given key and userId.\n   *\n   * @overload\n   * @param keyDefinition - The key definition for the state you want to set.\n   * @param value - The value to set the state to.\n   * @param userId - The userId for which you want to set the state for. If not provided, the state for the currently active user will be set.\n   */\n  abstract setUserState<T>(\n    keyDefinition: UserKeyDefinition<T>,\n    value: T,\n    userId?: UserId,\n  ): Promise<[UserId, T]>;\n\n  /** @see{@link ActiveUserStateProvider.get} */\n  abstract getActive<T>(userKeyDefinition: UserKeyDefinition<T>): ActiveUserState<T>;\n\n  /** @see{@link SingleUserStateProvider.get} */\n  abstract getUser<T>(userId: UserId, userKeyDefinition: UserKeyDefinition<T>): SingleUserState<T>;\n\n  /** @see{@link GlobalStateProvider.get} */\n  abstract getGlobal<T>(keyDefinition: KeyDefinition<T>): GlobalState<T>;\n  abstract getDerived<TFrom, TTo, TDeps extends DerivedStateDependencies>(\n    parentState$: Observable<TFrom>,\n    deriveDefinition: DeriveDefinition<TFrom, TTo, TDeps>,\n    dependencies: TDeps,\n  ): DerivedState<TTo>;\n}\n","import { Jsonify } from \"type-fest\";\n\n/**\n *\n * @param elementDeserializer\n * @returns\n */\nexport function array<T>(\n  elementDeserializer: (element: Jsonify<T>) => T,\n): (array: Jsonify<T[]>) => T[] {\n  return (array) => {\n    if (array == null) {\n      return null;\n    }\n\n    return array.map((element) => elementDeserializer(element));\n  };\n}\n\n/**\n *\n * @param valueDeserializer\n */\nexport function record<T, TKey extends string | number = string>(\n  valueDeserializer: (value: Jsonify<T>) => T,\n): (record: Jsonify<Record<TKey, T>>) => Record<TKey, T> {\n  return (jsonValue: Jsonify<Record<TKey, T> | null>) => {\n    if (jsonValue == null) {\n      return null;\n    }\n\n    const output: Record<TKey, T> = {} as any;\n    Object.entries(jsonValue).forEach(([key, value]) => {\n      output[key as TKey] = valueDeserializer(value);\n    });\n    return output;\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { StorageKey } from \"../../types/state\";\n\nimport { array, record } from \"./deserialization-helpers\";\nimport { StateDefinition } from \"./state-definition\";\n\nexport type DebugOptions = {\n  /**\n   * When true, logs will be written that look like the following:\n   *\n   * ```\n   * \"Updating 'global_myState_myKey' from null to non-null\"\n   * \"Updating 'user_32265eda-62ff-4797-9ead-22214772f888_myState_myKey' from non-null to null.\"\n   * ```\n   *\n   * It does not include the value of the data, only whether it is null or non-null.\n   */\n  enableUpdateLogging?: boolean;\n\n  /**\n   * When true, logs will be written that look like the following everytime a value is retrieved from storage.\n   *\n   * \"Retrieving 'global_myState_myKey' from storage, value is null.\"\n   * \"Retrieving 'user_32265eda-62ff-4797-9ead-22214772f888_myState_myKey' from storage, value is non-null.\"\n   */\n  enableRetrievalLogging?: boolean;\n};\n\n/**\n * A set of options for customizing the behavior of a {@link KeyDefinition}\n */\nexport type KeyDefinitionOptions<T> = {\n  /**\n   * A function to use to safely convert your type from json to your expected type.\n   *\n   * **Important:** Your data may be serialized/deserialized at any time and this\n   *  callback needs to be able to faithfully re-initialize from the JSON object representation of your type.\n   *\n   * @param jsonValue The JSON object representation of your state.\n   * @returns The fully typed version of your state.\n   */\n  readonly deserializer: (jsonValue: Jsonify<T>) => T;\n  /**\n   * The number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   * Defaults to 1000ms.\n   */\n  readonly cleanupDelayMs?: number;\n\n  /**\n   * Options for configuring the debugging behavior, see individual options for more info.\n   */\n  readonly debug?: DebugOptions;\n};\n\n/**\n * KeyDefinitions describe the precise location to store data for a given piece of state.\n * The StateDefinition is used to describe the domain of the state, and the KeyDefinition\n * sub-divides that domain into specific keys.\n */\nexport class KeyDefinition<T> {\n  readonly debug: Required<DebugOptions>;\n\n  /**\n   * Creates a new instance of a KeyDefinition\n   * @param stateDefinition The state definition for which this key belongs to.\n   * @param key The name of the key, this should be unique per domain.\n   * @param options A set of options to customize the behavior of {@link KeyDefinition}. All options are required.\n   * @param options.deserializer A function to use to safely convert your type from json to your expected type.\n   *   Your data may be serialized/deserialized at any time and this needs callback needs to be able to faithfully re-initialize\n   *   from the JSON object representation of your type.\n   */\n  constructor(\n    readonly stateDefinition: StateDefinition,\n    readonly key: string,\n    private readonly options: KeyDefinitionOptions<T>,\n  ) {\n    if (options.deserializer == null) {\n      throw new Error(`'deserializer' is a required property on key ${this.errorKeyName}`);\n    }\n\n    if (options.cleanupDelayMs < 0) {\n      throw new Error(\n        `'cleanupDelayMs' must be greater than or equal to 0. Value of ${options.cleanupDelayMs} passed to key ${this.errorKeyName} `,\n      );\n    }\n\n    // Normalize optional debug options\n    const { enableUpdateLogging = false, enableRetrievalLogging = false } = options.debug ?? {};\n    this.debug = {\n      enableUpdateLogging,\n      enableRetrievalLogging,\n    };\n  }\n\n  /**\n   * Gets the deserializer configured for this {@link KeyDefinition}\n   */\n  get deserializer() {\n    return this.options.deserializer;\n  }\n\n  /**\n   * Gets the number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   */\n  get cleanupDelayMs() {\n    return this.options.cleanupDelayMs < 0 ? 0 : (this.options.cleanupDelayMs ?? 1000);\n  }\n\n  /**\n   * Creates a {@link KeyDefinition} for state that is an array.\n   * @param stateDefinition The state definition to be added to the KeyDefinition\n   * @param key The key to be added to the KeyDefinition\n   * @param options The options to customize the final {@link KeyDefinition}.\n   * @returns A {@link KeyDefinition} initialized for arrays, the options run\n   * the deserializer on the provided options for each element of an array.\n   *\n   * @example\n   * ```typescript\n   * const MY_KEY = KeyDefinition.array<MyArrayElement>(MY_STATE, \"key\", {\n   *   deserializer: (myJsonElement) => convertToElement(myJsonElement),\n   * });\n   * ```\n   */\n  static array<T>(\n    stateDefinition: StateDefinition,\n    key: string,\n    // We have them provide options for the element of the array, depending on future options we add, this could get a little weird.\n    options: KeyDefinitionOptions<T>, // The array helper forces  an initialValue of an empty array\n  ) {\n    return new KeyDefinition<T[]>(stateDefinition, key, {\n      ...options,\n      deserializer: array((e) => options.deserializer(e)),\n    });\n  }\n\n  /**\n   * Creates a {@link KeyDefinition} for state that is a record.\n   * @param stateDefinition The state definition to be added to the KeyDefinition\n   * @param key The key to be added to the KeyDefinition\n   * @param options The options to customize the final {@link KeyDefinition}.\n   * @returns A {@link KeyDefinition} that contains a serializer that will run the provided deserializer for each\n   * value in a record and returns every key as a string.\n   *\n   * @example\n   * ```typescript\n   * const MY_KEY = KeyDefinition.record<MyRecordValue>(MY_STATE, \"key\", {\n   *   deserializer: (myJsonValue) => convertToValue(myJsonValue),\n   * });\n   * ```\n   */\n  static record<T, TKey extends string | number = string>(\n    stateDefinition: StateDefinition,\n    key: string,\n    // We have them provide options for the value of the record, depending on future options we add, this could get a little weird.\n    options: KeyDefinitionOptions<T>, // The array helper forces an initialValue of an empty record\n  ) {\n    return new KeyDefinition<Record<TKey, T>>(stateDefinition, key, {\n      ...options,\n      deserializer: record((v) => options.deserializer(v)),\n    });\n  }\n\n  get fullName() {\n    return `${this.stateDefinition.name}_${this.key}`;\n  }\n\n  protected get errorKeyName() {\n    return `${this.stateDefinition.name} > ${this.key}`;\n  }\n}\n\n/**\n * Creates a {@link StorageKey}\n * @param keyDefinition The key definition of which data the key should point to.\n * @returns A key that is ready to be used in a storage service to get data.\n */\nexport function globalKeyBuilder(keyDefinition: KeyDefinition<unknown>): StorageKey {\n  return `global_${keyDefinition.stateDefinition.name}_${keyDefinition.key}` as StorageKey;\n}\n","import { UserId } from \"../../types/guid\";\nimport { StorageKey } from \"../../types/state\";\nimport { Utils } from \"../misc/utils\";\n\nimport { array, record } from \"./deserialization-helpers\";\nimport { DebugOptions, KeyDefinitionOptions } from \"./key-definition\";\nimport { StateDefinition } from \"./state-definition\";\n\nexport type ClearEvent = \"lock\" | \"logout\";\n\nexport type UserKeyDefinitionOptions<T> = KeyDefinitionOptions<T> & {\n  clearOn: ClearEvent[];\n};\n\nconst USER_KEY_DEFINITION_MARKER: unique symbol = Symbol(\"UserKeyDefinition\");\n\nexport class UserKeyDefinition<T> {\n  readonly [USER_KEY_DEFINITION_MARKER] = true;\n  /**\n   * A unique array of events that the state stored at this key should be cleared on.\n   */\n  readonly clearOn: ClearEvent[];\n\n  /**\n   * Normalized options used for debugging purposes.\n   */\n  readonly debug: Required<DebugOptions>;\n\n  constructor(\n    readonly stateDefinition: StateDefinition,\n    readonly key: string,\n    private readonly options: UserKeyDefinitionOptions<T>,\n  ) {\n    if (options.deserializer == null) {\n      throw new Error(`'deserializer' is a required property on key ${this.errorKeyName}`);\n    }\n\n    if (options.cleanupDelayMs < 0) {\n      throw new Error(\n        `'cleanupDelayMs' must be greater than or equal to 0. Value of ${options.cleanupDelayMs} passed to key ${this.errorKeyName} `,\n      );\n    }\n\n    // Filter out repeat values\n    this.clearOn = Array.from(new Set(options.clearOn));\n\n    // Normalize optional debug options\n    const { enableUpdateLogging = false, enableRetrievalLogging = false } = options.debug ?? {};\n    this.debug = {\n      enableUpdateLogging,\n      enableRetrievalLogging,\n    };\n  }\n\n  /**\n   * Gets the deserializer configured for this {@link KeyDefinition}\n   */\n  get deserializer() {\n    return this.options.deserializer;\n  }\n\n  /**\n   * Gets the number of milliseconds to wait before cleaning up the state after the last subscriber has unsubscribed.\n   */\n  get cleanupDelayMs() {\n    return this.options.cleanupDelayMs < 0 ? 0 : (this.options.cleanupDelayMs ?? 1000);\n  }\n\n  /**\n   * Creates a {@link UserKeyDefinition} for state that is an array.\n   * @param stateDefinition The state definition to be added to the UserKeyDefinition\n   * @param key The key to be added to the KeyDefinition\n   * @param options The options to customize the final {@link UserKeyDefinition}.\n   * @returns A {@link UserKeyDefinition} initialized for arrays, the options run\n   * the deserializer on the provided options for each element of an array\n   * **unless that array is null, in which case it will return an empty list.**\n   *\n   * @example\n   * ```typescript\n   * const MY_KEY = UserKeyDefinition.array<MyArrayElement>(MY_STATE, \"key\", {\n   *   deserializer: (myJsonElement) => convertToElement(myJsonElement),\n   * });\n   * ```\n   */\n  static array<T>(\n    stateDefinition: StateDefinition,\n    key: string,\n    // We have them provide options for the element of the array, depending on future options we add, this could get a little weird.\n    options: UserKeyDefinitionOptions<T>,\n  ) {\n    return new UserKeyDefinition<T[]>(stateDefinition, key, {\n      ...options,\n      deserializer: array((e) => options.deserializer(e)),\n    });\n  }\n\n  /**\n   * Creates a {@link UserKeyDefinition} for state that is a record.\n   * @param stateDefinition The state definition to be added to the UserKeyDefinition\n   * @param key The key to be added to the KeyDefinition\n   * @param options The options to customize the final {@link UserKeyDefinition}.\n   * @returns A {@link UserKeyDefinition} that contains a serializer that will run the provided deserializer for each\n   * value in a record and returns every key as a string **unless that record is null, in which case it will return an record.**\n   *\n   * @example\n   * ```typescript\n   * const MY_KEY = UserKeyDefinition.record<MyRecordValue>(MY_STATE, \"key\", {\n   *   deserializer: (myJsonValue) => convertToValue(myJsonValue),\n   * });\n   * ```\n   */\n  static record<T, TKey extends string | number = string>(\n    stateDefinition: StateDefinition,\n    key: string,\n    // We have them provide options for the value of the record, depending on future options we add, this could get a little weird.\n    options: UserKeyDefinitionOptions<T>, // The array helper forces an initialValue of an empty record\n  ) {\n    return new UserKeyDefinition<Record<TKey, T>>(stateDefinition, key, {\n      ...options,\n      deserializer: record((v) => options.deserializer(v)),\n    });\n  }\n\n  get fullName() {\n    return `${this.stateDefinition.name}_${this.key}`;\n  }\n\n  buildKey(userId: UserId) {\n    if (!Utils.isGuid(userId)) {\n      throw new Error(\n        `You cannot build a user key without a valid UserId, building for key ${this.fullName}`,\n      );\n    }\n    return `user_${userId}_${this.stateDefinition.name}_${this.key}` as StorageKey;\n  }\n\n  private get errorKeyName() {\n    return `${this.stateDefinition.name} > ${this.key}`;\n  }\n}\n","/**\n * Default storage location options.\n *\n * `disk` generally means state that is accessible between restarts of the application,\n * with the exception of the web client. In web this means `sessionStorage`. The data\n * persists through refreshes of the page but not available once that tab is closed or\n * from any other tabs.\n *\n * `memory` means that the information stored there goes away during application\n * restarts.\n */\nexport type StorageLocation = \"disk\" | \"memory\";\n\n/**\n * *Note*: The property names of this object should match exactly with the string values of the {@link ClientType} enum\n */\nexport type ClientLocations = {\n  /**\n   * Overriding storage location for the web client.\n   *\n   * Includes an extra storage location to store data in `localStorage`\n   * that is available from different tabs and after a tab has closed.\n   */\n  web: StorageLocation | \"disk-local\";\n  /**\n   * Overriding storage location for browser clients.\n   *\n   * `\"memory-large-object\"` is used to store non-countable objects in memory. This exists due to limited persistent memory available to browser extensions.\n   *\n   * `\"disk-backup-local-storage\"` is used to store object in both disk and in `localStorage`. Data is stored in both locations but is only retrieved\n   * from `localStorage` when a null-ish value is retrieved from disk first.\n   */\n  browser: StorageLocation | \"memory-large-object\" | \"disk-backup-local-storage\";\n  /**\n   * Overriding storage location for desktop clients.\n   */\n  //desktop: StorageLocation;\n  /**\n   * Overriding storage location for CLI clients.\n   */\n  //cli: StorageLocation;\n};\n\n/**\n * Defines the base location and instruction of where this state is expected to be located.\n */\nexport class StateDefinition {\n  readonly storageLocationOverrides: Partial<ClientLocations>;\n\n  /**\n   * Creates a new instance of {@link StateDefinition}, the creation of which is owned by the platform team.\n   * @param name The name of the state, this needs to be unique from all other {@link StateDefinition}'s.\n   * @param defaultStorageLocation The location of where this state should be stored.\n   */\n  constructor(\n    readonly name: string,\n    readonly defaultStorageLocation: StorageLocation,\n    storageLocationOverrides?: Partial<ClientLocations>,\n  ) {\n    this.storageLocationOverrides = storageLocationOverrides ?? {};\n  }\n}\n","import { StateDefinition } from \"./state-definition\";\n\n/**\n * `StateDefinition`s comes with some rules, to facilitate a quick review from\n * platform of this file, ensure you follow these rules, the ones marked with (tested)\n * have unit tests that you can run locally.\n *\n * 1. (tested) Names should not be null or undefined\n * 2. (tested) Name and storage location should be unique\n * 3. (tested) Name and storage location can't differ from another export by only casing\n * 4. (tested) Name should be longer than 3 characters. It should be descriptive, but brief.\n * 5. (tested) Name should not contain spaces or underscores\n * 6. Name should be human readable\n * 7. Name should be in camelCase format (unit tests ensure the first character is lowercase)\n * 8. Teams should only use state definitions they have created\n * 9. StateDefinitions should only be used for keys relating to the state name they chose\n *\n */\n\n// Admin Console\n\nexport const ORGANIZATIONS_DISK = new StateDefinition(\"organizations\", \"disk\");\nexport const POLICIES_DISK = new StateDefinition(\"policies\", \"disk\");\nexport const PROVIDERS_DISK = new StateDefinition(\"providers\", \"disk\");\nexport const ORGANIZATION_MANAGEMENT_PREFERENCES_DISK = new StateDefinition(\n  \"organizationManagementPreferences\",\n  \"disk\",\n  {\n    web: \"disk-local\",\n  },\n);\nexport const AC_BANNERS_DISMISSED_DISK = new StateDefinition(\"acBannersDismissed\", \"disk\", {\n  web: \"disk-local\",\n});\n\n// Billing\nexport const BILLING_DISK = new StateDefinition(\"billing\", \"disk\");\n\n// Auth\n\nexport const ACCOUNT_DISK = new StateDefinition(\"account\", \"disk\");\nexport const ACCOUNT_MEMORY = new StateDefinition(\"account\", \"memory\");\nexport const AUTH_REQUEST_DISK_LOCAL = new StateDefinition(\"authRequestLocal\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const AVATAR_DISK = new StateDefinition(\"avatar\", \"disk\", { web: \"disk-local\" });\nexport const DEVICE_TRUST_DISK_LOCAL = new StateDefinition(\"deviceTrust\", \"disk\", {\n  web: \"disk-local\",\n  browser: \"disk-backup-local-storage\",\n});\nexport const KDF_CONFIG_DISK = new StateDefinition(\"kdfConfig\", \"disk\");\nexport const KEY_CONNECTOR_DISK = new StateDefinition(\"keyConnector\", \"disk\");\nexport const LOGIN_EMAIL_DISK = new StateDefinition(\"loginEmail\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const LOGIN_EMAIL_MEMORY = new StateDefinition(\"loginEmail\", \"memory\");\nexport const LOGIN_STRATEGY_MEMORY = new StateDefinition(\"loginStrategy\", \"memory\");\nexport const MASTER_PASSWORD_DISK = new StateDefinition(\"masterPassword\", \"disk\");\nexport const MASTER_PASSWORD_MEMORY = new StateDefinition(\"masterPassword\", \"memory\");\nexport const PIN_DISK = new StateDefinition(\"pinUnlock\", \"disk\");\nexport const PIN_MEMORY = new StateDefinition(\"pinUnlock\", \"memory\");\nexport const ROUTER_DISK = new StateDefinition(\"router\", \"disk\");\nexport const SSO_DISK = new StateDefinition(\"ssoLogin\", \"disk\");\nexport const TOKEN_DISK = new StateDefinition(\"token\", \"disk\");\nexport const TOKEN_DISK_LOCAL = new StateDefinition(\"tokenDiskLocal\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const TOKEN_MEMORY = new StateDefinition(\"token\", \"memory\");\nexport const TWO_FACTOR_MEMORY = new StateDefinition(\"twoFactor\", \"memory\");\nexport const USER_DECRYPTION_OPTIONS_DISK = new StateDefinition(\"userDecryptionOptions\", \"disk\");\nexport const ORGANIZATION_INVITE_DISK = new StateDefinition(\"organizationInvite\", \"disk\");\nexport const VAULT_TIMEOUT_SETTINGS_DISK_LOCAL = new StateDefinition(\n  \"vaultTimeoutSettings\",\n  \"disk\",\n  {\n    web: \"disk-local\",\n  },\n);\n\n// Autofill\n\nexport const BADGE_SETTINGS_DISK = new StateDefinition(\"badgeSettings\", \"disk\");\nexport const USER_NOTIFICATION_SETTINGS_DISK = new StateDefinition(\n  \"userNotificationSettings\",\n  \"disk\",\n);\n\nexport const DOMAIN_SETTINGS_DISK = new StateDefinition(\"domainSettings\", \"disk\");\nexport const AUTOFILL_SETTINGS_DISK = new StateDefinition(\"autofillSettings\", \"disk\");\nexport const AUTOFILL_SETTINGS_DISK_LOCAL = new StateDefinition(\"autofillSettingsLocal\", \"disk\", {\n  web: \"disk-local\",\n});\n\n// Components\n\nexport const NEW_WEB_LAYOUT_BANNER_DISK = new StateDefinition(\"newWebLayoutBanner\", \"disk\", {\n  web: \"disk-local\",\n});\n\n// Platform\n\nexport const APPLICATION_ID_DISK = new StateDefinition(\"applicationId\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const BIOMETRIC_SETTINGS_DISK = new StateDefinition(\"biometricSettings\", \"disk\");\nexport const CLEAR_EVENT_DISK = new StateDefinition(\"clearEvent\", \"disk\");\nexport const CONFIG_DISK = new StateDefinition(\"config\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const CRYPTO_DISK = new StateDefinition(\"crypto\", \"disk\");\nexport const CRYPTO_MEMORY = new StateDefinition(\"crypto\", \"memory\");\nexport const DESKTOP_SETTINGS_DISK = new StateDefinition(\"desktopSettings\", \"disk\");\nexport const ENVIRONMENT_DISK = new StateDefinition(\"environment\", \"disk\");\nexport const ENVIRONMENT_MEMORY = new StateDefinition(\"environment\", \"memory\");\nexport const POPUP_VIEW_MEMORY = new StateDefinition(\"popupView\", \"memory\", {\n  browser: \"memory-large-object\",\n});\nexport const SYNC_DISK = new StateDefinition(\"sync\", \"disk\", { web: \"memory\" });\nexport const THEMING_DISK = new StateDefinition(\"theming\", \"disk\", { web: \"disk-local\" });\nexport const TRANSLATION_DISK = new StateDefinition(\"translation\", \"disk\", { web: \"disk-local\" });\nexport const ANIMATION_DISK = new StateDefinition(\"animation\", \"disk\");\nexport const TASK_SCHEDULER_DISK = new StateDefinition(\"taskScheduler\", \"disk\");\n\n// Secrets Manager\n\nexport const SM_ONBOARDING_DISK = new StateDefinition(\"smOnboarding\", \"disk\", {\n  web: \"disk-local\",\n});\n\n// Tools\n\nexport const GENERATOR_DISK = new StateDefinition(\"generator\", \"disk\");\nexport const GENERATOR_MEMORY = new StateDefinition(\"generator\", \"memory\");\nexport const BROWSER_SEND_MEMORY = new StateDefinition(\"sendBrowser\", \"memory\");\nexport const EVENT_COLLECTION_DISK = new StateDefinition(\"eventCollection\", \"disk\");\nexport const SEND_DISK = new StateDefinition(\"encryptedSend\", \"disk\", {\n  web: \"memory\",\n});\nexport const SEND_MEMORY = new StateDefinition(\"decryptedSend\", \"memory\", {\n  browser: \"memory-large-object\",\n});\n\n// Vault\n\nexport const COLLECTION_DATA = new StateDefinition(\"collection\", \"disk\", {\n  web: \"memory\",\n});\nexport const FOLDER_DISK = new StateDefinition(\"folder\", \"disk\", { web: \"memory\" });\nexport const VAULT_FILTER_DISK = new StateDefinition(\"vaultFilter\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const VAULT_ONBOARDING = new StateDefinition(\"vaultOnboarding\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const VAULT_SETTINGS_DISK = new StateDefinition(\"vaultSettings\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const VAULT_BROWSER_MEMORY = new StateDefinition(\"vaultBrowser\", \"memory\", {\n  browser: \"memory-large-object\",\n});\nexport const VAULT_SEARCH_MEMORY = new StateDefinition(\"vaultSearch\", \"memory\", {\n  browser: \"memory-large-object\",\n});\nexport const CIPHERS_DISK = new StateDefinition(\"ciphers\", \"disk\", { web: \"memory\" });\nexport const CIPHERS_DISK_LOCAL = new StateDefinition(\"ciphersLocal\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const CIPHERS_MEMORY = new StateDefinition(\"ciphersMemory\", \"memory\", {\n  browser: \"memory-large-object\",\n});\nexport const PREMIUM_BANNER_DISK_LOCAL = new StateDefinition(\"premiumBannerReprompt\", \"disk\", {\n  web: \"disk-local\",\n});\nexport const BANNERS_DISMISSED_DISK = new StateDefinition(\"bannersDismissed\", \"disk\");\nexport const VAULT_BROWSER_UI_ONBOARDING = new StateDefinition(\"vaultBrowserUiOnboarding\", \"disk\");\n","import { PossibleLocation, StorageServiceProvider } from \"../services/storage-service.provider\";\n\nimport { GlobalState } from \"./global-state\";\nimport { GlobalStateProvider } from \"./global-state.provider\";\nimport { KeyDefinition } from \"./key-definition\";\nimport { CLEAR_EVENT_DISK } from \"./state-definitions\";\nimport { ClearEvent, UserKeyDefinition } from \"./user-key-definition\";\n\nexport type StateEventInfo = {\n  state: string;\n  key: string;\n  location: PossibleLocation;\n};\n\nexport const STATE_LOCK_EVENT = KeyDefinition.array<StateEventInfo>(CLEAR_EVENT_DISK, \"lock\", {\n  deserializer: (e) => e,\n});\n\nexport const STATE_LOGOUT_EVENT = KeyDefinition.array<StateEventInfo>(CLEAR_EVENT_DISK, \"logout\", {\n  deserializer: (e) => e,\n});\n\nexport class StateEventRegistrarService {\n  private readonly stateEventStateMap: { [Prop in ClearEvent]: GlobalState<StateEventInfo[]> };\n\n  constructor(\n    globalStateProvider: GlobalStateProvider,\n    private storageServiceProvider: StorageServiceProvider,\n  ) {\n    this.stateEventStateMap = {\n      lock: globalStateProvider.get(STATE_LOCK_EVENT),\n      logout: globalStateProvider.get(STATE_LOGOUT_EVENT),\n    };\n  }\n\n  async registerEvents(keyDefinition: UserKeyDefinition<unknown>) {\n    for (const clearEvent of keyDefinition.clearOn) {\n      const eventState = this.stateEventStateMap[clearEvent];\n      // Determine the storage location for this\n      const [storageLocation] = this.storageServiceProvider.get(\n        keyDefinition.stateDefinition.defaultStorageLocation,\n        keyDefinition.stateDefinition.storageLocationOverrides,\n      );\n\n      const newEvent: StateEventInfo = {\n        state: keyDefinition.stateDefinition.name,\n        key: keyDefinition.key,\n        location: storageLocation,\n      };\n\n      // Only update the event state if the existing list doesn't have a matching entry\n      await eventState.update(\n        (existingTickets) => {\n          existingTickets ??= [];\n          existingTickets.push(newEvent);\n          return existingTickets;\n        },\n        {\n          shouldUpdate: (currentTickets) => {\n            return (\n              // If the current tickets are null, then it will for sure be added\n              currentTickets == null ||\n              // If an existing match couldn't be found, we also need to add one\n              currentTickets.findIndex(\n                (e) =>\n                  e.state === newEvent.state &&\n                  e.key === newEvent.key &&\n                  e.location === newEvent.location,\n              ) === -1\n            );\n          },\n        },\n      );\n    }\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\nimport { StorageServiceProvider } from \"../services/storage-service.provider\";\n\nimport { GlobalState } from \"./global-state\";\nimport { GlobalStateProvider } from \"./global-state.provider\";\nimport { StateDefinition, StorageLocation } from \"./state-definition\";\nimport {\n  STATE_LOCK_EVENT,\n  STATE_LOGOUT_EVENT,\n  StateEventInfo,\n} from \"./state-event-registrar.service\";\nimport { ClearEvent, UserKeyDefinition } from \"./user-key-definition\";\n\nexport class StateEventRunnerService {\n  private readonly stateEventMap: { [Prop in ClearEvent]: GlobalState<StateEventInfo[]> };\n\n  constructor(\n    globalStateProvider: GlobalStateProvider,\n    private storageServiceProvider: StorageServiceProvider,\n  ) {\n    this.stateEventMap = {\n      lock: globalStateProvider.get(STATE_LOCK_EVENT),\n      logout: globalStateProvider.get(STATE_LOGOUT_EVENT),\n    };\n  }\n\n  async handleEvent(event: ClearEvent, userId: UserId) {\n    let tickets = await firstValueFrom(this.stateEventMap[event].state$);\n    tickets ??= [];\n\n    const failures: string[] = [];\n\n    for (const ticket of tickets) {\n      try {\n        const [, service] = this.storageServiceProvider.get(\n          ticket.location,\n          {}, // The storage location is already the computed storage location for this client\n        );\n\n        const ticketStorageKey = this.storageKeyFor(userId, ticket);\n\n        // Evaluate current value so we can avoid writing to state if we don't need to\n        const currentValue = await service.get(ticketStorageKey);\n        if (currentValue != null) {\n          await service.remove(ticketStorageKey);\n        }\n      } catch (err: unknown) {\n        let errorMessage = \"Unknown Error\";\n        if (typeof err === \"object\" && \"message\" in err && typeof err.message === \"string\") {\n          errorMessage = err.message;\n        }\n\n        failures.push(\n          `${errorMessage} in ${ticket.state} > ${ticket.key} located ${ticket.location}`,\n        );\n      }\n    }\n\n    if (failures.length > 0) {\n      // Throw aggregated error\n      throw new Error(\n        `One or more errors occurred while handling event '${event}' for user ${userId}.\\n${failures.join(\"\\n\")}`,\n      );\n    }\n  }\n\n  private storageKeyFor(userId: UserId, ticket: StateEventInfo) {\n    const userKey = new UserKeyDefinition<unknown>(\n      new StateDefinition(ticket.state, ticket.location as unknown as StorageLocation),\n      ticket.key,\n      {\n        deserializer: (v) => v,\n        clearOn: [],\n      },\n    );\n    return userKey.buildKey(userId);\n  }\n}\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { KdfConfigService } from \"@bitwarden/common/auth/abstractions/kdf-config.service\";\nimport { MasterPasswordServiceAbstraction } from \"@bitwarden/common/auth/abstractions/master-password.service.abstraction\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { KeyGenerationService } from \"@bitwarden/common/platform/abstractions/key-generation.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { EncString, EncryptedString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport {\n  PIN_DISK,\n  PIN_MEMORY,\n  StateProvider,\n  UserKeyDefinition,\n} from \"@bitwarden/common/platform/state\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { MasterKey, PinKey, UserKey } from \"@bitwarden/common/types/key\";\n\nimport { PinServiceAbstraction } from \"../../abstractions/pin.service.abstraction\";\n\n/**\n * - DISABLED   : No PIN set.\n * - PERSISTENT : PIN is set and persists through client reset.\n * - EPHEMERAL  : PIN is set, but does NOT persist through client reset. This means that\n *                after client reset the master password is required to unlock.\n */\nexport type PinLockType = \"DISABLED\" | \"PERSISTENT\" | \"EPHEMERAL\";\n\n/**\n * The persistent (stored on disk) version of the UserKey, encrypted by the PinKey.\n *\n * @remarks Persists through a client reset. Used when `requireMasterPasswordOnClientRestart` is disabled.\n * @see SetPinComponent.setPinForm.requireMasterPasswordOnClientRestart\n */\nexport const PIN_KEY_ENCRYPTED_USER_KEY_PERSISTENT = new UserKeyDefinition<EncryptedString>(\n  PIN_DISK,\n  \"pinKeyEncryptedUserKeyPersistent\",\n  {\n    deserializer: (jsonValue) => jsonValue,\n    clearOn: [\"logout\"],\n  },\n);\n\n/**\n * The ephemeral (stored in memory) version of the UserKey, encrypted by the PinKey.\n *\n * @remarks Does NOT persist through a client reset. Used when `requireMasterPasswordOnClientRestart` is enabled.\n * @see SetPinComponent.setPinForm.requireMasterPasswordOnClientRestart\n */\nexport const PIN_KEY_ENCRYPTED_USER_KEY_EPHEMERAL = new UserKeyDefinition<EncryptedString>(\n  PIN_MEMORY,\n  \"pinKeyEncryptedUserKeyEphemeral\",\n  {\n    deserializer: (jsonValue) => jsonValue,\n    clearOn: [\"logout\"],\n  },\n);\n\n/**\n * The PIN, encrypted by the UserKey.\n */\nexport const USER_KEY_ENCRYPTED_PIN = new UserKeyDefinition<EncryptedString>(\n  PIN_DISK,\n  \"userKeyEncryptedPin\",\n  {\n    deserializer: (jsonValue) => jsonValue,\n    clearOn: [\"logout\"],\n  },\n);\n\n/**\n * The old MasterKey, encrypted by the PinKey (formerly called `pinProtected`).\n * Deprecated and used for migration purposes only.\n */\nexport const OLD_PIN_KEY_ENCRYPTED_MASTER_KEY = new UserKeyDefinition<EncryptedString>(\n  PIN_DISK,\n  \"oldPinKeyEncryptedMasterKey\",\n  {\n    deserializer: (jsonValue) => jsonValue,\n    clearOn: [\"logout\"],\n  },\n);\n\nexport class PinService implements PinServiceAbstraction {\n  constructor(\n    private accountService: AccountService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private encryptService: EncryptService,\n    private kdfConfigService: KdfConfigService,\n    private keyGenerationService: KeyGenerationService,\n    private logService: LogService,\n    private masterPasswordService: MasterPasswordServiceAbstraction,\n    private stateProvider: StateProvider,\n    private stateService: StateService,\n  ) {}\n\n  async getPinKeyEncryptedUserKeyPersistent(userId: UserId): Promise<EncString> {\n    this.validateUserId(userId, \"Cannot get pinKeyEncryptedUserKeyPersistent.\");\n\n    return EncString.fromJSON(\n      await firstValueFrom(\n        this.stateProvider.getUserState$(PIN_KEY_ENCRYPTED_USER_KEY_PERSISTENT, userId),\n      ),\n    );\n  }\n\n  /**\n   * Sets the persistent (stored on disk) version of the UserKey, encrypted by the PinKey.\n   */\n  private async setPinKeyEncryptedUserKeyPersistent(\n    pinKeyEncryptedUserKey: EncString,\n    userId: UserId,\n  ): Promise<void> {\n    this.validateUserId(userId, \"Cannot set pinKeyEncryptedUserKeyPersistent.\");\n\n    if (pinKeyEncryptedUserKey == null) {\n      throw new Error(\n        \"No pinKeyEncryptedUserKey provided. Cannot set pinKeyEncryptedUserKeyPersistent.\",\n      );\n    }\n\n    await this.stateProvider.setUserState(\n      PIN_KEY_ENCRYPTED_USER_KEY_PERSISTENT,\n      pinKeyEncryptedUserKey?.encryptedString,\n      userId,\n    );\n  }\n\n  async clearPinKeyEncryptedUserKeyPersistent(userId: UserId): Promise<void> {\n    this.validateUserId(userId, \"Cannot clear pinKeyEncryptedUserKeyPersistent.\");\n\n    await this.stateProvider.setUserState(PIN_KEY_ENCRYPTED_USER_KEY_PERSISTENT, null, userId);\n  }\n\n  async getPinKeyEncryptedUserKeyEphemeral(userId: UserId): Promise<EncString> {\n    this.validateUserId(userId, \"Cannot get pinKeyEncryptedUserKeyEphemeral.\");\n\n    return EncString.fromJSON(\n      await firstValueFrom(\n        this.stateProvider.getUserState$(PIN_KEY_ENCRYPTED_USER_KEY_EPHEMERAL, userId),\n      ),\n    );\n  }\n\n  /**\n   * Sets the ephemeral (stored in memory) version of the UserKey, encrypted by the PinKey.\n   */\n  private async setPinKeyEncryptedUserKeyEphemeral(\n    pinKeyEncryptedUserKey: EncString,\n    userId: UserId,\n  ): Promise<void> {\n    this.validateUserId(userId, \"Cannot set pinKeyEncryptedUserKeyEphemeral.\");\n\n    if (pinKeyEncryptedUserKey == null) {\n      throw new Error(\n        \"No pinKeyEncryptedUserKey provided. Cannot set pinKeyEncryptedUserKeyEphemeral.\",\n      );\n    }\n\n    await this.stateProvider.setUserState(\n      PIN_KEY_ENCRYPTED_USER_KEY_EPHEMERAL,\n      pinKeyEncryptedUserKey?.encryptedString,\n      userId,\n    );\n  }\n\n  async clearPinKeyEncryptedUserKeyEphemeral(userId: UserId): Promise<void> {\n    this.validateUserId(userId, \"Cannot clear pinKeyEncryptedUserKeyEphemeral.\");\n\n    await this.stateProvider.setUserState(PIN_KEY_ENCRYPTED_USER_KEY_EPHEMERAL, null, userId);\n  }\n\n  async createPinKeyEncryptedUserKey(\n    pin: string,\n    userKey: UserKey,\n    userId: UserId,\n  ): Promise<EncString> {\n    this.validateUserId(userId, \"Cannot create pinKeyEncryptedUserKey.\");\n\n    if (!userKey) {\n      throw new Error(\"No UserKey provided. Cannot create pinKeyEncryptedUserKey.\");\n    }\n\n    const email = await firstValueFrom(\n      this.accountService.accounts$.pipe(map((accounts) => accounts[userId].email)),\n    );\n    const kdfConfig = await this.kdfConfigService.getKdfConfig();\n\n    const pinKey = await this.makePinKey(pin, email, kdfConfig);\n\n    return await this.encryptService.encrypt(userKey.key, pinKey);\n  }\n\n  async storePinKeyEncryptedUserKey(\n    pinKeyEncryptedUserKey: EncString,\n    storeAsEphemeral: boolean,\n    userId: UserId,\n  ): Promise<void> {\n    this.validateUserId(userId, \"Cannot store pinKeyEncryptedUserKey.\");\n\n    if (storeAsEphemeral) {\n      await this.setPinKeyEncryptedUserKeyEphemeral(pinKeyEncryptedUserKey, userId);\n    } else {\n      await this.setPinKeyEncryptedUserKeyPersistent(pinKeyEncryptedUserKey, userId);\n    }\n  }\n\n  async getUserKeyEncryptedPin(userId: UserId): Promise<EncString> {\n    this.validateUserId(userId, \"Cannot get userKeyEncryptedPin.\");\n\n    return EncString.fromJSON(\n      await firstValueFrom(this.stateProvider.getUserState$(USER_KEY_ENCRYPTED_PIN, userId)),\n    );\n  }\n\n  async setUserKeyEncryptedPin(userKeyEncryptedPin: EncString, userId: UserId): Promise<void> {\n    this.validateUserId(userId, \"Cannot set userKeyEncryptedPin.\");\n\n    await this.stateProvider.setUserState(\n      USER_KEY_ENCRYPTED_PIN,\n      userKeyEncryptedPin?.encryptedString,\n      userId,\n    );\n  }\n\n  async clearUserKeyEncryptedPin(userId: UserId): Promise<void> {\n    this.validateUserId(userId, \"Cannot clear userKeyEncryptedPin.\");\n\n    await this.stateProvider.setUserState(USER_KEY_ENCRYPTED_PIN, null, userId);\n  }\n\n  async createUserKeyEncryptedPin(pin: string, userKey: UserKey): Promise<EncString> {\n    if (!userKey) {\n      throw new Error(\"No UserKey provided. Cannot create userKeyEncryptedPin.\");\n    }\n\n    return await this.encryptService.encrypt(pin, userKey);\n  }\n\n  async getOldPinKeyEncryptedMasterKey(userId: UserId): Promise<EncryptedString> {\n    this.validateUserId(userId, \"Cannot get oldPinKeyEncryptedMasterKey.\");\n\n    return await firstValueFrom(\n      this.stateProvider.getUserState$(OLD_PIN_KEY_ENCRYPTED_MASTER_KEY, userId),\n    );\n  }\n\n  async clearOldPinKeyEncryptedMasterKey(userId: UserId): Promise<void> {\n    this.validateUserId(userId, \"Cannot clear oldPinKeyEncryptedMasterKey.\");\n\n    await this.stateProvider.setUserState(OLD_PIN_KEY_ENCRYPTED_MASTER_KEY, null, userId);\n  }\n\n  async makePinKey(pin: string, salt: string, kdfConfig: KdfConfig): Promise<PinKey> {\n    const pinKey = await this.keyGenerationService.deriveKeyFromPassword(pin, salt, kdfConfig);\n    return (await this.keyGenerationService.stretchKey(pinKey)) as PinKey;\n  }\n\n  async getPinLockType(userId: UserId): Promise<PinLockType> {\n    this.validateUserId(userId, \"Cannot get PinLockType.\");\n\n    /**\n     * We can't check the `userKeyEncryptedPin` (formerly called `protectedPin`) for both because old\n     * accounts only used it for MP on Restart\n     */\n    const aUserKeyEncryptedPinIsSet = !!(await this.getUserKeyEncryptedPin(userId));\n    const aPinKeyEncryptedUserKeyPersistentIsSet =\n      !!(await this.getPinKeyEncryptedUserKeyPersistent(userId));\n    const anOldPinKeyEncryptedMasterKeyIsSet =\n      !!(await this.getOldPinKeyEncryptedMasterKey(userId));\n\n    if (aPinKeyEncryptedUserKeyPersistentIsSet || anOldPinKeyEncryptedMasterKeyIsSet) {\n      return \"PERSISTENT\";\n    } else if (\n      aUserKeyEncryptedPinIsSet &&\n      !aPinKeyEncryptedUserKeyPersistentIsSet &&\n      !anOldPinKeyEncryptedMasterKeyIsSet\n    ) {\n      return \"EPHEMERAL\";\n    } else {\n      return \"DISABLED\";\n    }\n  }\n\n  async isPinSet(userId: UserId): Promise<boolean> {\n    this.validateUserId(userId, \"Cannot determine if PIN is set.\");\n\n    return (await this.getPinLockType(userId)) !== \"DISABLED\";\n  }\n\n  async isPinDecryptionAvailable(userId: UserId): Promise<boolean> {\n    this.validateUserId(userId, \"Cannot determine if decryption of user key via PIN is available.\");\n\n    const pinLockType = await this.getPinLockType(userId);\n\n    switch (pinLockType) {\n      case \"DISABLED\":\n        return false;\n      case \"PERSISTENT\":\n        // The above getPinLockType call ensures that we have either a PinKeyEncryptedUserKey or OldPinKeyEncryptedMasterKey set.\n        return true;\n      case \"EPHEMERAL\": {\n        // The above getPinLockType call ensures that we have a UserKeyEncryptedPin set.\n        // However, we must additively check to ensure that we have a set PinKeyEncryptedUserKeyEphemeral b/c otherwise\n        // we cannot take a PIN, derive a PIN key, and decrypt the ephemeral UserKey.\n        const pinKeyEncryptedUserKeyEphemeral =\n          await this.getPinKeyEncryptedUserKeyEphemeral(userId);\n        return Boolean(pinKeyEncryptedUserKeyEphemeral);\n      }\n\n      default: {\n        // Compile-time check for exhaustive switch\n        const _exhaustiveCheck: never = pinLockType;\n        throw new Error(`Unexpected pinLockType: ${_exhaustiveCheck}`);\n      }\n    }\n  }\n\n  async decryptUserKeyWithPin(pin: string, userId: UserId): Promise<UserKey | null> {\n    this.validateUserId(userId, \"Cannot decrypt user key with PIN.\");\n\n    try {\n      const pinLockType = await this.getPinLockType(userId);\n      const requireMasterPasswordOnClientRestart = pinLockType === \"EPHEMERAL\";\n\n      const { pinKeyEncryptedUserKey, oldPinKeyEncryptedMasterKey } =\n        await this.getPinKeyEncryptedKeys(pinLockType, userId);\n\n      const email = await firstValueFrom(\n        this.accountService.accounts$.pipe(map((accounts) => accounts[userId].email)),\n      );\n      const kdfConfig = await this.kdfConfigService.getKdfConfig();\n\n      let userKey: UserKey;\n\n      if (oldPinKeyEncryptedMasterKey) {\n        userKey = await this.decryptAndMigrateOldPinKeyEncryptedMasterKey(\n          userId,\n          pin,\n          email,\n          kdfConfig,\n          requireMasterPasswordOnClientRestart,\n          oldPinKeyEncryptedMasterKey,\n        );\n      } else {\n        userKey = await this.decryptUserKey(userId, pin, email, kdfConfig, pinKeyEncryptedUserKey);\n      }\n\n      if (!userKey) {\n        this.logService.warning(`User key null after pin key decryption.`);\n        return null;\n      }\n\n      if (!(await this.validatePin(userKey, pin, userId))) {\n        this.logService.warning(`Pin key decryption successful but pin validation failed.`);\n        return null;\n      }\n\n      return userKey;\n    } catch (error) {\n      this.logService.error(`Error decrypting user key with pin: ${error}`);\n      return null;\n    }\n  }\n\n  /**\n   * Decrypts the UserKey with the provided PIN.\n   */\n  private async decryptUserKey(\n    userId: UserId,\n    pin: string,\n    salt: string,\n    kdfConfig: KdfConfig,\n    pinKeyEncryptedUserKey?: EncString,\n  ): Promise<UserKey> {\n    this.validateUserId(userId, \"Cannot decrypt user key.\");\n\n    pinKeyEncryptedUserKey ||= await this.getPinKeyEncryptedUserKeyPersistent(userId);\n    pinKeyEncryptedUserKey ||= await this.getPinKeyEncryptedUserKeyEphemeral(userId);\n\n    if (!pinKeyEncryptedUserKey) {\n      throw new Error(\"No pinKeyEncryptedUserKey found.\");\n    }\n\n    const pinKey = await this.makePinKey(pin, salt, kdfConfig);\n    const userKey = await this.encryptService.decryptToBytes(pinKeyEncryptedUserKey, pinKey);\n\n    return new SymmetricCryptoKey(userKey) as UserKey;\n  }\n\n  /**\n   * Creates a new `pinKeyEncryptedUserKey` and clears the `oldPinKeyEncryptedMasterKey`.\n   * @returns UserKey\n   */\n  private async decryptAndMigrateOldPinKeyEncryptedMasterKey(\n    userId: UserId,\n    pin: string,\n    email: string,\n    kdfConfig: KdfConfig,\n    requireMasterPasswordOnClientRestart: boolean,\n    oldPinKeyEncryptedMasterKey: EncString,\n  ): Promise<UserKey> {\n    this.validateUserId(userId, \"Cannot decrypt and migrate oldPinKeyEncryptedMasterKey.\");\n\n    const masterKey = await this.decryptMasterKeyWithPin(\n      userId,\n      pin,\n      email,\n      kdfConfig,\n      oldPinKeyEncryptedMasterKey,\n    );\n\n    const encUserKey = await this.stateService.getEncryptedCryptoSymmetricKey({ userId: userId });\n\n    const userKey = await this.masterPasswordService.decryptUserKeyWithMasterKey(\n      masterKey,\n      encUserKey ? new EncString(encUserKey) : undefined,\n    );\n\n    const pinKeyEncryptedUserKey = await this.createPinKeyEncryptedUserKey(pin, userKey, userId);\n    await this.storePinKeyEncryptedUserKey(\n      pinKeyEncryptedUserKey,\n      requireMasterPasswordOnClientRestart,\n      userId,\n    );\n\n    const userKeyEncryptedPin = await this.createUserKeyEncryptedPin(pin, userKey);\n    await this.setUserKeyEncryptedPin(userKeyEncryptedPin, userId);\n\n    await this.clearOldPinKeyEncryptedMasterKey(userId);\n\n    return userKey;\n  }\n\n  // Only for migration purposes\n  private async decryptMasterKeyWithPin(\n    userId: UserId,\n    pin: string,\n    salt: string,\n    kdfConfig: KdfConfig,\n    oldPinKeyEncryptedMasterKey?: EncString,\n  ): Promise<MasterKey> {\n    this.validateUserId(userId, \"Cannot decrypt master key with PIN.\");\n\n    if (!oldPinKeyEncryptedMasterKey) {\n      const oldPinKeyEncryptedMasterKeyString = await this.getOldPinKeyEncryptedMasterKey(userId);\n\n      if (oldPinKeyEncryptedMasterKeyString == null) {\n        throw new Error(\"No oldPinKeyEncrytedMasterKey found.\");\n      }\n\n      oldPinKeyEncryptedMasterKey = new EncString(oldPinKeyEncryptedMasterKeyString);\n    }\n\n    const pinKey = await this.makePinKey(pin, salt, kdfConfig);\n    const masterKey = await this.encryptService.decryptToBytes(oldPinKeyEncryptedMasterKey, pinKey);\n\n    return new SymmetricCryptoKey(masterKey) as MasterKey;\n  }\n\n  /**\n   * Gets the user's `pinKeyEncryptedUserKey` (persistent or ephemeral) and `oldPinKeyEncryptedMasterKey`\n   * (if one exists) based on the user's PinLockType.\n   *\n   * @remarks The `oldPinKeyEncryptedMasterKey` (formerly `pinProtected`) is only used for migration and\n   *          will be null for all migrated accounts.\n   * @throws If PinLockType is 'DISABLED' or if userId is not provided\n   */\n  private async getPinKeyEncryptedKeys(\n    pinLockType: PinLockType,\n    userId: UserId,\n  ): Promise<{ pinKeyEncryptedUserKey: EncString; oldPinKeyEncryptedMasterKey?: EncString }> {\n    this.validateUserId(userId, \"Cannot get PinKey encrypted keys.\");\n\n    switch (pinLockType) {\n      case \"PERSISTENT\": {\n        const pinKeyEncryptedUserKey = await this.getPinKeyEncryptedUserKeyPersistent(userId);\n        const oldPinKeyEncryptedMasterKey = await this.getOldPinKeyEncryptedMasterKey(userId);\n\n        return {\n          pinKeyEncryptedUserKey,\n          oldPinKeyEncryptedMasterKey: oldPinKeyEncryptedMasterKey\n            ? new EncString(oldPinKeyEncryptedMasterKey)\n            : undefined,\n        };\n      }\n      case \"EPHEMERAL\": {\n        const pinKeyEncryptedUserKey = await this.getPinKeyEncryptedUserKeyEphemeral(userId);\n\n        return {\n          pinKeyEncryptedUserKey,\n          oldPinKeyEncryptedMasterKey: undefined, // Going forward, we only migrate non-ephemeral version\n        };\n      }\n      case \"DISABLED\":\n        throw new Error(\"Pin is disabled\");\n      default: {\n        // Compile-time check for exhaustive switch\n        const _exhaustiveCheck: never = pinLockType;\n        return _exhaustiveCheck;\n      }\n    }\n  }\n\n  private async validatePin(userKey: UserKey, pin: string, userId: UserId): Promise<boolean> {\n    this.validateUserId(userId, \"Cannot validate PIN.\");\n\n    const userKeyEncryptedPin = await this.getUserKeyEncryptedPin(userId);\n    const decryptedPin = await this.encryptService.decryptToUtf8(userKeyEncryptedPin, userKey);\n\n    const isPinValid = this.cryptoFunctionService.compareFast(decryptedPin, pin);\n    return isPinValid;\n  }\n\n  /**\n   * Throws a custom error message if user ID is not provided.\n   */\n  private validateUserId(userId: UserId, errorMessage: string = \"\") {\n    if (!userId) {\n      throw new Error(`User ID is required. ${errorMessage}`);\n    }\n  }\n}\n","export enum AuthenticationStatus {\n  LoggedOut = 0,\n  Locked = 1,\n  Unlocked = 2,\n}\n","import { Observable, firstValueFrom, switchMap } from \"rxjs\";\n\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\n\nimport {\n  GlobalState,\n  KeyDefinition,\n  LOGIN_EMAIL_DISK,\n  LOGIN_EMAIL_MEMORY,\n  StateProvider,\n} from \"../../../../../common/src/platform/state\";\nimport { LoginEmailServiceAbstraction } from \"../../abstractions/login-email.service\";\n\nexport const LOGIN_EMAIL = new KeyDefinition<string>(LOGIN_EMAIL_MEMORY, \"loginEmail\", {\n  deserializer: (value: string) => value,\n});\n\nexport const STORED_EMAIL = new KeyDefinition<string>(LOGIN_EMAIL_DISK, \"storedEmail\", {\n  deserializer: (value: string) => value,\n});\n\nexport class LoginEmailService implements LoginEmailServiceAbstraction {\n  private rememberEmail: boolean;\n\n  // True if an account is currently being added through account switching\n  private readonly addingAccount$: Observable<boolean>;\n\n  private readonly loginEmailState: GlobalState<string>;\n  loginEmail$: Observable<string | null>;\n\n  private readonly storedEmailState: GlobalState<string>;\n  storedEmail$: Observable<string | null>;\n\n  constructor(\n    private accountService: AccountService,\n    private authService: AuthService,\n    private stateProvider: StateProvider,\n  ) {\n    this.loginEmailState = this.stateProvider.getGlobal(LOGIN_EMAIL);\n    this.storedEmailState = this.stateProvider.getGlobal(STORED_EMAIL);\n\n    // In order to determine if an account is being added, we check if any account is not logged out\n    this.addingAccount$ = this.authService.authStatuses$.pipe(\n      switchMap(async (statuses) => {\n        // We don't want to consider the active account since it may have just changed auth status to logged in\n        // which would make this observable think an account is being added\n        const activeUser = await firstValueFrom(this.accountService.activeAccount$);\n        if (activeUser) {\n          delete statuses[activeUser.id];\n        }\n        return Object.values(statuses).some((status) => status !== AuthenticationStatus.LoggedOut);\n      }),\n    );\n\n    this.loginEmail$ = this.loginEmailState.state$;\n\n    this.storedEmail$ = this.storedEmailState.state$.pipe(\n      switchMap(async (storedEmail) => {\n        // When adding an account, we don't show the stored email\n        if (await firstValueFrom(this.addingAccount$)) {\n          return null;\n        }\n        return storedEmail;\n      }),\n    );\n  }\n\n  async setLoginEmail(email: string) {\n    await this.loginEmailState.update((_) => email);\n  }\n\n  getRememberEmail() {\n    return this.rememberEmail;\n  }\n\n  setRememberEmail(value: boolean) {\n    this.rememberEmail = value ?? false;\n  }\n\n  // Note: only clear values on successful login or you are sure they are not needed.\n  // Browser uses these values to maintain the email between login and 2fa components so\n  // we do not want to clear them too early.\n  async clearValues() {\n    await this.setLoginEmail(null);\n    this.rememberEmail = false;\n  }\n\n  async saveEmailSettings() {\n    const addingAccount = await firstValueFrom(this.addingAccount$);\n    const email = await firstValueFrom(this.loginEmail$);\n\n    await this.storedEmailState.update((storedEmail) => {\n      // If we're adding an account, only overwrite the stored email when rememberEmail is true\n      if (addingAccount) {\n        if (this.rememberEmail) {\n          return email;\n        }\n        return storedEmail;\n      }\n\n      // Saving with rememberEmail set to false will clear the stored email\n      if (this.rememberEmail) {\n        return email;\n      }\n      return null;\n    });\n  }\n}\n","/**\n * A range with a default value.\n *\n * Enforces constraints to ensure min > default > max.\n */\nexport class RangeWithDefault {\n  constructor(\n    readonly min: number,\n    readonly max: number,\n    readonly defaultValue: number,\n  ) {\n    if (min > max) {\n      throw new Error(`${min} is greater than ${max}.`);\n    }\n\n    if (this.inRange(defaultValue) === false) {\n      throw new Error(\"Default value is not in range.\");\n    }\n  }\n\n  inRange(value: number): boolean {\n    return value >= this.min && value <= this.max;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { KdfType } from \"../../../platform/enums/kdf-type.enum\";\nimport { RangeWithDefault } from \"../../../platform/misc/range-with-default\";\n\n/**\n * Represents a type safe KDF configuration.\n */\nexport type KdfConfig = PBKDF2KdfConfig | Argon2KdfConfig;\n\n/**\n * Password-Based Key Derivation Function 2 (PBKDF2) KDF configuration.\n */\nexport class PBKDF2KdfConfig {\n  static ITERATIONS = new RangeWithDefault(600_000, 2_000_000, 600_000);\n  kdfType: KdfType.PBKDF2_SHA256 = KdfType.PBKDF2_SHA256;\n  iterations: number;\n\n  constructor(iterations?: number) {\n    this.iterations = iterations ?? PBKDF2KdfConfig.ITERATIONS.defaultValue;\n  }\n\n  /**\n   * Validates the PBKDF2 KDF configuration.\n   * A Valid PBKDF2 KDF configuration has KDF iterations between the 600_000 and 2_000_000.\n   */\n  validateKdfConfig(): void {\n    if (!PBKDF2KdfConfig.ITERATIONS.inRange(this.iterations)) {\n      throw new Error(\n        `PBKDF2 iterations must be between ${PBKDF2KdfConfig.ITERATIONS.min} and ${PBKDF2KdfConfig.ITERATIONS.max}`,\n      );\n    }\n  }\n\n  static fromJSON(json: Jsonify<PBKDF2KdfConfig>): PBKDF2KdfConfig {\n    return new PBKDF2KdfConfig(json.iterations);\n  }\n}\n\n/**\n * Argon2 KDF configuration.\n */\nexport class Argon2KdfConfig {\n  static MEMORY = new RangeWithDefault(16, 1024, 64);\n  static PARALLELISM = new RangeWithDefault(1, 16, 4);\n  static ITERATIONS = new RangeWithDefault(2, 10, 3);\n  kdfType: KdfType.Argon2id = KdfType.Argon2id;\n  iterations: number;\n  memory: number;\n  parallelism: number;\n\n  constructor(iterations?: number, memory?: number, parallelism?: number) {\n    this.iterations = iterations ?? Argon2KdfConfig.ITERATIONS.defaultValue;\n    this.memory = memory ?? Argon2KdfConfig.MEMORY.defaultValue;\n    this.parallelism = parallelism ?? Argon2KdfConfig.PARALLELISM.defaultValue;\n  }\n\n  /**\n   * Validates the Argon2 KDF configuration.\n   * A Valid Argon2 KDF configuration has iterations between 2 and 10, memory between 16mb and 1024mb, and parallelism between 1 and 16.\n   */\n  validateKdfConfig(): void {\n    if (!Argon2KdfConfig.ITERATIONS.inRange(this.iterations)) {\n      throw new Error(\n        `Argon2 iterations must be between ${Argon2KdfConfig.ITERATIONS.min} and ${Argon2KdfConfig.ITERATIONS.max}`,\n      );\n    }\n\n    if (!Argon2KdfConfig.MEMORY.inRange(this.memory)) {\n      throw new Error(\n        `Argon2 memory must be between ${Argon2KdfConfig.MEMORY.min}mb and ${Argon2KdfConfig.MEMORY.max}mb`,\n      );\n    }\n\n    if (!Argon2KdfConfig.PARALLELISM.inRange(this.parallelism)) {\n      throw new Error(\n        `Argon2 parallelism must be between ${Argon2KdfConfig.PARALLELISM.min} and ${Argon2KdfConfig.PARALLELISM.max}.`,\n      );\n    }\n  }\n\n  static fromJSON(json: Jsonify<Argon2KdfConfig>): Argon2KdfConfig {\n    return new Argon2KdfConfig(json.iterations, json.memory, json.parallelism);\n  }\n}\n\nexport const DEFAULT_KDF_CONFIG = new PBKDF2KdfConfig(PBKDF2KdfConfig.ITERATIONS.defaultValue);\n","export abstract class BaseResponse {\n  private response: any;\n\n  constructor(response: any) {\n    this.response = response;\n  }\n\n  protected getResponseProperty(\n    propertyName: string,\n    response: any = null,\n    exactName = false,\n  ): any {\n    if (propertyName == null || propertyName === \"\") {\n      throw new Error(\"propertyName must not be null/empty.\");\n    }\n    if (response == null && this.response != null) {\n      response = this.response;\n    }\n    if (response == null) {\n      return null;\n    }\n    if (!exactName && response[propertyName] === undefined) {\n      let otherCasePropertyName: string = null;\n      if (propertyName.charAt(0) === propertyName.charAt(0).toUpperCase()) {\n        otherCasePropertyName = propertyName.charAt(0).toLowerCase();\n      } else {\n        otherCasePropertyName = propertyName.charAt(0).toUpperCase();\n      }\n      if (propertyName.length > 1) {\n        otherCasePropertyName += propertyName.slice(1);\n      }\n\n      propertyName = otherCasePropertyName;\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toLowerCase();\n      }\n      if (response[propertyName] === undefined) {\n        propertyName = propertyName.toUpperCase();\n      }\n    }\n    return response[propertyName];\n  }\n}\n","import { Utils } from \"../../platform/misc/utils\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class ErrorResponse extends BaseResponse {\n  message: string;\n  validationErrors: { [key: string]: string[] };\n  statusCode: number;\n  captchaRequired: boolean;\n  captchaSiteKey: string;\n\n  constructor(response: any, status: number, identityResponse?: boolean) {\n    super(response);\n    let errorModel = null;\n    if (response != null) {\n      const responseErrorModel = this.getResponseProperty(\"ErrorModel\");\n      if (responseErrorModel && identityResponse) {\n        errorModel = responseErrorModel;\n      } else {\n        errorModel = response;\n      }\n    }\n\n    if (status === 429) {\n      this.message = \"Rate limit exceeded. Try again later.\";\n    } else if (errorModel) {\n      this.message = this.getResponseProperty(\"Message\", errorModel);\n      this.validationErrors = this.getResponseProperty(\"ValidationErrors\", errorModel);\n      this.captchaSiteKey = this.validationErrors?.HCaptcha_SiteKey?.[0];\n      this.captchaRequired = !Utils.isNullOrWhitespace(this.captchaSiteKey);\n    }\n    this.statusCode = status;\n  }\n\n  getSingleMessage(): string {\n    if (this.validationErrors == null) {\n      return this.message;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      if (this.validationErrors[key].length) {\n        return this.validationErrors[key][0];\n      }\n    }\n    return this.message;\n  }\n\n  getAllMessages(): string[] {\n    const messages: string[] = [];\n    if (this.validationErrors == null) {\n      return messages;\n    }\n    for (const key in this.validationErrors) {\n      // eslint-disable-next-line\n      if (!this.validationErrors.hasOwnProperty(key)) {\n        continue;\n      }\n      this.validationErrors[key].forEach((item: string) => {\n        let prefix = \"\";\n        if (key.indexOf(\"[\") > -1 && key.indexOf(\"]\") > -1) {\n          const lastSep = key.lastIndexOf(\".\");\n          prefix = key.substr(0, lastSep > -1 ? lastSep : key.length) + \": \";\n        }\n        messages.push(prefix + item);\n      });\n    }\n    return messages;\n  }\n}\n","import { Subscription } from \"rxjs\";\n\nimport { ScheduledTaskName } from \"./scheduled-task-name.enum\";\n\nexport abstract class TaskSchedulerService {\n  protected taskHandlers: Map<string, () => void>;\n  abstract setTimeout(taskName: ScheduledTaskName, delayInMs: number): Subscription;\n  abstract setInterval(\n    taskName: ScheduledTaskName,\n    intervalInMs: number,\n    initialDelayInMs?: number,\n  ): Subscription;\n  abstract registerTaskHandler(taskName: ScheduledTaskName, handler: () => void): void;\n  abstract unregisterTaskHandler(taskName: ScheduledTaskName): void;\n  protected abstract triggerTask(taskName: ScheduledTaskName, periodInMinutes?: number): void;\n}\n","import { Subscription } from \"rxjs\";\n\nimport { LogService } from \"../abstractions/log.service\";\nimport { ScheduledTaskName } from \"../scheduling/scheduled-task-name.enum\";\nimport { TaskSchedulerService } from \"../scheduling/task-scheduler.service\";\n\nexport class DefaultTaskSchedulerService extends TaskSchedulerService {\n  constructor(protected logService: LogService) {\n    super();\n\n    this.taskHandlers = new Map();\n  }\n\n  /**\n   * Sets a timeout and returns the timeout id.\n   *\n   * @param taskName - The name of the task. Unused in the base implementation.\n   * @param delayInMs - The delay in milliseconds.\n   */\n  setTimeout(taskName: ScheduledTaskName, delayInMs: number): Subscription {\n    this.validateRegisteredTask(taskName);\n\n    const timeoutHandle = globalThis.setTimeout(() => this.triggerTask(taskName), delayInMs);\n    return new Subscription(() => globalThis.clearTimeout(timeoutHandle));\n  }\n\n  /**\n   * Sets an interval and returns the interval id.\n   *\n   * @param taskName - The name of the task. Unused in the base implementation.\n   * @param intervalInMs - The interval in milliseconds.\n   * @param _initialDelayInMs - The initial delay in milliseconds. Unused in the base implementation.\n   */\n  setInterval(\n    taskName: ScheduledTaskName,\n    intervalInMs: number,\n    _initialDelayInMs?: number,\n  ): Subscription {\n    this.validateRegisteredTask(taskName);\n\n    const intervalHandle = globalThis.setInterval(() => this.triggerTask(taskName), intervalInMs);\n\n    return new Subscription(() => globalThis.clearInterval(intervalHandle));\n  }\n\n  /**\n   * Registers a task handler.\n   *\n   * @param taskName - The name of the task.\n   * @param handler - The task handler.\n   */\n  registerTaskHandler(taskName: ScheduledTaskName, handler: () => void) {\n    const existingHandler = this.taskHandlers.get(taskName);\n    if (existingHandler) {\n      this.logService.warning(`Task handler for ${taskName} already exists. Overwriting.`);\n      this.unregisterTaskHandler(taskName);\n    }\n\n    this.taskHandlers.set(taskName, handler);\n  }\n\n  /**\n   * Unregisters a task handler.\n   *\n   * @param taskName - The name of the task.\n   */\n  unregisterTaskHandler(taskName: ScheduledTaskName) {\n    this.taskHandlers.delete(taskName);\n  }\n\n  /**\n   * Triggers a task.\n   *\n   * @param taskName - The name of the task.\n   * @param _periodInMinutes - The period in minutes. Unused in the base implementation.\n   */\n  protected async triggerTask(\n    taskName: ScheduledTaskName,\n    _periodInMinutes?: number,\n  ): Promise<void> {\n    const handler = this.taskHandlers.get(taskName);\n    if (handler) {\n      handler();\n    }\n  }\n\n  /**\n   * Validates that a task handler is registered.\n   *\n   * @param taskName - The name of the task.\n   */\n  protected validateRegisteredTask(taskName: ScheduledTaskName): void {\n    if (!this.taskHandlers.has(taskName)) {\n      throw new Error(`Task handler for ${taskName} not registered. Unable to schedule task.`);\n    }\n  }\n}\n","export const ScheduledTaskNames = {\n  generatePasswordClearClipboardTimeout: \"generatePasswordClearClipboardTimeout\",\n  systemClearClipboardTimeout: \"systemClearClipboardTimeout\",\n  loginStrategySessionTimeout: \"loginStrategySessionTimeout\",\n  notificationsReconnectTimeout: \"notificationsReconnectTimeout\",\n  fido2ClientAbortTimeout: \"fido2ClientAbortTimeout\",\n  scheduleNextSyncInterval: \"scheduleNextSyncInterval\",\n  eventUploadsInterval: \"eventUploadsInterval\",\n  vaultTimeoutCheckInterval: \"vaultTimeoutCheckInterval\",\n} as const;\n\nexport type ScheduledTaskName = (typeof ScheduledTaskNames)[keyof typeof ScheduledTaskNames];\n","export enum TwoFactorProviderType {\n  Authenticator = 0,\n  Email = 1,\n  Duo = 2,\n  Yubikey = 3,\n  U2f = 4,\n  Remember = 5,\n  OrganizationDuo = 6,\n  WebAuthn = 7,\n}\n","/*\n * This enum is used to determine if a user should be forced to initially set or reset their password\n * on login (server flag) or unlock via MP (client evaluation).\n */\nexport enum ForceSetPasswordReason {\n  /**\n   * A password reset should not be forced.\n   */\n  None,\n\n  /**\n   * Occurs when an organization admin forces a user to reset their password.\n   * Communicated via server flag.\n   */\n  AdminForcePasswordReset,\n\n  /**\n   * Occurs when a user logs in / unlocks their vault with a master password that does not meet an organization's\n   * master password policy that is enforced on login/unlock.\n   * Only set client side b/c server can't evaluate MP.\n   */\n  WeakMasterPassword,\n\n  /**\n   * Occurs when a TDE user without a password obtains the password reset permission.\n   * Set post login & decryption client side and by server in sync (to catch logged in users).\n   */\n  TdeUserWithoutPasswordHasPasswordResetPermission,\n\n  /**\n   * Occurs when TDE is disabled and master password has to be set.\n   */\n  TdeOffboarding,\n}\n","export enum ClientType {\n  Web = \"web\",\n  Browser = \"browser\",\n  Desktop = \"desktop\",\n  // Mobile = \"mobile\",\n  Cli = \"cli\",\n  // DirectoryConnector = \"connector\",\n}\n","export enum DeviceType {\n  Android = 0,\n  iOS = 1,\n  ChromeExtension = 2,\n  FirefoxExtension = 3,\n  OperaExtension = 4,\n  EdgeExtension = 5,\n  WindowsDesktop = 6,\n  MacOsDesktop = 7,\n  LinuxDesktop = 8,\n  ChromeBrowser = 9,\n  FirefoxBrowser = 10,\n  OperaBrowser = 11,\n  EdgeBrowser = 12,\n  IEBrowser = 13,\n  UnknownBrowser = 14,\n  AndroidAmazon = 15,\n  UWP = 16,\n  SafariBrowser = 17,\n  VivaldiBrowser = 18,\n  VivaldiExtension = 19,\n  SafariExtension = 20,\n  SDK = 21,\n  Server = 22,\n  WindowsCLI = 23,\n  MacOsCLI = 24,\n  LinuxCLI = 25,\n}\n\nexport const MobileDeviceTypes: Set<DeviceType> = new Set([\n  DeviceType.Android,\n  DeviceType.iOS,\n  DeviceType.AndroidAmazon,\n]);\n\nexport const DesktopDeviceTypes: Set<DeviceType> = new Set([\n  DeviceType.WindowsDesktop,\n  DeviceType.MacOsDesktop,\n  DeviceType.LinuxDesktop,\n  DeviceType.UWP,\n  DeviceType.WindowsCLI,\n  DeviceType.MacOsCLI,\n  DeviceType.LinuxCLI,\n]);\n","import { Jsonify } from \"type-fest\";\n\nimport { DeviceType } from \"../../../../enums\";\nimport { PlatformUtilsService } from \"../../../../platform/abstractions/platform-utils.service\";\n\nexport class DeviceRequest {\n  type: DeviceType;\n  name: string;\n  identifier: string;\n  pushToken?: string;\n\n  constructor(appId: string, platformUtilsService: PlatformUtilsService) {\n    this.type = platformUtilsService.getDevice();\n    this.name = platformUtilsService.getDeviceString();\n    this.identifier = appId;\n    this.pushToken = null;\n  }\n\n  static fromJSON(json: Jsonify<DeviceRequest>) {\n    return Object.assign(Object.create(DeviceRequest.prototype), json);\n  }\n}\n","import { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\n\nexport abstract class TokenRequest {\n  protected device?: DeviceRequest;\n  protected authRequest: string;\n\n  constructor(\n    protected twoFactor?: TokenTwoFactorRequest,\n    device?: DeviceRequest,\n  ) {\n    this.device = device != null ? device : null;\n  }\n\n  // eslint-disable-next-line\n  alterIdentityTokenHeaders(headers: Headers) {\n    // Implemented in subclass if required\n  }\n\n  setTwoFactor(twoFactor: TokenTwoFactorRequest | undefined) {\n    this.twoFactor = twoFactor;\n  }\n\n  setAuthRequestAccessCode(accessCode: string) {\n    this.authRequest = accessCode;\n  }\n\n  protected toIdentityToken(clientId: string) {\n    const obj: any = {\n      scope: \"api offline_access\",\n      client_id: clientId,\n    };\n\n    if (this.device) {\n      obj.deviceType = this.device.type;\n      obj.deviceIdentifier = this.device.identifier;\n      obj.deviceName = this.device.name;\n      // no push tokens for browser apps yet\n      // obj.devicePushToken = this.device.pushToken;\n    }\n\n    //passswordless login\n    if (this.authRequest) {\n      obj.authRequest = this.authRequest;\n    }\n\n    if (this.twoFactor) {\n      if (this.twoFactor.token && this.twoFactor.provider != null) {\n        obj.twoFactorToken = this.twoFactor.token;\n        obj.twoFactorProvider = this.twoFactor.provider;\n        obj.twoFactorRemember = this.twoFactor.remember ? \"1\" : \"0\";\n      }\n    }\n\n    return obj;\n  }\n}\n","import { ClientType } from \"../../../../enums\";\nimport { Utils } from \"../../../../platform/misc/utils\";\nimport { CaptchaProtectedRequest } from \"../captcha-protected.request\";\n\nimport { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class PasswordTokenRequest extends TokenRequest implements CaptchaProtectedRequest {\n  constructor(\n    public email: string,\n    public masterPasswordHash: string,\n    public captchaResponse: string,\n    protected twoFactor: TokenTwoFactorRequest,\n    device?: DeviceRequest,\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: ClientType) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"password\";\n    obj.username = this.email;\n    obj.password = this.masterPasswordHash;\n\n    if (this.captchaResponse != null) {\n      obj.captchaResponse = this.captchaResponse;\n    }\n\n    return obj;\n  }\n\n  alterIdentityTokenHeaders(headers: Headers) {\n    headers.set(\"Auth-Email\", Utils.fromUtf8ToUrlB64(this.email));\n  }\n\n  static fromJSON(json: any) {\n    return Object.assign(Object.create(PasswordTokenRequest.prototype), json, {\n      device: json.device ? DeviceRequest.fromJSON(json.device) : undefined,\n      twoFactor: json.twoFactor\n        ? Object.assign(new TokenTwoFactorRequest(), json.twoFactor)\n        : undefined,\n    });\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class IdentityCaptchaResponse extends BaseResponse {\n  siteKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.siteKey = this.getResponseProperty(\"HCaptcha_SiteKey\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class MasterPasswordPolicyResponse extends BaseResponse {\n  minComplexity: number;\n  minLength: number;\n  requireUpper: boolean;\n  requireLower: boolean;\n  requireNumbers: boolean;\n  requireSpecial: boolean;\n\n  /**\n   * Flag to indicate if the policy should be enforced on login.\n   * If true, and the user's password does not meet the policy requirements,\n   * the user will be forced to update their password.\n   */\n  enforceOnLogin: boolean;\n\n  constructor(response: any) {\n    super(response);\n\n    this.minComplexity = this.getResponseProperty(\"MinComplexity\");\n    this.minLength = this.getResponseProperty(\"MinLength\");\n    this.requireUpper = this.getResponseProperty(\"RequireUpper\");\n    this.requireLower = this.getResponseProperty(\"RequireLower\");\n    this.requireNumbers = this.getResponseProperty(\"RequireNumbers\");\n    this.requireSpecial = this.getResponseProperty(\"RequireSpecial\");\n    this.enforceOnLogin = this.getResponseProperty(\"EnforceOnLogin\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport interface IKeyConnectorUserDecryptionOptionServerResponse {\n  KeyConnectorUrl: string;\n}\n\nexport class KeyConnectorUserDecryptionOptionResponse extends BaseResponse {\n  keyConnectorUrl: string;\n\n  constructor(response: IKeyConnectorUserDecryptionOptionServerResponse) {\n    super(response);\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\n\nexport interface ITrustedDeviceUserDecryptionOptionServerResponse {\n  HasAdminApproval: boolean;\n  HasLoginApprovingDevice: boolean;\n  HasManageResetPasswordPermission: boolean;\n  IsTdeOffboarding: boolean;\n  EncryptedPrivateKey?: string;\n  EncryptedUserKey?: string;\n}\n\nexport class TrustedDeviceUserDecryptionOptionResponse extends BaseResponse {\n  hasAdminApproval: boolean;\n  hasLoginApprovingDevice: boolean;\n  hasManageResetPasswordPermission: boolean;\n  isTdeOffboarding: boolean;\n  encryptedPrivateKey: EncString;\n  encryptedUserKey: EncString;\n\n  constructor(response: any) {\n    super(response);\n    this.hasAdminApproval = this.getResponseProperty(\"HasAdminApproval\");\n\n    this.hasLoginApprovingDevice = this.getResponseProperty(\"HasLoginApprovingDevice\");\n    this.hasManageResetPasswordPermission = this.getResponseProperty(\n      \"HasManageResetPasswordPermission\",\n    );\n\n    this.isTdeOffboarding = this.getResponseProperty(\"IsTdeOffboarding\");\n\n    if (response.EncryptedPrivateKey) {\n      this.encryptedPrivateKey = new EncString(this.getResponseProperty(\"EncryptedPrivateKey\"));\n    }\n    if (response.EncryptedUserKey) {\n      this.encryptedUserKey = new EncString(this.getResponseProperty(\"EncryptedUserKey\"));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\n\nexport interface IWebAuthnPrfDecryptionOptionServerResponse {\n  EncryptedPrivateKey: string;\n  EncryptedUserKey: string;\n}\n\nexport class WebAuthnPrfDecryptionOptionResponse extends BaseResponse {\n  encryptedPrivateKey: EncString;\n  encryptedUserKey: EncString;\n\n  constructor(response: IWebAuthnPrfDecryptionOptionServerResponse) {\n    super(response);\n    if (response.EncryptedPrivateKey) {\n      this.encryptedPrivateKey = new EncString(this.getResponseProperty(\"EncryptedPrivateKey\"));\n    }\n    if (response.EncryptedUserKey) {\n      this.encryptedUserKey = new EncString(this.getResponseProperty(\"EncryptedUserKey\"));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nimport {\n  IKeyConnectorUserDecryptionOptionServerResponse,\n  KeyConnectorUserDecryptionOptionResponse,\n} from \"./key-connector-user-decryption-option.response\";\nimport {\n  ITrustedDeviceUserDecryptionOptionServerResponse,\n  TrustedDeviceUserDecryptionOptionResponse,\n} from \"./trusted-device-user-decryption-option.response\";\nimport {\n  IWebAuthnPrfDecryptionOptionServerResponse,\n  WebAuthnPrfDecryptionOptionResponse,\n} from \"./webauthn-prf-decryption-option.response\";\n\nexport interface IUserDecryptionOptionsServerResponse {\n  HasMasterPassword: boolean;\n  TrustedDeviceOption?: ITrustedDeviceUserDecryptionOptionServerResponse;\n  KeyConnectorOption?: IKeyConnectorUserDecryptionOptionServerResponse;\n  WebAuthnPrfOption?: IWebAuthnPrfDecryptionOptionServerResponse;\n}\n\nexport class UserDecryptionOptionsResponse extends BaseResponse {\n  hasMasterPassword: boolean;\n  trustedDeviceOption?: TrustedDeviceUserDecryptionOptionResponse;\n  keyConnectorOption?: KeyConnectorUserDecryptionOptionResponse;\n  webAuthnPrfOption?: WebAuthnPrfDecryptionOptionResponse;\n\n  constructor(response: IUserDecryptionOptionsServerResponse) {\n    super(response);\n\n    this.hasMasterPassword = this.getResponseProperty(\"HasMasterPassword\");\n\n    if (response.TrustedDeviceOption) {\n      this.trustedDeviceOption = new TrustedDeviceUserDecryptionOptionResponse(\n        this.getResponseProperty(\"TrustedDeviceOption\"),\n      );\n    }\n    if (response.KeyConnectorOption) {\n      this.keyConnectorOption = new KeyConnectorUserDecryptionOptionResponse(\n        this.getResponseProperty(\"KeyConnectorOption\"),\n      );\n    }\n    if (response.WebAuthnPrfOption) {\n      this.webAuthnPrfOption = new WebAuthnPrfDecryptionOptionResponse(\n        this.getResponseProperty(\"WebAuthnPrfOption\"),\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { KdfType } from \"../../../platform/enums\";\n\nimport { MasterPasswordPolicyResponse } from \"./master-password-policy.response\";\nimport { UserDecryptionOptionsResponse } from \"./user-decryption-options/user-decryption-options.response\";\n\nexport class IdentityTokenResponse extends BaseResponse {\n  accessToken: string;\n  expiresIn: number;\n  refreshToken: string;\n  tokenType: string;\n\n  resetMasterPassword: boolean;\n  privateKey: string;\n  key: string;\n  twoFactorToken: string;\n  kdf: KdfType;\n  kdfIterations: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n  forcePasswordReset: boolean;\n  masterPasswordPolicy: MasterPasswordPolicyResponse;\n  apiUseKeyConnector: boolean;\n  keyConnectorUrl: string;\n\n  userDecryptionOptions: UserDecryptionOptionsResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.accessToken = response.access_token;\n    this.expiresIn = response.expires_in;\n    this.refreshToken = response.refresh_token;\n    this.tokenType = response.token_type;\n\n    this.resetMasterPassword = this.getResponseProperty(\"ResetMasterPassword\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.twoFactorToken = this.getResponseProperty(\"TwoFactorToken\");\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.kdfMemory = this.getResponseProperty(\"KdfMemory\");\n    this.kdfParallelism = this.getResponseProperty(\"KdfParallelism\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\");\n    this.apiUseKeyConnector = this.getResponseProperty(\"ApiUseKeyConnector\");\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    this.masterPasswordPolicy = new MasterPasswordPolicyResponse(\n      this.getResponseProperty(\"MasterPasswordPolicy\"),\n    );\n\n    if (response.UserDecryptionOptions) {\n      this.userDecryptionOptions = new UserDecryptionOptionsResponse(\n        this.getResponseProperty(\"UserDecryptionOptions\"),\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { TwoFactorProviderType } from \"../../enums/two-factor-provider-type\";\n\nimport { MasterPasswordPolicyResponse } from \"./master-password-policy.response\";\n\nexport class IdentityTwoFactorResponse extends BaseResponse {\n  // contains available two-factor providers\n  twoFactorProviders: TwoFactorProviderType[];\n  // a map of two-factor providers to necessary data for completion\n  twoFactorProviders2: Record<TwoFactorProviderType, Record<string, string>>;\n  captchaToken: string;\n  ssoEmail2faSessionToken: string;\n  email?: string;\n  masterPasswordPolicy?: MasterPasswordPolicyResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaToken = this.getResponseProperty(\"CaptchaBypassToken\");\n    this.twoFactorProviders = this.getResponseProperty(\"TwoFactorProviders\");\n    this.twoFactorProviders2 = this.getResponseProperty(\"TwoFactorProviders2\");\n    this.masterPasswordPolicy = new MasterPasswordPolicyResponse(\n      this.getResponseProperty(\"MasterPasswordPolicy\"),\n    );\n\n    this.ssoEmail2faSessionToken = this.getResponseProperty(\"SsoEmail2faSessionToken\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","// Note: the enum key is used to describe the EventSystemUser in the UI. Be careful about changing it.\nexport enum EventSystemUser {\n  SCIM = 1,\n  DomainVerification = 2,\n  PublicApi = 3,\n}\n","// Increment by 100 for each new set of events\nexport enum EventType {\n  User_LoggedIn = 1000,\n  User_ChangedPassword = 1001,\n  User_Updated2fa = 1002,\n  User_Disabled2fa = 1003,\n  User_Recovered2fa = 1004,\n  User_FailedLogIn = 1005,\n  User_FailedLogIn2fa = 1006,\n  User_ClientExportedVault = 1007,\n  User_UpdatedTempPassword = 1008,\n  User_MigratedKeyToKeyConnector = 1009,\n  User_RequestedDeviceApproval = 1010,\n  User_TdeOffboardingPasswordSet = 1011,\n\n  Cipher_Created = 1100,\n  Cipher_Updated = 1101,\n  Cipher_Deleted = 1102,\n  Cipher_AttachmentCreated = 1103,\n  Cipher_AttachmentDeleted = 1104,\n  Cipher_Shared = 1105,\n  Cipher_UpdatedCollections = 1106,\n  Cipher_ClientViewed = 1107,\n  Cipher_ClientToggledPasswordVisible = 1108,\n  Cipher_ClientToggledHiddenFieldVisible = 1109,\n  Cipher_ClientToggledCardCodeVisible = 1110,\n  Cipher_ClientCopiedPassword = 1111,\n  Cipher_ClientCopiedHiddenField = 1112,\n  Cipher_ClientCopiedCardCode = 1113,\n  Cipher_ClientAutofilled = 1114,\n  Cipher_SoftDeleted = 1115,\n  Cipher_Restored = 1116,\n  Cipher_ClientToggledCardNumberVisible = 1117,\n  Cipher_ClientToggledTOTPSeedVisible = 1118,\n\n  Collection_Created = 1300,\n  Collection_Updated = 1301,\n  Collection_Deleted = 1302,\n\n  Group_Created = 1400,\n  Group_Updated = 1401,\n  Group_Deleted = 1402,\n\n  OrganizationUser_Invited = 1500,\n  OrganizationUser_Confirmed = 1501,\n  OrganizationUser_Updated = 1502,\n  OrganizationUser_Removed = 1503,\n  OrganizationUser_UpdatedGroups = 1504,\n  OrganizationUser_UnlinkedSso = 1505,\n  OrganizationUser_ResetPassword_Enroll = 1506,\n  OrganizationUser_ResetPassword_Withdraw = 1507,\n  OrganizationUser_AdminResetPassword = 1508,\n  OrganizationUser_ResetSsoLink = 1509,\n  OrganizationUser_FirstSsoLogin = 1510,\n  OrganizationUser_Revoked = 1511,\n  OrganizationUser_Restored = 1512,\n  OrganizationUser_ApprovedAuthRequest = 1513,\n  OrganizationUser_RejectedAuthRequest = 1514,\n\n  Organization_Updated = 1600,\n  Organization_PurgedVault = 1601,\n  Organization_ClientExportedVault = 1602,\n  Organization_VaultAccessed = 1603,\n  Organization_EnabledSso = 1604,\n  Organization_DisabledSso = 1605,\n  Organization_EnabledKeyConnector = 1606,\n  Organization_DisabledKeyConnector = 1607,\n  Organization_SponsorshipsSynced = 1608,\n  Organization_CollectionManagementUpdated = 1609,\n\n  Policy_Updated = 1700,\n\n  ProviderUser_Invited = 1800,\n  ProviderUser_Confirmed = 1801,\n  ProviderUser_Updated = 1802,\n  ProviderUser_Removed = 1803,\n\n  ProviderOrganization_Created = 1900,\n  ProviderOrganization_Added = 1901,\n  ProviderOrganization_Removed = 1902,\n  ProviderOrganization_VaultAccessed = 1903,\n\n  OrganizationDomain_Added = 2000,\n  OrganizationDomain_Removed = 2001,\n  OrganizationDomain_Verified = 2002,\n  OrganizationDomain_NotVerified = 2003,\n\n  Secret_Retrieved = 2100,\n}\n","/**\n * Hypertext Transfer Protocol (HTTP) response status codes.\n *\n * @see {@link https://en.wikipedia.org/wiki/List_of_HTTP_status_codes}\n * src: https://gist.github.com/RWOverdijk/6cef816cfdf5722228e01cc05fd4b094\n */\nexport enum HttpStatusCode {\n  /**\n   * The server has received the request headers and the client should proceed to send the request body\n   * (in the case of a request for which a body needs to be sent; for example, a POST request).\n   * Sending a large request body to a server after a request has been rejected for inappropriate headers would be inefficient.\n   * To have a server check the request's headers, a client must send Expect: 100-continue as a header in its initial request\n   * and receive a 100 Continue status code in response before sending the body. The response 417 Expectation Failed indicates the request should not be continued.\n   */\n  Continue = 100,\n\n  /**\n   * The requester has asked the server to switch protocols and the server has agreed to do so.\n   */\n  SwitchingProtocols = 101,\n\n  /**\n   * A WebDAV request may contain many sub-requests involving file operations, requiring a long time to complete the request.\n   * This code indicates that the server has received and is processing the request, but no response is available yet.\n   * This prevents the client from timing out and assuming the request was lost.\n   */\n  Processing = 102,\n\n  // **********************************************************************************************************\n  // 200s - SUCCESS\n  // **********************************************************************************************************\n\n  /**\n   * Standard response for successful HTTP requests.\n   * The actual response will depend on the request method used.\n   * In a GET request, the response will contain an entity corresponding to the requested resource.\n   * In a POST request, the response will contain an entity describing or containing the result of the action.\n   */\n  Ok = 200,\n\n  /**\n   * The request has been fulfilled, resulting in the creation of a new resource.\n   */\n  Created = 201,\n\n  /**\n   * The request has been accepted for processing, but the processing has not been completed.\n   * The request might or might not be eventually acted upon, and may be disallowed when processing occurs.\n   */\n  Accepted = 202,\n\n  /**\n   * SINCE HTTP/1.1\n   * The server is a transforming proxy that received a 200 OK from its origin,\n   * but is returning a modified version of the origin's response.\n   */\n  NonAuthoritativeInformation = 203,\n\n  /**\n   * The server successfully processed the request and is not returning any content.\n   */\n  NoContent = 204,\n\n  /**\n   * The server successfully processed the request, but is not returning any content.\n   * Unlike a 204 response, this response requires that the requester reset the document view.\n   */\n  ResetContent = 205,\n\n  /**\n   * The server is delivering only part of the resource (byte serving) due to a range header sent by the client.\n   * The range header is used by HTTP clients to enable resuming of interrupted downloads,\n   * or split a download into multiple simultaneous streams.\n   */\n  PartialContent = 206,\n\n  /**\n   * The message body that follows is an XML message and can contain a number of separate response codes,\n   * depending on how many sub-requests were made.\n   */\n  MultiStatus = 207,\n\n  /**\n   * The members of a DAV binding have already been enumerated in a preceding part of the (multistatus) response,\n   * and are not being included again.\n   */\n  AlreadyReported = 208,\n\n  /**\n   * The server has fulfilled a request for the resource,\n   * and the response is a representation of the result of one or more instance-manipulations applied to the current instance.\n   */\n  ImUsed = 226,\n\n  // **********************************************************************************************************\n  // 300s - Redirections\n  // **********************************************************************************************************\n\n  /**\n   * Indicates multiple options for the resource from which the client may choose (via agent-driven content negotiation).\n   * For example, this code could be used to present multiple video format options,\n   * to list files with different filename extensions, or to suggest word-sense disambiguation.\n   */\n  MultipleChoices = 300,\n\n  /**\n   * This and all future requests should be directed to the given URI.\n   */\n  MovedPermanently = 301,\n\n  /**\n   * This is an example of industry practice contradicting the standard.\n   * The HTTP/1.0 specification (RFC 1945) required the client to perform a temporary redirect\n   * (the original describing phrase was \"Moved Temporarily\"), but popular browsers implemented 302\n   * with the functionality of a 303 See Other. Therefore, HTTP/1.1 added status codes 303 and 307\n   * to distinguish between the two behaviours. However, some Web applications and frameworks\n   * use the 302 status code as if it were the 303.\n   */\n  Found = 302,\n\n  /**\n   * SINCE HTTP/1.1\n   * The response to the request can be found under another URI using a GET method.\n   * When received in response to a POST (or PUT/DELETE), the client should presume that\n   * the server has received the data and should issue a redirect with a separate GET message.\n   */\n  SeeOther = 303,\n\n  /**\n   * Indicates that the resource has not been modified since the version specified by the request headers If-Modified-Since or If-None-Match.\n   * In such case, there is no need to retransmit the resource since the client still has a previously-downloaded copy.\n   */\n  NotModified = 304,\n\n  /**\n   * SINCE HTTP/1.1\n   * The requested resource is available only through a proxy, the address for which is provided in the response.\n   * Many HTTP clients (such as Mozilla and Internet Explorer) do not correctly handle responses with this status code, primarily for security reasons.\n   */\n  UseProxy = 305,\n\n  /**\n   * No longer used. Originally meant \"Subsequent requests should use the specified proxy.\"\n   */\n  SwitchProxy = 306,\n\n  /**\n   * SINCE HTTP/1.1\n   * In this case, the request should be repeated with another URI; however, future requests should still use the original URI.\n   * In contrast to how 302 was historically implemented, the request method is not allowed to be changed when reissuing the original request.\n   * For example, a POST request should be repeated using another POST request.\n   */\n  TemporaryRedirect = 307,\n\n  /**\n   * The request and all future requests should be repeated using another URI.\n   * 307 and 308 parallel the behaviors of 302 and 301, but do not allow the HTTP method to change.\n   * So, for example, submitting a form to a permanently redirected resource may continue smoothly.\n   */\n  PermanentRedirect = 308,\n\n  // **********************************************************************************************************\n  // 400s - Client / User messed up\n  // **********************************************************************************************************\n\n  /**\n   * The server cannot or will not process the request due to an apparent client error\n   * (e.g., malformed request syntax, too large size, invalid request message framing, or deceptive request routing).\n   */\n  BadRequest = 400,\n\n  /**\n   * Similar to 403 Forbidden, but specifically for use when authentication is required and has failed or has not yet\n   * been provided. The response must include a WWW-Authenticate header field containing a challenge applicable to the\n   * requested resource. See Basic access authentication and Digest access authentication. 401 semantically means\n   * \"unauthenticated\",i.e. the user does not have the necessary credentials.\n   */\n  Unauthorized = 401,\n\n  /**\n   * Reserved for future use. The original intention was that this code might be used as part of some form of digital\n   * cash or micro payment scheme, but that has not happened, and this code is not usually used.\n   * Google Developers API uses this status if a particular developer has exceeded the daily limit on requests.\n   */\n  PaymentRequired = 402,\n\n  /**\n   * The request was valid, but the server is refusing action.\n   * The user might not have the necessary permissions for a resource.\n   */\n  Forbidden = 403,\n\n  /**\n   * The requested resource could not be found but may be available in the future.\n   * Subsequent requests by the client are permissible.\n   */\n  NotFound = 404,\n\n  /**\n   * A request method is not supported for the requested resource;\n   * for example, a GET request on a form that requires data to be presented via POST, or a PUT request on a read-only resource.\n   */\n  MethodNotAllowed = 405,\n\n  /**\n   * The requested resource is capable of generating only content not acceptable according to the Accept headers sent in the request.\n   */\n  NotAcceptable = 406,\n\n  /**\n   * The client must first authenticate itself with the proxy.\n   */\n  ProxyAuthenticationRequired = 407,\n\n  /**\n   * The server timed out waiting for the request.\n   * According to HTTP specifications:\n   * \"The client did not produce a request within the time that the server was prepared to wait. The client MAY repeat the request without modifications at any later time.\"\n   */\n  RequestTimeout = 408,\n\n  /**\n   * Indicates that the request could not be processed because of conflict in the request,\n   * such as an edit conflict between multiple simultaneous updates.\n   */\n  Conflict = 409,\n\n  /**\n   * Indicates that the resource requested is no longer available and will not be available again.\n   * This should be used when a resource has been intentionally removed and the resource should be purged.\n   * Upon receiving a 410 status code, the client should not request the resource in the future.\n   * Clients such as search engines should remove the resource from their indices.\n   * Most use cases do not require clients and search engines to purge the resource, and a \"404 Not Found\" may be used instead.\n   */\n  Gone = 410,\n\n  /**\n   * The request did not specify the length of its content, which is required by the requested resource.\n   */\n  LengthRequired = 411,\n\n  /**\n   * The server does not meet one of the preconditions that the requester put on the request.\n   */\n  PreconditionFailed = 412,\n\n  /**\n   * The request is larger than the server is willing or able to process. Previously called \"Request Entity Too Large\".\n   */\n  PayloadTooLarge = 413,\n\n  /**\n   * The URI provided was too long for the server to process. Often the result of too much data being encoded as a query-string of a GET request,\n   * in which case it should be converted to a POST request.\n   * Called \"Request-URI Too Long\" previously.\n   */\n  UriTooLong = 414,\n\n  /**\n   * The request entity has a media type which the server or resource does not support.\n   * For example, the client uploads an image as image/svg+xml, but the server requires that images use a different format.\n   */\n  UnsupportedMediaType = 415,\n\n  /**\n   * The client has asked for a portion of the file (byte serving), but the server cannot supply that portion.\n   * For example, if the client asked for a part of the file that lies beyond the end of the file.\n   * Called \"Requested Range Not Satisfiable\" previously.\n   */\n  RangeNotSatisfiable = 416,\n\n  /**\n   * The server cannot meet the requirements of the Expect request-header field.\n   */\n  ExpectationFailed = 417,\n\n  /**\n   * This code was defined in 1998 as one of the traditional IETF April Fools' jokes, in RFC 2324, Hyper Text Coffee Pot Control Protocol,\n   * and is not expected to be implemented by actual HTTP servers. The RFC specifies this code should be returned by\n   * teapots requested to brew coffee. This HTTP status is used as an Easter egg in some websites, including Google.com.\n   */\n  IAmATeapot = 418,\n\n  /**\n   * The request was directed at a server that is not able to produce a response (for example because a connection reuse).\n   */\n  MisdirectedRequest = 421,\n\n  /**\n   * The request was well-formed but was unable to be followed due to semantic errors.\n   */\n  UnprocessableEntity = 422,\n\n  /**\n   * The resource that is being accessed is locked.\n   */\n  Locked = 423,\n\n  /**\n   * The request failed due to failure of a previous request (e.g., a PROPPATCH).\n   */\n  FailedDependency = 424,\n\n  /**\n   * The client should switch to a different protocol such as TLS/1.0, given in the Upgrade header field.\n   */\n  UpgradeRequired = 426,\n\n  /**\n   * The origin server requires the request to be conditional.\n   * Intended to prevent \"the 'lost update' problem, where a client\n   * GETs a resource's state, modifies it, and PUTs it back to the server,\n   * when meanwhile a third party has modified the state on the server, leading to a conflict.\"\n   */\n  PreconditionRequired = 428,\n\n  /**\n   * The user has sent too many requests in a given amount of time. Intended for use with rate-limiting schemes.\n   */\n  TooManyRequests = 429,\n\n  /**\n   * The server is unwilling to process the request because either an individual header field,\n   * or all the header fields collectively, are too large.\n   */\n  RequestHeaderFieldsTooLarge = 431,\n\n  /**\n   * A server operator has received a legal demand to deny access to a resource or to a set of resources\n   * that includes the requested resource. The code 451 was chosen as a reference to the novel Fahrenheit 451.\n   */\n  UnavailableForLegalReasons = 451,\n\n  // **********************************************************************************************************\n  // 500s - Server messed up\n  // **********************************************************************************************************\n\n  /**\n   * A generic error message, given when an unexpected condition was encountered and no more specific message is suitable.\n   */\n  InternalServerError = 500,\n\n  /**\n   * The server either does not recognize the request method, or it lacks the ability to fulfill the request.\n   * Usually this implies future availability (e.g., a new feature of a web-service API).\n   */\n  NotImplemented = 501,\n\n  /**\n   * The server was acting as a gateway or proxy and received an invalid response from the upstream server.\n   */\n  BadGateway = 502,\n\n  /**\n   * The server is currently unavailable (because it is overloaded or down for maintenance).\n   * Generally, this is a temporary state.\n   */\n  ServiceUnavailable = 503,\n\n  /**\n   * The server was acting as a gateway or proxy and did not receive a timely response from the upstream server.\n   */\n  GatewayTimeout = 504,\n\n  /**\n   * The server does not support the HTTP protocol version used in the request\n   */\n  HttpVersionNotSupported = 505,\n\n  /**\n   * Transparent content negotiation for the request results in a circular reference.\n   */\n  VariantAlsoNegotiates = 506,\n\n  /**\n   * The server is unable to store the representation needed to complete the request.\n   */\n  InsufficientStorage = 507,\n\n  /**\n   * The server detected an infinite loop while processing the request.\n   */\n  LoopDetected = 508,\n\n  /**\n   * Further extensions to the request are required for the server to fulfill it.\n   */\n  NotExtended = 510,\n\n  /**\n   * The client needs to authenticate to gain network access.\n   * Intended for use by intercepting proxies used to control access to the network (e.g., \"captive portals\" used\n   * to require agreement to Terms of Service before granting full Internet access via a Wi-Fi hotspot).\n   */\n  NetworkAuthenticationRequired = 511,\n}\n","export enum IntegrationType {\n  Integration = \"integration\",\n  SDK = \"sdk\",\n}\n","export enum NativeMessagingVersion {\n  One = 1, // Original implementation\n  Latest = One,\n}\n","export enum NotificationType {\n  SyncCipherUpdate = 0,\n  SyncCipherCreate = 1,\n  SyncLoginDelete = 2,\n  SyncFolderDelete = 3,\n  SyncCiphers = 4,\n\n  SyncVault = 5,\n  SyncOrgKeys = 6,\n  SyncFolderCreate = 7,\n  SyncFolderUpdate = 8,\n  SyncCipherDelete = 9,\n  SyncSettings = 10,\n\n  LogOut = 11,\n\n  SyncSendCreate = 12,\n  SyncSendUpdate = 13,\n  SyncSendDelete = 14,\n\n  AuthRequest = 15,\n  AuthRequestResponse = 16,\n\n  SyncOrganizations = 17,\n}\n","export class KeysRequest {\n  publicKey: string;\n  encryptedPrivateKey: string;\n\n  constructor(publicKey: string, encryptedPrivateKey: string) {\n    this.publicKey = publicKey;\n    this.encryptedPrivateKey = encryptedPrivateKey;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { DeepJsonify } from \"../../../types/deep-jsonify\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { SymmetricCryptoKey } from \"./symmetric-crypto-key\";\n\nexport class EncryptionPair<TEncrypted, TDecrypted> {\n  encrypted?: TEncrypted;\n  decrypted?: TDecrypted;\n\n  toJSON() {\n    return {\n      encrypted: this.encrypted,\n      decrypted:\n        this.decrypted instanceof ArrayBuffer\n          ? Utils.fromBufferToByteString(this.decrypted)\n          : this.decrypted,\n    };\n  }\n\n  static fromJSON<TEncrypted, TDecrypted>(\n    obj: { encrypted?: Jsonify<TEncrypted>; decrypted?: string | Jsonify<TDecrypted> },\n    decryptedFromJson?: (decObj: Jsonify<TDecrypted> | string) => TDecrypted,\n    encryptedFromJson?: (encObj: Jsonify<TEncrypted>) => TEncrypted,\n  ) {\n    if (obj == null) {\n      return null;\n    }\n\n    const pair = new EncryptionPair<TEncrypted, TDecrypted>();\n    if (obj?.encrypted != null) {\n      pair.encrypted = encryptedFromJson\n        ? encryptedFromJson(obj.encrypted)\n        : (obj.encrypted as TEncrypted);\n    }\n    if (obj?.decrypted != null) {\n      pair.decrypted = decryptedFromJson\n        ? decryptedFromJson(obj.decrypted)\n        : (obj.decrypted as TDecrypted);\n    }\n    return pair;\n  }\n}\n\nexport class AccountKeys {\n  publicKey?: Uint8Array;\n\n  /** @deprecated July 2023, left for migration purposes*/\n  cryptoMasterKeyAuto?: string;\n  /** @deprecated July 2023, left for migration purposes*/\n  cryptoSymmetricKey?: EncryptionPair<string, SymmetricCryptoKey> = new EncryptionPair<\n    string,\n    SymmetricCryptoKey\n  >();\n\n  toJSON() {\n    // If you pass undefined into fromBufferToByteString, you will get an empty string back\n    // which will cause all sorts of headaches down the line when you try to getPublicKey\n    // and expect a Uint8Array and get an empty string instead.\n    return Utils.merge(this, {\n      publicKey: this.publicKey ? Utils.fromBufferToByteString(this.publicKey) : undefined,\n    });\n  }\n\n  static fromJSON(obj: DeepJsonify<AccountKeys>): AccountKeys {\n    if (obj == null) {\n      return null;\n    }\n    return Object.assign(new AccountKeys(), obj, {\n      cryptoSymmetricKey: EncryptionPair.fromJSON(\n        obj?.cryptoSymmetricKey,\n        SymmetricCryptoKey.fromJSON,\n      ),\n      publicKey: Utils.fromByteStringToArray(obj?.publicKey),\n    });\n  }\n\n  static initRecordEncryptionPairsFromJSON(obj: any) {\n    return EncryptionPair.fromJSON(obj, (decObj: any) => {\n      if (obj == null) {\n        return null;\n      }\n\n      const record: Record<string, SymmetricCryptoKey> = {};\n      for (const id in decObj) {\n        record[id] = SymmetricCryptoKey.fromJSON(decObj[id]);\n      }\n      return record;\n    });\n  }\n}\n\nexport class AccountProfile {\n  name?: string;\n  email?: string;\n  emailVerified?: boolean;\n  userId?: string;\n\n  static fromJSON(obj: Jsonify<AccountProfile>): AccountProfile {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new AccountProfile(), obj);\n  }\n}\n\nexport class Account {\n  keys?: AccountKeys = new AccountKeys();\n  profile?: AccountProfile = new AccountProfile();\n\n  constructor(init: Partial<Account>) {\n    Object.assign(this, {\n      keys: {\n        ...new AccountKeys(),\n        ...init?.keys,\n      },\n      profile: {\n        ...new AccountProfile(),\n        ...init?.profile,\n      },\n    });\n  }\n\n  static fromJSON(json: Jsonify<Account>): Account {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new Account({}), json, {\n      keys: AccountKeys.fromJSON(json?.keys),\n      profile: AccountProfile.fromJSON(json?.profile),\n    });\n  }\n}\n","import { firstValueFrom, Observable, map, BehaviorSubject } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { DeviceTrustServiceAbstraction } from \"@bitwarden/common/auth/abstractions/device-trust.service.abstraction\";\nimport { AuthResult } from \"@bitwarden/common/auth/models/domain/auth-result\";\nimport { PasswordTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/password-token.request\";\nimport { TokenTwoFactorRequest } from \"@bitwarden/common/auth/models/request/identity-token/token-two-factor.request\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { AuthRequestLoginCredentials } from \"../models/domain/login-credentials\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\nimport { LoginStrategy, LoginStrategyData } from \"./login.strategy\";\n\nexport class AuthRequestLoginStrategyData implements LoginStrategyData {\n  tokenRequest: PasswordTokenRequest;\n  captchaBypassToken: string;\n  authRequestCredentials: AuthRequestLoginCredentials;\n\n  static fromJSON(obj: Jsonify<AuthRequestLoginStrategyData>): AuthRequestLoginStrategyData {\n    const data = Object.assign(new AuthRequestLoginStrategyData(), obj, {\n      tokenRequest: PasswordTokenRequest.fromJSON(obj.tokenRequest),\n      authRequestCredentials: AuthRequestLoginCredentials.fromJSON(obj.authRequestCredentials),\n    });\n    return data;\n  }\n}\n\nexport class AuthRequestLoginStrategy extends LoginStrategy {\n  email$: Observable<string>;\n  accessCode$: Observable<string>;\n  authRequestId$: Observable<string>;\n\n  protected cache: BehaviorSubject<AuthRequestLoginStrategyData>;\n\n  constructor(\n    data: AuthRequestLoginStrategyData,\n    private deviceTrustService: DeviceTrustServiceAbstraction,\n    ...sharedDeps: ConstructorParameters<typeof LoginStrategy>\n  ) {\n    super(...sharedDeps);\n\n    this.cache = new BehaviorSubject(data);\n    this.email$ = this.cache.pipe(map((data) => data.tokenRequest.email));\n    this.accessCode$ = this.cache.pipe(map((data) => data.authRequestCredentials.accessCode));\n    this.authRequestId$ = this.cache.pipe(map((data) => data.authRequestCredentials.authRequestId));\n  }\n\n  override async logIn(credentials: AuthRequestLoginCredentials) {\n    const data = new AuthRequestLoginStrategyData();\n    data.tokenRequest = new PasswordTokenRequest(\n      credentials.email,\n      credentials.accessCode,\n      null,\n      await this.buildTwoFactor(credentials.twoFactor, credentials.email),\n      await this.buildDeviceRequest(),\n    );\n    data.tokenRequest.setAuthRequestAccessCode(credentials.authRequestId);\n    data.authRequestCredentials = credentials;\n    this.cache.next(data);\n\n    const [authResult] = await this.startLogIn();\n    return authResult;\n  }\n\n  override async logInTwoFactor(\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string,\n  ): Promise<AuthResult> {\n    const data = this.cache.value;\n    data.tokenRequest.captchaResponse = captchaResponse ?? data.captchaBypassToken;\n    this.cache.next(data);\n\n    return super.logInTwoFactor(twoFactor);\n  }\n\n  protected override async setMasterKey(response: IdentityTokenResponse, userId: UserId) {\n    const authRequestCredentials = this.cache.value.authRequestCredentials;\n    if (\n      authRequestCredentials.decryptedMasterKey &&\n      authRequestCredentials.decryptedMasterKeyHash\n    ) {\n      await this.masterPasswordService.setMasterKey(\n        authRequestCredentials.decryptedMasterKey,\n        userId,\n      );\n      await this.masterPasswordService.setMasterKeyHash(\n        authRequestCredentials.decryptedMasterKeyHash,\n        userId,\n      );\n    }\n  }\n\n  protected override async setUserKey(\n    response: IdentityTokenResponse,\n    userId: UserId,\n  ): Promise<void> {\n    const authRequestCredentials = this.cache.value.authRequestCredentials;\n    // User now may or may not have a master password\n    // but set the master key encrypted user key if it exists regardless\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key, userId);\n\n    if (authRequestCredentials.decryptedUserKey) {\n      await this.cryptoService.setUserKey(authRequestCredentials.decryptedUserKey, userId);\n    } else {\n      await this.trySetUserKeyWithMasterKey(userId);\n\n      // Establish trust if required after setting user key\n      await this.deviceTrustService.trustDeviceIfRequired(userId);\n    }\n  }\n\n  private async trySetUserKeyWithMasterKey(userId: UserId): Promise<void> {\n    const masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n    if (masterKey) {\n      const userKey = await this.masterPasswordService.decryptUserKeyWithMasterKey(masterKey);\n      await this.cryptoService.setUserKey(userKey, userId);\n    }\n  }\n\n  protected override async setPrivateKey(\n    response: IdentityTokenResponse,\n    userId: UserId,\n  ): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount(userId)),\n      userId,\n    );\n  }\n\n  exportCache(): CacheData {\n    return {\n      authRequest: this.cache.value,\n    };\n  }\n}\n","import { View } from \"../../../models/view/view\";\n\nimport { EncString } from \"./enc-string\";\nimport { SymmetricCryptoKey } from \"./symmetric-crypto-key\";\n\n// https://contributing.bitwarden.com/architecture/clients/data-model#domain\nexport default class Domain {\n  protected buildDomainModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncList: any[] = [],\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = dataObj[map[prop] || prop];\n      if (notEncList.indexOf(prop) > -1) {\n        (domain as any)[prop] = objProp ? objProp : null;\n      } else {\n        (domain as any)[prop] = objProp ? new EncString(objProp) : null;\n      }\n    }\n  }\n  protected buildDataModel<D extends Domain>(\n    domain: D,\n    dataObj: any,\n    map: any,\n    notEncStringList: any[] = [],\n  ) {\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      const objProp = (domain as any)[map[prop] || prop];\n      if (notEncStringList.indexOf(prop) > -1) {\n        (dataObj as any)[prop] = objProp != null ? objProp : null;\n      } else {\n        (dataObj as any)[prop] = objProp != null ? (objProp as EncString).encryptedString : null;\n      }\n    }\n  }\n\n  protected async decryptObj<T extends View>(\n    viewModel: T,\n    map: any,\n    orgId: string,\n    key: SymmetricCryptoKey = null,\n  ): Promise<T> {\n    const promises = [];\n    const self: any = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp) {\n        const p = Promise.resolve()\n          .then(() => {\n            const mapProp = map[theProp] || theProp;\n            if (self[mapProp]) {\n              return self[mapProp].decrypt(orgId, key);\n            }\n            return null;\n          })\n          .then((val: any) => {\n            (viewModel as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop);\n    }\n\n    await Promise.all(promises);\n    return viewModel;\n  }\n}\n","import { MasterPasswordPolicyResponse } from \"../../../auth/models/response/master-password-policy.response\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\n\nexport class MasterPasswordPolicyOptions extends Domain {\n  minComplexity = 0;\n  minLength = 0;\n  requireUpper = false;\n  requireLower = false;\n  requireNumbers = false;\n  requireSpecial = false;\n\n  /**\n   * Flag to indicate if the policy should be enforced on login.\n   * If true, and the user's password does not meet the policy requirements,\n   * the user will be forced to update their password.\n   */\n  enforceOnLogin = false;\n\n  static fromResponse(policy: MasterPasswordPolicyResponse): MasterPasswordPolicyOptions {\n    if (policy == null) {\n      return null;\n    }\n    const options = new MasterPasswordPolicyOptions();\n    options.minComplexity = policy.minComplexity;\n    options.minLength = policy.minLength;\n    options.requireUpper = policy.requireUpper;\n    options.requireLower = policy.requireLower;\n    options.requireNumbers = policy.requireNumbers;\n    options.requireSpecial = policy.requireSpecial;\n    options.enforceOnLogin = policy.enforceOnLogin;\n    return options;\n  }\n}\n","import { BehaviorSubject, firstValueFrom, map, Observable } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { MasterPasswordPolicyOptions } from \"@bitwarden/common/admin-console/models/domain/master-password-policy-options\";\nimport { AuthResult } from \"@bitwarden/common/auth/models/domain/auth-result\";\nimport { ForceSetPasswordReason } from \"@bitwarden/common/auth/models/domain/force-set-password-reason\";\nimport { PasswordTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/password-token.request\";\nimport { TokenTwoFactorRequest } from \"@bitwarden/common/auth/models/request/identity-token/token-two-factor.request\";\nimport { IdentityCaptchaResponse } from \"@bitwarden/common/auth/models/response/identity-captcha.response\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { IdentityTwoFactorResponse } from \"@bitwarden/common/auth/models/response/identity-two-factor.response\";\nimport { HashPurpose } from \"@bitwarden/common/platform/enums\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { PasswordStrengthServiceAbstraction } from \"@bitwarden/common/tools/password-strength\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { MasterKey } from \"@bitwarden/common/types/key\";\n\nimport { LoginStrategyServiceAbstraction } from \"../abstractions\";\nimport { PasswordLoginCredentials } from \"../models/domain/login-credentials\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\nimport { LoginStrategy, LoginStrategyData } from \"./login.strategy\";\n\nexport class PasswordLoginStrategyData implements LoginStrategyData {\n  tokenRequest: PasswordTokenRequest;\n\n  /** User's entered email obtained pre-login. Always present in MP login. */\n  userEnteredEmail: string;\n  /** If 2fa is required, token is returned to bypass captcha */\n  captchaBypassToken?: string;\n  /** The local version of the user's master key hash */\n  localMasterKeyHash: string;\n  /** The user's master key */\n  masterKey: MasterKey;\n  /**\n   * Tracks if the user needs to update their password due to\n   * a password that does not meet an organization's master password policy.\n   */\n  forcePasswordResetReason: ForceSetPasswordReason = ForceSetPasswordReason.None;\n\n  static fromJSON(obj: Jsonify<PasswordLoginStrategyData>): PasswordLoginStrategyData {\n    const data = Object.assign(new PasswordLoginStrategyData(), obj, {\n      tokenRequest: PasswordTokenRequest.fromJSON(obj.tokenRequest),\n      masterKey: SymmetricCryptoKey.fromJSON(obj.masterKey),\n    });\n    return data;\n  }\n}\n\nexport class PasswordLoginStrategy extends LoginStrategy {\n  /** The email address of the user attempting to log in. */\n  email$: Observable<string>;\n  /** The master key hash used for authentication */\n  serverMasterKeyHash$: Observable<string>;\n  /** The local master key hash we store client side */\n  localMasterKeyHash$: Observable<string | null>;\n\n  protected cache: BehaviorSubject<PasswordLoginStrategyData>;\n\n  constructor(\n    data: PasswordLoginStrategyData,\n    private passwordStrengthService: PasswordStrengthServiceAbstraction,\n    private policyService: PolicyService,\n    private loginStrategyService: LoginStrategyServiceAbstraction,\n    ...sharedDeps: ConstructorParameters<typeof LoginStrategy>\n  ) {\n    super(...sharedDeps);\n\n    this.cache = new BehaviorSubject(data);\n    this.email$ = this.cache.pipe(map((state) => state.tokenRequest.email));\n    this.serverMasterKeyHash$ = this.cache.pipe(\n      map((state) => state.tokenRequest.masterPasswordHash),\n    );\n    this.localMasterKeyHash$ = this.cache.pipe(map((state) => state.localMasterKeyHash));\n  }\n\n  override async logIn(credentials: PasswordLoginCredentials) {\n    const { email, masterPassword, captchaToken, twoFactor } = credentials;\n\n    const data = new PasswordLoginStrategyData();\n    data.masterKey = await this.loginStrategyService.makePreloginKey(masterPassword, email);\n    data.userEnteredEmail = email;\n\n    // Hash the password early (before authentication) so we don't persist it in memory in plaintext\n    data.localMasterKeyHash = await this.cryptoService.hashMasterKey(\n      masterPassword,\n      data.masterKey,\n      HashPurpose.LocalAuthorization,\n    );\n    const serverMasterKeyHash = await this.cryptoService.hashMasterKey(\n      masterPassword,\n      data.masterKey,\n    );\n\n    data.tokenRequest = new PasswordTokenRequest(\n      email,\n      serverMasterKeyHash,\n      captchaToken,\n      await this.buildTwoFactor(twoFactor, email),\n      await this.buildDeviceRequest(),\n    );\n\n    this.cache.next(data);\n\n    const [authResult, identityResponse] = await this.startLogIn();\n\n    if (identityResponse instanceof IdentityCaptchaResponse) {\n      return authResult;\n    }\n\n    const masterPasswordPolicyOptions =\n      this.getMasterPasswordPolicyOptionsFromResponse(identityResponse);\n\n    // The identity result can contain master password policies for the user's organizations\n    if (masterPasswordPolicyOptions?.enforceOnLogin) {\n      // If there is a policy active, evaluate the supplied password before its no longer in memory\n      const meetsRequirements = this.evaluateMasterPassword(\n        credentials,\n        masterPasswordPolicyOptions,\n      );\n      if (meetsRequirements) {\n        return authResult;\n      }\n\n      if (identityResponse instanceof IdentityTwoFactorResponse) {\n        // Save the flag to this strategy for use in 2fa login as the master password is about to pass out of scope\n        this.cache.next({\n          ...this.cache.value,\n          forcePasswordResetReason: ForceSetPasswordReason.WeakMasterPassword,\n        });\n      } else {\n        // Authentication was successful, save the force update password options with the state service\n        await this.masterPasswordService.setForceSetPasswordReason(\n          ForceSetPasswordReason.WeakMasterPassword,\n          authResult.userId, // userId is only available on successful login\n        );\n        authResult.forcePasswordReset = ForceSetPasswordReason.WeakMasterPassword;\n      }\n    }\n    return authResult;\n  }\n\n  override async logInTwoFactor(\n    twoFactor: TokenTwoFactorRequest,\n    captchaResponse: string,\n  ): Promise<AuthResult> {\n    const data = this.cache.value;\n    data.tokenRequest.captchaResponse = captchaResponse ?? data.captchaBypassToken;\n    this.cache.next(data);\n\n    const result = await super.logInTwoFactor(twoFactor);\n\n    // 2FA was successful, save the force update password options with the state service if defined\n    const forcePasswordResetReason = this.cache.value.forcePasswordResetReason;\n    if (\n      !result.requiresTwoFactor &&\n      !result.requiresCaptcha &&\n      forcePasswordResetReason != ForceSetPasswordReason.None\n    ) {\n      await this.masterPasswordService.setForceSetPasswordReason(\n        forcePasswordResetReason,\n        result.userId,\n      );\n      result.forcePasswordReset = forcePasswordResetReason;\n    }\n\n    return result;\n  }\n\n  protected override async setMasterKey(response: IdentityTokenResponse, userId: UserId) {\n    const { masterKey, localMasterKeyHash } = this.cache.value;\n    await this.masterPasswordService.setMasterKey(masterKey, userId);\n    await this.masterPasswordService.setMasterKeyHash(localMasterKeyHash, userId);\n  }\n\n  protected override async setUserKey(\n    response: IdentityTokenResponse,\n    userId: UserId,\n  ): Promise<void> {\n    // If migration is required, we won't have a user key to set yet.\n    if (this.encryptionKeyMigrationRequired(response)) {\n      return;\n    }\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key, userId);\n\n    const masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n    if (masterKey) {\n      const userKey = await this.masterPasswordService.decryptUserKeyWithMasterKey(masterKey);\n      await this.cryptoService.setUserKey(userKey, userId);\n    }\n  }\n\n  protected override async setPrivateKey(\n    response: IdentityTokenResponse,\n    userId: UserId,\n  ): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount(userId)),\n      userId,\n    );\n  }\n\n  protected override encryptionKeyMigrationRequired(response: IdentityTokenResponse): boolean {\n    return !response.key;\n  }\n\n  private getMasterPasswordPolicyOptionsFromResponse(\n    response: IdentityTokenResponse | IdentityTwoFactorResponse,\n  ): MasterPasswordPolicyOptions {\n    if (response == null) {\n      return null;\n    }\n    return MasterPasswordPolicyOptions.fromResponse(response.masterPasswordPolicy);\n  }\n\n  private evaluateMasterPassword(\n    { masterPassword, email }: PasswordLoginCredentials,\n    options: MasterPasswordPolicyOptions,\n  ): boolean {\n    const passwordStrength = this.passwordStrengthService.getPasswordStrength(\n      masterPassword,\n      email,\n    )?.score;\n\n    return this.policyService.evaluateMasterPassword(passwordStrength, masterPassword, options);\n  }\n\n  exportCache(): CacheData {\n    return {\n      password: this.cache.value,\n    };\n  }\n}\n","import { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class SsoTokenRequest extends TokenRequest {\n  constructor(\n    public code: string,\n    public codeVerifier: string,\n    public redirectUri: string,\n    protected twoFactor: TokenTwoFactorRequest,\n    device?: DeviceRequest,\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken(clientId: string) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"authorization_code\";\n    obj.code = this.code;\n    obj.code_verifier = this.codeVerifier;\n    obj.redirect_uri = this.redirectUri;\n\n    return obj;\n  }\n\n  static fromJSON(json: any) {\n    return Object.assign(Object.create(SsoTokenRequest.prototype), json, {\n      device: json.device ? DeviceRequest.fromJSON(json.device) : undefined,\n      twoFactor: json.twoFactor\n        ? Object.assign(new TokenTwoFactorRequest(), json.twoFactor)\n        : undefined,\n    });\n  }\n}\n","import { firstValueFrom, Observable, map, BehaviorSubject } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { DeviceTrustServiceAbstraction } from \"@bitwarden/common/auth/abstractions/device-trust.service.abstraction\";\nimport { KeyConnectorService } from \"@bitwarden/common/auth/abstractions/key-connector.service\";\nimport { AuthResult } from \"@bitwarden/common/auth/models/domain/auth-result\";\nimport { ForceSetPasswordReason } from \"@bitwarden/common/auth/models/domain/force-set-password-reason\";\nimport { SsoTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/sso-token.request\";\nimport { AuthRequestResponse } from \"@bitwarden/common/auth/models/response/auth-request.response\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { HttpStatusCode } from \"@bitwarden/common/enums\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { AuthRequestServiceAbstraction } from \"../abstractions\";\nimport { SsoLoginCredentials } from \"../models/domain/login-credentials\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\nimport { LoginStrategyData, LoginStrategy } from \"./login.strategy\";\n\nexport class SsoLoginStrategyData implements LoginStrategyData {\n  captchaBypassToken: string;\n  tokenRequest: SsoTokenRequest;\n  /**\n   * User's entered email obtained pre-login. Present in most SSO flows, but not CLI + SSO Flow.\n   */\n  userEnteredEmail?: string;\n  /**\n   * User email address. Only available after authentication.\n   */\n  email?: string;\n  /**\n   * The organization ID that the user is logging into. Used for Key Connector\n   * purposes after authentication.\n   */\n  orgId: string;\n  /**\n   * A token provided by the server as an authentication factor for sending\n   * email OTPs to the user's configured 2FA email address. This is required\n   * as we don't have a master password hash or other verifiable secret when using SSO.\n   */\n  ssoEmail2FaSessionToken?: string;\n\n  static fromJSON(obj: Jsonify<SsoLoginStrategyData>): SsoLoginStrategyData {\n    return Object.assign(new SsoLoginStrategyData(), obj, {\n      tokenRequest: SsoTokenRequest.fromJSON(obj.tokenRequest),\n    });\n  }\n}\n\nexport class SsoLoginStrategy extends LoginStrategy {\n  /**\n   * @see {@link SsoLoginStrategyData.email}\n   */\n  email$: Observable<string | null>;\n  /**\n   * @see {@link SsoLoginStrategyData.orgId}\n   */\n  orgId$: Observable<string>;\n  /**\n   * @see {@link SsoLoginStrategyData.ssoEmail2FaSessionToken}\n   */\n  ssoEmail2FaSessionToken$: Observable<string | null>;\n\n  protected cache: BehaviorSubject<SsoLoginStrategyData>;\n\n  constructor(\n    data: SsoLoginStrategyData,\n    private keyConnectorService: KeyConnectorService,\n    private deviceTrustService: DeviceTrustServiceAbstraction,\n    private authRequestService: AuthRequestServiceAbstraction,\n    private i18nService: I18nService,\n    ...sharedDeps: ConstructorParameters<typeof LoginStrategy>\n  ) {\n    super(...sharedDeps);\n\n    this.cache = new BehaviorSubject(data);\n    this.email$ = this.cache.pipe(map((state) => state.email));\n    this.orgId$ = this.cache.pipe(map((state) => state.orgId));\n    this.ssoEmail2FaSessionToken$ = this.cache.pipe(map((state) => state.ssoEmail2FaSessionToken));\n  }\n\n  async logIn(credentials: SsoLoginCredentials): Promise<AuthResult> {\n    const data = new SsoLoginStrategyData();\n    data.orgId = credentials.orgId;\n\n    data.userEnteredEmail = credentials.email;\n\n    const deviceRequest = await this.buildDeviceRequest();\n\n    this.logService.info(\"Logging in with appId %s.\", deviceRequest.identifier);\n\n    data.tokenRequest = new SsoTokenRequest(\n      credentials.code,\n      credentials.codeVerifier,\n      credentials.redirectUrl,\n      await this.buildTwoFactor(credentials.twoFactor, credentials.email),\n      deviceRequest,\n    );\n\n    this.cache.next(data);\n\n    const [ssoAuthResult] = await this.startLogIn();\n\n    const email = ssoAuthResult.email;\n    const ssoEmail2FaSessionToken = ssoAuthResult.ssoEmail2FaSessionToken;\n\n    // Auth guard currently handles redirects for this.\n    if (ssoAuthResult.forcePasswordReset == ForceSetPasswordReason.AdminForcePasswordReset) {\n      await this.masterPasswordService.setForceSetPasswordReason(\n        ssoAuthResult.forcePasswordReset,\n        ssoAuthResult.userId,\n      );\n    }\n\n    this.cache.next({\n      ...this.cache.value,\n      email,\n      ssoEmail2FaSessionToken,\n    });\n\n    return ssoAuthResult;\n  }\n\n  protected override async setMasterKey(tokenResponse: IdentityTokenResponse, userId: UserId) {\n    // The only way we can be setting a master key at this point is if we are using Key Connector.\n    // First, check to make sure that we should do so based on the token response.\n    if (this.shouldSetMasterKeyFromKeyConnector(tokenResponse)) {\n      // If we're here, we know that the user should use Key Connector (they have a KeyConnectorUrl) and does not have a master password.\n      // We can now check the key on the token response to see whether they are a brand new user or an existing user.\n      // The presence of a masterKeyEncryptedUserKey indicates that the user has already been provisioned in Key Connector.\n      const newSsoUser = tokenResponse.key == null;\n      if (newSsoUser) {\n        await this.keyConnectorService.convertNewSsoUserToKeyConnector(\n          tokenResponse,\n          this.cache.value.orgId,\n          userId,\n        );\n      } else {\n        const keyConnectorUrl = this.getKeyConnectorUrl(tokenResponse);\n        await this.keyConnectorService.setMasterKeyFromUrl(keyConnectorUrl, userId);\n      }\n    }\n  }\n\n  /**\n   * Determines if it is possible set the `masterKey` from Key Connector.\n   * @param tokenResponse\n   * @returns `true` if the master key can be set from Key Connector, `false` otherwise\n   */\n  private shouldSetMasterKeyFromKeyConnector(tokenResponse: IdentityTokenResponse): boolean {\n    const userDecryptionOptions = tokenResponse?.userDecryptionOptions;\n\n    if (userDecryptionOptions != null) {\n      const userHasMasterPassword = userDecryptionOptions.hasMasterPassword;\n      const userHasKeyConnectorUrl =\n        userDecryptionOptions.keyConnectorOption?.keyConnectorUrl != null;\n\n      // In order for us to set the master key from Key Connector, we need to have a Key Connector URL\n      // and the user must not have a master password.\n      return userHasKeyConnectorUrl && !userHasMasterPassword;\n    } else {\n      // In pre-TDE versions of the server, the userDecryptionOptions will not be present.\n      // In this case, we can determine if the user has a master password and has a Key Connector URL by\n      // just checking the keyConnectorUrl property. This is because the server short-circuits on the response\n      // and will not pass back the URL in the response if the user has a master password.\n      // TODO: remove compatibility check after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n      return tokenResponse.keyConnectorUrl != null;\n    }\n  }\n\n  private getKeyConnectorUrl(tokenResponse: IdentityTokenResponse): string {\n    // TODO: remove tokenResponse.keyConnectorUrl reference after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n    const userDecryptionOptions = tokenResponse?.userDecryptionOptions;\n    return (\n      tokenResponse.keyConnectorUrl ?? userDecryptionOptions?.keyConnectorOption?.keyConnectorUrl\n    );\n  }\n\n  // TODO: future passkey login strategy will need to support setting user key (decrypting via TDE or admin approval request)\n  // so might be worth moving this logic to a common place (base login strategy or a separate service?)\n  protected override async setUserKey(\n    tokenResponse: IdentityTokenResponse,\n    userId: UserId,\n  ): Promise<void> {\n    const masterKeyEncryptedUserKey = tokenResponse.key;\n\n    // Note: masterKeyEncryptedUserKey is undefined for SSO JIT provisioned users\n    // on account creation and subsequent logins (confirmed or unconfirmed)\n    // but that is fine for TDE so we cannot return if it is undefined\n\n    if (masterKeyEncryptedUserKey) {\n      // set the master key encrypted user key if it exists\n      await this.cryptoService.setMasterKeyEncryptedUserKey(masterKeyEncryptedUserKey, userId);\n    }\n\n    const userDecryptionOptions = tokenResponse?.userDecryptionOptions;\n\n    // Note: TDE and key connector are mutually exclusive\n    if (userDecryptionOptions?.trustedDeviceOption) {\n      this.logService.info(\"Attempting to set user key with approved admin auth request.\");\n\n      // Try to use the user key from an approved admin request if it exists.\n      // Using it will clear it from state and future requests will use the device key.\n      await this.trySetUserKeyWithApprovedAdminRequestIfExists(userId);\n\n      const hasUserKey = await this.cryptoService.hasUserKey(userId);\n\n      // Only try to set user key with device key if admin approval request was not successful.\n      if (!hasUserKey) {\n        this.logService.info(\"Attempting to set user key with device key.\");\n\n        await this.trySetUserKeyWithDeviceKey(tokenResponse, userId);\n      }\n    } else if (\n      masterKeyEncryptedUserKey != null &&\n      this.getKeyConnectorUrl(tokenResponse) != null\n    ) {\n      // Key connector enabled for user\n      await this.trySetUserKeyWithMasterKey(userId);\n    }\n\n    // Note: In the traditional SSO flow with MP without key connector, the lock component\n    // is responsible for deriving master key from MP entry and then decrypting the user key\n  }\n\n  private async trySetUserKeyWithApprovedAdminRequestIfExists(userId: UserId): Promise<void> {\n    // At this point a user could have an admin auth request that has been approved\n    const adminAuthReqStorable = await this.authRequestService.getAdminAuthRequest(userId);\n\n    if (!adminAuthReqStorable) {\n      return;\n    }\n\n    // Call server to see if admin auth request has been approved\n    let adminAuthReqResponse: AuthRequestResponse;\n\n    try {\n      adminAuthReqResponse = await this.apiService.getAuthRequest(adminAuthReqStorable.id);\n    } catch (error) {\n      if (error instanceof ErrorResponse && error.statusCode === HttpStatusCode.NotFound) {\n        // if we get a 404, it means the auth request has been deleted so clear it from storage\n        await this.authRequestService.clearAdminAuthRequest(userId);\n      }\n\n      // Always return on an error here as we don't want to block the user from logging in\n      return;\n    }\n\n    if (adminAuthReqResponse?.requestApproved) {\n      // if masterPasswordHash has a value, we will always receive authReqResponse.key\n      // as authRequestPublicKey(masterKey) + authRequestPublicKey(masterPasswordHash)\n      if (adminAuthReqResponse.masterPasswordHash) {\n        await this.authRequestService.setKeysAfterDecryptingSharedMasterKeyAndHash(\n          adminAuthReqResponse,\n          adminAuthReqStorable.privateKey,\n          userId,\n        );\n      } else {\n        // if masterPasswordHash is null, we will always receive authReqResponse.key\n        // as authRequestPublicKey(userKey)\n        await this.authRequestService.setUserKeyAfterDecryptingSharedUserKey(\n          adminAuthReqResponse,\n          adminAuthReqStorable.privateKey,\n          userId,\n        );\n      }\n\n      if (await this.cryptoService.hasUserKey()) {\n        // Now that we have a decrypted user key in memory, we can check if we\n        // need to establish trust on the current device\n        await this.deviceTrustService.trustDeviceIfRequired(userId);\n\n        // if we successfully decrypted the user key, we can delete the admin auth request out of state\n        // TODO: eventually we post and clean up DB as well once consumed on client\n        await this.authRequestService.clearAdminAuthRequest(userId);\n\n        this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"loginApproved\"));\n      }\n    }\n  }\n\n  private async trySetUserKeyWithDeviceKey(\n    tokenResponse: IdentityTokenResponse,\n    userId: UserId,\n  ): Promise<void> {\n    const trustedDeviceOption = tokenResponse.userDecryptionOptions?.trustedDeviceOption;\n\n    if (!trustedDeviceOption) {\n      this.logService.error(\"Unable to set user key due to missing trustedDeviceOption.\");\n      return;\n    }\n\n    const deviceKey = await this.deviceTrustService.getDeviceKey(userId);\n    const encDevicePrivateKey = trustedDeviceOption?.encryptedPrivateKey;\n    const encUserKey = trustedDeviceOption?.encryptedUserKey;\n\n    if (!deviceKey || !encDevicePrivateKey || !encUserKey) {\n      if (!deviceKey) {\n        this.logService.warning(\"Unable to set user key due to missing device key.\");\n      } else if (!encDevicePrivateKey || !encUserKey) {\n        // Tell the server that we have a device key, but received no decryption keys\n        await this.deviceTrustService.recordDeviceTrustLoss();\n      }\n      if (!encDevicePrivateKey) {\n        this.logService.warning(\n          \"Unable to set user key due to missing encrypted device private key.\",\n        );\n      }\n      if (!encUserKey) {\n        this.logService.warning(\"Unable to set user key due to missing encrypted user key.\");\n      }\n\n      return;\n    }\n\n    const userKey = await this.deviceTrustService.decryptUserKeyWithDeviceKey(\n      userId,\n      encDevicePrivateKey,\n      encUserKey,\n      deviceKey,\n    );\n\n    if (userKey) {\n      await this.cryptoService.setUserKey(userKey, userId);\n    }\n  }\n\n  private async trySetUserKeyWithMasterKey(userId: UserId): Promise<void> {\n    const masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n\n    // There is a scenario in which the master key is not set here. That will occur if the user\n    // has a master password and is using Key Connector. In that case, we cannot set the master key\n    // because the user hasn't entered their master password yet.\n    // Instead, we'll return here and let the migration to Key Connector handle setting the master key.\n    if (!masterKey) {\n      return;\n    }\n\n    const userKey = await this.masterPasswordService.decryptUserKeyWithMasterKey(masterKey);\n    await this.cryptoService.setUserKey(userKey, userId);\n  }\n\n  protected override async setPrivateKey(\n    tokenResponse: IdentityTokenResponse,\n    userId: UserId,\n  ): Promise<void> {\n    const newSsoUser = tokenResponse.key == null;\n\n    if (!newSsoUser) {\n      await this.cryptoService.setPrivateKey(\n        tokenResponse.privateKey ?? (await this.createKeyPairForOldAccount(userId)),\n        userId,\n      );\n    }\n  }\n\n  exportCache(): CacheData {\n    return {\n      sso: this.cache.value,\n    };\n  }\n}\n","import { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class UserApiTokenRequest extends TokenRequest {\n  constructor(\n    public clientId: string,\n    public clientSecret: string,\n    protected twoFactor: TokenTwoFactorRequest,\n    device?: DeviceRequest,\n  ) {\n    super(twoFactor, device);\n  }\n\n  toIdentityToken() {\n    const obj = super.toIdentityToken(this.clientId);\n\n    obj.scope = this.clientId.startsWith(\"organization\") ? \"api.organization\" : \"api\";\n    obj.grant_type = \"client_credentials\";\n    obj.client_secret = this.clientSecret;\n\n    return obj;\n  }\n\n  static fromJSON(json: any) {\n    return Object.assign(Object.create(UserApiTokenRequest.prototype), json, {\n      device: json.device ? DeviceRequest.fromJSON(json.device) : undefined,\n      twoFactor: json.twoFactor\n        ? Object.assign(new TokenTwoFactorRequest(), json.twoFactor)\n        : undefined,\n    });\n  }\n}\n","import { firstValueFrom, BehaviorSubject } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { KeyConnectorService } from \"@bitwarden/common/auth/abstractions/key-connector.service\";\nimport { UserApiTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/user-api-token.request\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { VaultTimeoutAction } from \"@bitwarden/common/enums/vault-timeout-action.enum\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { UserApiLoginCredentials } from \"../models/domain/login-credentials\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\nimport { LoginStrategy, LoginStrategyData } from \"./login.strategy\";\n\nexport class UserApiLoginStrategyData implements LoginStrategyData {\n  tokenRequest: UserApiTokenRequest;\n  captchaBypassToken: string;\n\n  static fromJSON(obj: Jsonify<UserApiLoginStrategyData>): UserApiLoginStrategyData {\n    return Object.assign(new UserApiLoginStrategyData(), obj, {\n      tokenRequest: UserApiTokenRequest.fromJSON(obj.tokenRequest),\n    });\n  }\n}\n\nexport class UserApiLoginStrategy extends LoginStrategy {\n  protected cache: BehaviorSubject<UserApiLoginStrategyData>;\n\n  constructor(\n    data: UserApiLoginStrategyData,\n    private environmentService: EnvironmentService,\n    private keyConnectorService: KeyConnectorService,\n    ...sharedDeps: ConstructorParameters<typeof LoginStrategy>\n  ) {\n    super(...sharedDeps);\n\n    this.cache = new BehaviorSubject(data);\n  }\n\n  override async logIn(credentials: UserApiLoginCredentials) {\n    const data = new UserApiLoginStrategyData();\n    data.tokenRequest = new UserApiTokenRequest(\n      credentials.clientId,\n      credentials.clientSecret,\n      await this.buildTwoFactor(),\n      await this.buildDeviceRequest(),\n    );\n    this.cache.next(data);\n\n    const [authResult] = await this.startLogIn();\n    return authResult;\n  }\n\n  protected override async setMasterKey(response: IdentityTokenResponse, userId: UserId) {\n    if (response.apiUseKeyConnector) {\n      const env = await firstValueFrom(this.environmentService.environment$);\n      const keyConnectorUrl = env.getKeyConnectorUrl();\n      await this.keyConnectorService.setMasterKeyFromUrl(keyConnectorUrl, userId);\n    }\n  }\n\n  protected override async setUserKey(\n    response: IdentityTokenResponse,\n    userId: UserId,\n  ): Promise<void> {\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key, userId);\n\n    if (response.apiUseKeyConnector) {\n      const masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n      if (masterKey) {\n        const userKey = await this.masterPasswordService.decryptUserKeyWithMasterKey(masterKey);\n        await this.cryptoService.setUserKey(userKey, userId);\n      }\n    }\n  }\n\n  protected override async setPrivateKey(\n    response: IdentityTokenResponse,\n    userId: UserId,\n  ): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount(userId)),\n      userId,\n    );\n  }\n\n  // Overridden to save client ID and secret to token service\n  protected async saveAccountInformation(tokenResponse: IdentityTokenResponse): Promise<UserId> {\n    const userId = await super.saveAccountInformation(tokenResponse);\n\n    const vaultTimeoutAction = await firstValueFrom(\n      this.vaultTimeoutSettingsService.getVaultTimeoutActionByUserId$(userId),\n    );\n    const vaultTimeout = await firstValueFrom(\n      this.vaultTimeoutSettingsService.getVaultTimeoutByUserId$(userId),\n    );\n\n    const tokenRequest = this.cache.value.tokenRequest;\n\n    await this.tokenService.setClientId(\n      tokenRequest.clientId,\n      vaultTimeoutAction as VaultTimeoutAction,\n      vaultTimeout,\n    );\n    await this.tokenService.setClientSecret(\n      tokenRequest.clientSecret,\n      vaultTimeoutAction as VaultTimeoutAction,\n      vaultTimeout,\n    );\n    return userId;\n  }\n\n  exportCache(): CacheData {\n    return {\n      userApiKey: this.cache.value,\n    };\n  }\n}\n","import { WebAuthnLoginAssertionResponseRequest } from \"../../../services/webauthn-login/request/webauthn-login-assertion-response.request\";\n\nimport { DeviceRequest } from \"./device.request\";\nimport { TokenTwoFactorRequest } from \"./token-two-factor.request\";\nimport { TokenRequest } from \"./token.request\";\n\nexport class WebAuthnLoginTokenRequest extends TokenRequest {\n  constructor(\n    public token: string,\n    public deviceResponse: WebAuthnLoginAssertionResponseRequest,\n    device?: DeviceRequest,\n  ) {\n    super(undefined, device);\n  }\n\n  toIdentityToken(clientId: string) {\n    const obj = super.toIdentityToken(clientId);\n\n    obj.grant_type = \"webauthn\";\n    obj.token = this.token;\n    // must be a string b/c sending as form encoded data\n    obj.deviceResponse = JSON.stringify(this.deviceResponse);\n\n    return obj;\n  }\n\n  static fromJSON(json: any) {\n    return Object.assign(Object.create(WebAuthnLoginTokenRequest.prototype), json, {\n      deviceResponse: WebAuthnLoginAssertionResponseRequest.fromJSON(json.deviceResponse),\n      device: json.device ? DeviceRequest.fromJSON(json.device) : undefined,\n      twoFactor: json.twoFactor\n        ? Object.assign(new TokenTwoFactorRequest(), json.twoFactor)\n        : undefined,\n    });\n  }\n}\n","import { BehaviorSubject } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { AuthResult } from \"@bitwarden/common/auth/models/domain/auth-result\";\nimport { WebAuthnLoginTokenRequest } from \"@bitwarden/common/auth/models/request/identity-token/webauthn-login-token.request\";\nimport { IdentityTokenResponse } from \"@bitwarden/common/auth/models/response/identity-token.response\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { UserKey } from \"@bitwarden/common/types/key\";\n\nimport { WebAuthnLoginCredentials } from \"../models/domain/login-credentials\";\nimport { CacheData } from \"../services/login-strategies/login-strategy.state\";\n\nimport { LoginStrategy, LoginStrategyData } from \"./login.strategy\";\n\nexport class WebAuthnLoginStrategyData implements LoginStrategyData {\n  tokenRequest: WebAuthnLoginTokenRequest;\n  captchaBypassToken?: string;\n  credentials: WebAuthnLoginCredentials;\n\n  static fromJSON(obj: Jsonify<WebAuthnLoginStrategyData>): WebAuthnLoginStrategyData {\n    return Object.assign(new WebAuthnLoginStrategyData(), obj, {\n      tokenRequest: WebAuthnLoginTokenRequest.fromJSON(obj.tokenRequest),\n      credentials: WebAuthnLoginCredentials.fromJSON(obj.credentials),\n    });\n  }\n}\n\nexport class WebAuthnLoginStrategy extends LoginStrategy {\n  protected cache: BehaviorSubject<WebAuthnLoginStrategyData>;\n\n  constructor(\n    data: WebAuthnLoginStrategyData,\n    ...sharedDeps: ConstructorParameters<typeof LoginStrategy>\n  ) {\n    super(...sharedDeps);\n\n    this.cache = new BehaviorSubject(data);\n  }\n\n  async logIn(credentials: WebAuthnLoginCredentials) {\n    const data = new WebAuthnLoginStrategyData();\n    data.credentials = credentials;\n    data.tokenRequest = new WebAuthnLoginTokenRequest(\n      credentials.token,\n      credentials.deviceResponse,\n      await this.buildDeviceRequest(),\n    );\n    this.cache.next(data);\n\n    const [authResult] = await this.startLogIn();\n    return authResult;\n  }\n\n  async logInTwoFactor(): Promise<AuthResult> {\n    throw new Error(\"2FA not supported yet for WebAuthn Login.\");\n  }\n\n  protected override async setMasterKey(response: IdentityTokenResponse, userId: UserId) {\n    return Promise.resolve();\n  }\n\n  protected override async setUserKey(idTokenResponse: IdentityTokenResponse, userId: UserId) {\n    const masterKeyEncryptedUserKey = idTokenResponse.key;\n\n    if (masterKeyEncryptedUserKey) {\n      // set the master key encrypted user key if it exists\n      await this.cryptoService.setMasterKeyEncryptedUserKey(masterKeyEncryptedUserKey, userId);\n    }\n\n    const userDecryptionOptions = idTokenResponse?.userDecryptionOptions;\n\n    if (userDecryptionOptions?.webAuthnPrfOption) {\n      const webAuthnPrfOption = idTokenResponse.userDecryptionOptions?.webAuthnPrfOption;\n\n      const credentials = this.cache.value.credentials;\n      // confirm we still have the prf key\n      if (!credentials.prfKey) {\n        return;\n      }\n\n      // decrypt prf encrypted private key\n      const privateKey = await this.cryptoService.decryptToBytes(\n        webAuthnPrfOption.encryptedPrivateKey,\n        credentials.prfKey,\n      );\n\n      // decrypt user key with private key\n      const userKey = await this.cryptoService.rsaDecrypt(\n        webAuthnPrfOption.encryptedUserKey.encryptedString,\n        privateKey,\n      );\n\n      if (userKey) {\n        await this.cryptoService.setUserKey(new SymmetricCryptoKey(userKey) as UserKey, userId);\n      }\n    }\n  }\n\n  protected override async setPrivateKey(\n    response: IdentityTokenResponse,\n    userId: UserId,\n  ): Promise<void> {\n    await this.cryptoService.setPrivateKey(\n      response.privateKey ?? (await this.createKeyPairForOldAccount(userId)),\n      userId,\n    );\n  }\n\n  exportCache(): CacheData {\n    return {\n      webAuthn: this.cache.value,\n    };\n  }\n}\n","import { AuthenticationType } from \"@bitwarden/common/auth/enums/authentication-type\";\nimport { KeyDefinition, LOGIN_STRATEGY_MEMORY } from \"@bitwarden/common/platform/state\";\n\nimport { AuthRequestLoginStrategyData } from \"../../login-strategies/auth-request-login.strategy\";\nimport { PasswordLoginStrategyData } from \"../../login-strategies/password-login.strategy\";\nimport { SsoLoginStrategyData } from \"../../login-strategies/sso-login.strategy\";\nimport { UserApiLoginStrategyData } from \"../../login-strategies/user-api-login.strategy\";\nimport { WebAuthnLoginStrategyData } from \"../../login-strategies/webauthn-login.strategy\";\n\n/**\n * The current login strategy in use.\n */\nexport const CURRENT_LOGIN_STRATEGY_KEY = new KeyDefinition<AuthenticationType | null>(\n  LOGIN_STRATEGY_MEMORY,\n  \"currentLoginStrategy\",\n  {\n    deserializer: (data) => data,\n  },\n);\n\n/**\n * The expiration date for the login strategy cache.\n * Used as a backup to the timer set on the service.\n */\nexport const CACHE_EXPIRATION_KEY = new KeyDefinition<Date | null>(\n  LOGIN_STRATEGY_MEMORY,\n  \"loginStrategyCacheExpiration\",\n  {\n    deserializer: (data) => (data ? null : new Date(data)),\n  },\n);\n\n/**\n * Auth Request notification for all instances of the login strategy service.\n * Note: this isn't an ideal approach, but allows both a background and\n * foreground instance to send out the notification.\n * TODO: Move to Auth Request service.\n */\nexport const AUTH_REQUEST_PUSH_NOTIFICATION_KEY = new KeyDefinition<string | null>(\n  LOGIN_STRATEGY_MEMORY,\n  \"authRequestPushNotification\",\n  {\n    deserializer: (data) => data,\n  },\n);\n\nexport type CacheData = {\n  password?: PasswordLoginStrategyData;\n  sso?: SsoLoginStrategyData;\n  userApiKey?: UserApiLoginStrategyData;\n  authRequest?: AuthRequestLoginStrategyData;\n  webAuthn?: WebAuthnLoginStrategyData;\n};\n\n/**\n * A cache for login strategies to use for data persistence through\n * the login process.\n */\nexport const CACHE_KEY = new KeyDefinition<CacheData | null>(\n  LOGIN_STRATEGY_MEMORY,\n  \"loginStrategyCache\",\n  {\n    deserializer: (data) => {\n      if (data == null) {\n        return null;\n      }\n      return {\n        password: data.password ? PasswordLoginStrategyData.fromJSON(data.password) : undefined,\n        sso: data.sso ? SsoLoginStrategyData.fromJSON(data.sso) : undefined,\n        userApiKey: data.userApiKey\n          ? UserApiLoginStrategyData.fromJSON(data.userApiKey)\n          : undefined,\n        authRequest: data.authRequest\n          ? AuthRequestLoginStrategyData.fromJSON(data.authRequest)\n          : undefined,\n        webAuthn: data.webAuthn ? WebAuthnLoginStrategyData.fromJSON(data.webAuthn) : undefined,\n      };\n    },\n  },\n);\n","import { Observable, map } from \"rxjs\";\n\nimport {\n  ActiveUserState,\n  StateProvider,\n  USER_DECRYPTION_OPTIONS_DISK,\n  UserKeyDefinition,\n} from \"@bitwarden/common/platform/state\";\nimport { UserId } from \"@bitwarden/common/src/types/guid\";\n\nimport { InternalUserDecryptionOptionsServiceAbstraction } from \"../../abstractions/user-decryption-options.service.abstraction\";\nimport { UserDecryptionOptions } from \"../../models\";\n\nexport const USER_DECRYPTION_OPTIONS = new UserKeyDefinition<UserDecryptionOptions>(\n  USER_DECRYPTION_OPTIONS_DISK,\n  \"decryptionOptions\",\n  {\n    deserializer: (decryptionOptions) => UserDecryptionOptions.fromJSON(decryptionOptions),\n    clearOn: [\"logout\"],\n  },\n);\n\nexport class UserDecryptionOptionsService\n  implements InternalUserDecryptionOptionsServiceAbstraction\n{\n  private userDecryptionOptionsState: ActiveUserState<UserDecryptionOptions>;\n\n  userDecryptionOptions$: Observable<UserDecryptionOptions>;\n  hasMasterPassword$: Observable<boolean>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.userDecryptionOptionsState = this.stateProvider.getActive(USER_DECRYPTION_OPTIONS);\n\n    this.userDecryptionOptions$ = this.userDecryptionOptionsState.state$;\n    this.hasMasterPassword$ = this.userDecryptionOptions$.pipe(\n      map((options) => options?.hasMasterPassword ?? false),\n    );\n  }\n\n  userDecryptionOptionsById$(userId: UserId): Observable<UserDecryptionOptions> {\n    return this.stateProvider.getUser(userId, USER_DECRYPTION_OPTIONS).state$;\n  }\n\n  async setUserDecryptionOptions(userDecryptionOptions: UserDecryptionOptions): Promise<void> {\n    await this.userDecryptionOptionsState.update((_) => userDecryptionOptions);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\n\nexport class AdminAuthRequestStorable {\n  id: string;\n  privateKey: Uint8Array;\n\n  constructor(init?: Partial<AdminAuthRequestStorable>) {\n    if (init) {\n      Object.assign(this, init);\n    }\n  }\n\n  toJSON() {\n    return {\n      id: this.id,\n      privateKey: Utils.fromBufferToByteString(this.privateKey),\n    };\n  }\n\n  static fromJSON(obj: Jsonify<AdminAuthRequestStorable>): AdminAuthRequestStorable {\n    if (obj == null) {\n      return null;\n    }\n\n    let privateKeyBuffer = null;\n    if (obj.privateKey) {\n      privateKeyBuffer = Utils.fromByteStringToArray(obj.privateKey);\n    }\n\n    return new AdminAuthRequestStorable({\n      id: obj.id,\n      privateKey: privateKeyBuffer,\n    });\n  }\n}\n","export class PasswordlessAuthRequest {\n  constructor(\n    readonly key: string,\n    readonly masterPasswordHash: string,\n    readonly deviceIdentifier: string,\n    readonly requestApproved: boolean,\n  ) {}\n}\n","import { Observable, Subject, firstValueFrom } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { InternalMasterPasswordServiceAbstraction } from \"@bitwarden/common/auth/abstractions/master-password.service.abstraction\";\nimport { AdminAuthRequestStorable } from \"@bitwarden/common/auth/models/domain/admin-auth-req-storable\";\nimport { PasswordlessAuthRequest } from \"@bitwarden/common/auth/models/request/passwordless-auth.request\";\nimport { AuthRequestResponse } from \"@bitwarden/common/auth/models/response/auth-request.response\";\nimport { AuthRequestPushNotification } from \"@bitwarden/common/models/response/notification.response\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport {\n  AUTH_REQUEST_DISK_LOCAL,\n  StateProvider,\n  UserKeyDefinition,\n} from \"@bitwarden/common/platform/state\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { MasterKey, UserKey } from \"@bitwarden/common/types/key\";\n\nimport { AuthRequestServiceAbstraction } from \"../../abstractions/auth-request.service.abstraction\";\n\n/**\n * Disk-local to maintain consistency between tabs. We don't want to\n * clear this on logout since admin auth requests are long-lived.\n */\nexport const ADMIN_AUTH_REQUEST_KEY = new UserKeyDefinition<Jsonify<AdminAuthRequestStorable>>(\n  AUTH_REQUEST_DISK_LOCAL,\n  \"adminAuthRequest\",\n  {\n    deserializer: (value) => value,\n    clearOn: [],\n  },\n);\n\nexport class AuthRequestService implements AuthRequestServiceAbstraction {\n  private authRequestPushNotificationSubject = new Subject<string>();\n  authRequestPushNotification$: Observable<string>;\n\n  constructor(\n    private appIdService: AppIdService,\n    private accountService: AccountService,\n    private masterPasswordService: InternalMasterPasswordServiceAbstraction,\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private stateProvider: StateProvider,\n  ) {\n    this.authRequestPushNotification$ = this.authRequestPushNotificationSubject.asObservable();\n  }\n\n  async getAdminAuthRequest(userId: UserId): Promise<AdminAuthRequestStorable | null> {\n    if (userId == null) {\n      throw new Error(\"User ID is required\");\n    }\n\n    const authRequestSerialized = await firstValueFrom(\n      this.stateProvider.getUser(userId, ADMIN_AUTH_REQUEST_KEY).state$,\n    );\n    const adminAuthRequestStorable = AdminAuthRequestStorable.fromJSON(authRequestSerialized);\n    return adminAuthRequestStorable;\n  }\n\n  async setAdminAuthRequest(authRequest: AdminAuthRequestStorable, userId: UserId): Promise<void> {\n    if (userId == null) {\n      throw new Error(\"User ID is required\");\n    }\n    if (authRequest == null) {\n      throw new Error(\"Auth request is required\");\n    }\n\n    await this.stateProvider.setUserState(ADMIN_AUTH_REQUEST_KEY, authRequest.toJSON(), userId);\n  }\n\n  async clearAdminAuthRequest(userId: UserId): Promise<void> {\n    if (userId == null) {\n      throw new Error(\"User ID is required\");\n    }\n\n    await this.stateProvider.setUserState(ADMIN_AUTH_REQUEST_KEY, null, userId);\n  }\n\n  async approveOrDenyAuthRequest(\n    approve: boolean,\n    authRequest: AuthRequestResponse,\n  ): Promise<AuthRequestResponse> {\n    if (!authRequest.id) {\n      throw new Error(\"Auth request has no id\");\n    }\n    if (!authRequest.publicKey) {\n      throw new Error(\"Auth request has no public key\");\n    }\n    const pubKey = Utils.fromB64ToArray(authRequest.publicKey);\n\n    const userId = (await firstValueFrom(this.accountService.activeAccount$)).id;\n    const masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n    const masterKeyHash = await firstValueFrom(this.masterPasswordService.masterKeyHash$(userId));\n    let encryptedMasterKeyHash;\n    let keyToEncrypt;\n\n    if (masterKey && masterKeyHash) {\n      // Only encrypt the master password hash if masterKey exists as\n      // we won't have a masterKeyHash without a masterKey\n      encryptedMasterKeyHash = await this.cryptoService.rsaEncrypt(\n        Utils.fromUtf8ToArray(masterKeyHash),\n        pubKey,\n      );\n      keyToEncrypt = masterKey.encKey;\n    } else {\n      const userKey = await this.cryptoService.getUserKey();\n      keyToEncrypt = userKey.key;\n    }\n\n    const encryptedKey = await this.cryptoService.rsaEncrypt(keyToEncrypt, pubKey);\n\n    const response = new PasswordlessAuthRequest(\n      encryptedKey.encryptedString,\n      encryptedMasterKeyHash?.encryptedString,\n      await this.appIdService.getAppId(),\n      approve,\n    );\n    return await this.apiService.putAuthRequest(authRequest.id, response);\n  }\n\n  async setUserKeyAfterDecryptingSharedUserKey(\n    authReqResponse: AuthRequestResponse,\n    authReqPrivateKey: Uint8Array,\n    userId: UserId,\n  ) {\n    const userKey = await this.decryptPubKeyEncryptedUserKey(\n      authReqResponse.key,\n      authReqPrivateKey,\n    );\n    await this.cryptoService.setUserKey(userKey, userId);\n  }\n\n  async setKeysAfterDecryptingSharedMasterKeyAndHash(\n    authReqResponse: AuthRequestResponse,\n    authReqPrivateKey: Uint8Array,\n    userId: UserId,\n  ) {\n    const { masterKey, masterKeyHash } = await this.decryptPubKeyEncryptedMasterKeyAndHash(\n      authReqResponse.key,\n      authReqResponse.masterPasswordHash,\n      authReqPrivateKey,\n    );\n\n    // Decrypt and set user key in state\n    const userKey = await this.masterPasswordService.decryptUserKeyWithMasterKey(masterKey);\n\n    // Set masterKey + masterKeyHash in state after decryption (in case decryption fails)\n    await this.masterPasswordService.setMasterKey(masterKey, userId);\n    await this.masterPasswordService.setMasterKeyHash(masterKeyHash, userId);\n\n    await this.cryptoService.setUserKey(userKey, userId);\n  }\n\n  // Decryption helpers\n  async decryptPubKeyEncryptedUserKey(\n    pubKeyEncryptedUserKey: string,\n    privateKey: Uint8Array,\n  ): Promise<UserKey> {\n    const decryptedUserKeyBytes = await this.cryptoService.rsaDecrypt(\n      pubKeyEncryptedUserKey,\n      privateKey,\n    );\n\n    return new SymmetricCryptoKey(decryptedUserKeyBytes) as UserKey;\n  }\n\n  async decryptPubKeyEncryptedMasterKeyAndHash(\n    pubKeyEncryptedMasterKey: string,\n    pubKeyEncryptedMasterKeyHash: string,\n    privateKey: Uint8Array,\n  ): Promise<{ masterKey: MasterKey; masterKeyHash: string }> {\n    const decryptedMasterKeyArrayBuffer = await this.cryptoService.rsaDecrypt(\n      pubKeyEncryptedMasterKey,\n      privateKey,\n    );\n\n    const decryptedMasterKeyHashArrayBuffer = await this.cryptoService.rsaDecrypt(\n      pubKeyEncryptedMasterKeyHash,\n      privateKey,\n    );\n\n    const masterKey = new SymmetricCryptoKey(decryptedMasterKeyArrayBuffer) as MasterKey;\n    const masterKeyHash = Utils.fromBufferToUtf8(decryptedMasterKeyHashArrayBuffer);\n\n    return {\n      masterKey,\n      masterKeyHash,\n    };\n  }\n\n  sendAuthRequestPushNotification(notification: AuthRequestPushNotification): void {\n    if (notification.id != null) {\n      this.authRequestPushNotificationSubject.next(notification.id);\n    }\n  }\n\n  async getFingerprintPhrase(email: string, publicKey: Uint8Array): Promise<string> {\n    return (await this.cryptoService.getFingerprint(email.toLowerCase(), publicKey)).join(\"-\");\n  }\n}\n","/**\n * Feature flags.\n *\n * Flags MUST be short lived and SHALL be removed once enabled.\n */\nexport enum FeatureFlag {\n  BrowserFilelessImport = \"browser-fileless-import\",\n  ItemShare = \"item-share\",\n  GeneratorToolsModernization = \"generator-tools-modernization\",\n  EnableConsolidatedBilling = \"enable-consolidated-billing\",\n  AC1795_UpdatedSubscriptionStatusSection = \"AC-1795_updated-subscription-status-section\",\n  EnableDeleteProvider = \"AC-1218-delete-provider\",\n  ExtensionRefresh = \"extension-refresh\",\n  PersistPopupView = \"persist-popup-view\",\n  RestrictProviderAccess = \"restrict-provider-access\",\n  PM4154_BulkEncryptionService = \"PM-4154-bulk-encryption-service\",\n  UseTreeWalkerApiForPageDetailsCollection = \"use-tree-walker-api-for-page-details-collection\",\n  EmailVerification = \"email-verification\",\n  InlineMenuFieldQualification = \"inline-menu-field-qualification\",\n  MemberAccessReport = \"ac-2059-member-access-report\",\n  TwoFactorComponentRefactor = \"two-factor-component-refactor\",\n  EnableTimeThreshold = \"PM-5864-dollar-threshold\",\n  InlineMenuPositioningImprovements = \"inline-menu-positioning-improvements\",\n  ProviderClientVaultPrivacyBanner = \"ac-2833-provider-client-vault-privacy-banner\",\n  VaultBulkManagementAction = \"vault-bulk-management-action\",\n  AC2828_ProviderPortalMembersPage = \"AC-2828_provider-portal-members-page\",\n  IdpAutoSubmitLogin = \"idp-auto-submit-login\",\n  DeviceTrustLogging = \"pm-8285-device-trust-logging\",\n  AuthenticatorTwoFactorToken = \"authenticator-2fa-token\",\n  UnauthenticatedExtensionUIRefresh = \"unauth-ui-refresh\",\n  EnableUpgradePasswordManagerSub = \"AC-2708-upgrade-password-manager-sub\",\n  GenerateIdentityFillScriptRefactor = \"generate-identity-fill-script-refactor\",\n  EnableNewCardCombinedExpiryAutofill = \"enable-new-card-combined-expiry-autofill\",\n  DelayFido2PageScriptInitWithinMv2 = \"delay-fido2-page-script-init-within-mv2\",\n  AccountDeprovisioning = \"pm-10308-account-deprovisioning\",\n  NotificationBarAddLoginImprovements = \"notification-bar-add-login-improvements\",\n  AC2476_DeprecateStripeSourcesAPI = \"AC-2476-deprecate-stripe-sources-api\",\n  CipherKeyEncryption = \"cipher-key-encryption\",\n}\n\nexport type AllowedFeatureFlagTypes = boolean | number | string;\n\n// Helper to ensure the value is treated as a boolean.\nconst FALSE = false as boolean;\n\n/**\n * Default value for feature flags.\n *\n * DO NOT enable previously disabled flags, REMOVE them instead.\n * We support true as a value as we prefer flags to \"enable\" not \"disable\".\n */\nexport const DefaultFeatureFlagValue = {\n  [FeatureFlag.BrowserFilelessImport]: FALSE,\n  [FeatureFlag.ItemShare]: FALSE,\n  [FeatureFlag.GeneratorToolsModernization]: FALSE,\n  [FeatureFlag.EnableConsolidatedBilling]: FALSE,\n  [FeatureFlag.AC1795_UpdatedSubscriptionStatusSection]: FALSE,\n  [FeatureFlag.EnableDeleteProvider]: FALSE,\n  [FeatureFlag.ExtensionRefresh]: FALSE,\n  [FeatureFlag.PersistPopupView]: FALSE,\n  [FeatureFlag.RestrictProviderAccess]: FALSE,\n  [FeatureFlag.PM4154_BulkEncryptionService]: FALSE,\n  [FeatureFlag.UseTreeWalkerApiForPageDetailsCollection]: FALSE,\n  [FeatureFlag.EmailVerification]: FALSE,\n  [FeatureFlag.InlineMenuFieldQualification]: FALSE,\n  [FeatureFlag.MemberAccessReport]: FALSE,\n  [FeatureFlag.TwoFactorComponentRefactor]: FALSE,\n  [FeatureFlag.EnableTimeThreshold]: FALSE,\n  [FeatureFlag.InlineMenuPositioningImprovements]: FALSE,\n  [FeatureFlag.ProviderClientVaultPrivacyBanner]: FALSE,\n  [FeatureFlag.VaultBulkManagementAction]: FALSE,\n  [FeatureFlag.AC2828_ProviderPortalMembersPage]: FALSE,\n  [FeatureFlag.IdpAutoSubmitLogin]: FALSE,\n  [FeatureFlag.DeviceTrustLogging]: FALSE,\n  [FeatureFlag.AuthenticatorTwoFactorToken]: FALSE,\n  [FeatureFlag.UnauthenticatedExtensionUIRefresh]: FALSE,\n  [FeatureFlag.EnableUpgradePasswordManagerSub]: FALSE,\n  [FeatureFlag.GenerateIdentityFillScriptRefactor]: FALSE,\n  [FeatureFlag.EnableNewCardCombinedExpiryAutofill]: FALSE,\n  [FeatureFlag.DelayFido2PageScriptInitWithinMv2]: FALSE,\n  [FeatureFlag.AccountDeprovisioning]: FALSE,\n  [FeatureFlag.NotificationBarAddLoginImprovements]: FALSE,\n  [FeatureFlag.AC2476_DeprecateStripeSourcesAPI]: FALSE,\n  [FeatureFlag.CipherKeyEncryption]: FALSE,\n} satisfies Record<FeatureFlag, AllowedFeatureFlagTypes>;\n\nexport type DefaultFeatureFlagValueType = typeof DefaultFeatureFlagValue;\n\nexport type FeatureFlagValueType<Flag extends FeatureFlag> = DefaultFeatureFlagValueType[Flag];\n","export enum OrganizationApiKeyType {\n  Default = 0,\n  BillingSync = 1,\n  Scim = 2,\n}\n","export enum OrganizationConnectionType {\n  CloudBillingSync = 1,\n  Scim = 2,\n}\n","export enum OrganizationUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1,\n}\n","export enum OrganizationUserType {\n  Owner = 0,\n  Admin = 1,\n  User = 2,\n  // Manager = 3 has been intentionally permanently deleted\n  Custom = 4,\n}\n","export enum PolicyType {\n  TwoFactorAuthentication = 0, // Requires users to have 2fa enabled\n  MasterPassword = 1, // Sets minimum requirements for master password complexity\n  PasswordGenerator = 2, // Sets minimum requirements/default type for generated passwords/passphrases\n  SingleOrg = 3, // Allows users to only be apart of one organization\n  RequireSso = 4, // Requires users to authenticate with SSO\n  PersonalOwnership = 5, // Disables personal vault ownership for adding/cloning items\n  DisableSend = 6, // Disables the ability to create and edit Bitwarden Sends\n  SendOptions = 7, // Sets restrictions or defaults for Bitwarden Sends\n  ResetPassword = 8, // Allows orgs to use reset password : also can enable auto-enrollment during invite flow\n  MaximumVaultTimeout = 9, // Sets the maximum allowed vault timeout\n  DisablePersonalVaultExport = 10, // Disable personal vault export\n  ActivateAutofill = 11, // Activates autofill with page load on the browser extension\n  AutomaticAppLogIn = 12, // Enables automatic log in of apps from configured identity provider\n}\n","export enum ProviderType {\n  Msp = 0,\n  Reseller = 1,\n}\n","export enum ProviderUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1, // Not used, compile-time support only\n}\n","export enum ProviderUserType {\n  ProviderAdmin = 0,\n  ServiceUser = 1,\n}\n","export enum ScimProviderType {\n  Default = 0,\n  AzureAd = 1,\n  Okta = 2,\n  OneLogin = 3,\n  JumpCloud = 4,\n  GoogleWorkspace = 5,\n  Rippling = 6,\n}\n","export enum ProviderStatusType {\n  Pending = 0,\n  Created = 1,\n  Billable = 2,\n}\n","import { combineLatest, firstValueFrom, map } from \"rxjs\";\n\nimport { VaultTimeoutService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout.service\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nexport abstract class LockService {\n  /**\n   * Locks all accounts.\n   */\n  abstract lockAll(): Promise<void>;\n}\n\nexport class DefaultLockService implements LockService {\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly vaultTimeoutService: VaultTimeoutService,\n  ) {}\n\n  async lockAll() {\n    const accounts = await firstValueFrom(\n      combineLatest([this.accountService.activeAccount$, this.accountService.accounts$]).pipe(\n        map(([activeAccount, accounts]) => {\n          const otherAccounts = Object.keys(accounts) as UserId[];\n\n          if (activeAccount == null) {\n            return { activeAccount: null, otherAccounts: otherAccounts };\n          }\n\n          return {\n            activeAccount: activeAccount.id,\n            otherAccounts: otherAccounts.filter((accountId) => accountId !== activeAccount.id),\n          };\n        }),\n      ),\n    );\n\n    for (const otherAccount of accounts.otherAccounts) {\n      await this.vaultTimeoutService.lock(otherAccount);\n    }\n\n    // Do the active account last in case we ever try to route the user on lock\n    // that way this whole operation will be complete before that routing\n    // could take place.\n    if (accounts.activeAccount != null) {\n      await this.vaultTimeoutService.lock(accounts.activeAccount);\n    }\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { ProductTierType } from \"../../../billing/enums\";\nimport { OrganizationUserStatusType, OrganizationUserType, ProviderType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\nimport { ProfileOrganizationResponse } from \"../response/profile-organization.response\";\n\nexport class OrganizationData {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  organizationUserId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  isProviderUser: boolean;\n  isMember: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  productTierType: ProductTierType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n  limitCollectionCreationDeletion: boolean;\n  allowAdminAccessToAllCollectionItems: boolean;\n\n  constructor(\n    response?: ProfileOrganizationResponse,\n    options?: {\n      isMember: boolean;\n      isProviderUser: boolean;\n    },\n  ) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.usePolicies = response.usePolicies;\n    this.useGroups = response.useGroups;\n    this.useDirectory = response.useDirectory;\n    this.useEvents = response.useEvents;\n    this.useTotp = response.useTotp;\n    this.use2fa = response.use2fa;\n    this.useApi = response.useApi;\n    this.useSso = response.useSso;\n    this.useKeyConnector = response.useKeyConnector;\n    this.useScim = response.useScim;\n    this.useCustomPermissions = response.useCustomPermissions;\n    this.useResetPassword = response.useResetPassword;\n    this.useSecretsManager = response.useSecretsManager;\n    this.usePasswordManager = response.usePasswordManager;\n    this.useActivateAutofillPolicy = response.useActivateAutofillPolicy;\n    this.selfHost = response.selfHost;\n    this.usersGetPremium = response.usersGetPremium;\n    this.seats = response.seats;\n    this.maxCollections = response.maxCollections;\n    this.maxStorageGb = response.maxStorageGb;\n    this.ssoBound = response.ssoBound;\n    this.identifier = response.identifier;\n    this.permissions = response.permissions;\n    this.resetPasswordEnrolled = response.resetPasswordEnrolled;\n    this.userId = response.userId;\n    this.organizationUserId = response.organizationUserId;\n    this.hasPublicAndPrivateKeys = response.hasPublicAndPrivateKeys;\n    this.providerId = response.providerId;\n    this.providerName = response.providerName;\n    this.providerType = response.providerType;\n    this.familySponsorshipFriendlyName = response.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = response.familySponsorshipAvailable;\n    this.productTierType = response.productTierType;\n    this.keyConnectorEnabled = response.keyConnectorEnabled;\n    this.keyConnectorUrl = response.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = response.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = response.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = response.familySponsorshipToDelete;\n    this.accessSecretsManager = response.accessSecretsManager;\n    this.limitCollectionCreationDeletion = response.limitCollectionCreationDeletion;\n    this.allowAdminAccessToAllCollectionItems = response.allowAdminAccessToAllCollectionItems;\n\n    this.isMember = options.isMember;\n    this.isProviderUser = options.isProviderUser;\n  }\n\n  static fromJSON(obj: Jsonify<OrganizationData>) {\n    return Object.assign(new OrganizationData(), obj, {\n      familySponsorshipLastSyncDate:\n        obj.familySponsorshipLastSyncDate != null\n          ? new Date(obj.familySponsorshipLastSyncDate)\n          : obj.familySponsorshipLastSyncDate,\n      familySponsorshipValidUntil:\n        obj.familySponsorshipValidUntil != null\n          ? new Date(obj.familySponsorshipValidUntil)\n          : obj.familySponsorshipValidUntil,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { ProductTierType } from \"../../../billing/enums\";\nimport { OrganizationUserStatusType, OrganizationUserType, ProviderType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\nimport { OrganizationData } from \"../data/organization.data\";\n\nexport class Organization {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n\n  /**\n   * The member's role in the organization.\n   * Avoid using this for permission checks - use the getters instead (e.g. isOwner, isAdmin, canManageX), because they\n   * properly handle permission inheritance and relationships.\n   */\n  type: OrganizationUserType;\n\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  organizationUserId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  /**\n   * Indicates that a user is a ProviderUser for the organization\n   */\n  isProviderUser: boolean;\n  /**\n   * Indicates that a user is a member for the organization (may be `false` if they have access via a Provider only)\n   */\n  isMember: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  productTierType: ProductTierType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n  /**\n   * Refers to the ability for an organization to limit collection creation and deletion to owners and admins only\n   */\n  limitCollectionCreationDeletion: boolean;\n  /**\n   * Refers to the ability for an owner/admin to access all collection items, regardless of assigned collections\n   */\n  allowAdminAccessToAllCollectionItems: boolean;\n\n  constructor(obj?: OrganizationData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.usePolicies = obj.usePolicies;\n    this.useGroups = obj.useGroups;\n    this.useDirectory = obj.useDirectory;\n    this.useEvents = obj.useEvents;\n    this.useTotp = obj.useTotp;\n    this.use2fa = obj.use2fa;\n    this.useApi = obj.useApi;\n    this.useSso = obj.useSso;\n    this.useKeyConnector = obj.useKeyConnector;\n    this.useScim = obj.useScim;\n    this.useCustomPermissions = obj.useCustomPermissions;\n    this.useResetPassword = obj.useResetPassword;\n    this.useSecretsManager = obj.useSecretsManager;\n    this.usePasswordManager = obj.usePasswordManager;\n    this.useActivateAutofillPolicy = obj.useActivateAutofillPolicy;\n    this.selfHost = obj.selfHost;\n    this.usersGetPremium = obj.usersGetPremium;\n    this.seats = obj.seats;\n    this.maxCollections = obj.maxCollections;\n    this.maxStorageGb = obj.maxStorageGb;\n    this.ssoBound = obj.ssoBound;\n    this.identifier = obj.identifier;\n    this.permissions = obj.permissions;\n    this.resetPasswordEnrolled = obj.resetPasswordEnrolled;\n    this.userId = obj.userId;\n    this.organizationUserId = obj.organizationUserId;\n    this.hasPublicAndPrivateKeys = obj.hasPublicAndPrivateKeys;\n    this.providerId = obj.providerId;\n    this.providerName = obj.providerName;\n    this.providerType = obj.providerType;\n    this.isProviderUser = obj.isProviderUser;\n    this.isMember = obj.isMember;\n    this.familySponsorshipFriendlyName = obj.familySponsorshipFriendlyName;\n    this.familySponsorshipAvailable = obj.familySponsorshipAvailable;\n    this.productTierType = obj.productTierType;\n    this.keyConnectorEnabled = obj.keyConnectorEnabled;\n    this.keyConnectorUrl = obj.keyConnectorUrl;\n    this.familySponsorshipLastSyncDate = obj.familySponsorshipLastSyncDate;\n    this.familySponsorshipValidUntil = obj.familySponsorshipValidUntil;\n    this.familySponsorshipToDelete = obj.familySponsorshipToDelete;\n    this.accessSecretsManager = obj.accessSecretsManager;\n    this.limitCollectionCreationDeletion = obj.limitCollectionCreationDeletion;\n    this.allowAdminAccessToAllCollectionItems = obj.allowAdminAccessToAllCollectionItems;\n  }\n\n  get canAccess() {\n    if (this.isOwner) {\n      return true;\n    }\n    return this.enabled && this.status === OrganizationUserStatusType.Confirmed;\n  }\n\n  /**\n   * Whether a user has Admin permissions or greater\n   */\n  get isAdmin() {\n    return this.type === OrganizationUserType.Admin || this.isOwner;\n  }\n\n  /**\n   * Whether a user has Owner permissions (including ProviderUsers)\n   */\n  get isOwner() {\n    return this.type === OrganizationUserType.Owner || this.isProviderUser;\n  }\n\n  get canAccessEventLogs() {\n    return (this.isAdmin || this.permissions.accessEventLogs) && this.useEvents;\n  }\n\n  get canAccessImportExport() {\n    return this.isAdmin || this.permissions.accessImportExport;\n  }\n\n  get canAccessReports() {\n    return this.isAdmin || this.permissions.accessReports;\n  }\n\n  get canCreateNewCollections() {\n    return (\n      !this.limitCollectionCreationDeletion || this.isAdmin || this.permissions.createNewCollections\n    );\n  }\n\n  get canEditAnyCollection() {\n    // The allowAdminAccessToAllCollectionItems flag can restrict admins\n    // Providers and custom users with canEditAnyCollection are not affected by allowAdminAccessToAllCollectionItems flag\n    return (\n      this.isProviderUser ||\n      (this.type === OrganizationUserType.Custom && this.permissions.editAnyCollection) ||\n      (this.allowAdminAccessToAllCollectionItems && this.isAdmin)\n    );\n  }\n\n  get canEditUnmanagedCollections() {\n    // Any admin or custom user with editAnyCollection permission can edit unmanaged collections\n    return this.isAdmin || this.permissions.editAnyCollection;\n  }\n\n  canEditUnassignedCiphers(restrictProviderAccessFlagEnabled: boolean) {\n    // Providers can access items until the restrictProviderAccess flag is enabled\n    // After the flag is enabled and removed, this block will be deleted\n    // so that they permanently lose access to items\n    if (this.isProviderUser && !restrictProviderAccessFlagEnabled) {\n      return true;\n    }\n\n    return (\n      this.type === OrganizationUserType.Admin ||\n      this.type === OrganizationUserType.Owner ||\n      this.permissions.editAnyCollection\n    );\n  }\n\n  canEditAllCiphers(restrictProviderAccessFlagEnabled: boolean) {\n    // Providers can access items until the restrictProviderAccess flag is enabled\n    // After the flag is enabled and removed, this block will be deleted\n    // so that they permanently lose access to items\n    if (this.isProviderUser && !restrictProviderAccessFlagEnabled) {\n      return true;\n    }\n\n    // The allowAdminAccessToAllCollectionItems flag can restrict admins\n    // Custom users with canEditAnyCollection are not affected by allowAdminAccessToAllCollectionItems flag\n    return (\n      (this.type === OrganizationUserType.Custom && this.permissions.editAnyCollection) ||\n      (this.allowAdminAccessToAllCollectionItems &&\n        (this.type === OrganizationUserType.Admin || this.type === OrganizationUserType.Owner))\n    );\n  }\n\n  /**\n   * @returns True if the user can delete any collection\n   */\n  get canDeleteAnyCollection() {\n    // Providers and Users with DeleteAnyCollection permission can always delete collections\n    if (this.isProviderUser || this.permissions.deleteAnyCollection) {\n      return true;\n    }\n\n    // If AllowAdminAccessToAllCollectionItems is true, Owners and Admins can delete any collection, regardless of LimitCollectionCreationDeletion setting\n    // Using explicit type checks because provider users are handled above and this mimics the server's permission checks closely\n    if (this.allowAdminAccessToAllCollectionItems) {\n      return this.type == OrganizationUserType.Owner || this.type == OrganizationUserType.Admin;\n    }\n\n    return false;\n  }\n\n  /**\n   * Whether the user can view all collection information, such as collection name and access.\n   * This does not indicate that the user can view items inside any collection - for that, see {@link canEditAllCiphers}\n   */\n  get canViewAllCollections() {\n    // Admins can always see all collections even if collection management settings prevent them from editing them or seeing items\n    return (\n      this.isAdmin || this.permissions.editAnyCollection || this.permissions.deleteAnyCollection\n    );\n  }\n\n  get canManageGroups() {\n    return (this.isAdmin || this.permissions.manageGroups) && this.useGroups;\n  }\n\n  get canManageSso() {\n    return (this.isAdmin || this.permissions.manageSso) && this.useSso;\n  }\n\n  get canManageDomainVerification() {\n    return (this.isAdmin || this.permissions.manageSso) && this.useSso;\n  }\n\n  get canManageScim() {\n    return (this.isAdmin || this.permissions.manageScim) && this.useScim;\n  }\n\n  get canManagePolicies() {\n    return (this.isAdmin || this.permissions.managePolicies) && this.usePolicies;\n  }\n\n  get canManageUsers() {\n    return this.isAdmin || this.permissions.manageUsers;\n  }\n\n  get canManageUsersPassword() {\n    return this.isAdmin || this.permissions.manageResetPassword;\n  }\n\n  get canManageDeviceApprovals() {\n    return (this.isAdmin || this.permissions.manageResetPassword) && this.useSso;\n  }\n\n  get isExemptFromPolicies() {\n    return this.canManagePolicies;\n  }\n\n  get canViewSubscription() {\n    if (this.canEditSubscription) {\n      return true;\n    }\n\n    return this.hasProvider && this.providerType === ProviderType.Msp\n      ? this.isProviderUser\n      : this.isOwner;\n  }\n\n  get canEditSubscription() {\n    return this.hasProvider ? this.isProviderUser : this.isOwner;\n  }\n\n  get canEditPaymentMethods() {\n    return this.canEditSubscription;\n  }\n\n  get canViewBillingHistory() {\n    return this.canEditSubscription;\n  }\n\n  get hasProvider() {\n    return this.providerId != null || this.providerName != null;\n  }\n\n  get hasReseller() {\n    return this.hasProvider && this.providerType === ProviderType.Reseller;\n  }\n\n  get canAccessSecretsManager() {\n    return this.useSecretsManager && this.accessSecretsManager;\n  }\n\n  get isFreeOrg() {\n    // return true if organization needs to be upgraded from a free org\n    return !this.useTotp;\n  }\n\n  get canManageSponsorships() {\n    return this.familySponsorshipAvailable || this.familySponsorshipFriendlyName !== null;\n  }\n\n  static fromJSON(json: Jsonify<Organization>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new Organization(), json, {\n      familySponsorshipLastSyncDate: new Date(json.familySponsorshipLastSyncDate),\n      familySponsorshipValidUntil: new Date(json.familySponsorshipValidUntil),\n    });\n  }\n}\n","import { map, Observable, firstValueFrom } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { ORGANIZATIONS_DISK, StateProvider, UserKeyDefinition } from \"../../../platform/state\";\nimport { UserId } from \"../../../types/guid\";\nimport { InternalOrganizationServiceAbstraction } from \"../../abstractions/organization/organization.service.abstraction\";\nimport { OrganizationData } from \"../../models/data/organization.data\";\nimport { Organization } from \"../../models/domain/organization\";\n\n/**\n * The `KeyDefinition` for accessing organization lists in application state.\n * @todo Ideally this wouldn't require a `fromJSON()` call, but `OrganizationData`\n * has some properties that contain functions. This should probably get\n * cleaned up.\n */\nexport const ORGANIZATIONS = UserKeyDefinition.record<OrganizationData>(\n  ORGANIZATIONS_DISK,\n  \"organizations\",\n  {\n    deserializer: (obj: Jsonify<OrganizationData>) => OrganizationData.fromJSON(obj),\n    clearOn: [\"logout\"],\n  },\n);\n\n/**\n * Filter out organizations from an observable that __do not__ offer a\n * families-for-enterprise sponsorship to members.\n * @returns a function that can be used in `Observable<Organization[]>` pipes,\n * like `organizationService.organizations$`\n */\nfunction mapToExcludeOrganizationsWithoutFamilySponsorshipSupport() {\n  return map<Organization[], Organization[]>((orgs) => orgs.filter((o) => o.canManageSponsorships));\n}\n\n/**\n * Filter out organizations from an observable that the organization user\n * __is not__ a direct member of. This will exclude organizations only\n * accessible as a provider.\n * @returns a function that can be used in `Observable<Organization[]>` pipes,\n * like `organizationService.organizations$`\n */\nfunction mapToExcludeProviderOrganizations() {\n  return map<Organization[], Organization[]>((orgs) => orgs.filter((o) => o.isMember));\n}\n\n/**\n * Map an observable stream of organizations down to a boolean indicating\n * if any organizations exist (`orgs.length > 0`).\n * @returns a function that can be used in `Observable<Organization[]>` pipes,\n * like `organizationService.organizations$`\n */\nfunction mapToBooleanHasAnyOrganizations() {\n  return map<Organization[], boolean>((orgs) => orgs.length > 0);\n}\n\n/**\n * Map an observable stream of organizations down to a single organization.\n * @param `organizationId` The ID of the organization you'd like to subscribe to\n * @returns a function that can be used in `Observable<Organization[]>` pipes,\n * like `organizationService.organizations$`\n */\nfunction mapToSingleOrganization(organizationId: string) {\n  return map<Organization[], Organization>((orgs) => orgs?.find((o) => o.id === organizationId));\n}\n\nexport class OrganizationService implements InternalOrganizationServiceAbstraction {\n  organizations$: Observable<Organization[]> = this.getOrganizationsFromState$();\n  memberOrganizations$: Observable<Organization[]> = this.organizations$.pipe(\n    mapToExcludeProviderOrganizations(),\n  );\n\n  constructor(private stateProvider: StateProvider) {}\n\n  get$(id: string): Observable<Organization | undefined> {\n    return this.organizations$.pipe(mapToSingleOrganization(id));\n  }\n\n  getAll$(userId?: UserId): Observable<Organization[]> {\n    return this.getOrganizationsFromState$(userId);\n  }\n\n  async getAll(userId?: string): Promise<Organization[]> {\n    return await firstValueFrom(this.getOrganizationsFromState$(userId as UserId));\n  }\n\n  canManageSponsorships$ = this.organizations$.pipe(\n    mapToExcludeOrganizationsWithoutFamilySponsorshipSupport(),\n    mapToBooleanHasAnyOrganizations(),\n  );\n\n  async hasOrganizations(): Promise<boolean> {\n    return await firstValueFrom(this.organizations$.pipe(mapToBooleanHasAnyOrganizations()));\n  }\n\n  async upsert(organization: OrganizationData, userId?: UserId): Promise<void> {\n    await this.stateFor(userId).update((existingOrganizations) => {\n      const organizations = existingOrganizations ?? {};\n      organizations[organization.id] = organization;\n      return organizations;\n    });\n  }\n\n  async get(id: string): Promise<Organization> {\n    return await firstValueFrom(this.organizations$.pipe(mapToSingleOrganization(id)));\n  }\n\n  /**\n   * @deprecated For the CLI only\n   * @param id id of the organization\n   */\n  async getFromState(id: string): Promise<Organization> {\n    return await firstValueFrom(this.organizations$.pipe(mapToSingleOrganization(id)));\n  }\n\n  async replace(organizations: { [id: string]: OrganizationData }, userId?: UserId): Promise<void> {\n    await this.stateFor(userId).update(() => organizations);\n  }\n\n  // Ideally this method would be renamed to organizations$() and the\n  // $organizations observable as it stands would be removed. This will\n  // require updates to callers, and so this method exists as a temporary\n  // workaround until we have time & a plan to update callers.\n  //\n  // It can be thought of as \"organizations$ but with a userId option\".\n  private getOrganizationsFromState$(userId?: UserId): Observable<Organization[] | undefined> {\n    return this.stateFor(userId).state$.pipe(this.mapOrganizationRecordToArray());\n  }\n\n  /**\n   * Accepts a record of `OrganizationData`, which is how we store the\n   * organization list as a JSON object on disk, to an array of\n   * `Organization`, which is how the data is published to callers of the\n   * service.\n   * @returns a function that can be used to pipe organization data from\n   * stored state to an exposed object easily consumable by others.\n   */\n  private mapOrganizationRecordToArray() {\n    return map<Record<string, OrganizationData>, Organization[]>((orgs) =>\n      Object.values(orgs ?? {})?.map((o) => new Organization(o)),\n    );\n  }\n\n  /**\n   * Fetches the organization list from on disk state for the specified user.\n   * @param userId the user ID to fetch the organization list for. Defaults to\n   * the currently active user.\n   * @returns an observable of organization state as it is stored on disk.\n   */\n  private stateFor(userId?: UserId) {\n    return userId\n      ? this.stateProvider.getUser(userId, ORGANIZATIONS)\n      : this.stateProvider.getActive(ORGANIZATIONS);\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class ListResponse<T> extends BaseResponse {\n  data: T[];\n  continuationToken: string;\n\n  constructor(response: any, t: new (dataResponse: any) => T) {\n    super(response);\n    const data = this.getResponseProperty(\"Data\");\n    this.data = data == null ? [] : data.map((dr: any) => new t(dr));\n    this.continuationToken = this.getResponseProperty(\"ContinuationToken\");\n  }\n}\n","import { PolicyId } from \"../../../types/guid\";\nimport { PolicyType } from \"../../enums\";\nimport { Policy } from \"../domain/policy\";\nimport { PolicyResponse } from \"../response/policy.response\";\n\nexport class PolicyData {\n  id: PolicyId;\n  organizationId: string;\n  type: PolicyType;\n  data: Record<string, string | number | boolean>;\n  enabled: boolean;\n\n  constructor(response?: PolicyResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.type = response.type;\n    this.data = response.data;\n    this.enabled = response.enabled;\n  }\n\n  static fromPolicy(policy: Policy): PolicyData {\n    return Object.assign(new PolicyData(), policy);\n  }\n}\n","import { ListResponse } from \"../../../models/response/list.response\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { PolicyId } from \"../../../types/guid\";\nimport { PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../data/policy.data\";\nimport { PolicyResponse } from \"../response/policy.response\";\n\nexport class Policy extends Domain {\n  id: PolicyId;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n\n  /**\n   * Warning: a user can be exempt from a policy even if the policy is enabled.\n   * @see {@link PolicyService} has methods to tell you whether a policy applies to a user.\n   */\n  enabled: boolean;\n\n  constructor(obj?: PolicyData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.organizationId = obj.organizationId;\n    this.type = obj.type;\n    this.data = obj.data;\n    this.enabled = obj.enabled;\n  }\n\n  static fromResponse(response: PolicyResponse): Policy {\n    return new Policy(new PolicyData(response));\n  }\n\n  static fromListResponse(response: ListResponse<PolicyResponse>): Policy[] | undefined {\n    return response.data?.map((d) => Policy.fromResponse(d)) ?? undefined;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { PolicyId } from \"../../../types/guid\";\nimport { PolicyType } from \"../../enums\";\n\nexport class PolicyResponse extends BaseResponse {\n  id: PolicyId;\n  organizationId: string;\n  type: PolicyType;\n  data: any;\n  enabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.data = this.getResponseProperty(\"Data\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { ApiService } from \"../../../abstractions/api.service\";\nimport { HttpStatusCode } from \"../../../enums\";\nimport { ErrorResponse } from \"../../../models/response/error.response\";\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { PolicyApiServiceAbstraction } from \"../../abstractions/policy/policy-api.service.abstraction\";\nimport { InternalPolicyService } from \"../../abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../../models/data/policy.data\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/master-password-policy-options\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { PolicyRequest } from \"../../models/request/policy.request\";\nimport { PolicyResponse } from \"../../models/response/policy.response\";\n\nexport class PolicyApiService implements PolicyApiServiceAbstraction {\n  constructor(\n    private policyService: InternalPolicyService,\n    private apiService: ApiService,\n  ) {}\n\n  async getPolicy(organizationId: string, type: PolicyType): Promise<PolicyResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      null,\n      true,\n      true,\n    );\n    return new PolicyResponse(r);\n  }\n\n  async getPolicies(organizationId: string): Promise<ListResponse<PolicyResponse>> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies\",\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, PolicyResponse);\n  }\n\n  async getPoliciesByToken(\n    organizationId: string,\n    token: string,\n    email: string,\n    organizationUserId: string,\n  ): Promise<Policy[] | undefined> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" +\n        organizationId +\n        \"/policies/token?\" +\n        \"token=\" +\n        encodeURIComponent(token) +\n        \"&email=\" +\n        Utils.encodeRFC3986URIComponent(email) +\n        \"&organizationUserId=\" +\n        organizationUserId,\n      null,\n      false,\n      true,\n    );\n    return Policy.fromListResponse(new ListResponse(r, PolicyResponse));\n  }\n\n  private async getMasterPasswordPolicyResponseForOrgUser(\n    organizationId: string,\n  ): Promise<PolicyResponse> {\n    const response = await this.apiService.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/policies/master-password\",\n      null,\n      true,\n      true,\n    );\n\n    return new PolicyResponse(response);\n  }\n\n  async getMasterPasswordPolicyOptsForOrgUser(\n    orgId: string,\n  ): Promise<MasterPasswordPolicyOptions | null> {\n    try {\n      const masterPasswordPolicyResponse =\n        await this.getMasterPasswordPolicyResponseForOrgUser(orgId);\n\n      const masterPasswordPolicy = Policy.fromResponse(masterPasswordPolicyResponse);\n\n      if (!masterPasswordPolicy) {\n        return null;\n      }\n\n      return await firstValueFrom(\n        this.policyService.masterPasswordPolicyOptions$([masterPasswordPolicy]),\n      );\n    } catch (error) {\n      // If policy not found, return null\n      if (error instanceof ErrorResponse && error.statusCode === HttpStatusCode.NotFound) {\n        return null;\n      }\n      // otherwise rethrow error\n      throw error;\n    }\n  }\n\n  async putPolicy(organizationId: string, type: PolicyType, request: PolicyRequest): Promise<any> {\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/policies/\" + type,\n      request,\n      true,\n      true,\n    );\n    const response = new PolicyResponse(r);\n    const data = new PolicyData(response);\n    await this.policyService.upsert(data);\n  }\n}\n","import Domain from \"../../../platform/models/domain/domain-base\";\n\nexport class ResetPasswordPolicyOptions extends Domain {\n  autoEnrollEnabled = false;\n}\n","import { combineLatest, firstValueFrom, map, Observable, of } from \"rxjs\";\n\nimport { UserKeyDefinition, POLICIES_DISK, StateProvider } from \"../../../platform/state\";\nimport { PolicyId, UserId } from \"../../../types/guid\";\nimport { OrganizationService } from \"../../abstractions/organization/organization.service.abstraction\";\nimport { InternalPolicyService as InternalPolicyServiceAbstraction } from \"../../abstractions/policy/policy.service.abstraction\";\nimport { OrganizationUserStatusType, PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../../models/data/policy.data\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/master-password-policy-options\";\nimport { Organization } from \"../../models/domain/organization\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../../models/domain/reset-password-policy-options\";\n\nconst policyRecordToArray = (policiesMap: { [id: string]: PolicyData }) =>\n  Object.values(policiesMap || {}).map((f) => new Policy(f));\n\nexport const POLICIES = UserKeyDefinition.record<PolicyData, PolicyId>(POLICIES_DISK, \"policies\", {\n  deserializer: (policyData) => policyData,\n  clearOn: [\"logout\"],\n});\n\nexport class PolicyService implements InternalPolicyServiceAbstraction {\n  private activeUserPolicyState = this.stateProvider.getActive(POLICIES);\n  private activeUserPolicies$ = this.activeUserPolicyState.state$.pipe(\n    map((policyData) => policyRecordToArray(policyData)),\n  );\n\n  policies$ = this.activeUserPolicies$;\n\n  constructor(\n    private stateProvider: StateProvider,\n    private organizationService: OrganizationService,\n  ) {}\n\n  get$(policyType: PolicyType): Observable<Policy> {\n    const filteredPolicies$ = this.activeUserPolicies$.pipe(\n      map((policies) => policies.filter((p) => p.type === policyType)),\n    );\n\n    return combineLatest([filteredPolicies$, this.organizationService.organizations$]).pipe(\n      map(\n        ([policies, organizations]) =>\n          this.enforcedPolicyFilter(policies, organizations)?.at(0) ?? null,\n      ),\n    );\n  }\n\n  getAll$(policyType: PolicyType, userId?: UserId) {\n    const filteredPolicies$ = this.stateProvider.getUserState$(POLICIES, userId).pipe(\n      map((policyData) => policyRecordToArray(policyData)),\n      map((policies) => policies.filter((p) => p.type === policyType)),\n    );\n\n    return combineLatest([filteredPolicies$, this.organizationService.getAll$(userId)]).pipe(\n      map(([policies, organizations]) => this.enforcedPolicyFilter(policies, organizations)),\n    );\n  }\n\n  async getAll(policyType: PolicyType) {\n    return await firstValueFrom(\n      this.policies$.pipe(map((policies) => policies.filter((p) => p.type === policyType))),\n    );\n  }\n\n  policyAppliesToActiveUser$(policyType: PolicyType) {\n    return this.get$(policyType).pipe(map((policy) => policy != null));\n  }\n\n  async policyAppliesToUser(policyType: PolicyType) {\n    return await firstValueFrom(this.policyAppliesToActiveUser$(policyType));\n  }\n\n  private enforcedPolicyFilter(policies: Policy[], organizations: Organization[]) {\n    const orgDict = Object.fromEntries(organizations.map((o) => [o.id, o]));\n    return policies.filter((policy) => {\n      const organization = orgDict[policy.organizationId];\n\n      // This shouldn't happen, i.e. the user should only have policies for orgs they are a member of\n      // But if it does, err on the side of enforcing the policy\n      if (organization == null) {\n        return true;\n      }\n\n      return (\n        policy.enabled &&\n        organization.status >= OrganizationUserStatusType.Accepted &&\n        organization.usePolicies &&\n        !this.isExemptFromPolicy(policy.type, organization)\n      );\n    });\n  }\n\n  masterPasswordPolicyOptions$(policies?: Policy[]): Observable<MasterPasswordPolicyOptions> {\n    const observable = policies ? of(policies) : this.policies$;\n    return observable.pipe(\n      map((obsPolicies) => {\n        let enforcedOptions: MasterPasswordPolicyOptions = null;\n        const filteredPolicies = obsPolicies.filter((p) => p.type === PolicyType.MasterPassword);\n\n        if (filteredPolicies == null || filteredPolicies.length === 0) {\n          return enforcedOptions;\n        }\n\n        filteredPolicies.forEach((currentPolicy) => {\n          if (!currentPolicy.enabled || currentPolicy.data == null) {\n            return;\n          }\n\n          if (enforcedOptions == null) {\n            enforcedOptions = new MasterPasswordPolicyOptions();\n          }\n\n          if (\n            currentPolicy.data.minComplexity != null &&\n            currentPolicy.data.minComplexity > enforcedOptions.minComplexity\n          ) {\n            enforcedOptions.minComplexity = currentPolicy.data.minComplexity;\n          }\n\n          if (\n            currentPolicy.data.minLength != null &&\n            currentPolicy.data.minLength > enforcedOptions.minLength\n          ) {\n            enforcedOptions.minLength = currentPolicy.data.minLength;\n          }\n\n          if (currentPolicy.data.requireUpper) {\n            enforcedOptions.requireUpper = true;\n          }\n\n          if (currentPolicy.data.requireLower) {\n            enforcedOptions.requireLower = true;\n          }\n\n          if (currentPolicy.data.requireNumbers) {\n            enforcedOptions.requireNumbers = true;\n          }\n\n          if (currentPolicy.data.requireSpecial) {\n            enforcedOptions.requireSpecial = true;\n          }\n\n          if (currentPolicy.data.enforceOnLogin) {\n            enforcedOptions.enforceOnLogin = true;\n          }\n        });\n\n        return enforcedOptions;\n      }),\n    );\n  }\n\n  evaluateMasterPassword(\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions: MasterPasswordPolicyOptions,\n  ): boolean {\n    if (enforcedPolicyOptions == null) {\n      return true;\n    }\n\n    if (\n      enforcedPolicyOptions.minComplexity > 0 &&\n      enforcedPolicyOptions.minComplexity > passwordStrength\n    ) {\n      return false;\n    }\n\n    if (\n      enforcedPolicyOptions.minLength > 0 &&\n      enforcedPolicyOptions.minLength > newPassword.length\n    ) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireUpper && newPassword.toLocaleLowerCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireLower && newPassword.toLocaleUpperCase() === newPassword) {\n      return false;\n    }\n\n    if (enforcedPolicyOptions.requireNumbers && !/[0-9]/.test(newPassword)) {\n      return false;\n    }\n\n    // eslint-disable-next-line\n    if (enforcedPolicyOptions.requireSpecial && !/[!@#$%\\^&*]/g.test(newPassword)) {\n      return false;\n    }\n\n    return true;\n  }\n\n  getResetPasswordPolicyOptions(\n    policies: Policy[],\n    orgId: string,\n  ): [ResetPasswordPolicyOptions, boolean] {\n    const resetPasswordPolicyOptions = new ResetPasswordPolicyOptions();\n\n    if (policies == null || orgId == null) {\n      return [resetPasswordPolicyOptions, false];\n    }\n\n    const policy = policies.find(\n      (p) => p.organizationId === orgId && p.type === PolicyType.ResetPassword && p.enabled,\n    );\n    resetPasswordPolicyOptions.autoEnrollEnabled = policy?.data?.autoEnrollEnabled ?? false;\n\n    return [resetPasswordPolicyOptions, policy?.enabled ?? false];\n  }\n\n  async upsert(policy: PolicyData): Promise<void> {\n    await this.activeUserPolicyState.update((policies) => {\n      policies ??= {};\n      policies[policy.id] = policy;\n      return policies;\n    });\n  }\n\n  async replace(policies: { [id: string]: PolicyData }, userId: UserId): Promise<void> {\n    await this.stateProvider.setUserState(POLICIES, policies, userId);\n  }\n\n  /**\n   * Determines whether an orgUser is exempt from a specific policy because of their role\n   * Generally orgUsers who can manage policies are exempt from them, but some policies are stricter\n   */\n  private isExemptFromPolicy(policyType: PolicyType, organization: Organization) {\n    switch (policyType) {\n      case PolicyType.MaximumVaultTimeout:\n        // Max Vault Timeout applies to everyone except owners\n        return organization.isOwner;\n      case PolicyType.PasswordGenerator:\n        // password generation policy applies to everyone\n        return false;\n      case PolicyType.PersonalOwnership:\n        // individual vault policy applies to everyone except admins and owners\n        return organization.isAdmin;\n      default:\n        return organization.canManagePolicies;\n    }\n  }\n}\n","import { ProviderStatusType, ProviderUserStatusType, ProviderUserType } from \"../../enums\";\nimport { ProviderData } from \"../data/provider.data\";\n\nexport class Provider {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n  providerStatus: ProviderStatusType;\n\n  constructor(obj?: ProviderData) {\n    if (obj == null) {\n      return;\n    }\n\n    this.id = obj.id;\n    this.name = obj.name;\n    this.status = obj.status;\n    this.type = obj.type;\n    this.enabled = obj.enabled;\n    this.userId = obj.userId;\n    this.useEvents = obj.useEvents;\n    this.providerStatus = obj.providerStatus;\n  }\n\n  get canAccess() {\n    if (this.isProviderAdmin) {\n      return true;\n    }\n    return this.enabled && this.status === ProviderUserStatusType.Confirmed;\n  }\n\n  get canCreateOrganizations() {\n    return this.enabled && this.isProviderAdmin;\n  }\n\n  get canManageUsers() {\n    return this.isProviderAdmin;\n  }\n\n  get canAccessEventLogs() {\n    return this.isProviderAdmin;\n  }\n\n  get isProviderAdmin() {\n    return this.type === ProviderUserType.ProviderAdmin;\n  }\n}\n","import { firstValueFrom, map, Observable, of, switchMap, take } from \"rxjs\";\n\nimport { PROVIDERS_DISK, StateProvider, UserKeyDefinition } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { ProviderService as ProviderServiceAbstraction } from \"../abstractions/provider.service\";\nimport { ProviderData } from \"../models/data/provider.data\";\nimport { Provider } from \"../models/domain/provider\";\n\nexport const PROVIDERS = UserKeyDefinition.record<ProviderData>(PROVIDERS_DISK, \"providers\", {\n  deserializer: (obj: ProviderData) => obj,\n  clearOn: [\"logout\"],\n});\n\nfunction mapToSingleProvider(providerId: string) {\n  return map<Provider[], Provider>((providers) => providers?.find((p) => p.id === providerId));\n}\n\nexport class ProviderService implements ProviderServiceAbstraction {\n  constructor(private stateProvider: StateProvider) {}\n\n  private providers$(userId?: UserId): Observable<Provider[] | undefined> {\n    // FIXME: Can be replaced with `getUserStateOrDefault$` if we weren't trying to pick this.\n    return (\n      userId != null\n        ? this.stateProvider.getUser(userId, PROVIDERS).state$\n        : this.stateProvider.activeUserId$.pipe(\n            take(1),\n            switchMap((userId) =>\n              userId != null ? this.stateProvider.getUser(userId, PROVIDERS).state$ : of(null),\n            ),\n          )\n    ).pipe(this.mapProviderRecordToArray());\n  }\n\n  private mapProviderRecordToArray() {\n    return map<Record<string, ProviderData>, Provider[]>((providers) =>\n      Object.values(providers ?? {})?.map((o) => new Provider(o)),\n    );\n  }\n\n  get$(id: string): Observable<Provider> {\n    return this.providers$().pipe(mapToSingleProvider(id));\n  }\n\n  async get(id: string): Promise<Provider> {\n    return await firstValueFrom(this.providers$().pipe(mapToSingleProvider(id)));\n  }\n\n  async getAll(): Promise<Provider[]> {\n    return await firstValueFrom(this.providers$());\n  }\n\n  async save(providers: { [id: string]: ProviderData }, userId?: UserId) {\n    await this.stateProvider.setUserState(PROVIDERS, providers, userId);\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\n\n/**\n * Holds information about an account for use in the AccountService\n * if more information is added, be sure to update the equality method.\n */\nexport type AccountInfo = {\n  email: string;\n  emailVerified: boolean;\n  name: string | undefined;\n};\n\nexport function accountInfoEqual(a: AccountInfo, b: AccountInfo) {\n  if (a == null && b == null) {\n    return true;\n  }\n\n  if (a == null || b == null) {\n    return false;\n  }\n\n  const keys = new Set([...Object.keys(a), ...Object.keys(b)]) as Set<keyof AccountInfo>;\n  for (const key of keys) {\n    if (a[key] !== b[key]) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport abstract class AccountService {\n  accounts$: Observable<Record<UserId, AccountInfo>>;\n  activeAccount$: Observable<{ id: UserId | undefined } & AccountInfo>;\n\n  /**\n   * Observable of the last activity time for each account.\n   */\n  accountActivity$: Observable<Record<UserId, Date>>;\n  /** Account list in order of descending recency */\n  sortedUserIds$: Observable<UserId[]>;\n  /** Next account that is not the current active account */\n  nextUpAccount$: Observable<{ id: UserId } & AccountInfo>;\n  /**\n   * Updates the `accounts$` observable with the new account data.\n   *\n   * @note Also sets the last active date of the account to `now`.\n   * @param userId\n   * @param accountData\n   */\n  abstract addAccount(userId: UserId, accountData: AccountInfo): Promise<void>;\n  /**\n   * updates the `accounts$` observable with the new preferred name for the account.\n   * @param userId\n   * @param name\n   */\n  abstract setAccountName(userId: UserId, name: string): Promise<void>;\n  /**\n   * updates the `accounts$` observable with the new email for the account.\n   * @param userId\n   * @param email\n   */\n  abstract setAccountEmail(userId: UserId, email: string): Promise<void>;\n  /**\n   * updates the `accounts$` observable with the new email verification status for the account.\n   * @param userId\n   * @param emailVerified\n   */\n  abstract setAccountEmailVerified(userId: UserId, emailVerified: boolean): Promise<void>;\n  /**\n   * Updates the `activeAccount$` observable with the new active account.\n   * @param userId\n   */\n  abstract switchAccount(userId: UserId | null): Promise<void>;\n  /**\n   * Cleans personal information for the given account from the `accounts$` observable. Does not remove the userId from the observable.\n   *\n   * @note Also sets the last active date of the account to `null`.\n   * @param userId\n   */\n  abstract clean(userId: UserId): Promise<void>;\n  /**\n   * Updates the given user's last activity time.\n   * @param userId\n   * @param lastActivity\n   */\n  abstract setAccountActivity(userId: UserId, lastActivity: Date): Promise<void>;\n}\n\nexport abstract class InternalAccountService extends AccountService {\n  abstract delete(): void;\n}\n","import {\n  combineLatestWith,\n  map,\n  distinctUntilChanged,\n  shareReplay,\n  combineLatest,\n  Observable,\n} from \"rxjs\";\n\nimport {\n  AccountInfo,\n  InternalAccountService,\n  accountInfoEqual,\n} from \"../../auth/abstractions/account.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport {\n  ACCOUNT_DISK,\n  GlobalState,\n  GlobalStateProvider,\n  KeyDefinition,\n} from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\n\nexport const ACCOUNT_ACCOUNTS = KeyDefinition.record<AccountInfo, UserId>(\n  ACCOUNT_DISK,\n  \"accounts\",\n  {\n    deserializer: (accountInfo) => accountInfo,\n  },\n);\n\nexport const ACCOUNT_ACTIVE_ACCOUNT_ID = new KeyDefinition(ACCOUNT_DISK, \"activeAccountId\", {\n  deserializer: (id: UserId) => id,\n});\n\nexport const ACCOUNT_ACTIVITY = KeyDefinition.record<Date, UserId>(ACCOUNT_DISK, \"activity\", {\n  deserializer: (activity) => new Date(activity),\n});\n\nconst LOGGED_OUT_INFO: AccountInfo = {\n  email: \"\",\n  emailVerified: false,\n  name: undefined,\n};\n\nexport class AccountServiceImplementation implements InternalAccountService {\n  private accountsState: GlobalState<Record<UserId, AccountInfo>>;\n  private activeAccountIdState: GlobalState<UserId | undefined>;\n\n  accounts$: Observable<Record<UserId, AccountInfo>>;\n  activeAccount$: Observable<{ id: UserId | undefined } & AccountInfo>;\n  accountActivity$: Observable<Record<UserId, Date>>;\n  sortedUserIds$: Observable<UserId[]>;\n  nextUpAccount$: Observable<{ id: UserId } & AccountInfo>;\n\n  constructor(\n    private messagingService: MessagingService,\n    private logService: LogService,\n    private globalStateProvider: GlobalStateProvider,\n  ) {\n    this.accountsState = this.globalStateProvider.get(ACCOUNT_ACCOUNTS);\n    this.activeAccountIdState = this.globalStateProvider.get(ACCOUNT_ACTIVE_ACCOUNT_ID);\n\n    this.accounts$ = this.accountsState.state$.pipe(\n      map((accounts) => (accounts == null ? {} : accounts)),\n    );\n    this.activeAccount$ = this.activeAccountIdState.state$.pipe(\n      combineLatestWith(this.accounts$),\n      map(([id, accounts]) => (id ? { id, ...(accounts[id] as AccountInfo) } : undefined)),\n      distinctUntilChanged((a, b) => a?.id === b?.id && accountInfoEqual(a, b)),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n    this.accountActivity$ = this.globalStateProvider\n      .get(ACCOUNT_ACTIVITY)\n      .state$.pipe(map((activity) => activity ?? {}));\n    this.sortedUserIds$ = this.accountActivity$.pipe(\n      map((activity) => {\n        return Object.entries(activity)\n          .map(([userId, lastActive]: [UserId, Date]) => ({ userId, lastActive }))\n          .sort((a, b) => b.lastActive.getTime() - a.lastActive.getTime()) // later dates first\n          .map((a) => a.userId);\n      }),\n    );\n    this.nextUpAccount$ = combineLatest([\n      this.accounts$,\n      this.activeAccount$,\n      this.sortedUserIds$,\n    ]).pipe(\n      map(([accounts, activeAccount, sortedUserIds]) => {\n        const nextId = sortedUserIds.find((id) => id !== activeAccount?.id && accounts[id] != null);\n        return nextId ? { id: nextId, ...accounts[nextId] } : null;\n      }),\n    );\n  }\n\n  async addAccount(userId: UserId, accountData: AccountInfo): Promise<void> {\n    if (!Utils.isGuid(userId)) {\n      throw new Error(\"userId is required\");\n    }\n\n    await this.accountsState.update((accounts) => {\n      accounts ||= {};\n      accounts[userId] = accountData;\n      return accounts;\n    });\n    await this.setAccountActivity(userId, new Date());\n  }\n\n  async setAccountName(userId: UserId, name: string): Promise<void> {\n    await this.setAccountInfo(userId, { name });\n  }\n\n  async setAccountEmail(userId: UserId, email: string): Promise<void> {\n    await this.setAccountInfo(userId, { email });\n  }\n\n  async setAccountEmailVerified(userId: UserId, emailVerified: boolean): Promise<void> {\n    await this.setAccountInfo(userId, { emailVerified });\n  }\n\n  async clean(userId: UserId) {\n    await this.setAccountInfo(userId, LOGGED_OUT_INFO);\n    await this.removeAccountActivity(userId);\n  }\n\n  async switchAccount(userId: UserId | null): Promise<void> {\n    let updateActivity = false;\n    await this.activeAccountIdState.update(\n      (_, accounts) => {\n        if (userId == null) {\n          // indicates no account is active\n          return null;\n        }\n\n        if (accounts?.[userId] == null) {\n          throw new Error(\"Account does not exist\");\n        }\n        updateActivity = true;\n        return userId;\n      },\n      {\n        combineLatestWith: this.accounts$,\n        shouldUpdate: (id) => {\n          // update only if userId changes\n          return id !== userId;\n        },\n      },\n    );\n\n    if (updateActivity) {\n      await this.setAccountActivity(userId, new Date());\n    }\n  }\n\n  async setAccountActivity(userId: UserId, lastActivity: Date): Promise<void> {\n    if (!Utils.isGuid(userId)) {\n      // only store for valid userIds\n      return;\n    }\n\n    await this.globalStateProvider.get(ACCOUNT_ACTIVITY).update(\n      (activity) => {\n        activity ||= {};\n        activity[userId] = lastActivity;\n        return activity;\n      },\n      {\n        shouldUpdate: (oldActivity) => oldActivity?.[userId]?.getTime() !== lastActivity?.getTime(),\n      },\n    );\n  }\n\n  async removeAccountActivity(userId: UserId): Promise<void> {\n    await this.globalStateProvider.get(ACCOUNT_ACTIVITY).update(\n      (activity) => {\n        if (activity == null) {\n          return activity;\n        }\n        delete activity[userId];\n        return activity;\n      },\n      { shouldUpdate: (oldActivity) => oldActivity?.[userId] != null },\n    );\n  }\n\n  // TODO: update to use our own account status settings. Requires inverting direction of state service accounts flow\n  async delete(): Promise<void> {\n    try {\n      this.messagingService?.send(\"logout\");\n    } catch (e) {\n      this.logService.error(e);\n      throw e;\n    }\n  }\n\n  private async setAccountInfo(userId: UserId, update: Partial<AccountInfo>): Promise<void> {\n    function newAccountInfo(oldAccountInfo: AccountInfo): AccountInfo {\n      return { ...oldAccountInfo, ...update };\n    }\n    await this.accountsState.update(\n      (accounts) => {\n        accounts[userId] = newAccountInfo(accounts[userId]);\n        return accounts;\n      },\n      {\n        // Avoid unnecessary updates\n        // TODO: Faster comparison, maybe include a hash on the objects?\n        shouldUpdate: (accounts) => {\n          if (accounts?.[userId] == null) {\n            throw new Error(\"Account does not exist\");\n          }\n\n          return !accountInfoEqual(accounts[userId], newAccountInfo(accounts[userId]));\n        },\n      },\n    );\n  }\n}\n","import {\n  Observable,\n  combineLatest,\n  distinctUntilChanged,\n  firstValueFrom,\n  map,\n  of,\n  shareReplay,\n  switchMap,\n} from \"rxjs\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { MessageSender } from \"../../platform/messaging\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { UserId } from \"../../types/guid\";\nimport { AccountService } from \"../abstractions/account.service\";\nimport { AuthService as AuthServiceAbstraction } from \"../abstractions/auth.service\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { AuthenticationStatus } from \"../enums/authentication-status\";\n\nexport class AuthService implements AuthServiceAbstraction {\n  activeAccountStatus$: Observable<AuthenticationStatus>;\n  authStatuses$: Observable<Record<UserId, AuthenticationStatus>>;\n\n  constructor(\n    protected accountService: AccountService,\n    protected messageSender: MessageSender,\n    protected cryptoService: CryptoService,\n    protected apiService: ApiService,\n    protected stateService: StateService,\n    private tokenService: TokenService,\n  ) {\n    this.activeAccountStatus$ = this.accountService.activeAccount$.pipe(\n      map((account) => account?.id),\n      switchMap((userId) => {\n        return this.authStatusFor$(userId);\n      }),\n    );\n\n    this.authStatuses$ = this.accountService.accounts$.pipe(\n      map((accounts) => Object.keys(accounts) as UserId[]),\n      switchMap((entries) => {\n        if (entries.length === 0) {\n          return of([] as { userId: UserId; status: AuthenticationStatus }[]);\n        }\n        return combineLatest(\n          entries.map((userId) =>\n            this.authStatusFor$(userId).pipe(map((status) => ({ userId, status }))),\n          ),\n        );\n      }),\n      map((statuses) => {\n        return statuses.reduce(\n          (acc, { userId, status }) => {\n            acc[userId] = status;\n            return acc;\n          },\n          {} as Record<UserId, AuthenticationStatus>,\n        );\n      }),\n    );\n  }\n\n  authStatusFor$(userId: UserId): Observable<AuthenticationStatus> {\n    if (!Utils.isGuid(userId)) {\n      return of(AuthenticationStatus.LoggedOut);\n    }\n\n    return combineLatest([\n      this.cryptoService.getInMemoryUserKeyFor$(userId),\n      this.tokenService.hasAccessToken$(userId),\n    ]).pipe(\n      map(([userKey, hasAccessToken]) => {\n        if (!hasAccessToken) {\n          return AuthenticationStatus.LoggedOut;\n        }\n\n        if (!userKey) {\n          return AuthenticationStatus.Locked;\n        }\n\n        return AuthenticationStatus.Unlocked;\n      }),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: false }),\n    );\n  }\n\n  async getAuthStatus(userId?: string): Promise<AuthenticationStatus> {\n    userId ??= await firstValueFrom(this.accountService.activeAccount$.pipe(map((a) => a?.id)));\n    return await firstValueFrom(this.authStatusFor$(userId as UserId));\n  }\n\n  logOut(callback: () => void) {\n    callback();\n    this.messageSender.send(\"loggedOut\");\n  }\n}\n","export class UpdateAvatarRequest {\n  avatarColor: string;\n\n  constructor(avatarColor: string) {\n    this.avatarColor = avatarColor;\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { UpdateAvatarRequest } from \"../../models/request/update-avatar.request\";\nimport { AVATAR_DISK, StateProvider, UserKeyDefinition } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { AvatarService as AvatarServiceAbstraction } from \"../abstractions/avatar.service\";\n\nconst AVATAR_COLOR = new UserKeyDefinition<string>(AVATAR_DISK, \"avatarColor\", {\n  deserializer: (value) => value,\n  clearOn: [],\n});\n\nexport class AvatarService implements AvatarServiceAbstraction {\n  avatarColor$: Observable<string>;\n\n  constructor(\n    private apiService: ApiService,\n    private stateProvider: StateProvider,\n  ) {\n    this.avatarColor$ = this.stateProvider.getActive(AVATAR_COLOR).state$;\n  }\n\n  async setAvatarColor(color: string): Promise<void> {\n    const { avatarColor } = await this.apiService.putAvatar(new UpdateAvatarRequest(color));\n\n    await this.stateProvider.setUserState(AVATAR_COLOR, avatarColor);\n  }\n\n  async setSyncAvatarColor(userId: UserId, color: string): Promise<void> {\n    await this.stateProvider.getUser(userId, AVATAR_COLOR).update(() => color);\n  }\n\n  getUserAvatarColor$(userId: UserId): Observable<string | null> {\n    return this.stateProvider.getUser(userId, AVATAR_COLOR).state$;\n  }\n}\n","export class SecretVerificationRequest {\n  masterPasswordHash: string;\n  otp: string;\n  authRequestAccessCode: string;\n}\n","import { SecretVerificationRequest } from \"./secret-verification.request\";\n\nexport class UpdateDevicesTrustRequest extends SecretVerificationRequest {\n  currentDevice: DeviceKeysUpdateRequest;\n  otherDevices: OtherDeviceKeysUpdateRequest[];\n}\n\nexport class DeviceKeysUpdateRequest {\n  encryptedPublicKey: string;\n  encryptedUserKey: string;\n}\n\nexport class OtherDeviceKeysUpdateRequest extends DeviceKeysUpdateRequest {\n  id: string;\n}\n","import { firstValueFrom, map, Observable } from \"rxjs\";\n\nimport { UserDecryptionOptionsServiceAbstraction } from \"@bitwarden/auth/common\";\n\nimport { FeatureFlag } from \"../../enums/feature-flag.enum\";\nimport { AppIdService } from \"../../platform/abstractions/app-id.service\";\nimport { ConfigService } from \"../../platform/abstractions/config/config.service\";\nimport { CryptoFunctionService } from \"../../platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { EncryptService } from \"../../platform/abstractions/encrypt.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { KeyGenerationService } from \"../../platform/abstractions/key-generation.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { AbstractStorageService } from \"../../platform/abstractions/storage.service\";\nimport { StorageLocation } from \"../../platform/enums\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport { StorageOptions } from \"../../platform/models/domain/storage-options\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { DEVICE_TRUST_DISK_LOCAL, StateProvider, UserKeyDefinition } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { UserKey, DeviceKey } from \"../../types/key\";\nimport { DeviceTrustServiceAbstraction } from \"../abstractions/device-trust.service.abstraction\";\nimport { DeviceResponse } from \"../abstractions/devices/responses/device.response\";\nimport { DevicesApiServiceAbstraction } from \"../abstractions/devices-api.service.abstraction\";\nimport { SecretVerificationRequest } from \"../models/request/secret-verification.request\";\nimport {\n  DeviceKeysUpdateRequest,\n  UpdateDevicesTrustRequest,\n} from \"../models/request/update-devices-trust.request\";\n\n/** Uses disk storage so that the device key can persist after log out and tab removal. */\nexport const DEVICE_KEY = new UserKeyDefinition<DeviceKey | null>(\n  DEVICE_TRUST_DISK_LOCAL,\n  \"deviceKey\",\n  {\n    deserializer: (deviceKey) =>\n      deviceKey ? (SymmetricCryptoKey.fromJSON(deviceKey) as DeviceKey) : null,\n    clearOn: [], // Device key is needed to log back into device, so we can't clear it automatically during lock or logout\n    cleanupDelayMs: 0,\n    debug: {\n      enableRetrievalLogging: true,\n      enableUpdateLogging: true,\n    },\n  },\n);\n\n/** Uses disk storage so that the shouldTrustDevice bool can persist across login. */\nexport const SHOULD_TRUST_DEVICE = new UserKeyDefinition<boolean | null>(\n  DEVICE_TRUST_DISK_LOCAL,\n  \"shouldTrustDevice\",\n  {\n    deserializer: (shouldTrustDevice) => shouldTrustDevice,\n    clearOn: [], // Need to preserve the user setting, so we can't clear it automatically during lock or logout\n  },\n);\n\nexport class DeviceTrustService implements DeviceTrustServiceAbstraction {\n  private readonly platformSupportsSecureStorage =\n    this.platformUtilsService.supportsSecureStorage();\n  private readonly deviceKeySecureStorageKey: string = \"_deviceKey\";\n\n  supportsDeviceTrust$: Observable<boolean>;\n\n  constructor(\n    private keyGenerationService: KeyGenerationService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private cryptoService: CryptoService,\n    private encryptService: EncryptService,\n    private appIdService: AppIdService,\n    private devicesApiService: DevicesApiServiceAbstraction,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private stateProvider: StateProvider,\n    private secureStorageService: AbstractStorageService,\n    private userDecryptionOptionsService: UserDecryptionOptionsServiceAbstraction,\n    private logService: LogService,\n    private configService: ConfigService,\n  ) {\n    this.supportsDeviceTrust$ = this.userDecryptionOptionsService.userDecryptionOptions$.pipe(\n      map((options) => options?.trustedDeviceOption != null ?? false),\n    );\n  }\n\n  /**\n   * @description Retrieves the users choice to trust the device which can only happen after decryption\n   * Note: this value should only be used once and then reset\n   */\n  async getShouldTrustDevice(userId: UserId): Promise<boolean> {\n    if (!userId) {\n      throw new Error(\"UserId is required. Cannot get should trust device.\");\n    }\n\n    const shouldTrustDevice = await firstValueFrom(\n      this.stateProvider.getUserState$(SHOULD_TRUST_DEVICE, userId),\n    );\n\n    return shouldTrustDevice;\n  }\n\n  async setShouldTrustDevice(userId: UserId, value: boolean): Promise<void> {\n    if (!userId) {\n      throw new Error(\"UserId is required. Cannot set should trust device.\");\n    }\n\n    await this.stateProvider.setUserState(SHOULD_TRUST_DEVICE, value, userId);\n  }\n\n  async trustDeviceIfRequired(userId: UserId): Promise<void> {\n    if (!userId) {\n      throw new Error(\"UserId is required. Cannot trust device if required.\");\n    }\n\n    const shouldTrustDevice = await this.getShouldTrustDevice(userId);\n    if (shouldTrustDevice) {\n      await this.trustDevice(userId);\n      // reset the trust choice\n      await this.setShouldTrustDevice(userId, null);\n    }\n  }\n\n  async trustDevice(userId: UserId): Promise<DeviceResponse> {\n    if (!userId) {\n      throw new Error(\"UserId is required. Cannot trust device.\");\n    }\n\n    // Attempt to get user key\n    const userKey: UserKey = await this.cryptoService.getUserKey(userId);\n\n    // If user key is not found, throw error\n    if (!userKey) {\n      throw new Error(\"User symmetric key not found\");\n    }\n\n    // Generate deviceKey\n    const deviceKey = await this.makeDeviceKey();\n\n    // Generate asymmetric RSA key pair: devicePrivateKey, devicePublicKey\n    const [devicePublicKey, devicePrivateKey] =\n      await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n\n    const [\n      devicePublicKeyEncryptedUserKey,\n      userKeyEncryptedDevicePublicKey,\n      deviceKeyEncryptedDevicePrivateKey,\n    ] = await Promise.all([\n      // Encrypt user key with the DevicePublicKey\n      this.cryptoService.rsaEncrypt(userKey.key, devicePublicKey),\n\n      // Encrypt devicePublicKey with user key\n      this.encryptService.encrypt(devicePublicKey, userKey),\n\n      // Encrypt devicePrivateKey with deviceKey\n      this.encryptService.encrypt(devicePrivateKey, deviceKey),\n    ]);\n\n    // Send encrypted keys to server\n    const deviceIdentifier = await this.appIdService.getAppId();\n    const deviceResponse = await this.devicesApiService.updateTrustedDeviceKeys(\n      deviceIdentifier,\n      devicePublicKeyEncryptedUserKey.encryptedString,\n      userKeyEncryptedDevicePublicKey.encryptedString,\n      deviceKeyEncryptedDevicePrivateKey.encryptedString,\n    );\n\n    // store device key in local/secure storage if enc keys posted to server successfully\n    await this.setDeviceKey(userId, deviceKey);\n\n    this.platformUtilsService.showToast(\"success\", null, this.i18nService.t(\"deviceTrusted\"));\n\n    return deviceResponse;\n  }\n\n  async rotateDevicesTrust(\n    userId: UserId,\n    newUserKey: UserKey,\n    masterPasswordHash: string,\n  ): Promise<void> {\n    if (!userId) {\n      throw new Error(\"UserId is required. Cannot rotate device's trust.\");\n    }\n\n    const currentDeviceKey = await this.getDeviceKey(userId);\n    if (currentDeviceKey == null) {\n      // If the current device doesn't have a device key available to it, then we can't\n      // rotate any trust at all, so early return.\n      return;\n    }\n\n    // At this point of rotating their keys, they should still have their old user key in state\n    const oldUserKey = await firstValueFrom(this.cryptoService.userKey$(userId));\n\n    const deviceIdentifier = await this.appIdService.getAppId();\n    const secretVerificationRequest = new SecretVerificationRequest();\n    secretVerificationRequest.masterPasswordHash = masterPasswordHash;\n\n    // Get the keys that are used in rotating a devices keys from the server\n    const currentDeviceKeys = await this.devicesApiService.getDeviceKeys(\n      deviceIdentifier,\n      secretVerificationRequest,\n    );\n\n    // Decrypt the existing device public key with the old user key\n    const decryptedDevicePublicKey = await this.encryptService.decryptToBytes(\n      currentDeviceKeys.encryptedPublicKey,\n      oldUserKey,\n    );\n\n    // Encrypt the brand new user key with the now-decrypted public key for the device\n    const encryptedNewUserKey = await this.cryptoService.rsaEncrypt(\n      newUserKey.key,\n      decryptedDevicePublicKey,\n    );\n\n    // Re-encrypt the device public key with the new user key\n    const encryptedDevicePublicKey = await this.encryptService.encrypt(\n      decryptedDevicePublicKey,\n      newUserKey,\n    );\n\n    const currentDeviceUpdateRequest = new DeviceKeysUpdateRequest();\n    currentDeviceUpdateRequest.encryptedUserKey = encryptedNewUserKey.encryptedString;\n    currentDeviceUpdateRequest.encryptedPublicKey = encryptedDevicePublicKey.encryptedString;\n\n    // TODO: For device management, allow this method to take an array of device ids that can be looped over and individually rotated\n    // then it can be added to trustRequest.otherDevices.\n\n    const trustRequest = new UpdateDevicesTrustRequest();\n    trustRequest.masterPasswordHash = masterPasswordHash;\n    trustRequest.currentDevice = currentDeviceUpdateRequest;\n    trustRequest.otherDevices = [];\n\n    await this.devicesApiService.updateTrust(trustRequest, deviceIdentifier);\n  }\n\n  async getDeviceKey(userId: UserId): Promise<DeviceKey | null> {\n    if (!userId) {\n      throw new Error(\"UserId is required. Cannot get device key.\");\n    }\n\n    try {\n      if (this.platformSupportsSecureStorage) {\n        const deviceKeyB64 = await this.secureStorageService.get<\n          ReturnType<SymmetricCryptoKey[\"toJSON\"]>\n        >(`${userId}${this.deviceKeySecureStorageKey}`, this.getSecureStorageOptions(userId));\n\n        const deviceKey = SymmetricCryptoKey.fromJSON(deviceKeyB64) as DeviceKey;\n\n        return deviceKey;\n      }\n\n      const deviceKey = await firstValueFrom(this.stateProvider.getUserState$(DEVICE_KEY, userId));\n\n      return deviceKey;\n    } catch (e) {\n      this.logService.error(\"Failed to get device key\", e);\n    }\n  }\n\n  private async setDeviceKey(userId: UserId, deviceKey: DeviceKey | null): Promise<void> {\n    if (!userId) {\n      throw new Error(\"UserId is required. Cannot set device key.\");\n    }\n\n    try {\n      if (this.platformSupportsSecureStorage) {\n        await this.secureStorageService.save<DeviceKey>(\n          `${userId}${this.deviceKeySecureStorageKey}`,\n          deviceKey,\n          this.getSecureStorageOptions(userId),\n        );\n        return;\n      }\n\n      await this.stateProvider.setUserState(DEVICE_KEY, deviceKey?.toJSON(), userId);\n    } catch (e) {\n      this.logService.error(\"Failed to set device key\", e);\n    }\n  }\n\n  private async makeDeviceKey(): Promise<DeviceKey> {\n    // Create 512-bit device key\n    const deviceKey = (await this.keyGenerationService.createKey(512)) as DeviceKey;\n\n    return deviceKey;\n  }\n\n  async decryptUserKeyWithDeviceKey(\n    userId: UserId,\n    encryptedDevicePrivateKey: EncString,\n    encryptedUserKey: EncString,\n    deviceKey: DeviceKey,\n  ): Promise<UserKey | null> {\n    if (!userId) {\n      throw new Error(\"UserId is required. Cannot decrypt user key with device key.\");\n    }\n\n    if (!encryptedDevicePrivateKey) {\n      throw new Error(\n        \"Encrypted device private key is required. Cannot decrypt user key with device key.\",\n      );\n    }\n\n    if (!encryptedUserKey) {\n      throw new Error(\"Encrypted user key is required. Cannot decrypt user key with device key.\");\n    }\n\n    if (!deviceKey) {\n      // User doesn't have a device key anymore so device is untrusted\n      return null;\n    }\n\n    try {\n      // attempt to decrypt encryptedDevicePrivateKey with device key\n      const devicePrivateKey = await this.encryptService.decryptToBytes(\n        encryptedDevicePrivateKey,\n        deviceKey,\n      );\n\n      // Attempt to decrypt encryptedUserDataKey with devicePrivateKey\n      const userKey = await this.cryptoService.rsaDecrypt(\n        encryptedUserKey.encryptedString,\n        devicePrivateKey,\n      );\n\n      return new SymmetricCryptoKey(userKey) as UserKey;\n    } catch (e) {\n      // If either decryption effort fails, we want to remove the device key\n      this.logService.error(\"Failed to decrypt using device key. Removing device key.\");\n      await this.setDeviceKey(userId, null);\n\n      return null;\n    }\n  }\n\n  async recordDeviceTrustLoss(): Promise<void> {\n    if (!(await this.configService.getFeatureFlag(FeatureFlag.DeviceTrustLogging))) {\n      return;\n    }\n    const deviceIdentifier = await this.appIdService.getAppId();\n    await this.devicesApiService.postDeviceTrustLoss(deviceIdentifier);\n  }\n\n  private getSecureStorageOptions(userId: UserId): StorageOptions {\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId: userId,\n    };\n  }\n}\n","import { DeviceType } from \"../../../../enums\";\nimport { View } from \"../../../../models/view/view\";\nimport { DeviceResponse } from \"../responses/device.response\";\n\nexport class DeviceView implements View {\n  id: string;\n  userId: string;\n  name: string;\n  identifier: string;\n  type: DeviceType;\n  creationDate: string;\n  revisionDate: string;\n\n  constructor(deviceResponse: DeviceResponse) {\n    Object.assign(this, deviceResponse);\n  }\n}\n","import { Observable, defer, map } from \"rxjs\";\n\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport { DevicesServiceAbstraction } from \"../../abstractions/devices/devices.service.abstraction\";\nimport { DeviceResponse } from \"../../abstractions/devices/responses/device.response\";\nimport { DeviceView } from \"../../abstractions/devices/views/device.view\";\nimport { DevicesApiServiceAbstraction } from \"../../abstractions/devices-api.service.abstraction\";\n\n/**\n * @class DevicesServiceImplementation\n * @implements {DevicesServiceAbstraction}\n * @description Observable based data store service for Devices.\n * note: defer is used to convert the promises to observables and to ensure\n * that observables are created for each subscription\n * (i.e., promsise --> observables are cold until subscribed to)\n */\nexport class DevicesServiceImplementation implements DevicesServiceAbstraction {\n  constructor(private devicesApiService: DevicesApiServiceAbstraction) {}\n\n  /**\n   * @description Gets the list of all devices.\n   */\n  getDevices$(): Observable<Array<DeviceView>> {\n    return defer(() => this.devicesApiService.getDevices()).pipe(\n      map((deviceResponses: ListResponse<DeviceResponse>) => {\n        return deviceResponses.data.map((deviceResponse: DeviceResponse) => {\n          return new DeviceView(deviceResponse);\n        });\n      }),\n    );\n  }\n\n  /**\n   * @description Gets the device with the specified identifier.\n   */\n  getDeviceByIdentifier$(deviceIdentifier: string): Observable<DeviceView> {\n    return defer(() => this.devicesApiService.getDeviceByIdentifier(deviceIdentifier)).pipe(\n      map((deviceResponse: DeviceResponse) => new DeviceView(deviceResponse)),\n    );\n  }\n\n  /**\n   * @description Checks if a device is known for a user by user's email and device's identifier.\n   */\n  isDeviceKnownForUser$(email: string, deviceIdentifier: string): Observable<boolean> {\n    return defer(() => this.devicesApiService.getKnownDevice(email, deviceIdentifier));\n  }\n\n  /**\n   * @description Updates the keys for the specified device.\n   */\n\n  updateTrustedDeviceKeys$(\n    deviceIdentifier: string,\n    devicePublicKeyEncryptedUserKey: string,\n    userKeyEncryptedDevicePublicKey: string,\n    deviceKeyEncryptedDevicePrivateKey: string,\n  ): Observable<DeviceView> {\n    return defer(() =>\n      this.devicesApiService.updateTrustedDeviceKeys(\n        deviceIdentifier,\n        devicePublicKeyEncryptedUserKey,\n        userKeyEncryptedDevicePublicKey,\n        deviceKeyEncryptedDevicePrivateKey,\n      ),\n    ).pipe(map((deviceResponse: DeviceResponse) => new DeviceView(deviceResponse)));\n  }\n}\n","import { DeviceType } from \"../../../../enums\";\nimport { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class DeviceResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  name: string;\n  identifier: string;\n  type: DeviceType;\n  creationDate: string;\n  revisionDate: string;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { DeviceType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\n\nexport class ProtectedDeviceResponse extends BaseResponse {\n  constructor(response: Jsonify<ProtectedDeviceResponse>) {\n    super(response);\n    this.id = this.getResponseProperty(\"id\");\n    this.name = this.getResponseProperty(\"name\");\n    this.identifier = this.getResponseProperty(\"identifier\");\n    this.type = this.getResponseProperty(\"type\");\n    this.creationDate = new Date(this.getResponseProperty(\"creationDate\"));\n    if (response.encryptedUserKey) {\n      this.encryptedUserKey = new EncString(this.getResponseProperty(\"encryptedUserKey\"));\n    }\n    if (response.encryptedPublicKey) {\n      this.encryptedPublicKey = new EncString(this.getResponseProperty(\"encryptedPublicKey\"));\n    }\n  }\n\n  id: string;\n  name: string;\n  type: DeviceType;\n  identifier: string;\n  creationDate: Date;\n  /**\n   * Intended to be the users symmetric key that is encrypted in some form, the current way to encrypt this is with\n   * the devices public key.\n   */\n  encryptedUserKey: EncString;\n  /**\n   * Intended to be the public key that was generated for a device upon trust and encrypted. Currenly encrypted using\n   * a users symmetric key so that when trusted and unlocked a user can decrypt the public key for all their devices.\n   * This enabled a user to rotate the keys for all of their devices.\n   */\n  encryptedPublicKey: EncString;\n}\n","export class TrustedDeviceKeysRequest {\n  constructor(\n    public encryptedUserKey: string,\n    public encryptedPublicKey: string,\n    public encryptedPrivateKey: string,\n  ) {}\n}\n","import { ApiService } from \"../../abstractions/api.service\";\nimport { ListResponse } from \"../../models/response/list.response\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { DeviceResponse } from \"../abstractions/devices/responses/device.response\";\nimport { DevicesApiServiceAbstraction } from \"../abstractions/devices-api.service.abstraction\";\nimport { SecretVerificationRequest } from \"../models/request/secret-verification.request\";\nimport { UpdateDevicesTrustRequest } from \"../models/request/update-devices-trust.request\";\nimport { ProtectedDeviceResponse } from \"../models/response/protected-device.response\";\n\nimport { TrustedDeviceKeysRequest } from \"./devices/requests/trusted-device-keys.request\";\n\nexport class DevicesApiServiceImplementation implements DevicesApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async getKnownDevice(email: string, deviceIdentifier: string): Promise<boolean> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/devices/knowndevice\",\n      null,\n      false,\n      true,\n      null,\n      (headers) => {\n        headers.set(\"X-Device-Identifier\", deviceIdentifier);\n        headers.set(\"X-Request-Email\", Utils.fromUtf8ToUrlB64(email));\n      },\n    );\n    return r as boolean;\n  }\n\n  /**\n   * Get device by identifier\n   * @param deviceIdentifier - client generated id (not device id in DB)\n   */\n  async getDeviceByIdentifier(deviceIdentifier: string): Promise<DeviceResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      `/devices/identifier/${deviceIdentifier}`,\n      null,\n      true,\n      true,\n    );\n    return new DeviceResponse(r);\n  }\n\n  async getDevices(): Promise<ListResponse<DeviceResponse>> {\n    const r = await this.apiService.send(\"GET\", \"/devices\", null, true, true, null);\n    return new ListResponse(r, DeviceResponse);\n  }\n\n  async updateTrustedDeviceKeys(\n    deviceIdentifier: string,\n    devicePublicKeyEncryptedUserKey: string,\n    userKeyEncryptedDevicePublicKey: string,\n    deviceKeyEncryptedDevicePrivateKey: string,\n  ): Promise<DeviceResponse> {\n    const request = new TrustedDeviceKeysRequest(\n      devicePublicKeyEncryptedUserKey,\n      userKeyEncryptedDevicePublicKey,\n      deviceKeyEncryptedDevicePrivateKey,\n    );\n\n    const result = await this.apiService.send(\n      \"PUT\",\n      `/devices/${deviceIdentifier}/keys`,\n      request,\n      true,\n      true,\n    );\n\n    return new DeviceResponse(result);\n  }\n\n  async updateTrust(\n    updateDevicesTrustRequestModel: UpdateDevicesTrustRequest,\n    deviceIdentifier: string,\n  ): Promise<void> {\n    await this.apiService.send(\n      \"POST\",\n      \"/devices/update-trust\",\n      updateDevicesTrustRequestModel,\n      true,\n      false,\n      null,\n      (headers) => {\n        headers.set(\"Device-Identifier\", deviceIdentifier);\n      },\n    );\n  }\n\n  async getDeviceKeys(\n    deviceIdentifier: string,\n    secretVerificationRequest: SecretVerificationRequest,\n  ): Promise<ProtectedDeviceResponse> {\n    const result = await this.apiService.send(\n      \"POST\",\n      `/devices/${deviceIdentifier}/retrieve-keys`,\n      secretVerificationRequest,\n      true,\n      true,\n    );\n    return new ProtectedDeviceResponse(result);\n  }\n\n  async postDeviceTrustLoss(deviceIdentifier: string): Promise<void> {\n    await this.apiService.send(\n      \"POST\",\n      \"/devices/lost-trust\",\n      null,\n      true,\n      false,\n      null,\n      (headers) => {\n        headers.set(\"Device-Identifier\", deviceIdentifier);\n      },\n    );\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { KdfType } from \"../../platform/enums/kdf-type.enum\";\nimport { KDF_CONFIG_DISK, StateProvider, UserKeyDefinition } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { KdfConfigService as KdfConfigServiceAbstraction } from \"../abstractions/kdf-config.service\";\nimport { Argon2KdfConfig, KdfConfig, PBKDF2KdfConfig } from \"../models/domain/kdf-config\";\n\nexport const KDF_CONFIG = new UserKeyDefinition<KdfConfig>(KDF_CONFIG_DISK, \"kdfConfig\", {\n  deserializer: (kdfConfig: KdfConfig) => {\n    if (kdfConfig == null) {\n      return null;\n    }\n    return kdfConfig.kdfType === KdfType.PBKDF2_SHA256\n      ? PBKDF2KdfConfig.fromJSON(kdfConfig)\n      : Argon2KdfConfig.fromJSON(kdfConfig);\n  },\n  clearOn: [\"logout\"],\n});\n\nexport class KdfConfigService implements KdfConfigServiceAbstraction {\n  constructor(private stateProvider: StateProvider) {}\n  async setKdfConfig(userId: UserId, kdfConfig: KdfConfig) {\n    if (!userId) {\n      throw new Error(\"userId cannot be null\");\n    }\n    if (kdfConfig === null) {\n      throw new Error(\"kdfConfig cannot be null\");\n    }\n    await this.stateProvider.setUserState(KDF_CONFIG, kdfConfig, userId);\n  }\n\n  async getKdfConfig(): Promise<KdfConfig> {\n    const userId = await firstValueFrom(this.stateProvider.activeUserId$);\n    const state = await firstValueFrom(this.stateProvider.getUser(userId, KDF_CONFIG).state$);\n    if (state === null) {\n      throw new Error(\"KdfConfig for active user account state is null\");\n    }\n    return state;\n  }\n}\n","export class KeyConnectorUserKeyRequest {\n  key: string;\n\n  constructor(key: string) {\n    this.key = key;\n  }\n}\n","import { KeysRequest } from \"../../../models/request/keys.request\";\nimport { KdfType } from \"../../../platform/enums\";\nimport { KdfConfig } from \"../domain/kdf-config\";\n\nexport class SetKeyConnectorKeyRequest {\n  key: string;\n  keys: KeysRequest;\n  kdf: KdfType;\n  kdfIterations: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n  orgIdentifier: string;\n\n  constructor(key: string, kdfConfig: KdfConfig, orgIdentifier: string, keys: KeysRequest) {\n    this.key = key;\n    this.kdf = kdfConfig.kdfType;\n    this.kdfIterations = kdfConfig.iterations;\n    if (kdfConfig.kdfType === KdfType.Argon2id) {\n      this.kdfMemory = kdfConfig.memory;\n      this.kdfParallelism = kdfConfig.parallelism;\n    }\n    this.orgIdentifier = orgIdentifier;\n    this.keys = keys;\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { LogoutReason } from \"@bitwarden/auth/common\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { OrganizationService } from \"../../admin-console/abstractions/organization/organization.service.abstraction\";\nimport { OrganizationUserType } from \"../../admin-console/enums\";\nimport { Organization } from \"../../admin-console/models/domain/organization\";\nimport { KeysRequest } from \"../../models/request/keys.request\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { KeyGenerationService } from \"../../platform/abstractions/key-generation.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { KdfType } from \"../../platform/enums/kdf-type.enum\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport {\n  ActiveUserState,\n  KEY_CONNECTOR_DISK,\n  StateProvider,\n  UserKeyDefinition,\n} from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { MasterKey } from \"../../types/key\";\nimport { AccountService } from \"../abstractions/account.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"../abstractions/key-connector.service\";\nimport { InternalMasterPasswordServiceAbstraction } from \"../abstractions/master-password.service.abstraction\";\nimport { TokenService } from \"../abstractions/token.service\";\nimport { Argon2KdfConfig, KdfConfig, PBKDF2KdfConfig } from \"../models/domain/kdf-config\";\nimport { KeyConnectorUserKeyRequest } from \"../models/request/key-connector-user-key.request\";\nimport { SetKeyConnectorKeyRequest } from \"../models/request/set-key-connector-key.request\";\nimport { IdentityTokenResponse } from \"../models/response/identity-token.response\";\n\nexport const USES_KEY_CONNECTOR = new UserKeyDefinition<boolean | null>(\n  KEY_CONNECTOR_DISK,\n  \"usesKeyConnector\",\n  {\n    deserializer: (usesKeyConnector) => usesKeyConnector,\n    clearOn: [\"logout\"],\n  },\n);\n\nexport const CONVERT_ACCOUNT_TO_KEY_CONNECTOR = new UserKeyDefinition<boolean | null>(\n  KEY_CONNECTOR_DISK,\n  \"convertAccountToKeyConnector\",\n  {\n    deserializer: (convertAccountToKeyConnector) => convertAccountToKeyConnector,\n    clearOn: [\"logout\"],\n  },\n);\n\nexport class KeyConnectorService implements KeyConnectorServiceAbstraction {\n  private usesKeyConnectorState: ActiveUserState<boolean>;\n  private convertAccountToKeyConnectorState: ActiveUserState<boolean>;\n  constructor(\n    private accountService: AccountService,\n    private masterPasswordService: InternalMasterPasswordServiceAbstraction,\n    private cryptoService: CryptoService,\n    private apiService: ApiService,\n    private tokenService: TokenService,\n    private logService: LogService,\n    private organizationService: OrganizationService,\n    private keyGenerationService: KeyGenerationService,\n    private logoutCallback: (logoutReason: LogoutReason, userId?: string) => Promise<void>,\n    private stateProvider: StateProvider,\n  ) {\n    this.usesKeyConnectorState = this.stateProvider.getActive(USES_KEY_CONNECTOR);\n    this.convertAccountToKeyConnectorState = this.stateProvider.getActive(\n      CONVERT_ACCOUNT_TO_KEY_CONNECTOR,\n    );\n  }\n\n  async setUsesKeyConnector(usesKeyConnector: boolean, userId: UserId) {\n    await this.stateProvider.getUser(userId, USES_KEY_CONNECTOR).update(() => usesKeyConnector);\n  }\n\n  getUsesKeyConnector(userId: UserId): Promise<boolean> {\n    return firstValueFrom(this.stateProvider.getUserState$(USES_KEY_CONNECTOR, userId));\n  }\n\n  async userNeedsMigration(userId: UserId) {\n    const loggedInUsingSso = await this.tokenService.getIsExternal(userId);\n    const requiredByOrganization = (await this.getManagingOrganization(userId)) != null;\n    const userIsNotUsingKeyConnector = !(await this.getUsesKeyConnector(userId));\n\n    return loggedInUsingSso && requiredByOrganization && userIsNotUsingKeyConnector;\n  }\n\n  async migrateUser(userId?: UserId) {\n    userId ??= (await firstValueFrom(this.accountService.activeAccount$))?.id;\n    const organization = await this.getManagingOrganization(userId);\n    const masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(masterKey.encKeyB64);\n\n    try {\n      await this.apiService.postUserKeyToKeyConnector(\n        organization.keyConnectorUrl,\n        keyConnectorRequest,\n      );\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    await this.apiService.postConvertToKeyConnector();\n  }\n\n  // TODO: UserKey should be renamed to MasterKey and typed accordingly\n  async setMasterKeyFromUrl(url: string, userId: UserId) {\n    try {\n      const masterKeyResponse = await this.apiService.getMasterKeyFromKeyConnector(url);\n      const keyArr = Utils.fromB64ToArray(masterKeyResponse.key);\n      const masterKey = new SymmetricCryptoKey(keyArr) as MasterKey;\n      await this.masterPasswordService.setMasterKey(masterKey, userId);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n  }\n\n  async getManagingOrganization(userId?: UserId): Promise<Organization> {\n    const orgs = await this.organizationService.getAll(userId);\n    return orgs.find(\n      (o) =>\n        o.keyConnectorEnabled &&\n        o.type !== OrganizationUserType.Admin &&\n        o.type !== OrganizationUserType.Owner &&\n        !o.isProviderUser,\n    );\n  }\n\n  async convertNewSsoUserToKeyConnector(\n    tokenResponse: IdentityTokenResponse,\n    orgId: string,\n    userId: UserId,\n  ) {\n    // TODO: Remove after tokenResponse.keyConnectorUrl is deprecated in 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3537)\n    const {\n      kdf,\n      kdfIterations,\n      kdfMemory,\n      kdfParallelism,\n      keyConnectorUrl: legacyKeyConnectorUrl,\n      userDecryptionOptions,\n    } = tokenResponse;\n    const password = await this.keyGenerationService.createKey(512);\n    const kdfConfig: KdfConfig =\n      kdf === KdfType.PBKDF2_SHA256\n        ? new PBKDF2KdfConfig(kdfIterations)\n        : new Argon2KdfConfig(kdfIterations, kdfMemory, kdfParallelism);\n\n    const masterKey = await this.cryptoService.makeMasterKey(\n      password.keyB64,\n      await this.tokenService.getEmail(),\n      kdfConfig,\n    );\n    const keyConnectorRequest = new KeyConnectorUserKeyRequest(masterKey.encKeyB64);\n    await this.masterPasswordService.setMasterKey(masterKey, userId);\n\n    const userKey = await this.cryptoService.makeUserKey(masterKey);\n    await this.cryptoService.setUserKey(userKey[0], userId);\n    await this.cryptoService.setMasterKeyEncryptedUserKey(userKey[1].encryptedString, userId);\n\n    const [pubKey, privKey] = await this.cryptoService.makeKeyPair(userKey[0]);\n\n    try {\n      const keyConnectorUrl =\n        legacyKeyConnectorUrl ?? userDecryptionOptions?.keyConnectorOption?.keyConnectorUrl;\n      await this.apiService.postUserKeyToKeyConnector(keyConnectorUrl, keyConnectorRequest);\n    } catch (e) {\n      this.handleKeyConnectorError(e);\n    }\n\n    const keys = new KeysRequest(pubKey, privKey.encryptedString);\n    const setPasswordRequest = new SetKeyConnectorKeyRequest(\n      userKey[1].encryptedString,\n      kdfConfig,\n      orgId,\n      keys,\n    );\n    await this.apiService.postSetKeyConnectorKey(setPasswordRequest);\n  }\n\n  async setConvertAccountRequired(status: boolean, userId?: UserId) {\n    await this.stateProvider.setUserState(CONVERT_ACCOUNT_TO_KEY_CONNECTOR, status, userId);\n  }\n\n  getConvertAccountRequired(): Promise<boolean> {\n    return firstValueFrom(this.convertAccountToKeyConnectorState.state$);\n  }\n\n  async removeConvertAccountRequired(userId?: UserId) {\n    await this.setConvertAccountRequired(null, userId);\n  }\n\n  private handleKeyConnectorError(e: any) {\n    this.logService.error(e);\n    if (this.logoutCallback != null) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.logoutCallback(\"keyConnectorError\");\n    }\n    throw new Error(\"Key Connector error\");\n  }\n}\n","import { firstValueFrom, map, Observable } from \"rxjs\";\n\nimport { EncryptService } from \"../../../platform/abstractions/encrypt.service\";\nimport { KeyGenerationService } from \"../../../platform/abstractions/key-generation.service\";\nimport { StateService } from \"../../../platform/abstractions/state.service\";\nimport { EncryptionType } from \"../../../platform/enums\";\nimport { EncryptedString, EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport {\n  MASTER_PASSWORD_DISK,\n  MASTER_PASSWORD_MEMORY,\n  StateProvider,\n  UserKeyDefinition,\n} from \"../../../platform/state\";\nimport { UserId } from \"../../../types/guid\";\nimport { MasterKey, UserKey } from \"../../../types/key\";\nimport { InternalMasterPasswordServiceAbstraction } from \"../../abstractions/master-password.service.abstraction\";\nimport { ForceSetPasswordReason } from \"../../models/domain/force-set-password-reason\";\n\n/** Memory since master key shouldn't be available on lock */\nconst MASTER_KEY = new UserKeyDefinition<MasterKey>(MASTER_PASSWORD_MEMORY, \"masterKey\", {\n  deserializer: (masterKey) => SymmetricCryptoKey.fromJSON(masterKey) as MasterKey,\n  clearOn: [\"lock\", \"logout\"],\n});\n\n/** Disk since master key hash is used for unlock */\nconst MASTER_KEY_HASH = new UserKeyDefinition<string>(MASTER_PASSWORD_DISK, \"masterKeyHash\", {\n  deserializer: (masterKeyHash) => masterKeyHash,\n  clearOn: [\"logout\"],\n});\n\n/** Disk to persist through lock */\nconst MASTER_KEY_ENCRYPTED_USER_KEY = new UserKeyDefinition<EncryptedString>(\n  MASTER_PASSWORD_DISK,\n  \"masterKeyEncryptedUserKey\",\n  {\n    deserializer: (key) => key,\n    clearOn: [\"logout\"],\n  },\n);\n\n/** Disk to persist through lock and account switches */\nconst FORCE_SET_PASSWORD_REASON = new UserKeyDefinition<ForceSetPasswordReason>(\n  MASTER_PASSWORD_DISK,\n  \"forceSetPasswordReason\",\n  {\n    deserializer: (reason) => reason,\n    clearOn: [\"logout\"],\n  },\n);\n\nexport class MasterPasswordService implements InternalMasterPasswordServiceAbstraction {\n  constructor(\n    private stateProvider: StateProvider,\n    private stateService: StateService,\n    private keyGenerationService: KeyGenerationService,\n    private encryptService: EncryptService,\n  ) {}\n\n  masterKey$(userId: UserId): Observable<MasterKey> {\n    if (userId == null) {\n      throw new Error(\"User ID is required.\");\n    }\n    return this.stateProvider.getUser(userId, MASTER_KEY).state$;\n  }\n\n  masterKeyHash$(userId: UserId): Observable<string> {\n    if (userId == null) {\n      throw new Error(\"User ID is required.\");\n    }\n    return this.stateProvider.getUser(userId, MASTER_KEY_HASH).state$;\n  }\n\n  forceSetPasswordReason$(userId: UserId): Observable<ForceSetPasswordReason> {\n    if (userId == null) {\n      throw new Error(\"User ID is required.\");\n    }\n    return this.stateProvider\n      .getUser(userId, FORCE_SET_PASSWORD_REASON)\n      .state$.pipe(map((reason) => reason ?? ForceSetPasswordReason.None));\n  }\n\n  // TODO: Remove this method and decrypt directly in the service instead\n  async getMasterKeyEncryptedUserKey(userId: UserId): Promise<EncString> {\n    if (userId == null) {\n      throw new Error(\"User ID is required.\");\n    }\n    const key = await firstValueFrom(\n      this.stateProvider.getUser(userId, MASTER_KEY_ENCRYPTED_USER_KEY).state$,\n    );\n    return EncString.fromJSON(key);\n  }\n\n  async setMasterKey(masterKey: MasterKey, userId: UserId): Promise<void> {\n    if (masterKey == null) {\n      throw new Error(\"Master key is required.\");\n    }\n    if (userId == null) {\n      throw new Error(\"User ID is required.\");\n    }\n    await this.stateProvider.getUser(userId, MASTER_KEY).update((_) => masterKey);\n  }\n\n  async clearMasterKey(userId: UserId): Promise<void> {\n    if (userId == null) {\n      throw new Error(\"User ID is required.\");\n    }\n    await this.stateProvider.getUser(userId, MASTER_KEY).update((_) => null);\n  }\n\n  async setMasterKeyHash(masterKeyHash: string, userId: UserId): Promise<void> {\n    if (masterKeyHash == null) {\n      throw new Error(\"Master key hash is required.\");\n    }\n    if (userId == null) {\n      throw new Error(\"User ID is required.\");\n    }\n    await this.stateProvider.getUser(userId, MASTER_KEY_HASH).update((_) => masterKeyHash);\n  }\n\n  async clearMasterKeyHash(userId: UserId): Promise<void> {\n    if (userId == null) {\n      throw new Error(\"User ID is required.\");\n    }\n    await this.stateProvider.getUser(userId, MASTER_KEY_HASH).update((_) => null);\n  }\n\n  async setMasterKeyEncryptedUserKey(encryptedKey: EncString, userId: UserId): Promise<void> {\n    if (encryptedKey == null) {\n      throw new Error(\"Encrypted Key is required.\");\n    }\n    if (userId == null) {\n      throw new Error(\"User ID is required.\");\n    }\n    await this.stateProvider\n      .getUser(userId, MASTER_KEY_ENCRYPTED_USER_KEY)\n      .update((_) => encryptedKey.toJSON() as EncryptedString);\n  }\n\n  async setForceSetPasswordReason(reason: ForceSetPasswordReason, userId: UserId): Promise<void> {\n    if (reason == null) {\n      throw new Error(\"Reason is required.\");\n    }\n    if (userId == null) {\n      throw new Error(\"User ID is required.\");\n    }\n    await this.stateProvider.getUser(userId, FORCE_SET_PASSWORD_REASON).update((_) => reason);\n  }\n\n  async decryptUserKeyWithMasterKey(\n    masterKey: MasterKey,\n    userKey?: EncString,\n    userId?: UserId,\n  ): Promise<UserKey> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    userKey ??= await this.getMasterKeyEncryptedUserKey(userId);\n    masterKey ??= await firstValueFrom(this.masterKey$(userId));\n\n    if (masterKey == null) {\n      throw new Error(\"No master key found.\");\n    }\n\n    // Try one more way to get the user key if it still wasn't found.\n    if (userKey == null) {\n      const deprecatedKey = await this.stateService.getEncryptedCryptoSymmetricKey({\n        userId: userId,\n      });\n\n      if (deprecatedKey == null) {\n        throw new Error(\"No encrypted user key found.\");\n      }\n\n      userKey = new EncString(deprecatedKey);\n    }\n\n    let decUserKey: Uint8Array;\n\n    if (userKey.encryptionType === EncryptionType.AesCbc256_B64) {\n      decUserKey = await this.encryptService.decryptToBytes(userKey, masterKey);\n    } else if (userKey.encryptionType === EncryptionType.AesCbc256_HmacSha256_B64) {\n      const newKey = await this.keyGenerationService.stretchKey(masterKey);\n      decUserKey = await this.encryptService.decryptToBytes(userKey, newKey);\n    } else {\n      throw new Error(\"Unsupported encryption type.\");\n    }\n\n    if (decUserKey == null) {\n      return null;\n    }\n\n    return new SymmetricCryptoKey(decUserKey) as UserKey;\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport {\n  ActiveUserState,\n  GlobalState,\n  KeyDefinition,\n  SSO_DISK,\n  StateProvider,\n  UserKeyDefinition,\n} from \"../../platform/state\";\nimport { SsoLoginServiceAbstraction } from \"../abstractions/sso-login.service.abstraction\";\n\n/**\n * Uses disk storage so that the code verifier can be persisted across sso redirects.\n */\nconst CODE_VERIFIER = new KeyDefinition<string>(SSO_DISK, \"ssoCodeVerifier\", {\n  deserializer: (codeVerifier) => codeVerifier,\n});\n\n/**\n * Uses disk storage so that the sso state can be persisted across sso redirects.\n */\nconst SSO_STATE = new KeyDefinition<string>(SSO_DISK, \"ssoState\", {\n  deserializer: (state) => state,\n});\n\n/**\n * Uses disk storage so that the organization sso identifier can be persisted across sso redirects.\n */\nconst USER_ORGANIZATION_SSO_IDENTIFIER = new UserKeyDefinition<string>(\n  SSO_DISK,\n  \"organizationSsoIdentifier\",\n  {\n    deserializer: (organizationIdentifier) => organizationIdentifier,\n    clearOn: [\"logout\"], // Used for login, so not needed past logout\n  },\n);\n\n/**\n * Uses disk storage so that the organization sso identifier can be persisted across sso redirects.\n */\nconst GLOBAL_ORGANIZATION_SSO_IDENTIFIER = new KeyDefinition<string>(\n  SSO_DISK,\n  \"organizationSsoIdentifier\",\n  {\n    deserializer: (organizationIdentifier) => organizationIdentifier,\n  },\n);\n\n/**\n * Uses disk storage so that the user's email can be persisted across sso redirects.\n */\nconst SSO_EMAIL = new KeyDefinition<string>(SSO_DISK, \"ssoEmail\", {\n  deserializer: (state) => state,\n});\n\nexport class SsoLoginService implements SsoLoginServiceAbstraction {\n  private codeVerifierState: GlobalState<string>;\n  private ssoState: GlobalState<string>;\n  private orgSsoIdentifierState: GlobalState<string>;\n  private ssoEmailState: GlobalState<string>;\n  private activeUserOrgSsoIdentifierState: ActiveUserState<string>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.codeVerifierState = this.stateProvider.getGlobal(CODE_VERIFIER);\n    this.ssoState = this.stateProvider.getGlobal(SSO_STATE);\n    this.orgSsoIdentifierState = this.stateProvider.getGlobal(GLOBAL_ORGANIZATION_SSO_IDENTIFIER);\n    this.ssoEmailState = this.stateProvider.getGlobal(SSO_EMAIL);\n    this.activeUserOrgSsoIdentifierState = this.stateProvider.getActive(\n      USER_ORGANIZATION_SSO_IDENTIFIER,\n    );\n  }\n\n  getCodeVerifier(): Promise<string> {\n    return firstValueFrom(this.codeVerifierState.state$);\n  }\n\n  async setCodeVerifier(codeVerifier: string): Promise<void> {\n    await this.codeVerifierState.update((_) => codeVerifier);\n  }\n\n  getSsoState(): Promise<string> {\n    return firstValueFrom(this.ssoState.state$);\n  }\n\n  async setSsoState(ssoState: string): Promise<void> {\n    await this.ssoState.update((_) => ssoState);\n  }\n\n  getOrganizationSsoIdentifier(): Promise<string> {\n    return firstValueFrom(this.orgSsoIdentifierState.state$);\n  }\n\n  async setOrganizationSsoIdentifier(organizationIdentifier: string): Promise<void> {\n    await this.orgSsoIdentifierState.update((_) => organizationIdentifier);\n  }\n\n  getSsoEmail(): Promise<string> {\n    return firstValueFrom(this.ssoEmailState.state$);\n  }\n\n  async setSsoEmail(email: string): Promise<void> {\n    await this.ssoEmailState.update((_) => email);\n  }\n\n  getActiveUserOrganizationSsoIdentifier(): Promise<string> {\n    return firstValueFrom(this.activeUserOrgSsoIdentifierState.state$);\n  }\n\n  async setActiveUserOrganizationSsoIdentifier(organizationIdentifier: string): Promise<void> {\n    await this.activeUserOrgSsoIdentifierState.update((_) => organizationIdentifier);\n  }\n}\n","export enum VaultTimeoutAction {\n  Lock = \"lock\",\n  LogOut = \"logOut\",\n}\n","// Note: the below comments are just for documenting what they used to be.\nexport const VaultTimeoutStringType = {\n  Never: \"never\", // null\n  OnRestart: \"onRestart\", // -1\n  OnLocked: \"onLocked\", // -2\n  OnSleep: \"onSleep\", // -3\n  OnIdle: \"onIdle\", // -4\n} as const;\n\nexport type VaultTimeout =\n  | number // 0 or positive numbers only\n  | (typeof VaultTimeoutStringType)[keyof typeof VaultTimeoutStringType];\n\nexport interface VaultTimeoutOption {\n  name: string;\n  value: VaultTimeout;\n}\n","export class SetTokensResult {\n  constructor(accessToken: string, refreshToken?: string, clientIdSecretPair?: [string, string]) {\n    this.accessToken = accessToken;\n    this.refreshToken = refreshToken;\n    this.clientIdSecretPair = clientIdSecretPair;\n  }\n  accessToken: string;\n  refreshToken?: string;\n  clientIdSecretPair?: [string, string];\n}\n","import {\n  KeyDefinition,\n  TOKEN_DISK,\n  TOKEN_DISK_LOCAL,\n  TOKEN_MEMORY,\n  UserKeyDefinition,\n} from \"../../platform/state\";\n\n// Note: all tokens / API key information must be cleared on logout.\n// because we are using secure storage, we must manually call to clean up our tokens.\n// See stateService.deAuthenticateAccount for where we call clearTokens(...)\n\nexport const ACCESS_TOKEN_DISK = new UserKeyDefinition<string>(TOKEN_DISK, \"accessToken\", {\n  deserializer: (accessToken) => accessToken,\n  clearOn: [], // Manually handled\n});\n\nexport const ACCESS_TOKEN_MEMORY = new UserKeyDefinition<string>(TOKEN_MEMORY, \"accessToken\", {\n  deserializer: (accessToken) => accessToken,\n  clearOn: [], // Manually handled\n});\n\nexport const REFRESH_TOKEN_DISK = new UserKeyDefinition<string>(TOKEN_DISK, \"refreshToken\", {\n  deserializer: (refreshToken) => refreshToken,\n  clearOn: [], // Manually handled\n});\n\nexport const REFRESH_TOKEN_MEMORY = new UserKeyDefinition<string>(TOKEN_MEMORY, \"refreshToken\", {\n  deserializer: (refreshToken) => refreshToken,\n  clearOn: [], // Manually handled\n});\n\nexport const EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL = KeyDefinition.record<string, string>(\n  TOKEN_DISK_LOCAL,\n  \"emailTwoFactorTokenRecord\",\n  {\n    deserializer: (emailTwoFactorTokenRecord) => emailTwoFactorTokenRecord,\n  },\n);\n\nexport const API_KEY_CLIENT_ID_DISK = new UserKeyDefinition<string>(TOKEN_DISK, \"apiKeyClientId\", {\n  deserializer: (apiKeyClientId) => apiKeyClientId,\n  clearOn: [], // Manually handled\n});\n\nexport const API_KEY_CLIENT_ID_MEMORY = new UserKeyDefinition<string>(\n  TOKEN_MEMORY,\n  \"apiKeyClientId\",\n  {\n    deserializer: (apiKeyClientId) => apiKeyClientId,\n    clearOn: [], // Manually handled\n  },\n);\n\nexport const API_KEY_CLIENT_SECRET_DISK = new UserKeyDefinition<string>(\n  TOKEN_DISK,\n  \"apiKeyClientSecret\",\n  {\n    deserializer: (apiKeyClientSecret) => apiKeyClientSecret,\n    clearOn: [], // Manually handled\n  },\n);\n\nexport const API_KEY_CLIENT_SECRET_MEMORY = new UserKeyDefinition<string>(\n  TOKEN_MEMORY,\n  \"apiKeyClientSecret\",\n  {\n    deserializer: (apiKeyClientSecret) => apiKeyClientSecret,\n    clearOn: [], // Manually handled\n  },\n);\n\nexport const SECURITY_STAMP_MEMORY = new UserKeyDefinition<string>(TOKEN_MEMORY, \"securityStamp\", {\n  deserializer: (securityStamp) => securityStamp,\n  clearOn: [\"logout\"],\n});\n","import { Observable, combineLatest, firstValueFrom, map } from \"rxjs\";\nimport { Opaque } from \"type-fest\";\n\nimport { LogoutReason, decodeJwtTokenToJson } from \"@bitwarden/auth/common\";\n\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { EncryptService } from \"../../platform/abstractions/encrypt.service\";\nimport { KeyGenerationService } from \"../../platform/abstractions/key-generation.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { AbstractStorageService } from \"../../platform/abstractions/storage.service\";\nimport { StorageLocation } from \"../../platform/enums\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { EncString, EncryptedString } from \"../../platform/models/domain/enc-string\";\nimport { StorageOptions } from \"../../platform/models/domain/storage-options\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport {\n  GlobalState,\n  GlobalStateProvider,\n  SingleUserStateProvider,\n  UserKeyDefinition,\n} from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { VaultTimeout, VaultTimeoutStringType } from \"../../types/vault-timeout.type\";\nimport { TokenService as TokenServiceAbstraction } from \"../abstractions/token.service\";\nimport { SetTokensResult } from \"../models/domain/set-tokens-result\";\n\nimport { ACCOUNT_ACTIVE_ACCOUNT_ID } from \"./account.service\";\nimport {\n  ACCESS_TOKEN_DISK,\n  ACCESS_TOKEN_MEMORY,\n  API_KEY_CLIENT_ID_DISK,\n  API_KEY_CLIENT_ID_MEMORY,\n  API_KEY_CLIENT_SECRET_DISK,\n  API_KEY_CLIENT_SECRET_MEMORY,\n  EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL,\n  REFRESH_TOKEN_DISK,\n  REFRESH_TOKEN_MEMORY,\n  SECURITY_STAMP_MEMORY,\n} from \"./token.state\";\n\nexport enum TokenStorageLocation {\n  Disk = \"disk\",\n  SecureStorage = \"secureStorage\",\n  Memory = \"memory\",\n}\n\n/**\n * Type representing the structure of a standard Bitwarden decoded access token.\n * src: https://datatracker.ietf.org/doc/html/rfc7519#section-4.1\n * Note: all claims are technically optional so we must verify their existence before using them.\n * Note 2: NumericDate is a number representing a date in seconds since the Unix epoch.\n */\nexport type DecodedAccessToken = {\n  /** Issuer  - the issuer of the token, typically the URL of the authentication server */\n  iss?: string;\n\n  /** Not Before - a timestamp defining when the token starts being valid */\n  nbf?: number;\n\n  /** Issued At - a timestamp of when the token was issued */\n  iat?: number;\n\n  /** Expiration Time - a NumericDate timestamp of when the token will expire */\n  exp?: number;\n\n  /** Scope - the scope of the access request, such as the permissions the token grants */\n  scope?: string[];\n\n  /** Authentication Method Reference - the methods used in the authentication */\n  amr?: string[];\n\n  /** Client ID - the identifier for the client that requested the token */\n  client_id?: string;\n\n  /** Subject - the unique identifier for the user */\n  sub?: string;\n\n  /** Authentication Time - a timestamp of when the user authentication occurred */\n  auth_time?: number;\n\n  /** Identity Provider - the system or service that authenticated the user */\n  idp?: string;\n\n  /** Premium - a boolean flag indicating whether the account is premium */\n  premium?: boolean;\n\n  /** Email - the user's email address */\n  email?: string;\n\n  /** Email Verified - a boolean flag indicating whether the user's email address has been verified */\n  email_verified?: boolean;\n\n  /**\n   * Security Stamp - a unique identifier which invalidates the access token if it changes in the db\n   * (typically after critical account changes like a password change)\n   */\n  sstamp?: string;\n\n  /** Name - the name of the user */\n  name?: string;\n\n  /** Organization Owners - a list of organization owner identifiers */\n  orgowner?: string[];\n\n  /** Device - the identifier of the device used */\n  device?: string;\n\n  /** JWT ID - a unique identifier for the JWT */\n  jti?: string;\n};\n\n/**\n * A symmetric key for encrypting the access token before the token is stored on disk.\n * This key should be stored in secure storage.\n * */\nexport type AccessTokenKey = Opaque<SymmetricCryptoKey, \"AccessTokenKey\">;\n\nexport class TokenService implements TokenServiceAbstraction {\n  private readonly accessTokenKeySecureStorageKey: string = \"_accessTokenKey\";\n\n  private readonly refreshTokenSecureStorageKey: string = \"_refreshToken\";\n\n  private emailTwoFactorTokenRecordGlobalState: GlobalState<Record<string, string>>;\n\n  private activeUserIdGlobalState: GlobalState<UserId>;\n\n  constructor(\n    // Note: we cannot use ActiveStateProvider because if we ever want to inject\n    // this service into the AccountService, we will make a circular dependency\n    private singleUserStateProvider: SingleUserStateProvider,\n    private globalStateProvider: GlobalStateProvider,\n    private readonly platformSupportsSecureStorage: boolean,\n    private secureStorageService: AbstractStorageService,\n    private keyGenerationService: KeyGenerationService,\n    private encryptService: EncryptService,\n    private logService: LogService,\n    private logoutCallback: (logoutReason: LogoutReason, userId?: string) => Promise<void>,\n  ) {\n    this.initializeState();\n  }\n\n  hasAccessToken$(userId: UserId): Observable<boolean> {\n    // FIXME Once once vault timeout action is observable, we can use it to determine storage location\n    // and avoid the need to check both disk and memory.\n    return combineLatest([\n      this.singleUserStateProvider.get(userId, ACCESS_TOKEN_DISK).state$,\n      this.singleUserStateProvider.get(userId, ACCESS_TOKEN_MEMORY).state$,\n    ]).pipe(map(([disk, memory]) => Boolean(disk || memory)));\n  }\n\n  private initializeState(): void {\n    this.emailTwoFactorTokenRecordGlobalState = this.globalStateProvider.get(\n      EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL,\n    );\n\n    this.activeUserIdGlobalState = this.globalStateProvider.get(ACCOUNT_ACTIVE_ACCOUNT_ID);\n  }\n\n  async setTokens(\n    accessToken: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: VaultTimeout,\n    refreshToken?: string,\n    clientIdClientSecret?: [string, string],\n  ): Promise<SetTokensResult> {\n    if (!accessToken) {\n      throw new Error(\"Access token is required.\");\n    }\n\n    // Can't check for falsey b/c 0 is a valid value\n    if (vaultTimeout == null) {\n      throw new Error(\"Vault Timeout is required.\");\n    }\n\n    if (vaultTimeoutAction == null) {\n      throw new Error(\"Vault Timeout Action is required.\");\n    }\n\n    // get user id the access token\n    const userId: UserId = await this.getUserIdFromAccessToken(accessToken);\n\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot set tokens.\");\n    }\n\n    const newAccessToken = await this._setAccessToken(\n      accessToken,\n      vaultTimeoutAction,\n      vaultTimeout,\n      userId,\n    );\n\n    const newTokens = new SetTokensResult(newAccessToken);\n\n    if (refreshToken) {\n      newTokens.refreshToken = await this.setRefreshToken(\n        refreshToken,\n        vaultTimeoutAction,\n        vaultTimeout,\n        userId,\n      );\n    }\n\n    if (clientIdClientSecret != null) {\n      const clientId = await this.setClientId(\n        clientIdClientSecret[0],\n        vaultTimeoutAction,\n        vaultTimeout,\n        userId,\n      );\n      const clientSecret = await this.setClientSecret(\n        clientIdClientSecret[1],\n        vaultTimeoutAction,\n        vaultTimeout,\n        userId,\n      );\n      newTokens.clientIdSecretPair = [clientId, clientSecret];\n    }\n    return newTokens;\n  }\n\n  private async getAccessTokenKey(userId: UserId): Promise<AccessTokenKey | null> {\n    const accessTokenKeyB64 = await this.secureStorageService.get<\n      ReturnType<SymmetricCryptoKey[\"toJSON\"]>\n    >(`${userId}${this.accessTokenKeySecureStorageKey}`, this.getSecureStorageOptions(userId));\n\n    if (!accessTokenKeyB64) {\n      return null;\n    }\n\n    const accessTokenKey = SymmetricCryptoKey.fromJSON(accessTokenKeyB64) as AccessTokenKey;\n    return accessTokenKey;\n  }\n\n  private async createAndSaveAccessTokenKey(userId: UserId): Promise<AccessTokenKey> {\n    const newAccessTokenKey = (await this.keyGenerationService.createKey(512)) as AccessTokenKey;\n\n    await this.secureStorageService.save<AccessTokenKey>(\n      `${userId}${this.accessTokenKeySecureStorageKey}`,\n      newAccessTokenKey,\n      this.getSecureStorageOptions(userId),\n    );\n\n    // We are having intermittent issues with access token keys not saving into secure storage on windows 10/11.\n    // So, let's add a check to ensure we can read the value after writing it.\n    const accessTokenKey = await this.getAccessTokenKey(userId);\n\n    if (!accessTokenKey) {\n      throw new Error(\"New Access token key unable to be retrieved from secure storage.\");\n    }\n\n    return newAccessTokenKey;\n  }\n\n  private async clearAccessTokenKey(userId: UserId): Promise<void> {\n    await this.secureStorageService.remove(\n      `${userId}${this.accessTokenKeySecureStorageKey}`,\n      this.getSecureStorageOptions(userId),\n    );\n  }\n\n  private async getOrCreateAccessTokenKey(userId: UserId): Promise<AccessTokenKey> {\n    if (!this.platformSupportsSecureStorage) {\n      throw new Error(\"Platform does not support secure storage. Cannot obtain access token key.\");\n    }\n\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot obtain access token key.\");\n    }\n\n    // First see if we have an accessTokenKey in secure storage and return it if we do\n    // Note: retrieving/saving data from/to secure storage on linux will throw if the\n    // distro doesn't have a secure storage provider\n    let accessTokenKey: AccessTokenKey = await this.getAccessTokenKey(userId);\n\n    if (!accessTokenKey) {\n      // Otherwise, create a new one and save it to secure storage, then return it\n      accessTokenKey = await this.createAndSaveAccessTokenKey(userId);\n    }\n\n    return accessTokenKey;\n  }\n\n  private async encryptAccessToken(accessToken: string, userId: UserId): Promise<EncString> {\n    const accessTokenKey = await this.getOrCreateAccessTokenKey(userId);\n\n    return await this.encryptService.encrypt(accessToken, accessTokenKey);\n  }\n\n  private async decryptAccessToken(\n    accessTokenKey: AccessTokenKey,\n    encryptedAccessToken: EncString,\n  ): Promise<string | null> {\n    if (!accessTokenKey) {\n      throw new Error(\n        \"decryptAccessToken: Access token key required. Cannot decrypt access token.\",\n      );\n    }\n\n    const decryptedAccessToken = await this.encryptService.decryptToUtf8(\n      encryptedAccessToken,\n      accessTokenKey,\n    );\n\n    return decryptedAccessToken;\n  }\n\n  /**\n   * Internal helper for set access token which always requires user id.\n   * This is useful because setTokens always will have a user id from the access token whereas\n   * the public setAccessToken method does not.\n   */\n  private async _setAccessToken(\n    accessToken: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: VaultTimeout,\n    userId: UserId,\n  ): Promise<string> {\n    const storageLocation = await this.determineStorageLocation(\n      vaultTimeoutAction,\n      vaultTimeout,\n      true,\n    );\n\n    switch (storageLocation) {\n      case TokenStorageLocation.SecureStorage: {\n        // Secure storage implementations have variable length limitations (Windows), so we cannot\n        // store the access token directly. Instead, we encrypt with accessTokenKey and store that\n        // in secure storage.\n\n        let decryptedAccessToken: string = null;\n\n        try {\n          const encryptedAccessToken: EncString = await this.encryptAccessToken(\n            accessToken,\n            userId,\n          );\n\n          // Save the encrypted access token to disk\n          await this.singleUserStateProvider\n            .get(userId, ACCESS_TOKEN_DISK)\n            .update((_) => encryptedAccessToken.encryptedString);\n\n          // If we've successfully stored the encrypted access token to disk, we can return the decrypted access token\n          // so that the caller can use it immediately.\n          decryptedAccessToken = accessToken;\n\n          // TODO: PM-6408\n          // 2024-02-20: Remove access token from memory so that we migrate to encrypt the access token over time.\n          // Remove this call to remove the access token from memory after 3 months.\n          await this.singleUserStateProvider.get(userId, ACCESS_TOKEN_MEMORY).update((_) => null);\n        } catch (error) {\n          this.logService.error(\n            `SetAccessToken: storing encrypted access token in secure storage failed. Falling back to disk storage.`,\n            error,\n          );\n\n          // Fall back to disk storage for unecrypted access token\n          decryptedAccessToken = await this.singleUserStateProvider\n            .get(userId, ACCESS_TOKEN_DISK)\n            .update((_) => accessToken);\n        }\n\n        return decryptedAccessToken;\n      }\n      case TokenStorageLocation.Disk:\n        // Access token stored on disk unencrypted as platform does not support secure storage\n        return await this.singleUserStateProvider\n          .get(userId, ACCESS_TOKEN_DISK)\n          .update((_) => accessToken);\n      case TokenStorageLocation.Memory:\n        // Access token stored in memory due to vault timeout settings\n        return await this.singleUserStateProvider\n          .get(userId, ACCESS_TOKEN_MEMORY)\n          .update((_) => accessToken);\n    }\n  }\n\n  async setAccessToken(\n    accessToken: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: VaultTimeout,\n  ): Promise<string> {\n    if (!accessToken) {\n      throw new Error(\"Access token is required.\");\n    }\n    const userId: UserId = await this.getUserIdFromAccessToken(accessToken);\n\n    // If we don't have a user id, we can't save the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot save access token.\");\n    }\n\n    // Can't check for falsey b/c 0 is a valid value\n    if (vaultTimeout == null) {\n      throw new Error(\"Vault Timeout is required.\");\n    }\n\n    if (vaultTimeoutAction == null) {\n      throw new Error(\"Vault Timeout Action is required.\");\n    }\n\n    return await this._setAccessToken(accessToken, vaultTimeoutAction, vaultTimeout, userId);\n  }\n\n  async clearAccessToken(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    // If we don't have a user id, we can't clear the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot clear access token.\");\n    }\n\n    // TODO: re-eval this implementation once we get shared key definitions for vault timeout and vault timeout action data.\n    // we can't determine storage location w/out vaultTimeoutAction and vaultTimeout\n    // but we can simply clear all locations to avoid the need to require those parameters.\n\n    if (this.platformSupportsSecureStorage) {\n      // Always clear the access token key when clearing the access token\n      // The next set of the access token will create a new access token key\n      await this.clearAccessTokenKey(userId);\n    }\n\n    // Platform doesn't support secure storage, so use state provider implementation\n    await this.singleUserStateProvider.get(userId, ACCESS_TOKEN_DISK).update((_) => null);\n    await this.singleUserStateProvider.get(userId, ACCESS_TOKEN_MEMORY).update((_) => null);\n  }\n\n  async getAccessToken(userId?: UserId): Promise<string | null> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      return null;\n    }\n\n    // Try to get the access token from memory\n    const accessTokenMemory = await this.getStateValueByUserIdAndKeyDef(\n      userId,\n      ACCESS_TOKEN_MEMORY,\n    );\n    if (accessTokenMemory != null) {\n      return accessTokenMemory;\n    }\n\n    // If memory is null, read from disk\n    const accessTokenDisk = await this.getStateValueByUserIdAndKeyDef(userId, ACCESS_TOKEN_DISK);\n    if (!accessTokenDisk) {\n      return null;\n    }\n\n    if (this.platformSupportsSecureStorage) {\n      let accessTokenKey: AccessTokenKey;\n      try {\n        accessTokenKey = await this.getAccessTokenKey(userId);\n      } catch (error) {\n        if (EncString.isSerializedEncString(accessTokenDisk)) {\n          this.logService.error(\n            \"Access token key retrieval failed. Unable to decrypt encrypted access token. Logging user out.\",\n            error,\n          );\n          await this.logoutCallback(\"accessTokenUnableToBeDecrypted\", userId);\n          return null;\n        }\n\n        // If the access token key is not found, but the access token is unencrypted then\n        // this indicates that this is the pre-migration state where the access token\n        // was stored unencrypted on disk. We can return the access token as is.\n        // Note: this is likely to only be hit for linux users who don't\n        // have a secure storage provider configured.\n        return accessTokenDisk;\n      }\n\n      if (!accessTokenKey) {\n        if (EncString.isSerializedEncString(accessTokenDisk)) {\n          // The access token is encrypted but we don't have the key to decrypt it for\n          // whatever reason so we have to log the user out.\n          this.logService.error(\n            \"Access token key not found to decrypt encrypted access token. Logging user out.\",\n          );\n\n          await this.logoutCallback(\"accessTokenUnableToBeDecrypted\", userId);\n\n          return null;\n        }\n\n        // We know this is an unencrypted access token\n        return accessTokenDisk;\n      }\n\n      try {\n        const encryptedAccessTokenEncString = new EncString(accessTokenDisk as EncryptedString);\n\n        const decryptedAccessToken = await this.decryptAccessToken(\n          accessTokenKey,\n          encryptedAccessTokenEncString,\n        );\n        return decryptedAccessToken;\n      } catch (error) {\n        // If an error occurs during decryption, logout and then return null.\n        // We don't try to recover here since we'd like to know\n        // if access token and key are getting out of sync.\n        this.logService.error(`Failed to decrypt access token`, error);\n\n        await this.logoutCallback(\"accessTokenUnableToBeDecrypted\", userId);\n\n        return null;\n      }\n    }\n    return accessTokenDisk;\n  }\n\n  // Private because we only ever set the refresh token when also setting the access token\n  // and we need the user id from the access token to save to secure storage\n  private async setRefreshToken(\n    refreshToken: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: VaultTimeout,\n    userId: UserId,\n  ): Promise<string> {\n    // If we don't have a user id, we can't save the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot save refresh token.\");\n    }\n\n    // Can't check for falsey b/c 0 is a valid value\n    if (vaultTimeout == null) {\n      throw new Error(\"Vault Timeout is required.\");\n    }\n\n    if (vaultTimeoutAction == null) {\n      throw new Error(\"Vault Timeout Action is required.\");\n    }\n\n    const storageLocation = await this.determineStorageLocation(\n      vaultTimeoutAction,\n      vaultTimeout,\n      true,\n    );\n\n    switch (storageLocation) {\n      case TokenStorageLocation.SecureStorage: {\n        let decryptedRefreshToken: string = null;\n\n        try {\n          await this.saveStringToSecureStorage(\n            userId,\n            this.refreshTokenSecureStorageKey,\n            refreshToken,\n          );\n\n          // Check if the refresh token was able to be saved to secure storage by reading it\n          // immediately after setting it. This is needed due to intermittent silent failures on Windows 10/11.\n          const refreshTokenSecureStorage = await this.getStringFromSecureStorage(\n            userId,\n            this.refreshTokenSecureStorageKey,\n          );\n\n          // Only throw if the refresh token was not saved to secure storage\n          // If we only check for a nullish value out of secure storage without considering the input value,\n          // then we would end up falling back to disk storage if the input value was null.\n          if (refreshToken !== null && !refreshTokenSecureStorage) {\n            throw new Error(\"Refresh token failed to save to secure storage.\");\n          }\n\n          // If we've successfully stored the encrypted refresh token, we can return the decrypted refresh token\n          // so that the caller can use it immediately.\n          decryptedRefreshToken = refreshToken;\n\n          // TODO: PM-6408\n          // 2024-02-20: Remove refresh token from memory and disk so that we migrate to secure storage over time.\n          // Remove these 2 calls to remove the refresh token from memory and disk after 3 months.\n          await this.singleUserStateProvider.get(userId, REFRESH_TOKEN_DISK).update((_) => null);\n          await this.singleUserStateProvider.get(userId, REFRESH_TOKEN_MEMORY).update((_) => null);\n        } catch (error) {\n          // This case could be hit for both Linux users who don't have secure storage configured\n          // or for Windows users who have intermittent issues with secure storage.\n          this.logService.error(\n            `SetRefreshToken: storing refresh token in secure storage failed. Falling back to disk storage.`,\n            error,\n          );\n\n          // Fall back to disk storage for refresh token\n          decryptedRefreshToken = await this.singleUserStateProvider\n            .get(userId, REFRESH_TOKEN_DISK)\n            .update((_) => refreshToken);\n        }\n\n        return decryptedRefreshToken;\n      }\n      case TokenStorageLocation.Disk:\n        return await this.singleUserStateProvider\n          .get(userId, REFRESH_TOKEN_DISK)\n          .update((_) => refreshToken);\n\n      case TokenStorageLocation.Memory:\n        return await this.singleUserStateProvider\n          .get(userId, REFRESH_TOKEN_MEMORY)\n          .update((_) => refreshToken);\n    }\n  }\n\n  async getRefreshToken(userId?: UserId): Promise<string | null> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      return null;\n    }\n\n    // pre-secure storage migration:\n    // Always read memory first b/c faster\n    const refreshTokenMemory = await this.getStateValueByUserIdAndKeyDef(\n      userId,\n      REFRESH_TOKEN_MEMORY,\n    );\n\n    if (refreshTokenMemory != null) {\n      return refreshTokenMemory;\n    }\n\n    // if memory is null, read from disk and then secure storage\n    const refreshTokenDisk = await this.getStateValueByUserIdAndKeyDef(userId, REFRESH_TOKEN_DISK);\n\n    if (refreshTokenDisk != null) {\n      // This handles the scenario pre-secure storage migration where the refresh token was stored on disk.\n      return refreshTokenDisk;\n    }\n\n    if (this.platformSupportsSecureStorage) {\n      try {\n        const refreshTokenSecureStorage = await this.getStringFromSecureStorage(\n          userId,\n          this.refreshTokenSecureStorageKey,\n        );\n\n        if (refreshTokenSecureStorage != null) {\n          return refreshTokenSecureStorage;\n        }\n\n        this.logService.error(\n          \"Refresh token not found in secure storage. Access token will fail to refresh upon expiration or manual refresh.\",\n        );\n      } catch (error) {\n        // This case will be hit for Linux users who don't have secure storage configured.\n\n        this.logService.error(`Failed to retrieve refresh token from secure storage`, error);\n\n        await this.logoutCallback(\"refreshTokenSecureStorageRetrievalFailure\", userId);\n      }\n    }\n\n    return null;\n  }\n\n  private async clearRefreshToken(userId: UserId): Promise<void> {\n    // If we don't have a user id, we can't clear the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot clear refresh token.\");\n    }\n\n    // TODO: re-eval this once we get shared key definitions for vault timeout and vault timeout action data.\n    // we can't determine storage location w/out vaultTimeoutAction and vaultTimeout\n    // but we can simply clear all locations to avoid the need to require those parameters\n\n    if (this.platformSupportsSecureStorage) {\n      await this.secureStorageService.remove(\n        `${userId}${this.refreshTokenSecureStorageKey}`,\n        this.getSecureStorageOptions(userId),\n      );\n    }\n\n    // Platform doesn't support secure storage, so use state provider implementation\n    await this.singleUserStateProvider.get(userId, REFRESH_TOKEN_MEMORY).update((_) => null);\n    await this.singleUserStateProvider.get(userId, REFRESH_TOKEN_DISK).update((_) => null);\n  }\n\n  async setClientId(\n    clientId: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: VaultTimeout,\n    userId?: UserId,\n  ): Promise<string> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    // If we don't have a user id, we can't save the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot save client id.\");\n    }\n\n    // Can't check for falsey b/c 0 is a valid value\n    if (vaultTimeout == null) {\n      throw new Error(\"Vault Timeout is required.\");\n    }\n\n    if (vaultTimeoutAction == null) {\n      throw new Error(\"Vault Timeout Action is required.\");\n    }\n\n    const storageLocation = await this.determineStorageLocation(\n      vaultTimeoutAction,\n      vaultTimeout,\n      false, // don't use secure storage for client id\n    );\n\n    if (storageLocation === TokenStorageLocation.Disk) {\n      return await this.singleUserStateProvider\n        .get(userId, API_KEY_CLIENT_ID_DISK)\n        .update((_) => clientId);\n    } else if (storageLocation === TokenStorageLocation.Memory) {\n      return await this.singleUserStateProvider\n        .get(userId, API_KEY_CLIENT_ID_MEMORY)\n        .update((_) => clientId);\n    }\n  }\n\n  async getClientId(userId?: UserId): Promise<string | undefined> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      return undefined;\n    }\n\n    // Always read memory first b/c faster\n    const apiKeyClientIdMemory = await this.getStateValueByUserIdAndKeyDef(\n      userId,\n      API_KEY_CLIENT_ID_MEMORY,\n    );\n\n    if (apiKeyClientIdMemory != null) {\n      return apiKeyClientIdMemory;\n    }\n\n    // if memory is null, read from disk\n    return await this.getStateValueByUserIdAndKeyDef(userId, API_KEY_CLIENT_ID_DISK);\n  }\n\n  private async clearClientId(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    // If we don't have a user id, we can't clear the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot clear client id.\");\n    }\n\n    // TODO: re-eval this once we get shared key definitions for vault timeout and vault timeout action data.\n    // we can't determine storage location w/out vaultTimeoutAction and vaultTimeout\n    // but we can simply clear both locations to avoid the need to require those parameters\n\n    // Platform doesn't support secure storage, so use state provider implementation\n    await this.singleUserStateProvider.get(userId, API_KEY_CLIENT_ID_MEMORY).update((_) => null);\n    await this.singleUserStateProvider.get(userId, API_KEY_CLIENT_ID_DISK).update((_) => null);\n  }\n\n  async setClientSecret(\n    clientSecret: string,\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: VaultTimeout,\n    userId?: UserId,\n  ): Promise<string> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot save client secret.\");\n    }\n\n    // Can't check for falsey b/c 0 is a valid value\n    if (vaultTimeout == null) {\n      throw new Error(\"Vault Timeout is required.\");\n    }\n\n    if (vaultTimeoutAction == null) {\n      throw new Error(\"Vault Timeout Action is required.\");\n    }\n\n    const storageLocation = await this.determineStorageLocation(\n      vaultTimeoutAction,\n      vaultTimeout,\n      false, // don't use secure storage for client secret\n    );\n\n    if (storageLocation === TokenStorageLocation.Disk) {\n      return await this.singleUserStateProvider\n        .get(userId, API_KEY_CLIENT_SECRET_DISK)\n        .update((_) => clientSecret);\n    } else if (storageLocation === TokenStorageLocation.Memory) {\n      return await this.singleUserStateProvider\n        .get(userId, API_KEY_CLIENT_SECRET_MEMORY)\n        .update((_) => clientSecret);\n    }\n  }\n\n  async getClientSecret(userId?: UserId): Promise<string | undefined> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      return undefined;\n    }\n\n    // Always read memory first b/c faster\n    const apiKeyClientSecretMemory = await this.getStateValueByUserIdAndKeyDef(\n      userId,\n      API_KEY_CLIENT_SECRET_MEMORY,\n    );\n\n    if (apiKeyClientSecretMemory != null) {\n      return apiKeyClientSecretMemory;\n    }\n\n    // if memory is null, read from disk\n    return await this.getStateValueByUserIdAndKeyDef(userId, API_KEY_CLIENT_SECRET_DISK);\n  }\n\n  private async clearClientSecret(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    // If we don't have a user id, we can't clear the value\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot clear client secret.\");\n    }\n\n    // TODO: re-eval this once we get shared key definitions for vault timeout and vault timeout action data.\n    // we can't determine storage location w/out vaultTimeoutAction and vaultTimeout\n    // but we can simply clear both locations to avoid the need to require those parameters\n\n    // Platform doesn't support secure storage, so use state provider implementation\n    await this.singleUserStateProvider\n      .get(userId, API_KEY_CLIENT_SECRET_MEMORY)\n      .update((_) => null);\n    await this.singleUserStateProvider.get(userId, API_KEY_CLIENT_SECRET_DISK).update((_) => null);\n  }\n\n  async setTwoFactorToken(email: string, twoFactorToken: string): Promise<void> {\n    await this.emailTwoFactorTokenRecordGlobalState.update((emailTwoFactorTokenRecord) => {\n      emailTwoFactorTokenRecord ??= {};\n\n      emailTwoFactorTokenRecord[email] = twoFactorToken;\n      return emailTwoFactorTokenRecord;\n    });\n  }\n\n  async getTwoFactorToken(email: string): Promise<string | null> {\n    const emailTwoFactorTokenRecord: Record<string, string> = await firstValueFrom(\n      this.emailTwoFactorTokenRecordGlobalState.state$,\n    );\n\n    if (!emailTwoFactorTokenRecord) {\n      return null;\n    }\n\n    return emailTwoFactorTokenRecord[email];\n  }\n\n  async clearTwoFactorToken(email: string): Promise<void> {\n    await this.emailTwoFactorTokenRecordGlobalState.update((emailTwoFactorTokenRecord) => {\n      emailTwoFactorTokenRecord ??= {};\n      delete emailTwoFactorTokenRecord[email];\n      return emailTwoFactorTokenRecord;\n    });\n  }\n\n  // TODO: stop accepting optional userIds\n  async clearTokens(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot clear tokens.\");\n    }\n\n    await Promise.all([\n      this.clearAccessToken(userId),\n      this.clearRefreshToken(userId),\n      this.clearClientId(userId),\n      this.clearClientSecret(userId),\n    ]);\n  }\n\n  // jwthelper methods\n  // ref https://github.com/auth0/angular-jwt/blob/master/src/angularJwt/services/jwt.js\n\n  async decodeAccessToken(tokenOrUserId?: string | UserId): Promise<DecodedAccessToken> {\n    let token = tokenOrUserId as string;\n    if (Utils.isGuid(tokenOrUserId)) {\n      token = await this.getAccessToken(tokenOrUserId as UserId);\n    } else {\n      token ??= await this.getAccessToken();\n    }\n\n    if (token == null) {\n      throw new Error(\"Access token not found.\");\n    }\n\n    return decodeJwtTokenToJson(token) as DecodedAccessToken;\n  }\n\n  // TODO: PM-6678- tech debt - consider consolidating the return types of all these access\n  // token data retrieval methods to return null if something goes wrong instead of throwing an error.\n\n  async getTokenExpirationDate(): Promise<Date | null> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    // per RFC, exp claim is optional but if it exists, it should be a number\n    if (!decoded || typeof decoded.exp !== \"number\") {\n      return null;\n    }\n\n    // The 0 in Date(0) is the key; it sets the date to the epoch\n    const expirationDate = new Date(0);\n    expirationDate.setUTCSeconds(decoded.exp);\n    return expirationDate;\n  }\n\n  async tokenSecondsRemaining(offsetSeconds = 0): Promise<number> {\n    const date = await this.getTokenExpirationDate();\n    if (date == null) {\n      return 0;\n    }\n\n    const msRemaining = date.valueOf() - (new Date().valueOf() + offsetSeconds * 1000);\n    return Math.round(msRemaining / 1000);\n  }\n\n  async tokenNeedsRefresh(minutes = 5): Promise<boolean> {\n    const sRemaining = await this.tokenSecondsRemaining();\n    return sRemaining < 60 * minutes;\n  }\n\n  async getUserId(): Promise<UserId> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.sub !== \"string\") {\n      throw new Error(\"No user id found\");\n    }\n\n    return decoded.sub as UserId;\n  }\n\n  private async getUserIdFromAccessToken(accessToken: string): Promise<UserId> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken(accessToken);\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.sub !== \"string\") {\n      throw new Error(\"No user id found\");\n    }\n\n    return decoded.sub as UserId;\n  }\n\n  async getEmail(): Promise<string> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.email !== \"string\") {\n      throw new Error(\"No email found\");\n    }\n\n    return decoded.email;\n  }\n\n  async getEmailVerified(): Promise<boolean> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.email_verified !== \"boolean\") {\n      throw new Error(\"No email verification found\");\n    }\n\n    return decoded.email_verified;\n  }\n\n  async getName(): Promise<string> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.name !== \"string\") {\n      return null;\n    }\n\n    return decoded.name;\n  }\n\n  async getIssuer(): Promise<string> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken();\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    if (!decoded || typeof decoded.iss !== \"string\") {\n      throw new Error(\"No issuer found\");\n    }\n\n    return decoded.iss;\n  }\n\n  async getIsExternal(userId: UserId): Promise<boolean> {\n    let decoded: DecodedAccessToken;\n    try {\n      decoded = await this.decodeAccessToken(userId);\n    } catch (error) {\n      throw new Error(\"Failed to decode access token: \" + error.message);\n    }\n\n    return Array.isArray(decoded.amr) && decoded.amr.includes(\"external\");\n  }\n\n  async getSecurityStamp(userId?: UserId): Promise<string | null> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot get security stamp.\");\n    }\n\n    const securityStamp = await this.getStateValueByUserIdAndKeyDef(userId, SECURITY_STAMP_MEMORY);\n\n    return securityStamp;\n  }\n\n  async setSecurityStamp(securityStamp: string, userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.activeUserIdGlobalState.state$);\n\n    if (!userId) {\n      throw new Error(\"User id not found. Cannot set security stamp.\");\n    }\n\n    await this.singleUserStateProvider\n      .get(userId, SECURITY_STAMP_MEMORY)\n      .update((_) => securityStamp);\n  }\n\n  private async getStateValueByUserIdAndKeyDef(\n    userId: UserId,\n    storageLocation: UserKeyDefinition<string>,\n  ): Promise<string | undefined> {\n    // read from single user state provider\n    return await firstValueFrom(this.singleUserStateProvider.get(userId, storageLocation).state$);\n  }\n\n  private async determineStorageLocation(\n    vaultTimeoutAction: VaultTimeoutAction,\n    vaultTimeout: VaultTimeout,\n    useSecureStorage: boolean,\n  ): Promise<TokenStorageLocation> {\n    if (vaultTimeoutAction == null) {\n      throw new Error(\n        \"TokenService - determineStorageLocation: We expect the vault timeout action to always exist at this point.\",\n      );\n    }\n\n    if (vaultTimeout == null) {\n      throw new Error(\n        \"TokenService - determineStorageLocation: We expect the vault timeout to always exist at this point.\",\n      );\n    }\n\n    if (\n      vaultTimeoutAction === VaultTimeoutAction.LogOut &&\n      vaultTimeout !== VaultTimeoutStringType.Never\n    ) {\n      return TokenStorageLocation.Memory;\n    } else {\n      if (useSecureStorage && this.platformSupportsSecureStorage) {\n        return TokenStorageLocation.SecureStorage;\n      }\n\n      return TokenStorageLocation.Disk;\n    }\n  }\n\n  private async saveStringToSecureStorage(\n    userId: UserId,\n    storageKey: string,\n    value: string,\n  ): Promise<void> {\n    await this.secureStorageService.save<string>(\n      `${userId}${storageKey}`,\n      value,\n      this.getSecureStorageOptions(userId),\n    );\n  }\n\n  private async getStringFromSecureStorage(\n    userId: UserId,\n    storageKey: string,\n  ): Promise<string | null> {\n    // If we have a user ID, read from secure storage.\n    return await this.secureStorageService.get<string>(\n      `${userId}${storageKey}`,\n      this.getSecureStorageOptions(userId),\n    );\n  }\n\n  private getSecureStorageOptions(userId: UserId): StorageOptions {\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId: userId,\n    };\n  }\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nexport function decodeJwtTokenToJson(jwtToken: string): any {\n  if (jwtToken == null) {\n    throw new Error(\"JWT token not found\");\n  }\n\n  const parts = jwtToken.split(\".\");\n  if (parts.length !== 3) {\n    throw new Error(\"JWT must have 3 parts\");\n  }\n\n  // JWT has 3 parts: header, payload, signature separated by '.'\n  // So, grab the payload to decode\n  const encodedPayload = parts[1];\n\n  let decodedPayloadJSON: string;\n  try {\n    // Attempt to decode from URL-safe Base64 to UTF-8\n    decodedPayloadJSON = Utils.fromUrlB64ToUtf8(encodedPayload);\n  } catch (decodingError) {\n    throw new Error(\"Cannot decode the token\");\n  }\n\n  try {\n    // Attempt to parse the JSON payload\n    const decodedToken = JSON.parse(decodedPayloadJSON);\n    return decodedToken;\n  } catch (jsonError) {\n    throw new Error(\"Cannot parse the token's payload into JSON\");\n  }\n}\n","export enum VerificationType {\n  MasterPassword = 0,\n  OTP = 1,\n  PIN = 2,\n  Biometrics = 3,\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { UserVerificationApiServiceAbstraction } from \"../../abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { SecretVerificationRequest } from \"../../models/request/secret-verification.request\";\nimport { VerifyOTPRequest } from \"../../models/request/verify-otp.request\";\nimport { MasterPasswordPolicyResponse } from \"../../models/response/master-password-policy.response\";\n\nexport class UserVerificationApiService implements UserVerificationApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  postAccountVerifyOTP(request: VerifyOTPRequest): Promise<void> {\n    return this.apiService.send(\"POST\", \"/accounts/verify-otp\", request, true, false);\n  }\n  async postAccountRequestOTP(): Promise<void> {\n    return this.apiService.send(\"POST\", \"/accounts/request-otp\", null, true, false);\n  }\n  postAccountVerifyPassword(\n    request: SecretVerificationRequest,\n  ): Promise<MasterPasswordPolicyResponse> {\n    return this.apiService.send(\"POST\", \"/accounts/verify-password\", request, true, true);\n  }\n}\n","export class VerifyOTPRequest {\n  OTP: string;\n\n  constructor(OTP: string) {\n    this.OTP = OTP;\n  }\n}\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { UserDecryptionOptionsServiceAbstraction } from \"@bitwarden/auth/common\";\n\nimport { PinServiceAbstraction } from \"../../../../../auth/src/common/abstractions/pin.service.abstraction\";\nimport { VaultTimeoutSettingsService as VaultTimeoutSettingsServiceAbstraction } from \"../../../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { LogService } from \"../../../platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"../../../platform/abstractions/platform-utils.service\";\nimport { HashPurpose } from \"../../../platform/enums\";\nimport { KeySuffixOptions } from \"../../../platform/enums/key-suffix-options.enum\";\nimport { UserId } from \"../../../types/guid\";\nimport { UserKey } from \"../../../types/key\";\nimport { AccountService } from \"../../abstractions/account.service\";\nimport { KdfConfigService } from \"../../abstractions/kdf-config.service\";\nimport { InternalMasterPasswordServiceAbstraction } from \"../../abstractions/master-password.service.abstraction\";\nimport { UserVerificationApiServiceAbstraction } from \"../../abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"../../abstractions/user-verification/user-verification.service.abstraction\";\nimport { VerificationType } from \"../../enums/verification-type\";\nimport { SecretVerificationRequest } from \"../../models/request/secret-verification.request\";\nimport { VerifyOTPRequest } from \"../../models/request/verify-otp.request\";\nimport { MasterPasswordPolicyResponse } from \"../../models/response/master-password-policy.response\";\nimport { UserVerificationOptions } from \"../../types/user-verification-options\";\nimport {\n  MasterPasswordVerification,\n  MasterPasswordVerificationResponse,\n  OtpVerification,\n  PinVerification,\n  ServerSideVerification,\n  Verification,\n  VerificationWithSecret,\n  verificationHasSecret,\n} from \"../../types/verification\";\n\n/**\n * Used for general-purpose user verification throughout the app.\n * Use it to verify the input collected by UserVerificationComponent.\n */\nexport class UserVerificationService implements UserVerificationServiceAbstraction {\n  constructor(\n    private cryptoService: CryptoService,\n    private accountService: AccountService,\n    private masterPasswordService: InternalMasterPasswordServiceAbstraction,\n    private i18nService: I18nService,\n    private userVerificationApiService: UserVerificationApiServiceAbstraction,\n    private userDecryptionOptionsService: UserDecryptionOptionsServiceAbstraction,\n    private pinService: PinServiceAbstraction,\n    private logService: LogService,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private kdfConfigService: KdfConfigService,\n  ) {}\n\n  async getAvailableVerificationOptions(\n    verificationType: keyof UserVerificationOptions,\n  ): Promise<UserVerificationOptions> {\n    const userId = (await firstValueFrom(this.accountService.activeAccount$))?.id;\n    if (verificationType === \"client\") {\n      const [\n        userHasMasterPassword,\n        isPinDecryptionAvailable,\n        biometricsLockSet,\n        biometricsUserKeyStored,\n      ] = await Promise.all([\n        this.hasMasterPasswordAndMasterKeyHash(userId),\n        this.pinService.isPinDecryptionAvailable(userId),\n        this.vaultTimeoutSettingsService.isBiometricLockSet(userId),\n        this.cryptoService.hasUserKeyStored(KeySuffixOptions.Biometric, userId),\n      ]);\n\n      // note: we do not need to check this.platformUtilsService.supportsBiometric() because\n      // we can just use the logic below which works for both desktop & the browser extension.\n\n      return {\n        client: {\n          masterPassword: userHasMasterPassword,\n          pin: isPinDecryptionAvailable,\n          biometrics:\n            biometricsLockSet &&\n            (biometricsUserKeyStored || !this.platformUtilsService.supportsSecureStorage()),\n        },\n        server: {\n          masterPassword: false,\n          otp: false,\n        },\n      };\n    } else {\n      // server\n      // Don't check if have MP hash locally, because we are going to send the secret to the server to be verified.\n      const userHasMasterPassword = await this.hasMasterPassword(userId);\n\n      return {\n        client: {\n          masterPassword: false,\n          pin: false,\n          biometrics: false,\n        },\n        server: { masterPassword: userHasMasterPassword, otp: !userHasMasterPassword },\n      };\n    }\n  }\n\n  async buildRequest<T extends SecretVerificationRequest>(\n    verification: ServerSideVerification,\n    requestClass?: new () => T,\n    alreadyHashed?: boolean,\n  ) {\n    this.validateSecretInput(verification);\n\n    const request =\n      requestClass != null ? new requestClass() : (new SecretVerificationRequest() as T);\n\n    if (verification.type === VerificationType.OTP) {\n      request.otp = verification.secret;\n    } else {\n      const [userId, email] = await firstValueFrom(\n        this.accountService.activeAccount$.pipe(map((a) => [a?.id, a?.email])),\n      );\n      let masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n      if (!masterKey && !alreadyHashed) {\n        masterKey = await this.cryptoService.makeMasterKey(\n          verification.secret,\n          email,\n          await this.kdfConfigService.getKdfConfig(),\n        );\n      }\n      request.masterPasswordHash = alreadyHashed\n        ? verification.secret\n        : await this.cryptoService.hashMasterKey(verification.secret, masterKey);\n    }\n\n    return request;\n  }\n\n  async verifyUser(verification: Verification): Promise<boolean> {\n    if (verification == null) {\n      throw new Error(\"Verification is required.\");\n    }\n\n    const [userId, email] = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((a) => [a?.id, a?.email])),\n    );\n\n    if (verificationHasSecret(verification)) {\n      this.validateSecretInput(verification);\n    }\n\n    switch (verification.type) {\n      case VerificationType.OTP:\n        return this.verifyUserByOTP(verification);\n      case VerificationType.MasterPassword:\n        await this.verifyUserByMasterPassword(verification, userId, email);\n        return true;\n      case VerificationType.PIN:\n        return this.verifyUserByPIN(verification, userId);\n      case VerificationType.Biometrics:\n        return this.verifyUserByBiometrics();\n      default: {\n        // Compile-time check for exhaustive switch\n        const _exhaustiveCheck: never = verification;\n        return _exhaustiveCheck;\n      }\n    }\n  }\n\n  private async verifyUserByOTP(verification: OtpVerification): Promise<boolean> {\n    const request = new VerifyOTPRequest(verification.secret);\n    try {\n      await this.userVerificationApiService.postAccountVerifyOTP(request);\n    } catch (e) {\n      throw new Error(this.i18nService.t(\"invalidVerificationCode\"));\n    }\n    return true;\n  }\n\n  async verifyUserByMasterPassword(\n    verification: MasterPasswordVerification,\n    userId: UserId,\n    email: string,\n  ): Promise<MasterPasswordVerificationResponse> {\n    if (!verification.secret) {\n      throw new Error(\"Master Password is required. Cannot verify user without a master password.\");\n    }\n    if (!userId) {\n      throw new Error(\"User ID is required. Cannot verify user by master password.\");\n    }\n    if (!email) {\n      throw new Error(\"Email is required. Cannot verify user by master password.\");\n    }\n\n    const kdfConfig = await this.kdfConfigService.getKdfConfig();\n    if (!kdfConfig) {\n      throw new Error(\"KDF config is required. Cannot verify user by master password.\");\n    }\n\n    let masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n    if (!masterKey) {\n      masterKey = await this.cryptoService.makeMasterKey(verification.secret, email, kdfConfig);\n    }\n\n    if (!masterKey) {\n      throw new Error(\"Master key could not be created to verify the master password.\");\n    }\n\n    let policyOptions: MasterPasswordPolicyResponse | null;\n    // Client-side verification\n    if (await this.hasMasterPasswordAndMasterKeyHash(userId)) {\n      const passwordValid = await this.cryptoService.compareAndUpdateKeyHash(\n        verification.secret,\n        masterKey,\n      );\n      if (!passwordValid) {\n        throw new Error(this.i18nService.t(\"invalidMasterPassword\"));\n      }\n      policyOptions = null;\n    } else {\n      // Server-side verification\n      const request = new SecretVerificationRequest();\n      const serverKeyHash = await this.cryptoService.hashMasterKey(\n        verification.secret,\n        masterKey,\n        HashPurpose.ServerAuthorization,\n      );\n      request.masterPasswordHash = serverKeyHash;\n      try {\n        policyOptions = await this.userVerificationApiService.postAccountVerifyPassword(request);\n      } catch (e) {\n        throw new Error(this.i18nService.t(\"invalidMasterPassword\"));\n      }\n    }\n\n    const localKeyHash = await this.cryptoService.hashMasterKey(\n      verification.secret,\n      masterKey,\n      HashPurpose.LocalAuthorization,\n    );\n    await this.masterPasswordService.setMasterKeyHash(localKeyHash, userId);\n    await this.masterPasswordService.setMasterKey(masterKey, userId);\n    return { policyOptions, masterKey };\n  }\n\n  private async verifyUserByPIN(verification: PinVerification, userId: UserId): Promise<boolean> {\n    if (!userId) {\n      throw new Error(\"User ID is required. Cannot verify user by PIN.\");\n    }\n\n    const userKey = await this.pinService.decryptUserKeyWithPin(verification.secret, userId);\n\n    return userKey != null;\n  }\n\n  private async verifyUserByBiometrics(): Promise<boolean> {\n    let userKey: UserKey;\n    // Biometrics crashes and doesn't return a value if the user cancels the prompt\n    try {\n      userKey = await this.cryptoService.getUserKeyFromStorage(KeySuffixOptions.Biometric);\n    } catch (e) {\n      this.logService.error(`Biometrics User Verification failed: ${e.message}`);\n      // So, any failures should be treated as a failed verification\n      return false;\n    }\n\n    return userKey != null;\n  }\n\n  async requestOTP() {\n    await this.userVerificationApiService.postAccountRequestOTP();\n  }\n\n  async hasMasterPassword(userId?: string): Promise<boolean> {\n    if (userId) {\n      const decryptionOptions = await firstValueFrom(\n        this.userDecryptionOptionsService.userDecryptionOptionsById$(userId),\n      );\n\n      if (decryptionOptions?.hasMasterPassword != undefined) {\n        return decryptionOptions.hasMasterPassword;\n      }\n    }\n    return await firstValueFrom(this.userDecryptionOptionsService.hasMasterPassword$);\n  }\n\n  async hasMasterPasswordAndMasterKeyHash(userId?: string): Promise<boolean> {\n    userId ??= (await firstValueFrom(this.accountService.activeAccount$))?.id;\n    return (\n      (await this.hasMasterPassword(userId)) &&\n      (await firstValueFrom(this.masterPasswordService.masterKeyHash$(userId as UserId))) != null\n    );\n  }\n\n  private validateSecretInput(verification: VerificationWithSecret) {\n    if (verification?.secret == null || verification.secret === \"\") {\n      switch (verification.type) {\n        case VerificationType.OTP:\n          throw new Error(this.i18nService.t(\"verificationCodeRequired\"));\n        case VerificationType.MasterPassword:\n          throw new Error(this.i18nService.t(\"masterPasswordRequired\"));\n        case VerificationType.PIN:\n          throw new Error(this.i18nService.t(\"pinRequired\"));\n      }\n    }\n  }\n}\n","import { MasterKey } from \"../../types/key\";\nimport { VerificationType } from \"../enums/verification-type\";\nimport { MasterPasswordPolicyResponse } from \"../models/response/master-password-policy.response\";\n\nexport type OtpVerification = { type: VerificationType.OTP; secret: string };\nexport type MasterPasswordVerification = { type: VerificationType.MasterPassword; secret: string };\nexport type PinVerification = { type: VerificationType.PIN; secret: string };\nexport type BiometricsVerification = { type: VerificationType.Biometrics };\n\nexport type VerificationWithSecret = OtpVerification | MasterPasswordVerification | PinVerification;\nexport type VerificationWithoutSecret = BiometricsVerification;\n\nexport type Verification = VerificationWithSecret | VerificationWithoutSecret;\n\nexport function verificationHasSecret(\n  verification: Verification,\n): verification is VerificationWithSecret {\n  return \"secret\" in verification;\n}\n\nexport type ServerSideVerification = OtpVerification | MasterPasswordVerification;\n\nexport type MasterPasswordVerificationResponse = {\n  masterKey: MasterKey;\n  policyOptions: MasterPasswordPolicyResponse;\n};\n","export const TYPE_CHECK = {\n  FUNCTION: \"function\",\n  NUMBER: \"number\",\n  STRING: \"string\",\n} as const;\n\nexport const EVENTS = {\n  CHANGE: \"change\",\n  INPUT: \"input\",\n  KEYDOWN: \"keydown\",\n  KEYPRESS: \"keypress\",\n  KEYUP: \"keyup\",\n  BLUR: \"blur\",\n  CLICK: \"click\",\n  FOCUS: \"focus\",\n  FOCUSIN: \"focusin\",\n  FOCUSOUT: \"focusout\",\n  SCROLL: \"scroll\",\n  RESIZE: \"resize\",\n  DOMCONTENTLOADED: \"DOMContentLoaded\",\n  LOAD: \"load\",\n  MESSAGE: \"message\",\n  VISIBILITYCHANGE: \"visibilitychange\",\n  MOUSEENTER: \"mouseenter\",\n  MOUSELEAVE: \"mouseleave\",\n  MOUSEUP: \"mouseup\",\n  SUBMIT: \"submit\",\n} as const;\n\nexport const ClearClipboardDelay = {\n  Never: null as null,\n  TenSeconds: 10,\n  TwentySeconds: 20,\n  ThirtySeconds: 30,\n  OneMinute: 60,\n  TwoMinutes: 120,\n  FiveMinutes: 300,\n} as const;\n\n/* Context Menu item Ids */\nexport const AUTOFILL_CARD_ID = \"autofill-card\";\nexport const AUTOFILL_ID = \"autofill\";\nexport const SHOW_AUTOFILL_BUTTON = \"show-autofill-button\";\nexport const AUTOFILL_IDENTITY_ID = \"autofill-identity\";\nexport const COPY_IDENTIFIER_ID = \"copy-identifier\";\nexport const COPY_PASSWORD_ID = \"copy-password\";\nexport const COPY_USERNAME_ID = \"copy-username\";\nexport const COPY_VERIFICATION_CODE_ID = \"copy-totp\";\nexport const CREATE_CARD_ID = \"create-card\";\nexport const CREATE_IDENTITY_ID = \"create-identity\";\nexport const CREATE_LOGIN_ID = \"create-login\";\nexport const GENERATE_PASSWORD_ID = \"generate-password\";\nexport const NOOP_COMMAND_SUFFIX = \"noop\";\nexport const ROOT_ID = \"root\";\nexport const SEPARATOR_ID = \"separator\";\n\nexport const NOTIFICATION_BAR_LIFESPAN_MS = 150000; // 150 seconds\n\nexport const AUTOFILL_OVERLAY_HANDLE_REPOSITION = \"autofill-overlay-handle-reposition-event\";\n\nexport const UPDATE_PASSKEYS_HEADINGS_ON_SCROLL = \"update-passkeys-headings-on-scroll\";\n\nexport const AUTOFILL_TRIGGER_FORM_FIELD_SUBMIT = \"autofill-trigger-form-field-submit\";\n\nexport const AutofillOverlayVisibility = {\n  Off: 0,\n  OnButtonClick: 1,\n  OnFieldFocus: 2,\n} as const;\n\nexport const BrowserClientVendors = {\n  Chrome: \"Chrome\",\n  Opera: \"Opera\",\n  Edge: \"Edge\",\n  Vivaldi: \"Vivaldi\",\n  Unknown: \"Unknown\",\n} as const;\n\nexport const BrowserShortcutsUris = {\n  Chrome: \"chrome://extensions/shortcuts\",\n  Opera: \"opera://extensions/shortcuts\",\n  Edge: \"edge://extensions/shortcuts\",\n  Vivaldi: \"vivaldi://extensions/shortcuts\",\n  Unknown: \"https://bitwarden.com/help/keyboard-shortcuts\",\n} as const;\n\nexport const DisablePasswordManagerUris = {\n  Chrome: \"chrome://settings/autofill\",\n  Opera: \"opera://settings/autofill\",\n  Edge: \"edge://settings/passwords\",\n  Vivaldi: \"vivaldi://settings/autofill\",\n  Unknown: \"https://bitwarden.com/help/disable-browser-autofill/\",\n} as const;\n\nexport const ExtensionCommand = {\n  AutofillCommand: \"autofill_cmd\",\n  AutofillCard: \"autofill_card\",\n  AutofillIdentity: \"autofill_identity\",\n  AutofillLogin: \"autofill_login\",\n  OpenAutofillOverlay: \"open_autofill_overlay\",\n  GeneratePassword: \"generate_password\",\n  OpenPopup: \"open_popup\",\n  LockVault: \"lock_vault\",\n  NoopCommand: \"noop\",\n} as const;\n\nexport type ExtensionCommandType = (typeof ExtensionCommand)[keyof typeof ExtensionCommand];\n\nexport const CLEAR_NOTIFICATION_LOGIN_DATA_DURATION = 60 * 1000; // 1 minute\n","import { map, Observable } from \"rxjs\";\n\nimport { PolicyService } from \"../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"../../admin-console/enums\";\nimport {\n  AUTOFILL_SETTINGS_DISK,\n  AUTOFILL_SETTINGS_DISK_LOCAL,\n  ActiveUserState,\n  GlobalState,\n  KeyDefinition,\n  StateProvider,\n  UserKeyDefinition,\n} from \"../../platform/state\";\nimport { ClearClipboardDelay, AutofillOverlayVisibility } from \"../constants\";\nimport { ClearClipboardDelaySetting, InlineMenuVisibilitySetting } from \"../types\";\n\nconst AUTOFILL_ON_PAGE_LOAD = new UserKeyDefinition(AUTOFILL_SETTINGS_DISK, \"autofillOnPageLoad\", {\n  deserializer: (value: boolean) => value ?? false,\n  clearOn: [],\n});\n\nconst AUTOFILL_ON_PAGE_LOAD_DEFAULT = new UserKeyDefinition(\n  AUTOFILL_SETTINGS_DISK,\n  \"autofillOnPageLoadDefault\",\n  {\n    deserializer: (value: boolean) => value ?? false,\n    clearOn: [],\n  },\n);\n\nconst AUTOFILL_ON_PAGE_LOAD_CALLOUT_DISMISSED = new UserKeyDefinition(\n  AUTOFILL_SETTINGS_DISK,\n  \"autofillOnPageLoadCalloutIsDismissed\",\n  {\n    deserializer: (value: boolean) => value ?? false,\n    clearOn: [],\n  },\n);\n\nconst AUTOFILL_ON_PAGE_LOAD_POLICY_TOAST_HAS_DISPLAYED = new UserKeyDefinition(\n  AUTOFILL_SETTINGS_DISK,\n  \"autofillOnPageLoadPolicyToastHasDisplayed\",\n  {\n    deserializer: (value: boolean) => value ?? false,\n    clearOn: [],\n  },\n);\n\nconst AUTO_COPY_TOTP = new UserKeyDefinition(AUTOFILL_SETTINGS_DISK, \"autoCopyTotp\", {\n  deserializer: (value: boolean) => value ?? true,\n  clearOn: [],\n});\n\nconst INLINE_MENU_VISIBILITY = new KeyDefinition(\n  AUTOFILL_SETTINGS_DISK_LOCAL,\n  \"inlineMenuVisibility\",\n  {\n    deserializer: (value: InlineMenuVisibilitySetting) => value ?? AutofillOverlayVisibility.Off,\n  },\n);\n\nconst ENABLE_CONTEXT_MENU = new KeyDefinition(AUTOFILL_SETTINGS_DISK, \"enableContextMenu\", {\n  deserializer: (value: boolean) => value ?? true,\n});\n\nconst CLEAR_CLIPBOARD_DELAY = new UserKeyDefinition(\n  AUTOFILL_SETTINGS_DISK_LOCAL,\n  \"clearClipboardDelay\",\n  {\n    deserializer: (value: ClearClipboardDelaySetting) => value ?? ClearClipboardDelay.Never,\n    clearOn: [],\n  },\n);\n\nexport abstract class AutofillSettingsServiceAbstraction {\n  autofillOnPageLoad$: Observable<boolean>;\n  setAutofillOnPageLoad: (newValue: boolean) => Promise<void>;\n  autofillOnPageLoadDefault$: Observable<boolean>;\n  setAutofillOnPageLoadDefault: (newValue: boolean) => Promise<void>;\n  autofillOnPageLoadCalloutIsDismissed$: Observable<boolean>;\n  setAutofillOnPageLoadCalloutIsDismissed: (newValue: boolean) => Promise<void>;\n  activateAutofillOnPageLoadFromPolicy$: Observable<boolean>;\n  setAutofillOnPageLoadPolicyToastHasDisplayed: (newValue: boolean) => Promise<void>;\n  autofillOnPageLoadPolicyToastHasDisplayed$: Observable<boolean>;\n  autoCopyTotp$: Observable<boolean>;\n  setAutoCopyTotp: (newValue: boolean) => Promise<void>;\n  inlineMenuVisibility$: Observable<InlineMenuVisibilitySetting>;\n  setInlineMenuVisibility: (newValue: InlineMenuVisibilitySetting) => Promise<void>;\n  enableContextMenu$: Observable<boolean>;\n  setEnableContextMenu: (newValue: boolean) => Promise<void>;\n  clearClipboardDelay$: Observable<ClearClipboardDelaySetting>;\n  setClearClipboardDelay: (newValue: ClearClipboardDelaySetting) => Promise<void>;\n}\n\nexport class AutofillSettingsService implements AutofillSettingsServiceAbstraction {\n  private autofillOnPageLoadState: ActiveUserState<boolean>;\n  readonly autofillOnPageLoad$: Observable<boolean>;\n\n  private autofillOnPageLoadDefaultState: ActiveUserState<boolean>;\n  readonly autofillOnPageLoadDefault$: Observable<boolean>;\n\n  private autofillOnPageLoadCalloutIsDismissedState: ActiveUserState<boolean>;\n  readonly autofillOnPageLoadCalloutIsDismissed$: Observable<boolean>;\n\n  readonly activateAutofillOnPageLoadFromPolicy$: Observable<boolean>;\n\n  private autofillOnPageLoadPolicyToastHasDisplayedState: ActiveUserState<boolean>;\n  readonly autofillOnPageLoadPolicyToastHasDisplayed$: Observable<boolean>;\n\n  private autoCopyTotpState: ActiveUserState<boolean>;\n  readonly autoCopyTotp$: Observable<boolean>;\n\n  private inlineMenuVisibilityState: GlobalState<InlineMenuVisibilitySetting>;\n  readonly inlineMenuVisibility$: Observable<InlineMenuVisibilitySetting>;\n\n  private enableContextMenuState: GlobalState<boolean>;\n  readonly enableContextMenu$: Observable<boolean>;\n\n  private clearClipboardDelayState: ActiveUserState<ClearClipboardDelaySetting>;\n  readonly clearClipboardDelay$: Observable<ClearClipboardDelaySetting>;\n\n  constructor(\n    private stateProvider: StateProvider,\n    private policyService: PolicyService,\n  ) {\n    this.autofillOnPageLoadState = this.stateProvider.getActive(AUTOFILL_ON_PAGE_LOAD);\n    this.autofillOnPageLoad$ = this.autofillOnPageLoadState.state$.pipe(map((x) => x ?? false));\n\n    this.autofillOnPageLoadDefaultState = this.stateProvider.getActive(\n      AUTOFILL_ON_PAGE_LOAD_DEFAULT,\n    );\n    this.autofillOnPageLoadDefault$ = this.autofillOnPageLoadDefaultState.state$.pipe(\n      map((x) => x ?? true),\n    );\n\n    this.autofillOnPageLoadCalloutIsDismissedState = this.stateProvider.getActive(\n      AUTOFILL_ON_PAGE_LOAD_CALLOUT_DISMISSED,\n    );\n    this.autofillOnPageLoadCalloutIsDismissed$ =\n      this.autofillOnPageLoadCalloutIsDismissedState.state$.pipe(map((x) => x ?? false));\n\n    this.activateAutofillOnPageLoadFromPolicy$ = this.policyService.policyAppliesToActiveUser$(\n      PolicyType.ActivateAutofill,\n    );\n\n    this.autofillOnPageLoadPolicyToastHasDisplayedState = this.stateProvider.getActive(\n      AUTOFILL_ON_PAGE_LOAD_POLICY_TOAST_HAS_DISPLAYED,\n    );\n    this.autofillOnPageLoadPolicyToastHasDisplayed$ =\n      this.autofillOnPageLoadPolicyToastHasDisplayedState.state$.pipe(map((x) => x ?? false));\n\n    this.autoCopyTotpState = this.stateProvider.getActive(AUTO_COPY_TOTP);\n    this.autoCopyTotp$ = this.autoCopyTotpState.state$.pipe(map((x) => x ?? true));\n\n    this.inlineMenuVisibilityState = this.stateProvider.getGlobal(INLINE_MENU_VISIBILITY);\n    this.inlineMenuVisibility$ = this.inlineMenuVisibilityState.state$.pipe(\n      map((x) => x ?? AutofillOverlayVisibility.Off),\n    );\n\n    this.enableContextMenuState = this.stateProvider.getGlobal(ENABLE_CONTEXT_MENU);\n    this.enableContextMenu$ = this.enableContextMenuState.state$.pipe(map((x) => x ?? true));\n\n    this.clearClipboardDelayState = this.stateProvider.getActive(CLEAR_CLIPBOARD_DELAY);\n    this.clearClipboardDelay$ = this.clearClipboardDelayState.state$.pipe(\n      map((x) => x ?? ClearClipboardDelay.Never),\n    );\n  }\n\n  async setAutofillOnPageLoad(newValue: boolean): Promise<void> {\n    await this.autofillOnPageLoadState.update(() => newValue);\n  }\n\n  async setAutofillOnPageLoadDefault(newValue: boolean): Promise<void> {\n    await this.autofillOnPageLoadDefaultState.update(() => newValue);\n  }\n\n  async setAutofillOnPageLoadCalloutIsDismissed(newValue: boolean): Promise<void> {\n    await this.autofillOnPageLoadCalloutIsDismissedState.update(() => newValue);\n  }\n\n  async setAutofillOnPageLoadPolicyToastHasDisplayed(newValue: boolean): Promise<void> {\n    await this.autofillOnPageLoadPolicyToastHasDisplayedState.update(() => newValue);\n  }\n\n  async setAutoCopyTotp(newValue: boolean): Promise<void> {\n    await this.autoCopyTotpState.update(() => newValue);\n  }\n\n  async setInlineMenuVisibility(newValue: InlineMenuVisibilitySetting): Promise<void> {\n    await this.inlineMenuVisibilityState.update(() => newValue);\n  }\n\n  async setEnableContextMenu(newValue: boolean): Promise<void> {\n    await this.enableContextMenuState.update(() => newValue);\n  }\n\n  async setClearClipboardDelay(newValue: ClearClipboardDelaySetting): Promise<void> {\n    await this.clearClipboardDelayState.update(() => newValue);\n  }\n}\n","import { map, Observable } from \"rxjs\";\n\nimport {\n  BADGE_SETTINGS_DISK,\n  ActiveUserState,\n  StateProvider,\n  UserKeyDefinition,\n} from \"../../platform/state\";\n\nconst ENABLE_BADGE_COUNTER = new UserKeyDefinition(BADGE_SETTINGS_DISK, \"enableBadgeCounter\", {\n  deserializer: (value: boolean) => value ?? true,\n  clearOn: [],\n});\n\nexport abstract class BadgeSettingsServiceAbstraction {\n  enableBadgeCounter$: Observable<boolean>;\n  setEnableBadgeCounter: (newValue: boolean) => Promise<void>;\n}\n\nexport class BadgeSettingsService implements BadgeSettingsServiceAbstraction {\n  private enableBadgeCounterState: ActiveUserState<boolean>;\n  readonly enableBadgeCounter$: Observable<boolean>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.enableBadgeCounterState = this.stateProvider.getActive(ENABLE_BADGE_COUNTER);\n    this.enableBadgeCounter$ = this.enableBadgeCounterState.state$.pipe(map((x) => x ?? true));\n  }\n\n  async setEnableBadgeCounter(newValue: boolean): Promise<void> {\n    await this.enableBadgeCounterState.update(() => newValue);\n  }\n}\n","/*\n  See full documentation at:\n    https://bitwarden.com/help/uri-match-detection/#match-detection-options\n\n  Domain: \"the top-level domain and second-level domain of the URI match the detected resource\",\n  Host: \"the hostname and (if specified) port of the URI matches the detected resource\",\n  StartsWith: \"the detected resource starts with the URI, regardless of what follows it\",\n  Exact: \"the URI matches the detected resource exactly\",\n  RegularExpression: \"the detected resource matches a specified regular expression\",\n  Never: \"never offer auto-fill for the item\",\n*/\nexport const UriMatchStrategy = {\n  Domain: 0,\n  Host: 1,\n  StartsWith: 2,\n  Exact: 3,\n  RegularExpression: 4,\n  Never: 5,\n} as const;\n\nexport type UriMatchStrategySetting = (typeof UriMatchStrategy)[keyof typeof UriMatchStrategy];\n\n// using uniqueness properties of object shape over Set for ease of state storability\nexport type NeverDomains = { [id: string]: null };\nexport type EquivalentDomains = string[][];\n","import { map, Observable } from \"rxjs\";\n\nimport {\n  NeverDomains,\n  EquivalentDomains,\n  UriMatchStrategySetting,\n  UriMatchStrategy,\n} from \"../../models/domain/domain-service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport {\n  DOMAIN_SETTINGS_DISK,\n  ActiveUserState,\n  GlobalState,\n  KeyDefinition,\n  StateProvider,\n  UserKeyDefinition,\n} from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\n\nconst SHOW_FAVICONS = new KeyDefinition(DOMAIN_SETTINGS_DISK, \"showFavicons\", {\n  deserializer: (value: boolean) => value ?? true,\n});\n\nconst NEVER_DOMAINS = new KeyDefinition(DOMAIN_SETTINGS_DISK, \"neverDomains\", {\n  deserializer: (value: NeverDomains) => value ?? null,\n});\n\nconst EQUIVALENT_DOMAINS = new UserKeyDefinition(DOMAIN_SETTINGS_DISK, \"equivalentDomains\", {\n  deserializer: (value: EquivalentDomains) => value ?? null,\n  clearOn: [\"logout\"],\n});\n\nconst DEFAULT_URI_MATCH_STRATEGY = new UserKeyDefinition(\n  DOMAIN_SETTINGS_DISK,\n  \"defaultUriMatchStrategy\",\n  {\n    deserializer: (value: UriMatchStrategySetting) => value ?? UriMatchStrategy.Domain,\n    clearOn: [],\n  },\n);\n\nexport abstract class DomainSettingsService {\n  showFavicons$: Observable<boolean>;\n  setShowFavicons: (newValue: boolean) => Promise<void>;\n  neverDomains$: Observable<NeverDomains>;\n  setNeverDomains: (newValue: NeverDomains) => Promise<void>;\n  equivalentDomains$: Observable<EquivalentDomains>;\n  setEquivalentDomains: (newValue: EquivalentDomains, userId: UserId) => Promise<void>;\n  defaultUriMatchStrategy$: Observable<UriMatchStrategySetting>;\n  setDefaultUriMatchStrategy: (newValue: UriMatchStrategySetting) => Promise<void>;\n  getUrlEquivalentDomains: (url: string) => Observable<Set<string>>;\n}\n\nexport class DefaultDomainSettingsService implements DomainSettingsService {\n  private showFaviconsState: GlobalState<boolean>;\n  readonly showFavicons$: Observable<boolean>;\n\n  private neverDomainsState: GlobalState<NeverDomains>;\n  readonly neverDomains$: Observable<NeverDomains>;\n\n  private equivalentDomainsState: ActiveUserState<EquivalentDomains>;\n  readonly equivalentDomains$: Observable<EquivalentDomains>;\n\n  private defaultUriMatchStrategyState: ActiveUserState<UriMatchStrategySetting>;\n  readonly defaultUriMatchStrategy$: Observable<UriMatchStrategySetting>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.showFaviconsState = this.stateProvider.getGlobal(SHOW_FAVICONS);\n    this.showFavicons$ = this.showFaviconsState.state$.pipe(map((x) => x ?? true));\n\n    this.neverDomainsState = this.stateProvider.getGlobal(NEVER_DOMAINS);\n    this.neverDomains$ = this.neverDomainsState.state$.pipe(map((x) => x ?? null));\n\n    this.equivalentDomainsState = this.stateProvider.getActive(EQUIVALENT_DOMAINS);\n    this.equivalentDomains$ = this.equivalentDomainsState.state$.pipe(map((x) => x ?? null));\n\n    this.defaultUriMatchStrategyState = this.stateProvider.getActive(DEFAULT_URI_MATCH_STRATEGY);\n    this.defaultUriMatchStrategy$ = this.defaultUriMatchStrategyState.state$.pipe(\n      map((x) => x ?? UriMatchStrategy.Domain),\n    );\n  }\n\n  async setShowFavicons(newValue: boolean): Promise<void> {\n    await this.showFaviconsState.update(() => newValue);\n  }\n\n  async setNeverDomains(newValue: NeverDomains): Promise<void> {\n    await this.neverDomainsState.update(() => newValue);\n  }\n\n  async setEquivalentDomains(newValue: EquivalentDomains, userId: UserId): Promise<void> {\n    await this.stateProvider.getUser(userId, EQUIVALENT_DOMAINS).update(() => newValue);\n  }\n\n  async setDefaultUriMatchStrategy(newValue: UriMatchStrategySetting): Promise<void> {\n    await this.defaultUriMatchStrategyState.update(() => newValue);\n  }\n\n  getUrlEquivalentDomains(url: string): Observable<Set<string>> {\n    const domains$ = this.equivalentDomains$.pipe(\n      map((equivalentDomains) => {\n        const domain = Utils.getDomain(url);\n        if (domain == null || equivalentDomains == null) {\n          return new Set() as Set<string>;\n        }\n\n        const equivalents = equivalentDomains.filter((ed) => ed.includes(domain)).flat();\n\n        return new Set(equivalents);\n      }),\n    );\n\n    return domains$;\n  }\n}\n","import { map, Observable } from \"rxjs\";\n\nimport {\n  USER_NOTIFICATION_SETTINGS_DISK,\n  GlobalState,\n  KeyDefinition,\n  StateProvider,\n} from \"../../platform/state\";\n\nconst ENABLE_ADDED_LOGIN_PROMPT = new KeyDefinition(\n  USER_NOTIFICATION_SETTINGS_DISK,\n  \"enableAddedLoginPrompt\",\n  {\n    deserializer: (value: boolean) => value ?? true,\n  },\n);\nconst ENABLE_CHANGED_PASSWORD_PROMPT = new KeyDefinition(\n  USER_NOTIFICATION_SETTINGS_DISK,\n  \"enableChangedPasswordPrompt\",\n  {\n    deserializer: (value: boolean) => value ?? true,\n  },\n);\n\nexport abstract class UserNotificationSettingsServiceAbstraction {\n  enableAddedLoginPrompt$: Observable<boolean>;\n  setEnableAddedLoginPrompt: (newValue: boolean) => Promise<void>;\n  enableChangedPasswordPrompt$: Observable<boolean>;\n  setEnableChangedPasswordPrompt: (newValue: boolean) => Promise<void>;\n}\n\nexport class UserNotificationSettingsService implements UserNotificationSettingsServiceAbstraction {\n  private enableAddedLoginPromptState: GlobalState<boolean>;\n  readonly enableAddedLoginPrompt$: Observable<boolean>;\n\n  private enableChangedPasswordPromptState: GlobalState<boolean>;\n  readonly enableChangedPasswordPrompt$: Observable<boolean>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.enableAddedLoginPromptState = this.stateProvider.getGlobal(ENABLE_ADDED_LOGIN_PROMPT);\n    this.enableAddedLoginPrompt$ = this.enableAddedLoginPromptState.state$.pipe(\n      map((x) => x ?? true),\n    );\n\n    this.enableChangedPasswordPromptState = this.stateProvider.getGlobal(\n      ENABLE_CHANGED_PASSWORD_PROMPT,\n    );\n    this.enableChangedPasswordPrompt$ = this.enableChangedPasswordPromptState.state$.pipe(\n      map((x) => x ?? true),\n    );\n  }\n\n  async setEnableAddedLoginPrompt(newValue: boolean): Promise<void> {\n    await this.enableAddedLoginPromptState.update(() => newValue);\n  }\n\n  async setEnableChangedPasswordPrompt(newValue: boolean): Promise<void> {\n    await this.enableChangedPasswordPromptState.update(() => newValue);\n  }\n}\n","import { map, Observable, of, switchMap } from \"rxjs\";\n\nimport {\n  ActiveUserState,\n  BILLING_DISK,\n  StateProvider,\n  UserKeyDefinition,\n} from \"../../../platform/state\";\nimport { UserId } from \"../../../types/guid\";\nimport {\n  BillingAccountProfile,\n  BillingAccountProfileStateService,\n} from \"../../abstractions/account/billing-account-profile-state.service\";\n\nexport const BILLING_ACCOUNT_PROFILE_KEY_DEFINITION = new UserKeyDefinition<BillingAccountProfile>(\n  BILLING_DISK,\n  \"accountProfile\",\n  {\n    deserializer: (billingAccountProfile) => billingAccountProfile,\n    clearOn: [\"logout\"],\n  },\n);\n\nexport class DefaultBillingAccountProfileStateService implements BillingAccountProfileStateService {\n  private billingAccountProfileState: ActiveUserState<BillingAccountProfile>;\n\n  hasPremiumFromAnyOrganization$: Observable<boolean>;\n  hasPremiumPersonally$: Observable<boolean>;\n  hasPremiumFromAnySource$: Observable<boolean>;\n\n  constructor(private readonly stateProvider: StateProvider) {\n    this.billingAccountProfileState = stateProvider.getActive(\n      BILLING_ACCOUNT_PROFILE_KEY_DEFINITION,\n    );\n\n    // Setup an observable that will always track the currently active user\n    // but will fallback to emitting null when there is no active user.\n    const billingAccountProfileOrNull = stateProvider.activeUserId$.pipe(\n      switchMap((userId) =>\n        userId != null\n          ? stateProvider.getUser(userId, BILLING_ACCOUNT_PROFILE_KEY_DEFINITION).state$\n          : of(null),\n      ),\n    );\n\n    this.hasPremiumFromAnyOrganization$ = billingAccountProfileOrNull.pipe(\n      map((billingAccountProfile) => !!billingAccountProfile?.hasPremiumFromAnyOrganization),\n    );\n\n    this.hasPremiumPersonally$ = billingAccountProfileOrNull.pipe(\n      map((billingAccountProfile) => !!billingAccountProfile?.hasPremiumPersonally),\n    );\n\n    this.hasPremiumFromAnySource$ = billingAccountProfileOrNull.pipe(\n      map(\n        (billingAccountProfile) =>\n          billingAccountProfile?.hasPremiumFromAnyOrganization === true ||\n          billingAccountProfile?.hasPremiumPersonally === true,\n      ),\n    );\n  }\n\n  async setHasPremium(\n    hasPremiumPersonally: boolean,\n    hasPremiumFromAnyOrganization: boolean,\n    userId: UserId,\n  ): Promise<void> {\n    await this.stateProvider.getUser(userId, BILLING_ACCOUNT_PROFILE_KEY_DEFINITION).update((_) => {\n      return {\n        hasPremiumPersonally: hasPremiumPersonally,\n        hasPremiumFromAnyOrganization: hasPremiumFromAnyOrganization,\n      };\n    });\n  }\n}\n","import { UserId } from \"../../types/guid\";\nimport { EncryptedString } from \"../models/domain/enc-string\";\nimport { KeyDefinition, BIOMETRIC_SETTINGS_DISK, UserKeyDefinition } from \"../state\";\n\n/**\n * Indicates whether the user elected to store a biometric key to unlock their vault.\n */\nexport const BIOMETRIC_UNLOCK_ENABLED = new UserKeyDefinition<boolean>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"biometricUnlockEnabled\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [],\n  },\n);\n\n/**\n * Boolean indicating the user has elected to require a password to use their biometric key upon starting the application.\n *\n * A true setting controls whether {@link ENCRYPTED_CLIENT_KEY_HALF} is set.\n */\nexport const REQUIRE_PASSWORD_ON_START = new UserKeyDefinition<boolean>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"requirePasswordOnStart\",\n  {\n    deserializer: (value) => value,\n    clearOn: [],\n  },\n);\n\n/**\n * If the user has elected to require a password on first unlock of an application instance, this key will store the\n * encrypted client key half used to unlock the vault.\n *\n * For operating systems without application-level key storage, this key half is concatenated with a signature\n * provided by the OS and used to encrypt the biometric key prior to storage.\n */\nexport const ENCRYPTED_CLIENT_KEY_HALF = new UserKeyDefinition<EncryptedString>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"clientKeyHalf\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [\"logout\"],\n  },\n);\n\n/**\n * Indicates the user has been warned about the security implications of using biometrics and, depending on the OS,\n * recommended to require a password on first unlock of an application instance.\n */\nexport const DISMISSED_REQUIRE_PASSWORD_ON_START_CALLOUT = new UserKeyDefinition<boolean>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"dismissedBiometricRequirePasswordOnStartCallout\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [],\n  },\n);\n\n/**\n * Stores whether the user has elected to cancel the biometric prompt. This is stored on disk due to process-reload\n * wiping memory state. We don't want to prompt the user again if they've elected to cancel.\n */\nexport const PROMPT_CANCELLED = KeyDefinition.record<boolean, UserId>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"promptCancelled\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\n/**\n * Stores whether the user has elected to automatically prompt for biometric unlock on application start.\n */\nexport const PROMPT_AUTOMATICALLY = new UserKeyDefinition<boolean>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"promptAutomatically\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [],\n  },\n);\n\n/**\n * Stores whether or not IPC handshake has been validated this session.\n */\nexport const FINGERPRINT_VALIDATED = new KeyDefinition<boolean>(\n  BIOMETRIC_SETTINGS_DISK,\n  \"fingerprintValidated\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n","import { Observable, firstValueFrom, map, combineLatest } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\nimport { EncryptedString, EncString } from \"../models/domain/enc-string\";\nimport { ActiveUserState, GlobalState, StateProvider } from \"../state\";\n\nimport {\n  BIOMETRIC_UNLOCK_ENABLED,\n  ENCRYPTED_CLIENT_KEY_HALF,\n  REQUIRE_PASSWORD_ON_START,\n  DISMISSED_REQUIRE_PASSWORD_ON_START_CALLOUT,\n  PROMPT_AUTOMATICALLY,\n  PROMPT_CANCELLED,\n  FINGERPRINT_VALIDATED,\n} from \"./biometric.state\";\n\nexport abstract class BiometricStateService {\n  /**\n   * `true` if the currently active user has elected to store a biometric key to unlock their vault.\n   */\n  abstract biometricUnlockEnabled$: Observable<boolean>; // used to be biometricUnlock\n  /**\n   * If the user has elected to require a password on first unlock of an application instance, this key will store the\n   * encrypted client key half used to unlock the vault.\n   *\n   * Tracks the currently active user\n   */\n  abstract encryptedClientKeyHalf$: Observable<EncString | undefined>;\n  /**\n   * whether or not a password is required on first unlock after opening the application\n   *\n   * tracks the currently active user\n   */\n  abstract requirePasswordOnStart$: Observable<boolean>;\n  /**\n   * Indicates the user has been warned about the security implications of using biometrics and, depending on the OS,\n   *\n   * tracks the currently active user.\n   */\n  abstract dismissedRequirePasswordOnStartCallout$: Observable<boolean>;\n  /**\n   * Whether the user has cancelled the biometric prompt.\n   *\n   * tracks the currently active user\n   */\n  abstract promptCancelled$: Observable<boolean>;\n  /**\n   * Whether the user has elected to automatically prompt for biometrics.\n   *\n   * tracks the currently active user\n   */\n  abstract promptAutomatically$: Observable<boolean>;\n  /**\n   * Whether or not IPC fingerprint has been validated by the user this session.\n   */\n  abstract fingerprintValidated$: Observable<boolean>;\n\n  /**\n   * Updates the require password on start state for the currently active user.\n   *\n   * If false, the encrypted client key half will be removed.\n   * @param value whether or not a password is required on first unlock after opening the application\n   */\n  abstract setRequirePasswordOnStart(value: boolean): Promise<void>;\n  /**\n   * Updates the biometric unlock enabled state for the currently active user.\n   * @param enabled whether or not to store a biometric key to unlock the vault\n   */\n  abstract setBiometricUnlockEnabled(enabled: boolean): Promise<void>;\n  /**\n   * Gets the biometric unlock enabled state for the given user.\n   * @param userId user Id to check\n   */\n  abstract getBiometricUnlockEnabled(userId: UserId): Promise<boolean>;\n  abstract setEncryptedClientKeyHalf(encryptedKeyHalf: EncString, userId?: UserId): Promise<void>;\n  abstract getEncryptedClientKeyHalf(userId: UserId): Promise<EncString>;\n  abstract getRequirePasswordOnStart(userId: UserId): Promise<boolean>;\n  abstract removeEncryptedClientKeyHalf(userId: UserId): Promise<void>;\n  /**\n   * Updates the active user's state to reflect that they've been warned about requiring password on start.\n   */\n  abstract setDismissedRequirePasswordOnStartCallout(): Promise<void>;\n  /**\n   * Updates the active user's state to reflect that they've cancelled the biometric prompt.\n   */\n  abstract setUserPromptCancelled(): Promise<void>;\n  /**\n   * Resets the given user's state to reflect that they haven't cancelled the biometric prompt.\n   * @param userId the user to reset the prompt cancelled state for. If not provided, the currently active user will be used.\n   */\n  abstract resetUserPromptCancelled(userId?: UserId): Promise<void>;\n  /**\n   * Resets all user's state to reflect that they haven't cancelled the biometric prompt.\n   */\n  abstract resetAllPromptCancelled(): Promise<void>;\n  /**\n   * Updates the currently active user's setting for auto prompting for biometrics on application start and lock\n   * @param prompt Whether or not to prompt for biometrics on application start.\n   */\n  abstract setPromptAutomatically(prompt: boolean): Promise<void>;\n  /**\n   * Updates whether or not IPC has been validated by the user this session\n   * @param validated the value to save\n   */\n  abstract setFingerprintValidated(validated: boolean): Promise<void>;\n\n  abstract logout(userId: UserId): Promise<void>;\n}\n\nexport class DefaultBiometricStateService implements BiometricStateService {\n  private biometricUnlockEnabledState: ActiveUserState<boolean>;\n  private requirePasswordOnStartState: ActiveUserState<boolean>;\n  private encryptedClientKeyHalfState: ActiveUserState<EncryptedString | undefined>;\n  private dismissedRequirePasswordOnStartCalloutState: ActiveUserState<boolean>;\n  private promptCancelledState: GlobalState<Record<UserId, boolean>>;\n  private promptAutomaticallyState: ActiveUserState<boolean>;\n  private fingerprintValidatedState: GlobalState<boolean>;\n  biometricUnlockEnabled$: Observable<boolean>;\n  encryptedClientKeyHalf$: Observable<EncString | undefined>;\n  requirePasswordOnStart$: Observable<boolean>;\n  dismissedRequirePasswordOnStartCallout$: Observable<boolean>;\n  promptCancelled$: Observable<boolean>;\n  promptAutomatically$: Observable<boolean>;\n  fingerprintValidated$: Observable<boolean>;\n\n  constructor(private stateProvider: StateProvider) {\n    this.biometricUnlockEnabledState = this.stateProvider.getActive(BIOMETRIC_UNLOCK_ENABLED);\n    this.biometricUnlockEnabled$ = this.biometricUnlockEnabledState.state$.pipe(map(Boolean));\n\n    this.requirePasswordOnStartState = this.stateProvider.getActive(REQUIRE_PASSWORD_ON_START);\n    this.requirePasswordOnStart$ = this.requirePasswordOnStartState.state$.pipe(\n      map((value) => !!value),\n    );\n\n    this.encryptedClientKeyHalfState = this.stateProvider.getActive(ENCRYPTED_CLIENT_KEY_HALF);\n    this.encryptedClientKeyHalf$ = this.encryptedClientKeyHalfState.state$.pipe(\n      map(encryptedClientKeyHalfToEncString),\n    );\n\n    this.dismissedRequirePasswordOnStartCalloutState = this.stateProvider.getActive(\n      DISMISSED_REQUIRE_PASSWORD_ON_START_CALLOUT,\n    );\n    this.dismissedRequirePasswordOnStartCallout$ =\n      this.dismissedRequirePasswordOnStartCalloutState.state$.pipe(map(Boolean));\n\n    this.promptCancelledState = this.stateProvider.getGlobal(PROMPT_CANCELLED);\n    this.promptCancelled$ = combineLatest([\n      this.stateProvider.activeUserId$,\n      this.promptCancelledState.state$,\n    ]).pipe(\n      map(([userId, record]) => {\n        return record?.[userId] ?? false;\n      }),\n    );\n    this.promptAutomaticallyState = this.stateProvider.getActive(PROMPT_AUTOMATICALLY);\n    this.promptAutomatically$ = this.promptAutomaticallyState.state$.pipe(map(Boolean));\n\n    this.fingerprintValidatedState = this.stateProvider.getGlobal(FINGERPRINT_VALIDATED);\n    this.fingerprintValidated$ = this.fingerprintValidatedState.state$.pipe(map(Boolean));\n  }\n\n  async setBiometricUnlockEnabled(enabled: boolean): Promise<void> {\n    await this.biometricUnlockEnabledState.update(() => enabled);\n  }\n\n  async getBiometricUnlockEnabled(userId: UserId): Promise<boolean> {\n    return await firstValueFrom(\n      this.stateProvider.getUser(userId, BIOMETRIC_UNLOCK_ENABLED).state$.pipe(map(Boolean)),\n    );\n  }\n\n  async setRequirePasswordOnStart(value: boolean): Promise<void> {\n    let currentActiveId: UserId;\n    await this.requirePasswordOnStartState.update(\n      (_, [userId]) => {\n        currentActiveId = userId;\n        return value;\n      },\n      {\n        combineLatestWith: this.requirePasswordOnStartState.combinedState$,\n      },\n    );\n    if (!value) {\n      await this.removeEncryptedClientKeyHalf(currentActiveId);\n    }\n  }\n\n  async setEncryptedClientKeyHalf(encryptedKeyHalf: EncString, userId?: UserId): Promise<void> {\n    const value = encryptedKeyHalf?.encryptedString ?? null;\n    if (userId) {\n      await this.stateProvider.getUser(userId, ENCRYPTED_CLIENT_KEY_HALF).update(() => value);\n    } else {\n      await this.encryptedClientKeyHalfState.update(() => value);\n    }\n  }\n\n  async removeEncryptedClientKeyHalf(userId: UserId): Promise<void> {\n    await this.stateProvider.getUser(userId, ENCRYPTED_CLIENT_KEY_HALF).update(() => null);\n  }\n\n  async getRequirePasswordOnStart(userId: UserId): Promise<boolean> {\n    return !!(await firstValueFrom(\n      this.stateProvider.getUser(userId, REQUIRE_PASSWORD_ON_START).state$,\n    ));\n  }\n\n  async getEncryptedClientKeyHalf(userId: UserId): Promise<EncString> {\n    return await firstValueFrom(\n      this.stateProvider\n        .getUser(userId, ENCRYPTED_CLIENT_KEY_HALF)\n        .state$.pipe(map(encryptedClientKeyHalfToEncString)),\n    );\n  }\n\n  async logout(userId: UserId): Promise<void> {\n    await this.stateProvider.getUser(userId, ENCRYPTED_CLIENT_KEY_HALF).update(() => null);\n    await this.resetUserPromptCancelled(userId);\n    // Persist auto prompt setting through logout\n    // Persist dismissed require password on start callout through logout\n  }\n\n  async setDismissedRequirePasswordOnStartCallout(): Promise<void> {\n    await this.dismissedRequirePasswordOnStartCalloutState.update(() => true);\n  }\n\n  async resetUserPromptCancelled(userId: UserId): Promise<void> {\n    await this.stateProvider.getGlobal(PROMPT_CANCELLED).update(\n      (data, activeUserId) => {\n        delete data[userId ?? activeUserId];\n        return data;\n      },\n      {\n        combineLatestWith: this.stateProvider.activeUserId$,\n        shouldUpdate: (data, activeUserId) => data?.[userId ?? activeUserId] != null,\n      },\n    );\n  }\n\n  async setUserPromptCancelled(): Promise<void> {\n    await this.promptCancelledState.update(\n      (record, userId) => {\n        record ??= {};\n        record[userId] = true;\n        return record;\n      },\n      {\n        combineLatestWith: this.stateProvider.activeUserId$,\n        shouldUpdate: (_, userId) => {\n          if (userId == null) {\n            throw new Error(\n              \"Cannot update biometric prompt cancelled state without an active user\",\n            );\n          }\n          return true;\n        },\n      },\n    );\n  }\n\n  async resetAllPromptCancelled(): Promise<void> {\n    await this.promptCancelledState.update(() => null);\n  }\n\n  async setPromptAutomatically(prompt: boolean): Promise<void> {\n    await this.promptAutomaticallyState.update(() => prompt);\n  }\n\n  async setFingerprintValidated(validated: boolean): Promise<void> {\n    await this.fingerprintValidatedState.update(() => validated);\n  }\n}\n\nfunction encryptedClientKeyHalfToEncString(\n  encryptedKeyHalf: EncryptedString | undefined,\n): EncString {\n  return encryptedKeyHalf == null ? null : new EncString(encryptedKeyHalf);\n}\n","import { Account } from \"../models/domain/account\";\n\nexport class AccountFactory<T extends Account = Account> {\n  private accountConstructor: new (init: Partial<T>) => T;\n\n  constructor(accountConstructor: new (init: Partial<T>) => T) {\n    this.accountConstructor = accountConstructor;\n  }\n\n  create(args: Partial<T>) {\n    return new this.accountConstructor(args);\n  }\n}\n","import { GlobalState } from \"../models/domain/global-state\";\n\nexport class GlobalStateFactory<T extends GlobalState = GlobalState> {\n  private globalStateConstructor: new (init: Partial<T>) => T;\n\n  constructor(globalStateConstructor: new (init: Partial<T>) => T) {\n    this.globalStateConstructor = globalStateConstructor;\n  }\n\n  create(args?: Partial<T>) {\n    return new this.globalStateConstructor(args);\n  }\n}\n","import { Account } from \"../models/domain/account\";\nimport { GlobalState } from \"../models/domain/global-state\";\n\nimport { AccountFactory } from \"./account-factory\";\nimport { GlobalStateFactory } from \"./global-state-factory\";\n\nexport class StateFactory<\n  TGlobal extends GlobalState = GlobalState,\n  TAccount extends Account = Account,\n> {\n  private globalStateFactory: GlobalStateFactory<TGlobal>;\n  private accountFactory: AccountFactory<TAccount>;\n\n  constructor(\n    globalStateConstructor: new (init: Partial<TGlobal>) => TGlobal,\n    accountConstructor: new (init: Partial<TAccount>) => TAccount,\n  ) {\n    this.globalStateFactory = new GlobalStateFactory(globalStateConstructor);\n    this.accountFactory = new AccountFactory(accountConstructor);\n  }\n\n  createGlobal(args: Partial<TGlobal>): TGlobal {\n    return this.globalStateFactory.create(args);\n  }\n\n  createAccount(args: Partial<TAccount>): TAccount {\n    return this.accountFactory.create(args);\n  }\n}\n","import { EMPTY, Observable, filter } from \"rxjs\";\n\nimport { Message, CommandDefinition } from \"./types\";\n\n/**\n * A class that allows for listening to messages coming through the application,\n * allows for listening of all messages or just the messages you care about.\n *\n * @note Consider NOT using messaging at all if you can. State Providers offer an observable stream of\n * data that is persisted. This can serve messages that might have been used to notify of settings changes\n * or vault data changes and those observables should be preferred over messaging.\n */\nexport class MessageListener {\n  constructor(private readonly messageStream: Observable<Message<Record<string, unknown>>>) {}\n\n  /**\n   * A stream of all messages sent through the application. It does not contain type information for the\n   * other properties on the messages. You are encouraged to instead subscribe to an individual message\n   * through {@link messages$}.\n   */\n  allMessages$ = this.messageStream;\n\n  /**\n   * Creates an observable stream filtered to just the command given via the {@link CommandDefinition} and typed\n   * to the generic contained in the CommandDefinition. Be careful using this method unless all your messages are being\n   * sent through `MessageSender.send`, if that isn't the case you should have lower confidence in the message\n   * payload being the expected type.\n   *\n   * @param commandDefinition The CommandDefinition containing the information about the message type you care about.\n   */\n  messages$<T extends Record<string, unknown>>(\n    commandDefinition: CommandDefinition<T>,\n  ): Observable<T> {\n    return this.allMessages$.pipe(\n      filter((msg) => msg?.command === commandDefinition.command),\n    ) as Observable<T>;\n  }\n\n  /**\n   * A helper property for returning a MessageListener that will never emit any messages and will immediately complete.\n   */\n  static readonly EMPTY = new MessageListener(EMPTY);\n}\n","import { CommandDefinition } from \"./types\";\n\nclass MultiMessageSender implements MessageSender {\n  constructor(private readonly innerMessageSenders: MessageSender[]) {}\n\n  send<T extends Record<string, unknown>>(\n    commandDefinition: string | CommandDefinition<T>,\n    payload: Record<string, unknown> | T = {},\n  ): void {\n    for (const messageSender of this.innerMessageSenders) {\n      messageSender.send(commandDefinition, payload);\n    }\n  }\n}\n\nexport abstract class MessageSender {\n  /**\n   * A method for sending messages in a type safe manner. The passed in command definition\n   * will require you to provide a compatible type in the payload parameter.\n   *\n   * @example\n   * const MY_COMMAND = new CommandDefinition<{ test: number }>(\"myCommand\");\n   *\n   * this.messageSender.send(MY_COMMAND, { test: 14 });\n   *\n   * @param commandDefinition\n   * @param payload\n   */\n  abstract send<T extends Record<string, unknown>>(\n    commandDefinition: CommandDefinition<T>,\n    payload: T,\n  ): void;\n\n  /**\n   * A legacy method for sending messages in a non-type safe way.\n   *\n   * @remarks Consider defining a {@link CommandDefinition} and passing that in for the first parameter to\n   * get compilation errors when defining an incompatible payload.\n   *\n   * @param command The string based command of your message.\n   * @param payload Extra contextual information regarding the message. Be aware that this payload may\n   *   be serialized and lose all prototype information.\n   */\n  abstract send(command: string, payload?: Record<string, unknown>): void;\n\n  /** Implementation of the other two overloads, read their docs instead. */\n  abstract send<T extends Record<string, unknown>>(\n    commandDefinition: CommandDefinition<T> | string,\n    payload: T | Record<string, unknown>,\n  ): void;\n\n  /**\n   * A helper method for combine multiple {@link MessageSender}'s.\n   * @param messageSenders The message senders that should be combined.\n   * @returns A message sender that will relay all messages to the given message senders.\n   */\n  static combine(...messageSenders: MessageSender[]) {\n    return new MultiMessageSender(messageSenders);\n  }\n\n  /**\n   * A helper property for creating a {@link MessageSender} that sends to nowhere.\n   */\n  static readonly EMPTY: MessageSender = new MultiMessageSender([]);\n}\n","declare const tag: unique symbol;\n\n/**\n * A class for defining information about a message, this is helpful\n * alonside `MessageSender` and `MessageListener` for providing a type\n * safe(-ish) way of sending and receiving messages.\n */\nexport class CommandDefinition<T extends Record<string, unknown>> {\n  [tag]: T;\n  constructor(readonly command: string) {}\n}\n\nexport type Message<T extends Record<string, unknown>> = { command: string } & T;\n","import { map } from \"rxjs\";\n\nimport { CommandDefinition } from \"./types\";\n\nexport const getCommand = (\n  commandDefinition: CommandDefinition<Record<string, unknown>> | string,\n) => {\n  if (typeof commandDefinition === \"string\") {\n    return commandDefinition;\n  } else {\n    return commandDefinition.command;\n  }\n};\n\nexport const EXTERNAL_SOURCE_TAG = Symbol(\"externalSource\");\n\nexport const isExternalMessage = (message: Record<PropertyKey, unknown>) => {\n  return message?.[EXTERNAL_SOURCE_TAG] === true;\n};\n\nexport const tagAsExternal = <T extends Record<PropertyKey, unknown>>() => {\n  return map((message: T) => {\n    return Object.assign(message, { [EXTERNAL_SOURCE_TAG]: true });\n  });\n};\n","import { Subject } from \"rxjs\";\n\nimport { getCommand } from \"./internal\";\nimport { MessageSender } from \"./message.sender\";\nimport { Message, CommandDefinition } from \"./types\";\n\nexport class SubjectMessageSender implements MessageSender {\n  constructor(private readonly messagesSubject: Subject<Message<Record<string, unknown>>>) {}\n\n  send<T extends Record<string, unknown>>(\n    commandDefinition: string | CommandDefinition<T>,\n    payload: Record<string, unknown> | T = {},\n  ): void {\n    const command = getCommand(commandDefinition);\n    this.messagesSubject.next(Object.assign(payload ?? {}, { command: command }));\n  }\n}\n","export class Lazy<T> {\n  private _value: T | undefined = undefined;\n  private _isCreated = false;\n\n  constructor(private readonly factory: () => T) {}\n\n  /**\n   * Resolves the factory and returns the result. Guaranteed to resolve the value only once.\n   *\n   * @returns The value produced by your factory.\n   */\n  get(): T {\n    if (!this._isCreated) {\n      this._value = this.factory();\n      this._isCreated = true;\n    }\n\n    return this._value as T;\n  }\n}\n","const caches = new Map<any, Map<string, Promise<any>>>();\n\nconst getCache = (obj: any) => {\n  let cache = caches.get(obj);\n  if (cache != null) {\n    return cache;\n  }\n  cache = new Map<string, Promise<any>>();\n  caches.set(obj, cache);\n  return cache;\n};\n\nexport function clearCaches() {\n  caches.clear();\n}\n\n/**\n * Use as a Decorator on async functions, it will prevent multiple 'active' calls as the same time\n *\n * If a promise was returned from a previous call to this function, that hasn't yet resolved it will\n * be returned, instead of calling the original function again\n *\n * Results are not cached, once the promise has returned, the next call will result in a fresh call\n *\n * Read more at https://github.com/bitwarden/jslib/pull/7\n */\nexport function sequentialize(cacheKey: (args: any[]) => string) {\n  return (target: any, propertyKey: string | symbol, descriptor: PropertyDescriptor) => {\n    const originalMethod: () => Promise<any> = descriptor.value;\n\n    return {\n      value: function (...args: any[]) {\n        const cache = getCache(this);\n        const argsCacheKey = cacheKey(args);\n        let response = cache.get(argsCacheKey);\n        if (response != null) {\n          return response;\n        }\n\n        const onFinally = () => {\n          cache.delete(argsCacheKey);\n          if (cache.size === 0) {\n            caches.delete(this);\n          }\n        };\n        response = originalMethod\n          .apply(this, args)\n          .then((val: any) => {\n            onFinally();\n            return val;\n          })\n          .catch((err: any) => {\n            onFinally();\n            throw err;\n          });\n\n        cache.set(argsCacheKey, response);\n        return response;\n      },\n    };\n  };\n}\n","export class GlobalState {\n  enableDuckDuckGoBrowserIntegration?: boolean;\n}\n","import { AppIdService as AppIdServiceAbstraction } from \"../abstractions/app-id.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { Utils } from \"../misc/utils\";\n\nexport const APP_ID_KEY = \"global_applicationId_appId\";\nexport const ANONYMOUS_APP_ID_KEY = \"global_applicationId_appId\";\n\nexport class AppIdService implements AppIdServiceAbstraction {\n  constructor(\n    private readonly storageService: AbstractStorageService,\n    private readonly logService: LogService,\n  ) {}\n\n  async getAppId(): Promise<string> {\n    this.logService.info(\"Retrieving application id\");\n    return await this.getEnsuredValue(APP_ID_KEY);\n  }\n\n  async getAnonymousAppId(): Promise<string> {\n    return await this.getEnsuredValue(ANONYMOUS_APP_ID_KEY);\n  }\n\n  private async getEnsuredValue(key: string) {\n    let value = await this.storageService.get<string | null>(key);\n\n    if (value == null) {\n      value = Utils.newGuid();\n      await this.storageService.save(key, value);\n    }\n\n    return value;\n  }\n}\n","import { AllowedFeatureFlagTypes } from \"../../../enums/feature-flag.enum\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { Region } from \"../../abstractions/environment.service\";\n\nexport class ServerConfigResponse extends BaseResponse {\n  version: string;\n  gitHash: string;\n  server: ThirdPartyServerConfigResponse;\n  environment: EnvironmentServerConfigResponse;\n  featureStates: { [key: string]: AllowedFeatureFlagTypes } = {};\n\n  constructor(response: any) {\n    super(response);\n\n    if (response == null) {\n      return;\n    }\n\n    this.version = this.getResponseProperty(\"Version\");\n    this.gitHash = this.getResponseProperty(\"GitHash\");\n    this.server = new ThirdPartyServerConfigResponse(this.getResponseProperty(\"Server\"));\n    this.environment = new EnvironmentServerConfigResponse(this.getResponseProperty(\"Environment\"));\n    this.featureStates = this.getResponseProperty(\"FeatureStates\");\n  }\n}\n\nexport class EnvironmentServerConfigResponse extends BaseResponse {\n  cloudRegion: Region;\n  vault: string;\n  api: string;\n  identity: string;\n  notifications: string;\n  sso: string;\n\n  constructor(data: any = null) {\n    super(data);\n\n    if (data == null) {\n      return;\n    }\n\n    this.cloudRegion = this.getResponseProperty(\"CloudRegion\");\n    this.vault = this.getResponseProperty(\"Vault\");\n    this.api = this.getResponseProperty(\"Api\");\n    this.identity = this.getResponseProperty(\"Identity\");\n    this.notifications = this.getResponseProperty(\"Notifications\");\n    this.sso = this.getResponseProperty(\"Sso\");\n  }\n}\n\nexport class ThirdPartyServerConfigResponse extends BaseResponse {\n  name: string;\n  url: string;\n\n  constructor(data: any = null) {\n    super(data);\n\n    if (data == null) {\n      return;\n    }\n\n    this.name = this.getResponseProperty(\"Name\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { TokenService } from \"../../../auth/abstractions/token.service\";\nimport { UserId } from \"../../../types/guid\";\nimport { ConfigApiServiceAbstraction } from \"../../abstractions/config/config-api.service.abstraction\";\nimport { ServerConfigResponse } from \"../../models/response/server-config.response\";\n\nexport class ConfigApiService implements ConfigApiServiceAbstraction {\n  constructor(\n    private apiService: ApiService,\n    private tokenService: TokenService,\n  ) {}\n\n  async get(userId: UserId | undefined): Promise<ServerConfigResponse> {\n    // Authentication adds extra context to config responses, if the user has an access token, we want to use it\n    // We don't particularly care about ensuring the token is valid and not expired, just that it exists\n    const authed: boolean =\n      userId == null ? false : (await this.tokenService.getAccessToken(userId)) != null;\n\n    const r = await this.apiService.send(\"GET\", \"/config\", null, authed, true);\n    return new ServerConfigResponse(r);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { AllowedFeatureFlagTypes } from \"../../../enums/feature-flag.enum\";\nimport {\n  ServerConfigData,\n  ThirdPartyServerConfigData,\n  EnvironmentServerConfigData,\n} from \"../../models/data/server-config.data\";\n\nconst dayInMilliseconds = 24 * 3600 * 1000;\n\nexport class ServerConfig {\n  version: string;\n  gitHash: string;\n  server?: ThirdPartyServerConfigData;\n  environment?: EnvironmentServerConfigData;\n  utcDate: Date;\n  featureStates: { [key: string]: AllowedFeatureFlagTypes } = {};\n\n  constructor(serverConfigData: ServerConfigData) {\n    this.version = serverConfigData.version;\n    this.gitHash = serverConfigData.gitHash;\n    this.server = serverConfigData.server;\n    this.utcDate = new Date(serverConfigData.utcDate);\n    this.environment = serverConfigData.environment;\n    this.featureStates = serverConfigData.featureStates;\n\n    if (this.server?.name == null && this.server?.url == null) {\n      this.server = null;\n    }\n  }\n\n  private getAgeInMilliseconds(): number {\n    return new Date().getTime() - this.utcDate?.getTime();\n  }\n\n  isValid(): boolean {\n    return this.getAgeInMilliseconds() <= dayInMilliseconds;\n  }\n\n  static fromJSON(obj: Jsonify<ServerConfig>): ServerConfig {\n    if (obj == null) {\n      return null;\n    }\n\n    return new ServerConfig(obj);\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\n\nexport type Urls = {\n  base?: string;\n  webVault?: string;\n  api?: string;\n  identity?: string;\n  icons?: string;\n  notifications?: string;\n  events?: string;\n  keyConnector?: string;\n  scim?: string;\n};\n\n/**\n * A subset of available regions, additional regions can be loaded through configuration.\n */\nexport enum Region {\n  US = \"US\",\n  EU = \"EU\",\n  SelfHosted = \"Self-hosted\",\n}\n\n/**\n * The possible cloud regions.\n */\nexport type CloudRegion = Exclude<Region, Region.SelfHosted>;\n\nexport type RegionConfig = {\n  // Beware this isn't completely true, it's actually a string for custom environments,\n  // which are currently only supported in web where it doesn't matter.\n  key: Region;\n  domain: string;\n  urls: Urls;\n};\n\n/**\n * The Environment interface represents a server environment.\n *\n * It provides methods to retrieve the URLs of the different services.\n */\nexport interface Environment {\n  /**\n   * Retrieve the current region.\n   */\n  getRegion(): Region;\n  /**\n   * Retrieve the urls, should only be used when configuring the environment.\n   */\n  getUrls(): Urls;\n\n  /**\n   * Identify if the region is a cloud environment.\n   *\n   * @returns true if the environment is a cloud environment, false otherwise.\n   */\n  isCloud(): boolean;\n\n  getApiUrl(): string;\n  getEventsUrl(): string;\n  getIconsUrl(): string;\n  getIdentityUrl(): string;\n\n  /**\n   * @deprecated This is currently only used by the CLI. This functionality should be extracted since\n   * the CLI relies on changing environment mid-login.\n   *\n   * @remarks\n   * Expect this to be null unless the CLI has explicitly set it during the login flow.\n   */\n  getKeyConnectorUrl(): string | null;\n  getNotificationsUrl(): string;\n  getScimUrl(): string;\n  getSendUrl(): string;\n  getWebVaultUrl(): string;\n\n  /**\n   * Get a friendly hostname for the environment.\n   *\n   * - For self-hosted this is the web vault url without protocol prefix.\n   * - For cloud environments it's the domain key.\n   */\n  getHostname(): string;\n\n  // Not sure why we provide this, evaluate if we can remove it.\n  hasBaseUrl(): boolean;\n}\n\n/**\n * The environment service. Provides access to set the current environment urls and region.\n */\nexport abstract class EnvironmentService {\n  abstract environment$: Observable<Environment>;\n  abstract cloudWebVaultUrl$: Observable<string>;\n\n  /**\n   * Retrieve all the available regions for environment selectors.\n   *\n   * This currently relies on compile time provided constants, and will not change at runtime.\n   * Expect all builds to include production environments, QA builds to also include QA\n   * environments and dev builds to include localhost.\n   */\n  abstract availableRegions(): RegionConfig[];\n\n  /**\n   * Set the global environment.\n   */\n  abstract setEnvironment(region: Region, urls?: Urls): Promise<Urls>;\n\n  /**\n   * Seed the environment state for a given user based on the global environment.\n   *\n   * @remarks\n   * Expected to be called only by the StateService when adding a new account.\n   */\n  abstract seedUserEnvironment(userId: UserId): Promise<void>;\n\n  /**\n   * Sets the URL of the cloud web vault app based on the region parameter.\n   *\n   * @param userId - The user id to set the cloud web vault app URL for. If null or undefined the global environment is set.\n   * @param region - The region of the cloud web vault app.\n   */\n  abstract setCloudRegion(userId: UserId, region: Region): Promise<void>;\n\n  /**\n   * Get the environment from state. Useful if you need to get the environment for another user.\n   */\n  abstract getEnvironment(userId?: string): Promise<Environment | undefined>;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { AllowedFeatureFlagTypes } from \"../../../enums/feature-flag.enum\";\nimport { Region } from \"../../abstractions/environment.service\";\nimport {\n  ServerConfigResponse,\n  ThirdPartyServerConfigResponse,\n  EnvironmentServerConfigResponse,\n} from \"../response/server-config.response\";\n\nexport class ServerConfigData {\n  version: string;\n  gitHash: string;\n  server?: ThirdPartyServerConfigData;\n  environment?: EnvironmentServerConfigData;\n  utcDate: string;\n  featureStates: { [key: string]: AllowedFeatureFlagTypes } = {};\n\n  constructor(serverConfigResponse: Partial<ServerConfigResponse>) {\n    this.version = serverConfigResponse?.version;\n    this.gitHash = serverConfigResponse?.gitHash;\n    this.server = serverConfigResponse?.server\n      ? new ThirdPartyServerConfigData(serverConfigResponse.server)\n      : null;\n    this.utcDate = new Date().toISOString();\n    this.environment = serverConfigResponse?.environment\n      ? new EnvironmentServerConfigData(serverConfigResponse.environment)\n      : null;\n    this.featureStates = serverConfigResponse?.featureStates;\n  }\n\n  static fromJSON(obj: Jsonify<ServerConfigData>): ServerConfigData {\n    return Object.assign(new ServerConfigData({}), obj, {\n      server: obj?.server ? ThirdPartyServerConfigData.fromJSON(obj.server) : null,\n      environment: obj?.environment ? EnvironmentServerConfigData.fromJSON(obj.environment) : null,\n    });\n  }\n}\n\nexport class ThirdPartyServerConfigData {\n  name: string;\n  url: string;\n\n  constructor(response: Partial<ThirdPartyServerConfigResponse>) {\n    this.name = response.name;\n    this.url = response.url;\n  }\n\n  static fromJSON(obj: Jsonify<ThirdPartyServerConfigData>): ThirdPartyServerConfigData {\n    return Object.assign(new ThirdPartyServerConfigData({}), obj);\n  }\n}\n\nexport class EnvironmentServerConfigData {\n  cloudRegion: Region;\n  vault: string;\n  api: string;\n  identity: string;\n  notifications: string;\n  sso: string;\n\n  constructor(response: Partial<EnvironmentServerConfigResponse>) {\n    this.cloudRegion = response.cloudRegion;\n    this.vault = response.vault;\n    this.api = response.api;\n    this.identity = response.identity;\n    this.notifications = response.notifications;\n    this.sso = response.sso;\n  }\n\n  static fromJSON(obj: Jsonify<EnvironmentServerConfigData>): EnvironmentServerConfigData {\n    return Object.assign(new EnvironmentServerConfigData({}), obj);\n  }\n}\n","import {\n  combineLatest,\n  firstValueFrom,\n  map,\n  mergeWith,\n  NEVER,\n  Observable,\n  of,\n  shareReplay,\n  Subject,\n  switchMap,\n  tap,\n} from \"rxjs\";\nimport { SemVer } from \"semver\";\n\nimport { AuthService } from \"../../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../../auth/enums/authentication-status\";\nimport {\n  DefaultFeatureFlagValue,\n  FeatureFlag,\n  FeatureFlagValueType,\n} from \"../../../enums/feature-flag.enum\";\nimport { UserId } from \"../../../types/guid\";\nimport { ConfigApiServiceAbstraction } from \"../../abstractions/config/config-api.service.abstraction\";\nimport { ConfigService } from \"../../abstractions/config/config.service\";\nimport { ServerConfig } from \"../../abstractions/config/server-config\";\nimport { Environment, EnvironmentService, Region } from \"../../abstractions/environment.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { devFlagEnabled, devFlagValue } from \"../../misc/flags\";\nimport { ServerConfigData } from \"../../models/data/server-config.data\";\nimport { CONFIG_DISK, KeyDefinition, StateProvider, UserKeyDefinition } from \"../../state\";\n\nexport const RETRIEVAL_INTERVAL = devFlagEnabled(\"configRetrievalIntervalMs\")\n  ? (devFlagValue(\"configRetrievalIntervalMs\") as number)\n  : 3_600_000; // 1 hour\n\nexport const SLOW_EMISSION_GUARD = 800;\n\nexport type ApiUrl = string;\n\nexport const USER_SERVER_CONFIG = new UserKeyDefinition<ServerConfig>(CONFIG_DISK, \"serverConfig\", {\n  deserializer: (data) => (data == null ? null : ServerConfig.fromJSON(data)),\n  clearOn: [\"logout\"],\n});\n\nexport const GLOBAL_SERVER_CONFIGURATIONS = KeyDefinition.record<ServerConfig, ApiUrl>(\n  CONFIG_DISK,\n  \"byServer\",\n  {\n    deserializer: (data) => (data == null ? null : ServerConfig.fromJSON(data)),\n  },\n);\n\n// FIXME: currently we are limited to api requests for active users. Update to accept a UserId and APIUrl once ApiService supports it.\nexport class DefaultConfigService implements ConfigService {\n  private failedFetchFallbackSubject = new Subject<ServerConfig>();\n\n  serverConfig$: Observable<ServerConfig>;\n\n  cloudRegion$: Observable<Region>;\n\n  constructor(\n    private configApiService: ConfigApiServiceAbstraction,\n    private environmentService: EnvironmentService,\n    private logService: LogService,\n    private stateProvider: StateProvider,\n    private authService: AuthService,\n  ) {\n    const userId$ = this.stateProvider.activeUserId$;\n    const authStatus$ = userId$.pipe(\n      switchMap((userId) => (userId == null ? of(null) : this.authService.authStatusFor$(userId))),\n    );\n\n    this.serverConfig$ = combineLatest([\n      userId$,\n      this.environmentService.environment$,\n      authStatus$,\n    ]).pipe(\n      switchMap(([userId, environment, authStatus]) => {\n        if (userId == null || authStatus !== AuthenticationStatus.Unlocked) {\n          return this.globalConfigFor$(environment.getApiUrl()).pipe(\n            map((config) => [config, null, environment] as const),\n          );\n        }\n\n        return this.userConfigFor$(userId).pipe(\n          map((config) => [config, userId, environment] as const),\n        );\n      }),\n      tap(async (rec) => {\n        const [existingConfig, userId, environment] = rec;\n        // Grab new config if older retrieval interval\n        if (!existingConfig || this.olderThanRetrievalInterval(existingConfig.utcDate)) {\n          await this.renewConfig(existingConfig, userId, environment);\n        }\n      }),\n      switchMap(([existingConfig]) => {\n        // If we needed to fetch, stop this emit, we'll get a new one after update\n        // This is split up with the above tap because we need to return an observable from a failed promise,\n        // which isn't very doable since promises are converted to observables in switchMap\n        if (!existingConfig || this.olderThanRetrievalInterval(existingConfig.utcDate)) {\n          return NEVER;\n        }\n        return of(existingConfig);\n      }),\n      // If fetch fails, we'll emit on this subject to fallback to the existing config\n      mergeWith(this.failedFetchFallbackSubject),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n\n    this.cloudRegion$ = this.serverConfig$.pipe(\n      map((config) => config?.environment?.cloudRegion ?? Region.US),\n    );\n  }\n\n  getFeatureFlag$<Flag extends FeatureFlag>(key: Flag) {\n    return this.serverConfig$.pipe(\n      map((serverConfig) => this.getFeatureFlagValue(serverConfig, key)),\n    );\n  }\n\n  private getFeatureFlagValue<Flag extends FeatureFlag>(\n    serverConfig: ServerConfig | null,\n    flag: Flag,\n  ) {\n    if (serverConfig?.featureStates == null || serverConfig.featureStates[flag] == null) {\n      return DefaultFeatureFlagValue[flag];\n    }\n\n    return serverConfig.featureStates[flag] as FeatureFlagValueType<Flag>;\n  }\n\n  userCachedFeatureFlag$<Flag extends FeatureFlag>(key: Flag, userId: UserId) {\n    return this.stateProvider\n      .getUser(userId, USER_SERVER_CONFIG)\n      .state$.pipe(map((config) => this.getFeatureFlagValue(config, key)));\n  }\n\n  async getFeatureFlag<Flag extends FeatureFlag>(key: Flag) {\n    return await firstValueFrom(this.getFeatureFlag$(key));\n  }\n\n  checkServerMeetsVersionRequirement$(minimumRequiredServerVersion: SemVer) {\n    return this.serverConfig$.pipe(\n      map((serverConfig) => {\n        if (serverConfig == null) {\n          return false;\n        }\n        const serverVersion = new SemVer(serverConfig.version);\n        return serverVersion.compare(minimumRequiredServerVersion) >= 0;\n      }),\n    );\n  }\n\n  async ensureConfigFetched() {\n    // Triggering a retrieval for the given user ensures that the config is less than RETRIEVAL_INTERVAL old\n    await firstValueFrom(this.serverConfig$);\n  }\n\n  private olderThanRetrievalInterval(date: Date) {\n    return new Date().getTime() - date.getTime() > RETRIEVAL_INTERVAL;\n  }\n\n  // Updates the on-disk configuration with a newly retrieved configuration\n  private async renewConfig(\n    existingConfig: ServerConfig,\n    userId: UserId,\n    environment: Environment,\n  ): Promise<void> {\n    try {\n      // Feature flags often have a big impact on user experience, lets ensure we return some value\n      // somewhat quickly even though it may not be accurate, we won't cancel the HTTP request\n      // though so that hopefully it can have finished and hydrated a more accurate value.\n      const handle = setTimeout(() => {\n        this.logService.info(\n          \"Self-host environment did not respond in time, emitting previous config.\",\n        );\n        this.failedFetchFallbackSubject.next(existingConfig);\n      }, SLOW_EMISSION_GUARD);\n      const response = await this.configApiService.get(userId);\n      clearTimeout(handle);\n      const newConfig = new ServerConfig(new ServerConfigData(response));\n\n      // Update the environment region\n      if (\n        newConfig?.environment?.cloudRegion != null &&\n        existingConfig?.environment?.cloudRegion != newConfig.environment.cloudRegion\n      ) {\n        // Null userId sets global, otherwise sets to the given user\n        await this.environmentService.setCloudRegion(userId, newConfig?.environment?.cloudRegion);\n      }\n\n      if (userId == null) {\n        // update global state with new pulled config\n        await this.stateProvider.getGlobal(GLOBAL_SERVER_CONFIGURATIONS).update((configs) => {\n          return { ...configs, [environment.getApiUrl()]: newConfig };\n        });\n      } else {\n        // update state with new pulled config\n        await this.stateProvider.setUserState(USER_SERVER_CONFIG, newConfig, userId);\n      }\n    } catch (e) {\n      // mutate error to be handled by catchError\n      this.logService.error(`Unable to fetch ServerConfig from ${environment.getApiUrl()}`, e);\n      // Emit the existing config\n      this.failedFetchFallbackSubject.next(existingConfig);\n    }\n  }\n\n  private globalConfigFor$(apiUrl: string): Observable<ServerConfig> {\n    return this.stateProvider\n      .getGlobal(GLOBAL_SERVER_CONFIGURATIONS)\n      .state$.pipe(map((configs) => configs?.[apiUrl]));\n  }\n\n  private userConfigFor$(userId: UserId): Observable<ServerConfig> {\n    return this.stateProvider.getUser(userId, USER_SERVER_CONFIG).state$;\n  }\n}\n","import { CryptoService } from \"../abstractions/crypto.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\n\nexport class ContainerService {\n  constructor(\n    private cryptoService: CryptoService,\n    private encryptService: EncryptService,\n  ) {}\n\n  attachToGlobal(global: any) {\n    if (!global.bitwardenContainerService) {\n      global.bitwardenContainerService = this;\n    }\n  }\n\n  /**\n   * @throws Will throw if CryptoService was not instantiated and provided to the ContainerService constructor\n   */\n  getCryptoService(): CryptoService {\n    if (this.cryptoService == null) {\n      throw new Error(\"ContainerService.cryptoService not initialized.\");\n    }\n    return this.cryptoService;\n  }\n\n  /**\n   * @throws Will throw if EncryptService was not instantiated and provided to the ContainerService constructor\n   */\n  getEncryptService(): EncryptService {\n    if (this.encryptService == null) {\n      throw new Error(\"ContainerService.encryptService not initialized.\");\n    }\n    return this.encryptService;\n  }\n}\n","export enum InitializerKey {\n  Cipher = 0,\n  CipherView = 1,\n}\n","export enum CipherType {\n  Login = 1,\n  SecureNote = 2,\n  Card = 3,\n  Identity = 4,\n}\n","export enum CipherRepromptType {\n  None = 0,\n  Password = 1,\n}\n","export enum FieldType {\n  Text = 0,\n  Hidden = 1,\n  Boolean = 2,\n  Linked = 3,\n}\n","export type LinkedIdType = LoginLinkedId | CardLinkedId | IdentityLinkedId;\n\n// LoginView\nexport enum LoginLinkedId {\n  Username = 100,\n  Password = 101,\n}\n\n// CardView\nexport enum CardLinkedId {\n  CardholderName = 300,\n  ExpMonth = 301,\n  ExpYear = 302,\n  Code = 303,\n  Brand = 304,\n  Number = 305,\n}\n\n// IdentityView\nexport enum IdentityLinkedId {\n  Title = 400,\n  MiddleName = 401,\n  Address1 = 402,\n  Address2 = 403,\n  Address3 = 404,\n  City = 405,\n  State = 406,\n  PostalCode = 407,\n  Country = 408,\n  Company = 409,\n  Email = 410,\n  Phone = 411,\n  Ssn = 412,\n  Username = 413,\n  PassportNumber = 414,\n  LicenseNumber = 415,\n  FirstName = 416,\n  LastName = 417,\n  FullName = 418,\n}\n","export enum SecureNoteType {\n  Generic = 0,\n}\n","import { AttachmentResponse } from \"../response/attachment.response\";\n\nexport class AttachmentData {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response?: AttachmentResponse) {\n    if (response == null) {\n      return;\n    }\n    this.id = response.id;\n    this.url = response.url;\n    this.fileName = response.fileName;\n    this.key = response.key;\n    this.size = response.size;\n    this.sizeName = response.sizeName;\n  }\n}\n","import { CardApi } from \"../api/card.api\";\n\nexport class CardData {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data?: CardApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.cardholderName = data.cardholderName;\n    this.brand = data.brand;\n    this.number = data.number;\n    this.expMonth = data.expMonth;\n    this.expYear = data.expYear;\n    this.code = data.code;\n  }\n}\n","import { FieldType, LinkedIdType } from \"../../enums\";\nimport { FieldApi } from \"../api/field.api\";\n\nexport class FieldData {\n  type: FieldType;\n  name: string;\n  value: string;\n  linkedId: LinkedIdType;\n\n  constructor(response?: FieldApi) {\n    if (response == null) {\n      return;\n    }\n    this.type = response.type;\n    this.name = response.name;\n    this.value = response.value;\n    this.linkedId = response.linkedId;\n  }\n}\n","import { IdentityApi } from \"../api/identity.api\";\n\nexport class IdentityData {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data?: IdentityApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.title = data.title;\n    this.firstName = data.firstName;\n    this.middleName = data.middleName;\n    this.lastName = data.lastName;\n    this.address1 = data.address1;\n    this.address2 = data.address2;\n    this.address3 = data.address3;\n    this.city = data.city;\n    this.state = data.state;\n    this.postalCode = data.postalCode;\n    this.country = data.country;\n    this.company = data.company;\n    this.email = data.email;\n    this.phone = data.phone;\n    this.ssn = data.ssn;\n    this.username = data.username;\n    this.passportNumber = data.passportNumber;\n    this.licenseNumber = data.licenseNumber;\n  }\n}\n","import { Fido2CredentialApi } from \"../api/fido2-credential.api\";\n\nexport class Fido2CredentialData {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  userName: string;\n  counter: string;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: string;\n  creationDate: string;\n\n  constructor(data?: Fido2CredentialApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.credentialId = data.credentialId;\n    this.keyType = data.keyType;\n    this.keyAlgorithm = data.keyAlgorithm;\n    this.keyCurve = data.keyCurve;\n    this.keyValue = data.keyValue;\n    this.rpId = data.rpId;\n    this.userHandle = data.userHandle;\n    this.userName = data.userName;\n    this.counter = data.counter;\n    this.rpName = data.rpName;\n    this.userDisplayName = data.userDisplayName;\n    this.discoverable = data.discoverable;\n    this.creationDate = data.creationDate;\n  }\n}\n","import { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { LoginUriApi } from \"../api/login-uri.api\";\n\nexport class LoginUriData {\n  uri: string;\n  uriChecksum: string;\n  match: UriMatchStrategySetting = null;\n\n  constructor(data?: LoginUriApi) {\n    if (data == null) {\n      return;\n    }\n    this.uri = data.uri;\n    this.uriChecksum = data.uriChecksum;\n    this.match = data.match;\n  }\n}\n","import { LoginApi } from \"../api/login.api\";\n\nimport { Fido2CredentialData } from \"./fido2-credential.data\";\nimport { LoginUriData } from \"./login-uri.data\";\n\nexport class LoginData {\n  uris: LoginUriData[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n  fido2Credentials?: Fido2CredentialData[];\n\n  constructor(data?: LoginApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.username = data.username;\n    this.password = data.password;\n    this.passwordRevisionDate = data.passwordRevisionDate;\n    this.totp = data.totp;\n    this.autofillOnPageLoad = data.autofillOnPageLoad;\n\n    if (data.uris) {\n      this.uris = data.uris.map((u) => new LoginUriData(u));\n    }\n\n    if (data.fido2Credentials) {\n      this.fido2Credentials = data.fido2Credentials?.map((key) => new Fido2CredentialData(key));\n    }\n  }\n}\n","import { PasswordHistoryResponse } from \"../response/password-history.response\";\n\nexport class PasswordHistoryData {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response?: PasswordHistoryResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.password = response.password;\n    this.lastUsedDate = response.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../enums\";\nimport { SecureNoteApi } from \"../api/secure-note.api\";\n\nexport class SecureNoteData {\n  type: SecureNoteType;\n\n  constructor(data?: SecureNoteApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.type = data.type;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CipherResponse } from \"../response/cipher.response\";\n\nimport { AttachmentData } from \"./attachment.data\";\nimport { CardData } from \"./card.data\";\nimport { FieldData } from \"./field.data\";\nimport { IdentityData } from \"./identity.data\";\nimport { LoginData } from \"./login.data\";\nimport { PasswordHistoryData } from \"./password-history.data\";\nimport { SecureNoteData } from \"./secure-note.data\";\n\nexport class CipherData {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  favorite: boolean;\n  revisionDate: string;\n  type: CipherType;\n  name: string;\n  notes: string;\n  login?: LoginData;\n  secureNote?: SecureNoteData;\n  card?: CardData;\n  identity?: IdentityData;\n  fields?: FieldData[];\n  attachments?: AttachmentData[];\n  passwordHistory?: PasswordHistoryData[];\n  collectionIds?: string[];\n  creationDate: string;\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n  key: string;\n\n  constructor(response?: CipherResponse, collectionIds?: string[]) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.folderId = response.folderId;\n    this.edit = response.edit;\n    this.viewPassword = response.viewPassword;\n    this.organizationUseTotp = response.organizationUseTotp;\n    this.favorite = response.favorite;\n    this.revisionDate = response.revisionDate;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.collectionIds = collectionIds != null ? collectionIds : response.collectionIds;\n    this.creationDate = response.creationDate;\n    this.deletedDate = response.deletedDate;\n    this.reprompt = response.reprompt;\n    this.key = response.key;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginData(response.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteData(response.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardData(response.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityData(response.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (response.fields != null) {\n      this.fields = response.fields.map((f) => new FieldData(f));\n    }\n    if (response.attachments != null) {\n      this.attachments = response.attachments.map((a) => new AttachmentData(a));\n    }\n    if (response.passwordHistory != null) {\n      this.passwordHistory = response.passwordHistory.map((ph) => new PasswordHistoryData(ph));\n    }\n  }\n\n  static fromJSON(obj: Jsonify<CipherData>) {\n    return Object.assign(new CipherData(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { Attachment } from \"../domain/attachment\";\n\nexport class AttachmentView implements View {\n  id: string = null;\n  url: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n  key: SymmetricCryptoKey = null;\n\n  constructor(a?: Attachment) {\n    if (!a) {\n      return;\n    }\n\n    this.id = a.id;\n    this.url = a.url;\n    this.size = a.size;\n    this.sizeName = a.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<AttachmentView>>): AttachmentView {\n    const key = obj.key == null ? null : SymmetricCryptoKey.fromJSON(obj.key);\n    return Object.assign(new AttachmentView(), obj, { key: key });\n  }\n}\n","import { LinkedIdType } from \"./enums\";\nimport { ItemView } from \"./models/view/item.view\";\n\ntype LinkedMetadataAttributes = {\n  /**\n   * The i18n key used to describe the decorated class property in the UI.\n   * If it is null, then the name of the class property will be used as the i18n key.\n   */\n  i18nKey?: string;\n\n  /**\n   * The position of the individual field to be applied when sorted.\n   */\n  sortPosition: number;\n};\n\nexport class LinkedMetadata {\n  private readonly _i18nKey: string;\n  readonly sortPosition: number;\n\n  constructor(\n    readonly propertyKey: string,\n    attributes: LinkedMetadataAttributes,\n  ) {\n    this._i18nKey = attributes?.i18nKey;\n    this.sortPosition = attributes.sortPosition;\n  }\n\n  get i18nKey() {\n    return this._i18nKey ?? this.propertyKey;\n  }\n}\n\n/**\n * A decorator used to set metadata used by Linked custom fields. Apply it to a class property or getter to make it\n *    available as a Linked custom field option.\n * @param id - A unique value that is saved in the Field model. It is used to look up the decorated class property.\n * @param options - {@link LinkedMetadataAttributes}\n */\nexport function linkedFieldOption(id: LinkedIdType, attributes: LinkedMetadataAttributes) {\n  return (prototype: ItemView, propertyKey: string) => {\n    if (prototype.linkedFieldOptions == null) {\n      prototype.linkedFieldOptions = new Map<LinkedIdType, LinkedMetadata>();\n    }\n\n    prototype.linkedFieldOptions.set(id, new LinkedMetadata(propertyKey, attributes));\n  };\n}\n","import { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\ntype NonZeroIntegers = 1 | 2 | 3 | 4 | 5 | 6 | 7 | 8 | 9;\ntype Year = `${NonZeroIntegers}${NonZeroIntegers}${0 | NonZeroIntegers}${0 | NonZeroIntegers}`;\n\n/**\n * Takes a string or number value and returns a string value formatted as a valid 4-digit year\n *\n * @export\n * @param {(string | number)} yearInput\n * @return {*}  {(Year | null)}\n */\nexport function normalizeExpiryYearFormat(yearInput: string | number): Year | null {\n  // The input[type=\"number\"] is returning a number, convert it to a string\n  // An empty field returns null, avoid casting `\"null\"` to a string\n  const yearInputIsEmpty = yearInput == null || yearInput === \"\";\n  let expirationYear = yearInputIsEmpty ? null : `${yearInput}`;\n\n  // Exit early if year is already formatted correctly or empty\n  if (yearInputIsEmpty || /^[1-9]{1}\\d{3}$/.test(expirationYear)) {\n    return expirationYear as Year;\n  }\n\n  expirationYear = expirationYear\n    // For safety, because even input[type=\"number\"] will allow decimals\n    .replace(/[^\\d]/g, \"\")\n    // remove any leading zero padding (leave the last leading zero if it ends the string)\n    .replace(/^[0]+(?=.)/, \"\");\n\n  if (expirationYear === \"\") {\n    expirationYear = null;\n  }\n\n  // given the context of payment card expiry, a year character length of 3, or over 4\n  // is more likely to be a mistake than an intentional value for the far past or far future.\n  if (expirationYear && expirationYear.length !== 4) {\n    const paddedYear = (\"00\" + expirationYear).slice(-2);\n    const currentCentury = `${new Date().getFullYear()}`.slice(0, 2);\n\n    expirationYear = currentCentury + paddedYear;\n  }\n\n  return expirationYear as Year | null;\n}\n\n/**\n * Takes a cipher card view and returns \"true\" if the month and year affirmativey indicate\n * the card is expired.\n *\n * @export\n * @param {CardView} cipherCard\n * @return {*}  {boolean}\n */\nexport function isCardExpired(cipherCard: CardView): boolean {\n  if (cipherCard) {\n    const { expMonth = null, expYear = null } = cipherCard;\n\n    const now = new Date();\n    const normalizedYear = normalizeExpiryYearFormat(expYear);\n\n    // If the card year is before the current year, don't bother checking the month\n    if (normalizedYear && parseInt(normalizedYear) < now.getFullYear()) {\n      return true;\n    }\n\n    if (normalizedYear && expMonth) {\n      // `Date` months are zero-indexed\n      const parsedMonth =\n        parseInt(expMonth) - 1 ||\n        // Add a month floor of 0 to protect against an invalid low month value of \"0\"\n        0;\n\n      const parsedYear = parseInt(normalizedYear);\n\n      // First day of the next month minus one, to get last day of the card month\n      const cardExpiry = new Date(parsedYear, parsedMonth + 1, 0);\n\n      return cardExpiry < now;\n    }\n  }\n\n  return false;\n}\n","import { View } from \"../../../models/view/view\";\nimport { LinkedMetadata } from \"../../linked-field-option.decorator\";\n\nexport abstract class ItemView implements View {\n  linkedFieldOptions: Map<number, LinkedMetadata>;\n  abstract get subTitle(): string;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CardLinkedId as LinkedId } from \"../../enums\";\nimport { linkedFieldOption } from \"../../linked-field-option.decorator\";\nimport { normalizeExpiryYearFormat } from \"../../utils\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class CardView extends ItemView {\n  @linkedFieldOption(LinkedId.CardholderName, { sortPosition: 0 })\n  cardholderName: string = null;\n  @linkedFieldOption(LinkedId.ExpMonth, { sortPosition: 3, i18nKey: \"expirationMonth\" })\n  expMonth: string = null;\n  @linkedFieldOption(LinkedId.ExpYear, { sortPosition: 4, i18nKey: \"expirationYear\" })\n  expYear: string = null;\n  @linkedFieldOption(LinkedId.Code, { sortPosition: 5, i18nKey: \"securityCode\" })\n  code: string = null;\n\n  private _brand: string = null;\n  private _number: string = null;\n  private _subTitle: string = null;\n\n  get maskedCode(): string {\n    return this.code != null ? \"•\".repeat(this.code.length) : null;\n  }\n\n  get maskedNumber(): string {\n    return this.number != null ? \"•\".repeat(this.number.length) : null;\n  }\n\n  @linkedFieldOption(LinkedId.Brand, { sortPosition: 2 })\n  get brand(): string {\n    return this._brand;\n  }\n  set brand(value: string) {\n    this._brand = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.Number, { sortPosition: 1 })\n  get number(): string {\n    return this._number;\n  }\n  set number(value: string) {\n    this._number = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null) {\n      this._subTitle = this.brand;\n      if (this.number != null && this.number.length >= 4) {\n        if (this._subTitle != null && this._subTitle !== \"\") {\n          this._subTitle += \", \";\n        } else {\n          this._subTitle = \"\";\n        }\n\n        // Show last 5 on amex, last 4 for all others\n        const count =\n          this.number.length >= 5 && this.number.match(new RegExp(\"^3[47]\")) != null ? 5 : 4;\n        this._subTitle += \"*\" + this.number.substr(this.number.length - count);\n      }\n    }\n    return this._subTitle;\n  }\n\n  get expiration(): string {\n    const normalizedYear = normalizeExpiryYearFormat(this.expYear);\n\n    if (!this.expMonth && !normalizedYear) {\n      return null;\n    }\n\n    let exp = this.expMonth != null ? (\"0\" + this.expMonth).slice(-2) : \"__\";\n    exp += \" / \" + (normalizedYear || \"____\");\n\n    return exp;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<CardView>>): CardView {\n    return Object.assign(new CardView(), obj);\n  }\n\n  // ref https://stackoverflow.com/a/5911300\n  static getCardBrandByPatterns(cardNum: string): string {\n    if (cardNum == null || typeof cardNum !== \"string\" || cardNum.trim() === \"\") {\n      return null;\n    }\n\n    // Visa\n    let re = new RegExp(\"^4\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    // Mastercard\n    // Updated for Mastercard 2017 BINs expansion\n    if (\n      /^(5[1-5][0-9]{14}|2(22[1-9][0-9]{12}|2[3-9][0-9]{13}|[3-6][0-9]{14}|7[0-1][0-9]{13}|720[0-9]{12}))$/.test(\n        cardNum,\n      )\n    ) {\n      return \"Mastercard\";\n    }\n\n    // AMEX\n    re = new RegExp(\"^3[47]\");\n    if (cardNum.match(re) != null) {\n      return \"Amex\";\n    }\n\n    // Discover\n    re = new RegExp(\n      \"^(6011|622(12[6-9]|1[3-9][0-9]|[2-8][0-9]{2}|9[0-1][0-9]|92[0-5]|64[4-9])|65)\",\n    );\n    if (cardNum.match(re) != null) {\n      return \"Discover\";\n    }\n\n    // Diners\n    re = new RegExp(\"^36\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // Diners - Carte Blanche\n    re = new RegExp(\"^30[0-5]\");\n    if (cardNum.match(re) != null) {\n      return \"Diners Club\";\n    }\n\n    // JCB\n    re = new RegExp(\"^35(2[89]|[3-8][0-9])\");\n    if (cardNum.match(re) != null) {\n      return \"JCB\";\n    }\n\n    // Visa Electron\n    re = new RegExp(\"^(4026|417500|4508|4844|491(3|7))\");\n    if (cardNum.match(re) != null) {\n      return \"Visa\";\n    }\n\n    return null;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { FieldType, LinkedIdType } from \"../../enums\";\nimport { Field } from \"../domain/field\";\n\nexport class FieldView implements View {\n  name: string = null;\n  value: string = null;\n  type: FieldType = null;\n  newField = false; // Marks if the field is new and hasn't been saved\n  showValue = false;\n  showCount = false;\n  linkedId: LinkedIdType = null;\n\n  constructor(f?: Field) {\n    if (!f) {\n      return;\n    }\n\n    this.type = f.type;\n    this.linkedId = f.linkedId;\n  }\n\n  get maskedValue(): string {\n    return this.value != null ? \"••••••••\" : null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<FieldView>>): FieldView {\n    return Object.assign(new FieldView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { IdentityLinkedId as LinkedId } from \"../../enums\";\nimport { linkedFieldOption } from \"../../linked-field-option.decorator\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class IdentityView extends ItemView {\n  @linkedFieldOption(LinkedId.Title, { sortPosition: 0 })\n  title: string = null;\n  @linkedFieldOption(LinkedId.MiddleName, { sortPosition: 2 })\n  middleName: string = null;\n  @linkedFieldOption(LinkedId.Address1, { sortPosition: 12 })\n  address1: string = null;\n  @linkedFieldOption(LinkedId.Address2, { sortPosition: 13 })\n  address2: string = null;\n  @linkedFieldOption(LinkedId.Address3, { sortPosition: 14 })\n  address3: string = null;\n  @linkedFieldOption(LinkedId.City, { sortPosition: 15, i18nKey: \"cityTown\" })\n  city: string = null;\n  @linkedFieldOption(LinkedId.State, { sortPosition: 16, i18nKey: \"stateProvince\" })\n  state: string = null;\n  @linkedFieldOption(LinkedId.PostalCode, { sortPosition: 17, i18nKey: \"zipPostalCode\" })\n  postalCode: string = null;\n  @linkedFieldOption(LinkedId.Country, { sortPosition: 18 })\n  country: string = null;\n  @linkedFieldOption(LinkedId.Company, { sortPosition: 6 })\n  company: string = null;\n  @linkedFieldOption(LinkedId.Email, { sortPosition: 10 })\n  email: string = null;\n  @linkedFieldOption(LinkedId.Phone, { sortPosition: 11 })\n  phone: string = null;\n  @linkedFieldOption(LinkedId.Ssn, { sortPosition: 7 })\n  ssn: string = null;\n  @linkedFieldOption(LinkedId.Username, { sortPosition: 5 })\n  username: string = null;\n  @linkedFieldOption(LinkedId.PassportNumber, { sortPosition: 8 })\n  passportNumber: string = null;\n  @linkedFieldOption(LinkedId.LicenseNumber, { sortPosition: 9 })\n  licenseNumber: string = null;\n\n  private _firstName: string = null;\n  private _lastName: string = null;\n  private _subTitle: string = null;\n\n  constructor() {\n    super();\n  }\n\n  @linkedFieldOption(LinkedId.FirstName, { sortPosition: 1 })\n  get firstName(): string {\n    return this._firstName;\n  }\n  set firstName(value: string) {\n    this._firstName = value;\n    this._subTitle = null;\n  }\n\n  @linkedFieldOption(LinkedId.LastName, { sortPosition: 4 })\n  get lastName(): string {\n    return this._lastName;\n  }\n  set lastName(value: string) {\n    this._lastName = value;\n    this._subTitle = null;\n  }\n\n  get subTitle(): string {\n    if (this._subTitle == null && (this.firstName != null || this.lastName != null)) {\n      this._subTitle = \"\";\n      if (this.firstName != null) {\n        this._subTitle = this.firstName;\n      }\n      if (this.lastName != null) {\n        if (this._subTitle !== \"\") {\n          this._subTitle += \" \";\n        }\n        this._subTitle += this.lastName;\n      }\n    }\n\n    return this._subTitle;\n  }\n\n  @linkedFieldOption(LinkedId.FullName, { sortPosition: 3 })\n  get fullName(): string {\n    if (\n      this.title != null ||\n      this.firstName != null ||\n      this.middleName != null ||\n      this.lastName != null\n    ) {\n      let name = \"\";\n      if (this.title != null) {\n        name += this.title + \" \";\n      }\n      if (this.firstName != null) {\n        name += this.firstName + \" \";\n      }\n      if (this.middleName != null) {\n        name += this.middleName + \" \";\n      }\n      if (this.lastName != null) {\n        name += this.lastName;\n      }\n      return name.trim();\n    }\n\n    return null;\n  }\n\n  get fullAddress(): string {\n    let address = this.address1;\n    if (!Utils.isNullOrWhitespace(this.address2)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address2;\n    }\n    if (!Utils.isNullOrWhitespace(this.address3)) {\n      if (!Utils.isNullOrWhitespace(address)) {\n        address += \", \";\n      }\n      address += this.address3;\n    }\n    return address;\n  }\n\n  get fullAddressPart2(): string {\n    if (this.city == null && this.state == null && this.postalCode == null) {\n      return null;\n    }\n    const city = this.city || \"-\";\n    const state = this.state;\n    const postalCode = this.postalCode || \"-\";\n    let addressPart2 = city;\n    if (!Utils.isNullOrWhitespace(state)) {\n      addressPart2 += \", \" + state;\n    }\n    addressPart2 += \", \" + postalCode;\n    return addressPart2;\n  }\n\n  get fullAddressForCopy(): string {\n    let address = this.fullAddress;\n    if (this.city != null || this.state != null || this.postalCode != null) {\n      address += \"\\n\" + this.fullAddressPart2;\n    }\n    if (this.country != null) {\n      address += \"\\n\" + this.country;\n    }\n    return address;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<IdentityView>>): IdentityView {\n    return Object.assign(new IdentityView(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class Fido2CredentialView extends ItemView {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  userName: string;\n  counter: number;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: boolean;\n  creationDate: Date = null;\n\n  get subTitle(): string {\n    return this.userDisplayName;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Fido2CredentialView>>): Fido2CredentialView {\n    const creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n    return Object.assign(new Fido2CredentialView(), obj, {\n      creationDate,\n    });\n  }\n}\n","import { Utils } from \"./utils\";\n\nconst CanLaunchWhitelist = [\n  \"https://\",\n  \"http://\",\n  \"ssh://\",\n  \"ftp://\",\n  \"sftp://\",\n  \"irc://\",\n  \"vnc://\",\n  // https://docs.microsoft.com/en-us/windows-server/remote/remote-desktop-services/clients/remote-desktop-uri\n  \"rdp://\", // Legacy RDP URI scheme\n  \"ms-rd:\", // Preferred RDP URI scheme\n  \"chrome://\",\n  \"iosapp://\",\n  \"androidapp://\",\n];\n\nexport class SafeUrls {\n  static canLaunch(uri: string): boolean {\n    if (Utils.isNullOrWhitespace(uri)) {\n      return false;\n    }\n\n    for (let i = 0; i < CanLaunchWhitelist.length; i++) {\n      if (uri.indexOf(CanLaunchWhitelist[i]) === 0) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UriMatchStrategy, UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { View } from \"../../../models/view/view\";\nimport { SafeUrls } from \"../../../platform/misc/safe-urls\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { LoginUri } from \"../domain/login-uri\";\n\nexport class LoginUriView implements View {\n  match: UriMatchStrategySetting = null;\n\n  private _uri: string = null;\n  private _domain: string = null;\n  private _hostname: string = null;\n  private _host: string = null;\n  private _canLaunch: boolean = null;\n\n  constructor(u?: LoginUri) {\n    if (!u) {\n      return;\n    }\n\n    this.match = u.match;\n  }\n\n  get uri(): string {\n    return this._uri;\n  }\n  set uri(value: string) {\n    this._uri = value;\n    this._domain = null;\n    this._canLaunch = null;\n  }\n\n  get domain(): string {\n    if (this._domain == null && this.uri != null) {\n      this._domain = Utils.getDomain(this.uri);\n      if (this._domain === \"\") {\n        this._domain = null;\n      }\n    }\n\n    return this._domain;\n  }\n\n  get hostname(): string {\n    if (this.match === UriMatchStrategy.RegularExpression) {\n      return null;\n    }\n    if (this._hostname == null && this.uri != null) {\n      this._hostname = Utils.getHostname(this.uri);\n      if (this._hostname === \"\") {\n        this._hostname = null;\n      }\n    }\n\n    return this._hostname;\n  }\n\n  get host(): string {\n    if (this.match === UriMatchStrategy.RegularExpression) {\n      return null;\n    }\n    if (this._host == null && this.uri != null) {\n      this._host = Utils.getHost(this.uri);\n      if (this._host === \"\") {\n        this._host = null;\n      }\n    }\n\n    return this._host;\n  }\n\n  get hostnameOrUri(): string {\n    return this.hostname != null ? this.hostname : this.uri;\n  }\n\n  get hostOrUri(): string {\n    return this.host != null ? this.host : this.uri;\n  }\n\n  get isWebsite(): boolean {\n    return (\n      this.uri != null &&\n      (this.uri.indexOf(\"http://\") === 0 ||\n        this.uri.indexOf(\"https://\") === 0 ||\n        (this.uri.indexOf(\"://\") < 0 && !Utils.isNullOrWhitespace(Utils.getDomain(this.uri))))\n    );\n  }\n\n  get canLaunch(): boolean {\n    if (this._canLaunch != null) {\n      return this._canLaunch;\n    }\n    if (this.uri != null && this.match !== UriMatchStrategy.RegularExpression) {\n      this._canLaunch = SafeUrls.canLaunch(this.launchUri);\n    } else {\n      this._canLaunch = false;\n    }\n    return this._canLaunch;\n  }\n\n  get launchUri(): string {\n    return this.uri.indexOf(\"://\") < 0 && !Utils.isNullOrWhitespace(Utils.getDomain(this.uri))\n      ? \"http://\" + this.uri\n      : this.uri;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<LoginUriView>>): LoginUriView {\n    return Object.assign(new LoginUriView(), obj);\n  }\n\n  matchesUri(\n    targetUri: string,\n    equivalentDomains: Set<string>,\n    defaultUriMatch: UriMatchStrategySetting = null,\n  ): boolean {\n    if (!this.uri || !targetUri) {\n      return false;\n    }\n\n    let matchType = this.match ?? defaultUriMatch;\n    matchType ??= UriMatchStrategy.Domain;\n\n    const targetDomain = Utils.getDomain(targetUri);\n    const matchDomains = equivalentDomains.add(targetDomain);\n\n    switch (matchType) {\n      case UriMatchStrategy.Domain:\n        return this.matchesDomain(targetUri, matchDomains);\n      case UriMatchStrategy.Host: {\n        const urlHost = Utils.getHost(targetUri);\n        return urlHost != null && urlHost === Utils.getHost(this.uri);\n      }\n      case UriMatchStrategy.Exact:\n        return targetUri === this.uri;\n      case UriMatchStrategy.StartsWith:\n        return targetUri.startsWith(this.uri);\n      case UriMatchStrategy.RegularExpression:\n        try {\n          const regex = new RegExp(this.uri, \"i\");\n          return regex.test(targetUri);\n        } catch (e) {\n          // Invalid regex\n          return false;\n        }\n      case UriMatchStrategy.Never:\n        return false;\n      default:\n        break;\n    }\n\n    return false;\n  }\n\n  private matchesDomain(targetUri: string, matchDomains: Set<string>) {\n    if (targetUri == null || this.domain == null || !matchDomains.has(this.domain)) {\n      return false;\n    }\n\n    if (Utils.DomainMatchBlacklist.has(this.domain)) {\n      const domainUrlHost = Utils.getHost(targetUri);\n      return !Utils.DomainMatchBlacklist.get(this.domain).has(domainUrlHost);\n    }\n\n    return true;\n  }\n}\n","import { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { DeepJsonify } from \"../../../types/deep-jsonify\";\nimport { LoginLinkedId as LinkedId } from \"../../enums\";\nimport { linkedFieldOption } from \"../../linked-field-option.decorator\";\nimport { Login } from \"../domain/login\";\n\nimport { Fido2CredentialView } from \"./fido2-credential.view\";\nimport { ItemView } from \"./item.view\";\nimport { LoginUriView } from \"./login-uri.view\";\n\nexport class LoginView extends ItemView {\n  @linkedFieldOption(LinkedId.Username, { sortPosition: 0 })\n  username: string = null;\n  @linkedFieldOption(LinkedId.Password, { sortPosition: 1 })\n  password: string = null;\n\n  passwordRevisionDate?: Date = null;\n  totp: string = null;\n  uris: LoginUriView[] = [];\n  autofillOnPageLoad: boolean = null;\n  fido2Credentials: Fido2CredentialView[] = null;\n\n  constructor(l?: Login) {\n    super();\n    if (!l) {\n      return;\n    }\n\n    this.passwordRevisionDate = l.passwordRevisionDate;\n    this.autofillOnPageLoad = l.autofillOnPageLoad;\n  }\n\n  get uri(): string {\n    return this.hasUris ? this.uris[0].uri : null;\n  }\n\n  get maskedPassword(): string {\n    return this.password != null ? \"••••••••\" : null;\n  }\n\n  get subTitle(): string {\n    // if there's a passkey available, use that as a fallback\n    if (Utils.isNullOrEmpty(this.username) && this.fido2Credentials?.length > 0) {\n      return this.fido2Credentials[0].userName;\n    }\n\n    return this.username;\n  }\n\n  get canLaunch(): boolean {\n    return this.hasUris && this.uris.some((u) => u.canLaunch);\n  }\n\n  get hasTotp(): boolean {\n    return !Utils.isNullOrWhitespace(this.totp);\n  }\n\n  get launchUri(): string {\n    if (this.hasUris) {\n      const uri = this.uris.find((u) => u.canLaunch);\n      if (uri != null) {\n        return uri.launchUri;\n      }\n    }\n    return null;\n  }\n\n  get hasUris(): boolean {\n    return this.uris != null && this.uris.length > 0;\n  }\n\n  get hasFido2Credentials(): boolean {\n    return this.fido2Credentials != null && this.fido2Credentials.length > 0;\n  }\n\n  matchesUri(\n    targetUri: string,\n    equivalentDomains: Set<string>,\n    defaultUriMatch: UriMatchStrategySetting = null,\n  ): boolean {\n    if (this.uris == null) {\n      return false;\n    }\n\n    return this.uris.some((uri) => uri.matchesUri(targetUri, equivalentDomains, defaultUriMatch));\n  }\n\n  static fromJSON(obj: Partial<DeepJsonify<LoginView>>): LoginView {\n    const passwordRevisionDate =\n      obj.passwordRevisionDate == null ? null : new Date(obj.passwordRevisionDate);\n    const uris = obj.uris.map((uri) => LoginUriView.fromJSON(uri));\n    const fido2Credentials = obj.fido2Credentials?.map((key) => Fido2CredentialView.fromJSON(key));\n\n    return Object.assign(new LoginView(), obj, {\n      passwordRevisionDate,\n      uris,\n      fido2Credentials,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { Password } from \"../domain/password\";\n\nexport class PasswordHistoryView implements View {\n  password: string = null;\n  lastUsedDate: Date = null;\n\n  constructor(ph?: Password) {\n    if (!ph) {\n      return;\n    }\n\n    this.lastUsedDate = ph.lastUsedDate;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<PasswordHistoryView>>): PasswordHistoryView {\n    const lastUsedDate = obj.lastUsedDate == null ? null : new Date(obj.lastUsedDate);\n\n    return Object.assign(new PasswordHistoryView(), obj, {\n      lastUsedDate: lastUsedDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { SecureNoteType } from \"../../enums\";\nimport { SecureNote } from \"../domain/secure-note\";\n\nimport { ItemView } from \"./item.view\";\n\nexport class SecureNoteView extends ItemView {\n  type: SecureNoteType = null;\n\n  constructor(n?: SecureNote) {\n    super();\n    if (!n) {\n      return;\n    }\n\n    this.type = n.type;\n  }\n\n  get subTitle(): string {\n    return null;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<SecureNoteView>>): SecureNoteView {\n    return Object.assign(new SecureNoteView(), obj);\n  }\n}\n","import { View } from \"../../../models/view/view\";\nimport { InitializerMetadata } from \"../../../platform/interfaces/initializer-metadata.interface\";\nimport { InitializerKey } from \"../../../platform/services/cryptography/initializer-key\";\nimport { DeepJsonify } from \"../../../types/deep-jsonify\";\nimport { LinkedIdType } from \"../../enums\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { LocalData } from \"../data/local.data\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentView } from \"./attachment.view\";\nimport { CardView } from \"./card.view\";\nimport { FieldView } from \"./field.view\";\nimport { IdentityView } from \"./identity.view\";\nimport { LoginView } from \"./login.view\";\nimport { PasswordHistoryView } from \"./password-history.view\";\nimport { SecureNoteView } from \"./secure-note.view\";\n\nexport class CipherView implements View, InitializerMetadata {\n  readonly initializerKey = InitializerKey.CipherView;\n\n  id: string = null;\n  organizationId: string = null;\n  folderId: string = null;\n  name: string = null;\n  notes: string = null;\n  type: CipherType = null;\n  favorite = false;\n  organizationUseTotp = false;\n  edit = false;\n  viewPassword = true;\n  localData: LocalData;\n  login = new LoginView();\n  identity = new IdentityView();\n  card = new CardView();\n  secureNote = new SecureNoteView();\n  attachments: AttachmentView[] = null;\n  fields: FieldView[] = null;\n  passwordHistory: PasswordHistoryView[] = null;\n  collectionIds: string[] = null;\n  revisionDate: Date = null;\n  creationDate: Date = null;\n  deletedDate: Date = null;\n  reprompt: CipherRepromptType = CipherRepromptType.None;\n\n  constructor(c?: Cipher) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.folderId = c.folderId;\n    this.favorite = c.favorite;\n    this.organizationUseTotp = c.organizationUseTotp;\n    this.edit = c.edit;\n    this.viewPassword = c.viewPassword;\n    this.type = c.type;\n    this.localData = c.localData;\n    this.collectionIds = c.collectionIds;\n    this.revisionDate = c.revisionDate;\n    this.creationDate = c.creationDate;\n    this.deletedDate = c.deletedDate;\n    // Old locally stored ciphers might have reprompt == null. If so set it to None.\n    this.reprompt = c.reprompt ?? CipherRepromptType.None;\n  }\n\n  private get item() {\n    switch (this.type) {\n      case CipherType.Login:\n        return this.login;\n      case CipherType.SecureNote:\n        return this.secureNote;\n      case CipherType.Card:\n        return this.card;\n      case CipherType.Identity:\n        return this.identity;\n      default:\n        break;\n    }\n\n    return null;\n  }\n\n  get subTitle(): string {\n    return this.item?.subTitle;\n  }\n\n  get hasPasswordHistory(): boolean {\n    return this.passwordHistory && this.passwordHistory.length > 0;\n  }\n\n  get hasAttachments(): boolean {\n    return this.attachments && this.attachments.length > 0;\n  }\n\n  get hasOldAttachments(): boolean {\n    if (this.hasAttachments) {\n      for (let i = 0; i < this.attachments.length; i++) {\n        if (this.attachments[i].key == null) {\n          return true;\n        }\n      }\n    }\n    return false;\n  }\n\n  get hasFields(): boolean {\n    return this.fields && this.fields.length > 0;\n  }\n\n  get passwordRevisionDisplayDate(): Date {\n    if (this.type !== CipherType.Login || this.login == null) {\n      return null;\n    } else if (this.login.password == null || this.login.password === \"\") {\n      return null;\n    }\n    return this.login.passwordRevisionDate;\n  }\n\n  get isDeleted(): boolean {\n    return this.deletedDate != null;\n  }\n\n  get linkedFieldOptions() {\n    return this.item?.linkedFieldOptions;\n  }\n\n  get isUnassigned(): boolean {\n    return (\n      this.organizationId != null && (this.collectionIds == null || this.collectionIds.length === 0)\n    );\n  }\n\n  linkedFieldValue(id: LinkedIdType) {\n    const linkedFieldOption = this.linkedFieldOptions?.get(id);\n    if (linkedFieldOption == null) {\n      return null;\n    }\n\n    const item = this.item;\n    return this.item[linkedFieldOption.propertyKey as keyof typeof item];\n  }\n\n  linkedFieldI18nKey(id: LinkedIdType): string {\n    return this.linkedFieldOptions.get(id)?.i18nKey;\n  }\n\n  // This is used as a marker to indicate that the cipher view object still has its prototype\n  toJSON() {\n    return this;\n  }\n\n  static fromJSON(obj: Partial<DeepJsonify<CipherView>>): CipherView {\n    if (obj == null) {\n      return null;\n    }\n\n    const view = new CipherView();\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const deletedDate = obj.deletedDate == null ? null : new Date(obj.deletedDate);\n    const attachments = obj.attachments?.map((a: any) => AttachmentView.fromJSON(a));\n    const fields = obj.fields?.map((f: any) => FieldView.fromJSON(f));\n    const passwordHistory = obj.passwordHistory?.map((ph: any) => PasswordHistoryView.fromJSON(ph));\n\n    Object.assign(view, obj, {\n      revisionDate: revisionDate,\n      deletedDate: deletedDate,\n      attachments: attachments,\n      fields: fields,\n      passwordHistory: passwordHistory,\n    });\n\n    switch (obj.type) {\n      case CipherType.Card:\n        view.card = CardView.fromJSON(obj.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityView.fromJSON(obj.identity);\n        break;\n      case CipherType.Login:\n        view.login = LoginView.fromJSON(obj.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteView.fromJSON(obj.secureNote);\n        break;\n      default:\n        break;\n    }\n\n    return view;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { AttachmentData } from \"../data/attachment.data\";\nimport { AttachmentView } from \"../view/attachment.view\";\n\nexport class Attachment extends Domain {\n  id: string;\n  url: string;\n  size: string;\n  sizeName: string; // Readable size, ex: \"4.2 KB\" or \"1.43 GB\"\n  key: EncString;\n  fileName: EncString;\n\n  constructor(obj?: AttachmentData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"],\n    );\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<AttachmentView> {\n    const view = await this.decryptObj(\n      new AttachmentView(this),\n      {\n        fileName: null,\n      },\n      orgId,\n      encKey,\n    );\n\n    if (this.key != null) {\n      view.key = await this.decryptAttachmentKey(orgId, encKey);\n    }\n\n    return view;\n  }\n\n  private async decryptAttachmentKey(orgId: string, encKey?: SymmetricCryptoKey) {\n    try {\n      if (encKey == null) {\n        encKey = await this.getKeyForDecryption(orgId);\n      }\n\n      const encryptService = Utils.getContainerService().getEncryptService();\n      const decValue = await encryptService.decryptToBytes(this.key, encKey);\n      return new SymmetricCryptoKey(decValue);\n    } catch (e) {\n      // TODO: error?\n    }\n  }\n\n  private async getKeyForDecryption(orgId: string) {\n    const cryptoService = Utils.getContainerService().getCryptoService();\n    return orgId != null\n      ? await cryptoService.getOrgKey(orgId)\n      : await cryptoService.getUserKeyWithLegacySupport();\n  }\n\n  toAttachmentData(): AttachmentData {\n    const a = new AttachmentData();\n    a.size = this.size;\n    this.buildDataModel(\n      this,\n      a,\n      {\n        id: null,\n        url: null,\n        sizeName: null,\n        fileName: null,\n        key: null,\n      },\n      [\"id\", \"url\", \"sizeName\"],\n    );\n    return a;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Attachment>>): Attachment {\n    if (obj == null) {\n      return null;\n    }\n\n    const key = EncString.fromJSON(obj.key);\n    const fileName = EncString.fromJSON(obj.fileName);\n\n    return Object.assign(new Attachment(), obj, {\n      key,\n      fileName,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { CardData } from \"../data/card.data\";\nimport { CardView } from \"../view/card.view\";\n\nexport class Card extends Domain {\n  cardholderName: EncString;\n  brand: EncString;\n  number: EncString;\n  expMonth: EncString;\n  expYear: EncString;\n  code: EncString;\n\n  constructor(obj?: CardData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<CardView> {\n    return this.decryptObj(\n      new CardView(),\n      {\n        cardholderName: null,\n        brand: null,\n        number: null,\n        expMonth: null,\n        expYear: null,\n        code: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  toCardData(): CardData {\n    const c = new CardData();\n    this.buildDataModel(this, c, {\n      cardholderName: null,\n      brand: null,\n      number: null,\n      expMonth: null,\n      expYear: null,\n      code: null,\n    });\n    return c;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Card>>): Card {\n    if (obj == null) {\n      return null;\n    }\n\n    const cardholderName = EncString.fromJSON(obj.cardholderName);\n    const brand = EncString.fromJSON(obj.brand);\n    const number = EncString.fromJSON(obj.number);\n    const expMonth = EncString.fromJSON(obj.expMonth);\n    const expYear = EncString.fromJSON(obj.expYear);\n    const code = EncString.fromJSON(obj.code);\n    return Object.assign(new Card(), obj, {\n      cardholderName,\n      brand,\n      number,\n      expMonth,\n      expYear,\n      code,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { FieldType, LinkedIdType } from \"../../enums\";\nimport { FieldData } from \"../data/field.data\";\nimport { FieldView } from \"../view/field.view\";\n\nexport class Field extends Domain {\n  name: EncString;\n  value: EncString;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(obj?: FieldData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n    this.linkedId = obj.linkedId;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        name: null,\n        value: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<FieldView> {\n    return this.decryptObj(\n      new FieldView(this),\n      {\n        name: null,\n        value: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  toFieldData(): FieldData {\n    const f = new FieldData();\n    this.buildDataModel(\n      this,\n      f,\n      {\n        name: null,\n        value: null,\n        type: null,\n        linkedId: null,\n      },\n      [\"type\", \"linkedId\"],\n    );\n    return f;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Field>>): Field {\n    if (obj == null) {\n      return null;\n    }\n\n    const name = EncString.fromJSON(obj.name);\n    const value = EncString.fromJSON(obj.value);\n\n    return Object.assign(new Field(), obj, {\n      name,\n      value,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { IdentityData } from \"../data/identity.data\";\nimport { IdentityView } from \"../view/identity.view\";\n\nexport class Identity extends Domain {\n  title: EncString;\n  firstName: EncString;\n  middleName: EncString;\n  lastName: EncString;\n  address1: EncString;\n  address2: EncString;\n  address3: EncString;\n  city: EncString;\n  state: EncString;\n  postalCode: EncString;\n  country: EncString;\n  company: EncString;\n  email: EncString;\n  phone: EncString;\n  ssn: EncString;\n  username: EncString;\n  passportNumber: EncString;\n  licenseNumber: EncString;\n\n  constructor(obj?: IdentityData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<IdentityView> {\n    return this.decryptObj(\n      new IdentityView(),\n      {\n        title: null,\n        firstName: null,\n        middleName: null,\n        lastName: null,\n        address1: null,\n        address2: null,\n        address3: null,\n        city: null,\n        state: null,\n        postalCode: null,\n        country: null,\n        company: null,\n        email: null,\n        phone: null,\n        ssn: null,\n        username: null,\n        passportNumber: null,\n        licenseNumber: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  toIdentityData(): IdentityData {\n    const i = new IdentityData();\n    this.buildDataModel(this, i, {\n      title: null,\n      firstName: null,\n      middleName: null,\n      lastName: null,\n      address1: null,\n      address2: null,\n      address3: null,\n      city: null,\n      state: null,\n      postalCode: null,\n      country: null,\n      company: null,\n      email: null,\n      phone: null,\n      ssn: null,\n      username: null,\n      passportNumber: null,\n      licenseNumber: null,\n    });\n    return i;\n  }\n\n  static fromJSON(obj: Jsonify<Identity>): Identity {\n    if (obj == null) {\n      return null;\n    }\n\n    const title = EncString.fromJSON(obj.title);\n    const firstName = EncString.fromJSON(obj.firstName);\n    const middleName = EncString.fromJSON(obj.middleName);\n    const lastName = EncString.fromJSON(obj.lastName);\n    const address1 = EncString.fromJSON(obj.address1);\n    const address2 = EncString.fromJSON(obj.address2);\n    const address3 = EncString.fromJSON(obj.address3);\n    const city = EncString.fromJSON(obj.city);\n    const state = EncString.fromJSON(obj.state);\n    const postalCode = EncString.fromJSON(obj.postalCode);\n    const country = EncString.fromJSON(obj.country);\n    const company = EncString.fromJSON(obj.company);\n    const email = EncString.fromJSON(obj.email);\n    const phone = EncString.fromJSON(obj.phone);\n    const ssn = EncString.fromJSON(obj.ssn);\n    const username = EncString.fromJSON(obj.username);\n    const passportNumber = EncString.fromJSON(obj.passportNumber);\n    const licenseNumber = EncString.fromJSON(obj.licenseNumber);\n\n    return Object.assign(new Identity(), obj, {\n      title,\n      firstName,\n      middleName,\n      lastName,\n      address1,\n      address2,\n      address3,\n      city,\n      state,\n      postalCode,\n      country,\n      company,\n      email,\n      phone,\n      ssn,\n      username,\n      passportNumber,\n      licenseNumber,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { Fido2CredentialData } from \"../data/fido2-credential.data\";\nimport { Fido2CredentialView } from \"../view/fido2-credential.view\";\n\nexport class Fido2Credential extends Domain {\n  credentialId: EncString | null = null;\n  keyType: EncString;\n  keyAlgorithm: EncString;\n  keyCurve: EncString;\n  keyValue: EncString;\n  rpId: EncString;\n  userHandle: EncString;\n  userName: EncString;\n  counter: EncString;\n  rpName: EncString;\n  userDisplayName: EncString;\n  discoverable: EncString;\n  creationDate: Date;\n\n  constructor(obj?: Fido2CredentialData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        credentialId: null,\n        keyType: null,\n        keyAlgorithm: null,\n        keyCurve: null,\n        keyValue: null,\n        rpId: null,\n        userHandle: null,\n        userName: null,\n        counter: null,\n        rpName: null,\n        userDisplayName: null,\n        discoverable: null,\n      },\n      [],\n    );\n    this.creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n  }\n\n  async decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<Fido2CredentialView> {\n    const view = await this.decryptObj(\n      new Fido2CredentialView(),\n      {\n        credentialId: null,\n        keyType: null,\n        keyAlgorithm: null,\n        keyCurve: null,\n        keyValue: null,\n        rpId: null,\n        userHandle: null,\n        userName: null,\n        rpName: null,\n        userDisplayName: null,\n        discoverable: null,\n      },\n      orgId,\n      encKey,\n    );\n\n    const { counter } = await this.decryptObj(\n      { counter: \"\" },\n      {\n        counter: null,\n      },\n      orgId,\n      encKey,\n    );\n    // Counter will end up as NaN if this fails\n    view.counter = parseInt(counter);\n\n    const { discoverable } = await this.decryptObj(\n      { discoverable: \"\" },\n      {\n        discoverable: null,\n      },\n      orgId,\n      encKey,\n    );\n    view.discoverable = discoverable === \"true\";\n    view.creationDate = this.creationDate;\n\n    return view;\n  }\n\n  toFido2CredentialData(): Fido2CredentialData {\n    const i = new Fido2CredentialData();\n    i.creationDate = this.creationDate.toISOString();\n    this.buildDataModel(this, i, {\n      credentialId: null,\n      keyType: null,\n      keyAlgorithm: null,\n      keyCurve: null,\n      keyValue: null,\n      rpId: null,\n      userHandle: null,\n      userName: null,\n      counter: null,\n      rpName: null,\n      userDisplayName: null,\n      discoverable: null,\n    });\n    return i;\n  }\n\n  static fromJSON(obj: Jsonify<Fido2Credential>): Fido2Credential {\n    if (obj == null) {\n      return null;\n    }\n\n    const credentialId = EncString.fromJSON(obj.credentialId);\n    const keyType = EncString.fromJSON(obj.keyType);\n    const keyAlgorithm = EncString.fromJSON(obj.keyAlgorithm);\n    const keyCurve = EncString.fromJSON(obj.keyCurve);\n    const keyValue = EncString.fromJSON(obj.keyValue);\n    const rpId = EncString.fromJSON(obj.rpId);\n    const userHandle = EncString.fromJSON(obj.userHandle);\n    const userName = EncString.fromJSON(obj.userName);\n    const counter = EncString.fromJSON(obj.counter);\n    const rpName = EncString.fromJSON(obj.rpName);\n    const userDisplayName = EncString.fromJSON(obj.userDisplayName);\n    const discoverable = EncString.fromJSON(obj.discoverable);\n    const creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n\n    return Object.assign(new Fido2Credential(), obj, {\n      credentialId,\n      keyType,\n      keyAlgorithm,\n      keyCurve,\n      keyValue,\n      rpId,\n      userHandle,\n      userName,\n      counter,\n      rpName,\n      userDisplayName,\n      discoverable,\n      creationDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { LoginUriData } from \"../data/login-uri.data\";\nimport { LoginUriView } from \"../view/login-uri.view\";\n\nexport class LoginUri extends Domain {\n  uri: EncString;\n  uriChecksum: EncString | undefined;\n  match: UriMatchStrategySetting;\n\n  constructor(obj?: LoginUriData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.match = obj.match;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        uri: null,\n        uriChecksum: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<LoginUriView> {\n    return this.decryptObj(\n      new LoginUriView(this),\n      {\n        uri: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  async validateChecksum(clearTextUri: string, orgId: string, encKey: SymmetricCryptoKey) {\n    if (this.uriChecksum == null) {\n      return false;\n    }\n\n    const cryptoService = Utils.getContainerService().getEncryptService();\n    const localChecksum = await cryptoService.hash(clearTextUri, \"sha256\");\n\n    const remoteChecksum = await this.uriChecksum.decrypt(orgId, encKey);\n    return remoteChecksum === localChecksum;\n  }\n\n  toLoginUriData(): LoginUriData {\n    const u = new LoginUriData();\n    this.buildDataModel(\n      this,\n      u,\n      {\n        uri: null,\n        uriChecksum: null,\n        match: null,\n      },\n      [\"match\"],\n    );\n    return u;\n  }\n\n  static fromJSON(obj: Jsonify<LoginUri>): LoginUri {\n    if (obj == null) {\n      return null;\n    }\n\n    const uri = EncString.fromJSON(obj.uri);\n    const uriChecksum = EncString.fromJSON(obj.uriChecksum);\n    return Object.assign(new LoginUri(), obj, {\n      uri,\n      uriChecksum,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { LoginData } from \"../data/login.data\";\nimport { LoginView } from \"../view/login.view\";\n\nimport { Fido2Credential } from \"./fido2-credential\";\nimport { LoginUri } from \"./login-uri\";\n\nexport class Login extends Domain {\n  uris: LoginUri[];\n  username: EncString;\n  password: EncString;\n  passwordRevisionDate?: Date;\n  totp: EncString;\n  autofillOnPageLoad: boolean;\n  fido2Credentials: Fido2Credential[];\n\n  constructor(obj?: LoginData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.passwordRevisionDate =\n      obj.passwordRevisionDate != null ? new Date(obj.passwordRevisionDate) : null;\n    this.autofillOnPageLoad = obj.autofillOnPageLoad;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      [],\n    );\n\n    if (obj.uris) {\n      this.uris = [];\n      obj.uris.forEach((u) => {\n        this.uris.push(new LoginUri(u));\n      });\n    }\n\n    if (obj.fido2Credentials) {\n      this.fido2Credentials = obj.fido2Credentials.map((key) => new Fido2Credential(key));\n    }\n  }\n\n  async decrypt(\n    orgId: string,\n    bypassValidation: boolean,\n    encKey?: SymmetricCryptoKey,\n  ): Promise<LoginView> {\n    const view = await this.decryptObj(\n      new LoginView(this),\n      {\n        username: null,\n        password: null,\n        totp: null,\n      },\n      orgId,\n      encKey,\n    );\n\n    if (this.uris != null) {\n      view.uris = [];\n      for (let i = 0; i < this.uris.length; i++) {\n        // If the uri is null, there is nothing to decrypt or validate\n        if (this.uris[i].uri == null) {\n          continue;\n        }\n\n        const uri = await this.uris[i].decrypt(orgId, encKey);\n        // URIs are shared remotely after decryption\n        // we need to validate that the string hasn't been changed by a compromised server\n        // This validation is tied to the existence of cypher.key for backwards compatibility\n        // So we bypass the validation if there's no cipher.key or procceed with the validation and\n        // Skip the value if it's been tampered with.\n        if (bypassValidation || (await this.uris[i].validateChecksum(uri.uri, orgId, encKey))) {\n          view.uris.push(uri);\n        }\n      }\n    }\n\n    if (this.fido2Credentials != null) {\n      view.fido2Credentials = await Promise.all(\n        this.fido2Credentials.map((key) => key.decrypt(orgId, encKey)),\n      );\n    }\n\n    return view;\n  }\n\n  toLoginData(): LoginData {\n    const l = new LoginData();\n    l.passwordRevisionDate =\n      this.passwordRevisionDate != null ? this.passwordRevisionDate.toISOString() : null;\n    l.autofillOnPageLoad = this.autofillOnPageLoad;\n    this.buildDataModel(this, l, {\n      username: null,\n      password: null,\n      totp: null,\n    });\n\n    if (this.uris != null && this.uris.length > 0) {\n      l.uris = [];\n      this.uris.forEach((u) => {\n        l.uris.push(u.toLoginUriData());\n      });\n    }\n\n    if (this.fido2Credentials != null && this.fido2Credentials.length > 0) {\n      l.fido2Credentials = this.fido2Credentials.map((key) => key.toFido2CredentialData());\n    }\n\n    return l;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Login>>): Login {\n    if (obj == null) {\n      return null;\n    }\n\n    const username = EncString.fromJSON(obj.username);\n    const password = EncString.fromJSON(obj.password);\n    const totp = EncString.fromJSON(obj.totp);\n    const passwordRevisionDate =\n      obj.passwordRevisionDate == null ? null : new Date(obj.passwordRevisionDate);\n    const uris = obj.uris?.map((uri: any) => LoginUri.fromJSON(uri));\n    const fido2Credentials =\n      obj.fido2Credentials?.map((key) => Fido2Credential.fromJSON(key)) ?? [];\n\n    return Object.assign(new Login(), obj, {\n      username,\n      password,\n      totp,\n      passwordRevisionDate,\n      uris,\n      fido2Credentials,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { PasswordHistoryData } from \"../data/password-history.data\";\nimport { PasswordHistoryView } from \"../view/password-history.view\";\n\nexport class Password extends Domain {\n  password: EncString;\n  lastUsedDate: Date;\n\n  constructor(obj?: PasswordHistoryData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(this, obj, {\n      password: null,\n    });\n    this.lastUsedDate = new Date(obj.lastUsedDate);\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<PasswordHistoryView> {\n    return this.decryptObj(\n      new PasswordHistoryView(this),\n      {\n        password: null,\n      },\n      orgId,\n      encKey,\n    );\n  }\n\n  toPasswordHistoryData(): PasswordHistoryData {\n    const ph = new PasswordHistoryData();\n    ph.lastUsedDate = this.lastUsedDate.toISOString();\n    this.buildDataModel(this, ph, {\n      password: null,\n    });\n    return ph;\n  }\n\n  static fromJSON(obj: Partial<Jsonify<Password>>): Password {\n    if (obj == null) {\n      return null;\n    }\n\n    const password = EncString.fromJSON(obj.password);\n    const lastUsedDate = obj.lastUsedDate == null ? null : new Date(obj.lastUsedDate);\n\n    return Object.assign(new Password(), obj, {\n      password,\n      lastUsedDate,\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { SecureNoteType } from \"../../enums\";\nimport { SecureNoteData } from \"../data/secure-note.data\";\nimport { SecureNoteView } from \"../view/secure-note.view\";\n\nexport class SecureNote extends Domain {\n  type: SecureNoteType;\n\n  constructor(obj?: SecureNoteData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.type = obj.type;\n  }\n\n  decrypt(orgId: string, encKey?: SymmetricCryptoKey): Promise<SecureNoteView> {\n    return Promise.resolve(new SecureNoteView(this));\n  }\n\n  toSecureNoteData(): SecureNoteData {\n    const n = new SecureNoteData();\n    n.type = this.type;\n    return n;\n  }\n\n  static fromJSON(obj: Jsonify<SecureNote>): SecureNote {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new SecureNote(), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Decryptable } from \"../../../platform/interfaces/decryptable.interface\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { InitializerKey } from \"../../../platform/services/cryptography/initializer-key\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CipherData } from \"../data/cipher.data\";\nimport { LocalData } from \"../data/local.data\";\nimport { CipherView } from \"../view/cipher.view\";\n\nimport { Attachment } from \"./attachment\";\nimport { Card } from \"./card\";\nimport { Field } from \"./field\";\nimport { Identity } from \"./identity\";\nimport { Login } from \"./login\";\nimport { Password } from \"./password\";\nimport { SecureNote } from \"./secure-note\";\n\nexport class Cipher extends Domain implements Decryptable<CipherView> {\n  readonly initializerKey = InitializerKey.Cipher;\n\n  id: string;\n  organizationId: string;\n  folderId: string;\n  name: EncString;\n  notes: EncString;\n  type: CipherType;\n  favorite: boolean;\n  organizationUseTotp: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  revisionDate: Date;\n  localData: LocalData;\n  login: Login;\n  identity: Identity;\n  card: Card;\n  secureNote: SecureNote;\n  attachments: Attachment[];\n  fields: Field[];\n  passwordHistory: Password[];\n  collectionIds: string[];\n  creationDate: Date;\n  deletedDate: Date;\n  reprompt: CipherRepromptType;\n  key: EncString;\n\n  constructor(obj?: CipherData, localData: LocalData = null) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        folderId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"organizationId\", \"folderId\"],\n    );\n\n    this.type = obj.type;\n    this.favorite = obj.favorite;\n    this.organizationUseTotp = obj.organizationUseTotp;\n    this.edit = obj.edit;\n    if (obj.viewPassword != null) {\n      this.viewPassword = obj.viewPassword;\n    } else {\n      this.viewPassword = true; // Default for already synced Ciphers without viewPassword\n    }\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.collectionIds = obj.collectionIds;\n    this.localData = localData;\n    this.creationDate = obj.creationDate != null ? new Date(obj.creationDate) : null;\n    this.deletedDate = obj.deletedDate != null ? new Date(obj.deletedDate) : null;\n    this.reprompt = obj.reprompt;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new Login(obj.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNote(obj.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new Card(obj.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new Identity(obj.identity);\n        break;\n      default:\n        break;\n    }\n\n    if (obj.attachments != null) {\n      this.attachments = obj.attachments.map((a) => new Attachment(a));\n    } else {\n      this.attachments = null;\n    }\n\n    if (obj.fields != null) {\n      this.fields = obj.fields.map((f) => new Field(f));\n    } else {\n      this.fields = null;\n    }\n\n    if (obj.passwordHistory != null) {\n      this.passwordHistory = obj.passwordHistory.map((ph) => new Password(ph));\n    } else {\n      this.passwordHistory = null;\n    }\n  }\n\n  // We are passing the organizationId into the EncString.decrypt() method here, but because the encKey will always be\n  // present and so the organizationId will not be used.\n  // We will refactor the EncString.decrypt() in https://bitwarden.atlassian.net/browse/PM-3762 to remove the dependency on the organizationId.\n  async decrypt(encKey: SymmetricCryptoKey): Promise<CipherView> {\n    const model = new CipherView(this);\n    let bypassValidation = true;\n\n    if (this.key != null) {\n      const encryptService = Utils.getContainerService().getEncryptService();\n      encKey = new SymmetricCryptoKey(await encryptService.decryptToBytes(this.key, encKey));\n      bypassValidation = false;\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      this.organizationId,\n      encKey,\n    );\n\n    switch (this.type) {\n      case CipherType.Login:\n        model.login = await this.login.decrypt(this.organizationId, bypassValidation, encKey);\n        break;\n      case CipherType.SecureNote:\n        model.secureNote = await this.secureNote.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Card:\n        model.card = await this.card.decrypt(this.organizationId, encKey);\n        break;\n      case CipherType.Identity:\n        model.identity = await this.identity.decrypt(this.organizationId, encKey);\n        break;\n      default:\n        break;\n    }\n\n    if (this.attachments != null && this.attachments.length > 0) {\n      const attachments: any[] = [];\n      await this.attachments.reduce((promise, attachment) => {\n        return promise\n          .then(() => {\n            return attachment.decrypt(this.organizationId, encKey);\n          })\n          .then((decAttachment) => {\n            attachments.push(decAttachment);\n          });\n      }, Promise.resolve());\n      model.attachments = attachments;\n    }\n\n    if (this.fields != null && this.fields.length > 0) {\n      const fields: any[] = [];\n      await this.fields.reduce((promise, field) => {\n        return promise\n          .then(() => {\n            return field.decrypt(this.organizationId, encKey);\n          })\n          .then((decField) => {\n            fields.push(decField);\n          });\n      }, Promise.resolve());\n      model.fields = fields;\n    }\n\n    if (this.passwordHistory != null && this.passwordHistory.length > 0) {\n      const passwordHistory: any[] = [];\n      await this.passwordHistory.reduce((promise, ph) => {\n        return promise\n          .then(() => {\n            return ph.decrypt(this.organizationId, encKey);\n          })\n          .then((decPh) => {\n            passwordHistory.push(decPh);\n          });\n      }, Promise.resolve());\n      model.passwordHistory = passwordHistory;\n    }\n\n    return model;\n  }\n\n  toCipherData(): CipherData {\n    const c = new CipherData();\n    c.id = this.id;\n    c.organizationId = this.organizationId;\n    c.folderId = this.folderId;\n    c.edit = this.edit;\n    c.viewPassword = this.viewPassword;\n    c.organizationUseTotp = this.organizationUseTotp;\n    c.favorite = this.favorite;\n    c.revisionDate = this.revisionDate != null ? this.revisionDate.toISOString() : null;\n    c.type = this.type;\n    c.collectionIds = this.collectionIds;\n    c.creationDate = this.creationDate != null ? this.creationDate.toISOString() : null;\n    c.deletedDate = this.deletedDate != null ? this.deletedDate.toISOString() : null;\n    c.reprompt = this.reprompt;\n    c.key = this.key?.encryptedString;\n\n    this.buildDataModel(this, c, {\n      name: null,\n      notes: null,\n    });\n\n    switch (c.type) {\n      case CipherType.Login:\n        c.login = this.login.toLoginData();\n        break;\n      case CipherType.SecureNote:\n        c.secureNote = this.secureNote.toSecureNoteData();\n        break;\n      case CipherType.Card:\n        c.card = this.card.toCardData();\n        break;\n      case CipherType.Identity:\n        c.identity = this.identity.toIdentityData();\n        break;\n      default:\n        break;\n    }\n\n    if (this.fields != null) {\n      c.fields = this.fields.map((f) => f.toFieldData());\n    }\n    if (this.attachments != null) {\n      c.attachments = this.attachments.map((a) => a.toAttachmentData());\n    }\n    if (this.passwordHistory != null) {\n      c.passwordHistory = this.passwordHistory.map((ph) => ph.toPasswordHistoryData());\n    }\n    return c;\n  }\n\n  static fromJSON(obj: Jsonify<Cipher>) {\n    if (obj == null) {\n      return null;\n    }\n\n    const domain = new Cipher();\n    const name = EncString.fromJSON(obj.name);\n    const notes = EncString.fromJSON(obj.notes);\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const deletedDate = obj.deletedDate == null ? null : new Date(obj.deletedDate);\n    const attachments = obj.attachments?.map((a: any) => Attachment.fromJSON(a));\n    const fields = obj.fields?.map((f: any) => Field.fromJSON(f));\n    const passwordHistory = obj.passwordHistory?.map((ph: any) => Password.fromJSON(ph));\n    const key = EncString.fromJSON(obj.key);\n\n    Object.assign(domain, obj, {\n      name,\n      notes,\n      revisionDate,\n      deletedDate,\n      attachments,\n      fields,\n      passwordHistory,\n      key,\n    });\n\n    switch (obj.type) {\n      case CipherType.Card:\n        domain.card = Card.fromJSON(obj.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = Identity.fromJSON(obj.identity);\n        break;\n      case CipherType.Login:\n        domain.login = Login.fromJSON(obj.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNote.fromJSON(obj.secureNote);\n        break;\n      default:\n        break;\n    }\n\n    return domain;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Cipher } from \"../../../vault/models/domain/cipher\";\nimport { CipherView } from \"../../../vault/models/view/cipher.view\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\n\nimport { InitializerKey } from \"./initializer-key\";\n\n/**\n * Internal reference of classes so we can reconstruct objects properly.\n * Each entry should be keyed using the Decryptable.initializerKey property\n */\nconst classInitializers: Record<InitializerKey, (obj: any) => any> = {\n  [InitializerKey.Cipher]: Cipher.fromJSON,\n  [InitializerKey.CipherView]: CipherView.fromJSON,\n};\n\nexport function getClassInitializer<T extends InitializerMetadata>(\n  className: InitializerKey,\n): (obj: Jsonify<T>) => T {\n  return classInitializers[className];\n}\n","import { firstValueFrom, fromEvent, filter, map, takeUntil, defaultIfEmpty, Subject } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { BulkEncryptService } from \"../../abstractions/bulk-encrypt.service\";\nimport { CryptoFunctionService } from \"../../abstractions/crypto-function.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { Decryptable } from \"../../interfaces/decryptable.interface\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\nimport { Utils } from \"../../misc/utils\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\n\nimport { getClassInitializer } from \"./get-class-initializer\";\n\n// TTL (time to live) is not strictly required but avoids tying up memory resources if inactive\nconst workerTTL = 60000; // 1 minute\nconst maxWorkers = 8;\nconst minNumberOfItemsForMultithreading = 400;\n\nexport class BulkEncryptServiceImplementation implements BulkEncryptService {\n  private workers: Worker[] = [];\n  private timeout: any;\n\n  private clear$ = new Subject<void>();\n\n  constructor(\n    protected cryptoFunctionService: CryptoFunctionService,\n    protected logService: LogService,\n  ) {}\n\n  /**\n   * Decrypts items using a web worker if the environment supports it.\n   * Will fall back to the main thread if the window object is not available.\n   */\n  async decryptItems<T extends InitializerMetadata>(\n    items: Decryptable<T>[],\n    key: SymmetricCryptoKey,\n  ): Promise<T[]> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (items == null || items.length < 1) {\n      return [];\n    }\n\n    if (typeof window === \"undefined\") {\n      this.logService.info(\"Window not available in BulkEncryptService, decrypting sequentially\");\n      const results = [];\n      for (let i = 0; i < items.length; i++) {\n        results.push(await items[i].decrypt(key));\n      }\n      return results;\n    }\n\n    const decryptedItems = await this.getDecryptedItemsFromWorkers(items, key);\n    return decryptedItems;\n  }\n\n  /**\n   * Sends items to a set of web workers to decrypt them. This utilizes multiple workers to decrypt items\n   * faster without interrupting other operations (e.g. updating UI).\n   */\n  private async getDecryptedItemsFromWorkers<T extends InitializerMetadata>(\n    items: Decryptable<T>[],\n    key: SymmetricCryptoKey,\n  ): Promise<T[]> {\n    if (items == null || items.length < 1) {\n      return [];\n    }\n\n    this.clearTimeout();\n\n    const hardwareConcurrency = navigator.hardwareConcurrency || 1;\n    let numberOfWorkers = Math.min(hardwareConcurrency, maxWorkers);\n    if (items.length < minNumberOfItemsForMultithreading) {\n      numberOfWorkers = 1;\n    }\n\n    this.logService.info(\n      `Starting decryption using multithreading with ${numberOfWorkers} workers for ${items.length} items`,\n    );\n\n    if (this.workers.length == 0) {\n      for (let i = 0; i < numberOfWorkers; i++) {\n        this.workers.push(\n          new Worker(\n            new URL(\n              /* webpackChunkName: 'encrypt-worker' */\n              \"@bitwarden/common/platform/services/cryptography/encrypt.worker.ts\",\n              import.meta.url,\n            ),\n          ),\n        );\n      }\n    }\n\n    const itemsPerWorker = Math.floor(items.length / this.workers.length);\n    const results = [];\n\n    for (const [i, worker] of this.workers.entries()) {\n      const start = i * itemsPerWorker;\n      const end = start + itemsPerWorker;\n      const itemsForWorker = items.slice(start, end);\n\n      // push the remaining items to the last worker\n      if (i == this.workers.length - 1) {\n        itemsForWorker.push(...items.slice(end));\n      }\n\n      const request = {\n        id: Utils.newGuid(),\n        items: itemsForWorker,\n        key: key,\n      };\n\n      worker.postMessage(JSON.stringify(request));\n      results.push(\n        firstValueFrom(\n          fromEvent(worker, \"message\").pipe(\n            filter((response: MessageEvent) => response.data?.id === request.id),\n            map((response) => JSON.parse(response.data.items)),\n            map((items) =>\n              items.map((jsonItem: Jsonify<T>) => {\n                const initializer = getClassInitializer<T>(jsonItem.initializerKey);\n                return initializer(jsonItem);\n              }),\n            ),\n            takeUntil(this.clear$),\n            defaultIfEmpty([]),\n          ),\n        ),\n      );\n    }\n\n    const decryptedItems = (await Promise.all(results)).flat();\n    this.logService.info(\n      `Finished decrypting ${decryptedItems.length} items using ${numberOfWorkers} workers`,\n    );\n\n    this.restartTimeout();\n\n    return decryptedItems;\n  }\n\n  private clear() {\n    this.clear$.next();\n    for (const worker of this.workers) {\n      worker.terminate();\n    }\n    this.workers = [];\n    this.clearTimeout();\n  }\n\n  private restartTimeout() {\n    this.clearTimeout();\n    this.timeout = setTimeout(() => this.clear(), workerTTL);\n  }\n\n  private clearTimeout() {\n    if (this.timeout != null) {\n      clearTimeout(this.timeout);\n    }\n  }\n}\n","import { Utils } from \"../../../platform/misc/utils\";\nimport { EncryptionType } from \"../../enums\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\n\nconst ENC_TYPE_LENGTH = 1;\nconst IV_LENGTH = 16;\nconst MAC_LENGTH = 32;\nconst MIN_DATA_LENGTH = 1;\n\nexport class EncArrayBuffer implements Encrypted {\n  readonly encryptionType: EncryptionType = null;\n  readonly dataBytes: Uint8Array = null;\n  readonly ivBytes: Uint8Array = null;\n  readonly macBytes: Uint8Array = null;\n\n  constructor(readonly buffer: Uint8Array) {\n    const encBytes = buffer;\n    const encType = encBytes[0];\n\n    switch (encType) {\n      case EncryptionType.AesCbc128_HmacSha256_B64:\n      case EncryptionType.AesCbc256_HmacSha256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH);\n        this.macBytes = encBytes.slice(\n          ENC_TYPE_LENGTH + IV_LENGTH,\n          ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH,\n        );\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH + MAC_LENGTH);\n        break;\n      }\n      case EncryptionType.AesCbc256_B64: {\n        const minimumLength = ENC_TYPE_LENGTH + IV_LENGTH + MIN_DATA_LENGTH;\n        if (encBytes.length < minimumLength) {\n          this.throwDecryptionError();\n        }\n\n        this.ivBytes = encBytes.slice(ENC_TYPE_LENGTH, ENC_TYPE_LENGTH + IV_LENGTH);\n        this.dataBytes = encBytes.slice(ENC_TYPE_LENGTH + IV_LENGTH);\n        break;\n      }\n      default:\n        this.throwDecryptionError();\n    }\n\n    this.encryptionType = encType;\n  }\n\n  private throwDecryptionError() {\n    throw new Error(\n      \"Error parsing encrypted ArrayBuffer: data is corrupted or has an invalid format.\",\n    );\n  }\n\n  static async fromResponse(response: {\n    arrayBuffer: () => Promise<ArrayBuffer>;\n  }): Promise<EncArrayBuffer> {\n    const buffer = await response.arrayBuffer();\n    if (buffer == null) {\n      throw new Error(\"Cannot create EncArrayBuffer from Response - Response is empty\");\n    }\n    return new EncArrayBuffer(new Uint8Array(buffer));\n  }\n\n  static fromB64(b64: string) {\n    const buffer = Utils.fromB64ToArray(b64);\n    return new EncArrayBuffer(buffer);\n  }\n}\n","import { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\n\nexport class EncryptedObject {\n  iv: Uint8Array;\n  data: Uint8Array;\n  mac: Uint8Array;\n  key: SymmetricCryptoKey;\n}\n","import { Utils } from \"../../../platform/misc/utils\";\nimport { CryptoFunctionService } from \"../../abstractions/crypto-function.service\";\nimport { EncryptService } from \"../../abstractions/encrypt.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { EncryptionType } from \"../../enums\";\nimport { Decryptable } from \"../../interfaces/decryptable.interface\";\nimport { Encrypted } from \"../../interfaces/encrypted\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\nimport { EncString } from \"../../models/domain/enc-string\";\nimport { EncryptedObject } from \"../../models/domain/encrypted-object\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\n\nexport class EncryptServiceImplementation implements EncryptService {\n  constructor(\n    protected cryptoFunctionService: CryptoFunctionService,\n    protected logService: LogService,\n    protected logMacFailures: boolean,\n  ) {}\n\n  async encrypt(plainValue: string | Uint8Array, key: SymmetricCryptoKey): Promise<EncString> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (plainValue == null) {\n      return Promise.resolve(null);\n    }\n\n    let plainBuf: Uint8Array;\n    if (typeof plainValue === \"string\") {\n      plainBuf = Utils.fromUtf8ToArray(plainValue);\n    } else {\n      plainBuf = plainValue;\n    }\n\n    const encObj = await this.aesEncrypt(plainBuf, key);\n    const iv = Utils.fromBufferToB64(encObj.iv);\n    const data = Utils.fromBufferToB64(encObj.data);\n    const mac = encObj.mac != null ? Utils.fromBufferToB64(encObj.mac) : null;\n    return new EncString(encObj.key.encType, data, iv, mac);\n  }\n\n  async encryptToBytes(plainValue: Uint8Array, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    const encValue = await this.aesEncrypt(plainValue, key);\n    let macLen = 0;\n    if (encValue.mac != null) {\n      macLen = encValue.mac.byteLength;\n    }\n\n    const encBytes = new Uint8Array(1 + encValue.iv.byteLength + macLen + encValue.data.byteLength);\n    encBytes.set([encValue.key.encType]);\n    encBytes.set(new Uint8Array(encValue.iv), 1);\n    if (encValue.mac != null) {\n      encBytes.set(new Uint8Array(encValue.mac), 1 + encValue.iv.byteLength);\n    }\n\n    encBytes.set(new Uint8Array(encValue.data), 1 + encValue.iv.byteLength + macLen);\n    return new EncArrayBuffer(encBytes);\n  }\n\n  async decryptToUtf8(encString: EncString, key: SymmetricCryptoKey): Promise<string> {\n    if (key == null) {\n      throw new Error(\"No key provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encString);\n\n    if (key.macKey != null && encString?.mac == null) {\n      this.logService.error(\"MAC required but not provided.\");\n      return null;\n    }\n\n    if (key.encType !== encString.encryptionType) {\n      this.logService.error(\"Key encryption type does not match payload encryption type.\");\n      return null;\n    }\n\n    const fastParams = this.cryptoFunctionService.aesDecryptFastParameters(\n      encString.data,\n      encString.iv,\n      encString.mac,\n      key,\n    );\n    if (fastParams.macKey != null && fastParams.mac != null) {\n      const computedMac = await this.cryptoFunctionService.hmacFast(\n        fastParams.macData,\n        fastParams.macKey,\n        \"sha256\",\n      );\n      const macsEqual = await this.cryptoFunctionService.compareFast(fastParams.mac, computedMac);\n      if (!macsEqual) {\n        this.logMacFailed(\"MAC comparison failed. Key or payload has changed.\");\n        return null;\n      }\n    }\n\n    return await this.cryptoFunctionService.aesDecryptFast(fastParams, \"cbc\");\n  }\n\n  async decryptToBytes(encThing: Encrypted, key: SymmetricCryptoKey): Promise<Uint8Array> {\n    if (key == null) {\n      throw new Error(\"No encryption key provided.\");\n    }\n\n    if (encThing == null) {\n      throw new Error(\"Nothing provided for decryption.\");\n    }\n\n    key = this.resolveLegacyKey(key, encThing);\n\n    if (key.macKey != null && encThing.macBytes == null) {\n      this.logService.error(\"MAC required but not provided.\");\n      return null;\n    }\n\n    if (key.encType !== encThing.encryptionType) {\n      this.logService.error(\"Key encryption type does not match payload encryption type.\");\n      return null;\n    }\n\n    if (key.macKey != null && encThing.macBytes != null) {\n      const macData = new Uint8Array(encThing.ivBytes.byteLength + encThing.dataBytes.byteLength);\n      macData.set(new Uint8Array(encThing.ivBytes), 0);\n      macData.set(new Uint8Array(encThing.dataBytes), encThing.ivBytes.byteLength);\n      const computedMac = await this.cryptoFunctionService.hmac(macData, key.macKey, \"sha256\");\n      if (computedMac === null) {\n        this.logMacFailed(\"Failed to compute MAC.\");\n        return null;\n      }\n\n      const macsMatch = await this.cryptoFunctionService.compare(encThing.macBytes, computedMac);\n      if (!macsMatch) {\n        this.logMacFailed(\"MAC comparison failed. Key or payload has changed.\");\n        return null;\n      }\n    }\n\n    const result = await this.cryptoFunctionService.aesDecrypt(\n      encThing.dataBytes,\n      encThing.ivBytes,\n      key.encKey,\n      \"cbc\",\n    );\n\n    return result ?? null;\n  }\n\n  async rsaEncrypt(data: Uint8Array, publicKey: Uint8Array): Promise<EncString> {\n    if (data == null) {\n      throw new Error(\"No data provided for encryption.\");\n    }\n\n    if (publicKey == null) {\n      throw new Error(\"No public key provided for encryption.\");\n    }\n    const encrypted = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encrypted));\n  }\n\n  async rsaDecrypt(data: EncString, privateKey: Uint8Array): Promise<Uint8Array> {\n    if (data == null) {\n      throw new Error(\"No data provided for decryption.\");\n    }\n\n    let algorithm: \"sha1\" | \"sha256\";\n    switch (data.encryptionType) {\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        algorithm = \"sha1\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        algorithm = \"sha256\";\n        break;\n      default:\n        throw new Error(\"Invalid encryption type.\");\n    }\n\n    if (privateKey == null) {\n      throw new Error(\"No private key provided for decryption.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data.dataBytes, privateKey, algorithm);\n  }\n\n  /**\n   * @deprecated Replaced by BulkEncryptService (PM-4154)\n   */\n  async decryptItems<T extends InitializerMetadata>(\n    items: Decryptable<T>[],\n    key: SymmetricCryptoKey,\n  ): Promise<T[]> {\n    if (items == null || items.length < 1) {\n      return [];\n    }\n\n    // don't use promise.all because this task is not io bound\n    const results = [];\n    for (let i = 0; i < items.length; i++) {\n      results.push(await items[i].decrypt(key));\n    }\n    return results;\n  }\n\n  async hash(value: string | Uint8Array, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hashArray = await this.cryptoFunctionService.hash(value, algorithm);\n    return Utils.fromBufferToB64(hashArray);\n  }\n\n  private async aesEncrypt(data: Uint8Array, key: SymmetricCryptoKey): Promise<EncryptedObject> {\n    const obj = new EncryptedObject();\n    obj.key = key;\n    obj.iv = await this.cryptoFunctionService.randomBytes(16);\n    obj.data = await this.cryptoFunctionService.aesEncrypt(data, obj.iv, obj.key.encKey);\n\n    if (obj.key.macKey != null) {\n      const macData = new Uint8Array(obj.iv.byteLength + obj.data.byteLength);\n      macData.set(new Uint8Array(obj.iv), 0);\n      macData.set(new Uint8Array(obj.data), obj.iv.byteLength);\n      obj.mac = await this.cryptoFunctionService.hmac(macData, obj.key.macKey, \"sha256\");\n    }\n\n    return obj;\n  }\n\n  private logMacFailed(msg: string) {\n    if (this.logMacFailures) {\n      this.logService.error(msg);\n    }\n  }\n\n  /**\n   * Transform into new key for the old encrypt-then-mac scheme if required, otherwise return the current key unchanged\n   * @param encThing The encrypted object (e.g. encString or encArrayBuffer) that you want to decrypt\n   */\n  resolveLegacyKey(key: SymmetricCryptoKey, encThing: Encrypted): SymmetricCryptoKey {\n    if (\n      encThing.encryptionType === EncryptionType.AesCbc128_HmacSha256_B64 &&\n      key.encType === EncryptionType.AesCbc256_B64\n    ) {\n      return new SymmetricCryptoKey(key.key, EncryptionType.AesCbc128_HmacSha256_B64);\n    }\n\n    return key;\n  }\n}\n","import { BulkEncryptService } from \"../../abstractions/bulk-encrypt.service\";\nimport { EncryptService } from \"../../abstractions/encrypt.service\";\nimport { Decryptable } from \"../../interfaces/decryptable.interface\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\n\n/**\n * @deprecated For the feature flag from PM-4154, remove once feature is rolled out\n */\nexport class FallbackBulkEncryptService implements BulkEncryptService {\n  private featureFlagEncryptService: BulkEncryptService;\n\n  constructor(protected encryptService: EncryptService) {}\n\n  /**\n   * Decrypts items using a web worker if the environment supports it.\n   * Will fall back to the main thread if the window object is not available.\n   */\n  async decryptItems<T extends InitializerMetadata>(\n    items: Decryptable<T>[],\n    key: SymmetricCryptoKey,\n  ): Promise<T[]> {\n    if (this.featureFlagEncryptService != null) {\n      return await this.featureFlagEncryptService.decryptItems(items, key);\n    } else {\n      return await this.encryptService.decryptItems(items, key);\n    }\n  }\n\n  async setFeatureFlagEncryptService(featureFlagEncryptService: BulkEncryptService) {\n    this.featureFlagEncryptService = featureFlagEncryptService;\n  }\n}\n","import { defaultIfEmpty, filter, firstValueFrom, fromEvent, map, Subject, takeUntil } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { Decryptable } from \"../../interfaces/decryptable.interface\";\nimport { InitializerMetadata } from \"../../interfaces/initializer-metadata.interface\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\n\nimport { EncryptServiceImplementation } from \"./encrypt.service.implementation\";\nimport { getClassInitializer } from \"./get-class-initializer\";\n\n// TTL (time to live) is not strictly required but avoids tying up memory resources if inactive\nconst workerTTL = 3 * 60000; // 3 minutes\n\n/**\n * @deprecated Replaced by BulkEncryptionService (PM-4154)\n */\nexport class MultithreadEncryptServiceImplementation extends EncryptServiceImplementation {\n  private worker: Worker;\n  private timeout: any;\n\n  private clear$ = new Subject<void>();\n\n  /**\n   * Sends items to a web worker to decrypt them.\n   * This utilises multithreading to decrypt items faster without interrupting other operations (e.g. updating UI).\n   */\n  async decryptItems<T extends InitializerMetadata>(\n    items: Decryptable<T>[],\n    key: SymmetricCryptoKey,\n  ): Promise<T[]> {\n    if (items == null || items.length < 1) {\n      return [];\n    }\n\n    this.logService.info(\"Starting decryption using multithreading\");\n\n    this.worker ??= new Worker(\n      new URL(\n        /* webpackChunkName: 'encrypt-worker' */\n        \"@bitwarden/common/platform/services/cryptography/encrypt.worker.ts\",\n        import.meta.url,\n      ),\n    );\n\n    this.restartTimeout();\n\n    const request = {\n      id: Utils.newGuid(),\n      items: items,\n      key: key,\n    };\n\n    this.worker.postMessage(JSON.stringify(request));\n\n    return await firstValueFrom(\n      fromEvent(this.worker, \"message\").pipe(\n        filter((response: MessageEvent) => response.data?.id === request.id),\n        map((response) => JSON.parse(response.data.items)),\n        map((items) =>\n          items.map((jsonItem: Jsonify<T>) => {\n            const initializer = getClassInitializer<T>(jsonItem.initializerKey);\n            return initializer(jsonItem);\n          }),\n        ),\n        takeUntil(this.clear$),\n        defaultIfEmpty([]),\n      ),\n    );\n  }\n\n  private clear() {\n    this.clear$.next();\n    this.worker?.terminate();\n    this.worker = null;\n    this.clearTimeout();\n  }\n\n  private restartTimeout() {\n    this.clearTimeout();\n    this.timeout = setTimeout(() => this.clear(), workerTTL);\n  }\n\n  private clearTimeout() {\n    if (this.timeout != null) {\n      clearTimeout(this.timeout);\n    }\n  }\n}\n","import { Observable, Subject } from \"rxjs\";\n\nimport { Fido2CredentialView } from \"../../../vault/models/view/fido2-credential.view\";\n\nexport const Fido2ActiveRequestEvents = {\n  Refresh: \"refresh-fido2-active-request\",\n  Abort: \"abort-fido2-active-request\",\n  Continue: \"continue-fido2-active-request\",\n} as const;\n\ntype Fido2ActiveRequestEvent = typeof Fido2ActiveRequestEvents;\n\nexport type RequestResult =\n  | { type: Fido2ActiveRequestEvent[\"Refresh\"] }\n  | { type: Fido2ActiveRequestEvent[\"Abort\"] }\n  | { type: Fido2ActiveRequestEvent[\"Continue\"]; credentialId: string };\n\nexport interface ActiveRequest {\n  credentials: Fido2CredentialView[];\n  subject: Subject<RequestResult>;\n}\n\nexport type RequestCollection = Readonly<{ [tabId: number]: ActiveRequest }>;\n\nexport abstract class Fido2ActiveRequestManager {\n  getActiveRequest$: (tabId: number) => Observable<ActiveRequest | undefined>;\n  getActiveRequest: (tabId: number) => ActiveRequest | undefined;\n  newActiveRequest: (\n    tabId: number,\n    credentials: Fido2CredentialView[],\n    abortController: AbortController,\n  ) => Promise<RequestResult>;\n  removeActiveRequest: (tabId: number) => void;\n  removeAllActiveRequests: () => void;\n}\n","import { Fido2CredentialView } from \"../../../vault/models/view/fido2-credential.view\";\n\n/**\n * This class represents an abstraction of the WebAuthn Authenticator model as described by W3C:\n * https://www.w3.org/TR/webauthn-3/#sctn-authenticator-model\n *\n * The authenticator provides key management and cryptographic signatures.\n */\nexport abstract class Fido2AuthenticatorService {\n  /**\n   * Create and save a new credential as described in:\n   * https://www.w3.org/TR/webauthn-3/#sctn-op-make-cred\n   *\n   * @param params Parameters for creating a new credential\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the new credential and an attestation signature.\n   **/\n  makeCredential: (\n    params: Fido2AuthenticatorMakeCredentialsParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ) => Promise<Fido2AuthenticatorMakeCredentialResult>;\n\n  /**\n   * Generate an assertion using an existing credential as describe in:\n   * https://www.w3.org/TR/webauthn-3/#sctn-op-get-assertion\n   *\n   * @param params Parameters for generating an assertion\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the asserted credential and an assertion signature.\n   */\n  getAssertion: (\n    params: Fido2AuthenticatorGetAssertionParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ) => Promise<Fido2AuthenticatorGetAssertionResult>;\n\n  /**\n   * Discover credentials for a given Relying Party\n   *\n   * @param rpId The Relying Party's ID\n   * @returns A promise that resolves with an array of discoverable credentials\n   */\n  silentCredentialDiscovery: (rpId: string) => Promise<Fido2CredentialView[]>;\n}\n\nexport enum Fido2AlgorithmIdentifier {\n  ES256 = -7,\n  RS256 = -257,\n}\n\nexport enum Fido2AuthenticatorErrorCode {\n  Unknown = \"UnknownError\",\n  NotSupported = \"NotSupportedError\",\n  InvalidState = \"InvalidStateError\",\n  NotAllowed = \"NotAllowedError\",\n  Constraint = \"ConstraintError\",\n}\n\nexport class Fido2AuthenticatorError extends Error {\n  constructor(readonly errorCode: Fido2AuthenticatorErrorCode) {\n    super(errorCode);\n  }\n}\n\nexport interface PublicKeyCredentialDescriptor {\n  id: BufferSource;\n  transports?: (\"ble\" | \"hybrid\" | \"internal\" | \"nfc\" | \"usb\")[];\n  type: \"public-key\";\n}\n\n/**\n * Parameters for {@link Fido2AuthenticatorService.makeCredential}\n *\n * This interface represents the input parameters described in\n * https://www.w3.org/TR/webauthn-3/#sctn-op-make-cred\n */\nexport interface Fido2AuthenticatorMakeCredentialsParams {\n  /** The hash of the serialized client data, provided by the client. */\n  hash: BufferSource;\n  /** The Relying Party's PublicKeyCredentialRpEntity. */\n  rpEntity: {\n    name: string;\n    id?: string;\n  };\n  /** The user account’s PublicKeyCredentialUserEntity, containing the user handle given by the Relying Party. */\n  userEntity: {\n    id: BufferSource;\n    name?: string;\n    displayName?: string;\n    icon?: string;\n  };\n  /** A sequence of pairs of PublicKeyCredentialType and public key algorithms (COSEAlgorithmIdentifier) requested by the Relying Party. This sequence is ordered from most preferred to least preferred. The authenticator makes a best-effort to create the most preferred credential that it can. */\n  credTypesAndPubKeyAlgs: {\n    alg: number;\n    type: \"public-key\"; // not used\n  }[];\n  /** An OPTIONAL list of PublicKeyCredentialDescriptor objects provided by the Relying Party with the intention that, if any of these are known to the authenticator, it SHOULD NOT create a new credential. excludeCredentialDescriptorList contains a list of known credentials. */\n  excludeCredentialDescriptorList?: PublicKeyCredentialDescriptor[];\n  /** A map from extension identifiers to their authenticator extension inputs, created by the client based on the extensions requested by the Relying Party, if any. */\n  extensions?: {\n    appid?: string;\n    appidExclude?: string;\n    credProps?: boolean;\n    uvm?: boolean;\n  };\n  /** A Boolean value that indicates that individually-identifying attestation MAY be returned by the authenticator. */\n  enterpriseAttestationPossible?: boolean; // Ignored by bitwarden at the moment\n  /** The effective resident key requirement for credential creation, a Boolean value determined by the client. Resident is synonymous with discoverable. */\n  requireResidentKey: boolean;\n  requireUserVerification: boolean;\n  /** Forwarded to user interface */\n  fallbackSupported: boolean;\n  /** The constant Boolean value true. It is included here as a pseudo-parameter to simplify applying this abstract authenticator model to implementations that may wish to make a test of user presence optional although WebAuthn does not. */\n  // requireUserPresence: true; // Always required\n}\n\nexport interface Fido2AuthenticatorMakeCredentialResult {\n  credentialId: BufferSource;\n  attestationObject: BufferSource;\n  authData: BufferSource;\n  publicKey: BufferSource;\n  publicKeyAlgorithm: number;\n}\n\n/**\n * Parameters for {@link Fido2AuthenticatorService.getAssertion}\n\n * This interface represents the input parameters described in\n * https://www.w3.org/TR/webauthn-3/#sctn-op-get-assertion\n */\nexport interface Fido2AuthenticatorGetAssertionParams {\n  /** The caller’s RP ID, as determined by the user agent and the client. */\n  rpId: string;\n  /** The hash of the serialized client data, provided by the client. */\n  hash: BufferSource;\n  allowCredentialDescriptorList: PublicKeyCredentialDescriptor[];\n  /** The effective user verification requirement for assertion, a Boolean value provided by the client. */\n  requireUserVerification: boolean;\n  /** The constant Boolean value true. It is included here as a pseudo-parameter to simplify applying this abstract authenticator model to implementations that may wish to make a test of user presence optional although WebAuthn does not. */\n  // requireUserPresence: boolean; // Always required\n  extensions: unknown;\n  /** Forwarded to user interface */\n  fallbackSupported: boolean;\n\n  // Bypass the UI and assume that the user has already interacted with the authenticator\n  assumeUserPresence?: boolean;\n}\n\nexport interface Fido2AuthenticatorGetAssertionResult {\n  selectedCredential: {\n    id: Uint8Array;\n    userHandle?: Uint8Array;\n  };\n  authenticatorData: Uint8Array;\n  signature: Uint8Array;\n}\n","import {\n  BehaviorSubject,\n  distinctUntilChanged,\n  firstValueFrom,\n  map,\n  Observable,\n  shareReplay,\n  startWith,\n  Subject,\n} from \"rxjs\";\n\nimport { Fido2CredentialView } from \"../../../vault/models/view/fido2-credential.view\";\nimport {\n  ActiveRequest,\n  RequestCollection,\n  Fido2ActiveRequestManager as Fido2ActiveRequestManagerAbstraction,\n  Fido2ActiveRequestEvents,\n  RequestResult,\n} from \"../../abstractions/fido2/fido2-active-request-manager.abstraction\";\n\nexport class Fido2ActiveRequestManager implements Fido2ActiveRequestManagerAbstraction {\n  private activeRequests$: BehaviorSubject<RequestCollection> = new BehaviorSubject({});\n\n  /**\n   * Gets the observable stream of all active requests associated with a given tab id.\n   *\n   * @param tabId - The tab id to get the active request for.\n   */\n  getActiveRequest$(tabId: number): Observable<ActiveRequest | undefined> {\n    return this.activeRequests$.pipe(\n      map((requests) => requests[tabId]),\n      distinctUntilChanged(),\n      shareReplay({ bufferSize: 1, refCount: true }),\n      startWith(undefined),\n    );\n  }\n\n  /**\n   * Gets the active request associated with a given tab id.\n   *\n   * @param tabId - The tab id to get the active request for.\n   */\n  getActiveRequest(tabId: number): ActiveRequest | undefined {\n    return this.activeRequests$.value[tabId];\n  }\n\n  /**\n   * Creates a new active fido2 request.\n   *\n   * @param tabId - The tab id to associate the request with.\n   * @param credentials - The credentials to use for the request.\n   * @param abortController - The abort controller to use for the request.\n   */\n  async newActiveRequest(\n    tabId: number,\n    credentials: Fido2CredentialView[],\n    abortController: AbortController,\n  ): Promise<RequestResult> {\n    const newRequest: ActiveRequest = {\n      credentials,\n      subject: new Subject(),\n    };\n    this.updateRequests((existingRequests) => ({\n      ...existingRequests,\n      [tabId]: newRequest,\n    }));\n\n    const abortListener = () => this.abortActiveRequest(tabId);\n    abortController.signal.addEventListener(\"abort\", abortListener);\n    const requestResult = firstValueFrom(newRequest.subject);\n    abortController.signal.removeEventListener(\"abort\", abortListener);\n\n    return requestResult;\n  }\n\n  /**\n   * Removes and aborts the active request associated with a given tab id.\n   *\n   * @param tabId - The tab id to abort the active request for.\n   */\n  removeActiveRequest(tabId: number) {\n    this.abortActiveRequest(tabId);\n    this.updateRequests((existingRequests) => {\n      const newRequests = { ...existingRequests };\n      delete newRequests[tabId];\n      return newRequests;\n    });\n  }\n\n  /**\n   * Removes and aborts all active requests.\n   */\n  removeAllActiveRequests() {\n    Object.keys(this.activeRequests$.value).forEach((tabId) => {\n      this.abortActiveRequest(Number(tabId));\n    });\n    this.updateRequests(() => ({}));\n  }\n\n  /**\n   * Aborts the active request associated with a given tab id.\n   *\n   * @param tabId - The tab id to abort the active request for.\n   */\n  private abortActiveRequest(tabId: number): void {\n    this.activeRequests$.value[tabId]?.subject.next({ type: Fido2ActiveRequestEvents.Abort });\n    this.activeRequests$.value[tabId]?.subject.error(\n      new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\"),\n    );\n  }\n\n  /**\n   * Updates the active requests.\n   *\n   * @param updateFunction - The function to use to update the active requests.\n   */\n  private updateRequests(\n    updateFunction: (existingRequests: RequestCollection) => RequestCollection,\n  ) {\n    this.activeRequests$.next(updateFunction(this.activeRequests$.value));\n  }\n}\n","/**\nThe MIT License (MIT)\n\nCopyright (c) 2014-2016 Patrick Gansterer <paroga@paroga.com>\nCopyright (c) 2020-present Aaron Huggins <ahuggins@aaronhuggins.com>\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\nExported from GitHub release version 0.4.0\n*/\n\n/* eslint-disable */\n/** @hidden */\nconst POW_2_24 = 5.960464477539063e-8;\n/** @hidden */\nconst POW_2_32 = 4294967296;\n/** @hidden */\nconst POW_2_53 = 9007199254740992;\n/** @hidden */\nconst DECODE_CHUNK_SIZE = 8192;\n\n/** @hidden */\nfunction objectIs(x: any, y: any) {\n  if (typeof Object.is === \"function\") return Object.is(x, y);\n\n  // SameValue algorithm\n  // Steps 1-5, 7-10\n  if (x === y) {\n    // Steps 6.b-6.e: +0 != -0\n    return x !== 0 || 1 / x === 1 / y;\n  }\n\n  // Step 6.a: NaN == NaN\n  return x !== x && y !== y;\n}\n\n/** A function that extracts tagged values. */\ntype TaggedValueFunction = (value: any, tag: number) => TaggedValue;\n/** A function that extracts simple values. */\ntype SimpleValueFunction = (value: any) => SimpleValue;\n\n/** Convenience class for structuring a tagged value. */\nexport class TaggedValue {\n  constructor(value: any, tag: number) {\n    this.value = value;\n    this.tag = tag;\n  }\n\n  value: any;\n  tag: number;\n}\n\n/** Convenience class for structuring a simple value. */\nexport class SimpleValue {\n  constructor(value: any) {\n    this.value = value;\n  }\n\n  value: any;\n}\n\n/**\n * Converts a Concise Binary Object Representation (CBOR) buffer into an object.\n * @param {ArrayBuffer|SharedArrayBuffer} data - A valid CBOR buffer.\n * @param {Function} [tagger] - A function that extracts tagged values. This function is called for each member of the object.\n * @param {Function} [simpleValue] - A function that extracts simple values. This function is called for each member of the object.\n * @returns {any} The CBOR buffer converted to a JavaScript value.\n */\nexport function decode<T = any>(\n  data: ArrayBuffer | SharedArrayBuffer,\n  tagger?: TaggedValueFunction,\n  simpleValue?: SimpleValueFunction,\n): T {\n  let dataView = new DataView(data);\n  let ta = new Uint8Array(data);\n  let offset = 0;\n  let tagValueFunction: TaggedValueFunction = function (value: number, tag: number): any {\n    return new TaggedValue(value, tag);\n  };\n  let simpleValFunction: SimpleValueFunction = function (value: number): SimpleValue {\n    return undefined as unknown as SimpleValue;\n  };\n\n  if (typeof tagger === \"function\") tagValueFunction = tagger;\n  if (typeof simpleValue === \"function\") simpleValFunction = simpleValue;\n\n  function commitRead<T>(length: number, value: T): T {\n    offset += length;\n    return value;\n  }\n  function readArrayBuffer(length: number) {\n    return commitRead(length, new Uint8Array(data, offset, length));\n  }\n  function readFloat16() {\n    let tempArrayBuffer = new ArrayBuffer(4);\n    let tempDataView = new DataView(tempArrayBuffer);\n    let value = readUint16();\n\n    let sign = value & 0x8000;\n    let exponent = value & 0x7c00;\n    let fraction = value & 0x03ff;\n\n    if (exponent === 0x7c00) exponent = 0xff << 10;\n    else if (exponent !== 0) exponent += (127 - 15) << 10;\n    else if (fraction !== 0) return (sign ? -1 : 1) * fraction * POW_2_24;\n\n    tempDataView.setUint32(0, (sign << 16) | (exponent << 13) | (fraction << 13));\n    return tempDataView.getFloat32(0);\n  }\n  function readFloat32(): number {\n    return commitRead(4, dataView.getFloat32(offset));\n  }\n  function readFloat64(): number {\n    return commitRead(8, dataView.getFloat64(offset));\n  }\n  function readUint8(): number {\n    return commitRead(1, ta[offset]);\n  }\n  function readUint16(): number {\n    return commitRead(2, dataView.getUint16(offset));\n  }\n  function readUint32(): number {\n    return commitRead(4, dataView.getUint32(offset));\n  }\n  function readUint64(): number {\n    return readUint32() * POW_2_32 + readUint32();\n  }\n  function readBreak(): boolean {\n    if (ta[offset] !== 0xff) return false;\n    offset += 1;\n    return true;\n  }\n  function readLength(additionalInformation: number): number {\n    if (additionalInformation < 24) return additionalInformation;\n    if (additionalInformation === 24) return readUint8();\n    if (additionalInformation === 25) return readUint16();\n    if (additionalInformation === 26) return readUint32();\n    if (additionalInformation === 27) return readUint64();\n    if (additionalInformation === 31) return -1;\n    throw new Error(\"Invalid length encoding\");\n  }\n  function readIndefiniteStringLength(majorType: number): number {\n    let initialByte = readUint8();\n    if (initialByte === 0xff) return -1;\n    let length = readLength(initialByte & 0x1f);\n    if (length < 0 || initialByte >> 5 !== majorType)\n      throw new Error(\"Invalid indefinite length element\");\n    return length;\n  }\n\n  function appendUtf16Data(utf16data: number[], length: number) {\n    for (let i = 0; i < length; ++i) {\n      let value = readUint8();\n      if (value & 0x80) {\n        if (value < 0xe0) {\n          value = ((value & 0x1f) << 6) | (readUint8() & 0x3f);\n          length -= 1;\n        } else if (value < 0xf0) {\n          value = ((value & 0x0f) << 12) | ((readUint8() & 0x3f) << 6) | (readUint8() & 0x3f);\n          length -= 2;\n        } else {\n          value =\n            ((value & 0x0f) << 18) |\n            ((readUint8() & 0x3f) << 12) |\n            ((readUint8() & 0x3f) << 6) |\n            (readUint8() & 0x3f);\n          length -= 3;\n        }\n      }\n\n      if (value < 0x10000) {\n        utf16data.push(value);\n      } else {\n        value -= 0x10000;\n        utf16data.push(0xd800 | (value >> 10));\n        utf16data.push(0xdc00 | (value & 0x3ff));\n      }\n    }\n  }\n\n  function decodeItem(): any {\n    let initialByte = readUint8();\n    let majorType = initialByte >> 5;\n    let additionalInformation = initialByte & 0x1f;\n    let i;\n    let length;\n\n    if (majorType === 7) {\n      switch (additionalInformation) {\n        case 25:\n          return readFloat16();\n        case 26:\n          return readFloat32();\n        case 27:\n          return readFloat64();\n      }\n    }\n\n    length = readLength(additionalInformation);\n    if (length < 0 && (majorType < 2 || 6 < majorType)) throw new Error(\"Invalid length\");\n\n    switch (majorType) {\n      case 0:\n        return length;\n      case 1:\n        return -1 - length;\n      case 2:\n        if (length < 0) {\n          let elements = [];\n          let fullArrayLength = 0;\n          while ((length = readIndefiniteStringLength(majorType)) >= 0) {\n            fullArrayLength += length;\n            elements.push(readArrayBuffer(length));\n          }\n          let fullArray = new Uint8Array(fullArrayLength);\n          let fullArrayOffset = 0;\n          for (i = 0; i < elements.length; ++i) {\n            fullArray.set(elements[i], fullArrayOffset);\n            fullArrayOffset += elements[i].length;\n          }\n          return fullArray;\n        }\n        return readArrayBuffer(length);\n      case 3:\n        let utf16data: number[] = [];\n        if (length < 0) {\n          while ((length = readIndefiniteStringLength(majorType)) >= 0)\n            appendUtf16Data(utf16data, length);\n        } else {\n          appendUtf16Data(utf16data, length);\n        }\n        let string = \"\";\n        for (i = 0; i < utf16data.length; i += DECODE_CHUNK_SIZE) {\n          string += String.fromCharCode.apply(null, utf16data.slice(i, i + DECODE_CHUNK_SIZE));\n        }\n        return string;\n      case 4:\n        let retArray;\n        if (length < 0) {\n          retArray = [];\n          while (!readBreak()) retArray.push(decodeItem());\n        } else {\n          retArray = new Array(length);\n          for (i = 0; i < length; ++i) retArray[i] = decodeItem();\n        }\n        return retArray;\n      case 5:\n        let retObject: any = {};\n        for (i = 0; i < length || (length < 0 && !readBreak()); ++i) {\n          let key = decodeItem();\n          retObject[key] = decodeItem();\n        }\n        return retObject;\n      case 6:\n        return tagValueFunction(decodeItem(), length);\n      case 7:\n        switch (length) {\n          case 20:\n            return false;\n          case 21:\n            return true;\n          case 22:\n            return null;\n          case 23:\n            return undefined;\n          default:\n            return simpleValFunction(length);\n        }\n    }\n  }\n\n  let ret = decodeItem();\n  if (offset !== data.byteLength) throw new Error(\"Remaining bytes\");\n  return ret;\n}\n\n/**\n * Converts a JavaScript value to a Concise Binary Object Representation (CBOR) buffer.\n * @param {any} value - A JavaScript value, usually an object or array, to be converted.\n * @returns {ArrayBuffer} The JavaScript value converted to CBOR format.\n */\nexport function encode<T = any>(value: T): ArrayBuffer {\n  let data = new ArrayBuffer(256);\n  let dataView = new DataView(data);\n  let byteView = new Uint8Array(data);\n  let lastLength: number;\n  let offset = 0;\n\n  function prepareWrite(length: number): DataView {\n    let newByteLength = data.byteLength;\n    let requiredLength = offset + length;\n    while (newByteLength < requiredLength) newByteLength <<= 1;\n    if (newByteLength !== data.byteLength) {\n      let oldDataView = dataView;\n      data = new ArrayBuffer(newByteLength);\n      dataView = new DataView(data);\n      byteView = new Uint8Array(data);\n      let uint32count = (offset + 3) >> 2;\n      for (let i = 0; i < uint32count; ++i)\n        dataView.setUint32(i << 2, oldDataView.getUint32(i << 2));\n    }\n\n    lastLength = length;\n    return dataView;\n  }\n  function commitWrite(...args: any[]) {\n    offset += lastLength;\n  }\n  function writeFloat64(val: number) {\n    commitWrite(prepareWrite(8).setFloat64(offset, val));\n  }\n  function writeUint8(val: number) {\n    commitWrite(prepareWrite(1).setUint8(offset, val));\n  }\n  function writeUint8Array(val: number[] | Uint8Array) {\n    prepareWrite(val.length);\n    byteView.set(val, offset);\n    commitWrite();\n  }\n  function writeUint16(val: number) {\n    commitWrite(prepareWrite(2).setUint16(offset, val));\n  }\n  function writeUint32(val: number) {\n    commitWrite(prepareWrite(4).setUint32(offset, val));\n  }\n  function writeUint64(val: number) {\n    let low = val % POW_2_32;\n    let high = (val - low) / POW_2_32;\n    let view = prepareWrite(8);\n    view.setUint32(offset, high);\n    view.setUint32(offset + 4, low);\n    commitWrite();\n  }\n  function writeVarUint(val: number, mod: number = 0) {\n    if (val <= 0xff) {\n      if (val < 24) {\n        writeUint8(val | mod);\n      } else {\n        writeUint8(0x18 | mod);\n        writeUint8(val);\n      }\n    } else if (val <= 0xffff) {\n      writeUint8(0x19 | mod);\n      writeUint16(val);\n    } else if (val <= 0xffffffff) {\n      writeUint8(0x1a | mod);\n      writeUint32(val);\n    } else {\n      writeUint8(0x1b | mod);\n      writeUint64(val);\n    }\n  }\n  function writeTypeAndLength(type: number, length: number) {\n    if (length < 24) {\n      writeUint8((type << 5) | length);\n    } else if (length < 0x100) {\n      writeUint8((type << 5) | 24);\n      writeUint8(length);\n    } else if (length < 0x10000) {\n      writeUint8((type << 5) | 25);\n      writeUint16(length);\n    } else if (length < 0x100000000) {\n      writeUint8((type << 5) | 26);\n      writeUint32(length);\n    } else {\n      writeUint8((type << 5) | 27);\n      writeUint64(length);\n    }\n  }\n\n  function encodeItem(val: any) {\n    let i;\n\n    if (val === false) return writeUint8(0xf4);\n    if (val === true) return writeUint8(0xf5);\n    if (val === null) return writeUint8(0xf6);\n    if (val === undefined) return writeUint8(0xf7);\n    if (objectIs(val, -0)) return writeUint8Array([0xf9, 0x80, 0x00]);\n\n    switch (typeof val) {\n      case \"number\":\n        if (Math.floor(val) === val) {\n          if (0 <= val && val <= POW_2_53) return writeTypeAndLength(0, val);\n          if (-POW_2_53 <= val && val < 0) return writeTypeAndLength(1, -(val + 1));\n        }\n        writeUint8(0xfb);\n        return writeFloat64(val);\n\n      case \"string\":\n        let utf8data = [];\n        for (i = 0; i < val.length; ++i) {\n          let charCode = val.charCodeAt(i);\n          if (charCode < 0x80) {\n            utf8data.push(charCode);\n          } else if (charCode < 0x800) {\n            utf8data.push(0xc0 | (charCode >> 6));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          } else if (charCode < 0xd800 || charCode >= 0xe000) {\n            utf8data.push(0xe0 | (charCode >> 12));\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          } else {\n            charCode = (charCode & 0x3ff) << 10;\n            charCode |= val.charCodeAt(++i) & 0x3ff;\n            charCode += 0x10000;\n\n            utf8data.push(0xf0 | (charCode >> 18));\n            utf8data.push(0x80 | ((charCode >> 12) & 0x3f));\n            utf8data.push(0x80 | ((charCode >> 6) & 0x3f));\n            utf8data.push(0x80 | (charCode & 0x3f));\n          }\n        }\n\n        writeTypeAndLength(3, utf8data.length);\n        return writeUint8Array(utf8data);\n\n      default:\n        let length;\n        let converted;\n        if (Array.isArray(val)) {\n          length = val.length;\n          writeTypeAndLength(4, length);\n          for (i = 0; i < length; i += 1) encodeItem(val[i]);\n        } else if (val instanceof Uint8Array) {\n          writeTypeAndLength(2, val.length);\n          writeUint8Array(val);\n        } else if (ArrayBuffer.isView(val)) {\n          converted = new Uint8Array(val.buffer);\n          writeTypeAndLength(2, converted.length);\n          writeUint8Array(converted);\n        } else if (\n          val instanceof ArrayBuffer ||\n          (typeof SharedArrayBuffer === \"function\" && val instanceof SharedArrayBuffer)\n        ) {\n          converted = new Uint8Array(val);\n          writeTypeAndLength(2, converted.length);\n          writeUint8Array(converted);\n        } else if (val instanceof TaggedValue) {\n          writeVarUint(val.tag, 0b11000000);\n          encodeItem(val.value);\n        } else {\n          let keys = Object.keys(val);\n          length = keys.length;\n          writeTypeAndLength(5, length);\n          for (i = 0; i < length; i += 1) {\n            let key = keys[i];\n            encodeItem(key);\n            encodeItem(val[key]);\n          }\n        }\n    }\n  }\n\n  encodeItem(value);\n\n  if (\"slice\" in data) return data.slice(0, offset);\n\n  let ret = new ArrayBuffer(offset);\n  let retView = new DataView(ret);\n  for (let i = 0; i < offset; ++i) retView.setUint8(i, dataView.getUint8(i));\n  return ret;\n}\n\n/**\n * An intrinsic object that provides functions to convert JavaScript values\n * to and from the Concise Binary Object Representation (CBOR) format.\n */\nexport const CBOR: {\n  decode: <T = any>(\n    data: ArrayBuffer | SharedArrayBuffer,\n    tagger?: TaggedValueFunction,\n    simpleValue?: SimpleValueFunction,\n  ) => T;\n  encode: <T = any>(value: T) => ArrayBuffer;\n} = {\n  decode,\n  encode,\n};\n","/*\n   Copyright 2015 D2L Corporation\n\n   Licensed under the Apache License, Version 2.0 (the \"License\");\n   you may not use this file except in compliance with the License.\n   You may obtain a copy of the License at\n\n       http://www.apache.org/licenses/LICENSE-2.0\n\n   Unless required by applicable law or agreed to in writing, software\n   distributed under the License is distributed on an \"AS IS\" BASIS,\n   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n   See the License for the specific language governing permissions and\n   limitations under the License. */\n\n// Changes:\n// - Cherry-pick the methods that we have a need for.\n// - Add typings.\n// - Original code is made for running in node, this version is adapted to work in the browser.\n\n// https://github.com/Brightspace/node-ecdsa-sig-formatter/blob/master/src/param-bytes-for-alg.js\n\nfunction getParamSize(keySize: number) {\n  const result = ((keySize / 8) | 0) + (keySize % 8 === 0 ? 0 : 1);\n  return result;\n}\n\nconst paramBytesForAlg = {\n  ES256: getParamSize(256),\n  ES384: getParamSize(384),\n  ES512: getParamSize(521),\n};\n\ntype Alg = keyof typeof paramBytesForAlg;\n\nfunction getParamBytesForAlg(alg: Alg) {\n  const paramBytes = paramBytesForAlg[alg];\n  if (paramBytes) {\n    return paramBytes;\n  }\n\n  throw new Error('Unknown algorithm \"' + alg + '\"');\n}\n\n// https://github.com/Brightspace/node-ecdsa-sig-formatter/blob/master/src/ecdsa-sig-formatter.js\n\nconst MAX_OCTET = 0x80,\n  CLASS_UNIVERSAL = 0,\n  PRIMITIVE_BIT = 0x20,\n  TAG_SEQ = 0x10,\n  TAG_INT = 0x02,\n  ENCODED_TAG_SEQ = TAG_SEQ | PRIMITIVE_BIT | (CLASS_UNIVERSAL << 6),\n  ENCODED_TAG_INT = TAG_INT | (CLASS_UNIVERSAL << 6);\n\n// Counts leading zeros and determines if there's a need for 0x00 padding\nfunction countPadding(\n  buf: Uint8Array,\n  start: number,\n  end: number,\n): { padding: number; needs0x00: boolean } {\n  let padding = 0;\n  while (start + padding < end && buf[start + padding] === 0) {\n    padding++;\n  }\n\n  const needs0x00 = (buf[start + padding] & MAX_OCTET) === MAX_OCTET;\n  return { padding, needs0x00 };\n}\n\nexport function p1363ToDer(signature: Uint8Array) {\n  const alg = \"ES256\";\n  const paramBytes = getParamBytesForAlg(alg);\n\n  const signatureBytes = signature.length;\n  if (signatureBytes !== paramBytes * 2) {\n    throw new TypeError(\n      '\"' +\n        alg +\n        '\" signatures must be \"' +\n        paramBytes * 2 +\n        '\" bytes, saw \"' +\n        signatureBytes +\n        '\"',\n    );\n  }\n\n  const { padding: rPadding, needs0x00: rNeeds0x00 } = countPadding(signature, 0, paramBytes);\n  const { padding: sPadding, needs0x00: sNeeds0x00 } = countPadding(\n    signature,\n    paramBytes,\n    signature.length,\n  );\n\n  const rActualLength = paramBytes - rPadding;\n  const sActualLength = paramBytes - sPadding;\n\n  const rLength = rActualLength + (rNeeds0x00 ? 1 : 0);\n  const sLength = sActualLength + (sNeeds0x00 ? 1 : 0);\n\n  const rsBytes = 2 + rLength + 2 + sLength;\n\n  const shortLength = rsBytes < MAX_OCTET;\n\n  const dst = new Uint8Array((shortLength ? 2 : 3) + rsBytes);\n\n  let offset = 0;\n  dst[offset++] = ENCODED_TAG_SEQ;\n  if (shortLength) {\n    dst[offset++] = rsBytes;\n  } else {\n    dst[offset++] = MAX_OCTET | 1;\n    dst[offset++] = rsBytes & 0xff;\n  }\n\n  // Encoding 'R' component\n  dst[offset++] = ENCODED_TAG_INT;\n  dst[offset++] = rLength;\n  if (rNeeds0x00) {\n    dst[offset++] = 0;\n  }\n  dst.set(signature.subarray(rPadding, rPadding + rActualLength), offset);\n  offset += rActualLength;\n\n  // Encoding 'S' component\n  dst[offset++] = ENCODED_TAG_INT;\n  dst[offset++] = sLength;\n  if (sNeeds0x00) {\n    dst[offset++] = 0;\n  }\n  dst.set(signature.subarray(paramBytes + sPadding, paramBytes + sPadding + sActualLength), offset);\n\n  return dst;\n}\n","export class Fido2Utils {\n  static bufferToString(bufferSource: BufferSource): string {\n    let buffer: Uint8Array;\n    if (bufferSource instanceof ArrayBuffer || bufferSource.buffer === undefined) {\n      buffer = new Uint8Array(bufferSource as ArrayBuffer);\n    } else {\n      buffer = new Uint8Array(bufferSource.buffer);\n    }\n\n    return Fido2Utils.fromBufferToB64(buffer)\n      .replace(/\\+/g, \"-\")\n      .replace(/\\//g, \"_\")\n      .replace(/=/g, \"\");\n  }\n\n  static stringToBuffer(str: string): Uint8Array {\n    return Fido2Utils.fromB64ToArray(Fido2Utils.fromUrlB64ToB64(str));\n  }\n\n  static bufferSourceToUint8Array(bufferSource: BufferSource) {\n    if (Fido2Utils.isArrayBuffer(bufferSource)) {\n      return new Uint8Array(bufferSource);\n    } else {\n      return new Uint8Array(bufferSource.buffer);\n    }\n  }\n\n  /** Utility function to identify type of bufferSource. Necessary because of differences between runtimes */\n  private static isArrayBuffer(bufferSource: BufferSource): bufferSource is ArrayBuffer {\n    return bufferSource instanceof ArrayBuffer || bufferSource.buffer === undefined;\n  }\n\n  static fromB64toUrlB64(b64Str: string) {\n    return b64Str.replace(/\\+/g, \"-\").replace(/\\//g, \"_\").replace(/=/g, \"\");\n  }\n\n  static fromBufferToB64(buffer: ArrayBuffer): string {\n    if (buffer == null) {\n      return null;\n    }\n\n    let binary = \"\";\n    const bytes = new Uint8Array(buffer);\n    for (let i = 0; i < bytes.byteLength; i++) {\n      binary += String.fromCharCode(bytes[i]);\n    }\n    return globalThis.btoa(binary);\n  }\n\n  static fromB64ToArray(str: string): Uint8Array {\n    if (str == null) {\n      return null;\n    }\n\n    const binaryString = globalThis.atob(str);\n    const bytes = new Uint8Array(binaryString.length);\n    for (let i = 0; i < binaryString.length; i++) {\n      bytes[i] = binaryString.charCodeAt(i);\n    }\n    return bytes;\n  }\n\n  static fromUrlB64ToB64(urlB64Str: string): string {\n    let output = urlB64Str.replace(/-/g, \"+\").replace(/_/g, \"/\");\n    switch (output.length % 4) {\n      case 0:\n        break;\n      case 2:\n        output += \"==\";\n        break;\n      case 3:\n        output += \"=\";\n        break;\n      default:\n        throw new Error(\"Illegal base64url string!\");\n    }\n\n    return output;\n  }\n}\n","/*\n  License for: guidToRawFormat, guidToStandardFormat\n  Source: https://github.com/uuidjs/uuid/\n  The MIT License (MIT)\n  Copyright (c) 2010-2020 Robert Kieffer and other contributors\n  Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n  The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n  THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.*/\n\n/** Private array used for optimization */\nconst byteToHex = Array.from({ length: 256 }, (_, i) => (i + 0x100).toString(16).substring(1));\n\n/** Convert standard format (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX) UUID to raw 16 byte array. */\nexport function guidToRawFormat(guid: string) {\n  if (!isValidGuid(guid)) {\n    throw TypeError(\"GUID parameter is invalid\");\n  }\n\n  let v;\n  const arr = new Uint8Array(16);\n\n  // Parse ########-....-....-....-............\n  arr[0] = (v = parseInt(guid.slice(0, 8), 16)) >>> 24;\n  arr[1] = (v >>> 16) & 0xff;\n  arr[2] = (v >>> 8) & 0xff;\n  arr[3] = v & 0xff;\n\n  // Parse ........-####-....-....-............\n  arr[4] = (v = parseInt(guid.slice(9, 13), 16)) >>> 8;\n  arr[5] = v & 0xff;\n\n  // Parse ........-....-####-....-............\n  arr[6] = (v = parseInt(guid.slice(14, 18), 16)) >>> 8;\n  arr[7] = v & 0xff;\n\n  // Parse ........-....-....-####-............\n  arr[8] = (v = parseInt(guid.slice(19, 23), 16)) >>> 8;\n  arr[9] = v & 0xff;\n\n  // Parse ........-....-....-....-############\n  // (Use \"/\" to avoid 32-bit truncation when bit-shifting high-order bytes)\n  arr[10] = ((v = parseInt(guid.slice(24, 36), 16)) / 0x10000000000) & 0xff;\n  arr[11] = (v / 0x100000000) & 0xff;\n  arr[12] = (v >>> 24) & 0xff;\n  arr[13] = (v >>> 16) & 0xff;\n  arr[14] = (v >>> 8) & 0xff;\n  arr[15] = v & 0xff;\n\n  return arr;\n}\n\n/** Convert raw 16 byte array to standard format (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXXXXXX) UUID. */\nexport function guidToStandardFormat(bufferSource: BufferSource) {\n  const arr =\n    bufferSource instanceof ArrayBuffer\n      ? new Uint8Array(bufferSource)\n      : new Uint8Array(bufferSource.buffer);\n  // Note: Be careful editing this code!  It's been tuned for performance\n  // and works in ways you may not expect. See https://github.com/uuidjs/uuid/pull/434\n  const guid = (\n    byteToHex[arr[0]] +\n    byteToHex[arr[1]] +\n    byteToHex[arr[2]] +\n    byteToHex[arr[3]] +\n    \"-\" +\n    byteToHex[arr[4]] +\n    byteToHex[arr[5]] +\n    \"-\" +\n    byteToHex[arr[6]] +\n    byteToHex[arr[7]] +\n    \"-\" +\n    byteToHex[arr[8]] +\n    byteToHex[arr[9]] +\n    \"-\" +\n    byteToHex[arr[10]] +\n    byteToHex[arr[11]] +\n    byteToHex[arr[12]] +\n    byteToHex[arr[13]] +\n    byteToHex[arr[14]] +\n    byteToHex[arr[15]]\n  ).toLowerCase();\n\n  // Consistency check for valid UUID.  If this throws, it's likely due to one\n  // or more input array values not mapping to a hex octet (leading to \"undefined\" in the uuid)\n  if (!isValidGuid(guid)) {\n    throw TypeError(\"Converted GUID is invalid\");\n  }\n\n  return guid;\n}\n\n// Perform format validation, without enforcing any variant restrictions as Utils.isGuid does\nfunction isValidGuid(guid: string): boolean {\n  return RegExp(/^[0-9a-f]{8}-(?:[0-9a-f]{4}-){3}[0-9a-f]{12}$/, \"i\").test(guid);\n}\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { AccountService } from \"../../../auth/abstractions/account.service\";\nimport { CipherService } from \"../../../vault/abstractions/cipher.service\";\nimport { SyncService } from \"../../../vault/abstractions/sync/sync.service.abstraction\";\nimport { CipherRepromptType } from \"../../../vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../../vault/enums/cipher-type\";\nimport { CipherView } from \"../../../vault/models/view/cipher.view\";\nimport { Fido2CredentialView } from \"../../../vault/models/view/fido2-credential.view\";\nimport {\n  Fido2AlgorithmIdentifier,\n  Fido2AuthenticatorError,\n  Fido2AuthenticatorErrorCode,\n  Fido2AuthenticatorGetAssertionParams,\n  Fido2AuthenticatorGetAssertionResult,\n  Fido2AuthenticatorMakeCredentialResult,\n  Fido2AuthenticatorMakeCredentialsParams,\n  Fido2AuthenticatorService as Fido2AuthenticatorServiceAbstraction,\n  PublicKeyCredentialDescriptor,\n} from \"../../abstractions/fido2/fido2-authenticator.service.abstraction\";\nimport { Fido2UserInterfaceService } from \"../../abstractions/fido2/fido2-user-interface.service.abstraction\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { Utils } from \"../../misc/utils\";\n\nimport { CBOR } from \"./cbor\";\nimport { p1363ToDer } from \"./ecdsa-utils\";\nimport { Fido2Utils } from \"./fido2-utils\";\nimport { guidToRawFormat, guidToStandardFormat } from \"./guid-utils\";\n\n// AAGUID: d548826e-79b4-db40-a3d8-11116f7e8349\nexport const AAGUID = new Uint8Array([\n  0xd5, 0x48, 0x82, 0x6e, 0x79, 0xb4, 0xdb, 0x40, 0xa3, 0xd8, 0x11, 0x11, 0x6f, 0x7e, 0x83, 0x49,\n]);\n\nconst KeyUsages: KeyUsage[] = [\"sign\"];\n\n/**\n * Bitwarden implementation of the WebAuthn Authenticator Model as described by W3C\n * https://www.w3.org/TR/webauthn-3/#sctn-authenticator-model\n *\n * It is highly recommended that the W3C specification is used a reference when reading this code.\n */\nexport class Fido2AuthenticatorService implements Fido2AuthenticatorServiceAbstraction {\n  constructor(\n    private cipherService: CipherService,\n    private userInterface: Fido2UserInterfaceService,\n    private syncService: SyncService,\n    private accountService: AccountService,\n    private logService?: LogService,\n  ) {}\n\n  async makeCredential(\n    params: Fido2AuthenticatorMakeCredentialsParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ): Promise<Fido2AuthenticatorMakeCredentialResult> {\n    const userInterfaceSession = await this.userInterface.newSession(\n      params.fallbackSupported,\n      tab,\n      abortController,\n    );\n\n    try {\n      if (params.credTypesAndPubKeyAlgs.every((p) => p.alg !== Fido2AlgorithmIdentifier.ES256)) {\n        const requestedAlgorithms = params.credTypesAndPubKeyAlgs.map((p) => p.alg).join(\", \");\n        this.logService?.warning(\n          `[Fido2Authenticator] No compatible algorithms found, RP requested: ${requestedAlgorithms}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotSupported);\n      }\n\n      if (\n        params.requireResidentKey != undefined &&\n        typeof params.requireResidentKey !== \"boolean\"\n      ) {\n        this.logService?.error(\n          `[Fido2Authenticator] Invalid 'requireResidentKey' value: ${String(\n            params.requireResidentKey,\n          )}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      if (\n        params.requireUserVerification != undefined &&\n        typeof params.requireUserVerification !== \"boolean\"\n      ) {\n        this.logService?.error(\n          `[Fido2Authenticator] Invalid 'requireUserVerification' value: ${String(\n            params.requireUserVerification,\n          )}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      await userInterfaceSession.ensureUnlockedVault();\n      await this.syncService.fullSync(false);\n\n      const existingCipherIds = await this.findExcludedCredentials(\n        params.excludeCredentialDescriptorList,\n      );\n      if (existingCipherIds.length > 0) {\n        this.logService?.info(\n          `[Fido2Authenticator] Aborting due to excluded credential found in vault.`,\n        );\n        await userInterfaceSession.informExcludedCredential(existingCipherIds);\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      let cipher: CipherView;\n      let fido2Credential: Fido2CredentialView;\n      let keyPair: CryptoKeyPair;\n      let userVerified = false;\n      let credentialId: string;\n      let pubKeyDer: ArrayBuffer;\n      const response = await userInterfaceSession.confirmNewCredential({\n        credentialName: params.rpEntity.name,\n        userName: params.userEntity.name,\n        userHandle: Fido2Utils.bufferToString(params.userEntity.id),\n        userVerification: params.requireUserVerification,\n        rpId: params.rpEntity.id,\n      });\n      const cipherId = response.cipherId;\n      userVerified = response.userVerified;\n\n      if (cipherId === undefined) {\n        this.logService?.warning(\n          `[Fido2Authenticator] Aborting because user confirmation was not recieved.`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      try {\n        keyPair = await createKeyPair();\n        pubKeyDer = await crypto.subtle.exportKey(\"spki\", keyPair.publicKey);\n        const encrypted = await this.cipherService.get(cipherId);\n        const activeUserId = await firstValueFrom(\n          this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n        );\n\n        cipher = await encrypted.decrypt(\n          await this.cipherService.getKeyForCipherKeyDecryption(encrypted, activeUserId),\n        );\n\n        if (\n          !userVerified &&\n          (params.requireUserVerification || cipher.reprompt !== CipherRepromptType.None)\n        ) {\n          this.logService?.warning(\n            `[Fido2Authenticator] Aborting because user verification was unsuccessful.`,\n          );\n          throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n        }\n\n        fido2Credential = await createKeyView(params, keyPair.privateKey);\n        cipher.login.fido2Credentials = [fido2Credential];\n        // update username if username is missing\n        if (Utils.isNullOrEmpty(cipher.login.username)) {\n          cipher.login.username = fido2Credential.userName;\n        }\n        const reencrypted = await this.cipherService.encrypt(cipher, activeUserId);\n        await this.cipherService.updateWithServer(reencrypted);\n        await this.cipherService.clearCache(activeUserId);\n        credentialId = fido2Credential.credentialId;\n      } catch (error) {\n        this.logService?.error(\n          `[Fido2Authenticator] Aborting because of unknown error when creating credential: ${error}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      const authData = await generateAuthData({\n        rpId: params.rpEntity.id,\n        credentialId: guidToRawFormat(credentialId),\n        counter: fido2Credential.counter,\n        userPresence: true,\n        userVerification: userVerified,\n        keyPair,\n      });\n      const attestationObject = new Uint8Array(\n        CBOR.encode({\n          fmt: \"none\",\n          attStmt: {},\n          authData,\n        }),\n      );\n\n      return {\n        credentialId: guidToRawFormat(credentialId),\n        attestationObject,\n        authData,\n        publicKey: pubKeyDer,\n        publicKeyAlgorithm: -7,\n      };\n    } finally {\n      userInterfaceSession.close();\n    }\n  }\n\n  async getAssertion(\n    params: Fido2AuthenticatorGetAssertionParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ): Promise<Fido2AuthenticatorGetAssertionResult> {\n    const userInterfaceSession = await this.userInterface.newSession(\n      params.fallbackSupported,\n      tab,\n      abortController,\n    );\n    try {\n      if (\n        params.requireUserVerification != undefined &&\n        typeof params.requireUserVerification !== \"boolean\"\n      ) {\n        this.logService?.error(\n          `[Fido2Authenticator] Invalid 'requireUserVerification' value: ${String(\n            params.requireUserVerification,\n          )}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n\n      let cipherOptions: CipherView[];\n\n      await userInterfaceSession.ensureUnlockedVault();\n      await this.syncService.fullSync(false);\n\n      if (params.allowCredentialDescriptorList?.length > 0) {\n        cipherOptions = await this.findCredentialsById(\n          params.allowCredentialDescriptorList,\n          params.rpId,\n        );\n      } else {\n        cipherOptions = await this.findCredentialsByRp(params.rpId);\n      }\n\n      if (cipherOptions.length === 0) {\n        this.logService?.info(\n          `[Fido2Authenticator] Aborting because no matching credentials were found in the vault.`,\n        );\n\n        await userInterfaceSession.informCredentialNotFound();\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      let response = { cipherId: cipherOptions[0].id, userVerified: false };\n      const masterPasswordRepromptRequired = cipherOptions.some(\n        (cipher) => cipher.reprompt !== CipherRepromptType.None,\n      );\n\n      if (\n        this.requiresUserVerificationPrompt(params, cipherOptions, masterPasswordRepromptRequired)\n      ) {\n        response = await userInterfaceSession.pickCredential({\n          cipherIds: cipherOptions.map((cipher) => cipher.id),\n          userVerification: params.requireUserVerification,\n          assumeUserPresence: params.assumeUserPresence,\n          masterPasswordRepromptRequired,\n        });\n      }\n\n      const selectedCipherId = response.cipherId;\n      const userVerified = response.userVerified;\n      const selectedCipher = cipherOptions.find((c) => c.id === selectedCipherId);\n\n      if (selectedCipher === undefined) {\n        this.logService?.error(\n          `[Fido2Authenticator] Aborting because the selected credential could not be found.`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      if (\n        !userVerified &&\n        (params.requireUserVerification || selectedCipher.reprompt !== CipherRepromptType.None)\n      ) {\n        this.logService?.warning(\n          `[Fido2Authenticator] Aborting because user verification was unsuccessful.`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.NotAllowed);\n      }\n\n      try {\n        const selectedFido2Credential = selectedCipher.login.fido2Credentials[0];\n        const selectedCredentialId = selectedFido2Credential.credentialId;\n\n        if (selectedFido2Credential.counter > 0) {\n          ++selectedFido2Credential.counter;\n        }\n\n        selectedCipher.localData = {\n          ...selectedCipher.localData,\n          lastUsedDate: new Date().getTime(),\n        };\n\n        if (selectedFido2Credential.counter > 0) {\n          const activeUserId = await firstValueFrom(\n            this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n          );\n          const encrypted = await this.cipherService.encrypt(selectedCipher, activeUserId);\n          await this.cipherService.updateWithServer(encrypted);\n          await this.cipherService.clearCache(activeUserId);\n        }\n\n        const authenticatorData = await generateAuthData({\n          rpId: selectedFido2Credential.rpId,\n          credentialId: guidToRawFormat(selectedCredentialId),\n          counter: selectedFido2Credential.counter,\n          userPresence: true,\n          userVerification: userVerified,\n        });\n\n        const signature = await generateSignature({\n          authData: authenticatorData,\n          clientDataHash: params.hash,\n          privateKey: await getPrivateKeyFromFido2Credential(selectedFido2Credential),\n        });\n\n        return {\n          authenticatorData,\n          selectedCredential: {\n            id: guidToRawFormat(selectedCredentialId),\n            userHandle: Fido2Utils.stringToBuffer(selectedFido2Credential.userHandle),\n          },\n          signature,\n        };\n      } catch (error) {\n        this.logService?.error(\n          `[Fido2Authenticator] Aborting because of unknown error when asserting credential: ${error}`,\n        );\n        throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n      }\n    } finally {\n      userInterfaceSession.close();\n    }\n  }\n\n  private requiresUserVerificationPrompt(\n    params: Fido2AuthenticatorGetAssertionParams,\n    cipherOptions: CipherView[],\n    masterPasswordRepromptRequired: boolean,\n  ): boolean {\n    return (\n      params.requireUserVerification ||\n      !params.assumeUserPresence ||\n      cipherOptions.length > 1 ||\n      cipherOptions.length === 0 ||\n      masterPasswordRepromptRequired\n    );\n  }\n\n  async silentCredentialDiscovery(rpId: string): Promise<Fido2CredentialView[]> {\n    const credentials = await this.findCredentialsByRp(rpId);\n    return credentials.map((c) => c.login.fido2Credentials[0]);\n  }\n\n  /** Finds existing crendetials and returns the `cipherId` for each one */\n  private async findExcludedCredentials(\n    credentials: PublicKeyCredentialDescriptor[],\n  ): Promise<string[]> {\n    const ids: string[] = [];\n\n    for (const credential of credentials) {\n      try {\n        ids.push(guidToStandardFormat(credential.id));\n        // eslint-disable-next-line no-empty\n      } catch {}\n    }\n\n    if (ids.length === 0) {\n      return [];\n    }\n\n    const ciphers = await this.cipherService.getAllDecrypted();\n    return ciphers\n      .filter(\n        (cipher) =>\n          !cipher.isDeleted &&\n          cipher.organizationId == undefined &&\n          cipher.type === CipherType.Login &&\n          cipher.login.hasFido2Credentials &&\n          ids.includes(cipher.login.fido2Credentials[0].credentialId),\n      )\n      .map((cipher) => cipher.id);\n  }\n\n  private async findCredentialsById(\n    credentials: PublicKeyCredentialDescriptor[],\n    rpId: string,\n  ): Promise<CipherView[]> {\n    const ids: string[] = [];\n\n    for (const credential of credentials) {\n      try {\n        ids.push(guidToStandardFormat(credential.id));\n        // eslint-disable-next-line no-empty\n      } catch {}\n    }\n\n    if (ids.length === 0) {\n      return [];\n    }\n\n    const ciphers = await this.cipherService.getAllDecrypted();\n    return ciphers.filter(\n      (cipher) =>\n        !cipher.isDeleted &&\n        cipher.type === CipherType.Login &&\n        cipher.login.hasFido2Credentials &&\n        cipher.login.fido2Credentials[0].rpId === rpId &&\n        ids.includes(cipher.login.fido2Credentials[0].credentialId),\n    );\n  }\n\n  private async findCredentialsByRp(rpId: string): Promise<CipherView[]> {\n    const ciphers = await this.cipherService.getAllDecrypted();\n    return ciphers.filter(\n      (cipher) =>\n        !cipher.isDeleted &&\n        cipher.type === CipherType.Login &&\n        cipher.login.hasFido2Credentials &&\n        cipher.login.fido2Credentials[0].rpId === rpId &&\n        cipher.login.fido2Credentials[0].discoverable,\n    );\n  }\n}\n\nasync function createKeyPair() {\n  return await crypto.subtle.generateKey(\n    {\n      name: \"ECDSA\",\n      namedCurve: \"P-256\",\n    },\n    true,\n    KeyUsages,\n  );\n}\n\nasync function createKeyView(\n  params: Fido2AuthenticatorMakeCredentialsParams,\n  keyValue: CryptoKey,\n): Promise<Fido2CredentialView> {\n  if (keyValue.algorithm.name !== \"ECDSA\" && (keyValue.algorithm as any).namedCurve !== \"P-256\") {\n    throw new Fido2AuthenticatorError(Fido2AuthenticatorErrorCode.Unknown);\n  }\n\n  const pkcs8Key = await crypto.subtle.exportKey(\"pkcs8\", keyValue);\n  const fido2Credential = new Fido2CredentialView();\n  fido2Credential.credentialId = Utils.newGuid();\n  fido2Credential.keyType = \"public-key\";\n  fido2Credential.keyAlgorithm = \"ECDSA\";\n  fido2Credential.keyCurve = \"P-256\";\n  fido2Credential.keyValue = Fido2Utils.bufferToString(pkcs8Key);\n  fido2Credential.rpId = params.rpEntity.id;\n  fido2Credential.userHandle = Fido2Utils.bufferToString(params.userEntity.id);\n  fido2Credential.userName = params.userEntity.name;\n  fido2Credential.counter = 0;\n  fido2Credential.rpName = params.rpEntity.name;\n  fido2Credential.userDisplayName = params.userEntity.displayName;\n  fido2Credential.discoverable = params.requireResidentKey;\n  fido2Credential.creationDate = new Date();\n\n  return fido2Credential;\n}\n\nasync function getPrivateKeyFromFido2Credential(\n  fido2Credential: Fido2CredentialView,\n): Promise<CryptoKey> {\n  const keyBuffer = Fido2Utils.stringToBuffer(fido2Credential.keyValue);\n  return await crypto.subtle.importKey(\n    \"pkcs8\",\n    keyBuffer,\n    {\n      name: fido2Credential.keyAlgorithm,\n      namedCurve: fido2Credential.keyCurve,\n    } as EcKeyImportParams,\n    true,\n    KeyUsages,\n  );\n}\n\ninterface AuthDataParams {\n  rpId: string;\n  credentialId: BufferSource;\n  userPresence: boolean;\n  userVerification: boolean;\n  counter: number;\n  keyPair?: CryptoKeyPair;\n}\n\nasync function generateAuthData(params: AuthDataParams) {\n  const authData: Array<number> = [];\n\n  const rpIdHash = new Uint8Array(\n    await crypto.subtle.digest({ name: \"SHA-256\" }, Utils.fromByteStringToArray(params.rpId)),\n  );\n  authData.push(...rpIdHash);\n\n  const flags = authDataFlags({\n    extensionData: false,\n    attestationData: params.keyPair != undefined,\n    backupEligibility: true,\n    backupState: true, // Credentials are always synced\n    userVerification: params.userVerification,\n    userPresence: params.userPresence,\n  });\n  authData.push(flags);\n\n  // add 4 bytes of counter - we use time in epoch seconds as monotonic counter\n  // TODO: Consider changing this to a cryptographically safe random number\n  const counter = params.counter;\n  authData.push(\n    ((counter & 0xff000000) >> 24) & 0xff,\n    ((counter & 0x00ff0000) >> 16) & 0xff,\n    ((counter & 0x0000ff00) >> 8) & 0xff,\n    counter & 0x000000ff,\n  );\n\n  if (params.keyPair) {\n    // attestedCredentialData\n    const attestedCredentialData: Array<number> = [];\n\n    attestedCredentialData.push(...AAGUID);\n\n    // credentialIdLength (2 bytes) and credential Id\n    const rawId = Fido2Utils.bufferSourceToUint8Array(params.credentialId);\n    const credentialIdLength = [(rawId.length - (rawId.length & 0xff)) / 256, rawId.length & 0xff];\n    attestedCredentialData.push(...credentialIdLength);\n    attestedCredentialData.push(...rawId);\n\n    const publicKeyJwk = await crypto.subtle.exportKey(\"jwk\", params.keyPair.publicKey);\n    // COSE format of the EC256 key\n    const keyX = Utils.fromUrlB64ToArray(publicKeyJwk.x);\n    const keyY = Utils.fromUrlB64ToArray(publicKeyJwk.y);\n\n    // Can't get `cbor-redux` to encode in CTAP2 canonical CBOR. So we do it manually:\n    const coseBytes = new Uint8Array(77);\n    coseBytes.set([0xa5, 0x01, 0x02, 0x03, 0x26, 0x20, 0x01, 0x21, 0x58, 0x20], 0);\n    coseBytes.set(keyX, 10);\n    coseBytes.set([0x22, 0x58, 0x20], 10 + 32);\n    coseBytes.set(keyY, 10 + 32 + 3);\n\n    // credential public key - convert to array from CBOR encoded COSE key\n    attestedCredentialData.push(...coseBytes);\n\n    authData.push(...attestedCredentialData);\n  }\n\n  return new Uint8Array(authData);\n}\n\ninterface SignatureParams {\n  authData: Uint8Array;\n  clientDataHash: BufferSource;\n  privateKey: CryptoKey;\n}\n\nasync function generateSignature(params: SignatureParams) {\n  const sigBase = new Uint8Array([\n    ...params.authData,\n    ...Fido2Utils.bufferSourceToUint8Array(params.clientDataHash),\n  ]);\n  const p1363_signature = new Uint8Array(\n    await crypto.subtle.sign(\n      {\n        name: \"ECDSA\",\n        hash: { name: \"SHA-256\" },\n      },\n      params.privateKey,\n      sigBase,\n    ),\n  );\n\n  const asn1Der_signature = p1363ToDer(p1363_signature);\n\n  return asn1Der_signature;\n}\n\ninterface Flags {\n  extensionData: boolean;\n  attestationData: boolean;\n  backupEligibility: boolean;\n  backupState: boolean;\n  userVerification: boolean;\n  userPresence: boolean;\n}\n\nfunction authDataFlags(options: Flags): number {\n  let flags = 0;\n\n  if (options.extensionData) {\n    flags |= 0b1000000;\n  }\n\n  if (options.attestationData) {\n    flags |= 0b01000000;\n  }\n\n  if (options.backupEligibility) {\n    flags |= 0b00001000;\n  }\n\n  if (options.backupState) {\n    flags |= 0b00010000;\n  }\n\n  if (options.userVerification) {\n    flags |= 0b00000100;\n  }\n\n  if (options.userPresence) {\n    flags |= 0b00000001;\n  }\n\n  return flags;\n}\n","export const UserRequestedFallbackAbortReason = \"UserRequestedFallback\";\n\nexport type UserVerification = \"discouraged\" | \"preferred\" | \"required\";\n\n/**\n * This class represents an abstraction of the WebAuthn Client as described by W3C:\n * https://www.w3.org/TR/webauthn-3/#webauthn-client\n *\n * The WebAuthn Client is an intermediary entity typically implemented in the user agent\n * (in whole, or in part). Conceptually, it underlies the Web Authentication API and embodies\n * the implementation of the Web Authentication API's operations.\n *\n * It is responsible for both marshalling the inputs for the underlying authenticator operations,\n * and for returning the results of the latter operations to the Web Authentication API's callers.\n */\nexport abstract class Fido2ClientService {\n  isFido2FeatureEnabled: (hostname: string, origin: string) => Promise<boolean>;\n\n  /**\n   * Allows WebAuthn Relying Party scripts to request the creation of a new public key credential source.\n   * For more information please see: https://www.w3.org/TR/webauthn-3/#sctn-createCredential\n   *\n   * @param params The parameters for the credential creation operation.\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the new credential.\n   */\n  createCredential: (\n    params: CreateCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ) => Promise<CreateCredentialResult>;\n\n  /**\n   * Allows WebAuthn Relying Party scripts to discover and use an existing public key credential, with the user’s consent.\n   * Relying Party script can optionally specify some criteria to indicate what credential sources are acceptable to it.\n   * For more information please see: https://www.w3.org/TR/webauthn-3/#sctn-getAssertion\n   *\n   * @param params The parameters for the credential assertion operation.\n   * @param abortController An AbortController that can be used to abort the operation.\n   * @returns A promise that resolves with the asserted credential.\n   */\n  assertCredential: (\n    params: AssertCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ) => Promise<AssertCredentialResult>;\n}\n\n/**\n * Parameters for creating a new credential.\n */\nexport interface CreateCredentialParams {\n  /** The Relaying Parties origin, see: https://html.spec.whatwg.org/multipage/browsers.html#concept-origin */\n  origin: string;\n  /**\n   * A value which is true if and only if the caller’s environment settings object is same-origin with its ancestors.\n   * It is false if caller is cross-origin.\n   * */\n  sameOriginWithAncestors: boolean;\n  /** The Relying Party's preference for attestation conveyance */\n  attestation?: \"direct\" | \"enterprise\" | \"indirect\" | \"none\";\n  /** The Relying Party's requirements of the authenticator used in the creation of the credential. */\n  authenticatorSelection?: {\n    // authenticatorAttachment?: AuthenticatorAttachment; // not used\n    requireResidentKey?: boolean;\n    residentKey?: \"discouraged\" | \"preferred\" | \"required\";\n    userVerification?: UserVerification;\n  };\n  /** Challenge intended to be used for generating the newly created credential's attestation object. */\n  challenge: string; // b64 encoded\n  /**\n   * This member is intended for use by Relying Parties that wish to limit the creation of multiple credentials for\n   * the same account on a single authenticator. The client is requested to return an error if the new credential would\n   * be created on an authenticator that also contains one of the credentials enumerated in this parameter.\n   * */\n  excludeCredentials?: {\n    id: string; // b64 encoded\n    transports?: (\"ble\" | \"hybrid\" | \"internal\" | \"nfc\" | \"usb\")[];\n    type: \"public-key\";\n  }[];\n  /**\n   * This member contains additional parameters requesting additional processing by the client and authenticator.\n   **/\n  extensions?: {\n    appid?: string; // Not supported\n    appidExclude?: string; // Not supported\n    uvm?: boolean; // Not supported\n    credProps?: boolean;\n  };\n  /**\n   * This member contains information about the desired properties of the credential to be created.\n   * The sequence is ordered from most preferred to least preferred.\n   * The client makes a best-effort to create the most preferred credential that it can.\n   */\n  pubKeyCredParams: PublicKeyCredentialParam[];\n  /** Data about the Relying Party responsible for the request. */\n  rp: {\n    id?: string;\n    name: string;\n  };\n  /** Data about the user account for which the Relying Party is requesting attestation. */\n  user: {\n    id: string; // b64 encoded\n    displayName: string;\n    name: string;\n  };\n  /** Forwarded to user interface */\n  fallbackSupported: boolean;\n  /**\n   * This member specifies a time, in milliseconds, that the caller is willing to wait for the call to complete.\n   * This is treated as a hint, and MAY be overridden by the client.\n   **/\n  timeout?: number;\n}\n\n/**\n * The result of creating a new credential.\n */\nexport interface CreateCredentialResult {\n  credentialId: string;\n  clientDataJSON: string;\n  attestationObject: string;\n  authData: string;\n  publicKey: string;\n  publicKeyAlgorithm: number;\n  transports: string[];\n  extensions: {\n    credProps?: {\n      rk: boolean;\n    };\n  };\n}\n\n/**\n * Parameters for asserting a credential.\n */\nexport interface AssertCredentialParams {\n  allowedCredentialIds: string[];\n  rpId: string;\n  origin: string;\n  challenge: string;\n  userVerification?: UserVerification;\n  timeout: number;\n  sameOriginWithAncestors: boolean;\n  mediation?: \"silent\" | \"optional\" | \"required\" | \"conditional\";\n  fallbackSupported: boolean;\n}\n\n/**\n * The result of asserting a credential.\n */\nexport interface AssertCredentialResult {\n  credentialId: string;\n  clientDataJSON: string;\n  authenticatorData: string;\n  signature: string;\n  userHandle: string;\n}\n\n/**\n * A description of a key type and algorithm.\n *\n * @example {\n *   alg: -7, // ES256\n *   type: \"public-key\"\n * }\n */\nexport interface PublicKeyCredentialParam {\n  alg: number;\n  type: \"public-key\";\n}\n\n/**\n * Error thrown when the user requests a fallback to the browser's built-in WebAuthn implementation.\n */\nexport class FallbackRequestedError extends Error {\n  readonly fallbackRequested = true;\n  constructor() {\n    super(\"FallbackRequested\");\n  }\n}\n","import { parse } from \"tldts\";\n\nexport function isValidRpId(rpId: string, origin: string) {\n  const parsedOrigin = parse(origin, { allowPrivateDomains: true });\n  const parsedRpId = parse(rpId, { allowPrivateDomains: true });\n\n  return (\n    (parsedOrigin.domain == null &&\n      parsedOrigin.hostname == parsedRpId.hostname &&\n      parsedOrigin.hostname == \"localhost\") ||\n    (parsedOrigin.domain != null &&\n      parsedOrigin.domain == parsedRpId.domain &&\n      parsedOrigin.subdomain.endsWith(parsedRpId.subdomain))\n  );\n}\n","import { firstValueFrom, Subscription } from \"rxjs\";\nimport { parse } from \"tldts\";\n\nimport { AuthService } from \"../../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../../auth/enums/authentication-status\";\nimport { DomainSettingsService } from \"../../../autofill/services/domain-settings.service\";\nimport { VaultSettingsService } from \"../../../vault/abstractions/vault-settings/vault-settings.service\";\nimport { ConfigService } from \"../../abstractions/config/config.service\";\nimport {\n  Fido2ActiveRequestEvents,\n  Fido2ActiveRequestManager,\n} from \"../../abstractions/fido2/fido2-active-request-manager.abstraction\";\nimport {\n  Fido2AuthenticatorError,\n  Fido2AuthenticatorErrorCode,\n  Fido2AuthenticatorGetAssertionParams,\n  Fido2AuthenticatorGetAssertionResult,\n  Fido2AuthenticatorMakeCredentialsParams,\n  Fido2AuthenticatorService,\n  PublicKeyCredentialDescriptor,\n} from \"../../abstractions/fido2/fido2-authenticator.service.abstraction\";\nimport {\n  AssertCredentialParams,\n  AssertCredentialResult,\n  CreateCredentialParams,\n  CreateCredentialResult,\n  FallbackRequestedError,\n  Fido2ClientService as Fido2ClientServiceAbstraction,\n  PublicKeyCredentialParam,\n  UserRequestedFallbackAbortReason,\n  UserVerification,\n} from \"../../abstractions/fido2/fido2-client.service.abstraction\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { ScheduledTaskNames } from \"../../scheduling/scheduled-task-name.enum\";\nimport { TaskSchedulerService } from \"../../scheduling/task-scheduler.service\";\n\nimport { isValidRpId } from \"./domain-utils\";\nimport { Fido2Utils } from \"./fido2-utils\";\nimport { guidToRawFormat } from \"./guid-utils\";\n\n/**\n * Bitwarden implementation of the Web Authentication API as described by W3C\n * https://www.w3.org/TR/webauthn-3/#sctn-api\n *\n * It is highly recommended that the W3C specification is used a reference when reading this code.\n */\nexport class Fido2ClientService implements Fido2ClientServiceAbstraction {\n  private timeoutAbortController: AbortController;\n  private readonly TIMEOUTS = {\n    NO_VERIFICATION: {\n      DEFAULT: 120000,\n      MIN: 30000,\n      MAX: 180000,\n    },\n    WITH_VERIFICATION: {\n      DEFAULT: 300000,\n      MIN: 30000,\n      MAX: 600000,\n    },\n  };\n\n  constructor(\n    private authenticator: Fido2AuthenticatorService,\n    private configService: ConfigService,\n    private authService: AuthService,\n    private vaultSettingsService: VaultSettingsService,\n    private domainSettingsService: DomainSettingsService,\n    private taskSchedulerService: TaskSchedulerService,\n    private requestManager: Fido2ActiveRequestManager,\n    private logService?: LogService,\n  ) {\n    this.taskSchedulerService.registerTaskHandler(ScheduledTaskNames.fido2ClientAbortTimeout, () =>\n      this.timeoutAbortController?.abort(),\n    );\n  }\n\n  async isFido2FeatureEnabled(hostname: string, origin: string): Promise<boolean> {\n    const isUserLoggedIn =\n      (await this.authService.getAuthStatus()) !== AuthenticationStatus.LoggedOut;\n    if (!isUserLoggedIn) {\n      return false;\n    }\n\n    const neverDomains = await firstValueFrom(this.domainSettingsService.neverDomains$);\n\n    const isExcludedDomain = neverDomains != null && hostname in neverDomains;\n    if (isExcludedDomain) {\n      return false;\n    }\n\n    const serverConfig = await firstValueFrom(this.configService.serverConfig$);\n    const isOriginEqualBitwardenVault = origin === serverConfig.environment?.vault;\n    if (isOriginEqualBitwardenVault) {\n      return false;\n    }\n\n    return await firstValueFrom(this.vaultSettingsService.enablePasskeys$);\n  }\n\n  async createCredential(\n    params: CreateCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController = new AbortController(),\n  ): Promise<CreateCredentialResult> {\n    const parsedOrigin = parse(params.origin, { allowPrivateDomains: true });\n\n    const enableFido2VaultCredentials = await this.isFido2FeatureEnabled(\n      parsedOrigin.hostname,\n      params.origin,\n    );\n\n    if (!enableFido2VaultCredentials) {\n      this.logService?.warning(`[Fido2Client] Fido2VaultCredential is not enabled`);\n      throw new FallbackRequestedError();\n    }\n\n    if (!params.sameOriginWithAncestors) {\n      this.logService?.warning(\n        `[Fido2Client] Invalid 'sameOriginWithAncestors' value: ${params.sameOriginWithAncestors}`,\n      );\n      throw new DOMException(\"Invalid 'sameOriginWithAncestors' value\", \"NotAllowedError\");\n    }\n\n    const userId = Fido2Utils.stringToBuffer(params.user.id);\n    if (userId.length < 1 || userId.length > 64) {\n      this.logService?.warning(\n        `[Fido2Client] Invalid 'user.id' length: ${params.user.id} (${userId.length})`,\n      );\n      throw new TypeError(\"Invalid 'user.id' length\");\n    }\n\n    params.rp.id = params.rp.id ?? parsedOrigin.hostname;\n    if (\n      parsedOrigin.hostname == undefined ||\n      (!params.origin.startsWith(\"https://\") && parsedOrigin.hostname !== \"localhost\")\n    ) {\n      this.logService?.warning(`[Fido2Client] Invalid https origin: ${params.origin}`);\n      throw new DOMException(\"'origin' is not a valid https origin\", \"SecurityError\");\n    }\n\n    if (!isValidRpId(params.rp.id, params.origin)) {\n      this.logService?.warning(\n        `[Fido2Client] 'rp.id' cannot be used with the current origin: rp.id = ${params.rp.id}; origin = ${params.origin}`,\n      );\n      throw new DOMException(\"'rp.id' cannot be used with the current origin\", \"SecurityError\");\n    }\n\n    let credTypesAndPubKeyAlgs: PublicKeyCredentialParam[];\n    if (params.pubKeyCredParams?.length > 0) {\n      // Filter out all unsupported algorithms\n      credTypesAndPubKeyAlgs = params.pubKeyCredParams.filter(\n        (kp) => kp.alg === -7 && kp.type === \"public-key\",\n      );\n    } else {\n      // Assign default algorithms\n      credTypesAndPubKeyAlgs = [\n        { alg: -7, type: \"public-key\" },\n        { alg: -257, type: \"public-key\" },\n      ];\n    }\n\n    if (credTypesAndPubKeyAlgs.length === 0) {\n      const requestedAlgorithms = credTypesAndPubKeyAlgs.map((p) => p.alg).join(\", \");\n      this.logService?.warning(\n        `[Fido2Client] No compatible algorithms found, RP requested: ${requestedAlgorithms}`,\n      );\n      throw new DOMException(\"No supported key algorithms were found\", \"NotSupportedError\");\n    }\n\n    const collectedClientData = {\n      type: \"webauthn.create\",\n      challenge: params.challenge,\n      origin: params.origin,\n      crossOrigin: !params.sameOriginWithAncestors,\n      // tokenBinding: {} // Not currently supported\n    };\n    const clientDataJSON = JSON.stringify(collectedClientData);\n    const clientDataJSONBytes = Utils.fromByteStringToArray(clientDataJSON);\n    const clientDataHash = await crypto.subtle.digest({ name: \"SHA-256\" }, clientDataJSONBytes);\n    const makeCredentialParams = mapToMakeCredentialParams({\n      params,\n      credTypesAndPubKeyAlgs,\n      clientDataHash,\n    });\n\n    // Set timeout before invoking authenticator\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n    const timeoutSubscription = this.setAbortTimeout(\n      abortController,\n      params.authenticatorSelection?.userVerification,\n      params.timeout,\n    );\n\n    let makeCredentialResult;\n    try {\n      makeCredentialResult = await this.authenticator.makeCredential(\n        makeCredentialParams,\n        tab,\n        abortController,\n      );\n    } catch (error) {\n      if (\n        abortController.signal.aborted &&\n        abortController.signal.reason === UserRequestedFallbackAbortReason\n      ) {\n        this.logService?.info(`[Fido2Client] Aborting because user requested fallback`);\n        throw new FallbackRequestedError();\n      }\n\n      if (\n        error instanceof Fido2AuthenticatorError &&\n        error.errorCode === Fido2AuthenticatorErrorCode.InvalidState\n      ) {\n        this.logService?.warning(`[Fido2Client] Unknown error: ${error}`);\n        throw new DOMException(\"Unknown error occured.\", \"InvalidStateError\");\n      }\n\n      this.logService?.info(`[Fido2Client] Aborted by user: ${error}`);\n      throw new DOMException(\n        \"The operation either timed out or was not allowed.\",\n        \"NotAllowedError\",\n      );\n    }\n\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n\n    let credProps;\n    if (params.extensions?.credProps) {\n      credProps = {\n        rk: makeCredentialParams.requireResidentKey,\n      };\n    }\n\n    timeoutSubscription?.unsubscribe();\n\n    return {\n      credentialId: Fido2Utils.bufferToString(makeCredentialResult.credentialId),\n      attestationObject: Fido2Utils.bufferToString(makeCredentialResult.attestationObject),\n      authData: Fido2Utils.bufferToString(makeCredentialResult.authData),\n      clientDataJSON: Fido2Utils.bufferToString(clientDataJSONBytes),\n      publicKey: Fido2Utils.bufferToString(makeCredentialResult.publicKey),\n      publicKeyAlgorithm: makeCredentialResult.publicKeyAlgorithm,\n      transports: params.rp.id === \"google.com\" ? [\"internal\", \"usb\"] : [\"internal\"],\n      extensions: { credProps },\n    };\n  }\n\n  async assertCredential(\n    params: AssertCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController = new AbortController(),\n  ): Promise<AssertCredentialResult> {\n    const parsedOrigin = parse(params.origin, { allowPrivateDomains: true });\n    const enableFido2VaultCredentials = await this.isFido2FeatureEnabled(\n      parsedOrigin.hostname,\n      params.origin,\n    );\n\n    if (!enableFido2VaultCredentials) {\n      this.logService?.warning(`[Fido2Client] Fido2VaultCredential is not enabled`);\n      throw new FallbackRequestedError();\n    }\n\n    params.rpId = params.rpId ?? parsedOrigin.hostname;\n\n    if (\n      parsedOrigin.hostname == undefined ||\n      (!params.origin.startsWith(\"https://\") && parsedOrigin.hostname !== \"localhost\")\n    ) {\n      this.logService?.warning(`[Fido2Client] Invalid https origin: ${params.origin}`);\n      throw new DOMException(\"'origin' is not a valid https origin\", \"SecurityError\");\n    }\n\n    if (!isValidRpId(params.rpId, params.origin)) {\n      this.logService?.warning(\n        `[Fido2Client] 'rp.id' cannot be used with the current origin: rp.id = ${params.rpId}; origin = ${params.origin}`,\n      );\n      throw new DOMException(\"'rp.id' cannot be used with the current origin\", \"SecurityError\");\n    }\n\n    const collectedClientData = {\n      type: \"webauthn.get\",\n      challenge: params.challenge,\n      origin: params.origin,\n      crossOrigin: !params.sameOriginWithAncestors,\n      // tokenBinding: {} // Not currently supported\n    };\n    const clientDataJSON = JSON.stringify(collectedClientData);\n    const clientDataJSONBytes = Utils.fromByteStringToArray(clientDataJSON);\n\n    if (params.mediation === \"conditional\") {\n      return this.handleMediatedConditionalRequest(\n        params,\n        tab,\n        abortController,\n        clientDataJSONBytes,\n      );\n    }\n\n    const clientDataHash = await crypto.subtle.digest({ name: \"SHA-256\" }, clientDataJSONBytes);\n    const getAssertionParams = mapToGetAssertionParams({ params, clientDataHash });\n\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n\n    const timeoutSubscription = this.setAbortTimeout(\n      abortController,\n      params.userVerification,\n      params.timeout,\n    );\n\n    let getAssertionResult;\n    try {\n      getAssertionResult = await this.authenticator.getAssertion(\n        getAssertionParams,\n        tab,\n        abortController,\n      );\n    } catch (error) {\n      if (\n        abortController.signal.aborted &&\n        abortController.signal.reason === UserRequestedFallbackAbortReason\n      ) {\n        this.logService?.info(`[Fido2Client] Aborting because user requested fallback`);\n        throw new FallbackRequestedError();\n      }\n\n      if (\n        error instanceof Fido2AuthenticatorError &&\n        error.errorCode === Fido2AuthenticatorErrorCode.InvalidState\n      ) {\n        this.logService?.warning(`[Fido2Client] Unknown error: ${error}`);\n        throw new DOMException(\"Unknown error occured.\", \"InvalidStateError\");\n      }\n\n      this.logService?.info(`[Fido2Client] Aborted by user: ${error}`);\n      throw new DOMException(\n        \"The operation either timed out or was not allowed.\",\n        \"NotAllowedError\",\n      );\n    }\n\n    if (abortController.signal.aborted) {\n      this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      throw new DOMException(\"The operation either timed out or was not allowed.\", \"AbortError\");\n    }\n\n    timeoutSubscription?.unsubscribe();\n\n    return this.generateAssertCredentialResult(getAssertionResult, clientDataJSONBytes);\n  }\n\n  private async handleMediatedConditionalRequest(\n    params: AssertCredentialParams,\n    tab: chrome.tabs.Tab,\n    abortController: AbortController,\n    clientDataJSONBytes: Uint8Array,\n  ): Promise<AssertCredentialResult> {\n    let getAssertionResult;\n    let assumeUserPresence = false;\n    while (!getAssertionResult) {\n      const authStatus = await firstValueFrom(this.authService.activeAccountStatus$);\n      const availableCredentials =\n        authStatus === AuthenticationStatus.Unlocked\n          ? await this.authenticator.silentCredentialDiscovery(params.rpId)\n          : [];\n      this.logService?.info(\n        `[Fido2Client] started mediated request, available credentials: ${availableCredentials.length}`,\n      );\n      const requestResult = await this.requestManager.newActiveRequest(\n        tab.id,\n        availableCredentials,\n        abortController,\n      );\n\n      if (requestResult.type === Fido2ActiveRequestEvents.Refresh) {\n        continue;\n      }\n\n      if (requestResult.type === Fido2ActiveRequestEvents.Abort) {\n        break;\n      }\n\n      params.allowedCredentialIds = [\n        Fido2Utils.bufferToString(guidToRawFormat(requestResult.credentialId)),\n      ];\n      assumeUserPresence = true;\n\n      const clientDataHash = await crypto.subtle.digest({ name: \"SHA-256\" }, clientDataJSONBytes);\n      const getAssertionParams = mapToGetAssertionParams({\n        params,\n        clientDataHash,\n        assumeUserPresence,\n      });\n\n      try {\n        getAssertionResult = await this.authenticator.getAssertion(getAssertionParams, tab);\n      } catch (e) {\n        this.logService?.info(`[Fido2Client] Aborted by user: ${e}`);\n      }\n\n      if (abortController.signal.aborted) {\n        this.logService?.info(`[Fido2Client] Aborted with AbortController`);\n      }\n    }\n\n    return this.generateAssertCredentialResult(getAssertionResult, clientDataJSONBytes);\n  }\n\n  private generateAssertCredentialResult(\n    getAssertionResult: Fido2AuthenticatorGetAssertionResult,\n    clientDataJSONBytes: Uint8Array,\n  ): AssertCredentialResult {\n    return {\n      authenticatorData: Fido2Utils.bufferToString(getAssertionResult.authenticatorData),\n      clientDataJSON: Fido2Utils.bufferToString(clientDataJSONBytes),\n      credentialId: Fido2Utils.bufferToString(getAssertionResult.selectedCredential.id),\n      userHandle:\n        getAssertionResult.selectedCredential.userHandle !== undefined\n          ? Fido2Utils.bufferToString(getAssertionResult.selectedCredential.userHandle)\n          : undefined,\n      signature: Fido2Utils.bufferToString(getAssertionResult.signature),\n    };\n  }\n\n  private setAbortTimeout = (\n    abortController: AbortController,\n    userVerification?: UserVerification,\n    timeout?: number,\n  ): Subscription => {\n    let clampedTimeout: number;\n\n    const { WITH_VERIFICATION, NO_VERIFICATION } = this.TIMEOUTS;\n    if (userVerification === \"required\") {\n      timeout = timeout ?? WITH_VERIFICATION.DEFAULT;\n      clampedTimeout = Math.max(WITH_VERIFICATION.MIN, Math.min(timeout, WITH_VERIFICATION.MAX));\n    } else {\n      timeout = timeout ?? NO_VERIFICATION.DEFAULT;\n      clampedTimeout = Math.max(NO_VERIFICATION.MIN, Math.min(timeout, NO_VERIFICATION.MAX));\n    }\n\n    this.timeoutAbortController = abortController;\n    return this.taskSchedulerService.setTimeout(\n      ScheduledTaskNames.fido2ClientAbortTimeout,\n      clampedTimeout,\n    );\n  };\n}\n\n/**\n * Convert data gathered by the WebAuthn Client to a format that can be used by the authenticator.\n */\nfunction mapToMakeCredentialParams({\n  params,\n  credTypesAndPubKeyAlgs,\n  clientDataHash,\n}: {\n  params: CreateCredentialParams;\n  credTypesAndPubKeyAlgs: PublicKeyCredentialParam[];\n  clientDataHash: ArrayBuffer;\n}): Fido2AuthenticatorMakeCredentialsParams {\n  const excludeCredentialDescriptorList: PublicKeyCredentialDescriptor[] =\n    params.excludeCredentials?.map((credential) => ({\n      id: Fido2Utils.stringToBuffer(credential.id),\n      transports: credential.transports,\n      type: credential.type,\n    })) ?? [];\n\n  const requireResidentKey =\n    params.authenticatorSelection?.residentKey === \"required\" ||\n    params.authenticatorSelection?.residentKey === \"preferred\" ||\n    (params.authenticatorSelection?.residentKey === undefined &&\n      params.authenticatorSelection?.requireResidentKey === true);\n\n  const requireUserVerification =\n    params.authenticatorSelection?.userVerification === \"required\" ||\n    params.authenticatorSelection?.userVerification === \"preferred\" ||\n    params.authenticatorSelection?.userVerification === undefined;\n\n  return {\n    requireResidentKey,\n    requireUserVerification,\n    enterpriseAttestationPossible: params.attestation === \"enterprise\",\n    excludeCredentialDescriptorList,\n    credTypesAndPubKeyAlgs,\n    hash: clientDataHash,\n    rpEntity: {\n      id: params.rp.id,\n      name: params.rp.name,\n    },\n    userEntity: {\n      id: Fido2Utils.stringToBuffer(params.user.id),\n      displayName: params.user.displayName,\n      name: params.user.name,\n    },\n    fallbackSupported: params.fallbackSupported,\n  };\n}\n\n/**\n * Convert data gathered by the WebAuthn Client to a format that can be used by the authenticator.\n */\nfunction mapToGetAssertionParams({\n  params,\n  clientDataHash,\n  assumeUserPresence,\n}: {\n  params: AssertCredentialParams;\n  clientDataHash: ArrayBuffer;\n  assumeUserPresence?: boolean;\n}): Fido2AuthenticatorGetAssertionParams {\n  const allowCredentialDescriptorList: PublicKeyCredentialDescriptor[] =\n    params.allowedCredentialIds.map((id) => ({\n      id: Fido2Utils.stringToBuffer(id),\n      type: \"public-key\",\n    }));\n\n  const requireUserVerification =\n    params.userVerification === \"required\" ||\n    params.userVerification === \"preferred\" ||\n    params.userVerification === undefined;\n\n  return {\n    rpId: params.rpId,\n    requireUserVerification,\n    hash: clientDataHash,\n    allowCredentialDescriptorList,\n    extensions: {},\n    fallbackSupported: params.fallbackSupported,\n    assumeUserPresence,\n  };\n}\n","import { LogService } from \"../../abstractions/log.service\";\nimport { Utils } from \"../../misc/utils\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\n\nconst MAX_SINGLE_BLOB_UPLOAD_SIZE = 256 * 1024 * 1024; // 256 MiB\nconst MAX_BLOCKS_PER_BLOB = 50000;\n\nexport class AzureFileUploadService {\n  constructor(private logService: LogService) {}\n\n  async upload(url: string, data: EncArrayBuffer, renewalCallback: () => Promise<string>) {\n    if (data.buffer.byteLength <= MAX_SINGLE_BLOB_UPLOAD_SIZE) {\n      return await this.azureUploadBlob(url, data);\n    } else {\n      return await this.azureUploadBlocks(url, data, renewalCallback);\n    }\n  }\n  private async azureUploadBlob(url: string, data: EncArrayBuffer) {\n    const urlObject = Utils.getUrl(url);\n    const headers = new Headers({\n      \"x-ms-date\": new Date().toUTCString(),\n      \"x-ms-version\": urlObject.searchParams.get(\"sv\"),\n      \"Content-Length\": data.buffer.byteLength.toString(),\n      \"x-ms-blob-type\": \"BlockBlob\",\n    });\n\n    const request = new Request(url, {\n      body: data.buffer,\n      cache: \"no-store\",\n      method: \"PUT\",\n      headers: headers,\n    });\n\n    const blobResponse = await fetch(request);\n\n    if (blobResponse.status !== 201) {\n      throw new Error(`Failed to create Azure blob: ${blobResponse.status}`);\n    }\n  }\n  private async azureUploadBlocks(\n    url: string,\n    data: EncArrayBuffer,\n    renewalCallback: () => Promise<string>,\n  ) {\n    const baseUrl = Utils.getUrl(url);\n    const blockSize = this.getMaxBlockSize(baseUrl.searchParams.get(\"sv\"));\n    let blockIndex = 0;\n    const numBlocks = Math.ceil(data.buffer.byteLength / blockSize);\n    const blocksStaged: string[] = [];\n\n    if (numBlocks > MAX_BLOCKS_PER_BLOB) {\n      throw new Error(\n        `Cannot upload file, exceeds maximum size of ${blockSize * MAX_BLOCKS_PER_BLOB}`,\n      );\n    }\n\n    // eslint-disable-next-line\n    try {\n      while (blockIndex < numBlocks) {\n        url = await this.renewUrlIfNecessary(url, renewalCallback);\n        const blockUrl = Utils.getUrl(url);\n        const blockId = this.encodedBlockId(blockIndex);\n        blockUrl.searchParams.append(\"comp\", \"block\");\n        blockUrl.searchParams.append(\"blockid\", blockId);\n        const start = blockIndex * blockSize;\n        const blockData = data.buffer.slice(start, start + blockSize);\n        const blockHeaders = new Headers({\n          \"x-ms-date\": new Date().toUTCString(),\n          \"x-ms-version\": blockUrl.searchParams.get(\"sv\"),\n          \"Content-Length\": blockData.byteLength.toString(),\n        });\n\n        const blockRequest = new Request(blockUrl.toString(), {\n          body: blockData,\n          cache: \"no-store\",\n          method: \"PUT\",\n          headers: blockHeaders,\n        });\n\n        const blockResponse = await fetch(blockRequest);\n\n        if (blockResponse.status !== 201) {\n          const message = `Unsuccessful block PUT. Received status ${blockResponse.status}`;\n          this.logService.error(message + \"\\n\" + (await blockResponse.json()));\n          throw new Error(message);\n        }\n\n        blocksStaged.push(blockId);\n        blockIndex++;\n      }\n\n      url = await this.renewUrlIfNecessary(url, renewalCallback);\n      const blockListUrl = Utils.getUrl(url);\n      const blockListXml = this.blockListXml(blocksStaged);\n      blockListUrl.searchParams.append(\"comp\", \"blocklist\");\n      const headers = new Headers({\n        \"x-ms-date\": new Date().toUTCString(),\n        \"x-ms-version\": blockListUrl.searchParams.get(\"sv\"),\n        \"Content-Length\": blockListXml.length.toString(),\n      });\n\n      const request = new Request(blockListUrl.toString(), {\n        body: blockListXml,\n        cache: \"no-store\",\n        method: \"PUT\",\n        headers: headers,\n      });\n\n      const response = await fetch(request);\n\n      if (response.status !== 201) {\n        const message = `Unsuccessful block list PUT. Received status ${response.status}`;\n        this.logService.error(message + \"\\n\" + (await response.json()));\n        throw new Error(message);\n      }\n    } catch (e) {\n      throw e;\n    }\n  }\n\n  private async renewUrlIfNecessary(\n    url: string,\n    renewalCallback: () => Promise<string>,\n  ): Promise<string> {\n    const urlObject = Utils.getUrl(url);\n    const expiry = new Date(urlObject.searchParams.get(\"se\") ?? \"\");\n\n    if (isNaN(expiry.getTime())) {\n      expiry.setTime(Date.now() + 3600000);\n    }\n\n    if (expiry.getTime() < Date.now() + 1000) {\n      return await renewalCallback();\n    }\n    return url;\n  }\n\n  private encodedBlockId(blockIndex: number) {\n    // Encoded blockId max size is 64, so pre-encoding max size is 48\n    const utfBlockId = (\n      \"000000000000000000000000000000000000000000000000\" + blockIndex.toString()\n    ).slice(-48);\n    return Utils.fromUtf8ToB64(utfBlockId);\n  }\n\n  private blockListXml(blockIdList: string[]) {\n    let xml = '<?xml version=\"1.0\" encoding=\"utf-8\"?><BlockList>';\n    blockIdList.forEach((blockId) => {\n      xml += `<Latest>${blockId}</Latest>`;\n    });\n    xml += \"</BlockList>\";\n    return xml;\n  }\n\n  private getMaxBlockSize(version: string) {\n    if (Version.compare(version, \"2019-12-12\") >= 0) {\n      return 4000 * 1024 * 1024; // 4000 MiB\n    } else if (Version.compare(version, \"2016-05-31\") >= 0) {\n      return 100 * 1024 * 1024; // 100 MiB\n    } else {\n      return 4 * 1024 * 1024; // 4 MiB\n    }\n  }\n}\n\nclass Version {\n  /**\n   * Compares two Azure Versions against each other\n   * @param a Version to compare\n   * @param b Version to compare\n   * @returns a number less than zero if b is newer than a, 0 if equal,\n   * and greater than zero if a is newer than b\n   */\n  static compare(a: Required<Version> | string, b: Required<Version> | string) {\n    if (typeof a === \"string\") {\n      a = new Version(a);\n    }\n\n    if (typeof b === \"string\") {\n      b = new Version(b);\n    }\n\n    return a.year !== b.year\n      ? a.year - b.year\n      : a.month !== b.month\n        ? a.month - b.month\n        : a.day !== b.day\n          ? a.day - b.day\n          : 0;\n  }\n  year = 0;\n  month = 0;\n  day = 0;\n\n  constructor(version: string) {\n    try {\n      const parts = version.split(\"-\").map((v) => Number.parseInt(v, 10));\n      this.year = parts[0];\n      this.month = parts[1];\n      this.day = parts[2];\n    } catch {\n      // Ignore error\n    }\n  }\n  /**\n   * Compares two Azure Versions against each other\n   * @param compareTo Version to compare against\n   * @returns a number less than zero if compareTo is newer, 0 if equal,\n   * and greater than zero if this is greater than compareTo\n   */\n  compare(compareTo: Required<Version> | string) {\n    return Version.compare(this, compareTo);\n  }\n}\n","import { Utils } from \"../../misc/utils\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\n\nexport class BitwardenFileUploadService {\n  async upload(\n    encryptedFileName: string,\n    encryptedFileData: EncArrayBuffer,\n    apiCall: (fd: FormData) => Promise<any>,\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encryptedFileData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"data\", blob, encryptedFileName);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\n          \"data\",\n          Buffer.from(encryptedFileData.buffer) as any,\n          {\n            filepath: encryptedFileName,\n            contentType: \"application/octet-stream\",\n          } as any,\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    await apiCall(fd);\n  }\n}\n","import {\n  FileUploadApiMethods,\n  FileUploadService as FileUploadServiceAbstraction,\n} from \"../../abstractions/file-upload/file-upload.service\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { FileUploadType } from \"../../enums\";\nimport { EncArrayBuffer } from \"../../models/domain/enc-array-buffer\";\nimport { EncString } from \"../../models/domain/enc-string\";\n\nimport { AzureFileUploadService } from \"./azure-file-upload.service\";\nimport { BitwardenFileUploadService } from \"./bitwarden-file-upload.service\";\n\nexport class FileUploadService implements FileUploadServiceAbstraction {\n  private azureFileUploadService: AzureFileUploadService;\n  private bitwardenFileUploadService: BitwardenFileUploadService;\n\n  constructor(protected logService: LogService) {\n    this.azureFileUploadService = new AzureFileUploadService(logService);\n    this.bitwardenFileUploadService = new BitwardenFileUploadService();\n  }\n\n  async upload(\n    uploadData: { url: string; fileUploadType: FileUploadType },\n    fileName: EncString,\n    encryptedFileData: EncArrayBuffer,\n    fileUploadMethods: FileUploadApiMethods,\n  ) {\n    try {\n      switch (uploadData.fileUploadType) {\n        case FileUploadType.Direct:\n          await this.bitwardenFileUploadService.upload(\n            fileName.encryptedString,\n            encryptedFileData,\n            (fd) => fileUploadMethods.postDirect(fd),\n          );\n          break;\n        case FileUploadType.Azure: {\n          await this.azureFileUploadService.upload(\n            uploadData.url,\n            encryptedFileData,\n            fileUploadMethods.renewFileUploadUrl,\n          );\n          break;\n        }\n        default:\n          throw new Error(\"Unknown file upload type\");\n      }\n    } catch (e) {\n      await fileUploadMethods.rollback();\n      throw e;\n    }\n  }\n}\n","import { Argon2KdfConfig, KdfConfig, PBKDF2KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport { CsprngArray } from \"../../types/csprng\";\nimport { CryptoFunctionService } from \"../abstractions/crypto-function.service\";\nimport { KeyGenerationService as KeyGenerationServiceAbstraction } from \"../abstractions/key-generation.service\";\nimport { KdfType } from \"../enums\";\nimport { Utils } from \"../misc/utils\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\nexport class KeyGenerationService implements KeyGenerationServiceAbstraction {\n  constructor(private cryptoFunctionService: CryptoFunctionService) {}\n\n  async createKey(bitLength: 256 | 512): Promise<SymmetricCryptoKey> {\n    const key = await this.cryptoFunctionService.aesGenerateKey(bitLength);\n    return new SymmetricCryptoKey(key);\n  }\n\n  async createKeyWithPurpose(\n    bitLength: 128 | 192 | 256 | 512,\n    purpose: string,\n    salt?: string,\n  ): Promise<{ salt: string; material: CsprngArray; derivedKey: SymmetricCryptoKey }> {\n    if (salt == null) {\n      const bytes = await this.cryptoFunctionService.randomBytes(32);\n      salt = Utils.fromBufferToUtf8(bytes);\n    }\n    const material = await this.cryptoFunctionService.aesGenerateKey(bitLength);\n    const key = await this.cryptoFunctionService.hkdf(material, salt, purpose, 64, \"sha256\");\n    return { salt, material, derivedKey: new SymmetricCryptoKey(key) };\n  }\n\n  async deriveKeyFromMaterial(\n    material: CsprngArray,\n    salt: string,\n    purpose: string,\n  ): Promise<SymmetricCryptoKey> {\n    const key = await this.cryptoFunctionService.hkdf(material, salt, purpose, 64, \"sha256\");\n    return new SymmetricCryptoKey(key);\n  }\n\n  async deriveKeyFromPassword(\n    password: string | Uint8Array,\n    salt: string | Uint8Array,\n    kdfConfig: KdfConfig,\n  ): Promise<SymmetricCryptoKey> {\n    let key: Uint8Array = null;\n    if (kdfConfig.kdfType == null || kdfConfig.kdfType === KdfType.PBKDF2_SHA256) {\n      if (kdfConfig.iterations == null) {\n        kdfConfig.iterations = PBKDF2KdfConfig.ITERATIONS.defaultValue;\n      }\n\n      key = await this.cryptoFunctionService.pbkdf2(password, salt, \"sha256\", kdfConfig.iterations);\n    } else if (kdfConfig.kdfType == KdfType.Argon2id) {\n      if (kdfConfig.iterations == null) {\n        kdfConfig.iterations = Argon2KdfConfig.ITERATIONS.defaultValue;\n      }\n\n      if (kdfConfig.memory == null) {\n        kdfConfig.memory = Argon2KdfConfig.MEMORY.defaultValue;\n      }\n\n      if (kdfConfig.parallelism == null) {\n        kdfConfig.parallelism = Argon2KdfConfig.PARALLELISM.defaultValue;\n      }\n\n      const saltHash = await this.cryptoFunctionService.hash(salt, \"sha256\");\n      key = await this.cryptoFunctionService.argon2(\n        password,\n        saltHash,\n        kdfConfig.iterations,\n        kdfConfig.memory * 1024, // convert to KiB from MiB\n        kdfConfig.parallelism,\n      );\n    } else {\n      throw new Error(\"Unknown Kdf.\");\n    }\n    return new SymmetricCryptoKey(key);\n  }\n\n  async stretchKey(key: SymmetricCryptoKey): Promise<SymmetricCryptoKey> {\n    const newKey = new Uint8Array(64);\n    const encKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"enc\", 32, \"sha256\");\n    const macKey = await this.cryptoFunctionService.hkdfExpand(key.key, \"mac\", 32, \"sha256\");\n\n    newKey.set(new Uint8Array(encKey));\n    newKey.set(new Uint8Array(macKey), 32);\n\n    return new SymmetricCryptoKey(newKey);\n  }\n}\n","import { MigrationHelper } from \"./migration-helper\";\nimport { Direction, Migrator, VersionFrom, VersionTo } from \"./migrator\";\n\nexport class MigrationBuilder<TCurrent extends number = 0> {\n  /** Create a new MigrationBuilder with an empty buffer of migrations to perform.\n   *\n   * Add migrations to the buffer with {@link with} and {@link rollback}.\n   * @returns A new MigrationBuilder.\n   */\n  static create(): MigrationBuilder<0> {\n    return new MigrationBuilder([]);\n  }\n\n  private constructor(\n    private migrations: readonly { migrator: Migrator<number, number>; direction: Direction }[],\n  ) {}\n\n  /** Add a migrator to the MigrationBuilder. Types are updated such that the chained MigrationBuilder must currently be\n   * at state version equal to the from version of the migrator. Return as MigrationBuilder<TTo> where TTo is the to\n   * version of the migrator, so that the next migrator can be chained.\n   *\n   * @param migrate A migrator class or a tuple of a migrator class, the from version, and the to version. A tuple is\n   * required to instantiate version numbers unless a default constructor is defined.\n   * @returns A new MigrationBuilder with the to version of the migrator as the current version.\n   */\n  with<\n    TMigrator extends Migrator<number, number>,\n    TFrom extends VersionFrom<TMigrator> & TCurrent,\n    TTo extends VersionTo<TMigrator>,\n  >(\n    ...migrate: [new () => TMigrator] | [new (from: TFrom, to: TTo) => TMigrator, TFrom, TTo]\n  ): MigrationBuilder<TTo> {\n    return this.addMigrator(migrate, \"up\");\n  }\n\n  /** Add a migrator to rollback on the MigrationBuilder's list of migrations. As with {@link with}, types of\n   * MigrationBuilder and Migrator must align. However, this time the migration is reversed so TCurrent of the\n   * MigrationBuilder must be equal to the to version of the migrator. Return as MigrationBuilder<TFrom> where TFrom\n   * is the from version of the migrator, so that the next migrator can be chained.\n   *\n   * @param migrate A migrator class or a tuple of a migrator class, the from version, and the to version. A tuple is\n   * required to instantiate version numbers unless a default constructor is defined.\n   * @returns A new MigrationBuilder with the from version of the migrator as the current version.\n   */\n  rollback<\n    TMigrator extends Migrator<number, number>,\n    TFrom extends VersionFrom<TMigrator>,\n    TTo extends VersionTo<TMigrator> & TCurrent,\n  >(\n    ...migrate: [new () => TMigrator] | [new (from: TFrom, to: TTo) => TMigrator, TTo, TFrom]\n  ): MigrationBuilder<TFrom> {\n    if (migrate.length === 3) {\n      migrate = [migrate[0], migrate[2], migrate[1]];\n    }\n    return this.addMigrator(migrate, \"down\");\n  }\n\n  /** Execute the migrations as defined in the MigrationBuilder's migrator buffer */\n  migrate(helper: MigrationHelper): Promise<void> {\n    return this.migrations.reduce(\n      (promise, migrator) =>\n        promise.then(async () => {\n          await this.runMigrator(migrator.migrator, helper, migrator.direction);\n        }),\n      Promise.resolve(),\n    );\n  }\n\n  private addMigrator<\n    TMigrator extends Migrator<number, number>,\n    TFrom extends VersionFrom<TMigrator> & TCurrent,\n    TTo extends VersionTo<TMigrator>,\n  >(\n    migrate: [new () => TMigrator] | [new (from: TFrom, to: TTo) => TMigrator, TFrom, TTo],\n    direction: Direction = \"up\",\n  ) {\n    const newMigration =\n      migrate.length === 1\n        ? { migrator: new migrate[0](), direction }\n        : { migrator: new migrate[0](migrate[1], migrate[2]), direction };\n\n    return new MigrationBuilder<TTo>([...this.migrations, newMigration]);\n  }\n\n  private async runMigrator(\n    migrator: Migrator<number, number>,\n    helper: MigrationHelper,\n    direction: Direction,\n  ): Promise<void> {\n    const shouldMigrate = await migrator.shouldMigrate(helper, direction);\n    helper.info(\n      `Migrator ${migrator.constructor.name} (to version ${migrator.toVersion}) should migrate: ${shouldMigrate} - ${direction}`,\n    );\n    if (shouldMigrate) {\n      const method = direction === \"up\" ? migrator.migrate : migrator.rollback;\n      await method.bind(migrator)(helper);\n      helper.info(\n        `Migrator ${migrator.constructor.name} (to version ${migrator.toVersion}) migrated - ${direction}`,\n      );\n      await migrator.updateVersion(helper, direction);\n      helper.info(\n        `Migrator ${migrator.constructor.name} (to version ${migrator.toVersion}) updated version - ${direction}`,\n      );\n    }\n  }\n}\n","import { NonNegativeInteger } from \"type-fest\";\n\nimport { MigrationHelper } from \"./migration-helper\";\n\nexport const IRREVERSIBLE = new Error(\"Irreversible migration\");\n\nexport type VersionFrom<T> =\n  T extends Migrator<infer TFrom, number>\n    ? TFrom extends NonNegativeInteger<TFrom>\n      ? TFrom\n      : never\n    : never;\nexport type VersionTo<T> =\n  T extends Migrator<number, infer TTo>\n    ? TTo extends NonNegativeInteger<TTo>\n      ? TTo\n      : never\n    : never;\nexport type Direction = \"up\" | \"down\";\n\nexport abstract class Migrator<TFrom extends number, TTo extends number> {\n  constructor(\n    public fromVersion: TFrom,\n    public toVersion: TTo,\n  ) {\n    if (fromVersion == null || toVersion == null) {\n      throw new Error(\"Invalid migration\");\n    }\n    if (fromVersion > toVersion) {\n      throw new Error(\"Invalid migration\");\n    }\n  }\n\n  shouldMigrate(helper: MigrationHelper, direction: Direction): Promise<boolean> {\n    const startVersion = direction === \"up\" ? this.fromVersion : this.toVersion;\n    return Promise.resolve(helper.currentVersion === startVersion);\n  }\n  abstract migrate(helper: MigrationHelper): Promise<void>;\n  abstract rollback(helper: MigrationHelper): Promise<void>;\n  async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    await helper.set(\"stateVersion\", endVersion);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  profile?: {\n    everHadUserKey?: boolean;\n  };\n};\n\nconst USER_EVER_HAD_USER_KEY: KeyDefinitionLike = {\n  key: \"everHadUserKey\",\n  stateDefinition: {\n    name: \"crypto\",\n  },\n};\n\nexport class EverHadUserKeyMigrator extends Migrator<9, 10> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.profile?.everHadUserKey;\n      await helper.setToUser(userId, USER_EVER_HAD_USER_KEY, value ?? false);\n      if (value != null) {\n        delete account.profile.everHadUserKey;\n      }\n      await helper.set(userId, account);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, USER_EVER_HAD_USER_KEY);\n      if (account) {\n        account.profile = Object.assign(account.profile ?? {}, {\n          everHadUserKey: value,\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_EVER_HAD_USER_KEY, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype OrgKeyDataType = {\n  type: \"organization\" | \"provider\";\n  key: string;\n  providerId?: string;\n};\n\ntype ExpectedAccountType = {\n  keys?: {\n    organizationKeys?: {\n      encrypted?: Record<string, OrgKeyDataType>;\n    };\n  };\n};\n\nconst USER_ENCRYPTED_ORGANIZATION_KEYS: KeyDefinitionLike = {\n  key: \"organizationKeys\",\n  stateDefinition: {\n    name: \"crypto\",\n  },\n};\n\nexport class OrganizationKeyMigrator extends Migrator<10, 11> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.keys?.organizationKeys?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ENCRYPTED_ORGANIZATION_KEYS, value);\n        delete account.keys.organizationKeys;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser<Record<string, OrgKeyDataType>>(\n        userId,\n        USER_ENCRYPTED_ORGANIZATION_KEYS,\n      );\n      if (account && value) {\n        account.keys = Object.assign(account.keys ?? {}, {\n          organizationKeys: {\n            encrypted: value,\n          },\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ENCRYPTED_ORGANIZATION_KEYS, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype EnvironmentUrls = Record<string, string>;\n\ntype ExpectedAccountType = {\n  settings?: { region?: string; environmentUrls?: EnvironmentUrls };\n};\n\ntype ExpectedGlobalType = { region?: string; environmentUrls?: EnvironmentUrls };\n\nconst ENVIRONMENT_STATE: StateDefinitionLike = { name: \"environment\" };\n\nconst REGION_KEY: KeyDefinitionLike = { key: \"region\", stateDefinition: ENVIRONMENT_STATE };\nconst URLS_KEY: KeyDefinitionLike = { key: \"urls\", stateDefinition: ENVIRONMENT_STATE };\n\nexport class MoveEnvironmentStateToProviders extends Migrator<11, 12> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyGlobal = await helper.get<ExpectedGlobalType>(\"global\");\n\n    // Move global data\n    if (legacyGlobal?.region != null) {\n      await helper.setToGlobal(REGION_KEY, legacyGlobal.region);\n    }\n\n    if (legacyGlobal?.environmentUrls != null) {\n      await helper.setToGlobal(URLS_KEY, legacyGlobal.environmentUrls);\n    }\n\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        // Move account data\n        if (account?.settings?.region != null) {\n          await helper.setToUser(userId, REGION_KEY, account.settings.region);\n        }\n\n        if (account?.settings?.environmentUrls != null) {\n          await helper.setToUser(userId, URLS_KEY, account.settings.environmentUrls);\n        }\n\n        // Delete old account data\n        delete account?.settings?.region;\n        delete account?.settings?.environmentUrls;\n        await helper.set(userId, account);\n      }),\n    );\n\n    // Delete legacy global data\n    delete legacyGlobal?.region;\n    delete legacyGlobal?.environmentUrls;\n    await helper.set(\"global\", legacyGlobal);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    let legacyGlobal = await helper.get<ExpectedGlobalType>(\"global\");\n\n    let updatedLegacyGlobal = false;\n\n    const globalRegion = await helper.getFromGlobal<string>(REGION_KEY);\n\n    if (globalRegion) {\n      if (!legacyGlobal) {\n        legacyGlobal = {};\n      }\n\n      updatedLegacyGlobal = true;\n      legacyGlobal.region = globalRegion;\n      await helper.setToGlobal(REGION_KEY, null);\n    }\n\n    const globalUrls = await helper.getFromGlobal<EnvironmentUrls>(URLS_KEY);\n\n    if (globalUrls) {\n      if (!legacyGlobal) {\n        legacyGlobal = {};\n      }\n\n      updatedLegacyGlobal = true;\n      legacyGlobal.environmentUrls = globalUrls;\n      await helper.setToGlobal(URLS_KEY, null);\n    }\n\n    if (updatedLegacyGlobal) {\n      await helper.set(\"global\", legacyGlobal);\n    }\n\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      let updatedAccount = false;\n      const userRegion = await helper.getFromUser<string>(userId, REGION_KEY);\n\n      if (userRegion) {\n        if (!account) {\n          account = {};\n        }\n\n        if (!account.settings) {\n          account.settings = {};\n        }\n\n        updatedAccount = true;\n        account.settings.region = userRegion;\n        await helper.setToUser(userId, REGION_KEY, null);\n      }\n\n      const userUrls = await helper.getFromUser<EnvironmentUrls>(userId, URLS_KEY);\n\n      if (userUrls) {\n        if (!account) {\n          account = {};\n        }\n\n        if (!account.settings) {\n          account.settings = {};\n        }\n\n        updatedAccount = true;\n        account.settings.environmentUrls = userUrls;\n        await helper.setToUser(userId, URLS_KEY, null);\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  keys?: {\n    providerKeys?: {\n      encrypted?: Record<string, string>; // Record<ProviderId, EncryptedString> where EncryptedString is the ProviderKey encrypted by the UserKey.\n    };\n  };\n};\n\nconst USER_ENCRYPTED_PROVIDER_KEYS: KeyDefinitionLike = {\n  key: \"providerKeys\",\n  stateDefinition: {\n    name: \"crypto\",\n  },\n};\n\nexport class ProviderKeyMigrator extends Migrator<12, 13> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.keys?.providerKeys?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ENCRYPTED_PROVIDER_KEYS, value);\n        delete account.keys.providerKeys;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser<Record<string, string>>(\n        userId,\n        USER_ENCRYPTED_PROVIDER_KEYS,\n      );\n      if (account && value) {\n        account.keys = Object.assign(account.keys ?? {}, {\n          providerKeys: {\n            encrypted: value,\n          },\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ENCRYPTED_PROVIDER_KEYS, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    disableAutoBiometricsPrompt?: boolean;\n    biometricUnlock?: boolean;\n    dismissedBiometricRequirePasswordOnStartCallout?: boolean;\n  };\n  keys?: { biometricEncryptionClientKeyHalf?: string };\n};\n\n// Biometric text, no auto prompt text, fingerprint validated, and prompt cancelled are refreshed on every app start, so we don't need to migrate them\nexport const CLIENT_KEY_HALF: KeyDefinitionLike = {\n  key: \"clientKeyHalf\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport class MoveBiometricClientKeyHalfToStateProviders extends Migrator<13, 14> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        // Move account data\n        if (account?.keys?.biometricEncryptionClientKeyHalf != null) {\n          await helper.setToUser(\n            userId,\n            CLIENT_KEY_HALF,\n            account.keys.biometricEncryptionClientKeyHalf,\n          );\n\n          // Delete old account data\n          delete account?.keys?.biometricEncryptionClientKeyHalf;\n          await helper.set(userId, account);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      let updatedAccount = false;\n\n      const userKeyHalf = await helper.getFromUser<string>(userId, CLIENT_KEY_HALF);\n\n      if (userKeyHalf) {\n        account ??= {};\n        account.keys ??= {};\n\n        updatedAccount = true;\n        account.keys.biometricEncryptionClientKeyHalf = userKeyHalf;\n        await helper.setToUser(userId, CLIENT_KEY_HALF, null);\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype FolderDataType = {\n  id: string;\n  name: string;\n  revisionDate: string;\n};\n\ntype ExpectedAccountType = {\n  data?: {\n    folders?: {\n      encrypted?: Record<string, FolderDataType>;\n    };\n  };\n};\n\nconst USER_ENCRYPTED_FOLDERS: KeyDefinitionLike = {\n  key: \"folders\",\n  stateDefinition: {\n    name: \"folder\",\n  },\n};\n\nexport class FolderMigrator extends Migrator<14, 15> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.data?.folders?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ENCRYPTED_FOLDERS, value);\n        delete account.data.folders;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, USER_ENCRYPTED_FOLDERS);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          folders: {\n            encrypted: value,\n          },\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ENCRYPTED_FOLDERS, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  profile?: {\n    lastSync?: string;\n  };\n};\n\nconst LAST_SYNC_KEY: KeyDefinitionLike = {\n  key: \"lastSync\",\n  stateDefinition: {\n    name: \"sync\",\n  },\n};\n\nexport class LastSyncMigrator extends Migrator<15, 16> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.profile?.lastSync;\n      await helper.setToUser(userId, LAST_SYNC_KEY, value ?? null);\n      if (value != null) {\n        delete account.profile.lastSync;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, LAST_SYNC_KEY);\n      if (account) {\n        account.profile = Object.assign(account.profile ?? {}, {\n          lastSync: value,\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, LAST_SYNC_KEY, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobalType = {\n  enablePasskeys?: boolean;\n};\n\nconst USER_ENABLE_PASSKEYS: KeyDefinitionLike = {\n  key: \"enablePasskeys\",\n  stateDefinition: {\n    name: \"vaultSettings\",\n  },\n};\n\nexport class EnablePasskeysMigrator extends Migrator<16, 17> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const global = await helper.get<ExpectedGlobalType>(\"global\");\n\n    if (global?.enablePasskeys != null) {\n      await helper.setToGlobal(USER_ENABLE_PASSKEYS, global.enablePasskeys);\n      delete global?.enablePasskeys;\n      await helper.set(\"global\", global);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    let global = await helper.get<ExpectedGlobalType>(\"global\");\n    const globalEnablePasskeys = await helper.getFromGlobal<boolean>(USER_ENABLE_PASSKEYS);\n\n    if (globalEnablePasskeys != null) {\n      global = Object.assign(global ?? {}, { enablePasskeys: globalEnablePasskeys });\n      await helper.set(\"global\", global);\n      await helper.setToGlobal(USER_ENABLE_PASSKEYS, undefined);\n    }\n  }\n}\n","import { StateDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nconst AutofillOverlayVisibility = {\n  Off: 0,\n  OnButtonClick: 1,\n  OnFieldFocus: 2,\n} as const;\n\ntype InlineMenuVisibilitySetting =\n  (typeof AutofillOverlayVisibility)[keyof typeof AutofillOverlayVisibility];\n\ntype ExpectedAccountState = {\n  settings?: {\n    autoFillOnPageLoadDefault?: boolean;\n    enableAutoFillOnPageLoad?: boolean;\n    dismissedAutoFillOnPageLoadCallout?: boolean;\n    disableAutoTotpCopy?: boolean;\n    activateAutoFillOnPageLoadFromPolicy?: InlineMenuVisibilitySetting;\n  };\n};\n\ntype ExpectedGlobalState = { autoFillOverlayVisibility?: InlineMenuVisibilitySetting };\n\nconst autofillSettingsStateDefinition: {\n  stateDefinition: StateDefinitionLike;\n} = {\n  stateDefinition: {\n    name: \"autofillSettings\",\n  },\n};\n\nexport class AutofillSettingsKeyMigrator extends Migrator<17, 18> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // global state (e.g. \"autoFillOverlayVisibility -> inlineMenuVisibility\")\n    const globalState = await helper.get<ExpectedGlobalState>(\"global\");\n\n    if (globalState?.autoFillOverlayVisibility != null) {\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"autofillSettingsLocal\",\n          },\n          key: \"inlineMenuVisibility\",\n        },\n        globalState.autoFillOverlayVisibility,\n      );\n\n      // delete `autoFillOverlayVisibility` from state global\n      delete globalState.autoFillOverlayVisibility;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n\n    // account state (e.g. account settings -> state provider framework keys)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    // migrate account state\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let updateAccount = false;\n      const accountSettings = account?.settings;\n\n      if (accountSettings?.autoFillOnPageLoadDefault != null) {\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoadDefault\" },\n          accountSettings.autoFillOnPageLoadDefault,\n        );\n        delete account.settings.autoFillOnPageLoadDefault;\n        updateAccount = true;\n      }\n\n      if (accountSettings?.enableAutoFillOnPageLoad != null) {\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoad\" },\n          accountSettings?.enableAutoFillOnPageLoad,\n        );\n        delete account.settings.enableAutoFillOnPageLoad;\n        updateAccount = true;\n      }\n\n      if (accountSettings?.dismissedAutoFillOnPageLoadCallout != null) {\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoadCalloutIsDismissed\" },\n          accountSettings?.dismissedAutoFillOnPageLoadCallout,\n        );\n        delete account.settings.dismissedAutoFillOnPageLoadCallout;\n        updateAccount = true;\n      }\n\n      if (accountSettings?.disableAutoTotpCopy != null) {\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autoCopyTotp\" },\n          // invert the value to match the new naming convention\n          !accountSettings?.disableAutoTotpCopy,\n        );\n        delete account.settings.disableAutoTotpCopy;\n        updateAccount = true;\n      }\n\n      if (accountSettings?.activateAutoFillOnPageLoadFromPolicy != null) {\n        await helper.setToUser(\n          userId,\n          {\n            stateDefinition: {\n              name: \"autofillSettingsLocal\",\n            },\n            key: \"activateAutofillOnPageLoadFromPolicy\",\n          },\n          accountSettings?.activateAutoFillOnPageLoadFromPolicy,\n        );\n        delete account.settings.activateAutoFillOnPageLoadFromPolicy;\n        updateAccount = true;\n      }\n\n      if (updateAccount) {\n        // update the state account settings with the migrated values deleted\n        await helper.set(userId, account);\n      }\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // global state (e.g. \"inlineMenuVisibility -> autoFillOverlayVisibility\")\n    const globalState = (await helper.get<ExpectedGlobalState>(\"global\")) || {};\n    const inlineMenuVisibility: InlineMenuVisibilitySetting = await helper.getFromGlobal({\n      stateDefinition: {\n        name: \"autofillSettingsLocal\",\n      },\n      key: \"inlineMenuVisibility\",\n    });\n\n    if (inlineMenuVisibility) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        autoFillOverlayVisibility: inlineMenuVisibility,\n      });\n\n      // remove the global state provider framework key for `inlineMenuVisibility`\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"autofillSettingsLocal\",\n          },\n          key: \"inlineMenuVisibility\",\n        },\n        null,\n      );\n    }\n\n    // account state (e.g. state provider framework keys -> account settings)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    // rollback account state\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let updateAccount = false;\n      let settings = account?.settings || {};\n\n      const autoFillOnPageLoadDefault: boolean = await helper.getFromUser(userId, {\n        ...autofillSettingsStateDefinition,\n        key: \"autofillOnPageLoadDefault\",\n      });\n\n      const enableAutoFillOnPageLoad: boolean = await helper.getFromUser(userId, {\n        ...autofillSettingsStateDefinition,\n        key: \"autofillOnPageLoad\",\n      });\n\n      const dismissedAutoFillOnPageLoadCallout: boolean = await helper.getFromUser(userId, {\n        ...autofillSettingsStateDefinition,\n        key: \"autofillOnPageLoadCalloutIsDismissed\",\n      });\n\n      const autoCopyTotp: boolean = await helper.getFromUser(userId, {\n        ...autofillSettingsStateDefinition,\n        key: \"autoCopyTotp\",\n      });\n\n      const activateAutoFillOnPageLoadFromPolicy: InlineMenuVisibilitySetting =\n        await helper.getFromUser(userId, {\n          stateDefinition: {\n            name: \"autofillSettingsLocal\",\n          },\n          key: \"activateAutofillOnPageLoadFromPolicy\",\n        });\n\n      // update new settings and remove the account state provider framework keys for the rolled back values\n      if (autoFillOnPageLoadDefault != null) {\n        settings = { ...settings, autoFillOnPageLoadDefault };\n\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoadDefault\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (enableAutoFillOnPageLoad != null) {\n        settings = { ...settings, enableAutoFillOnPageLoad };\n\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoad\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (dismissedAutoFillOnPageLoadCallout != null) {\n        settings = { ...settings, dismissedAutoFillOnPageLoadCallout };\n\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autofillOnPageLoadCalloutIsDismissed\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (autoCopyTotp != null) {\n        // invert the value to match the new naming convention\n        settings = { ...settings, disableAutoTotpCopy: !autoCopyTotp };\n\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsStateDefinition, key: \"autoCopyTotp\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (activateAutoFillOnPageLoadFromPolicy != null) {\n        settings = { ...settings, activateAutoFillOnPageLoadFromPolicy };\n\n        await helper.setToUser(\n          userId,\n          {\n            stateDefinition: {\n              name: \"autofillSettingsLocal\",\n            },\n            key: \"activateAutofillOnPageLoadFromPolicy\",\n          },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (updateAccount) {\n        // commit updated settings to state\n        await helper.set(userId, {\n          ...account,\n          settings,\n        });\n      }\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    requirePasswordOnStart?: boolean;\n  };\n};\n\n// Biometric text, no auto prompt text, fingerprint validated, and prompt cancelled are refreshed on every app start, so we don't need to migrate them\nexport const REQUIRE_PASSWORD_ON_START: KeyDefinitionLike = {\n  key: \"requirePasswordOnStart\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport class RequirePasswordOnStartMigrator extends Migrator<18, 19> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        // Move account data\n        if (account?.settings?.requirePasswordOnStart != null) {\n          await helper.setToUser(\n            userId,\n            REQUIRE_PASSWORD_ON_START,\n            account.settings.requirePasswordOnStart,\n          );\n\n          // Delete old account data\n          delete account.settings.requirePasswordOnStart;\n          await helper.set(userId, account);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      const requirePassword = await helper.getFromUser<boolean>(userId, REQUIRE_PASSWORD_ON_START);\n\n      if (requirePassword) {\n        account ??= {};\n        account.settings ??= {};\n\n        account.settings.requirePasswordOnStart = requirePassword;\n        await helper.setToUser(userId, REQUIRE_PASSWORD_ON_START, null);\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  keys?: {\n    privateKey?: {\n      encrypted?: string; // EncryptedString\n    };\n  };\n};\n\nconst USER_ENCRYPTED_PRIVATE_KEY: KeyDefinitionLike = {\n  key: \"privateKey\",\n  stateDefinition: {\n    name: \"crypto\",\n  },\n};\n\nexport class PrivateKeyMigrator extends Migrator<19, 20> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.keys?.privateKey?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ENCRYPTED_PRIVATE_KEY, value);\n        delete account.keys.privateKey;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser<Record<string, string>>(\n        userId,\n        USER_ENCRYPTED_PRIVATE_KEY,\n      );\n      if (account && value) {\n        account.keys = Object.assign(account.keys ?? {}, {\n          privateKey: {\n            encrypted: value,\n          },\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ENCRYPTED_PRIVATE_KEY, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype CollectionDataType = {\n  id: string;\n  organizationId: string;\n  name: string;\n  externalId: string;\n  readOnly: boolean;\n  manage: boolean;\n  hidePasswords: boolean;\n};\n\ntype ExpectedAccountType = {\n  data?: {\n    collections?: {\n      encrypted?: Record<string, CollectionDataType>;\n    };\n  };\n};\n\nconst USER_ENCRYPTED_COLLECTIONS: KeyDefinitionLike = {\n  key: \"collections\",\n  stateDefinition: {\n    name: \"collection\",\n  },\n};\n\nexport class CollectionMigrator extends Migrator<20, 21> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.data?.collections?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ENCRYPTED_COLLECTIONS, value);\n        delete account.data.collections;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, USER_ENCRYPTED_COLLECTIONS);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          collections: {\n            encrypted: value,\n          },\n        });\n\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ENCRYPTED_COLLECTIONS, null);\n    }\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    collapsedGroupings?: string[];\n  };\n};\n\nconst COLLAPSED_GROUPINGS: KeyDefinitionLike = {\n  key: \"collapsedGroupings\",\n  stateDefinition: {\n    name: \"vaultFilter\",\n  },\n};\n\nexport class CollapsedGroupingsMigrator extends Migrator<21, 22> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.settings?.collapsedGroupings;\n      if (value != null) {\n        await helper.setToUser(userId, COLLAPSED_GROUPINGS, value);\n        delete account.settings.collapsedGroupings;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, COLLAPSED_GROUPINGS);\n      if (account) {\n        account.settings = Object.assign(account.settings ?? {}, {\n          collapsedGroupings: value,\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, COLLAPSED_GROUPINGS, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    disableAutoBiometricsPrompt?: boolean;\n    dismissedBiometricRequirePasswordOnStartCallout?: boolean;\n  };\n};\n\n// prompt cancelled is refreshed on every app start/quit/unlock, so we don't need to migrate it\n\nexport const DISMISSED_BIOMETRIC_REQUIRE_PASSWORD_ON_START_CALLOUT: KeyDefinitionLike = {\n  key: \"dismissedBiometricRequirePasswordOnStartCallout\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport const PROMPT_AUTOMATICALLY: KeyDefinitionLike = {\n  key: \"promptAutomatically\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport class MoveBiometricPromptsToStateProviders extends Migrator<22, 23> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        if (account == null) {\n          return;\n        }\n        // Move account data\n\n        if (account?.settings?.dismissedBiometricRequirePasswordOnStartCallout != null) {\n          await helper.setToUser(\n            userId,\n            DISMISSED_BIOMETRIC_REQUIRE_PASSWORD_ON_START_CALLOUT,\n            account.settings.dismissedBiometricRequirePasswordOnStartCallout,\n          );\n        }\n\n        if (account?.settings?.disableAutoBiometricsPrompt != null) {\n          await helper.setToUser(\n            userId,\n            PROMPT_AUTOMATICALLY,\n            !account.settings.disableAutoBiometricsPrompt,\n          );\n        }\n\n        // Delete old account data\n        delete account?.settings?.dismissedBiometricRequirePasswordOnStartCallout;\n        delete account?.settings?.disableAutoBiometricsPrompt;\n        await helper.set(userId, account);\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      let updatedAccount = false;\n\n      const userDismissed = await helper.getFromUser<boolean>(\n        userId,\n        DISMISSED_BIOMETRIC_REQUIRE_PASSWORD_ON_START_CALLOUT,\n      );\n\n      if (userDismissed) {\n        account ??= {};\n        account.settings ??= {};\n\n        updatedAccount = true;\n        account.settings.dismissedBiometricRequirePasswordOnStartCallout = userDismissed;\n        await helper.setToUser(userId, DISMISSED_BIOMETRIC_REQUIRE_PASSWORD_ON_START_CALLOUT, null);\n      }\n\n      const userPromptAutomatically = await helper.getFromUser<boolean>(\n        userId,\n        PROMPT_AUTOMATICALLY,\n      );\n\n      if (userPromptAutomatically != null) {\n        account ??= {};\n        account.settings ??= {};\n\n        updatedAccount = true;\n        account.settings.disableAutoBiometricsPrompt = !userPromptAutomatically;\n        await helper.setToUser(userId, PROMPT_AUTOMATICALLY, null);\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    smOnboardingTasks?: Record<string, Record<string, boolean>>;\n  };\n};\n\nexport const SM_ONBOARDING_TASKS: KeyDefinitionLike = {\n  key: \"tasks\",\n  stateDefinition: { name: \"smOnboarding\" },\n};\n\nexport class SmOnboardingTasksMigrator extends Migrator<23, 24> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        // Move account data\n        if (account?.settings?.smOnboardingTasks != null) {\n          await helper.setToUser(userId, SM_ONBOARDING_TASKS, account.settings.smOnboardingTasks);\n\n          // Delete old account data\n          delete account.settings.smOnboardingTasks;\n          await helper.set(userId, account);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      const smOnboardingTasks = await helper.getFromUser<Record<string, Record<string, boolean>>>(\n        userId,\n        SM_ONBOARDING_TASKS,\n      );\n      if (smOnboardingTasks) {\n        account ??= {};\n        account.settings ??= {};\n\n        account.settings.smOnboardingTasks = smOnboardingTasks;\n        await helper.setToUser(userId, SM_ONBOARDING_TASKS, null);\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { StateDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nconst ClearClipboardDelay = {\n  Never: null as null,\n  TenSeconds: 10,\n  TwentySeconds: 20,\n  ThirtySeconds: 30,\n  OneMinute: 60,\n  TwoMinutes: 120,\n  FiveMinutes: 300,\n} as const;\n\ntype ClearClipboardDelaySetting = (typeof ClearClipboardDelay)[keyof typeof ClearClipboardDelay];\n\ntype ExpectedAccountState = {\n  settings?: {\n    clearClipboard?: ClearClipboardDelaySetting;\n  };\n};\n\nconst autofillSettingsLocalStateDefinition: {\n  stateDefinition: StateDefinitionLike;\n} = {\n  stateDefinition: {\n    name: \"autofillSettingsLocal\",\n  },\n};\n\nexport class ClearClipboardDelayMigrator extends Migrator<24, 25> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // account state (e.g. account settings -> state provider framework keys)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    // migrate account state\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      const accountSettings = account?.settings;\n\n      if (accountSettings?.clearClipboard !== undefined) {\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsLocalStateDefinition, key: \"clearClipboardDelay\" },\n          accountSettings.clearClipboard,\n        );\n        delete account.settings.clearClipboard;\n\n        // update the state account settings with the migrated values deleted\n        await helper.set(userId, account);\n      }\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // account state (e.g. state provider framework keys -> account settings)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    // rollback account state\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let settings = account?.settings || {};\n\n      const clearClipboardDelay: ClearClipboardDelaySetting = await helper.getFromUser(userId, {\n        ...autofillSettingsLocalStateDefinition,\n        key: \"clearClipboardDelay\",\n      });\n\n      // update new settings and remove the account state provider framework keys for the rolled back values\n      if (clearClipboardDelay !== undefined) {\n        settings = { ...settings, clearClipboard: clearClipboardDelay };\n\n        await helper.setToUser(\n          userId,\n          { ...autofillSettingsLocalStateDefinition, key: \"clearClipboardDelay\" },\n          null,\n        );\n\n        // commit updated settings to state\n        await helper.set(userId, {\n          ...account,\n          settings,\n        });\n      }\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  profile?: {\n    lastSync?: string;\n  };\n};\n\nconst LAST_SYNC_KEY: KeyDefinitionLike = {\n  key: \"lastSync\",\n  stateDefinition: {\n    name: \"sync\",\n  },\n};\n\nexport class RevertLastSyncMigrator extends Migrator<25, 26> {\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.profile?.lastSync;\n      await helper.setToUser(userId, LAST_SYNC_KEY, value ?? null);\n      if (value != null) {\n        delete account.profile.lastSync;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, LAST_SYNC_KEY);\n      if (account) {\n        account.profile = Object.assign(account.profile ?? {}, {\n          lastSync: value,\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, LAST_SYNC_KEY, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  settings?: {\n    disableBadgeCounter?: boolean;\n  };\n};\n\nconst enableBadgeCounterKeyDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"badgeSettings\",\n  },\n  key: \"enableBadgeCounter\",\n};\n\nexport class BadgeSettingsMigrator extends Migrator<26, 27> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // account state (e.g. account settings -> state provider framework keys)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    // migrate account state\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      const accountSettings = account?.settings;\n\n      if (accountSettings?.disableBadgeCounter != undefined) {\n        await helper.setToUser(\n          userId,\n          enableBadgeCounterKeyDefinition,\n          !accountSettings.disableBadgeCounter,\n        );\n        delete account.settings.disableBadgeCounter;\n\n        // update the state account settings with the migrated values deleted\n        await helper.set(userId, account);\n      }\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // account state (e.g. state provider framework keys -> account settings)\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    // rollback account state\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let settings = account?.settings || {};\n\n      const enableBadgeCounter: boolean = await helper.getFromUser(\n        userId,\n        enableBadgeCounterKeyDefinition,\n      );\n\n      // update new settings and remove the account state provider framework keys for the rolled back values\n      if (enableBadgeCounter != undefined) {\n        settings = { ...settings, disableBadgeCounter: !enableBadgeCounter };\n\n        await helper.setToUser(userId, enableBadgeCounterKeyDefinition, null);\n\n        // commit updated settings to state\n        await helper.set(userId, {\n          ...account,\n          settings,\n        });\n      }\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  settings?: {\n    biometricUnlock?: boolean;\n  };\n};\n\nexport const BIOMETRIC_UNLOCK_ENABLED: KeyDefinitionLike = {\n  key: \"biometricUnlockEnabled\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport class MoveBiometricUnlockToStateProviders extends Migrator<27, 28> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        if (account == null) {\n          return;\n        }\n        // Move account data\n        if (account?.settings?.biometricUnlock != null) {\n          await helper.setToUser(\n            userId,\n            BIOMETRIC_UNLOCK_ENABLED,\n            account.settings.biometricUnlock,\n          );\n        }\n\n        // Delete old account data\n        delete account?.settings?.biometricUnlock;\n        await helper.set(userId, account);\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountType) {\n      const biometricUnlock = await helper.getFromUser<boolean>(userId, BIOMETRIC_UNLOCK_ENABLED);\n\n      if (biometricUnlock != null) {\n        account ??= {};\n        account.settings ??= {};\n\n        account.settings.biometricUnlock = biometricUnlock;\n        await helper.setToUser(userId, BIOMETRIC_UNLOCK_ENABLED, null);\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobalState = {\n  disableAddLoginNotification?: boolean;\n  disableChangedPasswordNotification?: boolean;\n};\n\nexport class UserNotificationSettingsKeyMigrator extends Migrator<28, 29> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const globalState = await helper.get<ExpectedGlobalState>(\"global\");\n\n    // disableAddLoginNotification -> enableAddedLoginPrompt\n    if (globalState?.disableAddLoginNotification != null) {\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"userNotificationSettings\",\n          },\n          key: \"enableAddedLoginPrompt\",\n        },\n        !globalState.disableAddLoginNotification,\n      );\n\n      // delete `disableAddLoginNotification` from state global\n      delete globalState.disableAddLoginNotification;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n\n    // disableChangedPasswordNotification -> enableChangedPasswordPrompt\n    if (globalState?.disableChangedPasswordNotification != null) {\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"userNotificationSettings\",\n          },\n          key: \"enableChangedPasswordPrompt\",\n        },\n        !globalState.disableChangedPasswordNotification,\n      );\n\n      // delete `disableChangedPasswordNotification` from state global\n      delete globalState.disableChangedPasswordNotification;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const globalState = (await helper.get<ExpectedGlobalState>(\"global\")) || {};\n\n    const enableAddedLoginPrompt: boolean = await helper.getFromGlobal({\n      stateDefinition: {\n        name: \"userNotificationSettings\",\n      },\n      key: \"enableAddedLoginPrompt\",\n    });\n\n    const enableChangedPasswordPrompt: boolean = await helper.getFromGlobal({\n      stateDefinition: {\n        name: \"userNotificationSettings\",\n      },\n      key: \"enableChangedPasswordPrompt\",\n    });\n\n    // enableAddedLoginPrompt -> disableAddLoginNotification\n    if (enableAddedLoginPrompt) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        disableAddLoginNotification: !enableAddedLoginPrompt,\n      });\n\n      // remove the global state provider framework key for `enableAddedLoginPrompt`\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"userNotificationSettings\",\n          },\n          key: \"enableAddedLoginPrompt\",\n        },\n        null,\n      );\n    }\n\n    // enableChangedPasswordPrompt -> disableChangedPasswordNotification\n    if (enableChangedPasswordPrompt) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        disableChangedPasswordNotification: !enableChangedPasswordPrompt,\n      });\n\n      // remove the global state provider framework key for `enableChangedPasswordPrompt`\n      await helper.setToGlobal(\n        {\n          stateDefinition: {\n            name: \"userNotificationSettings\",\n          },\n          key: \"enableChangedPasswordPrompt\",\n        },\n        null,\n      );\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nenum PolicyType {\n  TwoFactorAuthentication = 0, // Requires users to have 2fa enabled\n  MasterPassword = 1, // Sets minimum requirements for master password complexity\n  PasswordGenerator = 2, // Sets minimum requirements/default type for generated passwords/passphrases\n  SingleOrg = 3, // Allows users to only be apart of one organization\n  RequireSso = 4, // Requires users to authenticate with SSO\n  PersonalOwnership = 5, // Disables personal vault ownership for adding/cloning items\n  DisableSend = 6, // Disables the ability to create and edit Bitwarden Sends\n  SendOptions = 7, // Sets restrictions or defaults for Bitwarden Sends\n  ResetPassword = 8, // Allows orgs to use reset password : also can enable auto-enrollment during invite flow\n  MaximumVaultTimeout = 9, // Sets the maximum allowed vault timeout\n  DisablePersonalVaultExport = 10, // Disable personal vault export\n  ActivateAutofill = 11, // Activates autofill with page load on the browser extension\n}\n\ntype PolicyDataType = {\n  id: string;\n  organizationId: string;\n  type: PolicyType;\n  data: Record<string, string | number | boolean>;\n  enabled: boolean;\n};\n\ntype ExpectedAccountType = {\n  data?: {\n    policies?: {\n      encrypted?: Record<string, PolicyDataType>;\n    };\n  };\n};\n\nconst POLICIES_KEY: KeyDefinitionLike = {\n  key: \"policies\",\n  stateDefinition: {\n    name: \"policies\",\n  },\n};\n\nexport class PolicyMigrator extends Migrator<29, 30> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.data?.policies?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, POLICIES_KEY, value);\n        delete account.data.policies;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => migrateAccount(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, POLICIES_KEY);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          policies: {\n            encrypted: value,\n          },\n        });\n\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, POLICIES_KEY, null);\n    }\n    await Promise.all(accounts.map(({ userId, account }) => rollbackAccount(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobalState = {\n  disableContextMenuItem?: boolean;\n};\n\nconst enableContextMenuKeyDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"autofillSettings\",\n  },\n  key: \"enableContextMenu\",\n};\n\nexport class EnableContextMenuMigrator extends Migrator<30, 31> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const globalState = await helper.get<ExpectedGlobalState>(\"global\");\n\n    // disableContextMenuItem -> enableContextMenu\n    if (globalState?.disableContextMenuItem != null) {\n      await helper.setToGlobal(enableContextMenuKeyDefinition, !globalState.disableContextMenuItem);\n\n      // delete `disableContextMenuItem` from state global\n      delete globalState.disableContextMenuItem;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const globalState = (await helper.get<ExpectedGlobalState>(\"global\")) || {};\n\n    const enableContextMenu: boolean = await helper.getFromGlobal(enableContextMenuKeyDefinition);\n\n    // enableContextMenu -> disableContextMenuItem\n    if (enableContextMenu != null) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        disableContextMenuItem: !enableContextMenu,\n      });\n\n      // remove the global state provider framework key for `enableContextMenu`\n      await helper.setToGlobal(enableContextMenuKeyDefinition, null);\n    }\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobal = {\n  locale?: string;\n};\n\nexport const LOCALE_KEY = {\n  key: \"locale\",\n  stateDefinition: {\n    name: \"translation\",\n  },\n};\n\nexport class PreferredLanguageMigrator extends Migrator<31, 32> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // global state\n    const global = await helper.get<ExpectedGlobal>(\"global\");\n    if (!global?.locale) {\n      return;\n    }\n\n    await helper.setToGlobal(LOCALE_KEY, global.locale);\n    delete global.locale;\n    await helper.set(\"global\", global);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const locale = await helper.getFromGlobal<string>(LOCALE_KEY);\n\n    if (!locale) {\n      return;\n    }\n    const global = (await helper.get<ExpectedGlobal>(\"global\")) ?? {};\n    global.locale = locale;\n    await helper.set(\"global\", global);\n    await helper.setToGlobal(LOCALE_KEY, null);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nexport const APP_ID_STORAGE_KEY = \"appId\";\nexport const ANONYMOUS_APP_ID_STORAGE_KEY = \"anonymousAppId\";\n\nexport const APP_ID_KEY: KeyDefinitionLike = {\n  key: APP_ID_STORAGE_KEY,\n  stateDefinition: { name: \"applicationId\" },\n};\n\nexport const ANONYMOUS_APP_ID_KEY: KeyDefinitionLike = {\n  key: ANONYMOUS_APP_ID_STORAGE_KEY,\n  stateDefinition: { name: \"applicationId\" },\n};\n\nexport class AppIdMigrator extends Migrator<32, 33> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const appId = await helper.get<string>(APP_ID_STORAGE_KEY);\n    const anonymousAppId = await helper.get<string>(ANONYMOUS_APP_ID_STORAGE_KEY);\n\n    if (appId != null) {\n      await helper.setToGlobal(APP_ID_KEY, appId);\n      await helper.set(APP_ID_STORAGE_KEY, null);\n    }\n\n    if (anonymousAppId != null) {\n      await helper.setToGlobal(ANONYMOUS_APP_ID_KEY, anonymousAppId);\n      await helper.set(ANONYMOUS_APP_ID_STORAGE_KEY, null);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const appId = await helper.getFromGlobal<string>(APP_ID_KEY);\n    const anonymousAppId = await helper.getFromGlobal<string>(ANONYMOUS_APP_ID_KEY);\n\n    if (appId != null) {\n      await helper.set(APP_ID_STORAGE_KEY, appId);\n      await helper.setToGlobal(APP_ID_KEY, null);\n    }\n    if (anonymousAppId != null) {\n      await helper.set(ANONYMOUS_APP_ID_STORAGE_KEY, anonymousAppId);\n      await helper.setToGlobal(ANONYMOUS_APP_ID_KEY, null);\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nconst UriMatchStrategy = {\n  Domain: 0,\n  Host: 1,\n  StartsWith: 2,\n  Exact: 3,\n  RegularExpression: 4,\n  Never: 5,\n} as const;\n\ntype UriMatchStrategySetting = (typeof UriMatchStrategy)[keyof typeof UriMatchStrategy];\n\ntype ExpectedAccountState = {\n  settings?: {\n    defaultUriMatch?: UriMatchStrategySetting;\n    settings?: {\n      equivalentDomains?: string[][];\n    };\n  };\n};\n\ntype ExpectedGlobalState = {\n  neverDomains?: { [key: string]: null };\n};\n\nconst defaultUriMatchStrategyDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"domainSettings\",\n  },\n  key: \"defaultUriMatchStrategy\",\n};\n\nconst equivalentDomainsDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"domainSettings\",\n  },\n  key: \"equivalentDomains\",\n};\n\nconst neverDomainsDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"domainSettings\",\n  },\n  key: \"neverDomains\",\n};\n\nexport class DomainSettingsMigrator extends Migrator<33, 34> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    let updateAccount = false;\n\n    // global state (\"neverDomains\")\n    const globalState = await helper.get<ExpectedGlobalState>(\"global\");\n\n    if (globalState?.neverDomains != null) {\n      await helper.setToGlobal(neverDomainsDefinition, globalState.neverDomains);\n\n      // delete `neverDomains` from state global\n      delete globalState.neverDomains;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n\n    // account state (\"defaultUriMatch\" and \"settings.equivalentDomains\")\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    // migrate account state\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      const accountSettings = account?.settings;\n\n      if (accountSettings?.defaultUriMatch != undefined) {\n        await helper.setToUser(\n          userId,\n          defaultUriMatchStrategyDefinition,\n          accountSettings.defaultUriMatch,\n        );\n        delete account.settings.defaultUriMatch;\n\n        updateAccount = true;\n      }\n\n      if (accountSettings?.settings?.equivalentDomains != undefined) {\n        await helper.setToUser(\n          userId,\n          equivalentDomainsDefinition,\n          accountSettings.settings.equivalentDomains,\n        );\n        delete account.settings.settings.equivalentDomains;\n        delete account.settings.settings;\n\n        updateAccount = true;\n      }\n\n      if (updateAccount) {\n        // update the state account settings with the migrated values deleted\n        await helper.set(userId, account);\n      }\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    let updateAccount = false;\n\n    // global state (\"neverDomains\")\n    const globalState = (await helper.get<ExpectedGlobalState>(\"global\")) || {};\n    const neverDomains: { [key: string]: null } =\n      await helper.getFromGlobal(neverDomainsDefinition);\n\n    if (neverDomains != null) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        neverDomains: neverDomains,\n      });\n\n      // remove the global state provider framework key for `neverDomains`\n      await helper.setToGlobal(neverDomainsDefinition, null);\n    }\n\n    // account state (\"defaultUriMatchStrategy\" and \"equivalentDomains\")\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    // rollback account state\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let settings = account?.settings || {};\n\n      const defaultUriMatchStrategy: UriMatchStrategySetting = await helper.getFromUser(\n        userId,\n        defaultUriMatchStrategyDefinition,\n      );\n\n      const equivalentDomains: string[][] = await helper.getFromUser(\n        userId,\n        equivalentDomainsDefinition,\n      );\n\n      // update new settings and remove the account state provider framework keys for the rolled back values\n      if (defaultUriMatchStrategy != null) {\n        settings = { ...settings, defaultUriMatch: defaultUriMatchStrategy };\n\n        await helper.setToUser(userId, defaultUriMatchStrategyDefinition, null);\n\n        updateAccount = true;\n      }\n\n      if (equivalentDomains != null) {\n        settings = { ...settings, settings: { equivalentDomains } };\n\n        await helper.setToUser(userId, equivalentDomainsDefinition, null);\n\n        updateAccount = true;\n      }\n\n      // commit updated settings to state\n      if (updateAccount) {\n        await helper.set(userId, {\n          ...account,\n          settings,\n        });\n      }\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobal = { theme?: string };\n\nconst THEME_SELECTION: KeyDefinitionLike = {\n  key: \"selection\",\n  stateDefinition: { name: \"theming\" },\n};\n\nexport class MoveThemeToStateProviderMigrator extends Migrator<34, 35> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyGlobalState = await helper.get<ExpectedGlobal>(\"global\");\n    const theme = legacyGlobalState?.theme;\n    if (theme != null) {\n      await helper.setToGlobal(THEME_SELECTION, theme);\n      delete legacyGlobalState.theme;\n      await helper.set(\"global\", legacyGlobalState);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const theme = await helper.getFromGlobal<string>(THEME_SELECTION);\n    if (theme != null) {\n      const legacyGlobal = (await helper.get<ExpectedGlobal>(\"global\")) ?? {};\n      legacyGlobal.theme = theme;\n      await helper.set(\"global\", legacyGlobal);\n      await helper.removeFromGlobal(THEME_SELECTION);\n    }\n  }\n}\n","import { MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  settings?: {\n    dontShowCardsCurrentTab?: boolean;\n    dontShowIdentitiesCurrentTab?: boolean;\n  };\n};\n\nconst vaultSettingsStateDefinition: {\n  stateDefinition: StateDefinitionLike;\n} = {\n  stateDefinition: {\n    name: \"vaultSettings\",\n  },\n};\n\nexport class VaultSettingsKeyMigrator extends Migrator<35, 36> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let updateAccount = false;\n      const accountSettings = account?.settings;\n\n      if (accountSettings?.dontShowCardsCurrentTab != null) {\n        await helper.setToUser(\n          userId,\n          { ...vaultSettingsStateDefinition, key: \"showCardsCurrentTab\" },\n          !accountSettings.dontShowCardsCurrentTab,\n        );\n        delete account.settings.dontShowCardsCurrentTab;\n        updateAccount = true;\n      }\n\n      if (accountSettings?.dontShowIdentitiesCurrentTab != null) {\n        await helper.setToUser(\n          userId,\n          { ...vaultSettingsStateDefinition, key: \"showIdentitiesCurrentTab\" },\n          !accountSettings.dontShowIdentitiesCurrentTab,\n        );\n        delete account.settings.dontShowIdentitiesCurrentTab;\n        updateAccount = true;\n      }\n\n      if (updateAccount) {\n        await helper.set(userId, account);\n      }\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      let updateAccount = false;\n      let settings = account?.settings ?? {};\n\n      const showCardsCurrentTab = await helper.getFromUser<boolean>(userId, {\n        ...vaultSettingsStateDefinition,\n        key: \"showCardsCurrentTab\",\n      });\n\n      const showIdentitiesCurrentTab = await helper.getFromUser<boolean>(userId, {\n        ...vaultSettingsStateDefinition,\n        key: \"showIdentitiesCurrentTab\",\n      });\n\n      if (showCardsCurrentTab != null) {\n        // invert the value to match the new naming convention\n        settings = { ...settings, dontShowCardsCurrentTab: !showCardsCurrentTab };\n\n        await helper.setToUser(\n          userId,\n          { ...vaultSettingsStateDefinition, key: \"showCardsCurrentTab\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (showIdentitiesCurrentTab != null) {\n        // invert the value to match the new naming convention\n        settings = { ...settings, dontShowIdentitiesCurrentTab: !showIdentitiesCurrentTab };\n\n        await helper.setToUser(\n          userId,\n          { ...vaultSettingsStateDefinition, key: \"showIdentitiesCurrentTab\" },\n          null,\n        );\n\n        updateAccount = true;\n      }\n\n      if (updateAccount) {\n        await helper.set(userId, { ...account, settings });\n      }\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  settings?: { avatarColor?: string };\n};\n\nconst AVATAR_COLOR_STATE: StateDefinitionLike = { name: \"avatar\" };\n\nconst AVATAR_COLOR_KEY: KeyDefinitionLike = {\n  key: \"avatarColor\",\n  stateDefinition: AVATAR_COLOR_STATE,\n};\n\nexport class AvatarColorMigrator extends Migrator<36, 37> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        // Move account avatarColor\n        if (account?.settings?.avatarColor != null) {\n          await helper.setToUser(userId, AVATAR_COLOR_KEY, account.settings.avatarColor);\n\n          // Delete old account avatarColor property\n          delete account?.settings?.avatarColor;\n          await helper.set(userId, account);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountState) {\n      let updatedAccount = false;\n      const userAvatarColor = await helper.getFromUser<string>(userId, AVATAR_COLOR_KEY);\n\n      if (userAvatarColor) {\n        if (!account) {\n          account = {};\n        }\n\n        updatedAccount = true;\n        account.settings.avatarColor = userAvatarColor;\n        await helper.setToUser(userId, AVATAR_COLOR_KEY, null);\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\n// Types to represent data as it is stored in JSON\ntype ExpectedAccountType = {\n  tokens?: {\n    accessToken?: string;\n    refreshToken?: string;\n  };\n  profile?: {\n    apiKeyClientId?: string;\n    email?: string;\n  };\n  keys?: {\n    apiKeyClientSecret?: string;\n  };\n};\n\ntype ExpectedGlobalType = {\n  twoFactorToken?: string;\n};\n\nexport const EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL: KeyDefinitionLike = {\n  key: \"emailTwoFactorTokenRecord\",\n  stateDefinition: {\n    name: \"tokenDiskLocal\",\n  },\n};\n\nconst TOKEN_STATE_DEF_LIKE: StateDefinitionLike = {\n  name: \"token\",\n};\n\nexport const ACCESS_TOKEN_DISK: KeyDefinitionLike = {\n  key: \"accessToken\", // matches KeyDefinition.key\n  stateDefinition: TOKEN_STATE_DEF_LIKE,\n};\n\nexport const REFRESH_TOKEN_DISK: KeyDefinitionLike = {\n  key: \"refreshToken\",\n  stateDefinition: TOKEN_STATE_DEF_LIKE,\n};\n\nexport const API_KEY_CLIENT_ID_DISK: KeyDefinitionLike = {\n  key: \"apiKeyClientId\",\n  stateDefinition: TOKEN_STATE_DEF_LIKE,\n};\n\nexport const API_KEY_CLIENT_SECRET_DISK: KeyDefinitionLike = {\n  key: \"apiKeyClientSecret\",\n  stateDefinition: TOKEN_STATE_DEF_LIKE,\n};\n\nexport class TokenServiceStateProviderMigrator extends Migrator<37, 38> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // Move global data\n    const globalData = await helper.get<ExpectedGlobalType>(\"global\");\n\n    // Create new global record for 2FA token that we can accumulate data in\n    const emailTwoFactorTokenRecord = {};\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(\n      userId: string,\n      account: ExpectedAccountType | undefined,\n      globalTwoFactorToken: string | undefined,\n      emailTwoFactorTokenRecord: Record<string, string>,\n    ): Promise<void> {\n      let updatedAccount = false;\n\n      // migrate 2FA token from global to user state\n      // Due to the existing implmentation, n users on the same device share the same global state value for 2FA token.\n      // So, we will just migrate it to all users to keep it valid for whichever was the user that set it previously.\n      // Note: don't bother migrating 2FA Token if user account or email is undefined\n      const email = account?.profile?.email;\n      if (globalTwoFactorToken != undefined && account != undefined && email != undefined) {\n        emailTwoFactorTokenRecord[email] = globalTwoFactorToken;\n        // Note: don't set updatedAccount to true here as we aren't updating\n        // the legacy user state, just migrating a global state to a new user state\n      }\n\n      // Migrate access token\n      const existingAccessToken = account?.tokens?.accessToken;\n\n      if (existingAccessToken != null) {\n        // Only migrate data that exists\n        if (helper.type !== \"web-disk-local\") {\n          // only migrate access token to session storage - never local.\n          await helper.setToUser(userId, ACCESS_TOKEN_DISK, existingAccessToken);\n        }\n        delete account.tokens.accessToken;\n        updatedAccount = true;\n      }\n\n      // Migrate refresh token\n      const existingRefreshToken = account?.tokens?.refreshToken;\n\n      if (existingRefreshToken != null) {\n        if (helper.type !== \"web-disk-local\") {\n          // only migrate refresh token to session storage - never local.\n          await helper.setToUser(userId, REFRESH_TOKEN_DISK, existingRefreshToken);\n        }\n        delete account.tokens.refreshToken;\n        updatedAccount = true;\n      }\n\n      // Migrate API key client id\n      const existingApiKeyClientId = account?.profile?.apiKeyClientId;\n\n      if (existingApiKeyClientId != null) {\n        if (helper.type !== \"web-disk-local\") {\n          // only migrate client id to session storage - never local.\n          await helper.setToUser(userId, API_KEY_CLIENT_ID_DISK, existingApiKeyClientId);\n        }\n        delete account.profile.apiKeyClientId;\n        updatedAccount = true;\n      }\n\n      // Migrate API key client secret\n      const existingApiKeyClientSecret = account?.keys?.apiKeyClientSecret;\n      if (existingApiKeyClientSecret != null) {\n        if (helper.type !== \"web-disk-local\") {\n          // only migrate client secret to session storage - never local.\n          await helper.setToUser(userId, API_KEY_CLIENT_SECRET_DISK, existingApiKeyClientSecret);\n        }\n        delete account.keys.apiKeyClientSecret;\n        updatedAccount = true;\n      }\n\n      if (updatedAccount) {\n        // Save the migrated account only if it was updated\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([\n      ...accounts.map(({ userId, account }) =>\n        migrateAccount(userId, account, globalData?.twoFactorToken, emailTwoFactorTokenRecord),\n      ),\n    ]);\n\n    // Save the global 2FA token record\n    await helper.setToGlobal(EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL, emailTwoFactorTokenRecord);\n\n    // Delete global data\n    delete globalData?.twoFactorToken;\n    await helper.set(\"global\", globalData);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    // Since we migrated the global 2FA token to all users, we need to rollback the 2FA token for all users\n    // but we only need to set it to the global state once\n\n    // Go through accounts and find the first user that has a non-null email and 2FA token\n    let migratedTwoFactorToken: string | null = null;\n    for (const { account } of accounts) {\n      const email = account?.profile?.email;\n      if (email == null) {\n        continue;\n      }\n      const emailTwoFactorTokenRecord: Record<string, string> = await helper.getFromGlobal(\n        EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL,\n      );\n\n      migratedTwoFactorToken = emailTwoFactorTokenRecord[email];\n\n      if (migratedTwoFactorToken != null) {\n        break;\n      }\n    }\n\n    if (migratedTwoFactorToken != null) {\n      let legacyGlobal = await helper.get<ExpectedGlobalType>(\"global\");\n      if (!legacyGlobal) {\n        legacyGlobal = {};\n      }\n      legacyGlobal.twoFactorToken = migratedTwoFactorToken;\n      await helper.set(\"global\", legacyGlobal);\n    }\n\n    // delete global 2FA token record\n    await helper.setToGlobal(EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL, null);\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      let updatedLegacyAccount = false;\n\n      // Rollback access token\n      const migratedAccessToken = await helper.getFromUser<string>(userId, ACCESS_TOKEN_DISK);\n\n      if (account?.tokens && migratedAccessToken != null) {\n        account.tokens.accessToken = migratedAccessToken;\n        updatedLegacyAccount = true;\n      }\n\n      await helper.setToUser(userId, ACCESS_TOKEN_DISK, null);\n\n      // Rollback refresh token\n      const migratedRefreshToken = await helper.getFromUser<string>(userId, REFRESH_TOKEN_DISK);\n\n      if (account?.tokens && migratedRefreshToken != null) {\n        account.tokens.refreshToken = migratedRefreshToken;\n        updatedLegacyAccount = true;\n      }\n\n      await helper.setToUser(userId, REFRESH_TOKEN_DISK, null);\n\n      // Rollback API key client id\n\n      const migratedApiKeyClientId = await helper.getFromUser<string>(\n        userId,\n        API_KEY_CLIENT_ID_DISK,\n      );\n\n      if (account?.profile && migratedApiKeyClientId != null) {\n        account.profile.apiKeyClientId = migratedApiKeyClientId;\n        updatedLegacyAccount = true;\n      }\n\n      await helper.setToUser(userId, API_KEY_CLIENT_ID_DISK, null);\n\n      // Rollback API key client secret\n      const migratedApiKeyClientSecret = await helper.getFromUser<string>(\n        userId,\n        API_KEY_CLIENT_SECRET_DISK,\n      );\n\n      if (account?.keys && migratedApiKeyClientSecret != null) {\n        account.keys.apiKeyClientSecret = migratedApiKeyClientSecret;\n        updatedLegacyAccount = true;\n      }\n\n      await helper.setToUser(userId, API_KEY_CLIENT_SECRET_DISK, null);\n\n      if (updatedLegacyAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  profile?: {\n    hasPremiumPersonally?: boolean;\n    hasPremiumFromOrganization?: boolean;\n  };\n};\n\ntype ExpectedBillingAccountProfileType = {\n  hasPremiumPersonally: boolean;\n  hasPremiumFromOrganization: boolean;\n};\n\nexport const BILLING_ACCOUNT_PROFILE_KEY_DEFINITION: KeyDefinitionLike = {\n  key: \"accountProfile\",\n  stateDefinition: {\n    name: \"billing\",\n  },\n};\n\nexport class MoveBillingAccountProfileMigrator extends Migrator<38, 39> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    const migrateAccount = async (userId: string, account: ExpectedAccountType): Promise<void> => {\n      const hasPremiumPersonally = account?.profile?.hasPremiumPersonally;\n      const hasPremiumFromOrganization = account?.profile?.hasPremiumFromOrganization;\n\n      if (hasPremiumPersonally != null || hasPremiumFromOrganization != null) {\n        await helper.setToUser(userId, BILLING_ACCOUNT_PROFILE_KEY_DEFINITION, {\n          hasPremiumPersonally: hasPremiumPersonally,\n          hasPremiumFromOrganization: hasPremiumFromOrganization,\n        });\n\n        delete account?.profile?.hasPremiumPersonally;\n        delete account?.profile?.hasPremiumFromOrganization;\n        await helper.set(userId, account);\n      }\n    };\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    const rollbackAccount = async (userId: string, account: ExpectedAccountType): Promise<void> => {\n      const value = await helper.getFromUser<ExpectedBillingAccountProfileType>(\n        userId,\n        BILLING_ACCOUNT_PROFILE_KEY_DEFINITION,\n      );\n\n      if (account && value) {\n        account.profile = Object.assign(account.profile ?? {}, {\n          hasPremiumPersonally: value?.hasPremiumPersonally,\n          hasPremiumFromOrganization: value?.hasPremiumFromOrganization,\n        });\n        await helper.set(userId, account);\n      }\n\n      await helper.setToUser(userId, BILLING_ACCOUNT_PROFILE_KEY_DEFINITION, null);\n    };\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { profile?: { everBeenUnlocked?: boolean } };\n\nexport class RemoveEverBeenUnlockedMigrator extends Migrator<3, 4> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function removeEverBeenUnlocked(userId: string, account: ExpectedAccountType) {\n      if (account?.profile?.everBeenUnlocked != null) {\n        delete account.profile.everBeenUnlocked;\n        return helper.set(userId, account);\n      }\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all(accounts.map(({ userId, account }) => removeEverBeenUnlocked(userId, account)));\n  }\n\n  rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\n// Local declarations of `OrganizationData` and the types of it's properties.\n// Duplicated to remain frozen in time when migration occurs.\nenum OrganizationUserStatusType {\n  Invited = 0,\n  Accepted = 1,\n  Confirmed = 2,\n  Revoked = -1,\n}\n\nenum OrganizationUserType {\n  Owner = 0,\n  Admin = 1,\n  User = 2,\n  Manager = 3,\n  Custom = 4,\n}\n\ntype PermissionsApi = {\n  accessEventLogs: boolean;\n  accessImportExport: boolean;\n  accessReports: boolean;\n  createNewCollections: boolean;\n  editAnyCollection: boolean;\n  deleteAnyCollection: boolean;\n  editAssignedCollections: boolean;\n  deleteAssignedCollections: boolean;\n  manageCiphers: boolean;\n  manageGroups: boolean;\n  manageSso: boolean;\n  managePolicies: boolean;\n  manageUsers: boolean;\n  manageResetPassword: boolean;\n  manageScim: boolean;\n};\n\nenum ProviderType {\n  Msp = 0,\n  Reseller = 1,\n}\n\nenum ProductType {\n  Free = 0,\n  Families = 1,\n  Teams = 2,\n  Enterprise = 3,\n  TeamsStarter = 4,\n}\n\ntype OrganizationData = {\n  id: string;\n  name: string;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  hasPublicAndPrivateKeys: boolean;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  isProviderUser: boolean;\n  isMember: boolean;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  planProductType: ProductType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n  limitCollectionCreationDeletion: boolean;\n  allowAdminAccessToAllCollectionItems: boolean;\n  flexibleCollections: boolean;\n};\n\ntype ExpectedAccountType = {\n  data?: {\n    organizations?: Record<string, Jsonify<OrganizationData>>;\n  };\n};\n\nconst USER_ORGANIZATIONS: KeyDefinitionLike = {\n  key: \"organizations\",\n  stateDefinition: {\n    name: \"organizations\",\n  },\n};\n\nexport class OrganizationMigrator extends Migrator<39, 40> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.data?.organizations;\n      if (value != null) {\n        await helper.setToUser(userId, USER_ORGANIZATIONS, value);\n        delete account.data.organizations;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => migrateAccount(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = await helper.getFromUser(userId, USER_ORGANIZATIONS);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          organizations: value,\n        });\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_ORGANIZATIONS, null);\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackAccount(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  data?: {\n    eventCollection?: [];\n  };\n};\n\nconst EVENT_COLLECTION: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"eventCollection\",\n  },\n  key: \"eventCollection\",\n};\n\nexport class EventCollectionMigrator extends Migrator<40, 41> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    async function migrateAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      const value = account?.data?.eventCollection;\n      if (value != null) {\n        await helper.setToUser(userId, EVENT_COLLECTION, value);\n        delete account.data.eventCollection;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountState): Promise<void> {\n      const value = await helper.getFromUser(userId, EVENT_COLLECTION);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          eventCollection: value,\n        });\n\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, EVENT_COLLECTION, null);\n    }\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobalState = {\n  disableFavicon?: boolean;\n};\n\nconst ShowFaviconDefinition: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"domainSettings\",\n  },\n  key: \"showFavicons\",\n};\n\nexport class EnableFaviconMigrator extends Migrator<41, 42> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // global state (\"disableFavicon\" -> \"showFavicons\")\n    const globalState = await helper.get<ExpectedGlobalState>(\"global\");\n\n    if (globalState?.disableFavicon != null) {\n      await helper.setToGlobal(ShowFaviconDefinition, !globalState.disableFavicon);\n\n      // delete `disableFavicon` from state global\n      delete globalState.disableFavicon;\n\n      await helper.set<ExpectedGlobalState>(\"global\", globalState);\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // global state (\"showFavicons\" -> \"disableFavicon\")\n    const globalState = (await helper.get<ExpectedGlobalState>(\"global\")) || {};\n    const showFavicons: boolean = await helper.getFromGlobal(ShowFaviconDefinition);\n\n    if (showFavicons != null) {\n      await helper.set<ExpectedGlobalState>(\"global\", {\n        ...globalState,\n        disableFavicon: !showFavicons,\n      });\n\n      // remove the global state provider framework key for `showFavicons`\n      await helper.setToGlobal(ShowFaviconDefinition, null);\n    }\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  settings?: { autoConfirmFingerPrints?: boolean };\n};\n\nconst ORGANIZATION_MANAGEMENT_PREFERENCES: StateDefinitionLike = {\n  name: \"organizationManagementPreferences\",\n};\n\nconst AUTO_CONFIRM_FINGERPRINTS: KeyDefinitionLike = {\n  key: \"autoConfirmFingerPrints\",\n  stateDefinition: ORGANIZATION_MANAGEMENT_PREFERENCES,\n};\n\nexport class AutoConfirmFingerPrintsMigrator extends Migrator<42, 43> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all(\n      legacyAccounts.map(async ({ userId, account }) => {\n        if (account?.settings?.autoConfirmFingerPrints != null) {\n          await helper.setToUser(\n            userId,\n            AUTO_CONFIRM_FINGERPRINTS,\n            account.settings.autoConfirmFingerPrints,\n          );\n          delete account?.settings?.autoConfirmFingerPrints;\n          await helper.set(userId, account);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackUser(userId: string, account: ExpectedAccountState) {\n      let updatedAccount = false;\n      const autoConfirmFingerPrints = await helper.getFromUser<boolean>(\n        userId,\n        AUTO_CONFIRM_FINGERPRINTS,\n      );\n\n      if (autoConfirmFingerPrints) {\n        if (!account) {\n          account = {};\n        }\n\n        updatedAccount = true;\n        account.settings.autoConfirmFingerPrints = autoConfirmFingerPrints;\n        await helper.setToUser(userId, AUTO_CONFIRM_FINGERPRINTS, null);\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackUser(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype DecryptionOptionsType = {\n  hasMasterPassword: boolean;\n  trustedDeviceOption?: {\n    hasAdminApproval: boolean;\n    hasLoginApprovingDevice: boolean;\n    hasManageResetPasswordPermission: boolean;\n  };\n  keyConnectorOption?: {\n    keyConnectorUrl: string;\n  };\n};\n\ntype ExpectedAccountType = {\n  decryptionOptions?: DecryptionOptionsType;\n};\n\nconst USER_DECRYPTION_OPTIONS: KeyDefinitionLike = {\n  key: \"decryptionOptions\",\n  stateDefinition: {\n    name: \"userDecryptionOptions\",\n  },\n};\n\nexport class UserDecryptionOptionsMigrator extends Migrator<43, 44> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value = account?.decryptionOptions;\n      if (value != null) {\n        await helper.setToUser(userId, USER_DECRYPTION_OPTIONS, value);\n        delete account.decryptionOptions;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const value: DecryptionOptionsType = await helper.getFromUser(\n        userId,\n        USER_DECRYPTION_OPTIONS,\n      );\n      if (account) {\n        account.decryptionOptions = Object.assign(account.decryptionOptions, value);\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, USER_DECRYPTION_OPTIONS, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nconst ENVIRONMENT_STATE: StateDefinitionLike = { name: \"environment\" };\n\nconst ENVIRONMENT_REGION: KeyDefinitionLike = {\n  key: \"region\",\n  stateDefinition: ENVIRONMENT_STATE,\n};\n\nconst ENVIRONMENT_URLS: KeyDefinitionLike = {\n  key: \"urls\",\n  stateDefinition: ENVIRONMENT_STATE,\n};\n\nconst ENVIRONMENT_ENVIRONMENT: KeyDefinitionLike = {\n  key: \"environment\",\n  stateDefinition: ENVIRONMENT_STATE,\n};\n\nexport class MergeEnvironmentState extends Migrator<44, 45> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<unknown>();\n\n    async function migrateAccount(userId: string, account: unknown): Promise<void> {\n      const region = await helper.getFromUser(userId, ENVIRONMENT_REGION);\n      const urls = await helper.getFromUser(userId, ENVIRONMENT_URLS);\n\n      if (region == null && urls == null) {\n        return;\n      }\n\n      await helper.setToUser(userId, ENVIRONMENT_ENVIRONMENT, {\n        region,\n        urls,\n      });\n      await helper.removeFromUser(userId, ENVIRONMENT_REGION);\n      await helper.removeFromUser(userId, ENVIRONMENT_URLS);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    const region = await helper.getFromGlobal(ENVIRONMENT_REGION);\n    const urls = await helper.getFromGlobal(ENVIRONMENT_URLS);\n\n    if (region == null && urls == null) {\n      return;\n    }\n\n    await helper.setToGlobal(ENVIRONMENT_ENVIRONMENT, {\n      region,\n      urls,\n    });\n    await helper.removeFromGlobal(ENVIRONMENT_REGION);\n    await helper.removeFromGlobal(ENVIRONMENT_URLS);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<unknown>();\n\n    async function rollbackAccount(userId: string, account: unknown): Promise<void> {\n      const state = (await helper.getFromUser(userId, ENVIRONMENT_ENVIRONMENT)) as {\n        region: string;\n        urls: string;\n      } | null;\n\n      await helper.setToUser(userId, ENVIRONMENT_REGION, state?.region);\n      await helper.setToUser(userId, ENVIRONMENT_URLS, state?.urls);\n      await helper.removeFromUser(userId, ENVIRONMENT_ENVIRONMENT);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n\n    const state = (await helper.getFromGlobal(ENVIRONMENT_ENVIRONMENT)) as {\n      region: string;\n      urls: string;\n    } | null;\n\n    await helper.setToGlobal(ENVIRONMENT_REGION, state?.region);\n    await helper.setToGlobal(ENVIRONMENT_URLS, state?.urls);\n    await helper.removeFromGlobal(ENVIRONMENT_ENVIRONMENT);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { IRREVERSIBLE, Migrator } from \"../migrator\";\n\nexport const PROMPT_CANCELLED: KeyDefinitionLike = {\n  key: \"promptCancelled\",\n  stateDefinition: { name: \"biometricSettings\" },\n};\n\nexport class DeleteBiometricPromptCancelledData extends Migrator<45, 46> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    await Promise.all(\n      (await helper.getAccounts()).map(async ({ userId }) => {\n        if (helper.getFromUser(userId, PROMPT_CANCELLED) != null) {\n          await helper.removeFromUser(userId, PROMPT_CANCELLED);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedGlobalType = {\n  window?: object;\n  enableTray?: boolean;\n  enableMinimizeToTray?: boolean;\n  enableCloseToTray?: boolean;\n  enableStartToTray?: boolean;\n  openAtLogin?: boolean;\n  alwaysShowDock?: boolean;\n  enableAlwaysOnTop?: boolean;\n};\n\ntype ExpectedAccountType = {\n  settings?: {\n    enableAlwaysOnTop?: boolean;\n  };\n};\n\nconst DESKTOP_SETTINGS_STATE: StateDefinitionLike = { name: \"desktopSettings\" };\n\nconst WINDOW_KEY: KeyDefinitionLike = { key: \"window\", stateDefinition: DESKTOP_SETTINGS_STATE };\n\nconst CLOSE_TO_TRAY_KEY: KeyDefinitionLike = {\n  key: \"closeToTray\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\nconst MINIMIZE_TO_TRAY_KEY: KeyDefinitionLike = {\n  key: \"minimizeToTray\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\nconst START_TO_TRAY_KEY: KeyDefinitionLike = {\n  key: \"startToTray\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\nconst TRAY_ENABLED_KEY: KeyDefinitionLike = {\n  key: \"trayEnabled\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\nconst OPEN_AT_LOGIN_KEY: KeyDefinitionLike = {\n  key: \"openAtLogin\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\nconst ALWAYS_SHOW_DOCK_KEY: KeyDefinitionLike = {\n  key: \"alwaysShowDock\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\n\nconst ALWAYS_ON_TOP_KEY: KeyDefinitionLike = {\n  key: \"alwaysOnTop\",\n  stateDefinition: DESKTOP_SETTINGS_STATE,\n};\n\nexport class MoveDesktopSettingsMigrator extends Migrator<46, 47> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyGlobal = await helper.get<ExpectedGlobalType>(\"global\");\n\n    let updatedGlobal = false;\n    if (legacyGlobal?.window !== undefined) {\n      await helper.setToGlobal(WINDOW_KEY, legacyGlobal.window);\n      updatedGlobal = true;\n      delete legacyGlobal.window;\n    }\n\n    if (legacyGlobal?.enableCloseToTray != null) {\n      await helper.setToGlobal(CLOSE_TO_TRAY_KEY, legacyGlobal.enableCloseToTray);\n      updatedGlobal = true;\n      delete legacyGlobal.enableCloseToTray;\n    }\n\n    if (legacyGlobal?.enableMinimizeToTray != null) {\n      await helper.setToGlobal(MINIMIZE_TO_TRAY_KEY, legacyGlobal.enableMinimizeToTray);\n      updatedGlobal = true;\n      delete legacyGlobal.enableMinimizeToTray;\n    }\n\n    if (legacyGlobal?.enableStartToTray != null) {\n      await helper.setToGlobal(START_TO_TRAY_KEY, legacyGlobal.enableStartToTray);\n      updatedGlobal = true;\n      delete legacyGlobal.enableStartToTray;\n    }\n\n    if (legacyGlobal?.enableTray != null) {\n      await helper.setToGlobal(TRAY_ENABLED_KEY, legacyGlobal.enableTray);\n      updatedGlobal = true;\n      delete legacyGlobal.enableTray;\n    }\n\n    if (legacyGlobal?.openAtLogin != null) {\n      await helper.setToGlobal(OPEN_AT_LOGIN_KEY, legacyGlobal.openAtLogin);\n      updatedGlobal = true;\n      delete legacyGlobal.openAtLogin;\n    }\n\n    if (legacyGlobal?.alwaysShowDock != null) {\n      await helper.setToGlobal(ALWAYS_SHOW_DOCK_KEY, legacyGlobal.alwaysShowDock);\n      updatedGlobal = true;\n      delete legacyGlobal.alwaysShowDock;\n    }\n\n    if (legacyGlobal?.enableAlwaysOnTop != null) {\n      await helper.setToGlobal(ALWAYS_ON_TOP_KEY, legacyGlobal.enableAlwaysOnTop);\n      updatedGlobal = true;\n      delete legacyGlobal.enableAlwaysOnTop;\n    }\n\n    if (updatedGlobal) {\n      await helper.set(\"global\", legacyGlobal);\n    }\n\n    async function migrateAccount(userId: string, account: ExpectedAccountType) {\n      // We only migrate the global setting for this, if we find it on the account object\n      // just delete it.\n      if (account?.settings?.enableAlwaysOnTop != null) {\n        delete account.settings.enableAlwaysOnTop;\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    await Promise.all(accounts.map(({ userId, account }) => migrateAccount(userId, account)));\n  }\n\n  rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobal = {\n  enableDuckDuckGoBrowserIntegration?: boolean;\n};\n\nexport const DDG_KEY: KeyDefinitionLike = {\n  key: \"enableDuckDuckGoBrowserIntegration\",\n  stateDefinition: {\n    name: \"autofillSettings\",\n  },\n};\n\nexport class MoveDdgToStateProviderMigrator extends Migrator<47, 48> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    // global state\n    const global = await helper.get<ExpectedGlobal>(\"global\");\n    if (global?.enableDuckDuckGoBrowserIntegration == null) {\n      return;\n    }\n\n    await helper.setToGlobal(DDG_KEY, global.enableDuckDuckGoBrowserIntegration);\n    delete global.enableDuckDuckGoBrowserIntegration;\n    await helper.set(\"global\", global);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const enableDdg = await helper.getFromGlobal<boolean>(DDG_KEY);\n\n    if (!enableDdg) {\n      return;\n    }\n\n    const global = (await helper.get<ExpectedGlobal>(\"global\")) ?? {};\n    global.enableDuckDuckGoBrowserIntegration = enableDdg;\n    await helper.set(\"global\", global);\n    await helper.removeFromGlobal(DDG_KEY);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nconst CONFIG_DISK: StateDefinitionLike = { name: \"config\" };\nexport const USER_SERVER_CONFIG: KeyDefinitionLike = {\n  stateDefinition: CONFIG_DISK,\n  key: \"serverConfig\",\n};\n\n// Note: no need to migrate global configs, they don't currently exist\n\ntype ExpectedAccountType = {\n  settings?: {\n    serverConfig?: unknown;\n  };\n};\n\nexport class AccountServerConfigMigrator extends Migrator<48, 49> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      if (account?.settings?.serverConfig != null) {\n        await helper.setToUser(userId, USER_SERVER_CONFIG, account.settings.serverConfig);\n        delete account.settings.serverConfig;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const serverConfig = await helper.getFromUser(userId, USER_SERVER_CONFIG);\n\n      if (serverConfig) {\n        account ??= {};\n        account.settings ??= {};\n\n        account.settings.serverConfig = serverConfig;\n        await helper.setToUser(userId, USER_SERVER_CONFIG, null);\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { keys?: { organizationKeys?: { encrypted: Record<string, string> } } };\ntype NewAccountType = {\n  keys?: {\n    organizationKeys?: { encrypted: Record<string, { type: \"organization\"; key: string }> };\n  };\n};\n\nexport class AddKeyTypeToOrgKeysMigrator extends Migrator<4, 5> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts();\n\n    async function updateOrgKey(userId: string, account: ExpectedAccountType) {\n      const encryptedOrgKeys = account?.keys?.organizationKeys?.encrypted;\n      if (encryptedOrgKeys == null) {\n        return;\n      }\n\n      const newOrgKeys: Record<string, { type: \"organization\"; key: string }> = {};\n\n      Object.entries(encryptedOrgKeys).forEach(([orgId, encKey]) => {\n        newOrgKeys[orgId] = {\n          type: \"organization\",\n          key: encKey,\n        };\n      });\n      (account as any).keys.organizationKeys.encrypted = newOrgKeys;\n\n      await helper.set(userId, account);\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all(accounts.map(({ userId, account }) => updateOrgKey(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts();\n\n    async function updateOrgKey(userId: string, account: NewAccountType) {\n      const encryptedOrgKeys = account?.keys?.organizationKeys?.encrypted;\n      if (encryptedOrgKeys == null) {\n        return;\n      }\n\n      const newOrgKeys: Record<string, string> = {};\n\n      Object.entries(encryptedOrgKeys).forEach(([orgId, encKey]) => {\n        newOrgKeys[orgId] = encKey.key;\n      });\n      (account as any).keys.organizationKeys.encrypted = newOrgKeys;\n\n      await helper.set(userId, account);\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.all(accounts.map(async ({ userId, account }) => updateOrgKey(userId, account)));\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  profile?: {\n    usesKeyConnector?: boolean;\n    convertAccountToKeyConnector?: boolean;\n  };\n};\n\nconst usesKeyConnectorKeyDefinition: KeyDefinitionLike = {\n  key: \"usesKeyConnector\",\n  stateDefinition: {\n    name: \"keyConnector\",\n  },\n};\n\nconst convertAccountToKeyConnectorKeyDefinition: KeyDefinitionLike = {\n  key: \"convertAccountToKeyConnector\",\n  stateDefinition: {\n    name: \"keyConnector\",\n  },\n};\n\nexport class KeyConnectorMigrator extends Migrator<49, 50> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const usesKeyConnector = account?.profile?.usesKeyConnector;\n      const convertAccountToKeyConnector = account?.profile?.convertAccountToKeyConnector;\n      if (usesKeyConnector == null && convertAccountToKeyConnector == null) {\n        return;\n      }\n      if (usesKeyConnector != null) {\n        await helper.setToUser(userId, usesKeyConnectorKeyDefinition, usesKeyConnector);\n        delete account.profile.usesKeyConnector;\n      }\n      if (convertAccountToKeyConnector != null) {\n        await helper.setToUser(\n          userId,\n          convertAccountToKeyConnectorKeyDefinition,\n          convertAccountToKeyConnector,\n        );\n        delete account.profile.convertAccountToKeyConnector;\n      }\n      await helper.set(userId, account);\n    }\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const usesKeyConnector: boolean = await helper.getFromUser(\n        userId,\n        usesKeyConnectorKeyDefinition,\n      );\n      const convertAccountToKeyConnector: boolean = await helper.getFromUser(\n        userId,\n        convertAccountToKeyConnectorKeyDefinition,\n      );\n      if (usesKeyConnector == null && convertAccountToKeyConnector == null) {\n        return;\n      }\n      if (usesKeyConnector != null) {\n        account.profile.usesKeyConnector = usesKeyConnector;\n        await helper.setToUser(userId, usesKeyConnectorKeyDefinition, null);\n      }\n      if (convertAccountToKeyConnector != null) {\n        account.profile.convertAccountToKeyConnector = convertAccountToKeyConnector;\n        await helper.setToUser(userId, convertAccountToKeyConnectorKeyDefinition, null);\n      }\n      await helper.set(userId, account);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobalState = { rememberedEmail?: string };\n\nconst LOGIN_EMAIL_STATE: StateDefinitionLike = { name: \"loginEmail\" };\n\nconst STORED_EMAIL: KeyDefinitionLike = {\n  key: \"storedEmail\",\n  stateDefinition: LOGIN_EMAIL_STATE,\n};\n\nexport class RememberedEmailMigrator extends Migrator<50, 51> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyGlobal = await helper.get<ExpectedGlobalState>(\"global\");\n\n    // Move global data\n    if (legacyGlobal?.rememberedEmail != null) {\n      await helper.setToGlobal(STORED_EMAIL, legacyGlobal.rememberedEmail);\n    }\n\n    // Delete legacy global data\n    delete legacyGlobal?.rememberedEmail;\n    await helper.set(\"global\", legacyGlobal);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    let legacyGlobal = await helper.get<ExpectedGlobalState>(\"global\");\n    let updatedLegacyGlobal = false;\n    const globalStoredEmail = await helper.getFromGlobal<string>(STORED_EMAIL);\n\n    if (globalStoredEmail) {\n      if (!legacyGlobal) {\n        legacyGlobal = {};\n      }\n\n      updatedLegacyGlobal = true;\n      legacyGlobal.rememberedEmail = globalStoredEmail;\n      await helper.setToGlobal(STORED_EMAIL, null);\n    }\n\n    if (updatedLegacyGlobal) {\n      await helper.set(\"global\", legacyGlobal);\n    }\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedGlobal = {\n  installedVersion?: string;\n};\n\nexport class DeleteInstalledVersion extends Migrator<51, 52> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyGlobal = await helper.get<ExpectedGlobal>(\"global\");\n    if (legacyGlobal?.installedVersion != null) {\n      delete legacyGlobal.installedVersion;\n      await helper.set(\"global\", legacyGlobal);\n    }\n  }\n  rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\n// Types to represent data as it is stored in JSON\ntype DeviceKeyJsonType = {\n  keyB64: string;\n};\n\ntype ExpectedAccountType = {\n  keys?: {\n    deviceKey?: DeviceKeyJsonType;\n  };\n  settings?: {\n    trustDeviceChoiceForDecryption?: boolean;\n  };\n};\n\nexport const DEVICE_KEY: KeyDefinitionLike = {\n  key: \"deviceKey\", // matches KeyDefinition.key in DeviceTrustService\n  stateDefinition: {\n    name: \"deviceTrust\", // matches StateDefinition.name in StateDefinitions\n  },\n};\n\nexport const SHOULD_TRUST_DEVICE: KeyDefinitionLike = {\n  key: \"shouldTrustDevice\",\n  stateDefinition: {\n    name: \"deviceTrust\",\n  },\n};\n\nexport class DeviceTrustServiceStateProviderMigrator extends Migrator<52, 53> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      let updatedAccount = false;\n\n      // Migrate deviceKey\n      const existingDeviceKey = account?.keys?.deviceKey;\n\n      if (existingDeviceKey != null) {\n        // Only migrate data that exists\n        await helper.setToUser(userId, DEVICE_KEY, existingDeviceKey);\n        delete account.keys.deviceKey;\n        updatedAccount = true;\n      }\n\n      // Migrate shouldTrustDevice\n      const existingShouldTrustDevice = account?.settings?.trustDeviceChoiceForDecryption;\n\n      if (existingShouldTrustDevice != null) {\n        await helper.setToUser(userId, SHOULD_TRUST_DEVICE, existingShouldTrustDevice);\n        delete account.settings.trustDeviceChoiceForDecryption;\n        updatedAccount = true;\n      }\n\n      if (updatedAccount) {\n        // Save the migrated account\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      // Rollback deviceKey\n      const migratedDeviceKey: DeviceKeyJsonType = await helper.getFromUser(userId, DEVICE_KEY);\n\n      if (account?.keys && migratedDeviceKey != null) {\n        account.keys.deviceKey = migratedDeviceKey;\n        await helper.set(userId, account);\n      }\n\n      await helper.setToUser(userId, DEVICE_KEY, null);\n\n      // Rollback shouldTrustDevice\n      const migratedShouldTrustDevice = await helper.getFromUser<boolean>(\n        userId,\n        SHOULD_TRUST_DEVICE,\n      );\n\n      if (account?.settings && migratedShouldTrustDevice != null) {\n        account.settings.trustDeviceChoiceForDecryption = migratedShouldTrustDevice;\n        await helper.set(userId, account);\n      }\n\n      await helper.setToUser(userId, SHOULD_TRUST_DEVICE, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nexport enum SendType {\n  Text = 0,\n  File = 1,\n}\n\ntype SendData = {\n  id: string;\n  accessId: string;\n};\n\ntype ExpectedSendState = {\n  data?: {\n    sends?: {\n      encrypted?: Record<string, SendData>;\n    };\n  };\n};\n\nconst ENCRYPTED_SENDS: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"send\",\n  },\n  key: \"sends\",\n};\n\n/**\n * Only encrypted sends are stored on disk. Only the encrypted items need to be\n * migrated from the previous sends state data.\n */\nexport class SendMigrator extends Migrator<53, 54> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedSendState>();\n\n    async function migrateAccount(userId: string, account: ExpectedSendState): Promise<void> {\n      const value = account?.data?.sends?.encrypted;\n      if (value != null) {\n        await helper.setToUser(userId, ENCRYPTED_SENDS, value);\n        delete account.data.sends;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedSendState>();\n\n    async function rollbackAccount(userId: string, account: ExpectedSendState): Promise<void> {\n      const value = await helper.getFromUser(userId, ENCRYPTED_SENDS);\n      if (account) {\n        account.data = Object.assign(account.data ?? {}, {\n          sends: {\n            encrypted: value,\n          },\n        });\n\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, ENCRYPTED_SENDS, null);\n    }\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  keys?: {\n    masterKeyEncryptedUserKey?: string;\n  };\n  profile?: {\n    forceSetPasswordReason?: number;\n    keyHash?: string;\n  };\n};\n\nexport const FORCE_SET_PASSWORD_REASON_DEFINITION: KeyDefinitionLike = {\n  key: \"forceSetPasswordReason\",\n  stateDefinition: {\n    name: \"masterPassword\",\n  },\n};\n\nexport const MASTER_KEY_HASH_DEFINITION: KeyDefinitionLike = {\n  key: \"masterKeyHash\",\n  stateDefinition: {\n    name: \"masterPassword\",\n  },\n};\n\nexport const MASTER_KEY_ENCRYPTED_USER_KEY_DEFINITION: KeyDefinitionLike = {\n  key: \"masterKeyEncryptedUserKey\",\n  stateDefinition: {\n    name: \"masterPassword\",\n  },\n};\n\nexport class MoveMasterKeyStateToProviderMigrator extends Migrator<54, 55> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const forceSetPasswordReason = account?.profile?.forceSetPasswordReason;\n      if (forceSetPasswordReason != null) {\n        await helper.setToUser(\n          userId,\n          FORCE_SET_PASSWORD_REASON_DEFINITION,\n          forceSetPasswordReason,\n        );\n\n        delete account.profile.forceSetPasswordReason;\n        await helper.set(userId, account);\n      }\n\n      const masterKeyHash = account?.profile?.keyHash;\n      if (masterKeyHash != null) {\n        await helper.setToUser(userId, MASTER_KEY_HASH_DEFINITION, masterKeyHash);\n\n        delete account.profile.keyHash;\n        await helper.set(userId, account);\n      }\n\n      const masterKeyEncryptedUserKey = account?.keys?.masterKeyEncryptedUserKey;\n      if (masterKeyEncryptedUserKey != null) {\n        await helper.setToUser(\n          userId,\n          MASTER_KEY_ENCRYPTED_USER_KEY_DEFINITION,\n          masterKeyEncryptedUserKey,\n        );\n\n        delete account.keys.masterKeyEncryptedUserKey;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const forceSetPasswordReason = await helper.getFromUser(\n        userId,\n        FORCE_SET_PASSWORD_REASON_DEFINITION,\n      );\n      const masterKeyHash = await helper.getFromUser(userId, MASTER_KEY_HASH_DEFINITION);\n      const masterKeyEncryptedUserKey = await helper.getFromUser(\n        userId,\n        MASTER_KEY_ENCRYPTED_USER_KEY_DEFINITION,\n      );\n      if (account != null) {\n        if (forceSetPasswordReason != null) {\n          account.profile = Object.assign(account.profile ?? {}, {\n            forceSetPasswordReason,\n          });\n        }\n        if (masterKeyHash != null) {\n          account.profile = Object.assign(account.profile ?? {}, {\n            keyHash: masterKeyHash,\n          });\n        }\n        if (masterKeyEncryptedUserKey != null) {\n          account.keys = Object.assign(account.keys ?? {}, {\n            masterKeyEncryptedUserKey,\n          });\n        }\n        await helper.set(userId, account);\n      }\n\n      await helper.setToUser(userId, FORCE_SET_PASSWORD_REASON_DEFINITION, null);\n      await helper.setToUser(userId, MASTER_KEY_HASH_DEFINITION, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype AdminAuthRequestStorable = {\n  id: string;\n  privateKey: string;\n};\n\ntype ExpectedAccountType = {\n  adminAuthRequest?: AdminAuthRequestStorable;\n  settings?: {\n    approveLoginRequests?: boolean;\n  };\n};\n\nconst ADMIN_AUTH_REQUEST_KEY: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"authRequestLocal\",\n  },\n  key: \"adminAuthRequest\",\n};\n\nconst ACCEPT_AUTH_REQUESTS_KEY: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"authRequestLocal\",\n  },\n  key: \"acceptAuthRequests\",\n};\n\nexport class AuthRequestMigrator extends Migrator<55, 56> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      let updatedAccount = false;\n\n      // Migrate admin auth request\n      const existingAdminAuthRequest = account?.adminAuthRequest;\n\n      if (existingAdminAuthRequest != null) {\n        await helper.setToUser(userId, ADMIN_AUTH_REQUEST_KEY, existingAdminAuthRequest);\n        delete account.adminAuthRequest;\n        updatedAccount = true;\n      }\n\n      // Migrate approve login requests\n      const existingApproveLoginRequests = account?.settings?.approveLoginRequests;\n\n      if (existingApproveLoginRequests != null) {\n        await helper.setToUser(userId, ACCEPT_AUTH_REQUESTS_KEY, existingApproveLoginRequests);\n        delete account.settings.approveLoginRequests;\n        updatedAccount = true;\n      }\n\n      if (updatedAccount) {\n        // Save the migrated account\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      let updatedAccount = false;\n      // Rollback admin auth request\n      const migratedAdminAuthRequest: AdminAuthRequestStorable = await helper.getFromUser(\n        userId,\n        ADMIN_AUTH_REQUEST_KEY,\n      );\n\n      if (migratedAdminAuthRequest != null) {\n        account.adminAuthRequest = migratedAdminAuthRequest;\n        updatedAccount = true;\n      }\n\n      await helper.setToUser(userId, ADMIN_AUTH_REQUEST_KEY, null);\n\n      // Rollback approve login requests\n      const migratedAcceptAuthRequest: boolean = await helper.getFromUser(\n        userId,\n        ACCEPT_AUTH_REQUESTS_KEY,\n      );\n\n      if (migratedAcceptAuthRequest != null) {\n        account.settings = Object.assign(account.settings ?? {}, {\n          approveLoginRequests: migratedAcceptAuthRequest,\n        });\n        updatedAccount = true;\n      }\n\n      await helper.setToUser(userId, ACCEPT_AUTH_REQUESTS_KEY, null);\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = {\n  data: {\n    localData?: unknown;\n    ciphers?: {\n      encrypted: unknown;\n    };\n  };\n};\n\nexport const CIPHERS_DISK_LOCAL: KeyDefinitionLike = {\n  key: \"localData\",\n  stateDefinition: {\n    name: \"ciphersLocal\",\n  },\n};\n\nexport const CIPHERS_DISK: KeyDefinitionLike = {\n  key: \"ciphers\",\n  stateDefinition: {\n    name: \"ciphers\",\n  },\n};\n\nexport class CipherServiceMigrator extends Migrator<56, 57> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      let updatedAccount = false;\n\n      //Migrate localData\n      const localData = account?.data?.localData;\n      if (localData != null) {\n        await helper.setToUser(userId, CIPHERS_DISK_LOCAL, localData);\n        delete account.data.localData;\n        updatedAccount = true;\n      }\n\n      //Migrate ciphers\n      const ciphers = account?.data?.ciphers?.encrypted;\n      if (ciphers != null) {\n        await helper.setToUser(userId, CIPHERS_DISK, ciphers);\n        delete account.data.ciphers;\n        updatedAccount = true;\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      //rollback localData\n      const localData = await helper.getFromUser(userId, CIPHERS_DISK_LOCAL);\n\n      if (account.data && localData != null) {\n        account.data.localData = localData;\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, CIPHERS_DISK_LOCAL, null);\n\n      //rollback ciphers\n      const ciphers = await helper.getFromUser(userId, CIPHERS_DISK);\n\n      if (account.data && ciphers != null) {\n        account.data.ciphers ||= { encrypted: null };\n        account.data.ciphers.encrypted = ciphers;\n        await helper.set(userId, account);\n      }\n      await helper.setToUser(userId, CIPHERS_DISK, null);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = NonNullable<unknown>;\n\nexport const REFRESH_TOKEN_MIGRATED_TO_SECURE_STORAGE: KeyDefinitionLike = {\n  key: \"refreshTokenMigratedToSecureStorage\", // matches KeyDefinition.key\n  stateDefinition: {\n    name: \"token\", // matches StateDefinition.name in StateDefinitions\n  },\n};\n\nexport class RemoveRefreshTokenMigratedFlagMigrator extends Migrator<57, 58> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const refreshTokenMigratedFlag = await helper.getFromUser(\n        userId,\n        REFRESH_TOKEN_MIGRATED_TO_SECURE_STORAGE,\n      );\n\n      if (refreshTokenMigratedFlag != null) {\n        // Only delete the flag if it exists\n        await helper.removeFromUser(userId, REFRESH_TOKEN_MIGRATED_TO_SECURE_STORAGE);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nenum KdfType {\n  PBKDF2_SHA256 = 0,\n  Argon2id = 1,\n}\n\nclass KdfConfig {\n  iterations: number;\n  kdfType: KdfType;\n  memory?: number;\n  parallelism?: number;\n}\n\ntype ExpectedAccountType = {\n  profile?: {\n    kdfIterations: number;\n    kdfType: KdfType;\n    kdfMemory?: number;\n    kdfParallelism?: number;\n  };\n};\n\nconst kdfConfigKeyDefinition: KeyDefinitionLike = {\n  key: \"kdfConfig\",\n  stateDefinition: {\n    name: \"kdfConfig\",\n  },\n};\n\nexport class KdfConfigMigrator extends Migrator<58, 59> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const iterations = account?.profile?.kdfIterations;\n      const kdfType = account?.profile?.kdfType;\n      const memory = account?.profile?.kdfMemory;\n      const parallelism = account?.profile?.kdfParallelism;\n\n      const kdfConfig: KdfConfig = {\n        iterations: iterations,\n        kdfType: kdfType,\n        memory: memory,\n        parallelism: parallelism,\n      };\n\n      if (kdfConfig != null) {\n        await helper.setToUser(userId, kdfConfigKeyDefinition, kdfConfig);\n        delete account?.profile?.kdfIterations;\n        delete account?.profile?.kdfType;\n        delete account?.profile?.kdfMemory;\n        delete account?.profile?.kdfParallelism;\n      }\n\n      await helper.set(userId, account);\n    }\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      const kdfConfig: KdfConfig = await helper.getFromUser(userId, kdfConfigKeyDefinition);\n\n      if (kdfConfig != null) {\n        account.profile.kdfIterations = kdfConfig.iterations;\n        account.profile.kdfType = kdfConfig.kdfType;\n        account.profile.kdfMemory = kdfConfig.memory;\n        account.profile.kdfParallelism = kdfConfig.parallelism;\n        await helper.setToUser(userId, kdfConfigKeyDefinition, null);\n      }\n      await helper.set(userId, account);\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { keys?: { legacyEtmKey?: string } };\n\nexport class RemoveLegacyEtmKeyMigrator extends Migrator<5, 6> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function updateAccount(userId: string, account: ExpectedAccountType) {\n      if (account?.keys?.legacyEtmKey) {\n        delete account.keys.legacyEtmKey;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => updateAccount(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\nexport const ACCOUNT_ACCOUNTS: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"account\",\n  },\n  key: \"accounts\",\n};\n\nexport const ACCOUNT_ACTIVE_ACCOUNT_ID: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"account\",\n  },\n  key: \"activeAccountId\",\n};\n\nexport const ACCOUNT_ACTIVITY: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"account\",\n  },\n  key: \"activity\",\n};\n\ntype ExpectedAccountType = {\n  profile?: {\n    email?: string;\n    name?: string;\n    emailVerified?: boolean;\n  };\n};\n\nexport class KnownAccountsMigrator extends Migrator<59, 60> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    await this.migrateAuthenticatedAccounts(helper);\n    await this.migrateActiveAccountId(helper);\n    await this.migrateAccountActivity(helper);\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // authenticated account are removed, but the accounts record also contains logged out accounts. Best we can do is to add them all back\n    const userIds = (await helper.getKnownUserIds()) ?? [];\n    await helper.set(\"authenticatedAccounts\", userIds);\n    await helper.removeFromGlobal(ACCOUNT_ACCOUNTS);\n\n    // Active Account Id\n    const activeAccountId = await helper.getFromGlobal<string>(ACCOUNT_ACTIVE_ACCOUNT_ID);\n    if (activeAccountId) {\n      await helper.set(\"activeUserId\", activeAccountId);\n    }\n    await helper.removeFromGlobal(ACCOUNT_ACTIVE_ACCOUNT_ID);\n\n    // Account Activity\n    const accountActivity = await helper.getFromGlobal<Record<string, string>>(ACCOUNT_ACTIVITY);\n    if (accountActivity) {\n      const toStore = Object.entries(accountActivity).reduce(\n        (agg, [userId, dateString]) => {\n          agg[userId] = new Date(dateString).getTime();\n          return agg;\n        },\n        {} as Record<string, number>,\n      );\n      await helper.set(\"accountActivity\", toStore);\n    }\n    await helper.removeFromGlobal(ACCOUNT_ACTIVITY);\n  }\n\n  private async migrateAuthenticatedAccounts(helper: MigrationHelper) {\n    const authenticatedAccounts = (await helper.get<string[]>(\"authenticatedAccounts\")) ?? [];\n    const accounts = await Promise.all(\n      authenticatedAccounts.map(async (userId) => {\n        const account = await helper.get<ExpectedAccountType>(userId);\n        return { userId, account };\n      }),\n    );\n    const accountsToStore = accounts.reduce(\n      (agg, { userId, account }) => {\n        if (account?.profile) {\n          agg[userId] = {\n            email: account.profile.email ?? \"\",\n            emailVerified: account.profile.emailVerified ?? false,\n            name: account.profile.name,\n          };\n        }\n        return agg;\n      },\n      {} as Record<string, { email: string; emailVerified: boolean; name: string | undefined }>,\n    );\n\n    await helper.setToGlobal(ACCOUNT_ACCOUNTS, accountsToStore);\n    await helper.remove(\"authenticatedAccounts\");\n  }\n\n  private async migrateAccountActivity(helper: MigrationHelper) {\n    const stored = await helper.get<Record<string, Date>>(\"accountActivity\");\n    const accountActivity = Object.entries(stored ?? {}).reduce(\n      (agg, [userId, dateMs]) => {\n        agg[userId] = JSON.stringify(new Date(dateMs));\n        return agg;\n      },\n      {} as Record<string, string>,\n    );\n    await helper.setToGlobal(ACCOUNT_ACTIVITY, accountActivity);\n    await helper.remove(\"accountActivity\");\n  }\n\n  private async migrateActiveAccountId(helper: MigrationHelper) {\n    const activeAccountId = await helper.get<string>(\"activeUserId\");\n    await helper.setToGlobal(ACCOUNT_ACTIVE_ACCOUNT_ID, activeAccountId);\n    await helper.remove(\"activeUserId\");\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccountState = {\n  settings?: {\n    pinKeyEncryptedUserKey?: string; // EncryptedString\n    protectedPin?: string; // EncryptedString\n    pinProtected?: {\n      encrypted?: string;\n    };\n  };\n};\n\nexport const PIN_STATE: StateDefinitionLike = { name: \"pinUnlock\" };\n\nexport const PIN_KEY_ENCRYPTED_USER_KEY_PERSISTENT: KeyDefinitionLike = {\n  stateDefinition: PIN_STATE,\n  key: \"pinKeyEncryptedUserKeyPersistent\",\n};\n\nexport const USER_KEY_ENCRYPTED_PIN: KeyDefinitionLike = {\n  stateDefinition: PIN_STATE,\n  key: \"userKeyEncryptedPin\",\n};\n\nexport const OLD_PIN_KEY_ENCRYPTED_MASTER_KEY: KeyDefinitionLike = {\n  stateDefinition: PIN_STATE,\n  key: \"oldPinKeyEncryptedMasterKey\",\n};\n\nexport class PinStateMigrator extends Migrator<60, 61> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyAccounts = await helper.getAccounts<ExpectedAccountState>();\n    let updatedAccount = false;\n\n    async function migrateAccount(userId: string, account: ExpectedAccountState) {\n      // Migrate pinKeyEncryptedUserKey (to `pinKeyEncryptedUserKeyPersistent`)\n      if (account?.settings?.pinKeyEncryptedUserKey != null) {\n        await helper.setToUser(\n          userId,\n          PIN_KEY_ENCRYPTED_USER_KEY_PERSISTENT,\n          account.settings.pinKeyEncryptedUserKey,\n        );\n        delete account.settings.pinKeyEncryptedUserKey;\n        updatedAccount = true;\n      }\n\n      // Migrate protectedPin (to `userKeyEncryptedPin`)\n      if (account?.settings?.protectedPin != null) {\n        await helper.setToUser(userId, USER_KEY_ENCRYPTED_PIN, account.settings.protectedPin);\n        delete account.settings.protectedPin;\n        updatedAccount = true;\n      }\n\n      // Migrate pinProtected (to `oldPinKeyEncryptedMasterKey`)\n      if (account?.settings?.pinProtected?.encrypted != null) {\n        await helper.setToUser(\n          userId,\n          OLD_PIN_KEY_ENCRYPTED_MASTER_KEY,\n          account.settings.pinProtected.encrypted,\n        );\n        delete account.settings.pinProtected;\n        updatedAccount = true;\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([\n      ...legacyAccounts.map(({ userId, account }) => migrateAccount(userId, account)),\n    ]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountState>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountState) {\n      let updatedAccount = false;\n\n      const accountPinKeyEncryptedUserKeyPersistent = await helper.getFromUser<string>(\n        userId,\n        PIN_KEY_ENCRYPTED_USER_KEY_PERSISTENT,\n      );\n      const accountUserKeyEncryptedPin = await helper.getFromUser<string>(\n        userId,\n        USER_KEY_ENCRYPTED_PIN,\n      );\n      const accountOldPinKeyEncryptedMasterKey = await helper.getFromUser<string>(\n        userId,\n        OLD_PIN_KEY_ENCRYPTED_MASTER_KEY,\n      );\n\n      if (!account) {\n        account = {};\n      }\n\n      if (accountPinKeyEncryptedUserKeyPersistent != null) {\n        account.settings.pinKeyEncryptedUserKey = accountPinKeyEncryptedUserKeyPersistent;\n        await helper.setToUser(userId, PIN_KEY_ENCRYPTED_USER_KEY_PERSISTENT, null);\n        updatedAccount = true;\n      }\n\n      if (accountUserKeyEncryptedPin != null) {\n        account.settings.protectedPin = accountUserKeyEncryptedPin;\n        await helper.setToUser(userId, USER_KEY_ENCRYPTED_PIN, null);\n        updatedAccount = true;\n      }\n\n      if (accountOldPinKeyEncryptedMasterKey != null) {\n        account.settings = Object.assign(account.settings ?? {}, {\n          pinProtected: {\n            encrypted: accountOldPinKeyEncryptedMasterKey,\n          },\n        });\n\n        await helper.setToUser(userId, OLD_PIN_KEY_ENCRYPTED_MASTER_KEY, null);\n        updatedAccount = true;\n      }\n\n      if (updatedAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all(accounts.map(({ userId, account }) => rollbackAccount(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\n// Types to represent data as it is stored in JSON\ntype ExpectedAccountType = {\n  settings?: {\n    vaultTimeout?: number;\n    vaultTimeoutAction?: string;\n  };\n};\n\ntype ExpectedGlobalType = {\n  vaultTimeout?: number;\n  vaultTimeoutAction?: string;\n};\n\nconst VAULT_TIMEOUT_SETTINGS_STATE_DEF_LIKE: StateDefinitionLike = {\n  name: \"vaultTimeoutSettings\",\n};\n\nexport const VAULT_TIMEOUT: KeyDefinitionLike = {\n  key: \"vaultTimeout\", // matches KeyDefinition.key\n  stateDefinition: VAULT_TIMEOUT_SETTINGS_STATE_DEF_LIKE,\n};\n\nexport const VAULT_TIMEOUT_ACTION: KeyDefinitionLike = {\n  key: \"vaultTimeoutAction\", // matches KeyDefinition.key\n  stateDefinition: VAULT_TIMEOUT_SETTINGS_STATE_DEF_LIKE,\n};\n\n// Migrations are supposed to be frozen so we have to copy the type here.\nexport type VaultTimeout =\n  | number // 0 for immediately; otherwise positive numbers\n  | \"never\" // null\n  | \"onRestart\" // -1\n  | \"onLocked\" // -2\n  | \"onSleep\" // -3\n  | \"onIdle\"; // -4\n\n// Define mapping of old values to new values for migration purposes\nconst vaultTimeoutTypeMigrateRecord: Record<any, VaultTimeout> = {\n  null: \"never\",\n  \"-1\": \"onRestart\",\n  \"-2\": \"onLocked\",\n  \"-3\": \"onSleep\",\n  \"-4\": \"onIdle\",\n};\n\n// define mapping of new values to old values for rollback purposes\nconst vaultTimeoutTypeRollbackRecord: Record<VaultTimeout, any> = {\n  never: null,\n  onRestart: -1,\n  onLocked: -2,\n  onSleep: -3,\n  onIdle: -4,\n};\n\nexport enum ClientType {\n  Web = \"web\",\n  Browser = \"browser\",\n  Desktop = \"desktop\",\n  Cli = \"cli\",\n}\n\nexport class VaultTimeoutSettingsServiceStateProviderMigrator extends Migrator<61, 62> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const globalData = await helper.get<ExpectedGlobalType>(\"global\");\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function migrateAccount(\n      userId: string,\n      account: ExpectedAccountType | undefined,\n    ): Promise<void> {\n      let updatedAccount = false;\n\n      // Migrate vault timeout\n      let existingVaultTimeout = account?.settings?.vaultTimeout;\n\n      if (helper.clientType === ClientType.Cli && existingVaultTimeout === undefined) {\n        // The CLI does not set a vault timeout by default so we need to set it to null\n        // so that the migration can migrate null to \"never\" as the CLI does not have a vault timeout.\n        existingVaultTimeout = null;\n      }\n\n      if (existingVaultTimeout !== undefined) {\n        // check undefined so that we allow null values (previously meant never timeout)\n        // Only migrate data that exists\n\n        if (existingVaultTimeout === null || existingVaultTimeout < 0) {\n          // Map null or negative values to new string values\n          const newVaultTimeout = vaultTimeoutTypeMigrateRecord[existingVaultTimeout];\n          await helper.setToUser(userId, VAULT_TIMEOUT, newVaultTimeout);\n        } else {\n          // Persist positive numbers as is\n          await helper.setToUser(userId, VAULT_TIMEOUT, existingVaultTimeout);\n        }\n\n        delete account?.settings?.vaultTimeout;\n        updatedAccount = true;\n      }\n\n      // Migrate vault timeout action\n      const existingVaultTimeoutAction = account?.settings?.vaultTimeoutAction;\n\n      if (existingVaultTimeoutAction != null) {\n        // Only migrate data that exists\n        await helper.setToUser(userId, VAULT_TIMEOUT_ACTION, existingVaultTimeoutAction);\n\n        delete account?.settings?.vaultTimeoutAction;\n        updatedAccount = true;\n      }\n\n      // Note: we are explicitly not worrying about mapping over the global fallback vault timeout / action\n      // into the new state provider framework.  It was originally a fallback but hasn't been used for years\n      // so this migration will clean up the global properties fully.\n\n      if (updatedAccount) {\n        // Save the migrated account only if it was updated\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n\n    // Delete global data (works for browser extension and web; CLI doesn't have these as global settings).\n    delete globalData?.vaultTimeout;\n    delete globalData?.vaultTimeoutAction;\n    await helper.set(\"global\", globalData);\n\n    // Remove desktop only settings. These aren't found by the above global key removal b/c of\n    // the different storage key format. This removal does not cause any issues on migrating for other clients.\n    await helper.remove(\"global\\\\.vaultTimeout\");\n    await helper.remove(\"global\\\\.vaultTimeoutAction\");\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    async function rollbackAccount(userId: string, account: ExpectedAccountType): Promise<void> {\n      let updatedLegacyAccount = false;\n\n      // Rollback vault timeout\n      const migratedVaultTimeout = await helper.getFromUser<VaultTimeout>(userId, VAULT_TIMEOUT);\n\n      if (account?.settings && migratedVaultTimeout != null) {\n        if (typeof migratedVaultTimeout === \"string\") {\n          // Map new string values back to old values\n          account.settings.vaultTimeout = vaultTimeoutTypeRollbackRecord[migratedVaultTimeout];\n        } else {\n          // persist numbers as is\n          account.settings.vaultTimeout = migratedVaultTimeout;\n        }\n\n        updatedLegacyAccount = true;\n      }\n\n      await helper.setToUser(userId, VAULT_TIMEOUT, null);\n\n      // Rollback vault timeout action\n      const migratedVaultTimeoutAction = await helper.getFromUser<string>(\n        userId,\n        VAULT_TIMEOUT_ACTION,\n      );\n\n      if (account?.settings && migratedVaultTimeoutAction != null) {\n        account.settings.vaultTimeoutAction = migratedVaultTimeoutAction;\n        updatedLegacyAccount = true;\n      }\n\n      await helper.setToUser(userId, VAULT_TIMEOUT_ACTION, null);\n\n      if (updatedLegacyAccount) {\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => rollbackAccount(userId, account))]);\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\n/** settings targeted by migrator */\nexport type AccountType = {\n  settings?: {\n    passwordGenerationOptions?: ExpectedOptions;\n  };\n};\n\nexport type GeneratorType = \"password\" | \"passphrase\" | \"username\";\n\n/** username generation options prior to refactoring */\nexport type ExpectedOptions = {\n  type?: GeneratorType;\n  length?: number;\n  minLength?: number;\n  ambiguous?: boolean;\n  uppercase?: boolean;\n  minUppercase?: number;\n  lowercase?: boolean;\n  minLowercase?: number;\n  number?: boolean;\n  minNumber?: number;\n  special?: boolean;\n  minSpecial?: number;\n  numWords?: number;\n  wordSeparator?: string;\n  capitalize?: boolean;\n  includeNumber?: boolean;\n};\n\n/** username generation options after refactoring */\ntype ConvertedOptions = {\n  generator: GeneratorNavigation;\n  password: PasswordGenerationOptions;\n  passphrase: PassphraseGenerationOptions;\n};\n\nexport const NAVIGATION: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"generatorSettings\",\n};\n\nexport const PASSWORD: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"passwordGeneratorSettings\",\n};\n\nexport const PASSPHRASE: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"passphraseGeneratorSettings\",\n};\n\nexport type GeneratorNavigation = {\n  type?: string;\n};\n\nexport type PassphraseGenerationOptions = {\n  numWords?: number;\n  wordSeparator?: string;\n  capitalize?: boolean;\n  includeNumber?: boolean;\n};\n\nexport type PasswordGenerationOptions = {\n  length?: number;\n  minLength?: number;\n  ambiguous?: boolean;\n  uppercase?: boolean;\n  minUppercase?: number;\n  lowercase?: boolean;\n  minLowercase?: number;\n  number?: boolean;\n  minNumber?: number;\n  special?: boolean;\n  minSpecial?: number;\n};\n\nexport class PasswordOptionsMigrator extends Migrator<62, 63> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<AccountType>();\n\n    async function migrateAccount(userId: string, account: AccountType) {\n      const legacyOptions = account?.settings?.passwordGenerationOptions;\n\n      if (legacyOptions) {\n        const converted = convertSettings(legacyOptions);\n        await storeSettings(helper, userId, converted);\n        await deleteSettings(helper, userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // not supported\n  }\n}\n\nfunction convertSettings(options: ExpectedOptions): ConvertedOptions {\n  const password = {\n    length: options.length,\n    ambiguous: options.ambiguous,\n    uppercase: options.uppercase,\n    minUppercase: options.minUppercase,\n    lowercase: options.lowercase,\n    minLowercase: options.minLowercase,\n    number: options.number,\n    minNumber: options.minNumber,\n    special: options.special,\n    minSpecial: options.minSpecial,\n  };\n\n  const generator = {\n    type: options.type,\n  };\n\n  const passphrase = {\n    numWords: options.numWords,\n    wordSeparator: options.wordSeparator,\n    capitalize: options.capitalize,\n    includeNumber: options.includeNumber,\n  };\n\n  return { generator, password, passphrase };\n}\n\nasync function storeSettings(helper: MigrationHelper, userId: string, converted: ConvertedOptions) {\n  const existing = (await helper.getFromUser(userId, NAVIGATION)) ?? {};\n  const updated = Object.assign(existing, converted.generator);\n\n  await Promise.all([\n    helper.setToUser(userId, NAVIGATION, updated),\n    helper.setToUser(userId, PASSPHRASE, converted.passphrase),\n    helper.setToUser(userId, PASSWORD, converted.password),\n  ]);\n}\n\nasync function deleteSettings(helper: MigrationHelper, userId: string, account: AccountType) {\n  delete account?.settings?.passwordGenerationOptions;\n  await helper.set(userId, account);\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\n/** settings targeted by migrator */\nexport type AccountType = {\n  data?: {\n    passwordGenerationHistory?: {\n      encrypted: EncryptedHistory;\n    };\n  };\n};\n\n/** the actual data stored in the history is opaque to the migrator */\nexport type EncryptedHistory = Array<unknown>;\n\nexport const HISTORY: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"localGeneratorHistoryBuffer\",\n};\n\nexport class GeneratorHistoryMigrator extends Migrator<63, 64> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<AccountType>();\n\n    async function migrateAccount(userId: string, account: AccountType) {\n      const data = account?.data?.passwordGenerationHistory;\n      if (data && data.encrypted) {\n        await helper.setToUser(userId, HISTORY, data.encrypted);\n        delete account.data.passwordGenerationHistory;\n        await helper.set(userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // not supported\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\n/** settings targeted by migrator */\nexport type AccountType = {\n  settings?: {\n    usernameGenerationOptions?: ExpectedOptions;\n  };\n};\n\n/** username generation options prior to refactoring */\nexport type ExpectedOptions = {\n  type?: \"word\" | \"subaddress\" | \"catchall\" | \"forwarded\";\n  wordCapitalize?: boolean;\n  wordIncludeNumber?: boolean;\n  subaddressType?: \"random\" | \"website-name\";\n  subaddressEmail?: string;\n  catchallType?: \"random\" | \"website-name\";\n  catchallDomain?: string;\n  forwardedService?: string;\n  forwardedAnonAddyApiToken?: string;\n  forwardedAnonAddyDomain?: string;\n  forwardedAnonAddyBaseUrl?: string;\n  forwardedDuckDuckGoToken?: string;\n  forwardedFirefoxApiToken?: string;\n  forwardedFastmailApiToken?: string;\n  forwardedForwardEmailApiToken?: string;\n  forwardedForwardEmailDomain?: string;\n  forwardedSimpleLoginApiKey?: string;\n  forwardedSimpleLoginBaseUrl?: string;\n};\n\n/** username generation options after refactoring */\ntype ConvertedOptions = {\n  generator: GeneratorNavigation;\n  algorithms: {\n    catchall: CatchallGenerationOptions;\n    effUsername: EffUsernameGenerationOptions;\n    subaddress: SubaddressGenerationOptions;\n  };\n  forwarders: {\n    addyIo: SelfHostedApiOptions & EmailDomainOptions;\n    duckDuckGo: ApiOptions;\n    fastmail: ApiOptions;\n    firefoxRelay: ApiOptions;\n    forwardEmail: ApiOptions & EmailDomainOptions;\n    simpleLogin: SelfHostedApiOptions;\n  };\n};\n\nexport const NAVIGATION: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"generatorSettings\",\n};\n\nexport const CATCHALL: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"catchallGeneratorSettings\",\n};\n\nexport const EFF_USERNAME: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"effUsernameGeneratorSettings\",\n};\n\nexport const SUBADDRESS: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"subaddressGeneratorSettings\",\n};\n\nexport const ADDY_IO: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"addyIoBuffer\",\n};\n\nexport const DUCK_DUCK_GO: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"duckDuckGoBuffer\",\n};\n\nexport const FASTMAIL: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"fastmailBuffer\",\n};\n\nexport const FIREFOX_RELAY: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"firefoxRelayBuffer\",\n};\n\nexport const FORWARD_EMAIL: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"forwardEmailBuffer\",\n};\n\nexport const SIMPLE_LOGIN: KeyDefinitionLike = {\n  stateDefinition: {\n    name: \"generator\",\n  },\n  key: \"simpleLoginBuffer\",\n};\n\nexport type GeneratorNavigation = {\n  type?: string;\n  username?: string;\n  forwarder?: string;\n};\n\ntype UsernameGenerationMode = \"random\" | \"website-name\";\n\ntype CatchallGenerationOptions = {\n  catchallType?: UsernameGenerationMode;\n  catchallDomain?: string;\n};\n\ntype EffUsernameGenerationOptions = {\n  wordCapitalize?: boolean;\n  wordIncludeNumber?: boolean;\n};\n\ntype SubaddressGenerationOptions = {\n  subaddressType?: UsernameGenerationMode;\n  subaddressEmail?: string;\n};\n\ntype ApiOptions = {\n  token?: string;\n};\n\ntype SelfHostedApiOptions = ApiOptions & {\n  baseUrl: string;\n};\n\ntype EmailDomainOptions = {\n  domain: string;\n};\n\nexport class ForwarderOptionsMigrator extends Migrator<64, 65> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const accounts = await helper.getAccounts<AccountType>();\n\n    async function migrateAccount(userId: string, account: AccountType) {\n      const legacyOptions = account?.settings?.usernameGenerationOptions;\n\n      if (legacyOptions) {\n        const converted = convertSettings(legacyOptions);\n        await storeSettings(helper, userId, converted);\n        await deleteSettings(helper, userId, account);\n      }\n    }\n\n    await Promise.all([...accounts.map(({ userId, account }) => migrateAccount(userId, account))]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    // not supported\n  }\n}\n\nfunction convertSettings(options: ExpectedOptions): ConvertedOptions {\n  const forwarders = {\n    addyIo: {\n      baseUrl: options.forwardedAnonAddyBaseUrl,\n      token: options.forwardedAnonAddyApiToken,\n      domain: options.forwardedAnonAddyDomain,\n    },\n    duckDuckGo: {\n      token: options.forwardedDuckDuckGoToken,\n    },\n    fastmail: {\n      token: options.forwardedFastmailApiToken,\n    },\n    firefoxRelay: {\n      token: options.forwardedFirefoxApiToken,\n    },\n    forwardEmail: {\n      token: options.forwardedForwardEmailApiToken,\n      domain: options.forwardedForwardEmailDomain,\n    },\n    simpleLogin: {\n      token: options.forwardedSimpleLoginApiKey,\n      baseUrl: options.forwardedSimpleLoginBaseUrl,\n    },\n  };\n\n  const generator = {\n    username: options.type,\n    forwarder: options.forwardedService,\n  };\n\n  const algorithms = {\n    effUsername: {\n      wordCapitalize: options.wordCapitalize,\n      wordIncludeNumber: options.wordIncludeNumber,\n    },\n    subaddress: {\n      subaddressType: options.subaddressType,\n      subaddressEmail: options.subaddressEmail,\n    },\n    catchall: {\n      catchallType: options.catchallType,\n      catchallDomain: options.catchallDomain,\n    },\n  };\n\n  return { generator, algorithms, forwarders };\n}\n\nasync function storeSettings(helper: MigrationHelper, userId: string, converted: ConvertedOptions) {\n  await Promise.all([\n    helper.setToUser(userId, NAVIGATION, converted.generator),\n    helper.setToUser(userId, CATCHALL, converted.algorithms.catchall),\n    helper.setToUser(userId, EFF_USERNAME, converted.algorithms.effUsername),\n    helper.setToUser(userId, SUBADDRESS, converted.algorithms.subaddress),\n    helper.setToUser(userId, ADDY_IO, converted.forwarders.addyIo),\n    helper.setToUser(userId, DUCK_DUCK_GO, converted.forwarders.duckDuckGo),\n    helper.setToUser(userId, FASTMAIL, converted.forwarders.fastmail),\n    helper.setToUser(userId, FIREFOX_RELAY, converted.forwarders.firefoxRelay),\n    helper.setToUser(userId, FORWARD_EMAIL, converted.forwarders.forwardEmail),\n    helper.setToUser(userId, SIMPLE_LOGIN, converted.forwarders.simpleLogin),\n  ]);\n}\n\nasync function deleteSettings(helper: MigrationHelper, userId: string, account: AccountType) {\n  delete account?.settings?.usernameGenerationOptions;\n  await helper.set(userId, account);\n}\n","import { KeyDefinitionLike, MigrationHelper, StateDefinitionLike } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedGlobal = {\n  enableBrowserIntegration?: boolean;\n  enableBrowserIntegrationFingerprint?: boolean;\n};\n\ntype ExpectedAccount = {\n  settings?: {\n    minimizeOnCopyToClipboard?: boolean;\n  };\n};\n\nconst DESKTOP_SETTINGS_DISK: StateDefinitionLike = {\n  name: \"desktopSettings\",\n};\n\nconst BROWSER_INTEGRATION_ENABLED: KeyDefinitionLike = {\n  key: \"browserIntegrationEnabled\",\n  stateDefinition: DESKTOP_SETTINGS_DISK,\n};\n\nconst BROWSER_INTEGRATION_FINGERPRINT_ENABLED: KeyDefinitionLike = {\n  key: \"browserIntegrationFingerprintEnabled\",\n  stateDefinition: DESKTOP_SETTINGS_DISK,\n};\n\nconst MINIMIZE_ON_COPY: KeyDefinitionLike = {\n  key: \"minimizeOnCopy\",\n  stateDefinition: DESKTOP_SETTINGS_DISK,\n};\n\nexport class MoveFinalDesktopSettingsMigrator extends Migrator<65, 66> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const legacyGlobal = await helper.get<ExpectedGlobal>(\"global\");\n    const enableBrowserIntegrationValue = legacyGlobal?.enableBrowserIntegration;\n    const enableBrowserIntegrationFingerprintValue =\n      legacyGlobal?.enableBrowserIntegrationFingerprint;\n\n    let updatedGlobal = false;\n\n    if (enableBrowserIntegrationValue != null) {\n      await helper.setToGlobal(BROWSER_INTEGRATION_ENABLED, enableBrowserIntegrationValue);\n      delete legacyGlobal.enableBrowserIntegration;\n      updatedGlobal = true;\n    }\n\n    if (enableBrowserIntegrationFingerprintValue != null) {\n      await helper.setToGlobal(\n        BROWSER_INTEGRATION_FINGERPRINT_ENABLED,\n        enableBrowserIntegrationFingerprintValue,\n      );\n      delete legacyGlobal.enableBrowserIntegrationFingerprint;\n      updatedGlobal = true;\n    }\n\n    if (updatedGlobal) {\n      await helper.set(\"global\", legacyGlobal);\n    }\n\n    async function migrateAccount(userId: string, account: ExpectedAccount) {\n      const minimizeOnCopyToClipboardValue = account?.settings?.minimizeOnCopyToClipboard;\n\n      if (minimizeOnCopyToClipboardValue != null) {\n        await helper.setToUser(userId, MINIMIZE_ON_COPY, minimizeOnCopyToClipboardValue);\n        delete account.settings.minimizeOnCopyToClipboard;\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccount>();\n\n    await Promise.all(accounts.map(({ userId, account }) => migrateAccount(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const browserIntegrationEnabledValue = await helper.getFromGlobal<boolean>(\n      BROWSER_INTEGRATION_ENABLED,\n    );\n\n    const browserIntegrationFingerprintEnabled = await helper.getFromGlobal<boolean>(\n      BROWSER_INTEGRATION_FINGERPRINT_ENABLED,\n    );\n\n    if (browserIntegrationEnabledValue != null) {\n      let legacyGlobal = await helper.get<ExpectedGlobal>(\"global\");\n      legacyGlobal ??= {};\n      legacyGlobal.enableBrowserIntegration = browserIntegrationEnabledValue;\n      await helper.set(\"global\", legacyGlobal);\n      await helper.removeFromGlobal(BROWSER_INTEGRATION_ENABLED);\n    }\n\n    if (browserIntegrationFingerprintEnabled != null) {\n      let legacyGlobal = await helper.get<ExpectedGlobal>(\"global\");\n      legacyGlobal ??= {};\n      legacyGlobal.enableBrowserIntegrationFingerprint = browserIntegrationFingerprintEnabled;\n      await helper.set(\"global\", legacyGlobal);\n      await helper.removeFromGlobal(BROWSER_INTEGRATION_FINGERPRINT_ENABLED);\n    }\n\n    async function rollbackAccount(userId: string, account: ExpectedAccount) {\n      const minimizeOnCopyToClipboardValue = await helper.getFromUser<boolean>(\n        userId,\n        MINIMIZE_ON_COPY,\n      );\n\n      if (minimizeOnCopyToClipboardValue != null) {\n        account ??= { settings: {} };\n        account.settings.minimizeOnCopyToClipboard = minimizeOnCopyToClipboardValue;\n        await helper.set(userId, account);\n        await helper.removeFromUser(userId, MINIMIZE_ON_COPY);\n      }\n    }\n\n    const accounts = await helper.getAccounts();\n    await Promise.all(accounts.map(({ userId, account }) => rollbackAccount(userId, account)));\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { IRREVERSIBLE, Migrator } from \"../migrator\";\n\nexport const SHOW_BANNER: KeyDefinitionLike = {\n  key: \"showBanner\",\n  stateDefinition: { name: \"unassignedItemsBanner\" },\n};\n\nexport class RemoveUnassignedItemsBannerDismissed extends Migrator<66, 67> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    await Promise.all(\n      (await helper.getAccounts()).map(async ({ userId }) => {\n        if (helper.getFromUser(userId, SHOW_BANNER) != null) {\n          await helper.removeFromUser(userId, SHOW_BANNER);\n        }\n      }),\n    );\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n}\n","import { KeyDefinitionLike, MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype ExpectedAccount = {\n  profile?: {\n    lastSync?: string;\n  };\n};\n\nconst LAST_SYNC_KEY: KeyDefinitionLike = {\n  key: \"lastSync\",\n  stateDefinition: {\n    name: \"sync\",\n  },\n};\n\nexport class MoveLastSyncDate extends Migrator<67, 68> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    async function migrateAccount(userId: string, account: ExpectedAccount) {\n      const value = account?.profile?.lastSync;\n      if (value != null) {\n        await helper.setToUser(userId, LAST_SYNC_KEY, value);\n\n        delete account.profile.lastSync;\n        await helper.set(userId, account);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccount>();\n    await Promise.all(accounts.map(({ userId, account }) => migrateAccount(userId, account)));\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    async function rollbackAccount(userId: string, account: ExpectedAccount) {\n      const value = await helper.getFromUser<string>(userId, LAST_SYNC_KEY);\n\n      if (value != null) {\n        account ??= {};\n        account.profile ??= {};\n        account.profile.lastSync = value;\n        await helper.set(userId, account);\n        await helper.removeFromUser(userId, LAST_SYNC_KEY);\n      }\n    }\n\n    const accounts = await helper.getAccounts<ExpectedAccount>();\n    await Promise.all(accounts.map(({ userId, account }) => rollbackAccount(userId, account)));\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Direction, IRREVERSIBLE, Migrator } from \"../migrator\";\n\ntype ExpectedAccountType = { settings?: { disableAutoBiometricsPrompt?: boolean } };\n\nexport class MoveBiometricAutoPromptToAccount extends Migrator<6, 7> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const global = await helper.get<{ noAutoPromptBiometrics?: boolean }>(\"global\");\n    const noAutoPromptBiometrics = global?.noAutoPromptBiometrics ?? false;\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n    async function updateAccount(userId: string, account: ExpectedAccountType) {\n      if (account == null) {\n        return;\n      }\n\n      if (noAutoPromptBiometrics) {\n        account.settings = Object.assign(account?.settings ?? {}, {\n          disableAutoBiometricsPrompt: true,\n        });\n        await helper.set(userId, account);\n      }\n    }\n\n    delete global.noAutoPromptBiometrics;\n\n    await Promise.all([\n      ...accounts.map(({ userId, account }) => updateAccount(userId, account)),\n      helper.set(\"global\", global),\n    ]);\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but for this version\n  // it is nested inside a global object.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n    await helper.set(\"global\", { ...global, stateVersion: endVersion });\n  }\n}\n","import { JsonObject } from \"type-fest\";\n\nimport { MigrationHelper } from \"../migration-helper\";\nimport { Direction, Migrator } from \"../migrator\";\n\nexport class MoveStateVersionMigrator extends Migrator<7, 8> {\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const global = await helper.get<{ stateVersion: number }>(\"global\");\n    if (global.stateVersion) {\n      await helper.set(\"stateVersion\", global.stateVersion);\n      delete global.stateVersion;\n      await helper.set(\"global\", global);\n    } else {\n      throw new Error(\"Migration failed, state version not found\");\n    }\n  }\n\n  async rollback(helper: MigrationHelper): Promise<void> {\n    const version = await helper.get<number>(\"stateVersion\");\n    const global = await helper.get<JsonObject>(\"global\");\n    await helper.set(\"global\", { ...global, stateVersion: version });\n    await helper.set(\"stateVersion\", undefined);\n  }\n\n  // Override is necessary because default implementation assumes `stateVersion` at the root, but this migration moves\n  // it from a `global` object to root.This makes for unique rollback versioning.\n  override async updateVersion(helper: MigrationHelper, direction: Direction): Promise<void> {\n    const endVersion = direction === \"up\" ? this.toVersion : this.fromVersion;\n    helper.currentVersion = endVersion;\n    if (direction === \"up\") {\n      await helper.set(\"stateVersion\", endVersion);\n    } else {\n      const global: { stateVersion: number } = (await helper.get(\"global\")) || ({} as any);\n      await helper.set(\"global\", { ...global, stateVersion: endVersion });\n    }\n  }\n}\n","import { MigrationHelper } from \"../migration-helper\";\nimport { Migrator } from \"../migrator\";\n\ntype NeverDomains = { [id: string]: unknown };\n\ntype ExpectedAccountType = {\n  settings?: {\n    neverDomains?: NeverDomains;\n    disableAddLoginNotification?: boolean;\n    disableChangedPasswordNotification?: boolean;\n    disableContextMenuItem?: boolean;\n  };\n};\n\ntype TargetGlobalState = {\n  neverDomains?: NeverDomains;\n  disableAddLoginNotification?: boolean;\n  disableChangedPasswordNotification?: boolean;\n  disableContextMenuItem?: boolean;\n};\n\nexport class MoveBrowserSettingsToGlobal extends Migrator<8, 9> {\n  // Will first check if any of the accounts have a value from the given accountSelector\n  // if they do have a value it will set that value into global state but if multiple\n  // users have differing values it will prefer the false setting,\n  // if all users have true then it will take true.\n  tryAddSetting(\n    accounts: { userId: string; account: ExpectedAccountType }[],\n    accountSelector: (account: ExpectedAccountType) => boolean | undefined,\n    globalSetter: (value: boolean | undefined) => void,\n  ): void {\n    const hasValue = accounts.some(({ account }) => {\n      return accountSelector(account) !== undefined;\n    });\n\n    if (hasValue) {\n      const value = !accounts.some(({ account }) => {\n        return (accountSelector(account) ?? false) === false;\n      });\n\n      globalSetter(value);\n    }\n  }\n\n  async migrate(helper: MigrationHelper): Promise<void> {\n    const global = await helper.get<object>(\"global\");\n\n    const accounts = await helper.getAccounts<ExpectedAccountType>();\n\n    const globalNeverDomainsValue = accounts.reduce((accumulator, { account }) => {\n      const normalizedNeverDomains = account.settings?.neverDomains ?? {};\n      for (const [id, value] of Object.entries(normalizedNeverDomains)) {\n        accumulator ??= {};\n        accumulator[id] = value;\n      }\n      return accumulator;\n    }, undefined as NeverDomains);\n\n    const targetGlobalState: TargetGlobalState = {};\n\n    if (globalNeverDomainsValue != null) {\n      targetGlobalState.neverDomains = globalNeverDomainsValue;\n    }\n\n    this.tryAddSetting(\n      accounts,\n      (a) => a.settings?.disableAddLoginNotification,\n      (v) => (targetGlobalState.disableAddLoginNotification = v),\n    );\n\n    this.tryAddSetting(\n      accounts,\n      (a) => a.settings?.disableChangedPasswordNotification,\n      (v) => (targetGlobalState.disableChangedPasswordNotification = v),\n    );\n\n    this.tryAddSetting(\n      accounts,\n      (a) => a.settings?.disableContextMenuItem,\n      (v) => (targetGlobalState.disableContextMenuItem = v),\n    );\n\n    await helper.set<TargetGlobalState>(\"global\", {\n      ...global,\n      ...targetGlobalState,\n    });\n\n    await Promise.all(\n      accounts.map(async ({ userId, account }) => {\n        delete account.settings?.disableAddLoginNotification;\n        delete account.settings?.disableChangedPasswordNotification;\n        delete account.settings?.disableContextMenuItem;\n        delete account.settings?.neverDomains;\n        await helper.set(userId, account);\n      }),\n    );\n  }\n\n  rollback(helper: MigrationHelper): Promise<void> {\n    throw new Error(\"Method not implemented.\");\n  }\n}\n","import { MinVersion, MIN_VERSION } from \"../migrate\";\nimport { MigrationHelper } from \"../migration-helper\";\nimport { IRREVERSIBLE, Migrator } from \"../migrator\";\n\nexport function minVersionError(current: number) {\n  return `Your local data is too old to be migrated. Your current state version is ${current}, but minimum version is ${MIN_VERSION}.`;\n}\n\nexport class MinVersionMigrator extends Migrator<0, MinVersion> {\n  constructor() {\n    super(0, MIN_VERSION);\n  }\n\n  // Overrides the default implementation to catch any version that may be passed in.\n  override shouldMigrate(helper: MigrationHelper): Promise<boolean> {\n    return Promise.resolve(helper.currentVersion < MIN_VERSION);\n  }\n  async migrate(helper: MigrationHelper): Promise<void> {\n    if (helper.currentVersion < MIN_VERSION) {\n      throw new Error(minVersionError(helper.currentVersion));\n    }\n  }\n  async rollback(helper: MigrationHelper): Promise<void> {\n    throw IRREVERSIBLE;\n  }\n}\n","// eslint-disable-next-line import/no-restricted-paths -- Needed to print log messages\nimport { LogService } from \"../platform/abstractions/log.service\";\n// eslint-disable-next-line import/no-restricted-paths -- Needed to interface with storage locations\nimport { AbstractStorageService } from \"../platform/abstractions/storage.service\";\n\nimport { MigrationBuilder } from \"./migration-builder\";\nimport { EverHadUserKeyMigrator } from \"./migrations/10-move-ever-had-user-key-to-state-providers\";\nimport { OrganizationKeyMigrator } from \"./migrations/11-move-org-keys-to-state-providers\";\nimport { MoveEnvironmentStateToProviders } from \"./migrations/12-move-environment-state-to-providers\";\nimport { ProviderKeyMigrator } from \"./migrations/13-move-provider-keys-to-state-providers\";\nimport { MoveBiometricClientKeyHalfToStateProviders } from \"./migrations/14-move-biometric-client-key-half-state-to-providers\";\nimport { FolderMigrator } from \"./migrations/15-move-folder-state-to-state-provider\";\nimport { LastSyncMigrator } from \"./migrations/16-move-last-sync-to-state-provider\";\nimport { EnablePasskeysMigrator } from \"./migrations/17-move-enable-passkeys-to-state-providers\";\nimport { AutofillSettingsKeyMigrator } from \"./migrations/18-move-autofill-settings-to-state-providers\";\nimport { RequirePasswordOnStartMigrator } from \"./migrations/19-migrate-require-password-on-start\";\nimport { PrivateKeyMigrator } from \"./migrations/20-move-private-key-to-state-providers\";\nimport { CollectionMigrator } from \"./migrations/21-move-collections-state-to-state-provider\";\nimport { CollapsedGroupingsMigrator } from \"./migrations/22-move-collapsed-groupings-to-state-provider\";\nimport { MoveBiometricPromptsToStateProviders } from \"./migrations/23-move-biometric-prompts-to-state-providers\";\nimport { SmOnboardingTasksMigrator } from \"./migrations/24-move-sm-onboarding-key-to-state-providers\";\nimport { ClearClipboardDelayMigrator } from \"./migrations/25-move-clear-clipboard-to-autofill-settings-state-provider\";\nimport { RevertLastSyncMigrator } from \"./migrations/26-revert-move-last-sync-to-state-provider\";\nimport { BadgeSettingsMigrator } from \"./migrations/27-move-badge-settings-to-state-providers\";\nimport { MoveBiometricUnlockToStateProviders } from \"./migrations/28-move-biometric-unlock-to-state-providers\";\nimport { UserNotificationSettingsKeyMigrator } from \"./migrations/29-move-user-notification-settings-to-state-provider\";\nimport { PolicyMigrator } from \"./migrations/30-move-policy-state-to-state-provider\";\nimport { EnableContextMenuMigrator } from \"./migrations/31-move-enable-context-menu-to-autofill-settings-state-provider\";\nimport { PreferredLanguageMigrator } from \"./migrations/32-move-preferred-language\";\nimport { AppIdMigrator } from \"./migrations/33-move-app-id-to-state-providers\";\nimport { DomainSettingsMigrator } from \"./migrations/34-move-domain-settings-to-state-providers\";\nimport { MoveThemeToStateProviderMigrator } from \"./migrations/35-move-theme-to-state-providers\";\nimport { VaultSettingsKeyMigrator } from \"./migrations/36-move-show-card-and-identity-to-state-provider\";\nimport { AvatarColorMigrator } from \"./migrations/37-move-avatar-color-to-state-providers\";\nimport { TokenServiceStateProviderMigrator } from \"./migrations/38-migrate-token-svc-to-state-provider\";\nimport { MoveBillingAccountProfileMigrator } from \"./migrations/39-move-billing-account-profile-to-state-providers\";\nimport { RemoveEverBeenUnlockedMigrator } from \"./migrations/4-remove-ever-been-unlocked\";\nimport { OrganizationMigrator } from \"./migrations/40-move-organization-state-to-state-provider\";\nimport { EventCollectionMigrator } from \"./migrations/41-move-event-collection-to-state-provider\";\nimport { EnableFaviconMigrator } from \"./migrations/42-move-enable-favicon-to-domain-settings-state-provider\";\nimport { AutoConfirmFingerPrintsMigrator } from \"./migrations/43-move-auto-confirm-finger-prints-to-state-provider\";\nimport { UserDecryptionOptionsMigrator } from \"./migrations/44-move-user-decryption-options-to-state-provider\";\nimport { MergeEnvironmentState } from \"./migrations/45-merge-environment-state\";\nimport { DeleteBiometricPromptCancelledData } from \"./migrations/46-delete-orphaned-biometric-prompt-data\";\nimport { MoveDesktopSettingsMigrator } from \"./migrations/47-move-desktop-settings\";\nimport { MoveDdgToStateProviderMigrator } from \"./migrations/48-move-ddg-to-state-provider\";\nimport { AccountServerConfigMigrator } from \"./migrations/49-move-account-server-configs\";\nimport { AddKeyTypeToOrgKeysMigrator } from \"./migrations/5-add-key-type-to-org-keys\";\nimport { KeyConnectorMigrator } from \"./migrations/50-move-key-connector-to-state-provider\";\nimport { RememberedEmailMigrator } from \"./migrations/51-move-remembered-email-to-state-providers\";\nimport { DeleteInstalledVersion } from \"./migrations/52-delete-installed-version\";\nimport { DeviceTrustServiceStateProviderMigrator } from \"./migrations/53-migrate-device-trust-svc-to-state-providers\";\nimport { SendMigrator } from \"./migrations/54-move-encrypted-sends\";\nimport { MoveMasterKeyStateToProviderMigrator } from \"./migrations/55-move-master-key-state-to-provider\";\nimport { AuthRequestMigrator } from \"./migrations/56-move-auth-requests\";\nimport { CipherServiceMigrator } from \"./migrations/57-move-cipher-service-to-state-provider\";\nimport { RemoveRefreshTokenMigratedFlagMigrator } from \"./migrations/58-remove-refresh-token-migrated-state-provider-flag\";\nimport { KdfConfigMigrator } from \"./migrations/59-move-kdf-config-to-state-provider\";\nimport { RemoveLegacyEtmKeyMigrator } from \"./migrations/6-remove-legacy-etm-key\";\nimport { KnownAccountsMigrator } from \"./migrations/60-known-accounts\";\nimport { PinStateMigrator } from \"./migrations/61-move-pin-state-to-providers\";\nimport { VaultTimeoutSettingsServiceStateProviderMigrator } from \"./migrations/62-migrate-vault-timeout-settings-svc-to-state-provider\";\nimport { PasswordOptionsMigrator } from \"./migrations/63-migrate-password-settings\";\nimport { GeneratorHistoryMigrator } from \"./migrations/64-migrate-generator-history\";\nimport { ForwarderOptionsMigrator } from \"./migrations/65-migrate-forwarder-settings\";\nimport { MoveFinalDesktopSettingsMigrator } from \"./migrations/66-move-final-desktop-settings\";\nimport { RemoveUnassignedItemsBannerDismissed } from \"./migrations/67-remove-unassigned-items-banner-dismissed\";\nimport { MoveLastSyncDate } from \"./migrations/68-move-last-sync-date\";\nimport { MoveBiometricAutoPromptToAccount } from \"./migrations/7-move-biometric-auto-prompt-to-account\";\nimport { MoveStateVersionMigrator } from \"./migrations/8-move-state-version\";\nimport { MoveBrowserSettingsToGlobal } from \"./migrations/9-move-browser-settings-to-global\";\nimport { MinVersionMigrator } from \"./migrations/min-version\";\n\nexport const MIN_VERSION = 3;\nexport const CURRENT_VERSION = 68;\nexport type MinVersion = typeof MIN_VERSION;\n\nexport function createMigrationBuilder() {\n  return MigrationBuilder.create()\n    .with(MinVersionMigrator)\n    .with(RemoveEverBeenUnlockedMigrator, 3, 4)\n    .with(AddKeyTypeToOrgKeysMigrator, 4, 5)\n    .with(RemoveLegacyEtmKeyMigrator, 5, 6)\n    .with(MoveBiometricAutoPromptToAccount, 6, 7)\n    .with(MoveStateVersionMigrator, 7, 8)\n    .with(MoveBrowserSettingsToGlobal, 8, 9)\n    .with(EverHadUserKeyMigrator, 9, 10)\n    .with(OrganizationKeyMigrator, 10, 11)\n    .with(MoveEnvironmentStateToProviders, 11, 12)\n    .with(ProviderKeyMigrator, 12, 13)\n    .with(MoveBiometricClientKeyHalfToStateProviders, 13, 14)\n    .with(FolderMigrator, 14, 15)\n    .with(LastSyncMigrator, 15, 16)\n    .with(EnablePasskeysMigrator, 16, 17)\n    .with(AutofillSettingsKeyMigrator, 17, 18)\n    .with(RequirePasswordOnStartMigrator, 18, 19)\n    .with(PrivateKeyMigrator, 19, 20)\n    .with(CollectionMigrator, 20, 21)\n    .with(CollapsedGroupingsMigrator, 21, 22)\n    .with(MoveBiometricPromptsToStateProviders, 22, 23)\n    .with(SmOnboardingTasksMigrator, 23, 24)\n    .with(ClearClipboardDelayMigrator, 24, 25)\n    .with(RevertLastSyncMigrator, 25, 26)\n    .with(BadgeSettingsMigrator, 26, 27)\n    .with(MoveBiometricUnlockToStateProviders, 27, 28)\n    .with(UserNotificationSettingsKeyMigrator, 28, 29)\n    .with(PolicyMigrator, 29, 30)\n    .with(EnableContextMenuMigrator, 30, 31)\n    .with(PreferredLanguageMigrator, 31, 32)\n    .with(AppIdMigrator, 32, 33)\n    .with(DomainSettingsMigrator, 33, 34)\n    .with(MoveThemeToStateProviderMigrator, 34, 35)\n    .with(VaultSettingsKeyMigrator, 35, 36)\n    .with(AvatarColorMigrator, 36, 37)\n    .with(TokenServiceStateProviderMigrator, 37, 38)\n    .with(MoveBillingAccountProfileMigrator, 38, 39)\n    .with(OrganizationMigrator, 39, 40)\n    .with(EventCollectionMigrator, 40, 41)\n    .with(EnableFaviconMigrator, 41, 42)\n    .with(AutoConfirmFingerPrintsMigrator, 42, 43)\n    .with(UserDecryptionOptionsMigrator, 43, 44)\n    .with(MergeEnvironmentState, 44, 45)\n    .with(DeleteBiometricPromptCancelledData, 45, 46)\n    .with(MoveDesktopSettingsMigrator, 46, 47)\n    .with(MoveDdgToStateProviderMigrator, 47, 48)\n    .with(AccountServerConfigMigrator, 48, 49)\n    .with(KeyConnectorMigrator, 49, 50)\n    .with(RememberedEmailMigrator, 50, 51)\n    .with(DeleteInstalledVersion, 51, 52)\n    .with(DeviceTrustServiceStateProviderMigrator, 52, 53)\n    .with(SendMigrator, 53, 54)\n    .with(MoveMasterKeyStateToProviderMigrator, 54, 55)\n    .with(AuthRequestMigrator, 55, 56)\n    .with(CipherServiceMigrator, 56, 57)\n    .with(RemoveRefreshTokenMigratedFlagMigrator, 57, 58)\n    .with(KdfConfigMigrator, 58, 59)\n    .with(KnownAccountsMigrator, 59, 60)\n    .with(PinStateMigrator, 60, 61)\n    .with(VaultTimeoutSettingsServiceStateProviderMigrator, 61, 62)\n    .with(PasswordOptionsMigrator, 62, 63)\n    .with(GeneratorHistoryMigrator, 63, 64)\n    .with(ForwarderOptionsMigrator, 64, 65)\n    .with(MoveFinalDesktopSettingsMigrator, 65, 66)\n    .with(RemoveUnassignedItemsBannerDismissed, 66, 67)\n    .with(MoveLastSyncDate, 67, CURRENT_VERSION);\n}\n\nexport async function currentVersion(\n  storageService: AbstractStorageService,\n  logService: LogService,\n) {\n  let state = await storageService.get<number>(\"stateVersion\");\n  if (state == null) {\n    // Pre v8\n    state = (await storageService.get<{ stateVersion: number }>(\"global\"))?.stateVersion;\n  }\n  if (state == null) {\n    logService.info(\"No state version found, assuming empty state.\");\n    return -1;\n  }\n  logService.info(`State version: ${state}`);\n  return state;\n}\n\n/**\n * Waits for migrations to have a chance to run and will resolve the promise once they are.\n *\n * @param storageService Disk storage where the `stateVersion` will or is already saved in.\n * @param logService Log service\n */\nexport async function waitForMigrations(\n  storageService: AbstractStorageService,\n  logService: LogService,\n) {\n  const isReady = async () => {\n    const version = await currentVersion(storageService, logService);\n    // The saved version is what we consider the latest\n    // migrations should be complete, the state version\n    // shouldn't become larger than `CURRENT_VERSION` in\n    // any normal usage of the application but it is common\n    // enough in dev scenarios where we want to consider that\n    // ready as well and return true in that scenario.\n    return version >= CURRENT_VERSION;\n  };\n\n  const wait = async (time: number) => {\n    // Wait exponentially\n    const nextTime = time * 2;\n    if (nextTime > 8192) {\n      // Don't wait longer than ~8 seconds in a single wait,\n      // if the migrations still haven't happened. They aren't\n      // likely to.\n      return;\n    }\n    return new Promise<void>((resolve) => {\n      setTimeout(async () => {\n        if (!(await isReady())) {\n          logService.info(`Waiting for migrations to finish, waiting for ${nextTime}ms`);\n          await wait(nextTime);\n        }\n        resolve();\n      }, time);\n    });\n  };\n\n  if (!(await isReady())) {\n    // Wait for 2ms to start with\n    await wait(2);\n  }\n}\n","import { createMigrationBuilder } from \"../../state-migrations\";\nimport { MigrationBuilder } from \"../../state-migrations/migration-builder\";\n\nexport class MigrationBuilderService {\n  private migrationBuilderCache: MigrationBuilder;\n\n  build() {\n    return (this.migrationBuilderCache ??= createMigrationBuilder());\n  }\n}\n","// eslint-disable-next-line import/no-restricted-paths -- Needed to provide client type to migrations\nimport { ClientType } from \"../enums\";\n// eslint-disable-next-line import/no-restricted-paths -- Needed to print log messages\nimport { LogService } from \"../platform/abstractions/log.service\";\n// eslint-disable-next-line import/no-restricted-paths -- Needed to interface with storage locations\nimport { AbstractStorageService } from \"../platform/abstractions/storage.service\";\n\nexport type StateDefinitionLike = { name: string };\nexport type KeyDefinitionLike = {\n  stateDefinition: StateDefinitionLike;\n  key: string;\n};\n\nexport type MigrationHelperType = \"general\" | \"web-disk-local\";\n\nexport class MigrationHelper {\n  constructor(\n    public currentVersion: number,\n    private storageService: AbstractStorageService,\n    public logService: LogService,\n    type: MigrationHelperType,\n    public clientType: ClientType,\n  ) {\n    this.type = type;\n  }\n\n  /**\n   * On some clients, migrations are ran multiple times without direct action from the migration writer.\n   *\n   * All clients will run through migrations at least once, this run is referred to as `\"general\"`. If a migration is\n   * ran more than that single time, they will get a unique name if that the write can make conditional logic based on which\n   * migration run this is.\n   *\n   * @remarks The preferrable way of writing migrations is ALWAYS to be defensive and reflect on the data you are given back. This\n   * should really only be used when reflecting on the data given isn't enough.\n   */\n  type: MigrationHelperType;\n\n  /**\n   * Gets a value from the storage service at the given key.\n   *\n   * This is a brute force method to just get a value from the storage service. If you can use {@link getFromGlobal} or {@link getFromUser}, you should.\n   * @param key location\n   * @returns the value at the location\n   */\n  get<T>(key: string): Promise<T> {\n    return this.storageService.get<T>(key);\n  }\n\n  /**\n   * Sets a value in the storage service at the given key.\n   *\n   * This is a brute force method to just set a value in the storage service. If you can use {@link setToGlobal} or {@link setToUser}, you should.\n   * @param key location\n   * @param value the value to set\n   * @returns\n   */\n  set<T>(key: string, value: T): Promise<void> {\n    this.logService.info(`Setting ${key}`);\n    return this.storageService.save(key, value);\n  }\n\n  /**\n   * Remove a value in the storage service at the given key.\n   *\n   * This is a brute force method to just remove a value in the storage service. If you can use {@link removeFromGlobal} or {@link removeFromUser}, you should.\n   * @param key location\n   * @returns void\n   */\n  remove(key: string): Promise<void> {\n    this.logService.info(`Removing ${key}`);\n    return this.storageService.remove(key);\n  }\n\n  /**\n   * Gets a globally scoped value from a location derived through the key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link get} for those.\n   * @param keyDefinition unique key definition\n   * @returns value from store\n   */\n  getFromGlobal<T>(keyDefinition: KeyDefinitionLike): Promise<T> {\n    return this.get<T>(this.getGlobalKey(keyDefinition));\n  }\n\n  /**\n   * Sets a globally scoped value to a location derived through the key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link set} for those.\n   * @param keyDefinition unique key definition\n   * @param value value to store\n   * @returns void\n   */\n  setToGlobal<T>(keyDefinition: KeyDefinitionLike, value: T): Promise<void> {\n    return this.set(this.getGlobalKey(keyDefinition), value);\n  }\n\n  /**\n   * Remove a globally scoped location derived through the key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link remove} for those.\n   * @param keyDefinition unique key definition\n   * @returns void\n   */\n  removeFromGlobal(keyDefinition: KeyDefinitionLike): Promise<void> {\n    return this.remove(this.getGlobalKey(keyDefinition));\n  }\n\n  /**\n   * Gets a user scoped value from a location derived through the user id and key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link get} for those.\n   * @param userId userId to use in the key\n   * @param keyDefinition unique key definition\n   * @returns value from store\n   */\n  getFromUser<T>(userId: string, keyDefinition: KeyDefinitionLike): Promise<T> {\n    return this.get<T>(this.getUserKey(userId, keyDefinition));\n  }\n\n  /**\n   * Sets a user scoped value to a location derived through the user id and key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link set} for those.\n   * @param userId userId to use in the key\n   * @param keyDefinition unique key definition\n   * @param value value to store\n   * @returns void\n   */\n  setToUser<T>(userId: string, keyDefinition: KeyDefinitionLike, value: T): Promise<void> {\n    return this.set(this.getUserKey(userId, keyDefinition), value);\n  }\n\n  /**\n   * Remove a user scoped location derived through the key definition\n   *\n   * This is for use with the state providers framework, DO NOT use for values stored with {@link StateService},\n   * use {@link remove} for those.\n   * @param keyDefinition unique key definition\n   * @returns void\n   */\n  removeFromUser(userId: string, keyDefinition: KeyDefinitionLike): Promise<void> {\n    return this.remove(this.getUserKey(userId, keyDefinition));\n  }\n\n  info(message: string): void {\n    this.logService.info(message);\n  }\n\n  /**\n   * Helper method to read all Account objects stored by the State Service.\n   *\n   * This is useful from creating migrations off of this paradigm, but should not be used once a value is migrated to a state provider.\n   *\n   * @returns a list of all accounts that have been authenticated with state service, cast the expected type.\n   */\n  async getAccounts<ExpectedAccountType>(): Promise<\n    { userId: string; account: ExpectedAccountType }[]\n  > {\n    const userIds = await this.getKnownUserIds();\n    return Promise.all(\n      userIds.map(async (userId) => ({\n        userId,\n        account: await this.get<ExpectedAccountType>(userId),\n      })),\n    );\n  }\n\n  /**\n   * Helper method to read known users ids.\n   */\n  async getKnownUserIds(): Promise<string[]> {\n    if (this.currentVersion < 60) {\n      return knownAccountUserIdsBuilderPre60(this.storageService);\n    } else {\n      return knownAccountUserIdsBuilder(this.storageService);\n    }\n  }\n\n  /**\n   * Builds a user storage key appropriate for the current version.\n   *\n   * @param userId userId to use in the key\n   * @param keyDefinition state and key to use in the key\n   * @returns\n   */\n  private getUserKey(userId: string, keyDefinition: KeyDefinitionLike): string {\n    if (this.currentVersion < 9) {\n      return userKeyBuilderPre9();\n    } else {\n      return userKeyBuilder(userId, keyDefinition);\n    }\n  }\n\n  /**\n   * Builds a global storage key appropriate for the current version.\n   *\n   * @param keyDefinition state and key to use in the key\n   * @returns\n   */\n  private getGlobalKey(keyDefinition: KeyDefinitionLike): string {\n    if (this.currentVersion < 9) {\n      return globalKeyBuilderPre9();\n    } else {\n      return globalKeyBuilder(keyDefinition);\n    }\n  }\n}\n\n/**\n * When this is updated, rename this function to `userKeyBuilderXToY` where `X` is the version number it\n * became relevant, and `Y` prior to the version it was updated.\n *\n * Be sure to update the map in `MigrationHelper` to point to the appropriate function for the current version.\n * @param userId The userId of the user you want the key to be for.\n * @param keyDefinition the key definition of which data the key should point to.\n * @returns\n */\nfunction userKeyBuilder(userId: string, keyDefinition: KeyDefinitionLike): string {\n  return `user_${userId}_${keyDefinition.stateDefinition.name}_${keyDefinition.key}`;\n}\n\nfunction userKeyBuilderPre9(): string {\n  throw Error(\"No key builder should be used for versions prior to 9.\");\n}\n\n/**\n * When this is updated, rename this function to `globalKeyBuilderXToY` where `X` is the version number\n * it became relevant, and `Y` prior to the version it was updated.\n *\n * Be sure to update the map in `MigrationHelper` to point to the appropriate function for the current version.\n * @param keyDefinition the key definition of which data the key should point to.\n * @returns\n */\nfunction globalKeyBuilder(keyDefinition: KeyDefinitionLike): string {\n  return `global_${keyDefinition.stateDefinition.name}_${keyDefinition.key}`;\n}\n\nfunction globalKeyBuilderPre9(): string {\n  throw Error(\"No key builder should be used for versions prior to 9.\");\n}\n\nasync function knownAccountUserIdsBuilderPre60(\n  storageService: AbstractStorageService,\n): Promise<string[]> {\n  return (await storageService.get<string[]>(\"authenticatedAccounts\")) ?? [];\n}\n\nasync function knownAccountUserIdsBuilder(\n  storageService: AbstractStorageService,\n): Promise<string[]> {\n  const accounts = await storageService.get<Record<string, unknown>>(\n    globalKeyBuilder({ stateDefinition: { name: \"account\" }, key: \"accounts\" }),\n  );\n  return Object.keys(accounts ?? {});\n}\n","import { ClientType } from \"../../enums\";\nimport { waitForMigrations } from \"../../state-migrations\";\nimport { CURRENT_VERSION, currentVersion } from \"../../state-migrations/migrate\";\nimport { MigrationHelper } from \"../../state-migrations/migration-helper\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { AbstractStorageService } from \"../abstractions/storage.service\";\n\nimport { MigrationBuilderService } from \"./migration-builder.service\";\n\nexport class MigrationRunner {\n  constructor(\n    protected diskStorage: AbstractStorageService,\n    protected logService: LogService,\n    protected migrationBuilderService: MigrationBuilderService,\n    private clientType: ClientType,\n  ) {}\n\n  async run(): Promise<void> {\n    const migrationHelper = new MigrationHelper(\n      await currentVersion(this.diskStorage, this.logService),\n      this.diskStorage,\n      this.logService,\n      \"general\",\n      this.clientType,\n    );\n\n    if (migrationHelper.currentVersion < 0) {\n      // Cannot determine state, assuming empty so we don't repeatedly apply a migration.\n      await this.diskStorage.save(\"stateVersion\", CURRENT_VERSION);\n      return;\n    }\n\n    const migrationBuilder = this.migrationBuilderService.build();\n\n    await migrationBuilder.migrate(migrationHelper);\n  }\n\n  async waitForCompletion(): Promise<void> {\n    await waitForMigrations(this.diskStorage, this.logService);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Account } from \"./account\";\nimport { GlobalState } from \"./global-state\";\n\nexport class State<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account,\n> {\n  accounts: { [userId: string]: TAccount } = {};\n  globals: TGlobalState;\n\n  constructor(globals: TGlobalState) {\n    this.globals = globals;\n  }\n\n  // TODO, make Jsonify<State,TGlobalState,TAccount> work. It currently doesn't because Globals doesn't implement Jsonify.\n  static fromJSON<TGlobalState extends GlobalState, TAccount extends Account>(\n    obj: any,\n    accountDeserializer: (json: Jsonify<TAccount>) => TAccount,\n  ): State<TGlobalState, TAccount> {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new State(null), obj, {\n      accounts: State.buildAccountMapFromJSON(obj?.accounts, accountDeserializer),\n    });\n  }\n\n  private static buildAccountMapFromJSON<TAccount extends Account>(\n    jsonAccounts: { [userId: string]: Jsonify<TAccount> },\n    accountDeserializer: (json: Jsonify<TAccount>) => TAccount,\n  ) {\n    if (!jsonAccounts) {\n      return {};\n    }\n    const accounts: { [userId: string]: TAccount } = {};\n    for (const userId in jsonAccounts) {\n      accounts[userId] = accountDeserializer(jsonAccounts[userId]);\n    }\n    return accounts;\n  }\n}\n","import { firstValueFrom, map } from \"rxjs\";\nimport { Jsonify, JsonValue } from \"type-fest\";\n\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { TokenService } from \"../../auth/abstractions/token.service\";\nimport { BiometricKey } from \"../../auth/types/biometric-key\";\nimport { UserId } from \"../../types/guid\";\nimport { EnvironmentService } from \"../abstractions/environment.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport {\n  InitOptions,\n  StateService as StateServiceAbstraction,\n} from \"../abstractions/state.service\";\nimport { AbstractStorageService } from \"../abstractions/storage.service\";\nimport { HtmlStorageLocation, StorageLocation } from \"../enums\";\nimport { StateFactory } from \"../factories/state-factory\";\nimport { Account } from \"../models/domain/account\";\nimport { GlobalState } from \"../models/domain/global-state\";\nimport { State } from \"../models/domain/state\";\nimport { StorageOptions } from \"../models/domain/storage-options\";\n\nimport { MigrationRunner } from \"./migration-runner\";\n\nconst keys = {\n  state: \"state\",\n  stateVersion: \"stateVersion\",\n  global: \"global\",\n  tempAccountSettings: \"tempAccountSettings\", // used to hold account specific settings (i.e clear clipboard) between initial migration and first account authentication\n};\n\nconst partialKeys = {\n  userAutoKey: \"_user_auto\",\n  userBiometricKey: \"_user_biometric\",\n\n  autoKey: \"_masterkey_auto\",\n  masterKey: \"_masterkey\",\n};\n\nconst DDG_SHARED_KEY = \"DuckDuckGoSharedKey\";\n\nexport class StateService<\n  TGlobalState extends GlobalState = GlobalState,\n  TAccount extends Account = Account,\n> implements StateServiceAbstraction<TAccount>\n{\n  private hasBeenInited = false;\n  protected isRecoveredSession = false;\n\n  // default account serializer, must be overridden by child class\n  protected accountDeserializer = Account.fromJSON as (json: Jsonify<TAccount>) => TAccount;\n\n  constructor(\n    protected storageService: AbstractStorageService,\n    protected secureStorageService: AbstractStorageService,\n    protected memoryStorageService: AbstractStorageService,\n    protected logService: LogService,\n    protected stateFactory: StateFactory<TGlobalState, TAccount>,\n    protected accountService: AccountService,\n    protected environmentService: EnvironmentService,\n    protected tokenService: TokenService,\n    private migrationRunner: MigrationRunner,\n  ) {}\n\n  async init(initOptions: InitOptions = {}): Promise<void> {\n    // Deconstruct and apply defaults\n    const { runMigrations = true } = initOptions;\n    if (this.hasBeenInited) {\n      return;\n    }\n\n    if (runMigrations) {\n      await this.migrationRunner.run();\n    } else {\n      // It may have been requested to not run the migrations but we should defensively not\n      // continue this method until migrations have a chance to be completed elsewhere.\n      await this.migrationRunner.waitForCompletion();\n    }\n\n    await this.state().then(async (state) => {\n      if (state == null) {\n        await this.setState(new State<TGlobalState, TAccount>(this.createGlobals()));\n      } else {\n        this.isRecoveredSession = true;\n      }\n    });\n    await this.initAccountState();\n\n    this.hasBeenInited = true;\n  }\n\n  async initAccountState() {\n    if (this.isRecoveredSession) {\n      return;\n    }\n\n    // Get all likely authenticated accounts\n    const authenticatedAccounts = await firstValueFrom(\n      this.accountService.accounts$.pipe(map((accounts) => Object.keys(accounts))),\n    );\n\n    await this.updateState(async (state) => {\n      for (const i in authenticatedAccounts) {\n        state = await this.syncAccountFromDisk(authenticatedAccounts[i]);\n      }\n\n      return state;\n    });\n  }\n\n  async syncAccountFromDisk(userId: string): Promise<State<TGlobalState, TAccount>> {\n    if (userId == null) {\n      return;\n    }\n    const diskAccount = await this.getAccountFromDisk({ userId: userId });\n    const state = await this.updateState(async (state) => {\n      if (state.accounts == null) {\n        state.accounts = {};\n      }\n      state.accounts[userId] = this.createAccount();\n\n      if (diskAccount == null) {\n        // Return early because we can't set the diskAccount.profile\n        // if diskAccount itself is null\n        return state;\n      }\n\n      state.accounts[userId].profile = diskAccount.profile;\n      return state;\n    });\n\n    return state;\n  }\n\n  async addAccount(account: TAccount) {\n    await this.environmentService.seedUserEnvironment(account.profile.userId as UserId);\n    await this.updateState(async (state) => {\n      state.accounts[account.profile.userId] = account;\n      return state;\n    });\n    await this.scaffoldNewAccountStorage(account);\n  }\n\n  async clean(options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultInMemoryOptions());\n    await this.deAuthenticateAccount(options.userId);\n\n    await this.removeAccountFromDisk(options?.userId);\n    await this.removeAccountFromMemory(options?.userId);\n  }\n\n  /**\n   * user key when using the \"never\" option of vault timeout\n   */\n  async getUserKeyAutoUnlock(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.userAutoKey}`,\n      options,\n    );\n  }\n\n  /**\n   * user key when using the \"never\" option of vault timeout\n   */\n  async setUserKeyAutoUnlock(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.userAutoKey, value, options);\n  }\n\n  /**\n   * User's encrypted symmetric key when using biometrics\n   */\n  async getUserKeyBiometric(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options.userId}${partialKeys.userBiometricKey}`,\n      options,\n    );\n  }\n\n  async hasUserKeyBiometric(options?: StorageOptions): Promise<boolean> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return false;\n    }\n    return await this.secureStorageService.has(\n      `${options.userId}${partialKeys.userBiometricKey}`,\n      options,\n    );\n  }\n\n  async setUserKeyBiometric(value: BiometricKey, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"biometric\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.userBiometricKey, value, options);\n  }\n\n  /**\n   * @deprecated Use UserKeyAuto instead\n   */\n  async setCryptoMasterKeyAuto(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(\n      this.reconcileOptions(options, { keySuffix: \"auto\" }),\n      await this.defaultSecureStorageOptions(),\n    );\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.autoKey, value, options);\n  }\n\n  /**\n   * @deprecated I don't see where this is even used\n   */\n  async getCryptoMasterKeyB64(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(\n      `${options?.userId}${partialKeys.masterKey}`,\n      options,\n    );\n  }\n\n  /**\n   * @deprecated I don't see where this is even used\n   */\n  async setCryptoMasterKeyB64(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    await this.saveSecureStorageKey(partialKeys.masterKey, value, options);\n  }\n\n  async getDuckDuckGoSharedKey(options?: StorageOptions): Promise<string> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return null;\n    }\n    return await this.secureStorageService.get<string>(DDG_SHARED_KEY, options);\n  }\n\n  async setDuckDuckGoSharedKey(value: string, options?: StorageOptions): Promise<void> {\n    options = this.reconcileOptions(options, await this.defaultSecureStorageOptions());\n    if (options?.userId == null) {\n      return;\n    }\n    value == null\n      ? await this.secureStorageService.remove(DDG_SHARED_KEY, options)\n      : await this.secureStorageService.save(DDG_SHARED_KEY, value, options);\n  }\n\n  async setEnableDuckDuckGoBrowserIntegration(\n    value: boolean,\n    options?: StorageOptions,\n  ): Promise<void> {\n    const globals = await this.getGlobals(\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n    globals.enableDuckDuckGoBrowserIntegration = value;\n    await this.saveGlobals(\n      globals,\n      this.reconcileOptions(options, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  /**\n   * @deprecated Use UserKey instead\n   */\n  async getEncryptedCryptoSymmetricKey(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.keys.cryptoSymmetricKey.encrypted;\n  }\n\n  async getIsAuthenticated(options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.tokenService.getAccessToken(options?.userId as UserId)) != null &&\n      (await this.getUserId(options)) != null\n    );\n  }\n\n  async getUserId(options?: StorageOptions): Promise<string> {\n    return (\n      await this.getAccount(this.reconcileOptions(options, await this.defaultOnDiskOptions()))\n    )?.profile?.userId;\n  }\n\n  protected async getGlobals(options: StorageOptions): Promise<TGlobalState> {\n    let globals: TGlobalState;\n    if (this.useMemory(options.storageLocation)) {\n      globals = await this.getGlobalsFromMemory();\n    }\n\n    if (this.useDisk && globals == null) {\n      globals = await this.getGlobalsFromDisk(options);\n    }\n\n    if (globals == null) {\n      globals = this.createGlobals();\n    }\n\n    return globals;\n  }\n\n  protected async saveGlobals(globals: TGlobalState, options: StorageOptions) {\n    return this.useMemory(options.storageLocation)\n      ? this.saveGlobalsToMemory(globals)\n      : await this.saveGlobalsToDisk(globals, options);\n  }\n\n  protected async getGlobalsFromMemory(): Promise<TGlobalState> {\n    return (await this.state()).globals;\n  }\n\n  protected async getGlobalsFromDisk(options: StorageOptions): Promise<TGlobalState> {\n    return await this.storageService.get<TGlobalState>(keys.global, options);\n  }\n\n  protected async saveGlobalsToMemory(globals: TGlobalState): Promise<void> {\n    await this.updateState(async (state) => {\n      state.globals = globals;\n      return state;\n    });\n  }\n\n  protected async saveGlobalsToDisk(globals: TGlobalState, options: StorageOptions): Promise<void> {\n    if (options.useSecureStorage) {\n      await this.secureStorageService.save(keys.global, globals, options);\n    } else {\n      await this.storageService.save(keys.global, globals, options);\n    }\n  }\n\n  protected async getAccount(options: StorageOptions): Promise<TAccount> {\n    try {\n      let account: TAccount;\n      if (this.useMemory(options.storageLocation)) {\n        account = await this.getAccountFromMemory(options);\n      }\n\n      if (this.useDisk(options.storageLocation) && account == null) {\n        account = await this.getAccountFromDisk(options);\n      }\n\n      return account;\n    } catch (e) {\n      this.logService.error(e);\n    }\n  }\n\n  protected async getAccountFromMemory(options: StorageOptions): Promise<TAccount> {\n    const userId =\n      options.userId ??\n      (await firstValueFrom(\n        this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n      ));\n\n    return await this.state().then(async (state) => {\n      if (state.accounts == null) {\n        return null;\n      }\n      return state.accounts[userId];\n    });\n  }\n\n  protected async getAccountFromDisk(options: StorageOptions): Promise<TAccount> {\n    const userId =\n      options.userId ??\n      (await firstValueFrom(\n        this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n      ));\n\n    if (userId == null) {\n      return null;\n    }\n\n    const account = options?.useSecureStorage\n      ? ((await this.secureStorageService.get<TAccount>(options.userId, options)) ??\n        (await this.storageService.get<TAccount>(\n          options.userId,\n          this.reconcileOptions(options, { htmlStorageLocation: HtmlStorageLocation.Local }),\n        )))\n      : await this.storageService.get<TAccount>(options.userId, options);\n    return account;\n  }\n\n  protected useMemory(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Memory || storageLocation === StorageLocation.Both;\n  }\n\n  protected useDisk(storageLocation: StorageLocation) {\n    return storageLocation === StorageLocation.Disk || storageLocation === StorageLocation.Both;\n  }\n\n  protected async saveAccount(\n    account: TAccount,\n    options: StorageOptions = {\n      storageLocation: StorageLocation.Both,\n      useSecureStorage: false,\n    },\n  ) {\n    return this.useMemory(options.storageLocation)\n      ? await this.saveAccountToMemory(account)\n      : await this.saveAccountToDisk(account, options);\n  }\n\n  protected async saveAccountToDisk(account: TAccount, options: StorageOptions): Promise<void> {\n    const storageLocation = options.useSecureStorage\n      ? this.secureStorageService\n      : this.storageService;\n\n    await storageLocation.save(`${options.userId}`, account, options);\n  }\n\n  protected async saveAccountToMemory(account: TAccount): Promise<void> {\n    if ((await this.getAccountFromMemory({ userId: account.profile.userId })) !== null) {\n      await this.updateState((state) => {\n        return new Promise((resolve) => {\n          state.accounts[account.profile.userId] = account;\n          resolve(state);\n        });\n      });\n    }\n  }\n\n  protected async scaffoldNewAccountStorage(account: TAccount): Promise<void> {\n    // We don't want to manipulate the referenced in memory account\n    const deepClone = JSON.parse(JSON.stringify(account));\n    await this.scaffoldNewAccountLocalStorage(deepClone);\n    await this.scaffoldNewAccountSessionStorage(deepClone);\n    await this.scaffoldNewAccountMemoryStorage(deepClone);\n  }\n\n  // TODO: There is a tech debt item for splitting up these methods - only Web uses multiple storage locations in its storageService.\n  // For now these methods exist with some redundancy to facilitate this special web requirement.\n  protected async scaffoldNewAccountLocalStorage(account: TAccount): Promise<void> {\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskLocalOptions(),\n      ),\n    );\n  }\n\n  protected async scaffoldNewAccountMemoryStorage(account: TAccount): Promise<void> {\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions(),\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions(\n        { userId: account.profile.userId },\n        await this.defaultOnDiskMemoryOptions(),\n      ),\n    );\n  }\n\n  protected async scaffoldNewAccountSessionStorage(account: TAccount): Promise<void> {\n    await this.storageService.save(\n      account.profile.userId,\n      account,\n      await this.defaultOnDiskMemoryOptions(),\n    );\n    await this.saveAccount(\n      account,\n      this.reconcileOptions({ userId: account.profile.userId }, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  protected reconcileOptions(\n    requestedOptions: StorageOptions,\n    defaultOptions: StorageOptions,\n  ): StorageOptions {\n    if (requestedOptions == null) {\n      return defaultOptions;\n    }\n    requestedOptions.userId = requestedOptions?.userId ?? defaultOptions.userId;\n    requestedOptions.storageLocation =\n      requestedOptions?.storageLocation ?? defaultOptions.storageLocation;\n    requestedOptions.useSecureStorage =\n      requestedOptions?.useSecureStorage ?? defaultOptions.useSecureStorage;\n    requestedOptions.htmlStorageLocation =\n      requestedOptions?.htmlStorageLocation ?? defaultOptions.htmlStorageLocation;\n    requestedOptions.keySuffix = requestedOptions?.keySuffix ?? defaultOptions.keySuffix;\n    return requestedOptions;\n  }\n\n  protected async defaultInMemoryOptions(): Promise<StorageOptions> {\n    const userId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n    );\n\n    return {\n      storageLocation: StorageLocation.Memory,\n      userId,\n    };\n  }\n\n  protected async defaultOnDiskOptions(): Promise<StorageOptions> {\n    const userId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n    );\n\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Session,\n      userId,\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskLocalOptions(): Promise<StorageOptions> {\n    const userId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n    );\n\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Local,\n      userId,\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultOnDiskMemoryOptions(): Promise<StorageOptions> {\n    const userId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n    );\n\n    return {\n      storageLocation: StorageLocation.Disk,\n      htmlStorageLocation: HtmlStorageLocation.Memory,\n      userId,\n      useSecureStorage: false,\n    };\n  }\n\n  protected async defaultSecureStorageOptions(): Promise<StorageOptions> {\n    const userId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n    );\n\n    return {\n      storageLocation: StorageLocation.Disk,\n      useSecureStorage: true,\n      userId,\n    };\n  }\n\n  protected async getActiveUserIdFromStorage(): Promise<string> {\n    return await firstValueFrom(this.accountService.activeAccount$.pipe(map((a) => a?.id)));\n  }\n\n  protected async removeAccountFromLocalStorage(userId: string = null): Promise<void> {\n    userId ??= await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n    );\n\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions()),\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskLocalOptions()),\n    );\n  }\n\n  protected async removeAccountFromSessionStorage(userId: string = null): Promise<void> {\n    userId ??= await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n    );\n\n    const storedAccount = await this.getAccount(\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions()),\n    );\n    await this.saveAccount(\n      this.resetAccount(storedAccount),\n      this.reconcileOptions({ userId: userId }, await this.defaultOnDiskOptions()),\n    );\n  }\n\n  protected async removeAccountFromSecureStorage(userId: string = null): Promise<void> {\n    userId ??= await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n    );\n\n    await this.setUserKeyAutoUnlock(null, { userId: userId });\n    await this.setUserKeyBiometric(null, { userId: userId });\n    await this.setCryptoMasterKeyAuto(null, { userId: userId });\n    await this.setCryptoMasterKeyB64(null, { userId: userId });\n  }\n\n  protected async removeAccountFromMemory(userId: string = null): Promise<void> {\n    userId ??= await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((account) => account?.id)),\n    );\n\n    await this.updateState(async (state) => {\n      delete state.accounts[userId];\n      return state;\n    });\n  }\n\n  // settings persist even on reset, and are not affected by this method\n  protected resetAccount(account: TAccount) {\n    // All settings have been moved to StateProviders\n    return this.createAccount();\n  }\n\n  protected createAccount(init: Partial<TAccount> = null): TAccount {\n    return this.stateFactory.createAccount(init);\n  }\n\n  protected createGlobals(init: Partial<TGlobalState> = null): TGlobalState {\n    return this.stateFactory.createGlobal(init);\n  }\n\n  protected async deAuthenticateAccount(userId: string): Promise<void> {\n    // We must have a manual call to clear tokens as we can't leverage state provider to clean\n    // up our data as we have secure storage in the mix.\n    await this.tokenService.clearTokens(userId as UserId);\n  }\n\n  protected async removeAccountFromDisk(userId: string) {\n    await this.removeAccountFromSessionStorage(userId);\n    await this.removeAccountFromLocalStorage(userId);\n    await this.removeAccountFromSecureStorage(userId);\n  }\n\n  protected async saveSecureStorageKey<T extends JsonValue>(\n    key: string,\n    value: T,\n    options?: StorageOptions,\n  ) {\n    return value == null\n      ? await this.secureStorageService.remove(`${options.userId}${key}`, options)\n      : await this.secureStorageService.save(`${options.userId}${key}`, value, options);\n  }\n\n  protected async state(): Promise<State<TGlobalState, TAccount>> {\n    let state = await this.memoryStorageService.get<State<TGlobalState, TAccount>>(keys.state);\n    if (this.memoryStorageService.valuesRequireDeserialization) {\n      state = State.fromJSON(state, this.accountDeserializer);\n    }\n    return state;\n  }\n\n  private async setState(\n    state: State<TGlobalState, TAccount>,\n  ): Promise<State<TGlobalState, TAccount>> {\n    await this.memoryStorageService.save(keys.state, state);\n    return state;\n  }\n\n  protected async updateState(\n    stateUpdater: (state: State<TGlobalState, TAccount>) => Promise<State<TGlobalState, TAccount>>,\n  ): Promise<State<TGlobalState, TAccount>> {\n    return await this.state().then(async (state) => {\n      const updatedState = await stateUpdater(state);\n      if (updatedState == null) {\n        throw new Error(\"Attempted to update state to null value\");\n      }\n\n      return await this.setState(updatedState);\n    });\n  }\n}\n","import { firstValueFrom, map, Subscription, timeout } from \"rxjs\";\n\nimport { PinServiceAbstraction } from \"../../../../auth/src/common/abstractions\";\nimport { VaultTimeoutSettingsService } from \"../../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { AuthService } from \"../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { AutofillSettingsServiceAbstraction } from \"../../autofill/services/autofill-settings.service\";\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { UserId } from \"../../types/guid\";\nimport { MessagingService } from \"../abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../abstractions/platform-utils.service\";\nimport { SystemService as SystemServiceAbstraction } from \"../abstractions/system.service\";\nimport { BiometricStateService } from \"../biometrics/biometric-state.service\";\nimport { Utils } from \"../misc/utils\";\nimport { ScheduledTaskNames } from \"../scheduling/scheduled-task-name.enum\";\nimport { TaskSchedulerService } from \"../scheduling/task-scheduler.service\";\n\nexport class SystemService implements SystemServiceAbstraction {\n  private reloadInterval: any = null;\n  private clearClipboardTimeoutSubscription: Subscription;\n  private clearClipboardTimeoutFunction: () => Promise<any> = null;\n\n  constructor(\n    private pinService: PinServiceAbstraction,\n    private messagingService: MessagingService,\n    private platformUtilsService: PlatformUtilsService,\n    private reloadCallback: () => Promise<void> = null,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsService,\n    private biometricStateService: BiometricStateService,\n    private accountService: AccountService,\n    private taskSchedulerService: TaskSchedulerService,\n  ) {\n    this.taskSchedulerService.registerTaskHandler(\n      ScheduledTaskNames.systemClearClipboardTimeout,\n      () => this.clearPendingClipboard(),\n    );\n  }\n\n  async startProcessReload(authService: AuthService): Promise<void> {\n    const accounts = await firstValueFrom(this.accountService.accounts$);\n    if (accounts != null) {\n      const keys = Object.keys(accounts);\n      if (keys.length > 0) {\n        for (const userId of keys) {\n          let status = await firstValueFrom(authService.authStatusFor$(userId as UserId));\n          status = await authService.getAuthStatus(userId);\n          if (status === AuthenticationStatus.Unlocked) {\n            return;\n          }\n        }\n      }\n    }\n\n    // A reloadInterval has already been set and is executing\n    if (this.reloadInterval != null) {\n      return;\n    }\n\n    // If there is an active user, check if they have a pinKeyEncryptedUserKeyEphemeral. If so, prevent process reload upon lock.\n    const userId = (await firstValueFrom(this.accountService.activeAccount$))?.id;\n    if (userId != null) {\n      const ephemeralPin = await this.pinService.getPinKeyEncryptedUserKeyEphemeral(userId);\n      if (ephemeralPin != null) {\n        return;\n      }\n    }\n\n    this.cancelProcessReload();\n    await this.executeProcessReload();\n  }\n\n  private async executeProcessReload() {\n    const biometricLockedFingerprintValidated = await firstValueFrom(\n      this.biometricStateService.fingerprintValidated$,\n    );\n    if (!biometricLockedFingerprintValidated) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n\n      const activeUserId = await firstValueFrom(\n        this.accountService.activeAccount$.pipe(\n          map((a) => a?.id),\n          timeout(500),\n        ),\n      );\n      // Replace current active user if they will be logged out on reload\n      if (activeUserId != null) {\n        const timeoutAction = await firstValueFrom(\n          this.vaultTimeoutSettingsService\n            .getVaultTimeoutActionByUserId$(activeUserId)\n            .pipe(timeout(500)), // safety feature to avoid this call hanging and stopping process reload from clearing memory\n        );\n        if (timeoutAction === VaultTimeoutAction.LogOut) {\n          const nextUser = await firstValueFrom(\n            this.accountService.nextUpAccount$.pipe(map((account) => account?.id ?? null)),\n          );\n          await this.accountService.switchAccount(nextUser);\n        }\n      }\n\n      this.messagingService.send(\"reloadProcess\");\n      if (this.reloadCallback != null) {\n        await this.reloadCallback();\n      }\n      return;\n    }\n    if (this.reloadInterval == null) {\n      this.reloadInterval = setInterval(async () => await this.executeProcessReload(), 1000);\n    }\n  }\n\n  cancelProcessReload(): void {\n    if (this.reloadInterval != null) {\n      clearInterval(this.reloadInterval);\n      this.reloadInterval = null;\n    }\n  }\n\n  async clearClipboard(clipboardValue: string, timeoutMs: number = null): Promise<void> {\n    this.clearClipboardTimeoutSubscription?.unsubscribe();\n\n    if (Utils.isNullOrWhitespace(clipboardValue)) {\n      return;\n    }\n\n    let taskTimeoutInMs = timeoutMs;\n    if (!taskTimeoutInMs) {\n      const clearClipboardDelayInSeconds = await firstValueFrom(\n        this.autofillSettingsService.clearClipboardDelay$,\n      );\n      taskTimeoutInMs = clearClipboardDelayInSeconds ? clearClipboardDelayInSeconds * 1000 : null;\n    }\n\n    if (!taskTimeoutInMs) {\n      return;\n    }\n\n    this.clearClipboardTimeoutFunction = async () => {\n      const clipboardValueNow = await this.platformUtilsService.readFromClipboard();\n      if (clipboardValue === clipboardValueNow) {\n        this.platformUtilsService.copyToClipboard(\"\", { clearing: true });\n      }\n    };\n\n    this.clearClipboardTimeoutSubscription = this.taskSchedulerService.setTimeout(\n      ScheduledTaskNames.systemClearClipboardTimeout,\n      taskTimeoutInMs,\n    );\n  }\n\n  async clearPendingClipboard() {\n    if (this.clearClipboardTimeoutFunction != null) {\n      await this.clearClipboardTimeoutFunction();\n      this.clearClipboardTimeoutFunction = null;\n    }\n  }\n}\n","import { UserId } from \"../../types/guid\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { KeySuffixOptions } from \"../enums\";\n\n// TODO: this is a half measure improvement which allows us to reduce some side effects today (cryptoService.getUserKey setting user key in memory if auto key exists)\n// but ideally, in the future, we would be able to put this logic into the cryptoService\n// after the vault timeout settings service is transitioned to state provider so that\n// the getUserKey logic can simply go to the correct location based on the vault timeout settings\n// similar to the TokenService (it would either go to secure storage for the auto user key or memory for the user key)\n\nexport class UserAutoUnlockKeyService {\n  constructor(private cryptoService: CryptoService) {}\n\n  /**\n   * The presence of the user key in memory dictates whether the user's vault is locked or unlocked.\n   * However, for users that have the auto unlock user key set, we need to set the user key in memory\n   * on application bootstrap and on active account changes so that the user's vault loads unlocked.\n   * @param userId - The user id to check for an auto user key.\n   * @returns True if the auto user key is set successfully, false otherwise.\n   */\n  async setUserKeyInMemoryIfAutoUserKeySet(userId: UserId): Promise<boolean> {\n    if (userId == null) {\n      return false;\n    }\n\n    const autoUserKey = await this.cryptoService.getUserKeyFromStorage(\n      KeySuffixOptions.Auto,\n      userId,\n    );\n\n    if (autoUserKey == null) {\n      return false;\n    }\n\n    await this.cryptoService.setUserKey(autoUserKey, userId);\n    return true;\n  }\n}\n","export class DecryptParameters<T> {\n  encKey: T;\n  data: T;\n  iv: T;\n  macKey: T;\n  mac: T;\n  macData: T;\n}\n","import * as argon2 from \"argon2-browser\";\nimport * as forge from \"node-forge\";\n\nimport { Utils } from \"../../platform/misc/utils\";\nimport { CsprngArray } from \"../../types/csprng\";\nimport { CryptoFunctionService } from \"../abstractions/crypto-function.service\";\nimport { DecryptParameters } from \"../models/domain/decrypt-parameters\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\nexport class WebCryptoFunctionService implements CryptoFunctionService {\n  private crypto: Crypto;\n  private subtle: SubtleCrypto;\n  private wasmSupported: boolean;\n\n  constructor(globalContext: Window | typeof global) {\n    this.crypto = typeof globalContext.crypto !== \"undefined\" ? globalContext.crypto : null;\n    this.subtle =\n      !!this.crypto && typeof this.crypto.subtle !== \"undefined\" ? this.crypto.subtle : null;\n    this.wasmSupported = this.checkIfWasmSupported();\n  }\n\n  async pbkdf2(\n    password: string | Uint8Array,\n    salt: string | Uint8Array,\n    algorithm: \"sha256\" | \"sha512\",\n    iterations: number,\n  ): Promise<Uint8Array> {\n    const wcLen = algorithm === \"sha256\" ? 256 : 512;\n    const passwordBuf = this.toBuf(password);\n    const saltBuf = this.toBuf(salt);\n\n    const pbkdf2Params: Pbkdf2Params = {\n      name: \"PBKDF2\",\n      salt: saltBuf,\n      iterations: iterations,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\n      \"raw\",\n      passwordBuf,\n      { name: \"PBKDF2\" } as any,\n      false,\n      [\"deriveBits\"],\n    );\n    const buffer = await this.subtle.deriveBits(pbkdf2Params as any, impKey, wcLen);\n    return new Uint8Array(buffer);\n  }\n\n  async argon2(\n    password: string | Uint8Array,\n    salt: string | Uint8Array,\n    iterations: number,\n    memory: number,\n    parallelism: number,\n  ): Promise<Uint8Array> {\n    if (!this.wasmSupported) {\n      throw \"Webassembly support is required for the Argon2 KDF feature.\";\n    }\n\n    const passwordArr = new Uint8Array(this.toBuf(password));\n    const saltArr = new Uint8Array(this.toBuf(salt));\n\n    const result = await argon2.hash({\n      pass: passwordArr,\n      salt: saltArr,\n      time: iterations,\n      mem: memory,\n      parallelism: parallelism,\n      hashLen: 32,\n      type: argon2.ArgonType.Argon2id,\n    });\n    argon2.unloadRuntime();\n    return result.hash;\n  }\n\n  async hkdf(\n    ikm: Uint8Array,\n    salt: string | Uint8Array,\n    info: string | Uint8Array,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\",\n  ): Promise<Uint8Array> {\n    const saltBuf = this.toBuf(salt);\n    const infoBuf = this.toBuf(info);\n\n    const hkdfParams: HkdfParams = {\n      name: \"HKDF\",\n      salt: saltBuf,\n      info: infoBuf,\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", ikm, { name: \"HKDF\" } as any, false, [\n      \"deriveBits\",\n    ]);\n    const buffer = await this.subtle.deriveBits(hkdfParams as any, impKey, outputByteSize * 8);\n    return new Uint8Array(buffer);\n  }\n\n  // ref: https://tools.ietf.org/html/rfc5869\n  async hkdfExpand(\n    prk: Uint8Array,\n    info: string | Uint8Array,\n    outputByteSize: number,\n    algorithm: \"sha256\" | \"sha512\",\n  ): Promise<Uint8Array> {\n    const hashLen = algorithm === \"sha256\" ? 32 : 64;\n    if (outputByteSize > 255 * hashLen) {\n      throw new Error(\"outputByteSize is too large.\");\n    }\n    const prkArr = new Uint8Array(prk);\n    if (prkArr.length < hashLen) {\n      throw new Error(\"prk is too small.\");\n    }\n    const infoBuf = this.toBuf(info);\n    const infoArr = new Uint8Array(infoBuf);\n    let runningOkmLength = 0;\n    let previousT = new Uint8Array(0);\n    const n = Math.ceil(outputByteSize / hashLen);\n    const okm = new Uint8Array(n * hashLen);\n    for (let i = 0; i < n; i++) {\n      const t = new Uint8Array(previousT.length + infoArr.length + 1);\n      t.set(previousT);\n      t.set(infoArr, previousT.length);\n      t.set([i + 1], t.length - 1);\n      previousT = new Uint8Array(await this.hmac(t, prk, algorithm));\n      okm.set(previousT, runningOkmLength);\n      runningOkmLength += previousT.length;\n      if (runningOkmLength >= outputByteSize) {\n        break;\n      }\n    }\n    return okm.slice(0, outputByteSize);\n  }\n\n  async hash(\n    value: string | Uint8Array,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\",\n  ): Promise<Uint8Array> {\n    if (algorithm === \"md5\") {\n      const md = forge.md.md5.create();\n      const valueBytes = this.toByteString(value);\n      md.update(valueBytes, \"raw\");\n      return Utils.fromByteStringToArray(md.digest().data);\n    }\n\n    const valueBuf = this.toBuf(value);\n    const buffer = await this.subtle.digest(\n      { name: this.toWebCryptoAlgorithm(algorithm) },\n      valueBuf,\n    );\n    return new Uint8Array(buffer);\n  }\n\n  async hmac(\n    value: Uint8Array,\n    key: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\" | \"sha512\",\n  ): Promise<Uint8Array> {\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n\n    const impKey = await this.subtle.importKey(\"raw\", key, signingAlgorithm, false, [\"sign\"]);\n    const buffer = await this.subtle.sign(signingAlgorithm, impKey, value);\n    return new Uint8Array(buffer);\n  }\n\n  // Safely compare two values in a way that protects against timing attacks (Double HMAC Verification).\n  // ref: https://www.nccgroup.trust/us/about-us/newsroom-and-events/blog/2011/february/double-hmac-verification/\n  // ref: https://paragonie.com/blog/2015/11/preventing-timing-attacks-on-string-comparison-with-double-hmac-strategy\n  async compare(a: Uint8Array, b: Uint8Array): Promise<boolean> {\n    const macKey = await this.randomBytes(32);\n    const signingAlgorithm = {\n      name: \"HMAC\",\n      hash: { name: \"SHA-256\" },\n    };\n    const impKey = await this.subtle.importKey(\"raw\", macKey, signingAlgorithm, false, [\"sign\"]);\n    const mac1 = await this.subtle.sign(signingAlgorithm, impKey, a);\n    const mac2 = await this.subtle.sign(signingAlgorithm, impKey, b);\n\n    if (mac1.byteLength !== mac2.byteLength) {\n      return false;\n    }\n\n    const arr1 = new Uint8Array(mac1);\n    const arr2 = new Uint8Array(mac2);\n    for (let i = 0; i < arr2.length; i++) {\n      if (arr1[i] !== arr2[i]) {\n        return false;\n      }\n    }\n\n    return true;\n  }\n\n  hmacFast(value: string, key: string, algorithm: \"sha1\" | \"sha256\" | \"sha512\"): Promise<string> {\n    const hmac = forge.hmac.create();\n    hmac.start(algorithm, key);\n    hmac.update(value);\n    const bytes = hmac.digest().getBytes();\n    return Promise.resolve(bytes);\n  }\n\n  async compareFast(a: string, b: string): Promise<boolean> {\n    const rand = await this.randomBytes(32);\n    const bytes = new Uint32Array(rand);\n    const buffer = forge.util.createBuffer();\n    for (let i = 0; i < bytes.length; i++) {\n      buffer.putInt32(bytes[i]);\n    }\n    const macKey = buffer.getBytes();\n\n    const hmac = forge.hmac.create();\n    hmac.start(\"sha256\", macKey);\n    hmac.update(a);\n    const mac1 = hmac.digest().getBytes();\n\n    hmac.start(null, null);\n    hmac.update(b);\n    const mac2 = hmac.digest().getBytes();\n\n    const equals = mac1 === mac2;\n    return equals;\n  }\n\n  async aesEncrypt(data: Uint8Array, iv: Uint8Array, key: Uint8Array): Promise<Uint8Array> {\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"encrypt\",\n    ]);\n    const buffer = await this.subtle.encrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  aesDecryptFastParameters(\n    data: string,\n    iv: string,\n    mac: string,\n    key: SymmetricCryptoKey,\n  ): DecryptParameters<string> {\n    const p = new DecryptParameters<string>();\n    if (key.meta != null) {\n      p.encKey = key.meta.encKeyByteString;\n      p.macKey = key.meta.macKeyByteString;\n    }\n\n    if (p.encKey == null) {\n      p.encKey = forge.util.decode64(key.encKeyB64);\n    }\n    p.data = forge.util.decode64(data);\n    p.iv = forge.util.decode64(iv);\n    p.macData = p.iv + p.data;\n    if (p.macKey == null && key.macKeyB64 != null) {\n      p.macKey = forge.util.decode64(key.macKeyB64);\n    }\n    if (mac != null) {\n      p.mac = forge.util.decode64(mac);\n    }\n\n    // cache byte string keys for later\n    if (key.meta == null) {\n      key.meta = {};\n    }\n    if (key.meta.encKeyByteString == null) {\n      key.meta.encKeyByteString = p.encKey;\n    }\n    if (p.macKey != null && key.meta.macKeyByteString == null) {\n      key.meta.macKeyByteString = p.macKey;\n    }\n\n    return p;\n  }\n\n  aesDecryptFast(parameters: DecryptParameters<string>, mode: \"cbc\" | \"ecb\"): Promise<string> {\n    const decipher = (forge as any).cipher.createDecipher(\n      this.toWebCryptoAesMode(mode),\n      parameters.encKey,\n    );\n    const options = {} as any;\n    if (mode === \"cbc\") {\n      options.iv = parameters.iv;\n    }\n    const dataBuffer = (forge as any).util.createBuffer(parameters.data);\n    decipher.start(options);\n    decipher.update(dataBuffer);\n    decipher.finish();\n    const val = decipher.output.toString();\n    return Promise.resolve(val);\n  }\n\n  async aesDecrypt(\n    data: Uint8Array,\n    iv: Uint8Array,\n    key: Uint8Array,\n    mode: \"cbc\" | \"ecb\",\n  ): Promise<Uint8Array> {\n    if (mode === \"ecb\") {\n      // Web crypto does not support AES-ECB mode, so we need to do this in forge.\n      const params = new DecryptParameters<string>();\n      params.data = this.toByteString(data);\n      params.encKey = this.toByteString(key);\n      const result = await this.aesDecryptFast(params, \"ecb\");\n      return Utils.fromByteStringToArray(result);\n    }\n    const impKey = await this.subtle.importKey(\"raw\", key, { name: \"AES-CBC\" } as any, false, [\n      \"decrypt\",\n    ]);\n    const buffer = await this.subtle.decrypt({ name: \"AES-CBC\", iv: iv }, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaEncrypt(\n    data: Uint8Array,\n    publicKey: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\",\n  ): Promise<Uint8Array> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"spki\", publicKey, rsaParams, false, [\"encrypt\"]);\n    const buffer = await this.subtle.encrypt(rsaParams, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaDecrypt(\n    data: Uint8Array,\n    privateKey: Uint8Array,\n    algorithm: \"sha1\" | \"sha256\",\n  ): Promise<Uint8Array> {\n    // Note: Edge browser requires that we specify name and hash for both key import and decrypt.\n    // We cannot use the proper types here.\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      hash: { name: this.toWebCryptoAlgorithm(algorithm) },\n    };\n    const impKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, false, [\"decrypt\"]);\n    const buffer = await this.subtle.decrypt(rsaParams, impKey, data);\n    return new Uint8Array(buffer);\n  }\n\n  async rsaExtractPublicKey(privateKey: Uint8Array): Promise<Uint8Array> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const impPrivateKey = await this.subtle.importKey(\"pkcs8\", privateKey, rsaParams, true, [\n      \"decrypt\",\n    ]);\n    const jwkPrivateKey = await this.subtle.exportKey(\"jwk\", impPrivateKey);\n    const jwkPublicKeyParams = {\n      kty: \"RSA\",\n      e: jwkPrivateKey.e,\n      n: jwkPrivateKey.n,\n      alg: \"RSA-OAEP\",\n      ext: true,\n    };\n    const impPublicKey = await this.subtle.importKey(\"jwk\", jwkPublicKeyParams, rsaParams, true, [\n      \"encrypt\",\n    ]);\n    const buffer = await this.subtle.exportKey(\"spki\", impPublicKey);\n    return new Uint8Array(buffer);\n  }\n\n  async aesGenerateKey(bitLength = 128 | 192 | 256 | 512): Promise<CsprngArray> {\n    if (bitLength === 512) {\n      // 512 bit keys are not supported in WebCrypto, so we concat two 256 bit keys\n      const key1 = await this.aesGenerateKey(256);\n      const key2 = await this.aesGenerateKey(256);\n      return new Uint8Array([...key1, ...key2]) as CsprngArray;\n    }\n    const aesParams = {\n      name: \"AES-CBC\",\n      length: bitLength,\n    };\n\n    const key = await this.subtle.generateKey(aesParams, true, [\"encrypt\", \"decrypt\"]);\n    const rawKey = await this.subtle.exportKey(\"raw\", key);\n    return new Uint8Array(rawKey) as CsprngArray;\n  }\n\n  async rsaGenerateKeyPair(length: 1024 | 2048 | 4096): Promise<[Uint8Array, Uint8Array]> {\n    const rsaParams = {\n      name: \"RSA-OAEP\",\n      modulusLength: length,\n      publicExponent: new Uint8Array([0x01, 0x00, 0x01]), // 65537\n      // Have to specify some algorithm\n      hash: { name: this.toWebCryptoAlgorithm(\"sha1\") },\n    };\n    const keyPair = await this.subtle.generateKey(rsaParams, true, [\"encrypt\", \"decrypt\"]);\n    const publicKey = await this.subtle.exportKey(\"spki\", keyPair.publicKey);\n    const privateKey = await this.subtle.exportKey(\"pkcs8\", keyPair.privateKey);\n    return [new Uint8Array(publicKey), new Uint8Array(privateKey)];\n  }\n\n  randomBytes(length: number): Promise<CsprngArray> {\n    const arr = new Uint8Array(length);\n    this.crypto.getRandomValues(arr);\n    return Promise.resolve(arr as CsprngArray);\n  }\n\n  private toBuf(value: string | Uint8Array): Uint8Array {\n    let buf: Uint8Array;\n    if (typeof value === \"string\") {\n      buf = Utils.fromUtf8ToArray(value);\n    } else {\n      buf = value;\n    }\n    return buf;\n  }\n\n  private toByteString(value: string | Uint8Array): string {\n    let bytes: string;\n    if (typeof value === \"string\") {\n      bytes = forge.util.encodeUtf8(value);\n    } else {\n      bytes = Utils.fromBufferToByteString(value);\n    }\n    return bytes;\n  }\n\n  private toWebCryptoAlgorithm(algorithm: \"sha1\" | \"sha256\" | \"sha512\" | \"md5\"): string {\n    if (algorithm === \"md5\") {\n      throw new Error(\"MD5 is not supported in WebCrypto.\");\n    }\n    return algorithm === \"sha1\" ? \"SHA-1\" : algorithm === \"sha256\" ? \"SHA-256\" : \"SHA-512\";\n  }\n\n  private toWebCryptoAesMode(mode: \"cbc\" | \"ecb\"): string {\n    return mode === \"cbc\" ? \"AES-CBC\" : \"AES-ECB\";\n  }\n\n  // ref: https://stackoverflow.com/a/47880734/1090359\n  private checkIfWasmSupported(): boolean {\n    try {\n      if (typeof WebAssembly === \"object\" && typeof WebAssembly.instantiate === \"function\") {\n        const module = new WebAssembly.Module(\n          Uint8Array.of(0x0, 0x61, 0x73, 0x6d, 0x01, 0x00, 0x00, 0x00),\n        );\n        if (module instanceof WebAssembly.Module) {\n          return new WebAssembly.Instance(module) instanceof WebAssembly.Instance;\n        }\n      }\n    } catch {\n      return false;\n    }\n    return false;\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../types/guid\";\n\nimport { StateUpdateOptions } from \"./state-update-options\";\n\nexport type CombinedState<T> = readonly [userId: UserId, state: T];\n\n/** A helper object for interacting with state that is scoped to a specific user. */\nexport interface UserState<T> {\n  /** Emits a stream of data. Emits null if the user does not have specified state. */\n  readonly state$: Observable<T | null>;\n\n  /** Emits a stream of tuples, with the first element being a user id and the second element being the data for that user. */\n  readonly combinedState$: Observable<CombinedState<T>>;\n}\n\nexport const activeMarker: unique symbol = Symbol(\"active\");\nexport interface ActiveUserState<T> extends UserState<T> {\n  readonly [activeMarker]: true;\n\n  /**\n   * Emits a stream of data. Emits null if the user does not have specified state.\n   * Note: Will not emit if there is no active user.\n   */\n  readonly state$: Observable<T | null>;\n\n  /**\n   * Updates backing stores for the active user.\n   * @param configureState function that takes the current state and returns the new state\n   * @param options Defaults to @see {module:state-update-options#DEFAULT_OPTIONS}\n   * @param options.shouldUpdate A callback for determining if you want to update state. Defaults to () => true\n   * @param options.combineLatestWith An observable that you want to combine with the current state for callbacks. Defaults to null\n   * @param options.msTimeout A timeout for how long you are willing to wait for a `combineLatestWith` option to complete. Defaults to 1000ms. Only applies if `combineLatestWith` is set.\n\n   * @returns A promise that must be awaited before your next action to ensure the update has been written to state.\n   * Resolves to the new state. If `shouldUpdate` returns false, the promise will resolve to the current state.\n   */\n  readonly update: <TCombine>(\n    configureState: (state: T, dependencies: TCombine) => T,\n    options?: StateUpdateOptions<T, TCombine>,\n  ) => Promise<[UserId, T]>;\n}\nexport interface SingleUserState<T> extends UserState<T> {\n  readonly userId: UserId;\n\n  /**\n   * Updates backing stores for the active user.\n   * @param configureState function that takes the current state and returns the new state\n   * @param options Defaults to @see {module:state-update-options#DEFAULT_OPTIONS}\n   * @param options.shouldUpdate A callback for determining if you want to update state. Defaults to () => true\n   * @param options.combineLatestWith An observable that you want to combine with the current state for callbacks. Defaults to null\n   * @param options.msTimeout A timeout for how long you are willing to wait for a `combineLatestWith` option to complete. Defaults to 1000ms. Only applies if `combineLatestWith` is set.\n\n   * @returns A promise that must be awaited before your next action to ensure the update has been written to state.\n   * Resolves to the new state. If `shouldUpdate` returns false, the promise will resolve to the current state.\n   */\n  readonly update: <TCombine>(\n    configureState: (state: T, dependencies: TCombine) => T,\n    options?: StateUpdateOptions<T, TCombine>,\n  ) => Promise<T>;\n}\n","import { Observable, map, switchMap, firstValueFrom, timeout, throwError, NEVER } from \"rxjs\";\n\nimport { UserId } from \"../../../types/guid\";\nimport { StateUpdateOptions } from \"../state-update-options\";\nimport { UserKeyDefinition } from \"../user-key-definition\";\nimport { ActiveUserState, CombinedState, activeMarker } from \"../user-state\";\nimport { SingleUserStateProvider } from \"../user-state.provider\";\n\nexport class DefaultActiveUserState<T> implements ActiveUserState<T> {\n  [activeMarker]: true;\n  combinedState$: Observable<CombinedState<T>>;\n  state$: Observable<T>;\n\n  constructor(\n    protected keyDefinition: UserKeyDefinition<T>,\n    private activeUserId$: Observable<UserId | null>,\n    private singleUserStateProvider: SingleUserStateProvider,\n  ) {\n    this.combinedState$ = this.activeUserId$.pipe(\n      switchMap((userId) =>\n        userId != null\n          ? this.singleUserStateProvider.get(userId, this.keyDefinition).combinedState$\n          : NEVER,\n      ),\n    );\n\n    // State should just be combined state without the user id\n    this.state$ = this.combinedState$.pipe(map(([_userId, state]) => state));\n  }\n\n  async update<TCombine>(\n    configureState: (state: T, dependency: TCombine) => T,\n    options: StateUpdateOptions<T, TCombine> = {},\n  ): Promise<[UserId, T]> {\n    const userId = await firstValueFrom(\n      this.activeUserId$.pipe(\n        timeout({\n          first: 1000,\n          with: () =>\n            throwError(\n              () =>\n                new Error(\n                  `Timeout while retrieving active user for key ${this.keyDefinition.fullName}.`,\n                ),\n            ),\n        }),\n      ),\n    );\n    if (userId == null) {\n      throw new Error(\n        `Error storing ${this.keyDefinition.fullName} for the active user: No active user at this time.`,\n      );\n    }\n\n    return [\n      userId,\n      await this.singleUserStateProvider\n        .get(userId, this.keyDefinition)\n        .update(configureState, options),\n    ];\n  }\n}\n","import { Observable, distinctUntilChanged, map } from \"rxjs\";\n\nimport { AccountService } from \"../../../auth/abstractions/account.service\";\nimport { UserId } from \"../../../types/guid\";\nimport { UserKeyDefinition } from \"../user-key-definition\";\nimport { ActiveUserState } from \"../user-state\";\nimport { ActiveUserStateProvider, SingleUserStateProvider } from \"../user-state.provider\";\n\nimport { DefaultActiveUserState } from \"./default-active-user-state\";\n\nexport class DefaultActiveUserStateProvider implements ActiveUserStateProvider {\n  activeUserId$: Observable<UserId | undefined>;\n\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly singleUserStateProvider: SingleUserStateProvider,\n  ) {\n    this.activeUserId$ = this.accountService.activeAccount$.pipe(\n      map((account) => account?.id),\n      // To avoid going to storage when we don't need to, only get updates when there is a true change.\n      distinctUntilChanged((a, b) => (a == null || b == null ? a == b : a === b)), // Treat null and undefined as equal\n    );\n  }\n\n  get<T>(keyDefinition: UserKeyDefinition<T>): ActiveUserState<T> {\n    // All other providers cache the creation of their corresponding `State` objects, this instance\n    // doesn't need to do that since it calls `SingleUserStateProvider` it will go through their caching\n    // layer, because of that, the creation of this instance is quite simple and not worth caching.\n    return new DefaultActiveUserState(\n      keyDefinition,\n      this.activeUserId$,\n      this.singleUserStateProvider,\n    );\n  }\n}\n","import { Observable } from \"rxjs\";\n\nexport const DEFAULT_OPTIONS = {\n  shouldUpdate: () => true,\n  combineLatestWith: null as Observable<unknown>,\n  msTimeout: 1000,\n};\n\ntype DefinitelyTypedDefault<T, TCombine> = Omit<\n  typeof DEFAULT_OPTIONS,\n  \"shouldUpdate\" | \"combineLatestWith\"\n> & {\n  shouldUpdate: (state: T, dependency: TCombine) => boolean;\n  combineLatestWith?: Observable<TCombine>;\n};\n\nexport type StateUpdateOptions<T, TCombine> = Partial<DefinitelyTypedDefault<T, TCombine>>;\n\nexport function populateOptionsWithDefault<T, TCombine>(\n  options: StateUpdateOptions<T, TCombine>,\n): StateUpdateOptions<T, TCombine> {\n  return {\n    ...(DEFAULT_OPTIONS as StateUpdateOptions<T, TCombine>),\n    ...options,\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { AbstractStorageService } from \"../../abstractions/storage.service\";\n\nexport async function getStoredValue<T>(\n  key: string,\n  storage: AbstractStorageService,\n  deserializer: (jsonValue: Jsonify<T>) => T,\n) {\n  if (storage.valuesRequireDeserialization) {\n    const jsonValue = await storage.get<Jsonify<T>>(key);\n    const value = deserializer(jsonValue);\n    return value;\n  } else {\n    const value = await storage.get<T>(key);\n    return value ?? null;\n  }\n}\n","import {\n  Observable,\n  ReplaySubject,\n  defer,\n  filter,\n  firstValueFrom,\n  merge,\n  share,\n  switchMap,\n  tap,\n  timeout,\n  timer,\n} from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { StorageKey } from \"../../../types/state\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"../../abstractions/storage.service\";\nimport { DebugOptions } from \"../key-definition\";\nimport { StateUpdateOptions, populateOptionsWithDefault } from \"../state-update-options\";\n\nimport { getStoredValue } from \"./util\";\n\n// The parts of a KeyDefinition this class cares about to make it work\ntype KeyDefinitionRequirements<T> = {\n  deserializer: (jsonState: Jsonify<T>) => T;\n  cleanupDelayMs: number;\n  debug: Required<DebugOptions>;\n};\n\nexport abstract class StateBase<T, KeyDef extends KeyDefinitionRequirements<T>> {\n  private updatePromise: Promise<T>;\n\n  readonly state$: Observable<T>;\n\n  constructor(\n    protected readonly key: StorageKey,\n    protected readonly storageService: AbstractStorageService & ObservableStorageService,\n    protected readonly keyDefinition: KeyDef,\n    protected readonly logService: LogService,\n  ) {\n    const storageUpdate$ = storageService.updates$.pipe(\n      filter((storageUpdate) => storageUpdate.key === key),\n      switchMap(async (storageUpdate) => {\n        if (storageUpdate.updateType === \"remove\") {\n          return null;\n        }\n\n        return await getStoredValue(key, storageService, keyDefinition.deserializer);\n      }),\n    );\n\n    let state$ = merge(\n      defer(() => getStoredValue(key, storageService, keyDefinition.deserializer)),\n      storageUpdate$,\n    );\n\n    if (keyDefinition.debug.enableRetrievalLogging) {\n      state$ = state$.pipe(\n        tap({\n          next: (v) => {\n            this.logService.info(\n              `Retrieving '${key}' from storage, value is ${v == null ? \"null\" : \"non-null\"}`,\n            );\n          },\n        }),\n      );\n    }\n\n    // If 0 cleanup is chosen, treat this as absolutely no cache\n    if (keyDefinition.cleanupDelayMs !== 0) {\n      state$ = state$.pipe(\n        share({\n          connector: () => new ReplaySubject(1),\n          resetOnRefCountZero: () => timer(keyDefinition.cleanupDelayMs),\n        }),\n      );\n    }\n\n    this.state$ = state$;\n  }\n\n  async update<TCombine>(\n    configureState: (state: T, dependency: TCombine) => T,\n    options: StateUpdateOptions<T, TCombine> = {},\n  ): Promise<T> {\n    options = populateOptionsWithDefault(options);\n    if (this.updatePromise != null) {\n      await this.updatePromise;\n    }\n\n    try {\n      this.updatePromise = this.internalUpdate(configureState, options);\n      const newState = await this.updatePromise;\n      return newState;\n    } finally {\n      this.updatePromise = null;\n    }\n  }\n\n  private async internalUpdate<TCombine>(\n    configureState: (state: T, dependency: TCombine) => T,\n    options: StateUpdateOptions<T, TCombine>,\n  ): Promise<T> {\n    const currentState = await this.getStateForUpdate();\n    const combinedDependencies =\n      options.combineLatestWith != null\n        ? await firstValueFrom(options.combineLatestWith.pipe(timeout(options.msTimeout)))\n        : null;\n\n    if (!options.shouldUpdate(currentState, combinedDependencies)) {\n      return currentState;\n    }\n\n    const newState = configureState(currentState, combinedDependencies);\n    await this.doStorageSave(newState, currentState);\n    return newState;\n  }\n\n  protected async doStorageSave(newState: T, oldState: T) {\n    if (this.keyDefinition.debug.enableUpdateLogging) {\n      this.logService.info(\n        `Updating '${this.key}' from ${oldState == null ? \"null\" : \"non-null\"} to ${newState == null ? \"null\" : \"non-null\"}`,\n      );\n    }\n    await this.storageService.save(this.key, newState);\n  }\n\n  /** For use in update methods, does not wait for update to complete before yielding state.\n   * The expectation is that that await is already done\n   */\n  private async getStateForUpdate() {\n    return await getStoredValue(this.key, this.storageService, this.keyDefinition.deserializer);\n  }\n}\n","import { LogService } from \"../../abstractions/log.service\";\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"../../abstractions/storage.service\";\nimport { GlobalState } from \"../global-state\";\nimport { KeyDefinition, globalKeyBuilder } from \"../key-definition\";\n\nimport { StateBase } from \"./state-base\";\n\nexport class DefaultGlobalState<T>\n  extends StateBase<T, KeyDefinition<T>>\n  implements GlobalState<T>\n{\n  constructor(\n    keyDefinition: KeyDefinition<T>,\n    chosenLocation: AbstractStorageService & ObservableStorageService,\n    logService: LogService,\n  ) {\n    super(globalKeyBuilder(keyDefinition), chosenLocation, keyDefinition, logService);\n  }\n}\n","import { LogService } from \"../../abstractions/log.service\";\nimport { StorageServiceProvider } from \"../../services/storage-service.provider\";\nimport { GlobalState } from \"../global-state\";\nimport { GlobalStateProvider } from \"../global-state.provider\";\nimport { KeyDefinition } from \"../key-definition\";\n\nimport { DefaultGlobalState } from \"./default-global-state\";\n\nexport class DefaultGlobalStateProvider implements GlobalStateProvider {\n  private globalStateCache: Record<string, GlobalState<unknown>> = {};\n\n  constructor(\n    private storageServiceProvider: StorageServiceProvider,\n    private readonly logService: LogService,\n  ) {}\n\n  get<T>(keyDefinition: KeyDefinition<T>): GlobalState<T> {\n    const [location, storageService] = this.storageServiceProvider.get(\n      keyDefinition.stateDefinition.defaultStorageLocation,\n      keyDefinition.stateDefinition.storageLocationOverrides,\n    );\n    const cacheKey = this.buildCacheKey(location, keyDefinition);\n    const existingGlobalState = this.globalStateCache[cacheKey];\n    if (existingGlobalState != null) {\n      // The cast into the actual generic is safe because of rules around key definitions\n      // being unique.\n      return existingGlobalState as DefaultGlobalState<T>;\n    }\n\n    const newGlobalState = new DefaultGlobalState<T>(\n      keyDefinition,\n      storageService,\n      this.logService,\n    );\n\n    this.globalStateCache[cacheKey] = newGlobalState;\n    return newGlobalState;\n  }\n\n  private buildCacheKey(location: string, keyDefinition: KeyDefinition<unknown>) {\n    return `${location}_${keyDefinition.fullName}`;\n  }\n}\n","import { Observable, combineLatest, of } from \"rxjs\";\n\nimport { UserId } from \"../../../types/guid\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"../../abstractions/storage.service\";\nimport { StateEventRegistrarService } from \"../state-event-registrar.service\";\nimport { UserKeyDefinition } from \"../user-key-definition\";\nimport { CombinedState, SingleUserState } from \"../user-state\";\n\nimport { StateBase } from \"./state-base\";\n\nexport class DefaultSingleUserState<T>\n  extends StateBase<T, UserKeyDefinition<T>>\n  implements SingleUserState<T>\n{\n  readonly combinedState$: Observable<CombinedState<T>>;\n\n  constructor(\n    readonly userId: UserId,\n    keyDefinition: UserKeyDefinition<T>,\n    chosenLocation: AbstractStorageService & ObservableStorageService,\n    private stateEventRegistrarService: StateEventRegistrarService,\n    logService: LogService,\n  ) {\n    super(keyDefinition.buildKey(userId), chosenLocation, keyDefinition, logService);\n    this.combinedState$ = combineLatest([of(userId), this.state$]);\n  }\n\n  protected override async doStorageSave(newState: T, oldState: T): Promise<void> {\n    await super.doStorageSave(newState, oldState);\n    if (newState != null && oldState == null) {\n      await this.stateEventRegistrarService.registerEvents(this.keyDefinition);\n    }\n  }\n}\n","import { UserId } from \"../../../types/guid\";\nimport { LogService } from \"../../abstractions/log.service\";\nimport { StorageServiceProvider } from \"../../services/storage-service.provider\";\nimport { StateEventRegistrarService } from \"../state-event-registrar.service\";\nimport { UserKeyDefinition } from \"../user-key-definition\";\nimport { SingleUserState } from \"../user-state\";\nimport { SingleUserStateProvider } from \"../user-state.provider\";\n\nimport { DefaultSingleUserState } from \"./default-single-user-state\";\n\nexport class DefaultSingleUserStateProvider implements SingleUserStateProvider {\n  private cache: Record<string, SingleUserState<unknown>> = {};\n\n  constructor(\n    private readonly storageServiceProvider: StorageServiceProvider,\n    private readonly stateEventRegistrarService: StateEventRegistrarService,\n    private readonly logService: LogService,\n  ) {}\n\n  get<T>(userId: UserId, keyDefinition: UserKeyDefinition<T>): SingleUserState<T> {\n    const [location, storageService] = this.storageServiceProvider.get(\n      keyDefinition.stateDefinition.defaultStorageLocation,\n      keyDefinition.stateDefinition.storageLocationOverrides,\n    );\n    const cacheKey = this.buildCacheKey(location, userId, keyDefinition);\n    const existingUserState = this.cache[cacheKey];\n    if (existingUserState != null) {\n      // I have to cast out of the unknown generic but this should be safe if rules\n      // around domain token are made\n      return existingUserState as SingleUserState<T>;\n    }\n\n    const newUserState = new DefaultSingleUserState<T>(\n      userId,\n      keyDefinition,\n      storageService,\n      this.stateEventRegistrarService,\n      this.logService,\n    );\n    this.cache[cacheKey] = newUserState;\n    return newUserState;\n  }\n\n  private buildCacheKey(\n    location: string,\n    userId: UserId,\n    keyDefinition: UserKeyDefinition<unknown>,\n  ) {\n    return `${location}_${keyDefinition.fullName}_${userId}`;\n  }\n}\n","import { Observable, filter, of, switchMap, take } from \"rxjs\";\n\nimport { UserId } from \"../../../types/guid\";\nimport { DerivedStateDependencies } from \"../../../types/state\";\nimport { DeriveDefinition } from \"../derive-definition\";\nimport { DerivedState } from \"../derived-state\";\nimport { DerivedStateProvider } from \"../derived-state.provider\";\nimport { GlobalStateProvider } from \"../global-state.provider\";\nimport { StateProvider } from \"../state.provider\";\nimport { UserKeyDefinition } from \"../user-key-definition\";\nimport { ActiveUserStateProvider, SingleUserStateProvider } from \"../user-state.provider\";\n\nexport class DefaultStateProvider implements StateProvider {\n  activeUserId$: Observable<UserId>;\n  constructor(\n    private readonly activeUserStateProvider: ActiveUserStateProvider,\n    private readonly singleUserStateProvider: SingleUserStateProvider,\n    private readonly globalStateProvider: GlobalStateProvider,\n    private readonly derivedStateProvider: DerivedStateProvider,\n  ) {\n    this.activeUserId$ = this.activeUserStateProvider.activeUserId$;\n  }\n\n  getUserState$<T>(userKeyDefinition: UserKeyDefinition<T>, userId?: UserId): Observable<T> {\n    if (userId) {\n      return this.getUser<T>(userId, userKeyDefinition).state$;\n    } else {\n      return this.activeUserId$.pipe(\n        filter((userId) => userId != null), // Filter out null-ish user ids since we can't get state for a null user id\n        take(1),\n        switchMap((userId) => this.getUser<T>(userId, userKeyDefinition).state$),\n      );\n    }\n  }\n\n  getUserStateOrDefault$<T>(\n    userKeyDefinition: UserKeyDefinition<T>,\n    config: { userId: UserId | undefined; defaultValue?: T },\n  ): Observable<T> {\n    const { userId, defaultValue = null } = config;\n    if (userId) {\n      return this.getUser<T>(userId, userKeyDefinition).state$;\n    } else {\n      return this.activeUserId$.pipe(\n        take(1),\n        switchMap((userId) =>\n          userId != null ? this.getUser<T>(userId, userKeyDefinition).state$ : of(defaultValue),\n        ),\n      );\n    }\n  }\n\n  async setUserState<T>(\n    userKeyDefinition: UserKeyDefinition<T>,\n    value: T,\n    userId?: UserId,\n  ): Promise<[UserId, T]> {\n    if (userId) {\n      return [userId, await this.getUser<T>(userId, userKeyDefinition).update(() => value)];\n    } else {\n      return await this.getActive<T>(userKeyDefinition).update(() => value);\n    }\n  }\n\n  getActive: InstanceType<typeof ActiveUserStateProvider>[\"get\"] =\n    this.activeUserStateProvider.get.bind(this.activeUserStateProvider);\n  getUser: InstanceType<typeof SingleUserStateProvider>[\"get\"] =\n    this.singleUserStateProvider.get.bind(this.singleUserStateProvider);\n  getGlobal: InstanceType<typeof GlobalStateProvider>[\"get\"] = this.globalStateProvider.get.bind(\n    this.globalStateProvider,\n  );\n  getDerived: <TFrom, TTo, TDeps extends DerivedStateDependencies>(\n    parentState$: Observable<TFrom>,\n    deriveDefinition: DeriveDefinition<unknown, TTo, TDeps>,\n    dependencies: TDeps,\n  ) => DerivedState<TTo> = this.derivedStateProvider.get.bind(this.derivedStateProvider);\n}\n","import { Observable, concatMap } from \"rxjs\";\n\nimport { DerivedStateDependencies } from \"../../../types/state\";\nimport { DeriveDefinition } from \"../derive-definition\";\nimport { DerivedState } from \"../derived-state\";\nimport { DerivedStateProvider } from \"../derived-state.provider\";\n\nexport class InlineDerivedStateProvider implements DerivedStateProvider {\n  get<TFrom, TTo, TDeps extends DerivedStateDependencies>(\n    parentState$: Observable<TFrom>,\n    deriveDefinition: DeriveDefinition<TFrom, TTo, TDeps>,\n    dependencies: TDeps,\n  ): DerivedState<TTo> {\n    return new InlineDerivedState(parentState$, deriveDefinition, dependencies);\n  }\n}\n\nexport class InlineDerivedState<TFrom, TTo, TDeps extends DerivedStateDependencies>\n  implements DerivedState<TTo>\n{\n  constructor(\n    parentState$: Observable<TFrom>,\n    deriveDefinition: DeriveDefinition<TFrom, TTo, TDeps>,\n    dependencies: TDeps,\n  ) {\n    this.state$ = parentState$.pipe(\n      concatMap(async (value) => await deriveDefinition.derive(value, dependencies)),\n    );\n  }\n\n  state$: Observable<TTo>;\n\n  forceValue(value: TTo): Promise<TTo> {\n    // No need to force anything, we don't keep a cache\n    return Promise.resolve(value);\n  }\n}\n","import { AbstractStorageService, ObservableStorageService } from \"../abstractions/storage.service\";\nimport { StorageOptions } from \"../models/domain/storage-options\";\n\nexport class PrimarySecondaryStorageService\n  implements AbstractStorageService, ObservableStorageService\n{\n  // Only follow the primary storage service as updates should all be done to both\n  updates$ = this.primaryStorageService.updates$;\n\n  constructor(\n    private readonly primaryStorageService: AbstractStorageService & ObservableStorageService,\n    // Secondary service doesn't need to be observable as the only `updates$` are listened to from the primary store\n    private readonly secondaryStorageService: AbstractStorageService,\n  ) {\n    if (\n      primaryStorageService.valuesRequireDeserialization !==\n      secondaryStorageService.valuesRequireDeserialization\n    ) {\n      throw new Error(\n        \"Differing values for valuesRequireDeserialization between storage services is not supported.\",\n      );\n    }\n  }\n  get valuesRequireDeserialization(): boolean {\n    return this.primaryStorageService.valuesRequireDeserialization;\n  }\n\n  async get<T>(key: string, options?: StorageOptions): Promise<T> {\n    const primaryValue = await this.primaryStorageService.get<T>(key, options);\n\n    // If it's null-ish try the secondary location for its value\n    if (primaryValue == null) {\n      return await this.secondaryStorageService.get<T>(key, options);\n    }\n\n    return primaryValue;\n  }\n\n  async has(key: string, options?: StorageOptions): Promise<boolean> {\n    return (\n      (await this.primaryStorageService.has(key, options)) ||\n      (await this.secondaryStorageService.has(key, options))\n    );\n  }\n\n  async save<T>(key: string, obj: T, options?: StorageOptions): Promise<void> {\n    await Promise.allSettled([\n      this.primaryStorageService.save(key, obj, options),\n      this.secondaryStorageService.save(key, obj, options),\n    ]);\n  }\n\n  async remove(key: string, options?: StorageOptions): Promise<void> {\n    await Promise.allSettled([\n      this.primaryStorageService.remove(key, options),\n      this.secondaryStorageService.remove(key, options),\n    ]);\n  }\n}\n","export enum SendType {\n  Text = 0,\n  File = 1,\n}\n","import { Observable, Subject } from \"rxjs\";\n\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n  StorageUpdate,\n} from \"../abstractions/storage.service\";\nimport { StorageOptions } from \"../models/domain/storage-options\";\n\nexport class WindowStorageService implements AbstractStorageService, ObservableStorageService {\n  private readonly updatesSubject = new Subject<StorageUpdate>();\n\n  updates$: Observable<StorageUpdate>;\n  constructor(private readonly storage: Storage) {\n    this.updates$ = this.updatesSubject.asObservable();\n  }\n\n  get valuesRequireDeserialization(): boolean {\n    return true;\n  }\n\n  get<T>(key: string, options?: StorageOptions): Promise<T> {\n    const jsonValue = this.storage.getItem(key);\n    if (jsonValue != null) {\n      return Promise.resolve(JSON.parse(jsonValue) as T);\n    }\n\n    return Promise.resolve(null);\n  }\n\n  async has(key: string, options?: StorageOptions): Promise<boolean> {\n    return (await this.get(key, options)) != null;\n  }\n\n  save<T>(key: string, obj: T, options?: StorageOptions): Promise<void> {\n    if (obj == null) {\n      return this.remove(key, options);\n    }\n\n    if (obj instanceof Set) {\n      obj = Array.from(obj) as T;\n    }\n\n    this.storage.setItem(key, JSON.stringify(obj));\n    this.updatesSubject.next({ key, updateType: \"save\" });\n  }\n\n  remove(key: string, options?: StorageOptions): Promise<void> {\n    this.storage.removeItem(key);\n    this.updatesSubject.next({ key, updateType: \"remove\" });\n    return Promise.resolve();\n  }\n\n  getKeys(): string[] {\n    return Object.keys(this.storage);\n  }\n}\n","import { ProviderStatusType, ProviderUserStatusType, ProviderUserType } from \"../../enums\";\nimport { ProfileProviderResponse } from \"../response/profile-provider.response\";\n\nexport class ProviderData {\n  id: string;\n  name: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  userId: string;\n  useEvents: boolean;\n  providerStatus: ProviderStatusType;\n\n  constructor(response: ProfileProviderResponse) {\n    this.id = response.id;\n    this.name = response.name;\n    this.status = response.status;\n    this.type = response.type;\n    this.enabled = response.enabled;\n    this.userId = response.userId;\n    this.useEvents = response.useEvents;\n    this.providerStatus = response.providerStatus;\n  }\n}\n","import { SendFileApi } from \"../api/send-file.api\";\n\nexport class SendFileData {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data?: SendFileApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.id = data.id;\n    this.fileName = data.fileName;\n    this.size = data.size;\n    this.sizeName = data.sizeName;\n  }\n}\n","import { SendTextApi } from \"../api/send-text.api\";\n\nexport class SendTextData {\n  text: string;\n  hidden: boolean;\n\n  constructor(data?: SendTextApi) {\n    if (data == null) {\n      return;\n    }\n\n    this.text = data.text;\n    this.hidden = data.hidden;\n  }\n}\n","import { SendType } from \"../../enums/send-type\";\nimport { SendResponse } from \"../response/send.response\";\n\nimport { SendFileData } from \"./send-file.data\";\nimport { SendTextData } from \"./send-text.data\";\n\nexport class SendData {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileData;\n  text: SendTextData;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(response?: SendResponse) {\n    if (response == null) {\n      return;\n    }\n\n    this.id = response.id;\n    this.accessId = response.accessId;\n    this.type = response.type;\n    this.name = response.name;\n    this.notes = response.notes;\n    this.key = response.key;\n    this.maxAccessCount = response.maxAccessCount;\n    this.accessCount = response.accessCount;\n    this.revisionDate = response.revisionDate;\n    this.expirationDate = response.expirationDate;\n    this.deletionDate = response.deletionDate;\n    this.password = response.password;\n    this.disabled = response.disable;\n    this.hideEmail = response.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextData(response.text);\n        break;\n      case SendType.File:\n        this.file = new SendFileData(response.file);\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class SelectionReadOnlyResponse extends BaseResponse {\n  id: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n  manage: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.readOnly = this.getResponseProperty(\"ReadOnly\");\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\");\n    this.manage = this.getResponseProperty(\"Manage\");\n  }\n}\n","import { SelectionReadOnlyResponse } from \"../../../admin-console/models/response/selection-read-only.response\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { CollectionId, OrganizationId } from \"../../../types/guid\";\n\nexport class CollectionResponse extends BaseResponse {\n  id: CollectionId;\n  organizationId: OrganizationId;\n  name: string;\n  externalId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.externalId = this.getResponseProperty(\"ExternalId\");\n  }\n}\n\nexport class CollectionDetailsResponse extends CollectionResponse {\n  readOnly: boolean;\n  manage: boolean;\n  hidePasswords: boolean;\n\n  /**\n   * Flag indicating the user has been explicitly assigned to this Collection\n   */\n  assigned: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.readOnly = this.getResponseProperty(\"ReadOnly\") || false;\n    this.manage = this.getResponseProperty(\"Manage\") || false;\n    this.hidePasswords = this.getResponseProperty(\"HidePasswords\") || false;\n\n    // Temporary until the API is updated to return this property in AC-2084\n    // For now, we can assume that if the object is 'collectionDetails' then the user is assigned\n    this.assigned = this.getResponseProperty(\"object\") == \"collectionDetails\";\n  }\n}\n\nexport class CollectionAccessDetailsResponse extends CollectionDetailsResponse {\n  groups: SelectionReadOnlyResponse[] = [];\n  users: SelectionReadOnlyResponse[] = [];\n  unmanaged: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.assigned = this.getResponseProperty(\"Assigned\") || false;\n    this.unmanaged = this.getResponseProperty(\"Unmanaged\") || false;\n\n    const groups = this.getResponseProperty(\"Groups\");\n    if (groups != null) {\n      this.groups = groups.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n\n    const users = this.getResponseProperty(\"Users\");\n    if (users != null) {\n      this.users = users.map((g: any) => new SelectionReadOnlyResponse(g));\n    }\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CollectionId, OrganizationId } from \"../../../types/guid\";\nimport { CollectionDetailsResponse } from \"../response/collection.response\";\n\nexport class CollectionData {\n  id: CollectionId;\n  organizationId: OrganizationId;\n  name: string;\n  externalId: string;\n  readOnly: boolean;\n  manage: boolean;\n  hidePasswords: boolean;\n\n  constructor(response: CollectionDetailsResponse) {\n    this.id = response.id;\n    this.organizationId = response.organizationId;\n    this.name = response.name;\n    this.externalId = response.externalId;\n    this.readOnly = response.readOnly;\n    this.manage = response.manage;\n    this.hidePasswords = response.hidePasswords;\n  }\n\n  static fromJSON(obj: Jsonify<CollectionData>) {\n    return Object.assign(new CollectionData(new CollectionDetailsResponse({})), obj);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { FolderResponse } from \"../response/folder.response\";\n\nexport class FolderData {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: Partial<FolderResponse>) {\n    this.name = response?.name;\n    this.id = response?.id;\n    this.revisionDate = response?.revisionDate;\n  }\n\n  static fromJSON(obj: Jsonify<FolderData>) {\n    return Object.assign(new FolderData({}), obj);\n  }\n}\n","import { firstValueFrom, map, Observable, of, switchMap } from \"rxjs\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { AuthService } from \"../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport {\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../../models/response/notification.response\";\nimport { SendData } from \"../../tools/send/models/data/send.data\";\nimport { SendApiService } from \"../../tools/send/services/send-api.service.abstraction\";\nimport { InternalSendService } from \"../../tools/send/services/send.service.abstraction\";\nimport { UserId } from \"../../types/guid\";\nimport { CipherService } from \"../../vault/abstractions/cipher.service\";\nimport { CollectionService } from \"../../vault/abstractions/collection.service\";\nimport { FolderApiServiceAbstraction } from \"../../vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"../../vault/abstractions/folder/folder.service.abstraction\";\nimport { SyncService } from \"../../vault/abstractions/sync/sync.service.abstraction\";\nimport { CipherData } from \"../../vault/models/data/cipher.data\";\nimport { FolderData } from \"../../vault/models/data/folder.data\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { MessageSender } from \"../messaging\";\nimport { StateProvider, SYNC_DISK, UserKeyDefinition } from \"../state\";\n\nconst LAST_SYNC_DATE = new UserKeyDefinition<Date>(SYNC_DISK, \"lastSync\", {\n  deserializer: (d) => (d != null ? new Date(d) : null),\n  clearOn: [\"logout\"],\n});\n\n/**\n * Core SyncService Logic EXCEPT for fullSync so that implementations can differ.\n */\nexport abstract class CoreSyncService implements SyncService {\n  syncInProgress = false;\n\n  constructor(\n    protected readonly stateService: StateService,\n    protected readonly folderService: InternalFolderService,\n    protected readonly folderApiService: FolderApiServiceAbstraction,\n    protected readonly messageSender: MessageSender,\n    protected readonly logService: LogService,\n    protected readonly cipherService: CipherService,\n    protected readonly collectionService: CollectionService,\n    protected readonly apiService: ApiService,\n    protected readonly accountService: AccountService,\n    protected readonly authService: AuthService,\n    protected readonly sendService: InternalSendService,\n    protected readonly sendApiService: SendApiService,\n    protected readonly stateProvider: StateProvider,\n  ) {}\n\n  abstract fullSync(forceSync: boolean, allowThrowOnError?: boolean): Promise<boolean>;\n\n  async getLastSync(): Promise<Date> {\n    const userId = await firstValueFrom(this.accountService.activeAccount$.pipe(map((a) => a?.id)));\n    if (userId == null) {\n      return null;\n    }\n\n    return await firstValueFrom(this.lastSync$(userId));\n  }\n\n  lastSync$(userId: UserId) {\n    return this.stateProvider.getUser(userId, LAST_SYNC_DATE).state$;\n  }\n\n  activeUserLastSync$(): Observable<Date | null> {\n    return this.accountService.activeAccount$.pipe(\n      switchMap((a) => {\n        if (a == null) {\n          return of(null);\n        }\n        return this.lastSync$(a.id);\n      }),\n    );\n  }\n\n  async setLastSync(date: Date, userId: UserId): Promise<void> {\n    await this.stateProvider.getUser(userId, LAST_SYNC_DATE).update(() => date);\n  }\n\n  async syncUpsertFolder(notification: SyncFolderNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        const localFolder = await this.folderService.get(notification.id);\n        if (\n          (!isEdit && localFolder == null) ||\n          (isEdit && localFolder != null && localFolder.revisionDate < notification.revisionDate)\n        ) {\n          const remoteFolder = await this.folderApiService.get(notification.id);\n          if (remoteFolder != null) {\n            await this.folderService.upsert(new FolderData(remoteFolder));\n            this.messageSender.send(\"syncedUpsertedFolder\", { folderId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteFolder(notification: SyncFolderNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.folderService.delete(notification.id);\n      this.messageSender.send(\"syncedDeletedFolder\", { folderId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertCipher(notification: SyncCipherNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      try {\n        let shouldUpdate = true;\n        const localCipher = await this.cipherService.get(notification.id);\n        if (localCipher != null && localCipher.revisionDate >= notification.revisionDate) {\n          shouldUpdate = false;\n        }\n\n        let checkCollections = false;\n        if (shouldUpdate) {\n          if (isEdit) {\n            shouldUpdate = localCipher != null;\n            checkCollections = true;\n          } else {\n            if (notification.collectionIds == null || notification.organizationId == null) {\n              shouldUpdate = localCipher == null;\n            } else {\n              shouldUpdate = false;\n              checkCollections = true;\n            }\n          }\n        }\n\n        if (\n          !shouldUpdate &&\n          checkCollections &&\n          notification.organizationId != null &&\n          notification.collectionIds != null &&\n          notification.collectionIds.length > 0\n        ) {\n          const collections = await this.collectionService.getAll();\n          if (collections != null) {\n            for (let i = 0; i < collections.length; i++) {\n              if (notification.collectionIds.indexOf(collections[i].id) > -1) {\n                shouldUpdate = true;\n                break;\n              }\n            }\n          }\n        }\n\n        if (shouldUpdate) {\n          const remoteCipher = await this.apiService.getFullCipherDetails(notification.id);\n          if (remoteCipher != null) {\n            await this.cipherService.upsert(new CipherData(remoteCipher));\n            this.messageSender.send(\"syncedUpsertedCipher\", { cipherId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        if (e != null && e.statusCode === 404 && isEdit) {\n          await this.cipherService.delete(notification.id);\n          this.messageSender.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n          return this.syncCompleted(true);\n        }\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteCipher(notification: SyncCipherNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.cipherService.delete(notification.id);\n      this.messageSender.send(\"syncedDeletedCipher\", { cipherId: notification.id });\n      return this.syncCompleted(true);\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncUpsertSend(notification: SyncSendNotification, isEdit: boolean): Promise<boolean> {\n    this.syncStarted();\n    const [activeUserId, status] = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(\n        switchMap((a) => {\n          if (a == null) {\n            of([null, AuthenticationStatus.LoggedOut]);\n          }\n          return this.authService.authStatusFor$(a.id).pipe(map((s) => [a.id, s]));\n        }),\n      ),\n    );\n    // Process only notifications for currently active user when user is not logged out\n    // TODO: once send service allows data manipulation of non-active users, this should process any received notification\n    if (activeUserId === notification.userId && status !== AuthenticationStatus.LoggedOut) {\n      try {\n        const localSend = await firstValueFrom(this.sendService.get$(notification.id));\n        if (\n          (!isEdit && localSend == null) ||\n          (isEdit && localSend != null && localSend.revisionDate < notification.revisionDate)\n        ) {\n          const remoteSend = await this.sendApiService.getSend(notification.id);\n          if (remoteSend != null) {\n            await this.sendService.upsert(new SendData(remoteSend));\n            this.messageSender.send(\"syncedUpsertedSend\", { sendId: notification.id });\n            return this.syncCompleted(true);\n          }\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n    return this.syncCompleted(false);\n  }\n\n  async syncDeleteSend(notification: SyncSendNotification): Promise<boolean> {\n    this.syncStarted();\n    if (await this.stateService.getIsAuthenticated()) {\n      await this.sendService.delete(notification.id);\n      this.messageSender.send(\"syncedDeletedSend\", { sendId: notification.id });\n      this.syncCompleted(true);\n      return true;\n    }\n    return this.syncCompleted(false);\n  }\n\n  // Helpers\n\n  protected syncStarted() {\n    this.syncInProgress = true;\n    this.messageSender.send(\"syncStarted\");\n  }\n\n  protected syncCompleted(successfully: boolean): boolean {\n    this.syncInProgress = false;\n    this.messageSender.send(\"syncCompleted\", { successfully: successfully });\n    return successfully;\n  }\n}\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { UserDecryptionOptionsServiceAbstraction } from \"../../../../auth/src/common/abstractions\";\nimport { LogoutReason } from \"../../../../auth/src/common/types\";\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { InternalOrganizationServiceAbstraction } from \"../../admin-console/abstractions/organization/organization.service.abstraction\";\nimport { InternalPolicyService } from \"../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { ProviderService } from \"../../admin-console/abstractions/provider.service\";\nimport { OrganizationUserType } from \"../../admin-console/enums\";\nimport { OrganizationData } from \"../../admin-console/models/data/organization.data\";\nimport { PolicyData } from \"../../admin-console/models/data/policy.data\";\nimport { ProviderData } from \"../../admin-console/models/data/provider.data\";\nimport { PolicyResponse } from \"../../admin-console/models/response/policy.response\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { AuthService } from \"../../auth/abstractions/auth.service\";\nimport { AvatarService } from \"../../auth/abstractions/avatar.service\";\nimport { KeyConnectorService } from \"../../auth/abstractions/key-connector.service\";\nimport { InternalMasterPasswordServiceAbstraction } from \"../../auth/abstractions/master-password.service.abstraction\";\nimport { TokenService } from \"../../auth/abstractions/token.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { ForceSetPasswordReason } from \"../../auth/models/domain/force-set-password-reason\";\nimport { DomainSettingsService } from \"../../autofill/services/domain-settings.service\";\nimport { BillingAccountProfileStateService } from \"../../billing/abstractions\";\nimport { DomainsResponse } from \"../../models/response/domains.response\";\nimport { ProfileResponse } from \"../../models/response/profile.response\";\nimport { SendData } from \"../../tools/send/models/data/send.data\";\nimport { SendResponse } from \"../../tools/send/models/response/send.response\";\nimport { SendApiService } from \"../../tools/send/services/send-api.service.abstraction\";\nimport { InternalSendService } from \"../../tools/send/services/send.service.abstraction\";\nimport { UserId } from \"../../types/guid\";\nimport { CipherService } from \"../../vault/abstractions/cipher.service\";\nimport { CollectionService } from \"../../vault/abstractions/collection.service\";\nimport { FolderApiServiceAbstraction } from \"../../vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"../../vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherData } from \"../../vault/models/data/cipher.data\";\nimport { CollectionData } from \"../../vault/models/data/collection.data\";\nimport { FolderData } from \"../../vault/models/data/folder.data\";\nimport { CipherResponse } from \"../../vault/models/response/cipher.response\";\nimport { CollectionDetailsResponse } from \"../../vault/models/response/collection.response\";\nimport { FolderResponse } from \"../../vault/models/response/folder.response\";\nimport { CryptoService } from \"../abstractions/crypto.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { MessageSender } from \"../messaging\";\nimport { sequentialize } from \"../misc/sequentialize\";\nimport { StateProvider } from \"../state\";\n\nimport { CoreSyncService } from \"./core-sync.service\";\n\nexport class DefaultSyncService extends CoreSyncService {\n  syncInProgress = false;\n\n  constructor(\n    private masterPasswordService: InternalMasterPasswordServiceAbstraction,\n    accountService: AccountService,\n    apiService: ApiService,\n    private domainSettingsService: DomainSettingsService,\n    folderService: InternalFolderService,\n    cipherService: CipherService,\n    private cryptoService: CryptoService,\n    collectionService: CollectionService,\n    messageSender: MessageSender,\n    private policyService: InternalPolicyService,\n    sendService: InternalSendService,\n    logService: LogService,\n    private keyConnectorService: KeyConnectorService,\n    stateService: StateService,\n    private providerService: ProviderService,\n    folderApiService: FolderApiServiceAbstraction,\n    private organizationService: InternalOrganizationServiceAbstraction,\n    sendApiService: SendApiService,\n    private userDecryptionOptionsService: UserDecryptionOptionsServiceAbstraction,\n    private avatarService: AvatarService,\n    private logoutCallback: (logoutReason: LogoutReason, userId?: UserId) => Promise<void>,\n    private billingAccountProfileStateService: BillingAccountProfileStateService,\n    private tokenService: TokenService,\n    authService: AuthService,\n    stateProvider: StateProvider,\n  ) {\n    super(\n      stateService,\n      folderService,\n      folderApiService,\n      messageSender,\n      logService,\n      cipherService,\n      collectionService,\n      apiService,\n      accountService,\n      authService,\n      sendService,\n      sendApiService,\n      stateProvider,\n    );\n  }\n\n  @sequentialize(() => \"fullSync\")\n  override async fullSync(forceSync: boolean, allowThrowOnError = false): Promise<boolean> {\n    const userId = await firstValueFrom(this.accountService.activeAccount$.pipe(map((a) => a?.id)));\n    this.syncStarted();\n    const authStatus = await firstValueFrom(this.authService.authStatusFor$(userId));\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      return this.syncCompleted(false);\n    }\n\n    const now = new Date();\n    let needsSync = false;\n    try {\n      needsSync = await this.needsSyncing(forceSync);\n    } catch (e) {\n      if (allowThrowOnError) {\n        this.syncCompleted(false);\n        throw e;\n      }\n    }\n\n    if (!needsSync) {\n      await this.setLastSync(now, userId);\n      return this.syncCompleted(false);\n    }\n\n    try {\n      await this.apiService.refreshIdentityToken();\n      const response = await this.apiService.getSync();\n\n      await this.syncProfile(response.profile);\n      await this.syncFolders(response.folders, response.profile.id);\n      await this.syncCollections(response.collections, response.profile.id);\n      await this.syncCiphers(response.ciphers, response.profile.id);\n      await this.syncSends(response.sends, response.profile.id);\n      await this.syncSettings(response.domains, response.profile.id);\n      await this.syncPolicies(response.policies, response.profile.id);\n\n      await this.setLastSync(now, userId);\n      return this.syncCompleted(true);\n    } catch (e) {\n      if (allowThrowOnError) {\n        this.syncCompleted(false);\n        throw e;\n      } else {\n        return this.syncCompleted(false);\n      }\n    }\n  }\n\n  private async needsSyncing(forceSync: boolean) {\n    if (forceSync) {\n      return true;\n    }\n\n    const lastSync = await this.getLastSync();\n    if (lastSync == null || lastSync.getTime() === 0) {\n      return true;\n    }\n\n    const response = await this.apiService.getAccountRevisionDate();\n    if (response < 0 && this.logoutCallback) {\n      // Account was deleted, log out now\n      await this.logoutCallback(\"accountDeleted\");\n    }\n\n    if (new Date(response) <= lastSync) {\n      return false;\n    }\n    return true;\n  }\n\n  private async syncProfile(response: ProfileResponse) {\n    const stamp = await this.tokenService.getSecurityStamp(response.id);\n    if (stamp != null && stamp !== response.securityStamp) {\n      if (this.logoutCallback != null) {\n        await this.logoutCallback(\"invalidSecurityStamp\");\n      }\n\n      throw new Error(\"Stamp has changed\");\n    }\n\n    await this.cryptoService.setMasterKeyEncryptedUserKey(response.key, response.id);\n    await this.cryptoService.setPrivateKey(response.privateKey, response.id);\n    await this.cryptoService.setProviderKeys(response.providers, response.id);\n    await this.cryptoService.setOrgKeys(\n      response.organizations,\n      response.providerOrganizations,\n      response.id,\n    );\n    await this.avatarService.setSyncAvatarColor(response.id, response.avatarColor);\n    await this.tokenService.setSecurityStamp(response.securityStamp, response.id);\n    await this.accountService.setAccountEmailVerified(response.id, response.emailVerified);\n\n    await this.billingAccountProfileStateService.setHasPremium(\n      response.premiumPersonally,\n      response.premiumFromOrganization,\n      response.id,\n    );\n    await this.keyConnectorService.setUsesKeyConnector(response.usesKeyConnector, response.id);\n\n    await this.setForceSetPasswordReasonIfNeeded(response);\n\n    const providers: { [id: string]: ProviderData } = {};\n    response.providers.forEach((p) => {\n      providers[p.id] = new ProviderData(p);\n    });\n\n    await this.providerService.save(providers, response.id);\n\n    await this.syncProfileOrganizations(response, response.id);\n\n    if (await this.keyConnectorService.userNeedsMigration(response.id)) {\n      await this.keyConnectorService.setConvertAccountRequired(true, response.id);\n      this.messageSender.send(\"convertAccountToKeyConnector\");\n    } else {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.keyConnectorService.removeConvertAccountRequired(response.id);\n    }\n  }\n\n  private async setForceSetPasswordReasonIfNeeded(profileResponse: ProfileResponse) {\n    // The `forcePasswordReset` flag indicates an admin has reset the user's password and must be updated\n    if (profileResponse.forcePasswordReset) {\n      await this.masterPasswordService.setForceSetPasswordReason(\n        ForceSetPasswordReason.AdminForcePasswordReset,\n        profileResponse.id,\n      );\n    }\n\n    const userDecryptionOptions = await firstValueFrom(\n      this.userDecryptionOptionsService.userDecryptionOptionsById$(profileResponse.id),\n    );\n\n    if (userDecryptionOptions === null || userDecryptionOptions === undefined) {\n      this.logService.error(\"Sync: Account decryption options are null or undefined.\");\n    }\n\n    // Even though TDE users should only be in a single org (per single org policy), check\n    // through all orgs for the manageResetPassword permission. If they have it in any org,\n    // they should be forced to set a password.\n    let hasManageResetPasswordPermission = false;\n    for (const org of profileResponse.organizations) {\n      const isAdmin = org.type === OrganizationUserType.Admin;\n      const isOwner = org.type === OrganizationUserType.Owner;\n\n      // Note: apparently permissions only come down populated for custom roles.\n      if (isAdmin || isOwner || (org.permissions && org.permissions.manageResetPassword)) {\n        hasManageResetPasswordPermission = true;\n        break;\n      }\n    }\n\n    if (\n      userDecryptionOptions.trustedDeviceOption !== undefined &&\n      !userDecryptionOptions.hasMasterPassword &&\n      hasManageResetPasswordPermission\n    ) {\n      // TDE user w/out MP went from having no password reset permission to having it.\n      // Must set the force password reset reason so the auth guard will redirect to the set password page.\n      const userId = (await firstValueFrom(this.accountService.activeAccount$))?.id;\n      await this.masterPasswordService.setForceSetPasswordReason(\n        ForceSetPasswordReason.TdeUserWithoutPasswordHasPasswordResetPermission,\n        userId,\n      );\n    }\n  }\n\n  private async syncProfileOrganizations(response: ProfileResponse, userId: UserId) {\n    const organizations: { [id: string]: OrganizationData } = {};\n    response.organizations.forEach((o) => {\n      organizations[o.id] = new OrganizationData(o, {\n        isMember: true,\n        isProviderUser: false,\n      });\n    });\n\n    response.providerOrganizations.forEach((o) => {\n      if (organizations[o.id] == null) {\n        organizations[o.id] = new OrganizationData(o, {\n          isMember: false,\n          isProviderUser: true,\n        });\n      } else {\n        organizations[o.id].isProviderUser = true;\n      }\n    });\n\n    await this.organizationService.replace(organizations, userId);\n  }\n\n  private async syncFolders(response: FolderResponse[], userId: UserId) {\n    const folders: { [id: string]: FolderData } = {};\n    response.forEach((f) => {\n      folders[f.id] = new FolderData(f);\n    });\n    return await this.folderService.replace(folders, userId);\n  }\n\n  private async syncCollections(response: CollectionDetailsResponse[], userId: UserId) {\n    const collections: { [id: string]: CollectionData } = {};\n    response.forEach((c) => {\n      collections[c.id] = new CollectionData(c);\n    });\n    return await this.collectionService.replace(collections, userId);\n  }\n\n  private async syncCiphers(response: CipherResponse[], userId: UserId) {\n    const ciphers: { [id: string]: CipherData } = {};\n    response.forEach((c) => {\n      ciphers[c.id] = new CipherData(c);\n    });\n    return await this.cipherService.replace(ciphers, userId);\n  }\n\n  private async syncSends(response: SendResponse[], userId: UserId) {\n    const sends: { [id: string]: SendData } = {};\n    response.forEach((s) => {\n      sends[s.id] = new SendData(s);\n    });\n    return await this.sendService.replace(sends, userId);\n  }\n\n  private async syncSettings(response: DomainsResponse, userId: UserId) {\n    let eqDomains: string[][] = [];\n    if (response != null && response.equivalentDomains != null) {\n      eqDomains = eqDomains.concat(response.equivalentDomains);\n    }\n\n    if (response != null && response.globalEquivalentDomains != null) {\n      response.globalEquivalentDomains.forEach((global) => {\n        if (global.domains.length > 0) {\n          eqDomains.push(global.domains);\n        }\n      });\n    }\n\n    return this.domainSettingsService.setEquivalentDomains(eqDomains, userId);\n  }\n\n  private async syncPolicies(response: PolicyResponse[], userId: UserId) {\n    const policies: { [id: string]: PolicyData } = {};\n    if (response != null) {\n      response.forEach((p) => {\n        policies[p.id] = new PolicyData(p);\n      });\n    }\n    return await this.policyService.replace(policies, userId);\n  }\n}\n","import { Observable, map } from \"rxjs\";\n\nimport { ThemeType } from \"../enums\";\nimport { GlobalStateProvider, KeyDefinition, THEMING_DISK } from \"../state\";\n\nexport abstract class ThemeStateService {\n  /**\n   * The users selected theme.\n   */\n  abstract selectedTheme$: Observable<ThemeType>;\n\n  /**\n   * A method for updating the current users configured theme.\n   * @param theme The chosen user theme.\n   */\n  abstract setSelectedTheme(theme: ThemeType): Promise<void>;\n}\n\nconst THEME_SELECTION = new KeyDefinition<ThemeType>(THEMING_DISK, \"selection\", {\n  deserializer: (s) => s,\n});\n\nexport class DefaultThemeStateService implements ThemeStateService {\n  private readonly selectedThemeState = this.globalStateProvider.get(THEME_SELECTION);\n\n  selectedTheme$ = this.selectedThemeState.state$.pipe(map((theme) => theme ?? this.defaultTheme));\n\n  constructor(\n    private globalStateProvider: GlobalStateProvider,\n    private defaultTheme: ThemeType = ThemeType.System,\n  ) {}\n\n  async setSelectedTheme(theme: ThemeType): Promise<void> {\n    await this.selectedThemeState.update(() => theme, {\n      shouldUpdate: (currentTheme) => currentTheme !== theme,\n    });\n  }\n}\n","import { BillingSyncConfigApi } from \"../../../billing/models/api/billing-sync-config.api\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { OrganizationConnectionType } from \"../../enums\";\nimport { ScimConfigApi } from \"../api/scim-config.api\";\n\n/**API response config types for OrganizationConnectionResponse */\nexport type OrganizationConnectionConfigApis = BillingSyncConfigApi | ScimConfigApi;\n\nexport class OrganizationConnectionResponse<\n  TConfig extends OrganizationConnectionConfigApis,\n> extends BaseResponse {\n  id: string;\n  type: OrganizationConnectionType;\n  organizationId: string;\n  enabled: boolean;\n  config: TConfig;\n\n  constructor(response: any, configType: { new (response: any): TConfig }) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const rawConfig = this.getResponseProperty(\"Config\");\n    this.config = rawConfig == null ? null : new configType(rawConfig);\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class CardApi extends BaseResponse {\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.cardholderName = this.getResponseProperty(\"CardholderName\");\n    this.brand = this.getResponseProperty(\"Brand\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.expMonth = this.getResponseProperty(\"ExpMonth\");\n    this.expYear = this.getResponseProperty(\"ExpYear\");\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { FieldType, LinkedIdType } from \"../../enums\";\n\nexport class FieldApi extends BaseResponse {\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.value = this.getResponseProperty(\"Value\");\n    this.linkedId = this.getResponseProperty(\"linkedId\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class IdentityApi extends BaseResponse {\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.title = this.getResponseProperty(\"Title\");\n    this.firstName = this.getResponseProperty(\"FirstName\");\n    this.middleName = this.getResponseProperty(\"MiddleName\");\n    this.lastName = this.getResponseProperty(\"LastName\");\n    this.address1 = this.getResponseProperty(\"Address1\");\n    this.address2 = this.getResponseProperty(\"Address2\");\n    this.address3 = this.getResponseProperty(\"Address3\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.company = this.getResponseProperty(\"Company\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.phone = this.getResponseProperty(\"Phone\");\n    this.ssn = this.getResponseProperty(\"SSN\");\n    this.username = this.getResponseProperty(\"Username\");\n    this.passportNumber = this.getResponseProperty(\"PassportNumber\");\n    this.licenseNumber = this.getResponseProperty(\"LicenseNumber\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class Fido2CredentialApi extends BaseResponse {\n  credentialId: string;\n  keyType: \"public-key\";\n  keyAlgorithm: \"ECDSA\";\n  keyCurve: \"P-256\";\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  userName: string;\n  counter: string;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: string;\n  creationDate: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n\n    this.credentialId = this.getResponseProperty(\"CredentialId\");\n    this.keyType = this.getResponseProperty(\"KeyType\");\n    this.keyAlgorithm = this.getResponseProperty(\"KeyAlgorithm\");\n    this.keyCurve = this.getResponseProperty(\"KeyCurve\");\n    this.keyValue = this.getResponseProperty(\"keyValue\");\n    this.rpId = this.getResponseProperty(\"RpId\");\n    this.userHandle = this.getResponseProperty(\"UserHandle\");\n    this.userName = this.getResponseProperty(\"UserName\");\n    this.counter = this.getResponseProperty(\"Counter\");\n    this.rpName = this.getResponseProperty(\"RpName\");\n    this.userDisplayName = this.getResponseProperty(\"UserDisplayName\");\n    this.discoverable = this.getResponseProperty(\"Discoverable\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n  }\n}\n","import { UriMatchStrategySetting } from \"../../../models/domain/domain-service\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class LoginUriApi extends BaseResponse {\n  uri: string;\n  uriChecksum: string;\n  match: UriMatchStrategySetting = null;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.uri = this.getResponseProperty(\"Uri\");\n    this.uriChecksum = this.getResponseProperty(\"UriChecksum\");\n    const match = this.getResponseProperty(\"Match\");\n    this.match = match != null ? match : null;\n  }\n}\n","import { JsonObject } from \"type-fest\";\n\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { Fido2CredentialApi } from \"./fido2-credential.api\";\nimport { LoginUriApi } from \"./login-uri.api\";\n\nexport class LoginApi extends BaseResponse {\n  uris: LoginUriApi[];\n  username: string;\n  password: string;\n  passwordRevisionDate: string;\n  totp: string;\n  autofillOnPageLoad: boolean;\n  fido2Credentials?: Fido2CredentialApi[];\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.username = this.getResponseProperty(\"Username\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.passwordRevisionDate = this.getResponseProperty(\"PasswordRevisionDate\");\n    this.totp = this.getResponseProperty(\"Totp\");\n    this.autofillOnPageLoad = this.getResponseProperty(\"AutofillOnPageLoad\");\n\n    const uris = this.getResponseProperty(\"Uris\");\n    if (uris != null) {\n      this.uris = uris.map((u: any) => new LoginUriApi(u));\n    }\n\n    const fido2Credentials = this.getResponseProperty(\"Fido2Credentials\");\n    if (fido2Credentials != null) {\n      this.fido2Credentials = fido2Credentials.map(\n        (key: JsonObject) => new Fido2CredentialApi(key),\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { SecureNoteType } from \"../../enums\";\n\nexport class SecureNoteApi extends BaseResponse {\n  type: SecureNoteType;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class AttachmentResponse extends BaseResponse {\n  id: string;\n  url: string;\n  fileName: string;\n  key: string;\n  size: string;\n  sizeName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class PasswordHistoryResponse extends BaseResponse {\n  password: string;\n  lastUsedDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.password = this.getResponseProperty(\"Password\");\n    this.lastUsedDate = this.getResponseProperty(\"LastUsedDate\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CardApi } from \"../api/card.api\";\nimport { FieldApi } from \"../api/field.api\";\nimport { IdentityApi } from \"../api/identity.api\";\nimport { LoginApi } from \"../api/login.api\";\nimport { SecureNoteApi } from \"../api/secure-note.api\";\n\nimport { AttachmentResponse } from \"./attachment.response\";\nimport { PasswordHistoryResponse } from \"./password-history.response\";\n\nexport class CipherResponse extends BaseResponse {\n  id: string;\n  organizationId: string;\n  folderId: string;\n  type: number;\n  name: string;\n  notes: string;\n  fields: FieldApi[];\n  login: LoginApi;\n  card: CardApi;\n  identity: IdentityApi;\n  secureNote: SecureNoteApi;\n  favorite: boolean;\n  edit: boolean;\n  viewPassword: boolean;\n  organizationUseTotp: boolean;\n  revisionDate: string;\n  attachments: AttachmentResponse[];\n  passwordHistory: PasswordHistoryResponse[];\n  collectionIds: string[];\n  creationDate: string;\n  deletedDate: string;\n  reprompt: CipherRepromptType;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.folderId = this.getResponseProperty(\"FolderId\") || null;\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.favorite = this.getResponseProperty(\"Favorite\") || false;\n    this.edit = !!this.getResponseProperty(\"Edit\");\n    if (this.getResponseProperty(\"ViewPassword\") == null) {\n      this.viewPassword = true;\n    } else {\n      this.viewPassword = this.getResponseProperty(\"ViewPassword\");\n    }\n    this.organizationUseTotp = this.getResponseProperty(\"OrganizationUseTotp\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.deletedDate = this.getResponseProperty(\"DeletedDate\");\n\n    const login = this.getResponseProperty(\"Login\");\n    if (login != null) {\n      this.login = new LoginApi(login);\n    }\n\n    const card = this.getResponseProperty(\"Card\");\n    if (card != null) {\n      this.card = new CardApi(card);\n    }\n\n    const identity = this.getResponseProperty(\"Identity\");\n    if (identity != null) {\n      this.identity = new IdentityApi(identity);\n    }\n\n    const secureNote = this.getResponseProperty(\"SecureNote\");\n    if (secureNote != null) {\n      this.secureNote = new SecureNoteApi(secureNote);\n    }\n\n    const fields = this.getResponseProperty(\"Fields\");\n    if (fields != null) {\n      this.fields = fields.map((f: any) => new FieldApi(f));\n    }\n\n    const attachments = this.getResponseProperty(\"Attachments\");\n    if (attachments != null) {\n      this.attachments = attachments.map((a: any) => new AttachmentResponse(a));\n    }\n\n    const passwordHistory = this.getResponseProperty(\"PasswordHistory\");\n    if (passwordHistory != null) {\n      this.passwordHistory = passwordHistory.map((h: any) => new PasswordHistoryResponse(h));\n    }\n\n    this.reprompt = this.getResponseProperty(\"Reprompt\") || CipherRepromptType.None;\n    this.key = this.getResponseProperty(\"Key\") || null;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { CipherResponse } from \"../../../vault/models/response/cipher.response\";\nimport { CollectionResponse } from \"../../../vault/models/response/collection.response\";\n\nexport class OrganizationExportResponse extends BaseResponse {\n  collections: CollectionResponse[];\n  ciphers: CipherResponse[];\n\n  constructor(response: any) {\n    super(response);\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionResponse(c));\n    }\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class OrganizationSponsorshipSyncStatusResponse extends BaseResponse {\n  lastSyncDate?: Date;\n\n  constructor(response: any) {\n    super(response);\n    const lastSyncDate = this.getResponseProperty(\"LastSyncDate\");\n    if (lastSyncDate) {\n      this.lastSyncDate = new Date(lastSyncDate);\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class ProviderOrganizationResponse extends BaseResponse {\n  id: string;\n  providerId: string;\n  organizationId: string;\n  key: string;\n  settings: string;\n  creationDate: string;\n  revisionDate: string;\n  userCount: number;\n  seats?: number;\n  occupiedSeats?: number;\n  remainingSeats?: number;\n  plan?: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.settings = this.getResponseProperty(\"Settings\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.userCount = this.getResponseProperty(\"UserCount\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.occupiedSeats = this.getResponseProperty(\"OccupiedSeats\");\n    this.remainingSeats = this.getResponseProperty(\"RemainingSeats\");\n    this.plan = this.getResponseProperty(\"Plan\");\n  }\n}\n\nexport class ProviderOrganizationOrganizationDetailsResponse extends ProviderOrganizationResponse {\n  organizationName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.organizationName = this.getResponseProperty(\"OrganizationName\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class PermissionsApi extends BaseResponse {\n  accessEventLogs: boolean;\n  accessImportExport: boolean;\n  accessReports: boolean;\n  createNewCollections: boolean;\n  editAnyCollection: boolean;\n  deleteAnyCollection: boolean;\n  editAssignedCollections: boolean;\n  deleteAssignedCollections: boolean;\n  manageCiphers: boolean;\n  manageGroups: boolean;\n  manageSso: boolean;\n  managePolicies: boolean;\n  manageUsers: boolean;\n  manageResetPassword: boolean;\n  manageScim: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return this;\n    }\n    this.accessEventLogs = this.getResponseProperty(\"AccessEventLogs\");\n    this.accessImportExport = this.getResponseProperty(\"AccessImportExport\");\n    this.accessReports = this.getResponseProperty(\"AccessReports\");\n\n    this.createNewCollections = this.getResponseProperty(\"CreateNewCollections\");\n    this.editAnyCollection = this.getResponseProperty(\"EditAnyCollection\");\n    this.deleteAnyCollection = this.getResponseProperty(\"DeleteAnyCollection\");\n    this.editAssignedCollections = this.getResponseProperty(\"EditAssignedCollections\");\n    this.deleteAssignedCollections = this.getResponseProperty(\"DeleteAssignedCollections\");\n\n    this.manageCiphers = this.getResponseProperty(\"ManageCiphers\");\n    this.manageGroups = this.getResponseProperty(\"ManageGroups\");\n    this.manageSso = this.getResponseProperty(\"ManageSso\");\n    this.managePolicies = this.getResponseProperty(\"ManagePolicies\");\n    this.manageUsers = this.getResponseProperty(\"ManageUsers\");\n    this.manageResetPassword = this.getResponseProperty(\"ManageResetPassword\");\n    this.manageScim = this.getResponseProperty(\"ManageScim\");\n  }\n}\n","import { BaseResponse } from \"@bitwarden/common/models/response/base.response\";\n\nexport class OrganizationUserBulkPublicKeyResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { OrganizationUserBulkPublicKeyResponse } from \"@bitwarden/admin-console/common\";\n\nexport class ProviderUserBulkPublicKeyResponse extends OrganizationUserBulkPublicKeyResponse {}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class ProviderUserBulkResponse extends BaseResponse {\n  id: string;\n  error: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.error = this.getResponseProperty(\"Error\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { ProviderUserStatusType, ProviderUserType } from \"../../../enums\";\nimport { PermissionsApi } from \"../../api/permissions.api\";\n\nexport class ProviderUserResponse extends BaseResponse {\n  id: string;\n  userId: string;\n  type: ProviderUserType;\n  status: ProviderUserStatusType;\n  permissions: PermissionsApi;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"Permissions\"));\n  }\n}\n\nexport class ProviderUserUserDetailsResponse extends ProviderUserResponse {\n  name: string;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class ApiKeyResponse extends BaseResponse {\n  apiKey: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.apiKey = this.getResponseProperty(\"ApiKey\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n","import { DeviceType } from \"../../../enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nconst RequestTimeOut = 60000 * 15; //15 Minutes\n\nexport class AuthRequestResponse extends BaseResponse {\n  id: string;\n  publicKey: string;\n  requestDeviceType: DeviceType;\n  requestIpAddress: string;\n  key: string;\n  masterPasswordHash: string;\n  creationDate: string;\n  requestApproved?: boolean;\n  responseDate?: string;\n  isAnswered: boolean;\n  isExpired: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n    this.requestDeviceType = this.getResponseProperty(\"RequestDeviceType\");\n    this.requestIpAddress = this.getResponseProperty(\"RequestIpAddress\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.masterPasswordHash = this.getResponseProperty(\"MasterPasswordHash\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.requestApproved = this.getResponseProperty(\"RequestApproved\");\n    this.responseDate = this.getResponseProperty(\"ResponseDate\");\n\n    const requestDate = new Date(this.creationDate);\n    const requestDateUTC = Date.UTC(\n      requestDate.getUTCFullYear(),\n      requestDate.getUTCMonth(),\n      requestDate.getDate(),\n      requestDate.getUTCHours(),\n      requestDate.getUTCMinutes(),\n      requestDate.getUTCSeconds(),\n      requestDate.getUTCMilliseconds(),\n    );\n\n    const dateNow = new Date(Date.now());\n    const dateNowUTC = Date.UTC(\n      dateNow.getUTCFullYear(),\n      dateNow.getUTCMonth(),\n      dateNow.getDate(),\n      dateNow.getUTCHours(),\n      dateNow.getUTCMinutes(),\n      dateNow.getUTCSeconds(),\n      dateNow.getUTCMilliseconds(),\n    );\n\n    this.isExpired = dateNowUTC - requestDateUTC >= RequestTimeOut;\n    this.isAnswered = this.requestApproved != null && this.responseDate != null;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class DeviceVerificationResponse extends BaseResponse {\n  isDeviceVerificationSectionEnabled: boolean;\n  unknownDeviceVerificationEnabled: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.isDeviceVerificationSectionEnabled = this.getResponseProperty(\n      \"IsDeviceVerificationSectionEnabled\",\n    );\n    this.unknownDeviceVerificationEnabled = this.getResponseProperty(\n      \"UnknownDeviceVerificationEnabled\",\n    );\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class KeyConnectorUserKeyResponse extends BaseResponse {\n  key: string;\n\n  constructor(response: any) {\n    super(response);\n    this.key = this.getResponseProperty(\"Key\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { KdfType } from \"../../../platform/enums\";\n\nexport class PreloginResponse extends BaseResponse {\n  kdf: KdfType;\n  kdfIterations: number;\n  kdfMemory?: number;\n  kdfParallelism?: number;\n\n  constructor(response: any) {\n    super(response);\n    this.kdf = this.getResponseProperty(\"Kdf\");\n    this.kdfIterations = this.getResponseProperty(\"KdfIterations\");\n    this.kdfMemory = this.getResponseProperty(\"KdfMemory\");\n    this.kdfParallelism = this.getResponseProperty(\"KdfParallelism\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { ICaptchaProtectedResponse } from \"./captcha-protected.response\";\n\nexport class RegisterResponse extends BaseResponse implements ICaptchaProtectedResponse {\n  captchaBypassToken: string;\n\n  constructor(response: any) {\n    super(response);\n    this.captchaBypassToken = this.getResponseProperty(\"CaptchaBypassToken\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class SsoPreValidateResponse extends BaseResponse {\n  token: string;\n\n  constructor(response: any) {\n    super(response);\n    this.token = this.getResponseProperty(\"Token\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorAuthenticatorResponse extends BaseResponse {\n  enabled: boolean;\n  key: string;\n  userVerificationToken: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.userVerificationToken = this.getResponseProperty(\"UserVerificationToken\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorDuoResponse extends BaseResponse {\n  enabled: boolean;\n  host: string;\n  clientSecret: string;\n  clientId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.host = this.getResponseProperty(\"Host\");\n    this.clientSecret = this.getResponseProperty(\"ClientSecret\");\n    this.clientId = this.getResponseProperty(\"ClientId\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorEmailResponse extends BaseResponse {\n  enabled: boolean;\n  email: string;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.email = this.getResponseProperty(\"Email\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { TwoFactorProviderType } from \"../../enums/two-factor-provider-type\";\n\nexport class TwoFactorProviderResponse extends BaseResponse {\n  enabled: boolean;\n  type: TwoFactorProviderType;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.type = this.getResponseProperty(\"Type\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorRecoverResponse extends BaseResponse {\n  code: string;\n\n  constructor(response: any) {\n    super(response);\n    this.code = this.getResponseProperty(\"Code\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { Utils } from \"../../../platform/misc/utils\";\n\nexport class TwoFactorWebAuthnResponse extends BaseResponse {\n  enabled: boolean;\n  keys: KeyResponse[];\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    const keys = this.getResponseProperty(\"Keys\");\n    this.keys = keys == null ? null : keys.map((k: any) => new KeyResponse(k));\n  }\n}\n\nexport class KeyResponse extends BaseResponse {\n  name: string;\n  id: number;\n  migrated: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.name = this.getResponseProperty(\"Name\");\n    this.id = this.getResponseProperty(\"Id\");\n    this.migrated = this.getResponseProperty(\"Migrated\");\n  }\n}\n\nexport class ChallengeResponse extends BaseResponse implements PublicKeyCredentialCreationOptions {\n  attestation?: AttestationConveyancePreference;\n  authenticatorSelection?: AuthenticatorSelectionCriteria;\n  challenge: BufferSource;\n  excludeCredentials?: PublicKeyCredentialDescriptor[];\n  extensions?: AuthenticationExtensionsClientInputs;\n  pubKeyCredParams: PublicKeyCredentialParameters[];\n  rp: PublicKeyCredentialRpEntity;\n  timeout?: number;\n  user: PublicKeyCredentialUserEntity;\n\n  constructor(response: any) {\n    super(response);\n    this.attestation = this.getResponseProperty(\"attestation\");\n    this.authenticatorSelection = this.getResponseProperty(\"authenticatorSelection\");\n    this.challenge = Utils.fromUrlB64ToArray(this.getResponseProperty(\"challenge\"));\n    this.excludeCredentials = this.getResponseProperty(\"excludeCredentials\").map((c: any) => {\n      c.id = Utils.fromUrlB64ToArray(c.id).buffer;\n      return c;\n    });\n    this.extensions = this.getResponseProperty(\"extensions\");\n    this.pubKeyCredParams = this.getResponseProperty(\"pubKeyCredParams\");\n    this.rp = this.getResponseProperty(\"rp\");\n    this.timeout = this.getResponseProperty(\"timeout\");\n\n    const user = this.getResponseProperty(\"user\");\n    user.id = Utils.fromUrlB64ToArray(user.id);\n\n    this.user = user;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TwoFactorYubiKeyResponse extends BaseResponse {\n  enabled: boolean;\n  key1: string;\n  key2: string;\n  key3: string;\n  key4: string;\n  key5: string;\n  nfc: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.key1 = this.getResponseProperty(\"Key1\");\n    this.key2 = this.getResponseProperty(\"Key2\");\n    this.key3 = this.getResponseProperty(\"Key3\");\n    this.key4 = this.getResponseProperty(\"Key4\");\n    this.key5 = this.getResponseProperty(\"Key5\");\n    this.nfc = this.getResponseProperty(\"Nfc\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { PaymentMethodType, TransactionType } from \"../../enums\";\n\nexport class BillingResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n  }\n}\n\nexport class BillingSourceResponse extends BaseResponse {\n  type: PaymentMethodType;\n  cardBrand: string;\n  description: string;\n  needsVerification: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.cardBrand = this.getResponseProperty(\"CardBrand\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.needsVerification = this.getResponseProperty(\"NeedsVerification\");\n  }\n}\n\nexport class BillingInvoiceResponse extends BaseResponse {\n  id: string;\n  url: string;\n  pdfUrl: string;\n  number: string;\n  paid: boolean;\n  date: string;\n  amount: number;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n    this.pdfUrl = this.getResponseProperty(\"PdfUrl\");\n    this.number = this.getResponseProperty(\"Number\");\n    this.paid = this.getResponseProperty(\"Paid\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n\nexport class BillingTransactionResponse extends BaseResponse {\n  createdDate: string;\n  amount: number;\n  refunded: boolean;\n  partiallyRefunded: boolean;\n  refundedAmount: number;\n  type: TransactionType;\n  paymentMethodType: PaymentMethodType;\n  details: string;\n\n  constructor(response: any) {\n    super(response);\n    this.createdDate = this.getResponseProperty(\"CreatedDate\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.refunded = this.getResponseProperty(\"Refunded\");\n    this.partiallyRefunded = this.getResponseProperty(\"PartiallyRefunded\");\n    this.refundedAmount = this.getResponseProperty(\"RefundedAmount\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.paymentMethodType = this.getResponseProperty(\"PaymentMethodType\");\n    this.details = this.getResponseProperty(\"Details\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { BillingInvoiceResponse, BillingTransactionResponse } from \"./billing.response\";\n\nexport class BillingHistoryResponse extends BaseResponse {\n  invoices: BillingInvoiceResponse[] = [];\n  transactions: BillingTransactionResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    const transactions = this.getResponseProperty(\"Transactions\");\n    const invoices = this.getResponseProperty(\"Invoices\");\n    if (transactions != null) {\n      this.transactions = transactions.map((t: any) => new BillingTransactionResponse(t));\n    }\n    if (invoices != null) {\n      this.invoices = invoices.map((i: any) => new BillingInvoiceResponse(i));\n    }\n  }\n\n  get hasNoHistory() {\n    return this.invoices.length == 0 && this.transactions.length == 0;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { BillingSourceResponse } from \"./billing.response\";\n\nexport class BillingPaymentResponse extends BaseResponse {\n  balance: number;\n  paymentSource: BillingSourceResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.balance = this.getResponseProperty(\"Balance\");\n    const paymentSource = this.getResponseProperty(\"PaymentSource\");\n    this.paymentSource = paymentSource == null ? null : new BillingSourceResponse(paymentSource);\n  }\n}\n","import { ProductTierType } from \"../../../billing/enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\nimport { OrganizationUserStatusType, OrganizationUserType, ProviderType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\n\nexport class ProfileOrganizationResponse extends BaseResponse {\n  id: string;\n  name: string;\n  usePolicies: boolean;\n  useGroups: boolean;\n  useDirectory: boolean;\n  useEvents: boolean;\n  useTotp: boolean;\n  use2fa: boolean;\n  useApi: boolean;\n  useSso: boolean;\n  useKeyConnector: boolean;\n  useScim: boolean;\n  useCustomPermissions: boolean;\n  useResetPassword: boolean;\n  useSecretsManager: boolean;\n  usePasswordManager: boolean;\n  useActivateAutofillPolicy: boolean;\n  selfHost: boolean;\n  usersGetPremium: boolean;\n  seats: number;\n  maxCollections: number;\n  maxStorageGb?: number;\n  key: string;\n  hasPublicAndPrivateKeys: boolean;\n  status: OrganizationUserStatusType;\n  type: OrganizationUserType;\n  enabled: boolean;\n  ssoBound: boolean;\n  identifier: string;\n  permissions: PermissionsApi;\n  resetPasswordEnrolled: boolean;\n  userId: string;\n  organizationUserId: string;\n  providerId: string;\n  providerName: string;\n  providerType?: ProviderType;\n  familySponsorshipFriendlyName: string;\n  familySponsorshipAvailable: boolean;\n  productTierType: ProductTierType;\n  keyConnectorEnabled: boolean;\n  keyConnectorUrl: string;\n  familySponsorshipLastSyncDate?: Date;\n  familySponsorshipValidUntil?: Date;\n  familySponsorshipToDelete?: boolean;\n  accessSecretsManager: boolean;\n  limitCollectionCreationDeletion: boolean;\n  allowAdminAccessToAllCollectionItems: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.usePolicies = this.getResponseProperty(\"UsePolicies\");\n    this.useGroups = this.getResponseProperty(\"UseGroups\");\n    this.useDirectory = this.getResponseProperty(\"UseDirectory\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.useTotp = this.getResponseProperty(\"UseTotp\");\n    this.use2fa = this.getResponseProperty(\"Use2fa\");\n    this.useApi = this.getResponseProperty(\"UseApi\");\n    this.useSso = this.getResponseProperty(\"UseSso\");\n    this.useKeyConnector = this.getResponseProperty(\"UseKeyConnector\") ?? false;\n    this.useScim = this.getResponseProperty(\"UseScim\") ?? false;\n    this.useCustomPermissions = this.getResponseProperty(\"UseCustomPermissions\") ?? false;\n    this.useResetPassword = this.getResponseProperty(\"UseResetPassword\");\n    this.useSecretsManager = this.getResponseProperty(\"UseSecretsManager\");\n    this.usePasswordManager = this.getResponseProperty(\"UsePasswordManager\");\n    this.useActivateAutofillPolicy = this.getResponseProperty(\"UseActivateAutofillPolicy\");\n    this.selfHost = this.getResponseProperty(\"SelfHost\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.seats = this.getResponseProperty(\"Seats\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.hasPublicAndPrivateKeys = this.getResponseProperty(\"HasPublicAndPrivateKeys\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.ssoBound = this.getResponseProperty(\"SsoBound\");\n    this.identifier = this.getResponseProperty(\"Identifier\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.resetPasswordEnrolled = this.getResponseProperty(\"ResetPasswordEnrolled\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.providerName = this.getResponseProperty(\"ProviderName\");\n    this.providerType = this.getResponseProperty(\"ProviderType\");\n    this.familySponsorshipFriendlyName = this.getResponseProperty(\"FamilySponsorshipFriendlyName\");\n    this.familySponsorshipAvailable = this.getResponseProperty(\"FamilySponsorshipAvailable\");\n    this.productTierType = this.getResponseProperty(\"ProductTierType\");\n    this.keyConnectorEnabled = this.getResponseProperty(\"KeyConnectorEnabled\") ?? false;\n    this.keyConnectorUrl = this.getResponseProperty(\"KeyConnectorUrl\");\n    const familySponsorshipLastSyncDateString = this.getResponseProperty(\n      \"FamilySponsorshipLastSyncDate\",\n    );\n    if (familySponsorshipLastSyncDateString) {\n      this.familySponsorshipLastSyncDate = new Date(familySponsorshipLastSyncDateString);\n    }\n    const familySponsorshipValidUntilString = this.getResponseProperty(\n      \"FamilySponsorshipValidUntil\",\n    );\n    if (familySponsorshipValidUntilString) {\n      this.familySponsorshipValidUntil = new Date(familySponsorshipValidUntilString);\n    }\n    this.familySponsorshipToDelete = this.getResponseProperty(\"FamilySponsorshipToDelete\");\n    this.accessSecretsManager = this.getResponseProperty(\"AccessSecretsManager\");\n    this.limitCollectionCreationDeletion = this.getResponseProperty(\n      \"LimitCollectionCreationDeletion\",\n    );\n    this.allowAdminAccessToAllCollectionItems = this.getResponseProperty(\n      \"AllowAdminAccessToAllCollectionItems\",\n    );\n  }\n}\n","import { ProfileOrganizationResponse } from \"./profile-organization.response\";\n\nexport class ProfileProviderOrganizationResponse extends ProfileOrganizationResponse {\n  constructor(response: any) {\n    super(response);\n    this.keyConnectorEnabled = false;\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { ProviderStatusType, ProviderUserStatusType, ProviderUserType } from \"../../enums\";\nimport { PermissionsApi } from \"../api/permissions.api\";\n\nexport class ProfileProviderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  key: string;\n  status: ProviderUserStatusType;\n  type: ProviderUserType;\n  enabled: boolean;\n  permissions: PermissionsApi;\n  userId: string;\n  useEvents: boolean;\n  providerStatus: ProviderStatusType;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.enabled = this.getResponseProperty(\"Enabled\");\n    this.permissions = new PermissionsApi(this.getResponseProperty(\"permissions\"));\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.useEvents = this.getResponseProperty(\"UseEvents\");\n    this.providerStatus = this.getResponseProperty(\"ProviderStatus\");\n  }\n}\n","import { ProfileOrganizationResponse } from \"../../admin-console/models/response/profile-organization.response\";\nimport { ProfileProviderOrganizationResponse } from \"../../admin-console/models/response/profile-provider-organization.response\";\nimport { ProfileProviderResponse } from \"../../admin-console/models/response/profile-provider.response\";\nimport { UserId } from \"../../types/guid\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class ProfileResponse extends BaseResponse {\n  id: UserId;\n  name: string;\n  email: string;\n  emailVerified: boolean;\n  premiumPersonally: boolean;\n  premiumFromOrganization: boolean;\n  culture: string;\n  twoFactorEnabled: boolean;\n  key: string;\n  avatarColor: string;\n  creationDate: string;\n  privateKey: string;\n  securityStamp: string;\n  forcePasswordReset: boolean;\n  usesKeyConnector: boolean;\n  organizations: ProfileOrganizationResponse[] = [];\n  providers: ProfileProviderResponse[] = [];\n  providerOrganizations: ProfileProviderOrganizationResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.email = this.getResponseProperty(\"Email\");\n    this.emailVerified = this.getResponseProperty(\"EmailVerified\");\n    this.premiumPersonally = this.getResponseProperty(\"Premium\");\n    this.premiumFromOrganization = this.getResponseProperty(\"PremiumFromOrganization\");\n    this.culture = this.getResponseProperty(\"Culture\");\n    this.twoFactorEnabled = this.getResponseProperty(\"TwoFactorEnabled\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.avatarColor = this.getResponseProperty(\"AvatarColor\");\n    this.creationDate = this.getResponseProperty(\"CreationDate\");\n    this.privateKey = this.getResponseProperty(\"PrivateKey\");\n    this.securityStamp = this.getResponseProperty(\"SecurityStamp\");\n    this.forcePasswordReset = this.getResponseProperty(\"ForcePasswordReset\") ?? false;\n    this.usesKeyConnector = this.getResponseProperty(\"UsesKeyConnector\") ?? false;\n\n    const organizations = this.getResponseProperty(\"Organizations\");\n    if (organizations != null) {\n      this.organizations = organizations.map((o: any) => new ProfileOrganizationResponse(o));\n    }\n    const providers = this.getResponseProperty(\"Providers\");\n    if (providers != null) {\n      this.providers = providers.map((o: any) => new ProfileProviderResponse(o));\n    }\n    const providerOrganizations = this.getResponseProperty(\"ProviderOrganizations\");\n    if (providerOrganizations != null) {\n      this.providerOrganizations = providerOrganizations.map(\n        (o: any) => new ProfileProviderOrganizationResponse(o),\n      );\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { ProfileResponse } from \"../../../models/response/profile.response\";\n\nexport class PaymentResponse extends BaseResponse {\n  userProfile: ProfileResponse;\n  paymentIntentClientSecret: string;\n  success: boolean;\n\n  constructor(response: any) {\n    super(response);\n    const userProfile = this.getResponseProperty(\"UserProfile\");\n    if (userProfile != null) {\n      this.userProfile = new ProfileResponse(userProfile);\n    }\n    this.paymentIntentClientSecret = this.getResponseProperty(\"PaymentIntentClientSecret\");\n    this.success = this.getResponseProperty(\"Success\");\n  }\n}\n","import { ProductTierType, PlanType } from \"../../../billing/enums\";\nimport { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class PlanResponse extends BaseResponse {\n  type: PlanType;\n  productTier: ProductTierType;\n  name: string;\n  isAnnual: boolean;\n  nameLocalizationKey: string;\n  descriptionLocalizationKey: string;\n  canBeUsedByBusiness: boolean;\n  trialPeriodDays: number;\n  hasSelfHost: boolean;\n  hasPolicies: boolean;\n  hasGroups: boolean;\n  hasDirectory: boolean;\n  hasEvents: boolean;\n  hasTotp: boolean;\n  has2fa: boolean;\n  hasApi: boolean;\n  hasSso: boolean;\n  hasResetPassword: boolean;\n  usersGetPremium: boolean;\n  upgradeSortOrder: number;\n  displaySortOrder: number;\n  legacyYear: number;\n  disabled: boolean;\n  PasswordManager: PasswordManagerPlanFeaturesResponse;\n  SecretsManager: SecretsManagerPlanFeaturesResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.productTier = this.getResponseProperty(\"ProductTier\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.isAnnual = this.getResponseProperty(\"IsAnnual\");\n    this.nameLocalizationKey = this.getResponseProperty(\"NameLocalizationKey\");\n    this.descriptionLocalizationKey = this.getResponseProperty(\"DescriptionLocalizationKey\");\n    this.canBeUsedByBusiness = this.getResponseProperty(\"CanBeUsedByBusiness\");\n    this.trialPeriodDays = this.getResponseProperty(\"TrialPeriodDays\");\n    this.hasSelfHost = this.getResponseProperty(\"HasSelfHost\");\n    this.hasPolicies = this.getResponseProperty(\"HasPolicies\");\n    this.hasGroups = this.getResponseProperty(\"HasGroups\");\n    this.hasDirectory = this.getResponseProperty(\"HasDirectory\");\n    this.hasEvents = this.getResponseProperty(\"HasEvents\");\n    this.hasTotp = this.getResponseProperty(\"HasTotp\");\n    this.has2fa = this.getResponseProperty(\"Has2fa\");\n    this.hasApi = this.getResponseProperty(\"HasApi\");\n    this.hasSso = this.getResponseProperty(\"HasSso\");\n    this.hasResetPassword = this.getResponseProperty(\"HasResetPassword\");\n    this.usersGetPremium = this.getResponseProperty(\"UsersGetPremium\");\n    this.upgradeSortOrder = this.getResponseProperty(\"UpgradeSortOrder\");\n    this.displaySortOrder = this.getResponseProperty(\"DisplaySortOrder\");\n    this.legacyYear = this.getResponseProperty(\"LegacyYear\");\n    this.disabled = this.getResponseProperty(\"Disabled\");\n    const passwordManager = this.getResponseProperty(\"PasswordManager\");\n    const secretsManager = this.getResponseProperty(\"SecretsManager\");\n    this.PasswordManager =\n      passwordManager == null ? null : new PasswordManagerPlanFeaturesResponse(passwordManager);\n    this.SecretsManager =\n      secretsManager == null ? null : new SecretsManagerPlanFeaturesResponse(secretsManager);\n  }\n}\n\nexport class SecretsManagerPlanFeaturesResponse extends BaseResponse {\n  // Seats\n  stripeSeatPlanId: string;\n  baseSeats: number;\n  basePrice: number;\n  seatPrice: number;\n  hasAdditionalSeatsOption: boolean;\n  maxAdditionalSeats: number;\n  maxSeats: number;\n\n  // Service accounts\n  stripeServiceAccountPlanId: string;\n  additionalPricePerServiceAccount: number;\n  baseServiceAccount: number;\n  maxServiceAccount: number;\n  hasAdditionalServiceAccountOption: boolean;\n  maxAdditionalServiceAccounts: number;\n\n  // Features\n  maxProjects: number;\n\n  constructor(response: any) {\n    super(response);\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.maxSeats = this.getResponseProperty(\"MaxSeats\");\n    this.stripeServiceAccountPlanId = this.getResponseProperty(\"StripeServiceAccountPlanId\");\n    this.additionalPricePerServiceAccount = this.getResponseProperty(\n      \"AdditionalPricePerServiceAccount\",\n    );\n    this.baseServiceAccount = this.getResponseProperty(\"BaseServiceAccount\");\n    this.maxServiceAccount = this.getResponseProperty(\"MaxServiceAccount\");\n    this.hasAdditionalServiceAccountOption = this.getResponseProperty(\n      \"HasAdditionalServiceAccountOption\",\n    );\n    this.maxAdditionalServiceAccounts = this.getResponseProperty(\"MaxAdditionalServiceAccounts\");\n    this.maxProjects = this.getResponseProperty(\"MaxProjects\");\n  }\n}\n\nexport class PasswordManagerPlanFeaturesResponse extends BaseResponse {\n  // Seats\n  stripePlanId: string;\n  stripeSeatPlanId: string;\n  stripeProviderPortalSeatPlanId: string;\n  stripePremiumAccessPlanId: string;\n  basePrice: number;\n  seatPrice: number;\n  providerPortalSeatPrice: number;\n  premiumAccessOptionPrice: number;\n  baseSeats: number;\n  maxAdditionalSeats: number;\n  maxSeats: number;\n  hasPremiumAccessOption: boolean;\n\n  // Storage\n  additionalStoragePricePerGb: number;\n  stripeStoragePlanId: string;\n  baseStorageGb: number;\n  hasAdditionalStorageOption: boolean;\n  maxAdditionalStorage: number;\n  hasAdditionalSeatsOption: boolean;\n\n  // Feature\n  maxCollections: number;\n\n  constructor(response: any) {\n    super(response);\n    this.stripePlanId = this.getResponseProperty(\"StripePlanId\");\n    this.stripeSeatPlanId = this.getResponseProperty(\"StripeSeatPlanId\");\n    this.stripeProviderPortalSeatPlanId = this.getResponseProperty(\n      \"StripeProviderPortalSeatPlanId\",\n    );\n    this.stripeStoragePlanId = this.getResponseProperty(\"StripeStoragePlanId\");\n    this.stripePremiumAccessPlanId = this.getResponseProperty(\"StripePremiumAccessPlanId\");\n    this.basePrice = this.getResponseProperty(\"BasePrice\");\n    this.seatPrice = this.getResponseProperty(\"SeatPrice\");\n    this.providerPortalSeatPrice = this.getResponseProperty(\"ProviderPortalSeatPrice\");\n    this.baseSeats = this.getResponseProperty(\"BaseSeats\");\n    this.maxAdditionalSeats = this.getResponseProperty(\"MaxAdditionalSeats\");\n    this.premiumAccessOptionPrice = this.getResponseProperty(\"PremiumAccessOptionPrice\");\n    this.maxSeats = this.getResponseProperty(\"MaxSeats\");\n    this.additionalStoragePricePerGb = this.getResponseProperty(\"AdditionalStoragePricePerGb\");\n    this.hasAdditionalSeatsOption = this.getResponseProperty(\"HasAdditionalSeatsOption\");\n    this.baseStorageGb = this.getResponseProperty(\"BaseStorageGb\");\n    this.maxCollections = this.getResponseProperty(\"MaxCollections\");\n    this.hasAdditionalStorageOption = this.getResponseProperty(\"HasAdditionalStorageOption\");\n    this.maxAdditionalStorage = this.getResponseProperty(\"MaxAdditionalStorage\");\n    this.hasPremiumAccessOption = this.getResponseProperty(\"HasPremiumAccessOption\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class SubscriptionResponse extends BaseResponse {\n  storageName: string;\n  storageGb: number;\n  maxStorageGb: number;\n  subscription: BillingSubscriptionResponse;\n  upcomingInvoice: BillingSubscriptionUpcomingInvoiceResponse;\n  license: any;\n  expiration: string;\n\n  constructor(response: any) {\n    super(response);\n    this.storageName = this.getResponseProperty(\"StorageName\");\n    this.storageGb = this.getResponseProperty(\"StorageGb\");\n    this.maxStorageGb = this.getResponseProperty(\"MaxStorageGb\");\n    this.license = this.getResponseProperty(\"License\");\n    this.expiration = this.getResponseProperty(\"Expiration\");\n    const subscription = this.getResponseProperty(\"Subscription\");\n    const upcomingInvoice = this.getResponseProperty(\"UpcomingInvoice\");\n    this.subscription = subscription == null ? null : new BillingSubscriptionResponse(subscription);\n    this.upcomingInvoice =\n      upcomingInvoice == null\n        ? null\n        : new BillingSubscriptionUpcomingInvoiceResponse(upcomingInvoice);\n  }\n}\n\nexport class BillingSubscriptionResponse extends BaseResponse {\n  trialStartDate: string;\n  trialEndDate: string;\n  periodStartDate: string;\n  periodEndDate: string;\n  cancelledDate: string;\n  cancelAtEndDate: boolean;\n  status: string;\n  cancelled: boolean;\n  items: BillingSubscriptionItemResponse[] = [];\n  collectionMethod: string;\n  suspensionDate?: string;\n  unpaidPeriodEndDate?: string;\n  gracePeriod?: number;\n\n  constructor(response: any) {\n    super(response);\n    this.trialStartDate = this.getResponseProperty(\"TrialStartDate\");\n    this.trialEndDate = this.getResponseProperty(\"TrialEndDate\");\n    this.periodStartDate = this.getResponseProperty(\"PeriodStartDate\");\n    this.periodEndDate = this.getResponseProperty(\"PeriodEndDate\");\n    this.cancelledDate = this.getResponseProperty(\"CancelledDate\");\n    this.cancelAtEndDate = this.getResponseProperty(\"CancelAtEndDate\");\n    this.status = this.getResponseProperty(\"Status\");\n    this.cancelled = this.getResponseProperty(\"Cancelled\");\n    const items = this.getResponseProperty(\"Items\");\n    if (items != null) {\n      this.items = items.map((i: any) => new BillingSubscriptionItemResponse(i));\n    }\n    this.collectionMethod = this.getResponseProperty(\"CollectionMethod\");\n    this.suspensionDate = this.getResponseProperty(\"SuspensionDate\");\n    this.unpaidPeriodEndDate = this.getResponseProperty(\"unpaidPeriodEndDate\");\n    this.gracePeriod = this.getResponseProperty(\"GracePeriod\");\n  }\n}\n\nexport class BillingSubscriptionItemResponse extends BaseResponse {\n  productId: string;\n  name: string;\n  amount: number;\n  quantity: number;\n  interval: string;\n  sponsoredSubscriptionItem: boolean;\n  addonSubscriptionItem: boolean;\n  productName: string;\n\n  constructor(response: any) {\n    super(response);\n    this.productId = this.getResponseProperty(\"ProductId\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.amount = this.getResponseProperty(\"Amount\");\n    this.quantity = this.getResponseProperty(\"Quantity\");\n    this.interval = this.getResponseProperty(\"Interval\");\n    this.sponsoredSubscriptionItem = this.getResponseProperty(\"SponsoredSubscriptionItem\");\n    this.addonSubscriptionItem = this.getResponseProperty(\"AddonSubscriptionItem\");\n  }\n}\n\nexport class BillingSubscriptionUpcomingInvoiceResponse extends BaseResponse {\n  date: string;\n  amount?: number;\n\n  constructor(response: any) {\n    super(response);\n    this.date = this.getResponseProperty(\"Date\");\n    this.amount = this.getResponseProperty(\"Amount\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TaxInfoResponse extends BaseResponse {\n  taxId: string;\n  taxIdType: string;\n  line1: string;\n  line2: string;\n  city: string;\n  state: string;\n  country: string;\n  postalCode: string;\n\n  constructor(response: any) {\n    super(response);\n    this.taxId = this.getResponseProperty(\"TaxIdNumber\");\n    if (!this.taxId) {\n      this.taxId = this.getResponseProperty(\"TaxId\");\n    }\n    this.taxIdType = this.getResponseProperty(\"TaxIdType\");\n    this.line1 = this.getResponseProperty(\"Line1\");\n    this.line2 = this.getResponseProperty(\"Line2\");\n    this.city = this.getResponseProperty(\"City\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.country = this.getResponseProperty(\"Country\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class TaxRateResponse extends BaseResponse {\n  id: string;\n  country: string;\n  state: string;\n  postalCode: string;\n  rate: number;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.country = this.getResponseProperty(\"Country\");\n    this.state = this.getResponseProperty(\"State\");\n    this.postalCode = this.getResponseProperty(\"PostalCode\");\n    this.rate = this.getResponseProperty(\"Rate\");\n  }\n}\n","export class CollectionBulkDeleteRequest {\n  ids: string[];\n\n  constructor(ids: string[]) {\n    this.ids = ids == null ? [] : ids;\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class BreachAccountResponse extends BaseResponse {\n  addedDate: string;\n  breachDate: string;\n  dataClasses: string[];\n  description: string;\n  domain: string;\n  isActive: boolean;\n  isVerified: boolean;\n  logoPath: string;\n  modifiedDate: string;\n  name: string;\n  pwnCount: number;\n  title: string;\n\n  constructor(response: any) {\n    super(response);\n    this.addedDate = this.getResponseProperty(\"AddedDate\");\n    this.breachDate = this.getResponseProperty(\"BreachDate\");\n    this.dataClasses = this.getResponseProperty(\"DataClasses\");\n    this.description = this.getResponseProperty(\"Description\");\n    this.domain = this.getResponseProperty(\"Domain\");\n    this.isActive = this.getResponseProperty(\"IsActive\");\n    this.isVerified = this.getResponseProperty(\"IsVerified\");\n    this.logoPath = this.getResponseProperty(\"LogoPath\");\n    this.modifiedDate = this.getResponseProperty(\"ModifiedDate\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.pwnCount = this.getResponseProperty(\"PwnCount\");\n    this.title = this.getResponseProperty(\"Title\");\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class GlobalDomainResponse extends BaseResponse {\n  type: number;\n  domains: string[];\n  excluded: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.domains = this.getResponseProperty(\"Domains\");\n    this.excluded = this.getResponseProperty(\"Excluded\");\n  }\n}\n","import { BaseResponse } from \"./base.response\";\nimport { GlobalDomainResponse } from \"./global-domain.response\";\n\nexport class DomainsResponse extends BaseResponse {\n  equivalentDomains: string[][];\n  globalEquivalentDomains: GlobalDomainResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n    this.equivalentDomains = this.getResponseProperty(\"EquivalentDomains\");\n    const globalEquivalentDomains = this.getResponseProperty(\"GlobalEquivalentDomains\");\n    if (globalEquivalentDomains != null) {\n      this.globalEquivalentDomains = globalEquivalentDomains.map(\n        (d: any) => new GlobalDomainResponse(d),\n      );\n    } else {\n      this.globalEquivalentDomains = [];\n    }\n  }\n}\n","import { DeviceType, EventSystemUser, EventType } from \"../../enums\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class EventResponse extends BaseResponse {\n  type: EventType;\n  userId: string;\n  organizationId: string;\n  providerId: string;\n  cipherId: string;\n  collectionId: string;\n  groupId: string;\n  policyId: string;\n  organizationUserId: string;\n  providerUserId: string;\n  providerOrganizationId: string;\n  actingUserId: string;\n  date: string;\n  deviceType: DeviceType;\n  ipAddress: string;\n  installationId: string;\n  systemUser: EventSystemUser;\n  domainName: string;\n  secretId: string;\n  serviceAccountId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.type = this.getResponseProperty(\"Type\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.providerId = this.getResponseProperty(\"ProviderId\");\n    this.cipherId = this.getResponseProperty(\"CipherId\");\n    this.collectionId = this.getResponseProperty(\"CollectionId\");\n    this.groupId = this.getResponseProperty(\"GroupId\");\n    this.policyId = this.getResponseProperty(\"PolicyId\");\n    this.organizationUserId = this.getResponseProperty(\"OrganizationUserId\");\n    this.providerUserId = this.getResponseProperty(\"ProviderUserId\");\n    this.providerOrganizationId = this.getResponseProperty(\"ProviderOrganizationId\");\n    this.actingUserId = this.getResponseProperty(\"ActingUserId\");\n    this.date = this.getResponseProperty(\"Date\");\n    this.deviceType = this.getResponseProperty(\"DeviceType\");\n    this.ipAddress = this.getResponseProperty(\"IpAddress\");\n    this.installationId = this.getResponseProperty(\"InstallationId\");\n    this.systemUser = this.getResponseProperty(\"SystemUser\");\n    this.domainName = this.getResponseProperty(\"DomainName\");\n    this.secretId = this.getResponseProperty(\"SecretId\");\n    this.serviceAccountId = this.getResponseProperty(\"ServiceAccountId\");\n  }\n}\n","import { BaseResponse } from \"./base.response\";\n\nexport class UserKeyResponse extends BaseResponse {\n  userId: string;\n  publicKey: string;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.publicKey = this.getResponseProperty(\"PublicKey\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class SendFileApi extends BaseResponse {\n  id: string;\n  fileName: string;\n  size: string;\n  sizeName: string;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.id = this.getResponseProperty(\"Id\");\n    this.fileName = this.getResponseProperty(\"FileName\");\n    this.size = this.getResponseProperty(\"Size\");\n    this.sizeName = this.getResponseProperty(\"SizeName\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class SendTextApi extends BaseResponse {\n  text: string;\n  hidden: boolean;\n\n  constructor(data: any = null) {\n    super(data);\n    if (data == null) {\n      return;\n    }\n    this.text = this.getResponseProperty(\"Text\");\n    this.hidden = this.getResponseProperty(\"Hidden\") || false;\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { SendType } from \"../../enums/send-type\";\nimport { SendFileApi } from \"../api/send-file.api\";\nimport { SendTextApi } from \"../api/send-text.api\";\n\nexport class SendResponse extends BaseResponse {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: string;\n  notes: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  key: string;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: string;\n  expirationDate: string;\n  deletionDate: string;\n  password: string;\n  disable: boolean;\n  hideEmail: boolean;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.accessId = this.getResponseProperty(\"AccessId\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.notes = this.getResponseProperty(\"Notes\");\n    this.key = this.getResponseProperty(\"Key\");\n    this.maxAccessCount = this.getResponseProperty(\"MaxAccessCount\");\n    this.accessCount = this.getResponseProperty(\"AccessCount\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.deletionDate = this.getResponseProperty(\"DeletionDate\");\n    this.password = this.getResponseProperty(\"Password\");\n    this.disable = this.getResponseProperty(\"Disabled\") || false;\n    this.hideEmail = this.getResponseProperty(\"HideEmail\") || false;\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nexport class FolderResponse extends BaseResponse {\n  id: string;\n  name: string;\n  revisionDate: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.name = this.getResponseProperty(\"Name\");\n    this.revisionDate = this.getResponseProperty(\"RevisionDate\");\n  }\n}\n","import { PolicyResponse } from \"../../admin-console/models/response/policy.response\";\nimport { BaseResponse } from \"../../models/response/base.response\";\nimport { DomainsResponse } from \"../../models/response/domains.response\";\nimport { ProfileResponse } from \"../../models/response/profile.response\";\nimport { SendResponse } from \"../../tools/send/models/response/send.response\";\nimport { CipherResponse } from \"../../vault/models/response/cipher.response\";\nimport { CollectionDetailsResponse } from \"../../vault/models/response/collection.response\";\nimport { FolderResponse } from \"../../vault/models/response/folder.response\";\n\nexport class SyncResponse extends BaseResponse {\n  profile?: ProfileResponse;\n  folders: FolderResponse[] = [];\n  collections: CollectionDetailsResponse[] = [];\n  ciphers: CipherResponse[] = [];\n  domains?: DomainsResponse;\n  policies?: PolicyResponse[] = [];\n  sends: SendResponse[] = [];\n\n  constructor(response: any) {\n    super(response);\n\n    const profile = this.getResponseProperty(\"Profile\");\n    if (profile != null) {\n      this.profile = new ProfileResponse(profile);\n    }\n\n    const folders = this.getResponseProperty(\"Folders\");\n    if (folders != null) {\n      this.folders = folders.map((f: any) => new FolderResponse(f));\n    }\n\n    const collections = this.getResponseProperty(\"Collections\");\n    if (collections != null) {\n      this.collections = collections.map((c: any) => new CollectionDetailsResponse(c));\n    }\n\n    const ciphers = this.getResponseProperty(\"Ciphers\");\n    if (ciphers != null) {\n      this.ciphers = ciphers.map((c: any) => new CipherResponse(c));\n    }\n\n    const domains = this.getResponseProperty(\"Domains\");\n    if (domains != null) {\n      this.domains = new DomainsResponse(domains);\n    }\n\n    const policies = this.getResponseProperty(\"Policies\");\n    if (policies != null) {\n      this.policies = policies.map((p: any) => new PolicyResponse(p));\n    }\n\n    const sends = this.getResponseProperty(\"Sends\");\n    if (sends != null) {\n      this.sends = sends.map((s: any) => new SendResponse(s));\n    }\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\nimport { FileUploadType } from \"../../../platform/enums\";\n\nimport { CipherResponse } from \"./cipher.response\";\n\nexport class AttachmentUploadDataResponse extends BaseResponse {\n  attachmentId: string;\n  fileUploadType: FileUploadType;\n  cipherResponse: CipherResponse;\n  cipherMiniResponse: CipherResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.attachmentId = this.getResponseProperty(\"AttachmentId\");\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const cipherResponse = this.getResponseProperty(\"CipherResponse\");\n    const cipherMiniResponse = this.getResponseProperty(\"CipherMiniResponse\");\n    this.cipherResponse = cipherResponse == null ? null : new CipherResponse(cipherResponse);\n    this.cipherMiniResponse =\n      cipherMiniResponse == null ? null : new CipherResponse(cipherMiniResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"../../../models/response/base.response\";\n\nimport { CipherResponse } from \"./cipher.response\";\n\nexport class OptionalCipherResponse extends BaseResponse {\n  unavailable: boolean;\n  cipher?: CipherResponse;\n\n  constructor(response: any) {\n    super(response);\n    this.unavailable = this.getResponseProperty(\"Unavailable\");\n    this.cipher = new CipherResponse(this.getResponseProperty(\"Cipher\"));\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { LogoutReason } from \"@bitwarden/auth/common\";\n\nimport { ApiService as ApiServiceAbstraction } from \"../abstractions/api.service\";\nimport { VaultTimeoutSettingsService } from \"../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { OrganizationConnectionType } from \"../admin-console/enums\";\nimport { OrganizationSponsorshipCreateRequest } from \"../admin-console/models/request/organization/organization-sponsorship-create.request\";\nimport { OrganizationSponsorshipRedeemRequest } from \"../admin-console/models/request/organization/organization-sponsorship-redeem.request\";\nimport { OrganizationConnectionRequest } from \"../admin-console/models/request/organization-connection.request\";\nimport { ProviderAddOrganizationRequest } from \"../admin-console/models/request/provider/provider-add-organization.request\";\nimport { ProviderOrganizationCreateRequest } from \"../admin-console/models/request/provider/provider-organization-create.request\";\nimport { ProviderUserAcceptRequest } from \"../admin-console/models/request/provider/provider-user-accept.request\";\nimport { ProviderUserBulkConfirmRequest } from \"../admin-console/models/request/provider/provider-user-bulk-confirm.request\";\nimport { ProviderUserBulkRequest } from \"../admin-console/models/request/provider/provider-user-bulk.request\";\nimport { ProviderUserConfirmRequest } from \"../admin-console/models/request/provider/provider-user-confirm.request\";\nimport { ProviderUserInviteRequest } from \"../admin-console/models/request/provider/provider-user-invite.request\";\nimport { ProviderUserUpdateRequest } from \"../admin-console/models/request/provider/provider-user-update.request\";\nimport { SelectionReadOnlyRequest } from \"../admin-console/models/request/selection-read-only.request\";\nimport {\n  OrganizationConnectionConfigApis,\n  OrganizationConnectionResponse,\n} from \"../admin-console/models/response/organization-connection.response\";\nimport { OrganizationExportResponse } from \"../admin-console/models/response/organization-export.response\";\nimport { OrganizationSponsorshipSyncStatusResponse } from \"../admin-console/models/response/organization-sponsorship-sync-status.response\";\nimport {\n  ProviderOrganizationOrganizationDetailsResponse,\n  ProviderOrganizationResponse,\n} from \"../admin-console/models/response/provider/provider-organization.response\";\nimport { ProviderUserBulkPublicKeyResponse } from \"../admin-console/models/response/provider/provider-user-bulk-public-key.response\";\nimport { ProviderUserBulkResponse } from \"../admin-console/models/response/provider/provider-user-bulk.response\";\nimport {\n  ProviderUserResponse,\n  ProviderUserUserDetailsResponse,\n} from \"../admin-console/models/response/provider/provider-user.response\";\nimport { SelectionReadOnlyResponse } from \"../admin-console/models/response/selection-read-only.response\";\nimport { TokenService } from \"../auth/abstractions/token.service\";\nimport { CreateAuthRequest } from \"../auth/models/request/create-auth.request\";\nimport { DeviceVerificationRequest } from \"../auth/models/request/device-verification.request\";\nimport { DisableTwoFactorAuthenticatorRequest } from \"../auth/models/request/disable-two-factor-authenticator.request\";\nimport { EmailTokenRequest } from \"../auth/models/request/email-token.request\";\nimport { EmailRequest } from \"../auth/models/request/email.request\";\nimport { DeviceRequest } from \"../auth/models/request/identity-token/device.request\";\nimport { PasswordTokenRequest } from \"../auth/models/request/identity-token/password-token.request\";\nimport { SsoTokenRequest } from \"../auth/models/request/identity-token/sso-token.request\";\nimport { TokenTwoFactorRequest } from \"../auth/models/request/identity-token/token-two-factor.request\";\nimport { UserApiTokenRequest } from \"../auth/models/request/identity-token/user-api-token.request\";\nimport { WebAuthnLoginTokenRequest } from \"../auth/models/request/identity-token/webauthn-login-token.request\";\nimport { KeyConnectorUserKeyRequest } from \"../auth/models/request/key-connector-user-key.request\";\nimport { PasswordHintRequest } from \"../auth/models/request/password-hint.request\";\nimport { PasswordRequest } from \"../auth/models/request/password.request\";\nimport { PasswordlessAuthRequest } from \"../auth/models/request/passwordless-auth.request\";\nimport { SecretVerificationRequest } from \"../auth/models/request/secret-verification.request\";\nimport { SetKeyConnectorKeyRequest } from \"../auth/models/request/set-key-connector-key.request\";\nimport { SetPasswordRequest } from \"../auth/models/request/set-password.request\";\nimport { TwoFactorEmailRequest } from \"../auth/models/request/two-factor-email.request\";\nimport { TwoFactorProviderRequest } from \"../auth/models/request/two-factor-provider.request\";\nimport { TwoFactorRecoveryRequest } from \"../auth/models/request/two-factor-recovery.request\";\nimport { UpdateProfileRequest } from \"../auth/models/request/update-profile.request\";\nimport { UpdateTdeOffboardingPasswordRequest } from \"../auth/models/request/update-tde-offboarding-password.request\";\nimport { UpdateTempPasswordRequest } from \"../auth/models/request/update-temp-password.request\";\nimport { UpdateTwoFactorAuthenticatorRequest } from \"../auth/models/request/update-two-factor-authenticator.request\";\nimport { UpdateTwoFactorDuoRequest } from \"../auth/models/request/update-two-factor-duo.request\";\nimport { UpdateTwoFactorEmailRequest } from \"../auth/models/request/update-two-factor-email.request\";\nimport { UpdateTwoFactorWebAuthnDeleteRequest } from \"../auth/models/request/update-two-factor-web-authn-delete.request\";\nimport { UpdateTwoFactorWebAuthnRequest } from \"../auth/models/request/update-two-factor-web-authn.request\";\nimport { UpdateTwoFactorYubikeyOtpRequest } from \"../auth/models/request/update-two-factor-yubikey-otp.request\";\nimport { ApiKeyResponse } from \"../auth/models/response/api-key.response\";\nimport { AuthRequestResponse } from \"../auth/models/response/auth-request.response\";\nimport { DeviceVerificationResponse } from \"../auth/models/response/device-verification.response\";\nimport { IdentityCaptchaResponse } from \"../auth/models/response/identity-captcha.response\";\nimport { IdentityTokenResponse } from \"../auth/models/response/identity-token.response\";\nimport { IdentityTwoFactorResponse } from \"../auth/models/response/identity-two-factor.response\";\nimport { KeyConnectorUserKeyResponse } from \"../auth/models/response/key-connector-user-key.response\";\nimport { PreloginResponse } from \"../auth/models/response/prelogin.response\";\nimport { RegisterResponse } from \"../auth/models/response/register.response\";\nimport { SsoPreValidateResponse } from \"../auth/models/response/sso-pre-validate.response\";\nimport { TwoFactorAuthenticatorResponse } from \"../auth/models/response/two-factor-authenticator.response\";\nimport { TwoFactorDuoResponse } from \"../auth/models/response/two-factor-duo.response\";\nimport { TwoFactorEmailResponse } from \"../auth/models/response/two-factor-email.response\";\nimport { TwoFactorProviderResponse } from \"../auth/models/response/two-factor-provider.response\";\nimport { TwoFactorRecoverResponse } from \"../auth/models/response/two-factor-recover.response\";\nimport {\n  ChallengeResponse,\n  TwoFactorWebAuthnResponse,\n} from \"../auth/models/response/two-factor-web-authn.response\";\nimport { TwoFactorYubiKeyResponse } from \"../auth/models/response/two-factor-yubi-key.response\";\nimport { BitPayInvoiceRequest } from \"../billing/models/request/bit-pay-invoice.request\";\nimport { PaymentRequest } from \"../billing/models/request/payment.request\";\nimport { TaxInfoUpdateRequest } from \"../billing/models/request/tax-info-update.request\";\nimport { BillingHistoryResponse } from \"../billing/models/response/billing-history.response\";\nimport { BillingPaymentResponse } from \"../billing/models/response/billing-payment.response\";\nimport { PaymentResponse } from \"../billing/models/response/payment.response\";\nimport { PlanResponse } from \"../billing/models/response/plan.response\";\nimport { SubscriptionResponse } from \"../billing/models/response/subscription.response\";\nimport { TaxInfoResponse } from \"../billing/models/response/tax-info.response\";\nimport { TaxRateResponse } from \"../billing/models/response/tax-rate.response\";\nimport { DeviceType } from \"../enums\";\nimport { VaultTimeoutAction } from \"../enums/vault-timeout-action.enum\";\nimport { CollectionBulkDeleteRequest } from \"../models/request/collection-bulk-delete.request\";\nimport { DeleteRecoverRequest } from \"../models/request/delete-recover.request\";\nimport { EventRequest } from \"../models/request/event.request\";\nimport { KdfRequest } from \"../models/request/kdf.request\";\nimport { KeysRequest } from \"../models/request/keys.request\";\nimport { PreloginRequest } from \"../models/request/prelogin.request\";\nimport { RegisterRequest } from \"../models/request/register.request\";\nimport { StorageRequest } from \"../models/request/storage.request\";\nimport { UpdateAvatarRequest } from \"../models/request/update-avatar.request\";\nimport { UpdateDomainsRequest } from \"../models/request/update-domains.request\";\nimport { VerifyDeleteRecoverRequest } from \"../models/request/verify-delete-recover.request\";\nimport { VerifyEmailRequest } from \"../models/request/verify-email.request\";\nimport { BreachAccountResponse } from \"../models/response/breach-account.response\";\nimport { DomainsResponse } from \"../models/response/domains.response\";\nimport { ErrorResponse } from \"../models/response/error.response\";\nimport { EventResponse } from \"../models/response/event.response\";\nimport { ListResponse } from \"../models/response/list.response\";\nimport { ProfileResponse } from \"../models/response/profile.response\";\nimport { UserKeyResponse } from \"../models/response/user-key.response\";\nimport { AppIdService } from \"../platform/abstractions/app-id.service\";\nimport { EnvironmentService } from \"../platform/abstractions/environment.service\";\nimport { LogService } from \"../platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"../platform/abstractions/platform-utils.service\";\nimport { Utils } from \"../platform/misc/utils\";\nimport { SyncResponse } from \"../platform/sync\";\nimport { UserId } from \"../types/guid\";\nimport { AttachmentRequest } from \"../vault/models/request/attachment.request\";\nimport { CipherBulkDeleteRequest } from \"../vault/models/request/cipher-bulk-delete.request\";\nimport { CipherBulkMoveRequest } from \"../vault/models/request/cipher-bulk-move.request\";\nimport { CipherBulkRestoreRequest } from \"../vault/models/request/cipher-bulk-restore.request\";\nimport { CipherBulkShareRequest } from \"../vault/models/request/cipher-bulk-share.request\";\nimport { CipherCollectionsRequest } from \"../vault/models/request/cipher-collections.request\";\nimport { CipherCreateRequest } from \"../vault/models/request/cipher-create.request\";\nimport { CipherPartialRequest } from \"../vault/models/request/cipher-partial.request\";\nimport { CipherShareRequest } from \"../vault/models/request/cipher-share.request\";\nimport { CipherRequest } from \"../vault/models/request/cipher.request\";\nimport { CollectionRequest } from \"../vault/models/request/collection.request\";\nimport { AttachmentUploadDataResponse } from \"../vault/models/response/attachment-upload-data.response\";\nimport { AttachmentResponse } from \"../vault/models/response/attachment.response\";\nimport { CipherResponse } from \"../vault/models/response/cipher.response\";\nimport {\n  CollectionAccessDetailsResponse,\n  CollectionDetailsResponse,\n  CollectionResponse,\n} from \"../vault/models/response/collection.response\";\nimport { OptionalCipherResponse } from \"../vault/models/response/optional-cipher.response\";\n\n/**\n * @deprecated The `ApiService` class is deprecated and calls should be extracted into individual\n * api services. The `send` method is still allowed to be used within api services. For background\n * of this decision please read https://contributing.bitwarden.com/architecture/adr/refactor-api-service.\n */\nexport class ApiService implements ApiServiceAbstraction {\n  private device: DeviceType;\n  private deviceType: string;\n  private isWebClient = false;\n  private isDesktopClient = false;\n\n  constructor(\n    private tokenService: TokenService,\n    private platformUtilsService: PlatformUtilsService,\n    private environmentService: EnvironmentService,\n    private appIdService: AppIdService,\n    private refreshAccessTokenErrorCallback: () => void,\n    private logService: LogService,\n    private logoutCallback: (logoutReason: LogoutReason) => Promise<void>,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsService,\n    private customUserAgent: string = null,\n  ) {\n    this.device = platformUtilsService.getDevice();\n    this.deviceType = this.device.toString();\n    this.isWebClient =\n      this.device === DeviceType.IEBrowser ||\n      this.device === DeviceType.ChromeBrowser ||\n      this.device === DeviceType.EdgeBrowser ||\n      this.device === DeviceType.FirefoxBrowser ||\n      this.device === DeviceType.OperaBrowser ||\n      this.device === DeviceType.SafariBrowser ||\n      this.device === DeviceType.UnknownBrowser ||\n      this.device === DeviceType.VivaldiBrowser;\n    this.isDesktopClient =\n      this.device === DeviceType.WindowsDesktop ||\n      this.device === DeviceType.MacOsDesktop ||\n      this.device === DeviceType.LinuxDesktop ||\n      this.device === DeviceType.WindowsCLI ||\n      this.device === DeviceType.MacOsCLI ||\n      this.device === DeviceType.LinuxCLI;\n  }\n\n  // Auth APIs\n\n  async postIdentityToken(\n    request:\n      | UserApiTokenRequest\n      | PasswordTokenRequest\n      | SsoTokenRequest\n      | WebAuthnLoginTokenRequest,\n  ): Promise<IdentityTokenResponse | IdentityTwoFactorResponse | IdentityCaptchaResponse> {\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    request.alterIdentityTokenHeaders(headers);\n\n    const identityToken =\n      request instanceof UserApiTokenRequest\n        ? request.toIdentityToken()\n        : request.toIdentityToken(this.platformUtilsService.getClientType());\n\n    const env = await firstValueFrom(this.environmentService.environment$);\n\n    const response = await this.fetch(\n      new Request(env.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify(identityToken),\n        credentials: await this.getCredentials(),\n        cache: \"no-store\",\n        headers: headers,\n        method: \"POST\",\n      }),\n    );\n\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    }\n\n    if (responseJson != null) {\n      if (response.status === 200) {\n        return new IdentityTokenResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.TwoFactorProviders2 &&\n        Object.keys(responseJson.TwoFactorProviders2).length\n      ) {\n        return new IdentityTwoFactorResponse(responseJson);\n      } else if (\n        response.status === 400 &&\n        responseJson.HCaptcha_SiteKey &&\n        Object.keys(responseJson.HCaptcha_SiteKey).length\n      ) {\n        return new IdentityCaptchaResponse(responseJson);\n      }\n    }\n\n    return Promise.reject(new ErrorResponse(responseJson, response.status, true));\n  }\n\n  async refreshIdentityToken(): Promise<any> {\n    try {\n      await this.refreshToken();\n    } catch (e) {\n      this.logService.error(\"Error refreshing access token: \", e);\n      throw e;\n    }\n  }\n\n  // TODO: PM-3519: Create and move to AuthRequest Api service\n  async postAuthRequest(request: CreateAuthRequest): Promise<AuthRequestResponse> {\n    const r = await this.send(\"POST\", \"/auth-requests/\", request, false, true);\n    return new AuthRequestResponse(r);\n  }\n  async postAdminAuthRequest(request: CreateAuthRequest): Promise<AuthRequestResponse> {\n    const r = await this.send(\"POST\", \"/auth-requests/admin-request\", request, true, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async getAuthResponse(id: string, accessCode: string): Promise<AuthRequestResponse> {\n    const path = `/auth-requests/${id}/response?code=${accessCode}`;\n    const r = await this.send(\"GET\", path, null, false, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async getAuthRequest(id: string): Promise<AuthRequestResponse> {\n    const path = `/auth-requests/${id}`;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async putAuthRequest(id: string, request: PasswordlessAuthRequest): Promise<AuthRequestResponse> {\n    const path = `/auth-requests/${id}`;\n    const r = await this.send(\"PUT\", path, request, true, true);\n    return new AuthRequestResponse(r);\n  }\n\n  async getAuthRequests(): Promise<ListResponse<AuthRequestResponse>> {\n    const path = `/auth-requests/`;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new ListResponse(r, AuthRequestResponse);\n  }\n\n  async getLastAuthRequest(): Promise<AuthRequestResponse> {\n    const requests = await this.getAuthRequests();\n    const activeRequests = requests.data.filter((m) => !m.isAnswered && !m.isExpired);\n    const lastRequest = activeRequests.sort((a: AuthRequestResponse, b: AuthRequestResponse) =>\n      a.creationDate.localeCompare(b.creationDate),\n    )[activeRequests.length - 1];\n    return lastRequest;\n  }\n\n  // Account APIs\n\n  async getProfile(): Promise<ProfileResponse> {\n    const r = await this.send(\"GET\", \"/accounts/profile\", null, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async getUserSubscription(): Promise<SubscriptionResponse> {\n    const r = await this.send(\"GET\", \"/accounts/subscription\", null, true, true);\n    return new SubscriptionResponse(r);\n  }\n\n  async getTaxInfo(): Promise<TaxInfoResponse> {\n    const r = await this.send(\"GET\", \"/accounts/tax\", null, true, true);\n    return new TaxInfoResponse(r);\n  }\n\n  async putProfile(request: UpdateProfileRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/profile\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  async putAvatar(request: UpdateAvatarRequest): Promise<ProfileResponse> {\n    const r = await this.send(\"PUT\", \"/accounts/avatar\", request, true, true);\n    return new ProfileResponse(r);\n  }\n\n  putTaxInfo(request: TaxInfoUpdateRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/tax\", request, true, false);\n  }\n\n  async postPrelogin(request: PreloginRequest): Promise<PreloginResponse> {\n    const env = await firstValueFrom(this.environmentService.environment$);\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/prelogin\",\n      request,\n      false,\n      true,\n      env.getIdentityUrl(),\n    );\n    return new PreloginResponse(r);\n  }\n\n  postEmailToken(request: EmailTokenRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email-token\", request, true, false);\n  }\n\n  postEmail(request: EmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/email\", request, true, false);\n  }\n\n  postPassword(request: PasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password\", request, true, false);\n  }\n\n  setPassword(request: SetPasswordRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-password\", request, true, false);\n  }\n\n  postSetKeyConnectorKey(request: SetKeyConnectorKeyRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/set-key-connector-key\", request, true, false);\n  }\n\n  postSecurityStamp(request: SecretVerificationRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/security-stamp\", request, true, false);\n  }\n\n  async getAccountRevisionDate(): Promise<number> {\n    const r = await this.send(\"GET\", \"/accounts/revision-date\", null, true, true);\n    return r as number;\n  }\n\n  postPasswordHint(request: PasswordHintRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/password-hint\", request, false, false);\n  }\n\n  async postRegister(request: RegisterRequest): Promise<RegisterResponse> {\n    const env = await firstValueFrom(this.environmentService.environment$);\n    const r = await this.send(\n      \"POST\",\n      \"/accounts/register\",\n      request,\n      false,\n      true,\n      env.getIdentityUrl(),\n    );\n    return new RegisterResponse(r);\n  }\n\n  async postPremium(data: FormData): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/premium\", data, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postReinstatePremium(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/reinstate-premium\", null, true, false);\n  }\n\n  async postAccountStorage(request: StorageRequest): Promise<PaymentResponse> {\n    const r = await this.send(\"POST\", \"/accounts/storage\", request, true, true);\n    return new PaymentResponse(r);\n  }\n\n  postAccountPayment(request: PaymentRequest): Promise<void> {\n    return this.send(\"POST\", \"/accounts/payment\", request, true, false);\n  }\n\n  postAccountLicense(data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/accounts/license\", data, true, false);\n  }\n\n  postAccountKeys(request: KeysRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/keys\", request, true, false);\n  }\n\n  postAccountVerifyEmail(): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email\", null, true, false);\n  }\n\n  postAccountVerifyEmailToken(request: VerifyEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/verify-email-token\", request, false, false);\n  }\n\n  postAccountRecoverDelete(request: DeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover\", request, false, false);\n  }\n\n  postAccountRecoverDeleteToken(request: VerifyDeleteRecoverRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/delete-recover-token\", request, false, false);\n  }\n\n  postAccountKdf(request: KdfRequest): Promise<any> {\n    return this.send(\"POST\", \"/accounts/kdf\", request, true, false);\n  }\n\n  async deleteSsoUser(organizationId: string): Promise<void> {\n    return this.send(\"DELETE\", \"/accounts/sso/\" + organizationId, null, true, false);\n  }\n\n  async getSsoUserIdentifier(): Promise<string> {\n    return this.send(\"GET\", \"/accounts/sso/user-identifier\", null, true, true);\n  }\n\n  async postUserApiKey(id: string, request: SecretVerificationRequest): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  async postUserRotateApiKey(\n    id: string,\n    request: SecretVerificationRequest,\n  ): Promise<ApiKeyResponse> {\n    const r = await this.send(\"POST\", \"/accounts/rotate-api-key\", request, true, true);\n    return new ApiKeyResponse(r);\n  }\n\n  putUpdateTempPassword(request: UpdateTempPasswordRequest): Promise<any> {\n    return this.send(\"PUT\", \"/accounts/update-temp-password\", request, true, false);\n  }\n\n  putUpdateTdeOffboardingPassword(request: UpdateTdeOffboardingPasswordRequest): Promise<void> {\n    return this.send(\"PUT\", \"/accounts/update-tde-offboarding-password\", request, true, false);\n  }\n\n  postConvertToKeyConnector(): Promise<void> {\n    return this.send(\"POST\", \"/accounts/convert-to-key-connector\", null, true, false);\n  }\n\n  // Account Billing APIs\n\n  async getUserBillingHistory(): Promise<BillingHistoryResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/history\", null, true, true);\n    return new BillingHistoryResponse(r);\n  }\n\n  async getUserBillingPayment(): Promise<BillingPaymentResponse> {\n    const r = await this.send(\"GET\", \"/accounts/billing/payment-method\", null, true, true);\n    return new BillingPaymentResponse(r);\n  }\n\n  // Cipher APIs\n\n  async getCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id, null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getFullCipherDetails(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/details\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"GET\", \"/ciphers/\" + id + \"/admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async getCiphersOrganization(organizationId: string): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/organization-details?organizationId=\" + organizationId,\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, CipherResponse);\n  }\n\n  async postCipher(request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherCreate(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/create\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async postCipherAdmin(request: CipherCreateRequest): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipher(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id, request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putPartialCipher(id: string, request: CipherPartialRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/partial\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putCipherAdmin(id: string, request: CipherRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/admin\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipher(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id, null, true, false);\n  }\n\n  deleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/admin\", null, true, false);\n  }\n\n  deleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers\", request, true, false);\n  }\n\n  deleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/admin\", request, true, false);\n  }\n\n  putMoveCiphers(request: CipherBulkMoveRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/move\", request, true, false);\n  }\n\n  async putShareCipher(id: string, request: CipherShareRequest): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/share\", request, true, true);\n    return new CipherResponse(r);\n  }\n\n  putShareCiphers(request: CipherBulkShareRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/share\", request, true, false);\n  }\n\n  async putCipherCollections(\n    id: string,\n    request: CipherCollectionsRequest,\n  ): Promise<OptionalCipherResponse> {\n    const response = await this.send(\n      \"PUT\",\n      \"/ciphers/\" + id + \"/collections_v2\",\n      request,\n      true,\n      true,\n    );\n    return new OptionalCipherResponse(response);\n  }\n\n  putCipherCollectionsAdmin(id: string, request: CipherCollectionsRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/collections-admin\", request, true, false);\n  }\n\n  postPurgeCiphers(\n    request: SecretVerificationRequest,\n    organizationId: string = null,\n  ): Promise<any> {\n    let path = \"/ciphers/purge\";\n    if (organizationId != null) {\n      path += \"?organizationId=\" + organizationId;\n    }\n    return this.send(\"POST\", path, request, true, false);\n  }\n\n  putDeleteCipher(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete\", null, true, false);\n  }\n\n  putDeleteCipherAdmin(id: string): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/\" + id + \"/delete-admin\", null, true, false);\n  }\n\n  putDeleteManyCiphers(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete\", request, true, false);\n  }\n\n  putDeleteManyCiphersAdmin(request: CipherBulkDeleteRequest): Promise<any> {\n    return this.send(\"PUT\", \"/ciphers/delete-admin\", request, true, false);\n  }\n\n  async putRestoreCipher(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreCipherAdmin(id: string): Promise<CipherResponse> {\n    const r = await this.send(\"PUT\", \"/ciphers/\" + id + \"/restore-admin\", null, true, true);\n    return new CipherResponse(r);\n  }\n\n  async putRestoreManyCiphers(\n    request: CipherBulkRestoreRequest,\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  async putRestoreManyCiphersAdmin(\n    request: CipherBulkRestoreRequest,\n  ): Promise<ListResponse<CipherResponse>> {\n    const r = await this.send(\"PUT\", \"/ciphers/restore-admin\", request, true, true);\n    return new ListResponse<CipherResponse>(r, CipherResponse);\n  }\n\n  // Attachments APIs\n\n  async getAttachmentData(\n    cipherId: string,\n    attachmentId: string,\n    emergencyAccessId?: string,\n  ): Promise<AttachmentResponse> {\n    const path =\n      (emergencyAccessId != null ? \"/emergency-access/\" + emergencyAccessId + \"/\" : \"/ciphers/\") +\n      cipherId +\n      \"/attachment/\" +\n      attachmentId;\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new AttachmentResponse(r);\n  }\n\n  async postCipherAttachment(\n    id: string,\n    request: AttachmentRequest,\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/v2\", request, true, true);\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postCipherAttachmentAdminLegacy(id: string, data: FormData): Promise<CipherResponse> {\n    const r = await this.send(\"POST\", \"/ciphers/\" + id + \"/attachment-admin\", data, true, true);\n    return new CipherResponse(r);\n  }\n\n  deleteCipherAttachment(id: string, attachmentId: string): Promise<any> {\n    return this.send(\"DELETE\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, null, true, false);\n  }\n\n  deleteCipherAttachmentAdmin(id: string, attachmentId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/admin\",\n      null,\n      true,\n      false,\n    );\n  }\n\n  postShareCipherAttachment(\n    id: string,\n    attachmentId: string,\n    data: FormData,\n    organizationId: string,\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/share?organizationId=\" + organizationId,\n      data,\n      true,\n      false,\n    );\n  }\n\n  async renewAttachmentUploadUrl(\n    id: string,\n    attachmentId: string,\n  ): Promise<AttachmentUploadDataResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/ciphers/\" + id + \"/attachment/\" + attachmentId + \"/renew\",\n      null,\n      true,\n      true,\n    );\n    return new AttachmentUploadDataResponse(r);\n  }\n\n  postAttachmentFile(id: string, attachmentId: string, data: FormData): Promise<any> {\n    return this.send(\"POST\", \"/ciphers/\" + id + \"/attachment/\" + attachmentId, data, true, false);\n  }\n\n  // Collections APIs\n\n  async getCollectionAccessDetails(\n    organizationId: string,\n    id: string,\n  ): Promise<CollectionAccessDetailsResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/details\",\n      null,\n      true,\n      true,\n    );\n    return new CollectionAccessDetailsResponse(r);\n  }\n\n  async getUserCollections(): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\"GET\", \"/collections\", null, true, true);\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getCollections(organizationId: string): Promise<ListResponse<CollectionResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, CollectionResponse);\n  }\n\n  async getManyCollectionsWithAccessDetails(\n    organizationId: string,\n  ): Promise<ListResponse<CollectionAccessDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/details\",\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, CollectionAccessDetailsResponse);\n  }\n\n  async getCollectionUsers(\n    organizationId: string,\n    id: string,\n  ): Promise<SelectionReadOnlyResponse[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      null,\n      true,\n      true,\n    );\n    return r.map((dr: any) => new SelectionReadOnlyResponse(dr));\n  }\n\n  async postCollection(\n    organizationId: string,\n    request: CollectionRequest,\n  ): Promise<CollectionDetailsResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      request,\n      true,\n      true,\n    );\n    return new CollectionAccessDetailsResponse(r);\n  }\n\n  async putCollection(\n    organizationId: string,\n    id: string,\n    request: CollectionRequest,\n  ): Promise<CollectionDetailsResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      request,\n      true,\n      true,\n    );\n    return new CollectionAccessDetailsResponse(r);\n  }\n\n  async putCollectionUsers(\n    organizationId: string,\n    id: string,\n    request: SelectionReadOnlyRequest[],\n  ): Promise<any> {\n    await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/users\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  deleteCollection(organizationId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id,\n      null,\n      true,\n      false,\n    );\n  }\n\n  deleteManyCollections(organizationId: string, collectionIds: string[]): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections\",\n      new CollectionBulkDeleteRequest(collectionIds),\n      true,\n      false,\n    );\n  }\n\n  deleteCollectionUser(\n    organizationId: string,\n    id: string,\n    organizationUserId: string,\n  ): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/collections/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false,\n    );\n  }\n\n  // Groups APIs\n\n  async getGroupUsers(organizationId: string, id: string): Promise<string[]> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/users\",\n      null,\n      true,\n      true,\n    );\n    return r;\n  }\n\n  deleteGroupUser(organizationId: string, id: string, organizationUserId: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/organizations/\" + organizationId + \"/groups/\" + id + \"/user/\" + organizationUserId,\n      null,\n      true,\n      false,\n    );\n  }\n\n  // Plan APIs\n\n  async getPlans(): Promise<ListResponse<PlanResponse>> {\n    const r = await this.send(\"GET\", \"/plans\", null, false, true);\n    return new ListResponse(r, PlanResponse);\n  }\n\n  async getTaxRates(): Promise<ListResponse<TaxRateResponse>> {\n    const r = await this.send(\"GET\", \"/plans/sales-tax-rates/\", null, true, true);\n    return new ListResponse(r, TaxRateResponse);\n  }\n\n  // Settings APIs\n\n  async getSettingsDomains(): Promise<DomainsResponse> {\n    const r = await this.send(\"GET\", \"/settings/domains\", null, true, true);\n    return new DomainsResponse(r);\n  }\n\n  async putSettingsDomains(request: UpdateDomainsRequest): Promise<DomainsResponse> {\n    const r = await this.send(\"PUT\", \"/settings/domains\", request, true, true);\n    return new DomainsResponse(r);\n  }\n\n  // Sync APIs\n\n  async getSync(): Promise<SyncResponse> {\n    const path = this.isDesktopClient || this.isWebClient ? \"/sync?excludeDomains=true\" : \"/sync\";\n    const r = await this.send(\"GET\", path, null, true, true);\n    return new SyncResponse(r);\n  }\n\n  // Two-factor APIs\n\n  async getTwoFactorProviders(): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\"GET\", \"/two-factor\", null, true, true);\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorOrganizationProviders(\n    organizationId: string,\n  ): Promise<ListResponse<TwoFactorProviderResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/two-factor\",\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, TwoFactorProviderResponse);\n  }\n\n  async getTwoFactorAuthenticator(\n    request: SecretVerificationRequest,\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async getTwoFactorEmail(request: SecretVerificationRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async getTwoFactorDuo(request: SecretVerificationRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: SecretVerificationRequest,\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/organizations/\" + organizationId + \"/two-factor/get-duo\",\n      request,\n      true,\n      true,\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async getTwoFactorYubiKey(request: SecretVerificationRequest): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async getTwoFactorWebAuthn(\n    request: SecretVerificationRequest,\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async getTwoFactorWebAuthnChallenge(\n    request: SecretVerificationRequest,\n  ): Promise<ChallengeResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-webauthn-challenge\", request, true, true);\n    return new ChallengeResponse(r);\n  }\n\n  async getTwoFactorRecover(request: SecretVerificationRequest): Promise<TwoFactorRecoverResponse> {\n    const r = await this.send(\"POST\", \"/two-factor/get-recover\", request, true, true);\n    return new TwoFactorRecoverResponse(r);\n  }\n\n  async putTwoFactorAuthenticator(\n    request: UpdateTwoFactorAuthenticatorRequest,\n  ): Promise<TwoFactorAuthenticatorResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/authenticator\", request, true, true);\n    return new TwoFactorAuthenticatorResponse(r);\n  }\n\n  async deleteTwoFactorAuthenticator(\n    request: DisableTwoFactorAuthenticatorRequest,\n  ): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\"DELETE\", \"/two-factor/authenticator\", request, true, true);\n    return new TwoFactorProviderResponse(r);\n  }\n\n  async putTwoFactorEmail(request: UpdateTwoFactorEmailRequest): Promise<TwoFactorEmailResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/email\", request, true, true);\n    return new TwoFactorEmailResponse(r);\n  }\n\n  async putTwoFactorDuo(request: UpdateTwoFactorDuoRequest): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/duo\", request, true, true);\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorOrganizationDuo(\n    organizationId: string,\n    request: UpdateTwoFactorDuoRequest,\n  ): Promise<TwoFactorDuoResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/duo\",\n      request,\n      true,\n      true,\n    );\n    return new TwoFactorDuoResponse(r);\n  }\n\n  async putTwoFactorYubiKey(\n    request: UpdateTwoFactorYubikeyOtpRequest,\n  ): Promise<TwoFactorYubiKeyResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/yubikey\", request, true, true);\n    return new TwoFactorYubiKeyResponse(r);\n  }\n\n  async putTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnRequest,\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const response = request.deviceResponse.response as AuthenticatorAttestationResponse;\n    const data: any = Object.assign({}, request);\n\n    data.deviceResponse = {\n      id: request.deviceResponse.id,\n      rawId: btoa(request.deviceResponse.id),\n      type: request.deviceResponse.type,\n      extensions: request.deviceResponse.getClientExtensionResults(),\n      response: {\n        AttestationObject: Utils.fromBufferToB64(response.attestationObject),\n        clientDataJson: Utils.fromBufferToB64(response.clientDataJSON),\n      },\n    };\n\n    const r = await this.send(\"PUT\", \"/two-factor/webauthn\", data, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async deleteTwoFactorWebAuthn(\n    request: UpdateTwoFactorWebAuthnDeleteRequest,\n  ): Promise<TwoFactorWebAuthnResponse> {\n    const r = await this.send(\"DELETE\", \"/two-factor/webauthn\", request, true, true);\n    return new TwoFactorWebAuthnResponse(r);\n  }\n\n  async putTwoFactorDisable(request: TwoFactorProviderRequest): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\"PUT\", \"/two-factor/disable\", request, true, true);\n    return new TwoFactorProviderResponse(r);\n  }\n\n  async putTwoFactorOrganizationDisable(\n    organizationId: string,\n    request: TwoFactorProviderRequest,\n  ): Promise<TwoFactorProviderResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/\" + organizationId + \"/two-factor/disable\",\n      request,\n      true,\n      true,\n    );\n    return new TwoFactorProviderResponse(r);\n  }\n\n  postTwoFactorRecover(request: TwoFactorRecoveryRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/recover\", request, false, false);\n  }\n\n  postTwoFactorEmailSetup(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email\", request, true, false);\n  }\n\n  postTwoFactorEmail(request: TwoFactorEmailRequest): Promise<any> {\n    return this.send(\"POST\", \"/two-factor/send-email-login\", request, false, false);\n  }\n\n  async getDeviceVerificationSettings(): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/two-factor/get-device-verification-settings\",\n      null,\n      true,\n      true,\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  async putDeviceVerificationSettings(\n    request: DeviceVerificationRequest,\n  ): Promise<DeviceVerificationResponse> {\n    const r = await this.send(\n      \"PUT\",\n      \"/two-factor/device-verification-settings\",\n      request,\n      true,\n      true,\n    );\n    return new DeviceVerificationResponse(r);\n  }\n\n  // Organization APIs\n\n  async getCloudCommunicationsEnabled(): Promise<boolean> {\n    const r = await this.send(\"GET\", \"/organizations/connections/enabled\", null, true, true);\n    return r as boolean;\n  }\n\n  async getOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    id: string,\n    type: OrganizationConnectionType,\n    configType: { new (response: any): TConfig },\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"GET\", `/organizations/connections/${id}/${type}`, null, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async createOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig },\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\"POST\", \"/organizations/connections/\", request, true, true);\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async updateOrganizationConnection<TConfig extends OrganizationConnectionConfigApis>(\n    request: OrganizationConnectionRequest,\n    configType: { new (response: any): TConfig },\n    organizationConnectionId?: string,\n  ): Promise<OrganizationConnectionResponse<TConfig>> {\n    const r = await this.send(\n      \"PUT\",\n      \"/organizations/connections/\" + organizationConnectionId,\n      request,\n      true,\n      true,\n    );\n    return new OrganizationConnectionResponse(r, configType);\n  }\n\n  async deleteOrganizationConnection(id: string): Promise<void> {\n    return this.send(\"DELETE\", \"/organizations/connections/\" + id, null, true, false);\n  }\n\n  // Provider User APIs\n\n  async getProviderUsers(\n    providerId: string,\n  ): Promise<ListResponse<ProviderUserUserDetailsResponse>> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users\", null, true, true);\n    return new ListResponse(r, ProviderUserUserDetailsResponse);\n  }\n\n  async getProviderUser(providerId: string, id: string): Promise<ProviderUserResponse> {\n    const r = await this.send(\"GET\", \"/providers/\" + providerId + \"/users/\" + id, null, true, true);\n    return new ProviderUserResponse(r);\n  }\n\n  postProviderUserInvite(providerId: string, request: ProviderUserInviteRequest): Promise<any> {\n    return this.send(\"POST\", \"/providers/\" + providerId + \"/users/invite\", request, true, false);\n  }\n\n  postProviderUserReinvite(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/reinvite\",\n      null,\n      true,\n      false,\n    );\n  }\n\n  async postManyProviderUserReinvite(\n    providerId: string,\n    request: ProviderUserBulkRequest,\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/reinvite\",\n      request,\n      true,\n      true,\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async postProviderUserBulkConfirm(\n    providerId: string,\n    request: ProviderUserBulkConfirmRequest,\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/confirm\",\n      request,\n      true,\n      true,\n    );\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  async deleteManyProviderUsers(\n    providerId: string,\n    request: ProviderUserBulkRequest,\n  ): Promise<ListResponse<ProviderUserBulkResponse>> {\n    const r = await this.send(\"DELETE\", \"/providers/\" + providerId + \"/users\", request, true, true);\n    return new ListResponse(r, ProviderUserBulkResponse);\n  }\n\n  postProviderUserAccept(\n    providerId: string,\n    id: string,\n    request: ProviderUserAcceptRequest,\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/accept\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  postProviderUserConfirm(\n    providerId: string,\n    id: string,\n    request: ProviderUserConfirmRequest,\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/\" + id + \"/confirm\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  async postProviderUsersPublicKey(\n    providerId: string,\n    request: ProviderUserBulkRequest,\n  ): Promise<ListResponse<ProviderUserBulkPublicKeyResponse>> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/users/public-keys\",\n      request,\n      true,\n      true,\n    );\n    return new ListResponse(r, ProviderUserBulkPublicKeyResponse);\n  }\n\n  putProviderUser(\n    providerId: string,\n    id: string,\n    request: ProviderUserUpdateRequest,\n  ): Promise<any> {\n    return this.send(\"PUT\", \"/providers/\" + providerId + \"/users/\" + id, request, true, false);\n  }\n\n  deleteProviderUser(providerId: string, id: string): Promise<any> {\n    return this.send(\"DELETE\", \"/providers/\" + providerId + \"/users/\" + id, null, true, false);\n  }\n\n  // Provider Organization APIs\n\n  async getProviderClients(\n    providerId: string,\n  ): Promise<ListResponse<ProviderOrganizationOrganizationDetailsResponse>> {\n    const r = await this.send(\n      \"GET\",\n      \"/providers/\" + providerId + \"/organizations\",\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, ProviderOrganizationOrganizationDetailsResponse);\n  }\n\n  postProviderAddOrganization(\n    providerId: string,\n    request: ProviderAddOrganizationRequest,\n  ): Promise<any> {\n    return this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations/add\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  async postProviderCreateOrganization(\n    providerId: string,\n    request: ProviderOrganizationCreateRequest,\n  ): Promise<ProviderOrganizationResponse> {\n    const r = await this.send(\n      \"POST\",\n      \"/providers/\" + providerId + \"/organizations\",\n      request,\n      true,\n      true,\n    );\n    return new ProviderOrganizationResponse(r);\n  }\n\n  deleteProviderOrganization(providerId: string, id: string): Promise<any> {\n    return this.send(\n      \"DELETE\",\n      \"/providers/\" + providerId + \"/organizations/\" + id,\n      null,\n      true,\n      false,\n    );\n  }\n\n  // Event APIs\n\n  async getEvents(start: string, end: string, token: string): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/events\", start, end, token),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsCipher(\n    id: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/ciphers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganization(\n    id: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/organizations/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsOrganizationUser(\n    organizationId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/organizations/\" + organizationId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token,\n      ),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProvider(\n    id: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\"/providers/\" + id + \"/events\", start, end, token),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async getEventsProviderUser(\n    providerId: string,\n    id: string,\n    start: string,\n    end: string,\n    token: string,\n  ): Promise<ListResponse<EventResponse>> {\n    const r = await this.send(\n      \"GET\",\n      this.addEventParameters(\n        \"/providers/\" + providerId + \"/users/\" + id + \"/events\",\n        start,\n        end,\n        token,\n      ),\n      null,\n      true,\n      true,\n    );\n    return new ListResponse(r, EventResponse);\n  }\n\n  async postEventsCollect(request: EventRequest[], userId?: UserId): Promise<any> {\n    const authHeader = await this.tokenService.getAccessToken(userId);\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n      Authorization: \"Bearer \" + authHeader,\n      \"Content-Type\": \"application/json; charset=utf-8\",\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n    const env = await firstValueFrom(this.environmentService.environment$);\n    const response = await this.fetch(\n      new Request(env.getEventsUrl() + \"/collect\", {\n        cache: \"no-store\",\n        credentials: await this.getCredentials(),\n        method: \"POST\",\n        body: JSON.stringify(request),\n        headers: headers,\n      }),\n    );\n    if (response.status !== 200) {\n      return Promise.reject(\"Event post failed.\");\n    }\n  }\n\n  // User APIs\n\n  async getUserPublicKey(id: string): Promise<UserKeyResponse> {\n    const r = await this.send(\"GET\", \"/users/\" + id + \"/public-key\", null, true, true);\n    return new UserKeyResponse(r);\n  }\n\n  // HIBP APIs\n\n  async getHibpBreach(username: string): Promise<BreachAccountResponse[]> {\n    const r = await this.send(\"GET\", \"/hibp/breach?username=\" + username, null, true, true);\n    return r.map((a: any) => new BreachAccountResponse(a));\n  }\n\n  // Misc\n\n  async postBitPayInvoice(request: BitPayInvoiceRequest): Promise<string> {\n    const r = await this.send(\"POST\", \"/bitpay-invoice\", request, true, true);\n    return r as string;\n  }\n\n  async postSetupPayment(): Promise<string> {\n    const r = await this.send(\"POST\", \"/setup-payment\", null, true, true);\n    return r as string;\n  }\n\n  // Key Connector\n\n  async getMasterKeyFromKeyConnector(\n    keyConnectorUrl: string,\n  ): Promise<KeyConnectorUserKeyResponse> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n        }),\n      }),\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n\n    return new KeyConnectorUserKeyResponse(await response.json());\n  }\n\n  async postUserKeyToKeyConnector(\n    keyConnectorUrl: string,\n    request: KeyConnectorUserKeyRequest,\n  ): Promise<void> {\n    const authHeader = await this.getActiveBearerToken();\n\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/user-keys\", {\n        cache: \"no-store\",\n        method: \"POST\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          Authorization: \"Bearer \" + authHeader,\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n        body: JSON.stringify(request),\n      }),\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getKeyConnectorAlive(keyConnectorUrl: string) {\n    const response = await this.fetch(\n      new Request(keyConnectorUrl + \"/alive\", {\n        cache: \"no-store\",\n        method: \"GET\",\n        headers: new Headers({\n          Accept: \"application/json\",\n          \"Content-Type\": \"application/json; charset=utf-8\",\n        }),\n      }),\n    );\n\n    if (response.status !== 200) {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async getOrganizationExport(organizationId: string): Promise<OrganizationExportResponse> {\n    const r = await this.send(\n      \"GET\",\n      \"/organizations/\" + organizationId + \"/export\",\n      null,\n      true,\n      true,\n    );\n    return new OrganizationExportResponse(r);\n  }\n\n  // Helpers\n\n  async getActiveBearerToken(): Promise<string> {\n    let accessToken = await this.tokenService.getAccessToken();\n    if (await this.tokenService.tokenNeedsRefresh()) {\n      accessToken = await this.refreshToken();\n    }\n    return accessToken;\n  }\n\n  async fetch(request: Request): Promise<Response> {\n    if (request.method === \"GET\") {\n      request.headers.set(\"Cache-Control\", \"no-store\");\n      request.headers.set(\"Pragma\", \"no-cache\");\n    }\n    request.headers.set(\"Bitwarden-Client-Name\", this.platformUtilsService.getClientType());\n    request.headers.set(\n      \"Bitwarden-Client-Version\",\n      await this.platformUtilsService.getApplicationVersionNumber(),\n    );\n    return this.nativeFetch(request);\n  }\n\n  nativeFetch(request: Request): Promise<Response> {\n    return fetch(request);\n  }\n\n  async preValidateSso(identifier: string): Promise<SsoPreValidateResponse> {\n    if (identifier == null || identifier === \"\") {\n      throw new Error(\"Organization Identifier was not provided.\");\n    }\n    const headers = new Headers({\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const env = await firstValueFrom(this.environmentService.environment$);\n    const path = `/sso/prevalidate?domainHint=${encodeURIComponent(identifier)}`;\n    const response = await this.fetch(\n      new Request(env.getIdentityUrl() + path, {\n        cache: \"no-store\",\n        credentials: await this.getCredentials(),\n        headers: headers,\n        method: \"GET\",\n      }),\n    );\n\n    if (response.status === 200) {\n      const body = await response.json();\n      return new SsoPreValidateResponse(body);\n    } else {\n      const error = await this.handleError(response, false, true);\n      return Promise.reject(error);\n    }\n  }\n\n  async postCreateSponsorship(\n    sponsoredOrgId: string,\n    request: OrganizationSponsorshipCreateRequest,\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoredOrgId +\n        \"/families-for-enterprise\",\n      request,\n      true,\n      false,\n    );\n  }\n\n  async getSponsorshipSyncStatus(\n    sponsoredOrgId: string,\n  ): Promise<OrganizationSponsorshipSyncStatusResponse> {\n    const response = await this.send(\n      \"GET\",\n      \"/organization/sponsorship/\" + sponsoredOrgId + \"/sync-status\",\n      null,\n      true,\n      true,\n    );\n    return new OrganizationSponsorshipSyncStatusResponse(response);\n  }\n\n  async deleteRevokeSponsorship(sponsoringOrganizationId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/\" +\n        (this.platformUtilsService.isSelfHost() ? \"self-hosted/\" : \"\") +\n        sponsoringOrganizationId,\n      null,\n      true,\n      false,\n    );\n  }\n\n  async deleteRemoveSponsorship(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"DELETE\",\n      \"/organization/sponsorship/sponsored/\" + sponsoringOrgId,\n      null,\n      true,\n      false,\n    );\n  }\n\n  async postPreValidateSponsorshipToken(sponsorshipToken: string): Promise<boolean> {\n    const r = await this.send(\n      \"POST\",\n      \"/organization/sponsorship/validate-token?sponsorshipToken=\" +\n        encodeURIComponent(sponsorshipToken),\n      null,\n      true,\n      true,\n    );\n    return r as boolean;\n  }\n\n  async postRedeemSponsorship(\n    sponsorshipToken: string,\n    request: OrganizationSponsorshipRedeemRequest,\n  ): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/redeem?sponsorshipToken=\" + encodeURIComponent(sponsorshipToken),\n      request,\n      true,\n      false,\n    );\n  }\n\n  async postResendSponsorshipOffer(sponsoringOrgId: string): Promise<void> {\n    return await this.send(\n      \"POST\",\n      \"/organization/sponsorship/\" + sponsoringOrgId + \"/families-for-enterprise/resend\",\n      null,\n      true,\n      false,\n    );\n  }\n\n  protected async refreshToken(): Promise<string> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken != null && refreshToken !== \"\") {\n      return this.refreshAccessToken();\n    }\n\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n    if (!Utils.isNullOrWhitespace(clientId) && !Utils.isNullOrWhitespace(clientSecret)) {\n      return this.refreshApiToken();\n    }\n\n    this.refreshAccessTokenErrorCallback();\n\n    throw new Error(\"Cannot refresh access token, no refresh token or api keys are stored.\");\n  }\n\n  protected async refreshAccessToken(): Promise<string> {\n    const refreshToken = await this.tokenService.getRefreshToken();\n    if (refreshToken == null || refreshToken === \"\") {\n      throw new Error();\n    }\n    const headers = new Headers({\n      \"Content-Type\": \"application/x-www-form-urlencoded; charset=utf-8\",\n      Accept: \"application/json\",\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const env = await firstValueFrom(this.environmentService.environment$);\n    const decodedToken = await this.tokenService.decodeAccessToken();\n    const response = await this.fetch(\n      new Request(env.getIdentityUrl() + \"/connect/token\", {\n        body: this.qsStringify({\n          grant_type: \"refresh_token\",\n          client_id: decodedToken.client_id,\n          refresh_token: refreshToken,\n        }),\n        cache: \"no-store\",\n        credentials: await this.getCredentials(),\n        headers: headers,\n        method: \"POST\",\n      }),\n    );\n\n    if (response.status === 200) {\n      const responseJson = await response.json();\n      const tokenResponse = new IdentityTokenResponse(responseJson);\n\n      const newDecodedAccessToken = await this.tokenService.decodeAccessToken(\n        tokenResponse.accessToken,\n      );\n      const userId = newDecodedAccessToken.sub;\n\n      const vaultTimeoutAction = await firstValueFrom(\n        this.vaultTimeoutSettingsService.getVaultTimeoutActionByUserId$(userId),\n      );\n      const vaultTimeout = await firstValueFrom(\n        this.vaultTimeoutSettingsService.getVaultTimeoutByUserId$(userId),\n      );\n\n      const refreshedTokens = await this.tokenService.setTokens(\n        tokenResponse.accessToken,\n        vaultTimeoutAction as VaultTimeoutAction,\n        vaultTimeout,\n        tokenResponse.refreshToken,\n      );\n      return refreshedTokens.accessToken;\n    } else {\n      const error = await this.handleError(response, true, true);\n      return Promise.reject(error);\n    }\n  }\n\n  protected async refreshApiToken(): Promise<string> {\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    const appId = await this.appIdService.getAppId();\n    const deviceRequest = new DeviceRequest(appId, this.platformUtilsService);\n    const tokenRequest = new UserApiTokenRequest(\n      clientId,\n      clientSecret,\n      new TokenTwoFactorRequest(),\n      deviceRequest,\n    );\n\n    const response = await this.postIdentityToken(tokenRequest);\n    if (!(response instanceof IdentityTokenResponse)) {\n      throw new Error(\"Invalid response received when refreshing api token\");\n    }\n\n    const newDecodedAccessToken = await this.tokenService.decodeAccessToken(response.accessToken);\n    const userId = newDecodedAccessToken.sub;\n\n    const vaultTimeoutAction = await firstValueFrom(\n      this.vaultTimeoutSettingsService.getVaultTimeoutActionByUserId$(userId),\n    );\n    const vaultTimeout = await firstValueFrom(\n      this.vaultTimeoutSettingsService.getVaultTimeoutByUserId$(userId),\n    );\n\n    const refreshedToken = await this.tokenService.setAccessToken(\n      response.accessToken,\n      vaultTimeoutAction as VaultTimeoutAction,\n      vaultTimeout,\n    );\n    return refreshedToken;\n  }\n\n  async send(\n    method: \"GET\" | \"POST\" | \"PUT\" | \"DELETE\",\n    path: string,\n    body: any,\n    authed: boolean,\n    hasResponse: boolean,\n    apiUrl?: string,\n    alterHeaders?: (headers: Headers) => void,\n  ): Promise<any> {\n    const env = await firstValueFrom(this.environmentService.environment$);\n    apiUrl = Utils.isNullOrWhitespace(apiUrl) ? env.getApiUrl() : apiUrl;\n\n    // Prevent directory traversal from malicious paths\n    const pathParts = path.split(\"?\");\n    const requestUrl =\n      apiUrl + Utils.normalizePath(pathParts[0]) + (pathParts.length > 1 ? `?${pathParts[1]}` : \"\");\n\n    const headers = new Headers({\n      \"Device-Type\": this.deviceType,\n    });\n    if (this.customUserAgent != null) {\n      headers.set(\"User-Agent\", this.customUserAgent);\n    }\n\n    const requestInit: RequestInit = {\n      cache: \"no-store\",\n      credentials: await this.getCredentials(),\n      method: method,\n    };\n\n    if (authed) {\n      const authHeader = await this.getActiveBearerToken();\n      headers.set(\"Authorization\", \"Bearer \" + authHeader);\n    }\n    if (body != null) {\n      if (typeof body === \"string\") {\n        requestInit.body = body;\n        headers.set(\"Content-Type\", \"application/x-www-form-urlencoded; charset=utf-8\");\n      } else if (typeof body === \"object\") {\n        if (body instanceof FormData) {\n          requestInit.body = body;\n        } else {\n          headers.set(\"Content-Type\", \"application/json; charset=utf-8\");\n          requestInit.body = JSON.stringify(body);\n        }\n      }\n    }\n    if (hasResponse) {\n      headers.set(\"Accept\", \"application/json\");\n    }\n    if (alterHeaders != null) {\n      alterHeaders(headers);\n    }\n\n    requestInit.headers = headers;\n    const response = await this.fetch(new Request(requestUrl, requestInit));\n\n    const responseType = response.headers.get(\"content-type\");\n    const responseIsJson = responseType != null && responseType.indexOf(\"application/json\") !== -1;\n    const responseIsCsv = responseType != null && responseType.indexOf(\"text/csv\") !== -1;\n    if (hasResponse && response.status === 200 && responseIsJson) {\n      const responseJson = await response.json();\n      return responseJson;\n    } else if (hasResponse && response.status === 200 && responseIsCsv) {\n      return await response.text();\n    } else if (response.status !== 200) {\n      const error = await this.handleError(response, false, authed);\n      return Promise.reject(error);\n    }\n  }\n\n  private async handleError(\n    response: Response,\n    tokenError: boolean,\n    authed: boolean,\n  ): Promise<ErrorResponse> {\n    let responseJson: any = null;\n    if (this.isJsonResponse(response)) {\n      responseJson = await response.json();\n    } else if (this.isTextResponse(response)) {\n      responseJson = { Message: await response.text() };\n    }\n\n    if (authed) {\n      if (\n        response.status === 401 ||\n        response.status === 403 ||\n        (tokenError &&\n          response.status === 400 &&\n          responseJson != null &&\n          responseJson.error === \"invalid_grant\")\n      ) {\n        await this.logoutCallback(\"invalidGrantError\");\n        return null;\n      }\n    }\n\n    return new ErrorResponse(responseJson, response.status, tokenError);\n  }\n\n  private qsStringify(params: any): string {\n    return Object.keys(params)\n      .map((key) => {\n        return encodeURIComponent(key) + \"=\" + encodeURIComponent(params[key]);\n      })\n      .join(\"&\");\n  }\n\n  private async getCredentials(): Promise<RequestCredentials> {\n    const env = await firstValueFrom(this.environmentService.environment$);\n    if (!this.isWebClient || env.hasBaseUrl()) {\n      return \"include\";\n    }\n    return undefined;\n  }\n\n  private addEventParameters(base: string, start: string, end: string, token: string) {\n    if (start != null) {\n      base += \"?start=\" + start;\n    }\n    if (end != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"end=\" + end;\n    }\n    if (token != null) {\n      base += base.indexOf(\"?\") > -1 ? \"&\" : \"?\";\n      base += \"continuationToken=\" + token;\n    }\n    return base;\n  }\n\n  private isJsonResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"application/json\") > -1;\n  }\n\n  private isTextResponse(response: Response): boolean {\n    const typeHeader = response.headers.get(\"content-type\");\n    return typeHeader != null && typeHeader.indexOf(\"text\") > -1;\n  }\n}\n","import { ApiService } from \"../abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"../abstractions/audit.service\";\nimport { BreachAccountResponse } from \"../models/response/breach-account.response\";\nimport { ErrorResponse } from \"../models/response/error.response\";\nimport { CryptoFunctionService } from \"../platform/abstractions/crypto-function.service\";\nimport { throttle } from \"../platform/misc/throttle\";\nimport { Utils } from \"../platform/misc/utils\";\n\nconst PwnedPasswordsApi = \"https://api.pwnedpasswords.com/range/\";\n\nexport class AuditService implements AuditServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private apiService: ApiService,\n  ) {}\n\n  @throttle(100, () => \"passwordLeaked\")\n  async passwordLeaked(password: string): Promise<number> {\n    const hashBytes = await this.cryptoFunctionService.hash(password, \"sha1\");\n    const hash = Utils.fromBufferToHex(hashBytes).toUpperCase();\n    const hashStart = hash.substr(0, 5);\n    const hashEnding = hash.substr(5);\n\n    const response = await this.apiService.nativeFetch(new Request(PwnedPasswordsApi + hashStart));\n    const leakedHashes = await response.text();\n    const match = leakedHashes.split(/\\r?\\n/).find((v) => {\n      return v.split(\":\")[0] === hashEnding;\n    });\n\n    return match != null ? parseInt(match.split(\":\")[1], 10) : 0;\n  }\n\n  async breachedAccounts(username: string): Promise<BreachAccountResponse[]> {\n    try {\n      return await this.apiService.getHibpBreach(username);\n    } catch (e) {\n      const error = e as ErrorResponse;\n      if (error.statusCode === 404) {\n        return [];\n      }\n      throw new Error();\n    }\n  }\n}\n","/**\n * Use as a Decorator on async functions, it will limit how many times the function can be\n * in-flight at a time.\n *\n * Calls beyond the limit will be queued, and run when one of the active calls finishes\n */\nexport function throttle(limit: number, throttleKey: (args: any[]) => string) {\n  return <T>(\n    target: any,\n    propertyKey: string | symbol,\n    descriptor: TypedPropertyDescriptor<(...args: any[]) => Promise<T>>,\n  ) => {\n    const originalMethod: () => Promise<T> = descriptor.value;\n    const allThrottles = new Map<any, Map<string, (() => void)[]>>();\n\n    const getThrottles = (obj: any) => {\n      let throttles = allThrottles.get(obj);\n      if (throttles != null) {\n        return throttles;\n      }\n      throttles = new Map<string, (() => void)[]>();\n      allThrottles.set(obj, throttles);\n      return throttles;\n    };\n\n    return {\n      value: function (...args: any[]) {\n        const throttles = getThrottles(this);\n        const argsThrottleKey = throttleKey(args);\n        let queue = throttles.get(argsThrottleKey);\n        if (queue == null) {\n          queue = [];\n          throttles.set(argsThrottleKey, queue);\n        }\n\n        return new Promise<T>((resolve, reject) => {\n          const exec = () => {\n            const onFinally = () => {\n              queue.splice(queue.indexOf(exec), 1);\n              if (queue.length >= limit) {\n                queue[limit - 1]();\n              } else if (queue.length === 0) {\n                throttles.delete(argsThrottleKey);\n                if (throttles.size === 0) {\n                  allThrottles.delete(this);\n                }\n              }\n            };\n            originalMethod\n              .apply(this, args)\n              .then((val: any) => {\n                onFinally();\n                return val;\n              })\n              .catch((err: any) => {\n                onFinally();\n                throw err;\n              })\n              .then(resolve, reject);\n          };\n          queue.push(exec);\n          if (queue.length <= limit) {\n            exec();\n          }\n        });\n      },\n    };\n  };\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { EventType } from \"../../enums\";\n\nexport class EventData {\n  type: EventType;\n  cipherId: string;\n  date: string;\n  organizationId: string;\n\n  static fromJSON(obj: Jsonify<EventData>): EventData {\n    return Object.assign(new EventData(), obj);\n  }\n}\n","import { EventData } from \"../../models/data/event.data\";\nimport { EVENT_COLLECTION_DISK, UserKeyDefinition } from \"../../platform/state\";\n\nexport const EVENT_COLLECTION = UserKeyDefinition.array<EventData>(\n  EVENT_COLLECTION_DISK,\n  \"events\",\n  {\n    deserializer: (s) => EventData.fromJSON(s),\n    clearOn: [\"logout\"],\n  },\n);\n","import { firstValueFrom, map, from, zip, Observable } from \"rxjs\";\n\nimport { EventCollectionService as EventCollectionServiceAbstraction } from \"../../abstractions/event/event-collection.service\";\nimport { EventUploadService } from \"../../abstractions/event/event-upload.service\";\nimport { OrganizationService } from \"../../admin-console/abstractions/organization/organization.service.abstraction\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { AuthService } from \"../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { EventType } from \"../../enums\";\nimport { EventData } from \"../../models/data/event.data\";\nimport { StateProvider } from \"../../platform/state\";\nimport { CipherService } from \"../../vault/abstractions/cipher.service\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\n\nimport { EVENT_COLLECTION } from \"./key-definitions\";\n\nexport class EventCollectionService implements EventCollectionServiceAbstraction {\n  private orgIds$: Observable<string[]>;\n\n  constructor(\n    private cipherService: CipherService,\n    private stateProvider: StateProvider,\n    private organizationService: OrganizationService,\n    private eventUploadService: EventUploadService,\n    private authService: AuthService,\n    private accountService: AccountService,\n  ) {\n    this.orgIds$ = this.organizationService.organizations$.pipe(\n      map((orgs) => orgs?.filter((o) => o.useEvents)?.map((x) => x.id) ?? []),\n    );\n  }\n\n  /** Adds an event to the active user's event collection\n   *  @param eventType the event type to be added\n   *  @param ciphers The collection of ciphers to log events for\n   *  @param uploadImmediately in some cases the recorded events should be uploaded right after being added\n   */\n  async collectMany(\n    eventType: EventType,\n    ciphers: CipherView[],\n    uploadImmediately = false,\n  ): Promise<any> {\n    const userId = await firstValueFrom(this.accountService.activeAccount$.pipe(map((a) => a?.id)));\n    const eventStore = this.stateProvider.getUser(userId, EVENT_COLLECTION);\n\n    if (!(await this.shouldUpdate(null, eventType, ciphers))) {\n      return;\n    }\n\n    const events$ = this.orgIds$.pipe(\n      map((orgs) =>\n        ciphers\n          .filter((c) => orgs.includes(c.organizationId))\n          .map((c) => ({\n            type: eventType,\n            cipherId: c.id,\n            date: new Date().toISOString(),\n            organizationId: c.organizationId,\n          })),\n      ),\n    );\n\n    await eventStore.update(\n      (currentEvents, newEvents) => [...(currentEvents ?? []), ...newEvents],\n      {\n        combineLatestWith: events$,\n      },\n    );\n\n    if (uploadImmediately) {\n      await this.eventUploadService.uploadEvents();\n    }\n  }\n\n  /** Adds an event to the active user's event collection\n   *  @param eventType the event type to be added\n   *  @param cipherId if provided the id of the cipher involved in the event\n   *  @param uploadImmediately in some cases the recorded events should be uploaded right after being added\n   *  @param organizationId the organizationId involved in the event. If the cipherId is not provided an organizationId is required\n   */\n  async collect(\n    eventType: EventType,\n    cipherId: string = null,\n    uploadImmediately = false,\n    organizationId: string = null,\n  ): Promise<any> {\n    const userId = await firstValueFrom(this.accountService.activeAccount$.pipe(map((a) => a?.id)));\n    const eventStore = this.stateProvider.getUser(userId, EVENT_COLLECTION);\n\n    if (!(await this.shouldUpdate(organizationId, eventType, undefined, cipherId))) {\n      return;\n    }\n\n    const event = new EventData();\n    event.type = eventType;\n    event.cipherId = cipherId;\n    event.date = new Date().toISOString();\n    event.organizationId = organizationId;\n\n    await eventStore.update((events) => {\n      events = events ?? [];\n      events.push(event);\n      return events;\n    });\n\n    if (uploadImmediately) {\n      await this.eventUploadService.uploadEvents();\n    }\n  }\n\n  /** Verifies if the event collection should be updated for the provided information\n   *  @param cipherId the cipher for the event\n   *  @param organizationId the organization for the event\n   */\n  private async shouldUpdate(\n    organizationId: string = null,\n    eventType: EventType = null,\n    ciphers: CipherView[] = [],\n    cipherId?: string,\n  ): Promise<boolean> {\n    const cipher$ = from(this.cipherService.get(cipherId));\n\n    const [authStatus, orgIds, cipher] = await firstValueFrom(\n      zip(this.authService.activeAccountStatus$, this.orgIds$, cipher$),\n    );\n\n    // The user must be authorized\n    if (authStatus != AuthenticationStatus.Unlocked) {\n      return false;\n    }\n\n    // User must have organizations assigned to them\n    if (orgIds == null || orgIds.length == 0) {\n      return false;\n    }\n\n    // Individual vault export doesn't need cipher id or organization id.\n    if (eventType == EventType.User_ClientExportedVault) {\n      return true;\n    }\n\n    // If the cipherId was provided and a cipher exists, add it to the collection\n    if (cipher != null) {\n      ciphers.push(new CipherView(cipher));\n    }\n\n    // If no ciphers there must be an organization id provided\n    if ((ciphers == null || ciphers.length == 0) && organizationId == null) {\n      return false;\n    }\n\n    // If the input list of ciphers is provided. Check the ciphers to see if any\n    // are in the user's org list\n    if (ciphers != null && ciphers.length > 0) {\n      const filtered = ciphers.filter((c) => orgIds.includes(c.organizationId));\n      return filtered.length > 0;\n    }\n\n    // If the organization id is provided it must be in the user's org list\n    if (organizationId != null && !orgIds.includes(organizationId)) {\n      return false;\n    }\n\n    return true;\n  }\n}\n","import { EventType } from \"../../enums\";\n\nexport class EventRequest {\n  type: EventType;\n  cipherId: string;\n  date: string;\n  organizationId: string;\n}\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { EventUploadService as EventUploadServiceAbstraction } from \"../../abstractions/event/event-upload.service\";\nimport { AuthService } from \"../../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { EventData } from \"../../models/data/event.data\";\nimport { EventRequest } from \"../../models/request/event.request\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { ScheduledTaskNames } from \"../../platform/scheduling/scheduled-task-name.enum\";\nimport { TaskSchedulerService } from \"../../platform/scheduling/task-scheduler.service\";\nimport { StateProvider } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\n\nimport { EVENT_COLLECTION } from \"./key-definitions\";\n\nexport class EventUploadService implements EventUploadServiceAbstraction {\n  private inited = false;\n  constructor(\n    private apiService: ApiService,\n    private stateProvider: StateProvider,\n    private logService: LogService,\n    private authService: AuthService,\n    private taskSchedulerService: TaskSchedulerService,\n  ) {\n    this.taskSchedulerService.registerTaskHandler(ScheduledTaskNames.eventUploadsInterval, () =>\n      this.uploadEvents(),\n    );\n  }\n\n  init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      void this.uploadEvents();\n      this.taskSchedulerService.setInterval(\n        ScheduledTaskNames.eventUploadsInterval,\n        60 * 1000, // check every 60 seconds\n      );\n    }\n  }\n\n  /** Upload the event collection from state.\n   *  @param userId upload events for provided user. If not active user will be used.\n   */\n  async uploadEvents(userId?: UserId): Promise<void> {\n    if (!userId) {\n      userId = await firstValueFrom(this.stateProvider.activeUserId$);\n    }\n\n    if (!userId) {\n      return;\n    }\n\n    const isUnlocked = await firstValueFrom(\n      this.authService\n        .authStatusFor$(userId)\n        .pipe(map((status) => status === AuthenticationStatus.Unlocked)),\n    );\n    if (!isUnlocked) {\n      return;\n    }\n\n    const eventCollection = await this.takeEvents(userId);\n\n    if (eventCollection == null || eventCollection.length === 0) {\n      return;\n    }\n    const request = eventCollection.map((e) => {\n      const req = new EventRequest();\n      req.type = e.type;\n      req.cipherId = e.cipherId;\n      req.date = e.date;\n      req.organizationId = e.organizationId;\n      return req;\n    });\n    try {\n      await this.apiService.postEventsCollect(request, userId);\n    } catch (e) {\n      this.logService.error(e);\n      // Add the events back to state if there was an error and they were not uploaded.\n      await this.stateProvider.setUserState(EVENT_COLLECTION, eventCollection, userId);\n    }\n  }\n\n  /** Return user's events and then clear them from state\n   *  @param userId the user to grab and clear events for\n   */\n  private async takeEvents(userId: UserId): Promise<EventData[]> {\n    let taken = null;\n    await this.stateProvider.getUser(userId, EVENT_COLLECTION).update((current) => {\n      taken = current ?? [];\n      return [];\n    });\n\n    return taken;\n  }\n}\n","import { NotificationType } from \"../../enums\";\n\nimport { BaseResponse } from \"./base.response\";\n\nexport class NotificationResponse extends BaseResponse {\n  contextId: string;\n  type: NotificationType;\n  payload: any;\n\n  constructor(response: any) {\n    super(response);\n    this.contextId = this.getResponseProperty(\"ContextId\");\n    this.type = this.getResponseProperty(\"Type\");\n\n    const payload = this.getResponseProperty(\"Payload\");\n    switch (this.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncCipherUpdate:\n      case NotificationType.SyncLoginDelete:\n        this.payload = new SyncCipherNotification(payload);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderDelete:\n      case NotificationType.SyncFolderUpdate:\n        this.payload = new SyncFolderNotification(payload);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncOrganizations:\n      case NotificationType.SyncOrgKeys:\n      case NotificationType.SyncSettings:\n      case NotificationType.LogOut:\n        this.payload = new UserNotification(payload);\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n      case NotificationType.SyncSendDelete:\n        this.payload = new SyncSendNotification(payload);\n        break;\n      case NotificationType.AuthRequest:\n      case NotificationType.AuthRequestResponse:\n        this.payload = new AuthRequestPushNotification(payload);\n        break;\n      default:\n        break;\n    }\n  }\n}\n\nexport class SyncCipherNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  organizationId: string;\n  collectionIds: string[];\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.organizationId = this.getResponseProperty(\"OrganizationId\");\n    this.collectionIds = this.getResponseProperty(\"CollectionIds\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class SyncFolderNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class UserNotification extends BaseResponse {\n  userId: string;\n  date: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.date = new Date(this.getResponseProperty(\"Date\"));\n  }\n}\n\nexport class SyncSendNotification extends BaseResponse {\n  id: string;\n  userId: string;\n  revisionDate: Date;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n    this.revisionDate = new Date(this.getResponseProperty(\"RevisionDate\"));\n  }\n}\n\nexport class AuthRequestPushNotification extends BaseResponse {\n  id: string;\n  userId: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.userId = this.getResponseProperty(\"UserId\");\n  }\n}\n","import * as signalR from \"@microsoft/signalr\";\nimport * as signalRMsgPack from \"@microsoft/signalr-protocol-msgpack\";\nimport { firstValueFrom, Subscription } from \"rxjs\";\n\nimport { LogoutReason } from \"@bitwarden/auth/common\";\n\nimport { ApiService } from \"../abstractions/api.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"../abstractions/notifications.service\";\nimport { AuthService } from \"../auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"../auth/enums/authentication-status\";\nimport { NotificationType } from \"../enums\";\nimport {\n  NotificationResponse,\n  SyncCipherNotification,\n  SyncFolderNotification,\n  SyncSendNotification,\n} from \"../models/response/notification.response\";\nimport { AppIdService } from \"../platform/abstractions/app-id.service\";\nimport { EnvironmentService } from \"../platform/abstractions/environment.service\";\nimport { LogService } from \"../platform/abstractions/log.service\";\nimport { MessagingService } from \"../platform/abstractions/messaging.service\";\nimport { StateService } from \"../platform/abstractions/state.service\";\nimport { ScheduledTaskNames } from \"../platform/scheduling/scheduled-task-name.enum\";\nimport { TaskSchedulerService } from \"../platform/scheduling/task-scheduler.service\";\nimport { SyncService } from \"../vault/abstractions/sync/sync.service.abstraction\";\n\nexport class NotificationsService implements NotificationsServiceAbstraction {\n  private signalrConnection: signalR.HubConnection;\n  private url: string;\n  private connected = false;\n  private inited = false;\n  private inactive = false;\n  private reconnectTimerSubscription: Subscription;\n  private isSyncingOnReconnect = true;\n\n  constructor(\n    private logService: LogService,\n    private syncService: SyncService,\n    private appIdService: AppIdService,\n    private apiService: ApiService,\n    private environmentService: EnvironmentService,\n    private logoutCallback: (logoutReason: LogoutReason) => Promise<void>,\n    private stateService: StateService,\n    private authService: AuthService,\n    private messagingService: MessagingService,\n    private taskSchedulerService: TaskSchedulerService,\n  ) {\n    this.taskSchedulerService.registerTaskHandler(\n      ScheduledTaskNames.notificationsReconnectTimeout,\n      () => this.reconnect(this.isSyncingOnReconnect),\n    );\n    this.environmentService.environment$.subscribe(() => {\n      if (!this.inited) {\n        return;\n      }\n\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.init();\n    });\n  }\n\n  async init(): Promise<void> {\n    this.inited = false;\n    this.url = (await firstValueFrom(this.environmentService.environment$)).getNotificationsUrl();\n\n    // Set notifications server URL to `https://-` to effectively disable communication\n    // with the notifications server from the client app\n    if (this.url === \"https://-\") {\n      return;\n    }\n\n    if (this.signalrConnection != null) {\n      this.signalrConnection.off(\"ReceiveMessage\");\n      this.signalrConnection.off(\"Heartbeat\");\n      await this.signalrConnection.stop();\n      this.connected = false;\n      this.signalrConnection = null;\n    }\n\n    this.signalrConnection = new signalR.HubConnectionBuilder()\n      .withUrl(this.url + \"/hub\", {\n        accessTokenFactory: () => this.apiService.getActiveBearerToken(),\n        skipNegotiation: true,\n        transport: signalR.HttpTransportType.WebSockets,\n      })\n      .withHubProtocol(new signalRMsgPack.MessagePackHubProtocol() as signalR.IHubProtocol)\n      // .configureLogging(signalR.LogLevel.Trace)\n      .build();\n\n    this.signalrConnection.on(\"ReceiveMessage\", (data: any) =>\n      this.processNotification(new NotificationResponse(data)),\n    );\n    // eslint-disable-next-line\n    this.signalrConnection.on(\"Heartbeat\", (data: any) => {\n      /*console.log('Heartbeat!');*/\n    });\n    this.signalrConnection.onclose(() => {\n      this.connected = false;\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.reconnect(true);\n    });\n    this.inited = true;\n    if (await this.isAuthedAndUnlocked()) {\n      await this.reconnect(false);\n    }\n  }\n\n  async updateConnection(sync = false): Promise<void> {\n    if (!this.inited) {\n      return;\n    }\n    try {\n      if (await this.isAuthedAndUnlocked()) {\n        await this.reconnect(sync);\n      } else {\n        await this.signalrConnection.stop();\n      }\n    } catch (e) {\n      this.logService.error(e.toString());\n    }\n  }\n\n  async reconnectFromActivity(): Promise<void> {\n    this.inactive = false;\n    if (this.inited && !this.connected) {\n      await this.reconnect(true);\n    }\n  }\n\n  async disconnectFromInactivity(): Promise<void> {\n    this.inactive = true;\n    if (this.inited && this.connected) {\n      await this.signalrConnection.stop();\n    }\n  }\n\n  private async processNotification(notification: NotificationResponse) {\n    const appId = await this.appIdService.getAppId();\n    if (notification == null || notification.contextId === appId) {\n      return;\n    }\n\n    const isAuthenticated = await this.stateService.getIsAuthenticated();\n    const payloadUserId = notification.payload.userId || notification.payload.UserId;\n    const myUserId = await this.stateService.getUserId();\n    if (isAuthenticated && payloadUserId != null && payloadUserId !== myUserId) {\n      return;\n    }\n\n    switch (notification.type) {\n      case NotificationType.SyncCipherCreate:\n      case NotificationType.SyncCipherUpdate:\n        await this.syncService.syncUpsertCipher(\n          notification.payload as SyncCipherNotification,\n          notification.type === NotificationType.SyncCipherUpdate,\n        );\n        break;\n      case NotificationType.SyncCipherDelete:\n      case NotificationType.SyncLoginDelete:\n        await this.syncService.syncDeleteCipher(notification.payload as SyncCipherNotification);\n        break;\n      case NotificationType.SyncFolderCreate:\n      case NotificationType.SyncFolderUpdate:\n        await this.syncService.syncUpsertFolder(\n          notification.payload as SyncFolderNotification,\n          notification.type === NotificationType.SyncFolderUpdate,\n        );\n        break;\n      case NotificationType.SyncFolderDelete:\n        await this.syncService.syncDeleteFolder(notification.payload as SyncFolderNotification);\n        break;\n      case NotificationType.SyncVault:\n      case NotificationType.SyncCiphers:\n      case NotificationType.SyncSettings:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(false);\n        }\n        break;\n      case NotificationType.SyncOrganizations:\n        if (isAuthenticated) {\n          // An organization update may not have bumped the user's account revision date, so force a sync\n          await this.syncService.fullSync(true);\n        }\n        break;\n      case NotificationType.SyncOrgKeys:\n        if (isAuthenticated) {\n          await this.syncService.fullSync(true);\n          // Stop so a reconnect can be made\n          await this.signalrConnection.stop();\n        }\n        break;\n      case NotificationType.LogOut:\n        if (isAuthenticated) {\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.logoutCallback(\"logoutNotification\");\n        }\n        break;\n      case NotificationType.SyncSendCreate:\n      case NotificationType.SyncSendUpdate:\n        await this.syncService.syncUpsertSend(\n          notification.payload as SyncSendNotification,\n          notification.type === NotificationType.SyncSendUpdate,\n        );\n        break;\n      case NotificationType.SyncSendDelete:\n        await this.syncService.syncDeleteSend(notification.payload as SyncSendNotification);\n        break;\n      case NotificationType.AuthRequest:\n        {\n          this.messagingService.send(\"openLoginApproval\", {\n            notificationId: notification.payload.id,\n          });\n        }\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async reconnect(sync: boolean) {\n    this.reconnectTimerSubscription?.unsubscribe();\n\n    if (this.connected || !this.inited || this.inactive) {\n      return;\n    }\n    const authedAndUnlocked = await this.isAuthedAndUnlocked();\n    if (!authedAndUnlocked) {\n      return;\n    }\n\n    try {\n      await this.signalrConnection.start();\n      this.connected = true;\n      if (sync) {\n        await this.syncService.fullSync(false);\n      }\n    } catch (e) {\n      this.logService.error(e);\n    }\n\n    if (!this.connected) {\n      this.isSyncingOnReconnect = sync;\n      this.reconnectTimerSubscription = this.taskSchedulerService.setTimeout(\n        ScheduledTaskNames.notificationsReconnectTimeout,\n        this.random(120000, 300000),\n      );\n    }\n  }\n\n  private async isAuthedAndUnlocked() {\n    const authStatus = await this.authService.getAuthStatus();\n    return authStatus >= AuthenticationStatus.Unlocked;\n  }\n\n  private random(min: number, max: number) {\n    min = Math.ceil(min);\n    max = Math.floor(max);\n    return Math.floor(Math.random() * (max - min + 1)) + min;\n  }\n}\n","import * as lunr from \"lunr\";\nimport { Observable, firstValueFrom, map } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { SearchService as SearchServiceAbstraction } from \"../abstractions/search.service\";\nimport { UriMatchStrategy } from \"../models/domain/domain-service\";\nimport { I18nService } from \"../platform/abstractions/i18n.service\";\nimport { LogService } from \"../platform/abstractions/log.service\";\nimport {\n  ActiveUserState,\n  StateProvider,\n  UserKeyDefinition,\n  VAULT_SEARCH_MEMORY,\n} from \"../platform/state\";\nimport { SendView } from \"../tools/send/models/view/send.view\";\nimport { IndexedEntityId } from \"../types/guid\";\nimport { FieldType } from \"../vault/enums\";\nimport { CipherType } from \"../vault/enums/cipher-type\";\nimport { CipherView } from \"../vault/models/view/cipher.view\";\n\nexport type SerializedLunrIndex = {\n  version: string;\n  fields: string[];\n  fieldVectors: [string, number[]];\n  invertedIndex: any[];\n  pipeline: string[];\n};\n\n/**\n * The `KeyDefinition` for accessing the search index in application state.\n * The key definition is configured to clear the index when the user locks the vault.\n */\nexport const LUNR_SEARCH_INDEX = new UserKeyDefinition<SerializedLunrIndex>(\n  VAULT_SEARCH_MEMORY,\n  \"searchIndex\",\n  {\n    deserializer: (obj: Jsonify<SerializedLunrIndex>) => obj,\n    clearOn: [\"lock\", \"logout\"],\n  },\n);\n\n/**\n * The `KeyDefinition` for accessing the ID of the entity currently indexed by Lunr search.\n * The key definition is configured to clear the indexed entity ID when the user locks the vault.\n */\nexport const LUNR_SEARCH_INDEXED_ENTITY_ID = new UserKeyDefinition<IndexedEntityId>(\n  VAULT_SEARCH_MEMORY,\n  \"searchIndexedEntityId\",\n  {\n    deserializer: (obj: Jsonify<IndexedEntityId>) => obj,\n    clearOn: [\"lock\", \"logout\"],\n  },\n);\n\n/**\n * The `KeyDefinition` for accessing the state of Lunr search indexing, indicating whether the Lunr search index is currently being built or updating.\n * The key definition is configured to clear the indexing state when the user locks the vault.\n */\nexport const LUNR_SEARCH_INDEXING = new UserKeyDefinition<boolean>(\n  VAULT_SEARCH_MEMORY,\n  \"isIndexing\",\n  {\n    deserializer: (obj: Jsonify<boolean>) => obj,\n    clearOn: [\"lock\", \"logout\"],\n  },\n);\n\nexport class SearchService implements SearchServiceAbstraction {\n  private static registeredPipeline = false;\n\n  private searchIndexState: ActiveUserState<SerializedLunrIndex> =\n    this.stateProvider.getActive(LUNR_SEARCH_INDEX);\n  private readonly index$: Observable<lunr.Index | null> = this.searchIndexState.state$.pipe(\n    map((searchIndex) => (searchIndex ? lunr.Index.load(searchIndex) : null)),\n  );\n\n  private searchIndexEntityIdState: ActiveUserState<IndexedEntityId> = this.stateProvider.getActive(\n    LUNR_SEARCH_INDEXED_ENTITY_ID,\n  );\n  readonly indexedEntityId$: Observable<IndexedEntityId | null> =\n    this.searchIndexEntityIdState.state$.pipe(map((id) => id));\n\n  private searchIsIndexingState: ActiveUserState<boolean> =\n    this.stateProvider.getActive(LUNR_SEARCH_INDEXING);\n  private readonly searchIsIndexing$: Observable<boolean> = this.searchIsIndexingState.state$.pipe(\n    map((indexing) => indexing ?? false),\n  );\n\n  private readonly immediateSearchLocales: string[] = [\"zh-CN\", \"zh-TW\", \"ja\", \"ko\", \"vi\"];\n  private readonly defaultSearchableMinLength: number = 2;\n  private searchableMinLength: number = this.defaultSearchableMinLength;\n\n  constructor(\n    private logService: LogService,\n    private i18nService: I18nService,\n    private stateProvider: StateProvider,\n  ) {\n    this.i18nService.locale$.subscribe((locale) => {\n      if (this.immediateSearchLocales.indexOf(locale) !== -1) {\n        this.searchableMinLength = 1;\n      } else {\n        this.searchableMinLength = this.defaultSearchableMinLength;\n      }\n    });\n\n    // Currently have to ensure this is only done a single time. Lunr allows you to register a function\n    // multiple times but they will add a warning message to the console. The way they do that breaks when ran on a service worker.\n    if (!SearchService.registeredPipeline) {\n      SearchService.registeredPipeline = true;\n      //register lunr pipeline function\n      lunr.Pipeline.registerFunction(this.normalizeAccentsPipelineFunction, \"normalizeAccents\");\n    }\n  }\n\n  async clearIndex(): Promise<void> {\n    await this.searchIndexEntityIdState.update(() => null);\n    await this.searchIndexState.update(() => null);\n    await this.searchIsIndexingState.update(() => null);\n  }\n\n  async isSearchable(query: string): Promise<boolean> {\n    query = SearchService.normalizeSearchQuery(query);\n    const index = await this.getIndexForSearch();\n    const notSearchable =\n      query == null ||\n      (index == null && query.length < this.searchableMinLength) ||\n      (index != null && query.length < this.searchableMinLength && query.indexOf(\">\") !== 0);\n    return !notSearchable;\n  }\n\n  async indexCiphers(ciphers: CipherView[], indexedEntityId?: string): Promise<void> {\n    if (await this.getIsIndexing()) {\n      return;\n    }\n\n    await this.setIsIndexing(true);\n    await this.setIndexedEntityIdForSearch(indexedEntityId as IndexedEntityId);\n    const builder = new lunr.Builder();\n    builder.pipeline.add(this.normalizeAccentsPipelineFunction);\n    builder.ref(\"id\");\n    builder.field(\"shortid\", { boost: 100, extractor: (c: CipherView) => c.id.substr(0, 8) });\n    builder.field(\"name\", {\n      boost: 10,\n    });\n    builder.field(\"subtitle\", {\n      boost: 5,\n      extractor: (c: CipherView) => {\n        if (c.subTitle != null && c.type === CipherType.Card) {\n          return c.subTitle.replace(/\\*/g, \"\");\n        }\n        return c.subTitle;\n      },\n    });\n    builder.field(\"notes\");\n    builder.field(\"login.username\", {\n      extractor: (c: CipherView) =>\n        c.type === CipherType.Login && c.login != null ? c.login.username : null,\n    });\n    builder.field(\"login.uris\", { boost: 2, extractor: (c: CipherView) => this.uriExtractor(c) });\n    builder.field(\"fields\", { extractor: (c: CipherView) => this.fieldExtractor(c, false) });\n    builder.field(\"fields_joined\", { extractor: (c: CipherView) => this.fieldExtractor(c, true) });\n    builder.field(\"attachments\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, false),\n    });\n    builder.field(\"attachments_joined\", {\n      extractor: (c: CipherView) => this.attachmentExtractor(c, true),\n    });\n    builder.field(\"organizationid\", { extractor: (c: CipherView) => c.organizationId });\n    ciphers = ciphers || [];\n    ciphers.forEach((c) => builder.add(c));\n    const index = builder.build();\n\n    await this.setIndexForSearch(index.toJSON() as SerializedLunrIndex);\n\n    await this.setIsIndexing(false);\n\n    this.logService.info(\"Finished search indexing\");\n  }\n\n  async searchCiphers(\n    query: string,\n    filter: ((cipher: CipherView) => boolean) | ((cipher: CipherView) => boolean)[] = null,\n    ciphers: CipherView[],\n  ): Promise<CipherView[]> {\n    const results: CipherView[] = [];\n    if (query != null) {\n      query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    }\n    if (query === \"\") {\n      query = null;\n    }\n\n    if (ciphers == null) {\n      ciphers = [];\n    }\n\n    if (filter != null && Array.isArray(filter) && filter.length > 0) {\n      ciphers = ciphers.filter((c) => filter.every((f) => f == null || f(c)));\n    } else if (filter != null) {\n      ciphers = ciphers.filter(filter as (cipher: CipherView) => boolean);\n    }\n\n    if (!(await this.isSearchable(query))) {\n      return ciphers;\n    }\n\n    if (await this.getIsIndexing()) {\n      await new Promise((r) => setTimeout(r, 250));\n      if (await this.getIsIndexing()) {\n        await new Promise((r) => setTimeout(r, 500));\n      }\n    }\n\n    const index = await this.getIndexForSearch();\n    if (index == null) {\n      // Fall back to basic search if index is not available\n      return this.searchCiphersBasic(ciphers, query);\n    }\n\n    const ciphersMap = new Map<string, CipherView>();\n    ciphers.forEach((c) => ciphersMap.set(c.id, c));\n\n    let searchResults: lunr.Index.Result[] = null;\n    const isQueryString = query != null && query.length > 1 && query.indexOf(\">\") === 0;\n    if (isQueryString) {\n      try {\n        searchResults = index.search(query.substr(1).trim());\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else {\n      const soWild = lunr.Query.wildcard.LEADING | lunr.Query.wildcard.TRAILING;\n      searchResults = index.query((q) => {\n        lunr.tokenizer(query).forEach((token) => {\n          const t = token.toString();\n          q.term(t, { fields: [\"name\"], wildcard: soWild });\n          q.term(t, { fields: [\"subtitle\"], wildcard: soWild });\n          q.term(t, { fields: [\"login.uris\"], wildcard: soWild });\n          q.term(t, {});\n        });\n      });\n    }\n\n    if (searchResults != null) {\n      searchResults.forEach((r) => {\n        if (ciphersMap.has(r.ref)) {\n          results.push(ciphersMap.get(r.ref));\n        }\n      });\n    }\n    return results;\n  }\n\n  searchCiphersBasic(ciphers: CipherView[], query: string, deleted = false) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLowerCase());\n    return ciphers.filter((c) => {\n      if (deleted !== c.isDeleted) {\n        return false;\n      }\n      if (c.name != null && c.name.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (query.length >= 8 && c.id.startsWith(query)) {\n        return true;\n      }\n      if (c.subTitle != null && c.subTitle.toLowerCase().indexOf(query) > -1) {\n        return true;\n      }\n      if (\n        c.login &&\n        c.login.hasUris &&\n        c.login.uris.some((loginUri) => loginUri?.uri?.toLowerCase().indexOf(query) > -1)\n      ) {\n        return true;\n      }\n      return false;\n    });\n  }\n\n  searchSends(sends: SendView[], query: string) {\n    query = SearchService.normalizeSearchQuery(query.trim().toLocaleLowerCase());\n    if (query === null) {\n      return sends;\n    }\n    const sendsMatched: SendView[] = [];\n    const lowPriorityMatched: SendView[] = [];\n    sends.forEach((s) => {\n      if (s.name != null && s.name.toLowerCase().indexOf(query) > -1) {\n        sendsMatched.push(s);\n      } else if (\n        query.length >= 8 &&\n        (s.id.startsWith(query) ||\n          s.accessId.toLocaleLowerCase().startsWith(query) ||\n          (s.file?.id != null && s.file.id.startsWith(query)))\n      ) {\n        lowPriorityMatched.push(s);\n      } else if (s.notes != null && s.notes.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.text?.text != null && s.text.text.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      } else if (s.file?.fileName != null && s.file.fileName.toLowerCase().indexOf(query) > -1) {\n        lowPriorityMatched.push(s);\n      }\n    });\n    return sendsMatched.concat(lowPriorityMatched);\n  }\n\n  async getIndexForSearch(): Promise<lunr.Index | null> {\n    return await firstValueFrom(this.index$);\n  }\n\n  private async setIndexForSearch(index: SerializedLunrIndex): Promise<void> {\n    await this.searchIndexState.update(() => index);\n  }\n\n  private async setIndexedEntityIdForSearch(indexedEntityId: IndexedEntityId): Promise<void> {\n    await this.searchIndexEntityIdState.update(() => indexedEntityId);\n  }\n\n  private async setIsIndexing(indexing: boolean): Promise<void> {\n    await this.searchIsIndexingState.update(() => indexing);\n  }\n\n  private async getIsIndexing(): Promise<boolean> {\n    return await firstValueFrom(this.searchIsIndexing$);\n  }\n\n  private fieldExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasFields) {\n      return null;\n    }\n    let fields: string[] = [];\n    c.fields.forEach((f) => {\n      if (f.name != null) {\n        fields.push(f.name);\n      }\n      if (f.type === FieldType.Text && f.value != null) {\n        fields.push(f.value);\n      }\n    });\n    fields = fields.filter((f) => f.trim() !== \"\");\n    if (fields.length === 0) {\n      return null;\n    }\n    return joined ? fields.join(\" \") : fields;\n  }\n\n  private attachmentExtractor(c: CipherView, joined: boolean) {\n    if (!c.hasAttachments) {\n      return null;\n    }\n    let attachments: string[] = [];\n    c.attachments.forEach((a) => {\n      if (a != null && a.fileName != null) {\n        if (joined && a.fileName.indexOf(\".\") > -1) {\n          attachments.push(a.fileName.substr(0, a.fileName.lastIndexOf(\".\")));\n        } else {\n          attachments.push(a.fileName);\n        }\n      }\n    });\n    attachments = attachments.filter((f) => f.trim() !== \"\");\n    if (attachments.length === 0) {\n      return null;\n    }\n    return joined ? attachments.join(\" \") : attachments;\n  }\n\n  private uriExtractor(c: CipherView) {\n    if (c.type !== CipherType.Login || c.login == null || !c.login.hasUris) {\n      return null;\n    }\n    const uris: string[] = [];\n    c.login.uris.forEach((u) => {\n      if (u.uri == null || u.uri === \"\") {\n        return;\n      }\n      if (u.hostname != null) {\n        uris.push(u.hostname);\n        return;\n      }\n      let uri = u.uri;\n      if (u.match !== UriMatchStrategy.RegularExpression) {\n        const protocolIndex = uri.indexOf(\"://\");\n        if (protocolIndex > -1) {\n          uri = uri.substr(protocolIndex + 3);\n        }\n        const queryIndex = uri.search(/\\?|&|#/);\n        if (queryIndex > -1) {\n          uri = uri.substring(0, queryIndex);\n        }\n      }\n      uris.push(uri);\n    });\n    return uris.length > 0 ? uris : null;\n  }\n\n  private normalizeAccentsPipelineFunction(token: lunr.Token): any {\n    const searchableFields = [\"name\", \"login.username\", \"subtitle\", \"notes\"];\n    const fields = (token as any).metadata[\"fields\"];\n    const checkFields = fields.every((i: any) => searchableFields.includes(i));\n\n    if (checkFields) {\n      return SearchService.normalizeSearchQuery(token.toString());\n    }\n\n    return token;\n  }\n\n  // Remove accents/diacritics characters from text. This regex is equivalent to the Diacritic unicode property escape, i.e. it will match all diacritic characters.\n  static normalizeSearchQuery(query: string): string {\n    return query?.normalize(\"NFD\").replace(/[\\u0300-\\u036f]/g, \"\");\n  }\n}\n","import { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { UserKeyDefinition, VAULT_TIMEOUT_SETTINGS_DISK_LOCAL } from \"../../platform/state\";\nimport { VaultTimeout } from \"../../types/vault-timeout.type\";\n\n/**\n * Settings use disk storage and local storage on web so settings can persist after logout\n * in order for us to know if the user's chose to never lock their vault or not.\n * When the user has never lock selected, we have to set the user key in memory\n * from the user auto unlock key stored on disk on client bootstrap.\n */\nexport const VAULT_TIMEOUT_ACTION = new UserKeyDefinition<VaultTimeoutAction>(\n  VAULT_TIMEOUT_SETTINGS_DISK_LOCAL,\n  \"vaultTimeoutAction\",\n  {\n    deserializer: (vaultTimeoutAction) => vaultTimeoutAction,\n    clearOn: [], // persisted on logout\n  },\n);\n\nexport const VAULT_TIMEOUT = new UserKeyDefinition<VaultTimeout>(\n  VAULT_TIMEOUT_SETTINGS_DISK_LOCAL,\n  \"vaultTimeout\",\n  {\n    deserializer: (vaultTimeout) => vaultTimeout,\n    clearOn: [], // persisted on logout\n  },\n);\n","import {\n  EMPTY,\n  Observable,\n  catchError,\n  combineLatest,\n  defer,\n  distinctUntilChanged,\n  firstValueFrom,\n  from,\n  map,\n  shareReplay,\n  switchMap,\n  tap,\n} from \"rxjs\";\n\nimport {\n  PinServiceAbstraction,\n  UserDecryptionOptionsServiceAbstraction,\n} from \"@bitwarden/auth/common\";\n\nimport { VaultTimeoutSettingsService as VaultTimeoutSettingsServiceAbstraction } from \"../../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { PolicyService } from \"../../admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"../../admin-console/enums\";\nimport { Policy } from \"../../admin-console/models/domain/policy\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { TokenService } from \"../../auth/abstractions/token.service\";\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { BiometricStateService } from \"../../platform/biometrics/biometric-state.service\";\nimport { StateProvider } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { VaultTimeout, VaultTimeoutStringType } from \"../../types/vault-timeout.type\";\n\nimport { VAULT_TIMEOUT, VAULT_TIMEOUT_ACTION } from \"./vault-timeout-settings.state\";\n\nexport class VaultTimeoutSettingsService implements VaultTimeoutSettingsServiceAbstraction {\n  constructor(\n    private accountService: AccountService,\n    private pinService: PinServiceAbstraction,\n    private userDecryptionOptionsService: UserDecryptionOptionsServiceAbstraction,\n    private cryptoService: CryptoService,\n    private tokenService: TokenService,\n    private policyService: PolicyService,\n    private biometricStateService: BiometricStateService,\n    private stateProvider: StateProvider,\n    private logService: LogService,\n    private defaultVaultTimeout: VaultTimeout,\n  ) {}\n\n  async setVaultTimeoutOptions(\n    userId: UserId,\n    timeout: VaultTimeout,\n    action: VaultTimeoutAction,\n  ): Promise<void> {\n    if (!userId) {\n      throw new Error(\"User id required. Cannot set vault timeout settings.\");\n    }\n\n    if (timeout == null) {\n      throw new Error(\"Vault Timeout cannot be null.\");\n    }\n\n    if (action == null) {\n      throw new Error(\"Vault Timeout Action cannot be null.\");\n    }\n\n    // We swap these tokens from being on disk for lock actions, and in memory for logout actions\n    // Get them here to set them to their new location after changing the timeout action and clearing if needed\n    const accessToken = await this.tokenService.getAccessToken();\n    const refreshToken = await this.tokenService.getRefreshToken();\n    const clientId = await this.tokenService.getClientId();\n    const clientSecret = await this.tokenService.getClientSecret();\n\n    await this.setVaultTimeout(userId, timeout);\n\n    if (timeout != VaultTimeoutStringType.Never && action === VaultTimeoutAction.LogOut) {\n      // if we have a vault timeout and the action is log out, reset tokens\n      // as the tokens were stored on disk and now should be stored in memory\n      await this.tokenService.clearTokens();\n    }\n\n    await this.setVaultTimeoutAction(userId, action);\n\n    await this.tokenService.setTokens(accessToken, action, timeout, refreshToken, [\n      clientId,\n      clientSecret,\n    ]);\n\n    await this.cryptoService.refreshAdditionalKeys();\n  }\n\n  availableVaultTimeoutActions$(userId?: string): Observable<VaultTimeoutAction[]> {\n    return defer(() => this.getAvailableVaultTimeoutActions(userId));\n  }\n\n  async canLock(userId: UserId): Promise<boolean> {\n    const availableVaultTimeoutActions: VaultTimeoutAction[] = await firstValueFrom(\n      this.availableVaultTimeoutActions$(userId),\n    );\n    return availableVaultTimeoutActions?.includes(VaultTimeoutAction.Lock) || false;\n  }\n\n  async isBiometricLockSet(userId?: string): Promise<boolean> {\n    const biometricUnlockPromise =\n      userId == null\n        ? firstValueFrom(this.biometricStateService.biometricUnlockEnabled$)\n        : this.biometricStateService.getBiometricUnlockEnabled(userId as UserId);\n    return await biometricUnlockPromise;\n  }\n\n  private async setVaultTimeout(userId: UserId, timeout: VaultTimeout): Promise<void> {\n    if (!userId) {\n      throw new Error(\"User id required. Cannot set vault timeout.\");\n    }\n\n    if (timeout == null) {\n      throw new Error(\"Vault Timeout cannot be null.\");\n    }\n\n    await this.stateProvider.setUserState(VAULT_TIMEOUT, timeout, userId);\n  }\n\n  getVaultTimeoutByUserId$(userId: UserId): Observable<VaultTimeout> {\n    if (!userId) {\n      throw new Error(\"User id required. Cannot get vault timeout.\");\n    }\n\n    return combineLatest([\n      this.stateProvider.getUserState$(VAULT_TIMEOUT, userId),\n      this.getMaxVaultTimeoutPolicyByUserId$(userId),\n    ]).pipe(\n      switchMap(([currentVaultTimeout, maxVaultTimeoutPolicy]) => {\n        return from(this.determineVaultTimeout(currentVaultTimeout, maxVaultTimeoutPolicy)).pipe(\n          tap((vaultTimeout: VaultTimeout) => {\n            // As a side effect, set the new value determined by determineVaultTimeout into state if it's different from the current\n            if (vaultTimeout !== currentVaultTimeout) {\n              return this.stateProvider.setUserState(VAULT_TIMEOUT, vaultTimeout, userId);\n            }\n          }),\n          catchError((error: unknown) => {\n            // Protect outer observable from canceling on error by catching and returning EMPTY\n            this.logService.error(`Error getting vault timeout: ${error}`);\n            return EMPTY;\n          }),\n        );\n      }),\n      distinctUntilChanged(), // Avoid having the set side effect trigger a new emission of the same action\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n  }\n\n  private async determineVaultTimeout(\n    currentVaultTimeout: VaultTimeout | null,\n    maxVaultTimeoutPolicy: Policy | null,\n  ): Promise<VaultTimeout | null> {\n    // if current vault timeout is null, apply the client specific default\n    currentVaultTimeout = currentVaultTimeout ?? this.defaultVaultTimeout;\n\n    // If no policy applies, return the current vault timeout\n    if (!maxVaultTimeoutPolicy) {\n      return currentVaultTimeout;\n    }\n\n    // User is subject to a max vault timeout policy\n    const maxVaultTimeoutPolicyData = maxVaultTimeoutPolicy.data;\n\n    // If the current vault timeout is not numeric, change it to the policy compliant value\n    if (typeof currentVaultTimeout === \"string\") {\n      return maxVaultTimeoutPolicyData.minutes;\n    }\n\n    // For numeric vault timeouts, ensure they are smaller than maximum allowed value according to policy\n    const policyCompliantTimeout = Math.min(currentVaultTimeout, maxVaultTimeoutPolicyData.minutes);\n\n    return policyCompliantTimeout;\n  }\n\n  private async setVaultTimeoutAction(userId: UserId, action: VaultTimeoutAction): Promise<void> {\n    if (!userId) {\n      throw new Error(\"User id required. Cannot set vault timeout action.\");\n    }\n\n    if (!action) {\n      throw new Error(\"Vault Timeout Action cannot be null\");\n    }\n\n    await this.stateProvider.setUserState(VAULT_TIMEOUT_ACTION, action, userId);\n  }\n\n  getVaultTimeoutActionByUserId$(userId: UserId): Observable<VaultTimeoutAction> {\n    if (!userId) {\n      throw new Error(\"User id required. Cannot get vault timeout action.\");\n    }\n\n    return combineLatest([\n      this.stateProvider.getUserState$(VAULT_TIMEOUT_ACTION, userId),\n      this.getMaxVaultTimeoutPolicyByUserId$(userId),\n    ]).pipe(\n      switchMap(([currentVaultTimeoutAction, maxVaultTimeoutPolicy]) => {\n        return from(\n          this.determineVaultTimeoutAction(\n            userId,\n            currentVaultTimeoutAction,\n            maxVaultTimeoutPolicy,\n          ),\n        ).pipe(\n          tap((vaultTimeoutAction: VaultTimeoutAction) => {\n            // As a side effect, set the new value determined by determineVaultTimeout into state if it's different from the current\n            // We want to avoid having a null timeout action always so we set it to the default if it is null\n            // and if the user becomes subject to a policy that requires a specific action, we set it to that\n            if (vaultTimeoutAction !== currentVaultTimeoutAction) {\n              return this.stateProvider.setUserState(\n                VAULT_TIMEOUT_ACTION,\n                vaultTimeoutAction,\n                userId,\n              );\n            }\n          }),\n          catchError((error: unknown) => {\n            // Protect outer observable from canceling on error by catching and returning EMPTY\n            this.logService.error(`Error getting vault timeout: ${error}`);\n            return EMPTY;\n          }),\n        );\n      }),\n      distinctUntilChanged(), // Avoid having the set side effect trigger a new emission of the same action\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n  }\n\n  private async determineVaultTimeoutAction(\n    userId: string,\n    currentVaultTimeoutAction: VaultTimeoutAction | null,\n    maxVaultTimeoutPolicy: Policy | null,\n  ): Promise<VaultTimeoutAction> {\n    const availableVaultTimeoutActions = await this.getAvailableVaultTimeoutActions(userId);\n    if (availableVaultTimeoutActions.length === 1) {\n      return availableVaultTimeoutActions[0];\n    }\n\n    if (\n      maxVaultTimeoutPolicy?.data?.action &&\n      availableVaultTimeoutActions.includes(maxVaultTimeoutPolicy.data.action)\n    ) {\n      // return policy defined vault timeout action\n      return maxVaultTimeoutPolicy.data.action;\n    }\n\n    // No policy applies from here on\n    // If the current vault timeout is null and lock is an option, set it as the default\n    if (\n      currentVaultTimeoutAction == null &&\n      availableVaultTimeoutActions.includes(VaultTimeoutAction.Lock)\n    ) {\n      return VaultTimeoutAction.Lock;\n    }\n\n    return currentVaultTimeoutAction;\n  }\n\n  private getMaxVaultTimeoutPolicyByUserId$(userId: UserId): Observable<Policy | null> {\n    if (!userId) {\n      throw new Error(\"User id required. Cannot get max vault timeout policy.\");\n    }\n\n    return this.policyService\n      .getAll$(PolicyType.MaximumVaultTimeout, userId)\n      .pipe(map((policies) => policies[0] ?? null));\n  }\n\n  private async getAvailableVaultTimeoutActions(userId?: string): Promise<VaultTimeoutAction[]> {\n    userId ??= (await firstValueFrom(this.accountService.activeAccount$))?.id;\n\n    const availableActions = [VaultTimeoutAction.LogOut];\n\n    const canLock =\n      (await this.userHasMasterPassword(userId)) ||\n      (await this.pinService.isPinSet(userId as UserId)) ||\n      (await this.isBiometricLockSet(userId));\n\n    if (canLock) {\n      availableActions.push(VaultTimeoutAction.Lock);\n    }\n\n    return availableActions;\n  }\n\n  async clear(userId?: string): Promise<void> {\n    await this.cryptoService.clearPinKeys(userId);\n  }\n\n  private async userHasMasterPassword(userId: string): Promise<boolean> {\n    if (userId) {\n      const decryptionOptions = await firstValueFrom(\n        this.userDecryptionOptionsService.userDecryptionOptionsById$(userId),\n      );\n\n      return !!decryptionOptions?.hasMasterPassword;\n    } else {\n      return await firstValueFrom(this.userDecryptionOptionsService.hasMasterPassword$);\n    }\n  }\n}\n","import * as zxcvbn from \"zxcvbn\";\n\nimport { PasswordStrengthServiceAbstraction } from \"./password-strength.service.abstraction\";\n\nexport class PasswordStrengthService implements PasswordStrengthServiceAbstraction {\n  /**\n   * Calculates a password strength score using zxcvbn.\n   * @param password The password to calculate the strength of.\n   * @param emailInput An unparsed email address to use as user input.\n   * @param userInputs An array of additional user inputs to use when calculating the strength.\n   */\n  getPasswordStrength(\n    password: string,\n    emailInput: string = null,\n    userInputs: string[] = null,\n  ): zxcvbn.ZXCVBNResult {\n    if (password == null || password.length === 0) {\n      return null;\n    }\n    const globalUserInputs = [\n      \"bitwarden\",\n      \"bit\",\n      \"warden\",\n      ...(userInputs ?? []),\n      ...this.emailToUserInputs(emailInput),\n    ];\n    // Use a hash set to get rid of any duplicate user inputs\n    const finalUserInputs = Array.from(new Set(globalUserInputs));\n    const result = zxcvbn(password, finalUserInputs);\n    return result;\n  }\n\n  /**\n   * Convert an email address into a list of user inputs for zxcvbn by\n   * taking the local part of the email address and splitting it into words.\n   * @param email\n   * @private\n   */\n  private emailToUserInputs(email: string): string[] {\n    if (email == null || email.length === 0) {\n      return [];\n    }\n    const atPosition = email.indexOf(\"@\");\n    if (atPosition < 0) {\n      return [];\n    }\n    return email\n      .substring(0, atPosition)\n      .trim()\n      .toLowerCase()\n      .split(/[^A-Za-z0-9]/);\n  }\n}\n","import { SendType } from \"../../enums/send-type\";\nimport { SendFileApi } from \"../api/send-file.api\";\nimport { SendTextApi } from \"../api/send-text.api\";\nimport { Send } from \"../domain/send\";\n\nexport class SendRequest {\n  type: SendType;\n  fileLength?: number;\n  name: string;\n  notes: string;\n  key: string;\n  maxAccessCount?: number;\n  expirationDate: string;\n  deletionDate: string;\n  text: SendTextApi;\n  file: SendFileApi;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(send: Send, fileLength?: number) {\n    this.type = send.type;\n    this.fileLength = fileLength;\n    this.name = send.name ? send.name.encryptedString : null;\n    this.notes = send.notes ? send.notes.encryptedString : null;\n    this.maxAccessCount = send.maxAccessCount;\n    this.expirationDate = send.expirationDate != null ? send.expirationDate.toISOString() : null;\n    this.deletionDate = send.deletionDate != null ? send.deletionDate.toISOString() : null;\n    this.key = send.key != null ? send.key.encryptedString : null;\n    this.password = send.password;\n    this.disabled = send.disabled;\n    this.hideEmail = send.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendTextApi();\n        this.text.text = send.text.text != null ? send.text.text.encryptedString : null;\n        this.text.hidden = send.text.hidden;\n        break;\n      case SendType.File:\n        this.file = new SendFileApi();\n        this.file.fileName = send.file.fileName != null ? send.file.fileName.encryptedString : null;\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { SendType } from \"../../enums/send-type\";\nimport { SendFileApi } from \"../api/send-file.api\";\nimport { SendTextApi } from \"../api/send-text.api\";\n\nexport class SendAccessResponse extends BaseResponse {\n  id: string;\n  type: SendType;\n  name: string;\n  file: SendFileApi;\n  text: SendTextApi;\n  expirationDate: Date;\n  creatorIdentifier: string;\n\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.type = this.getResponseProperty(\"Type\");\n    this.name = this.getResponseProperty(\"Name\");\n\n    const text = this.getResponseProperty(\"Text\");\n    if (text != null) {\n      this.text = new SendTextApi(text);\n    }\n\n    const file = this.getResponseProperty(\"File\");\n    if (file != null) {\n      this.file = new SendFileApi(file);\n    }\n\n    this.expirationDate = this.getResponseProperty(\"ExpirationDate\");\n    this.creatorIdentifier = this.getResponseProperty(\"CreatorIdentifier\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\n\nexport class SendFileDownloadDataResponse extends BaseResponse {\n  id: string = null;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.id = this.getResponseProperty(\"Id\");\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { BaseResponse } from \"../../../../models/response/base.response\";\nimport { FileUploadType } from \"../../../../platform/enums\";\n\nimport { SendResponse } from \"./send.response\";\n\nexport class SendFileUploadDataResponse extends BaseResponse {\n  fileUploadType: FileUploadType;\n  sendResponse: SendResponse;\n  url: string = null;\n  constructor(response: any) {\n    super(response);\n    this.fileUploadType = this.getResponseProperty(\"FileUploadType\");\n    const sendResponse = this.getResponseProperty(\"SendResponse\");\n    this.sendResponse = sendResponse == null ? null : new SendResponse(sendResponse);\n    this.url = this.getResponseProperty(\"Url\");\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { ErrorResponse } from \"../../../models/response/error.response\";\nimport { ListResponse } from \"../../../models/response/list.response\";\nimport {\n  FileUploadApiMethods,\n  FileUploadService,\n} from \"../../../platform/abstractions/file-upload/file-upload.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncArrayBuffer } from \"../../../platform/models/domain/enc-array-buffer\";\nimport { SendType } from \"../enums/send-type\";\nimport { SendData } from \"../models/data/send.data\";\nimport { Send } from \"../models/domain/send\";\nimport { SendAccessRequest } from \"../models/request/send-access.request\";\nimport { SendRequest } from \"../models/request/send.request\";\nimport { SendAccessResponse } from \"../models/response/send-access.response\";\nimport { SendFileDownloadDataResponse } from \"../models/response/send-file-download-data.response\";\nimport { SendFileUploadDataResponse } from \"../models/response/send-file-upload-data.response\";\nimport { SendResponse } from \"../models/response/send.response\";\nimport { SendAccessView } from \"../models/view/send-access.view\";\n\nimport { SendApiService as SendApiServiceAbstraction } from \"./send-api.service.abstraction\";\nimport { InternalSendService } from \"./send.service.abstraction\";\n\nexport class SendApiService implements SendApiServiceAbstraction {\n  constructor(\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n    private sendService: InternalSendService,\n  ) {}\n\n  async getSend(id: string): Promise<SendResponse> {\n    const r = await this.apiService.send(\"GET\", \"/sends/\" + id, null, true, true);\n    return new SendResponse(r);\n  }\n\n  async postSendAccess(\n    id: string,\n    request: SendAccessRequest,\n    apiUrl?: string,\n  ): Promise<SendAccessResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", id);\n    };\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/sends/access/\" + id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader,\n    );\n    return new SendAccessResponse(r);\n  }\n\n  async getSendFileDownloadData(\n    send: SendAccessView,\n    request: SendAccessRequest,\n    apiUrl?: string,\n  ): Promise<SendFileDownloadDataResponse> {\n    const addSendIdHeader = (headers: Headers) => {\n      headers.set(\"Send-Id\", send.id);\n    };\n    const r = await this.apiService.send(\n      \"POST\",\n      \"/sends/\" + send.id + \"/access/file/\" + send.file.id,\n      request,\n      false,\n      true,\n      apiUrl,\n      addSendIdHeader,\n    );\n    return new SendFileDownloadDataResponse(r);\n  }\n\n  async getSends(): Promise<ListResponse<SendResponse>> {\n    const r = await this.apiService.send(\"GET\", \"/sends\", null, true, true);\n    return new ListResponse(r, SendResponse);\n  }\n\n  async postSend(request: SendRequest): Promise<SendResponse> {\n    const r = await this.apiService.send(\"POST\", \"/sends\", request, true, true);\n    return new SendResponse(r);\n  }\n\n  async postFileTypeSend(request: SendRequest): Promise<SendFileUploadDataResponse> {\n    const r = await this.apiService.send(\"POST\", \"/sends/file/v2\", request, true, true);\n    return new SendFileUploadDataResponse(r);\n  }\n\n  async renewSendFileUploadUrl(\n    sendId: string,\n    fileId: string,\n  ): Promise<SendFileUploadDataResponse> {\n    const r = await this.apiService.send(\n      \"GET\",\n      \"/sends/\" + sendId + \"/file/\" + fileId,\n      null,\n      true,\n      true,\n    );\n    return new SendFileUploadDataResponse(r);\n  }\n\n  postSendFile(sendId: string, fileId: string, data: FormData): Promise<any> {\n    return this.apiService.send(\"POST\", \"/sends/\" + sendId + \"/file/\" + fileId, data, true, false);\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async postSendFileLegacy(data: FormData): Promise<SendResponse> {\n    const r = await this.apiService.send(\"POST\", \"/sends/file\", data, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSend(id: string, request: SendRequest): Promise<SendResponse> {\n    const r = await this.apiService.send(\"PUT\", \"/sends/\" + id, request, true, true);\n    return new SendResponse(r);\n  }\n\n  async putSendRemovePassword(id: string): Promise<SendResponse> {\n    const r = await this.apiService.send(\n      \"PUT\",\n      \"/sends/\" + id + \"/remove-password\",\n      null,\n      true,\n      true,\n    );\n    return new SendResponse(r);\n  }\n\n  deleteSend(id: string): Promise<any> {\n    return this.apiService.send(\"DELETE\", \"/sends/\" + id, null, true, false);\n  }\n\n  async save(sendData: [Send, EncArrayBuffer]): Promise<any> {\n    const response = await this.upload(sendData);\n\n    const data = new SendData(response);\n    await this.sendService.upsert(data);\n  }\n\n  async delete(id: string): Promise<any> {\n    await this.deleteSend(id);\n    await this.sendService.delete(id);\n  }\n\n  async removePassword(id: string): Promise<any> {\n    const response = await this.putSendRemovePassword(id);\n    const data = new SendData(response);\n    await this.sendService.upsert(data);\n  }\n\n  // Send File Upload methods\n\n  private async upload(sendData: [Send, EncArrayBuffer]): Promise<SendResponse> {\n    const request = new SendRequest(sendData[0], sendData[1]?.buffer.byteLength);\n    let response: SendResponse;\n    if (sendData[0].id == null) {\n      if (sendData[0].type === SendType.Text) {\n        response = await this.postSend(request);\n      } else {\n        try {\n          const uploadDataResponse = await this.postFileTypeSend(request);\n          response = uploadDataResponse.sendResponse;\n          await this.fileUploadService.upload(\n            uploadDataResponse,\n            sendData[0].file.fileName,\n            sendData[1],\n            this.generateMethods(uploadDataResponse, response),\n          );\n        } catch (e) {\n          if (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) {\n            response = await this.legacyServerSendFileUpload(sendData, request);\n          } else if (e instanceof ErrorResponse) {\n            throw new Error((e as ErrorResponse).getSingleMessage());\n          } else {\n            throw e;\n          }\n        }\n      }\n      sendData[0].id = response.id;\n      sendData[0].accessId = response.accessId;\n    } else {\n      response = await this.putSend(sendData[0].id, request);\n    }\n    return response;\n  }\n\n  private generateMethods(\n    uploadData: SendFileUploadDataResponse,\n    response: SendResponse,\n  ): FileUploadApiMethods {\n    return {\n      postDirect: this.generatePostDirectCallback(response),\n      renewFileUploadUrl: this.generateRenewFileUploadUrlCallback(response.id, response.file.id),\n      rollback: this.generateRollbackCallback(response.id),\n    };\n  }\n\n  private generatePostDirectCallback(sendResponse: SendResponse) {\n    return (data: FormData) => {\n      return this.postSendFile(sendResponse.id, sendResponse.file.id, data);\n    };\n  }\n\n  private generateRenewFileUploadUrlCallback(sendId: string, fileId: string) {\n    return async () => {\n      const renewResponse = await this.renewSendFileUploadUrl(sendId, fileId);\n      return renewResponse?.url;\n    };\n  }\n\n  private generateRollbackCallback(sendId: string) {\n    return () => {\n      return this.deleteSend(sendId);\n    };\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerSendFileUpload(\n    sendData: [Send, EncArrayBuffer],\n    request: SendRequest,\n  ): Promise<SendResponse> {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([sendData[1].buffer], { type: \"application/octet-stream\" });\n      fd.append(\"model\", JSON.stringify(request));\n      fd.append(\"data\", blob, sendData[0].file.fileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"model\", JSON.stringify(request));\n        fd.append(\n          \"data\",\n          Buffer.from(sendData[1].buffer) as any,\n          {\n            filepath: sendData[0].file.fileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any,\n        );\n      } else {\n        throw e;\n      }\n    }\n    return await this.postSendFileLegacy(fd);\n  }\n}\n","import { SEND_DISK, SEND_MEMORY, UserKeyDefinition } from \"../../../platform/state\";\nimport { SendData } from \"../models/data/send.data\";\nimport { SendView } from \"../models/view/send.view\";\n\n/** Encrypted send state stored on disk */\nexport const SEND_USER_ENCRYPTED = UserKeyDefinition.record<SendData>(\n  SEND_DISK,\n  \"sendUserEncrypted\",\n  {\n    deserializer: (obj: SendData) => obj,\n    clearOn: [\"logout\"],\n  },\n);\n\n/** Decrypted send state stored in memory */\nexport const SEND_USER_DECRYPTED = new UserKeyDefinition<SendView[]>(\n  SEND_MEMORY,\n  \"sendUserDecrypted\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [\"lock\"],\n  },\n);\n","import { Observable, firstValueFrom } from \"rxjs\";\n\nimport { ActiveUserState, CombinedState, StateProvider } from \"../../../platform/state\";\nimport { UserId } from \"../../../types/guid\";\nimport { SendData } from \"../models/data/send.data\";\nimport { SendView } from \"../models/view/send.view\";\n\nimport { SEND_USER_DECRYPTED, SEND_USER_ENCRYPTED } from \"./key-definitions\";\nimport { SendStateProvider as SendStateProviderAbstraction } from \"./send-state.provider.abstraction\";\n\n/** State provider for sends */\nexport class SendStateProvider implements SendStateProviderAbstraction {\n  /** Observable for the encrypted sends for an active user */\n  encryptedState$: Observable<CombinedState<Record<string, SendData>>>;\n  /** Observable with the decrypted sends for an active user */\n  decryptedState$: Observable<SendView[]>;\n\n  private activeUserEncryptedState: ActiveUserState<Record<string, SendData>>;\n  private activeUserDecryptedState: ActiveUserState<SendView[]>;\n\n  constructor(protected stateProvider: StateProvider) {\n    this.activeUserEncryptedState = this.stateProvider.getActive(SEND_USER_ENCRYPTED);\n    this.encryptedState$ = this.activeUserEncryptedState.combinedState$;\n\n    this.activeUserDecryptedState = this.stateProvider.getActive(SEND_USER_DECRYPTED);\n    this.decryptedState$ = this.activeUserDecryptedState.state$;\n  }\n\n  /** Gets the encrypted sends from state for an active user */\n  async getEncryptedSends(): Promise<CombinedState<{ [id: string]: SendData }>> {\n    return await firstValueFrom(this.encryptedState$);\n  }\n\n  /** Sets the encrypted send state for an active user */\n  async setEncryptedSends(value: { [id: string]: SendData }, userId: UserId): Promise<void> {\n    await this.stateProvider.getUser(userId, SEND_USER_ENCRYPTED).update(() => value);\n  }\n\n  /** Gets the decrypted sends from state for the active user */\n  async getDecryptedSends(): Promise<SendView[]> {\n    return await firstValueFrom(this.decryptedState$);\n  }\n\n  /** Sets the decrypted send state for an active user */\n  async setDecryptedSends(value: SendView[]): Promise<void> {\n    await this.activeUserDecryptedState.update(() => value);\n  }\n}\n","import { View } from \"../../../../models/view/view\";\nimport { DeepJsonify } from \"../../../../types/deep-jsonify\";\nimport { SendFile } from \"../domain/send-file\";\n\nexport class SendFileView implements View {\n  id: string = null;\n  size: string = null;\n  sizeName: string = null;\n  fileName: string = null;\n\n  constructor(f?: SendFile) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.size = f.size;\n    this.sizeName = f.sizeName;\n  }\n\n  get fileSize(): number {\n    try {\n      if (this.size != null) {\n        return parseInt(this.size, null);\n      }\n    } catch {\n      // Invalid file size.\n    }\n    return 0;\n  }\n\n  static fromJSON(json: DeepJsonify<SendFileView>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new SendFileView(), json);\n  }\n}\n","import { View } from \"../../../../models/view/view\";\nimport { DeepJsonify } from \"../../../../types/deep-jsonify\";\nimport { SendText } from \"../domain/send-text\";\n\nexport class SendTextView implements View {\n  text: string = null;\n  hidden: boolean;\n\n  constructor(t?: SendText) {\n    if (!t) {\n      return;\n    }\n\n    this.hidden = t.hidden;\n  }\n\n  get maskedText(): string {\n    return this.text != null ? \"••••••••\" : null;\n  }\n\n  static fromJSON(json: DeepJsonify<SendTextView>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new SendTextView(), json);\n  }\n}\n","import { View } from \"../../../../models/view/view\";\nimport { Utils } from \"../../../../platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"../../../../platform/models/domain/symmetric-crypto-key\";\nimport { DeepJsonify } from \"../../../../types/deep-jsonify\";\nimport { SendType } from \"../../enums/send-type\";\nimport { Send } from \"../domain/send\";\n\nimport { SendFileView } from \"./send-file.view\";\nimport { SendTextView } from \"./send-text.view\";\n\nexport class SendView implements View {\n  id: string = null;\n  accessId: string = null;\n  name: string = null;\n  notes: string = null;\n  key: Uint8Array;\n  cryptoKey: SymmetricCryptoKey;\n  type: SendType = null;\n  text = new SendTextView();\n  file = new SendFileView();\n  maxAccessCount?: number = null;\n  accessCount = 0;\n  revisionDate: Date = null;\n  deletionDate: Date = null;\n  expirationDate: Date = null;\n  password: string = null;\n  disabled = false;\n  hideEmail = false;\n\n  constructor(s?: Send) {\n    if (!s) {\n      return;\n    }\n\n    this.id = s.id;\n    this.accessId = s.accessId;\n    this.type = s.type;\n    this.maxAccessCount = s.maxAccessCount;\n    this.accessCount = s.accessCount;\n    this.revisionDate = s.revisionDate;\n    this.deletionDate = s.deletionDate;\n    this.expirationDate = s.expirationDate;\n    this.disabled = s.disabled;\n    this.password = s.password;\n    this.hideEmail = s.hideEmail;\n  }\n\n  get urlB64Key(): string {\n    return Utils.fromBufferToUrlB64(this.key);\n  }\n\n  get maxAccessCountReached(): boolean {\n    if (this.maxAccessCount == null) {\n      return false;\n    }\n    return this.accessCount >= this.maxAccessCount;\n  }\n\n  get expired(): boolean {\n    if (this.expirationDate == null) {\n      return false;\n    }\n    return this.expirationDate <= new Date();\n  }\n\n  get pendingDelete(): boolean {\n    return this.deletionDate <= new Date();\n  }\n\n  toJSON() {\n    return Utils.merge(\n      { ...this },\n      {\n        key: Utils.fromBufferToB64(this.key),\n      },\n    );\n  }\n\n  static fromJSON(json: DeepJsonify<SendView>) {\n    if (json == null) {\n      return null;\n    }\n\n    return Object.assign(new SendView(), json, {\n      key: Utils.fromB64ToArray(json.key),\n      cryptoKey: SymmetricCryptoKey.fromJSON(json.cryptoKey),\n      text: SendTextView.fromJSON(json.text),\n      file: SendFileView.fromJSON(json.file),\n      revisionDate: json.revisionDate == null ? null : new Date(json.revisionDate),\n      deletionDate: json.deletionDate == null ? null : new Date(json.deletionDate),\n      expirationDate: json.expirationDate == null ? null : new Date(json.expirationDate),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../../platform/models/domain/symmetric-crypto-key\";\nimport { SendFileData } from \"../data/send-file.data\";\nimport { SendFileView } from \"../view/send-file.view\";\n\nexport class SendFile extends Domain {\n  id: string;\n  size: string;\n  sizeName: string;\n  fileName: EncString;\n\n  constructor(obj?: SendFileData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.size = obj.size;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        sizeName: null,\n        fileName: null,\n      },\n      [\"id\", \"sizeName\"],\n    );\n  }\n\n  async decrypt(key: SymmetricCryptoKey): Promise<SendFileView> {\n    const view = await this.decryptObj(\n      new SendFileView(this),\n      {\n        fileName: null,\n      },\n      null,\n      key,\n    );\n    return view;\n  }\n\n  static fromJSON(obj: Jsonify<SendFile>) {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new SendFile(), obj, {\n      fileName: EncString.fromJSON(obj.fileName),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../../platform/models/domain/symmetric-crypto-key\";\nimport { SendTextData } from \"../data/send-text.data\";\nimport { SendTextView } from \"../view/send-text.view\";\n\nexport class SendText extends Domain {\n  text: EncString;\n  hidden: boolean;\n\n  constructor(obj?: SendTextData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.hidden = obj.hidden;\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        text: null,\n      },\n      [],\n    );\n  }\n\n  decrypt(key: SymmetricCryptoKey): Promise<SendTextView> {\n    return this.decryptObj(\n      new SendTextView(this),\n      {\n        text: null,\n      },\n      null,\n      key,\n    );\n  }\n\n  static fromJSON(obj: Jsonify<SendText>) {\n    if (obj == null) {\n      return null;\n    }\n\n    return Object.assign(new SendText(), obj, {\n      text: EncString.fromJSON(obj.text),\n    });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../../../platform/misc/utils\";\nimport Domain from \"../../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../../platform/models/domain/enc-string\";\nimport { SendType } from \"../../enums/send-type\";\nimport { SendData } from \"../data/send.data\";\nimport { SendView } from \"../view/send.view\";\n\nimport { SendFile } from \"./send-file\";\nimport { SendText } from \"./send-text\";\n\nexport class Send extends Domain {\n  id: string;\n  accessId: string;\n  type: SendType;\n  name: EncString;\n  notes: EncString;\n  file: SendFile;\n  text: SendText;\n  key: EncString;\n  maxAccessCount?: number;\n  accessCount: number;\n  revisionDate: Date;\n  expirationDate: Date;\n  deletionDate: Date;\n  password: string;\n  disabled: boolean;\n  hideEmail: boolean;\n\n  constructor(obj?: SendData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        accessId: null,\n        name: null,\n        notes: null,\n        key: null,\n      },\n      [\"id\", \"accessId\"],\n    );\n\n    this.type = obj.type;\n    this.maxAccessCount = obj.maxAccessCount;\n    this.accessCount = obj.accessCount;\n    this.password = obj.password;\n    this.disabled = obj.disabled;\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n    this.deletionDate = obj.deletionDate != null ? new Date(obj.deletionDate) : null;\n    this.expirationDate = obj.expirationDate != null ? new Date(obj.expirationDate) : null;\n    this.hideEmail = obj.hideEmail;\n\n    switch (this.type) {\n      case SendType.Text:\n        this.text = new SendText(obj.text);\n        break;\n      case SendType.File:\n        this.file = new SendFile(obj.file);\n        break;\n      default:\n        break;\n    }\n  }\n\n  async decrypt(): Promise<SendView> {\n    const model = new SendView(this);\n\n    const cryptoService = Utils.getContainerService().getCryptoService();\n\n    try {\n      model.key = await cryptoService.decryptToBytes(this.key, null);\n      model.cryptoKey = await cryptoService.makeSendKey(model.key);\n    } catch (e) {\n      // TODO: error?\n    }\n\n    await this.decryptObj(\n      model,\n      {\n        name: null,\n        notes: null,\n      },\n      null,\n      model.cryptoKey,\n    );\n\n    switch (this.type) {\n      case SendType.File:\n        model.file = await this.file.decrypt(model.cryptoKey);\n        break;\n      case SendType.Text:\n        model.text = await this.text.decrypt(model.cryptoKey);\n        break;\n      default:\n        break;\n    }\n\n    return model;\n  }\n\n  static fromJSON(obj: Jsonify<Send>) {\n    if (obj == null) {\n      return null;\n    }\n\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    const expirationDate = obj.expirationDate == null ? null : new Date(obj.expirationDate);\n    const deletionDate = obj.deletionDate == null ? null : new Date(obj.deletionDate);\n\n    return Object.assign(new Send(), obj, {\n      key: EncString.fromJSON(obj.key),\n      name: EncString.fromJSON(obj.name),\n      notes: EncString.fromJSON(obj.notes),\n      text: SendText.fromJSON(obj.text),\n      file: SendFile.fromJSON(obj.file),\n      revisionDate,\n      expirationDate,\n      deletionDate,\n    });\n  }\n}\n","import { Send } from \"../domain/send\";\n\nimport { SendRequest } from \"./send.request\";\n\nexport class SendWithIdRequest extends SendRequest {\n  id: string;\n\n  constructor(send: Send) {\n    super(send);\n    this.id = send.id;\n  }\n}\n","import { Observable, concatMap, distinctUntilChanged, firstValueFrom, map } from \"rxjs\";\n\nimport { PBKDF2KdfConfig } from \"../../../auth/models/domain/kdf-config\";\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { EncryptService } from \"../../../platform/abstractions/encrypt.service\";\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { KeyGenerationService } from \"../../../platform/abstractions/key-generation.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncArrayBuffer } from \"../../../platform/models/domain/enc-array-buffer\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { UserId } from \"../../../types/guid\";\nimport { UserKey } from \"../../../types/key\";\nimport { SendType } from \"../enums/send-type\";\nimport { SendData } from \"../models/data/send.data\";\nimport { Send } from \"../models/domain/send\";\nimport { SendFile } from \"../models/domain/send-file\";\nimport { SendText } from \"../models/domain/send-text\";\nimport { SendWithIdRequest } from \"../models/request/send-with-id.request\";\nimport { SendView } from \"../models/view/send.view\";\nimport { SEND_KDF_ITERATIONS } from \"../send-kdf\";\n\nimport { SendStateProvider } from \"./send-state.provider.abstraction\";\nimport { InternalSendService as InternalSendServiceAbstraction } from \"./send.service.abstraction\";\n\nexport class SendService implements InternalSendServiceAbstraction {\n  readonly sendKeySalt = \"bitwarden-send\";\n  readonly sendKeyPurpose = \"send\";\n\n  sends$ = this.stateProvider.encryptedState$.pipe(\n    map(([, record]) => Object.values(record || {}).map((data) => new Send(data))),\n  );\n  sendViews$ = this.stateProvider.encryptedState$.pipe(\n    concatMap(([, record]) =>\n      this.decryptSends(Object.values(record || {}).map((data) => new Send(data))),\n    ),\n  );\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private keyGenerationService: KeyGenerationService,\n    private stateProvider: SendStateProvider,\n    private encryptService: EncryptService,\n  ) {}\n\n  async encrypt(\n    model: SendView,\n    file: File | ArrayBuffer,\n    password: string,\n    key?: SymmetricCryptoKey,\n  ): Promise<[Send, EncArrayBuffer]> {\n    let fileData: EncArrayBuffer = null;\n    const send = new Send();\n    send.id = model.id;\n    send.type = model.type;\n    send.disabled = model.disabled;\n    send.hideEmail = model.hideEmail;\n    send.maxAccessCount = model.maxAccessCount;\n    if (model.key == null) {\n      const key = await this.keyGenerationService.createKeyWithPurpose(\n        128,\n        this.sendKeyPurpose,\n        this.sendKeySalt,\n      );\n      model.key = key.material;\n      model.cryptoKey = key.derivedKey;\n    }\n    if (password != null) {\n      const passwordKey = await this.keyGenerationService.deriveKeyFromPassword(\n        password,\n        model.key,\n        new PBKDF2KdfConfig(SEND_KDF_ITERATIONS),\n      );\n      send.password = passwordKey.keyB64;\n    }\n    if (key == null) {\n      key = await this.cryptoService.getUserKey();\n    }\n    send.key = await this.encryptService.encrypt(model.key, key);\n    send.name = await this.encryptService.encrypt(model.name, model.cryptoKey);\n    send.notes = await this.encryptService.encrypt(model.notes, model.cryptoKey);\n    if (send.type === SendType.Text) {\n      send.text = new SendText();\n      send.text.text = await this.encryptService.encrypt(model.text.text, model.cryptoKey);\n      send.text.hidden = model.text.hidden;\n    } else if (send.type === SendType.File) {\n      send.file = new SendFile();\n      if (file != null) {\n        if (file instanceof ArrayBuffer) {\n          const [name, data] = await this.encryptFileData(\n            model.file.fileName,\n            file,\n            model.cryptoKey,\n          );\n          send.file.fileName = name;\n          fileData = data;\n        } else {\n          fileData = await this.parseFile(send, file, model.cryptoKey);\n        }\n      }\n    }\n\n    return [send, fileData];\n  }\n\n  get$(id: string): Observable<Send | undefined> {\n    return this.sends$.pipe(\n      distinctUntilChanged((oldSends, newSends) => {\n        const oldSend = oldSends.find((oldSend) => oldSend.id === id);\n        const newSend = newSends.find((newSend) => newSend.id === id);\n        if (!oldSend || !newSend) {\n          // If either oldSend or newSend is not found, consider them different\n          return false;\n        }\n\n        // Compare each property of the old and new Send objects\n        const allPropertiesSame = Object.keys(newSend).every((key) => {\n          if (\n            (oldSend[key as keyof Send] != null && newSend[key as keyof Send] === null) ||\n            (oldSend[key as keyof Send] === null && newSend[key as keyof Send] != null)\n          ) {\n            // If a key from either old or new send is not found, and the key from the other send has a value, consider them different\n            return false;\n          }\n\n          switch (key) {\n            case \"name\":\n            case \"notes\":\n            case \"key\":\n              if (oldSend[key] === null && newSend[key] === null) {\n                return true;\n              }\n\n              return oldSend[key].encryptedString === newSend[key].encryptedString;\n            case \"text\":\n              if (oldSend[key].text == null && newSend[key].text == null) {\n                return true;\n              }\n              if (\n                (oldSend[key].text != null && newSend[key].text == null) ||\n                (oldSend[key].text == null && newSend[key].text != null)\n              ) {\n                return false;\n              }\n              return oldSend[key].text.encryptedString === newSend[key].text.encryptedString;\n            case \"file\":\n              //Files are never updated so never will be changed.\n              return true;\n            case \"revisionDate\":\n            case \"expirationDate\":\n            case \"deletionDate\":\n              if (oldSend[key] === null && newSend[key] === null) {\n                return true;\n              }\n              return oldSend[key].getTime() === newSend[key].getTime();\n            default:\n              // For other properties, compare directly\n              return oldSend[key as keyof Send] === newSend[key as keyof Send];\n          }\n        });\n\n        return allPropertiesSame;\n      }),\n      map((sends) => sends.find((o) => o.id === id)),\n    );\n  }\n\n  async getFromState(id: string): Promise<Send> {\n    const [, sends] = await this.stateProvider.getEncryptedSends();\n    // eslint-disable-next-line\n    if (sends == null || !sends.hasOwnProperty(id)) {\n      return null;\n    }\n\n    return new Send(sends[id]);\n  }\n\n  async getAll(): Promise<Send[]> {\n    const [, sends] = await this.stateProvider.getEncryptedSends();\n    const response: Send[] = [];\n    for (const id in sends) {\n      // eslint-disable-next-line\n      if (sends.hasOwnProperty(id)) {\n        response.push(new Send(sends[id]));\n      }\n    }\n    return response;\n  }\n\n  async getAllDecryptedFromState(): Promise<SendView[]> {\n    let decSends = await this.stateProvider.getDecryptedSends();\n    if (decSends != null) {\n      return decSends;\n    }\n\n    decSends = [];\n    const hasKey = await this.cryptoService.hasUserKey();\n    if (!hasKey) {\n      throw new Error(\"No user key found.\");\n    }\n\n    const promises: Promise<any>[] = [];\n    const sends = await this.getAll();\n    sends.forEach((send) => {\n      promises.push(send.decrypt().then((f) => decSends.push(f)));\n    });\n\n    await Promise.all(promises);\n    decSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    await this.stateProvider.setDecryptedSends(decSends);\n    return decSends;\n  }\n\n  async upsert(send: SendData | SendData[]): Promise<any> {\n    const [userId, currentSends] = await this.stateProvider.getEncryptedSends();\n    let sends = currentSends;\n    if (sends == null) {\n      sends = {};\n    }\n    if (send instanceof SendData) {\n      const s = send as SendData;\n      sends[s.id] = s;\n    } else {\n      (send as SendData[]).forEach((s) => {\n        sends[s.id] = s;\n      });\n    }\n\n    await this.replace(sends, userId);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const [userId, sends] = await this.stateProvider.getEncryptedSends();\n    if (sends == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      if (sends[id] == null) {\n        return;\n      }\n      delete sends[id];\n    } else {\n      (id as string[]).forEach((i) => {\n        delete sends[i];\n      });\n    }\n\n    await this.replace(sends, userId);\n  }\n\n  async replace(sends: { [id: string]: SendData }, userId: UserId): Promise<any> {\n    await this.stateProvider.setEncryptedSends(sends, userId);\n  }\n\n  async getRotatedData(\n    originalUserKey: UserKey,\n    newUserKey: UserKey,\n    userId: UserId,\n  ): Promise<SendWithIdRequest[]> {\n    if (newUserKey == null) {\n      throw new Error(\"New user key is required for rotation.\");\n    }\n    if (originalUserKey == null) {\n      throw new Error(\"Original user key is required for rotation.\");\n    }\n\n    const req = await firstValueFrom(\n      this.sends$.pipe(\n        concatMap(async (sends) => this.toRotatedKeyRequestMap(sends, originalUserKey, newUserKey)),\n      ),\n    );\n    // separate return for easier debugging\n    return req;\n  }\n\n  private async toRotatedKeyRequestMap(\n    sends: Send[],\n    originalUserKey: UserKey,\n    rotateUserKey: UserKey,\n  ) {\n    const requests = await Promise.all(\n      sends.map(async (send) => {\n        const sendKey = await this.encryptService.decryptToBytes(send.key, originalUserKey);\n        send.key = await this.encryptService.encrypt(sendKey, rotateUserKey);\n        return new SendWithIdRequest(send);\n      }),\n    );\n    return requests;\n  }\n\n  private parseFile(send: Send, file: File, key: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(file);\n      reader.onload = async (evt) => {\n        try {\n          const [name, data] = await this.encryptFileData(\n            file.name,\n            evt.target.result as ArrayBuffer,\n            key,\n          );\n          send.file.fileName = name;\n          resolve(data);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  private async encryptFileData(\n    fileName: string,\n    data: ArrayBuffer,\n    key: SymmetricCryptoKey,\n  ): Promise<[EncString, EncArrayBuffer]> {\n    if (key == null) {\n      key = await this.cryptoService.getUserKey();\n    }\n    const encFileName = await this.encryptService.encrypt(fileName, key);\n    const encFileData = await this.encryptService.encryptToBytes(new Uint8Array(data), key);\n    return [encFileName, encFileData];\n  }\n\n  private async decryptSends(sends: Send[]) {\n    const decryptSendPromises = sends.map((s) => s.decrypt());\n    const decryptedSends = await Promise.all(decryptSendPromises);\n\n    decryptedSends.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n    return decryptedSends;\n  }\n}\n","export const SEND_KDF_ITERATIONS = 100000;\n","import { CipherView } from \"../view/cipher.view\";\n\nconst CacheTTL = 3000;\n\nexport class SortedCiphersCache {\n  private readonly sortedCiphersByUrl: Map<string, Ciphers> = new Map<string, Ciphers>();\n  private readonly timeouts: Map<string, any> = new Map<string, any>();\n\n  constructor(private readonly comparator: (a: CipherView, b: CipherView) => number) {}\n\n  isCached(url: string) {\n    return this.sortedCiphersByUrl.has(url);\n  }\n\n  addCiphers(url: string, ciphers: CipherView[]) {\n    ciphers.sort(this.comparator);\n    this.sortedCiphersByUrl.set(url, new Ciphers(ciphers));\n    this.resetTimer(url);\n  }\n\n  getLastUsed(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastUsed() : null;\n  }\n\n  getLastLaunched(url: string) {\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getLastLaunched() : null;\n  }\n\n  getNext(url: string) {\n    this.resetTimer(url);\n    return this.isCached(url) ? this.sortedCiphersByUrl.get(url).getNext() : null;\n  }\n\n  updateLastUsedIndex(url: string) {\n    if (this.isCached(url)) {\n      this.sortedCiphersByUrl.get(url).updateLastUsedIndex();\n    }\n  }\n\n  clear() {\n    this.sortedCiphersByUrl.clear();\n    this.timeouts.clear();\n  }\n\n  private resetTimer(url: string) {\n    clearTimeout(this.timeouts.get(url));\n    this.timeouts.set(\n      url,\n      setTimeout(() => {\n        this.sortedCiphersByUrl.delete(url);\n        this.timeouts.delete(url);\n      }, CacheTTL),\n    );\n  }\n}\n\nclass Ciphers {\n  lastUsedIndex = -1;\n\n  constructor(private readonly ciphers: CipherView[]) {}\n\n  getLastUsed() {\n    this.lastUsedIndex = Math.max(this.lastUsedIndex, 0);\n    return this.ciphers[this.lastUsedIndex];\n  }\n\n  getLastLaunched() {\n    const usedCiphers = this.ciphers.filter((cipher) => cipher.localData?.lastLaunched);\n    const sortedCiphers = usedCiphers.sort(\n      (x, y) => y.localData.lastLaunched.valueOf() - x.localData.lastLaunched.valueOf(),\n    );\n    return sortedCiphers[0];\n  }\n\n  getNextIndex() {\n    return (this.lastUsedIndex + 1) % this.ciphers.length;\n  }\n\n  getNext() {\n    return this.ciphers[this.getNextIndex()];\n  }\n\n  updateLastUsedIndex() {\n    this.lastUsedIndex = this.getNextIndex();\n  }\n}\n","export class CipherBulkDeleteRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class CipherBulkMoveRequest {\n  ids: string[];\n  folderId: string;\n\n  constructor(ids: string[], folderId: string) {\n    this.ids = ids == null ? [] : ids;\n    this.folderId = folderId;\n  }\n}\n","export class CipherBulkRestoreRequest {\n  ids: string[];\n  organizationId: string;\n\n  constructor(ids: string[], organizationId?: string) {\n    this.ids = ids == null ? [] : ids;\n    this.organizationId = organizationId;\n  }\n}\n","export class AttachmentRequest {\n  fileName: string;\n  key: string;\n  fileSize: number;\n  adminRequest: boolean;\n}\n","import { CipherRepromptType } from \"../../enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../enums/cipher-type\";\nimport { CardApi } from \"../api/card.api\";\nimport { Fido2CredentialApi } from \"../api/fido2-credential.api\";\nimport { FieldApi } from \"../api/field.api\";\nimport { IdentityApi } from \"../api/identity.api\";\nimport { LoginUriApi } from \"../api/login-uri.api\";\nimport { LoginApi } from \"../api/login.api\";\nimport { SecureNoteApi } from \"../api/secure-note.api\";\nimport { Cipher } from \"../domain/cipher\";\n\nimport { AttachmentRequest } from \"./attachment.request\";\nimport { PasswordHistoryRequest } from \"./password-history.request\";\n\nexport class CipherRequest {\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  name: string;\n  notes: string;\n  favorite: boolean;\n  login: LoginApi;\n  secureNote: SecureNoteApi;\n  card: CardApi;\n  identity: IdentityApi;\n  fields: FieldApi[];\n  passwordHistory: PasswordHistoryRequest[];\n  // Deprecated, remove at some point and rename attachments2 to attachments\n  attachments: { [id: string]: string };\n  attachments2: { [id: string]: AttachmentRequest };\n  lastKnownRevisionDate: Date;\n  reprompt: CipherRepromptType;\n  key: string;\n\n  constructor(cipher: Cipher) {\n    this.type = cipher.type;\n    this.folderId = cipher.folderId;\n    this.organizationId = cipher.organizationId;\n    this.name = cipher.name ? cipher.name.encryptedString : null;\n    this.notes = cipher.notes ? cipher.notes.encryptedString : null;\n    this.favorite = cipher.favorite;\n    this.lastKnownRevisionDate = cipher.revisionDate;\n    this.reprompt = cipher.reprompt;\n    this.key = cipher.key?.encryptedString;\n\n    switch (this.type) {\n      case CipherType.Login:\n        this.login = new LoginApi();\n        this.login.uris =\n          cipher.login.uris?.map((u) => {\n            const uri = new LoginUriApi();\n            uri.uri = u.uri != null ? u.uri.encryptedString : null;\n            uri.match = u.match != null ? u.match : null;\n            uri.uriChecksum = u.uriChecksum != null ? u.uriChecksum.encryptedString : null;\n            return uri;\n          }) ?? [];\n        this.login.username = cipher.login.username ? cipher.login.username.encryptedString : null;\n        this.login.password = cipher.login.password ? cipher.login.password.encryptedString : null;\n        this.login.passwordRevisionDate =\n          cipher.login.passwordRevisionDate != null\n            ? cipher.login.passwordRevisionDate.toISOString()\n            : null;\n        this.login.totp = cipher.login.totp ? cipher.login.totp.encryptedString : null;\n        this.login.autofillOnPageLoad = cipher.login.autofillOnPageLoad;\n\n        if (cipher.login.fido2Credentials != null) {\n          this.login.fido2Credentials = cipher.login.fido2Credentials.map((key) => {\n            const keyApi = new Fido2CredentialApi();\n            keyApi.credentialId =\n              key.credentialId != null ? key.credentialId.encryptedString : null;\n            keyApi.keyType =\n              key.keyType != null ? (key.keyType.encryptedString as \"public-key\") : null;\n            keyApi.keyAlgorithm =\n              key.keyAlgorithm != null ? (key.keyAlgorithm.encryptedString as \"ECDSA\") : null;\n            keyApi.keyCurve =\n              key.keyCurve != null ? (key.keyCurve.encryptedString as \"P-256\") : null;\n            keyApi.keyValue = key.keyValue != null ? key.keyValue.encryptedString : null;\n            keyApi.rpId = key.rpId != null ? key.rpId.encryptedString : null;\n            keyApi.rpName = key.rpName != null ? key.rpName.encryptedString : null;\n            keyApi.counter = key.counter != null ? key.counter.encryptedString : null;\n            keyApi.userHandle = key.userHandle != null ? key.userHandle.encryptedString : null;\n            keyApi.userName = key.userName != null ? key.userName.encryptedString : null;\n            keyApi.userDisplayName =\n              key.userDisplayName != null ? key.userDisplayName.encryptedString : null;\n            keyApi.discoverable =\n              key.discoverable != null ? key.discoverable.encryptedString : null;\n            keyApi.creationDate = key.creationDate != null ? key.creationDate.toISOString() : null;\n            return keyApi;\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteApi();\n        this.secureNote.type = cipher.secureNote.type;\n        break;\n      case CipherType.Card:\n        this.card = new CardApi();\n        this.card.cardholderName =\n          cipher.card.cardholderName != null ? cipher.card.cardholderName.encryptedString : null;\n        this.card.brand = cipher.card.brand != null ? cipher.card.brand.encryptedString : null;\n        this.card.number = cipher.card.number != null ? cipher.card.number.encryptedString : null;\n        this.card.expMonth =\n          cipher.card.expMonth != null ? cipher.card.expMonth.encryptedString : null;\n        this.card.expYear =\n          cipher.card.expYear != null ? cipher.card.expYear.encryptedString : null;\n        this.card.code = cipher.card.code != null ? cipher.card.code.encryptedString : null;\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityApi();\n        this.identity.title =\n          cipher.identity.title != null ? cipher.identity.title.encryptedString : null;\n        this.identity.firstName =\n          cipher.identity.firstName != null ? cipher.identity.firstName.encryptedString : null;\n        this.identity.middleName =\n          cipher.identity.middleName != null ? cipher.identity.middleName.encryptedString : null;\n        this.identity.lastName =\n          cipher.identity.lastName != null ? cipher.identity.lastName.encryptedString : null;\n        this.identity.address1 =\n          cipher.identity.address1 != null ? cipher.identity.address1.encryptedString : null;\n        this.identity.address2 =\n          cipher.identity.address2 != null ? cipher.identity.address2.encryptedString : null;\n        this.identity.address3 =\n          cipher.identity.address3 != null ? cipher.identity.address3.encryptedString : null;\n        this.identity.city =\n          cipher.identity.city != null ? cipher.identity.city.encryptedString : null;\n        this.identity.state =\n          cipher.identity.state != null ? cipher.identity.state.encryptedString : null;\n        this.identity.postalCode =\n          cipher.identity.postalCode != null ? cipher.identity.postalCode.encryptedString : null;\n        this.identity.country =\n          cipher.identity.country != null ? cipher.identity.country.encryptedString : null;\n        this.identity.company =\n          cipher.identity.company != null ? cipher.identity.company.encryptedString : null;\n        this.identity.email =\n          cipher.identity.email != null ? cipher.identity.email.encryptedString : null;\n        this.identity.phone =\n          cipher.identity.phone != null ? cipher.identity.phone.encryptedString : null;\n        this.identity.ssn =\n          cipher.identity.ssn != null ? cipher.identity.ssn.encryptedString : null;\n        this.identity.username =\n          cipher.identity.username != null ? cipher.identity.username.encryptedString : null;\n        this.identity.passportNumber =\n          cipher.identity.passportNumber != null\n            ? cipher.identity.passportNumber.encryptedString\n            : null;\n        this.identity.licenseNumber =\n          cipher.identity.licenseNumber != null\n            ? cipher.identity.licenseNumber.encryptedString\n            : null;\n        break;\n      default:\n        break;\n    }\n\n    if (cipher.fields != null) {\n      this.fields = cipher.fields.map((f) => {\n        const field = new FieldApi();\n        field.type = f.type;\n        field.name = f.name ? f.name.encryptedString : null;\n        field.value = f.value ? f.value.encryptedString : null;\n        field.linkedId = f.linkedId;\n        return field;\n      });\n    }\n\n    if (cipher.passwordHistory != null) {\n      this.passwordHistory = [];\n      cipher.passwordHistory.forEach((ph) => {\n        this.passwordHistory.push({\n          lastUsedDate: ph.lastUsedDate,\n          password: ph.password ? ph.password.encryptedString : null,\n        });\n      });\n    }\n\n    if (cipher.attachments != null) {\n      this.attachments = {};\n      this.attachments2 = {};\n      cipher.attachments.forEach((attachment) => {\n        const fileName = attachment.fileName ? attachment.fileName.encryptedString : null;\n        this.attachments[attachment.id] = fileName;\n        const attachmentRequest = new AttachmentRequest();\n        attachmentRequest.fileName = fileName;\n        if (attachment.key != null) {\n          attachmentRequest.key = attachment.key.encryptedString;\n        }\n        this.attachments2[attachment.id] = attachmentRequest;\n      });\n    }\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipher.request\";\n\nexport class CipherWithIdRequest extends CipherRequest {\n  id: string;\n\n  constructor(cipher: Cipher) {\n    super(cipher);\n    this.id = cipher.id;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherWithIdRequest } from \"./cipher-with-id.request\";\n\nexport class CipherBulkShareRequest {\n  ciphers: CipherWithIdRequest[];\n  collectionIds: string[];\n\n  constructor(ciphers: Cipher[], collectionIds: string[]) {\n    if (ciphers != null) {\n      this.ciphers = [];\n      ciphers.forEach((c) => {\n        this.ciphers.push(new CipherWithIdRequest(c));\n      });\n    }\n    this.collectionIds = collectionIds;\n  }\n}\n","import { CipherId, CollectionId, OrganizationId } from \"../../../types/guid\";\n\nexport class CipherBulkUpdateCollectionsRequest {\n  organizationId: OrganizationId;\n  cipherIds: CipherId[];\n  collectionIds: CollectionId[];\n  removeCollections: boolean;\n  constructor(\n    organizationId: OrganizationId,\n    cipherIds: CipherId[],\n    collectionIds: CollectionId[],\n    removeCollections: boolean = false,\n  ) {\n    this.organizationId = organizationId;\n    this.cipherIds = cipherIds;\n    this.collectionIds = collectionIds;\n    this.removeCollections = removeCollections;\n  }\n}\n","export class CipherCollectionsRequest {\n  collectionIds: string[];\n\n  constructor(collectionIds: string[]) {\n    this.collectionIds = collectionIds == null ? [] : collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipher.request\";\n\nexport class CipherCreateRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nexport class CipherPartialRequest {\n  folderId: string;\n  favorite: boolean;\n\n  constructor(cipher: Cipher) {\n    this.folderId = cipher.folderId;\n    this.favorite = cipher.favorite;\n  }\n}\n","import { Cipher } from \"../domain/cipher\";\n\nimport { CipherRequest } from \"./cipher.request\";\n\nexport class CipherShareRequest {\n  cipher: CipherRequest;\n  collectionIds: string[];\n\n  constructor(cipher: Cipher) {\n    this.cipher = new CipherRequest(cipher);\n    this.collectionIds = cipher.collectionIds;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport {\n  CIPHERS_DISK,\n  CIPHERS_DISK_LOCAL,\n  CIPHERS_MEMORY,\n  UserKeyDefinition,\n} from \"../../../platform/state\";\nimport { CipherId } from \"../../../types/guid\";\nimport { CipherData } from \"../../models/data/cipher.data\";\nimport { LocalData } from \"../../models/data/local.data\";\nimport { CipherView } from \"../../models/view/cipher.view\";\nimport { AddEditCipherInfo } from \"../../types/add-edit-cipher-info\";\n\nexport const ENCRYPTED_CIPHERS = UserKeyDefinition.record<CipherData>(CIPHERS_DISK, \"ciphers\", {\n  deserializer: (obj: Jsonify<CipherData>) => CipherData.fromJSON(obj),\n  clearOn: [\"logout\"],\n});\n\nexport const DECRYPTED_CIPHERS = UserKeyDefinition.record<CipherView>(\n  CIPHERS_MEMORY,\n  \"decryptedCiphers\",\n  {\n    deserializer: (cipher: Jsonify<CipherView>) => CipherView.fromJSON(cipher),\n    clearOn: [\"logout\", \"lock\"],\n  },\n);\n\nexport const LOCAL_DATA_KEY = new UserKeyDefinition<Record<CipherId, LocalData>>(\n  CIPHERS_DISK_LOCAL,\n  \"localData\",\n  {\n    deserializer: (localData) => localData,\n    clearOn: [\"logout\"],\n  },\n);\n\nexport const ADD_EDIT_CIPHER_INFO_KEY = new UserKeyDefinition<AddEditCipherInfo>(\n  CIPHERS_MEMORY,\n  \"addEditCipherInfo\",\n  {\n    deserializer: (addEditCipherInfo: AddEditCipherInfo) => {\n      if (addEditCipherInfo == null) {\n        return null;\n      }\n\n      const cipher =\n        addEditCipherInfo?.cipher.toJSON != null\n          ? addEditCipherInfo.cipher\n          : CipherView.fromJSON(addEditCipherInfo?.cipher as Jsonify<CipherView>);\n\n      return { cipher, collectionIds: addEditCipherInfo.collectionIds };\n    },\n    clearOn: [\"logout\", \"lock\"],\n  },\n);\n","import { firstValueFrom, map, Observable, skipWhile, switchMap } from \"rxjs\";\nimport { SemVer } from \"semver\";\n\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { BulkEncryptService } from \"@bitwarden/common/platform/abstractions/bulk-encrypt.service\";\n\nimport { ApiService } from \"../../abstractions/api.service\";\nimport { SearchService } from \"../../abstractions/search.service\";\nimport { AutofillSettingsServiceAbstraction } from \"../../autofill/services/autofill-settings.service\";\nimport { DomainSettingsService } from \"../../autofill/services/domain-settings.service\";\nimport { UriMatchStrategySetting } from \"../../models/domain/domain-service\";\nimport { ErrorResponse } from \"../../models/response/error.response\";\nimport { ListResponse } from \"../../models/response/list.response\";\nimport { View } from \"../../models/view/view\";\nimport { ConfigService } from \"../../platform/abstractions/config/config.service\";\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { EncryptService } from \"../../platform/abstractions/encrypt.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { sequentialize } from \"../../platform/misc/sequentialize\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport Domain from \"../../platform/models/domain/domain-base\";\nimport { EncArrayBuffer } from \"../../platform/models/domain/enc-array-buffer\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport {\n  ActiveUserState,\n  CIPHERS_MEMORY,\n  DeriveDefinition,\n  DerivedState,\n  StateProvider,\n} from \"../../platform/state\";\nimport { CipherId, CollectionId, OrganizationId, UserId } from \"../../types/guid\";\nimport { OrgKey, UserKey } from \"../../types/key\";\nimport { CipherService as CipherServiceAbstraction } from \"../abstractions/cipher.service\";\nimport { CipherFileUploadService } from \"../abstractions/file-upload/cipher-file-upload.service\";\nimport { FieldType } from \"../enums\";\nimport { CipherType } from \"../enums/cipher-type\";\nimport { CipherData } from \"../models/data/cipher.data\";\nimport { LocalData } from \"../models/data/local.data\";\nimport { Attachment } from \"../models/domain/attachment\";\nimport { Card } from \"../models/domain/card\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Fido2Credential } from \"../models/domain/fido2-credential\";\nimport { Field } from \"../models/domain/field\";\nimport { Identity } from \"../models/domain/identity\";\nimport { Login } from \"../models/domain/login\";\nimport { LoginUri } from \"../models/domain/login-uri\";\nimport { Password } from \"../models/domain/password\";\nimport { SecureNote } from \"../models/domain/secure-note\";\nimport { SortedCiphersCache } from \"../models/domain/sorted-ciphers-cache\";\nimport { CipherBulkDeleteRequest } from \"../models/request/cipher-bulk-delete.request\";\nimport { CipherBulkMoveRequest } from \"../models/request/cipher-bulk-move.request\";\nimport { CipherBulkRestoreRequest } from \"../models/request/cipher-bulk-restore.request\";\nimport { CipherBulkShareRequest } from \"../models/request/cipher-bulk-share.request\";\nimport { CipherBulkUpdateCollectionsRequest } from \"../models/request/cipher-bulk-update-collections.request\";\nimport { CipherCollectionsRequest } from \"../models/request/cipher-collections.request\";\nimport { CipherCreateRequest } from \"../models/request/cipher-create.request\";\nimport { CipherPartialRequest } from \"../models/request/cipher-partial.request\";\nimport { CipherShareRequest } from \"../models/request/cipher-share.request\";\nimport { CipherWithIdRequest } from \"../models/request/cipher-with-id.request\";\nimport { CipherRequest } from \"../models/request/cipher.request\";\nimport { CipherResponse } from \"../models/response/cipher.response\";\nimport { AttachmentView } from \"../models/view/attachment.view\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { FieldView } from \"../models/view/field.view\";\nimport { PasswordHistoryView } from \"../models/view/password-history.view\";\nimport { AddEditCipherInfo } from \"../types/add-edit-cipher-info\";\n\nimport {\n  ADD_EDIT_CIPHER_INFO_KEY,\n  DECRYPTED_CIPHERS,\n  ENCRYPTED_CIPHERS,\n  LOCAL_DATA_KEY,\n} from \"./key-state/ciphers.state\";\n\nconst CIPHER_KEY_ENC_MIN_SERVER_VER = new SemVer(\"2024.2.0\");\n\nexport class CipherService implements CipherServiceAbstraction {\n  private sortedCiphersCache: SortedCiphersCache = new SortedCiphersCache(\n    this.sortCiphersByLastUsed,\n  );\n  private ciphersExpectingUpdate: DerivedState<boolean>;\n\n  localData$: Observable<Record<CipherId, LocalData>>;\n  ciphers$: Observable<Record<CipherId, CipherData>>;\n  cipherViews$: Observable<Record<CipherId, CipherView>>;\n  viewFor$(id: CipherId) {\n    return this.cipherViews$.pipe(map((views) => views[id]));\n  }\n  addEditCipherInfo$: Observable<AddEditCipherInfo>;\n\n  private localDataState: ActiveUserState<Record<CipherId, LocalData>>;\n  private encryptedCiphersState: ActiveUserState<Record<CipherId, CipherData>>;\n  private decryptedCiphersState: ActiveUserState<Record<CipherId, CipherView>>;\n  private addEditCipherInfoState: ActiveUserState<AddEditCipherInfo>;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private domainSettingsService: DomainSettingsService,\n    private apiService: ApiService,\n    private i18nService: I18nService,\n    private searchService: SearchService,\n    private stateService: StateService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private encryptService: EncryptService,\n    private bulkEncryptService: BulkEncryptService,\n    private cipherFileUploadService: CipherFileUploadService,\n    private configService: ConfigService,\n    private stateProvider: StateProvider,\n  ) {\n    this.localDataState = this.stateProvider.getActive(LOCAL_DATA_KEY);\n    this.encryptedCiphersState = this.stateProvider.getActive(ENCRYPTED_CIPHERS);\n    this.decryptedCiphersState = this.stateProvider.getActive(DECRYPTED_CIPHERS);\n    this.addEditCipherInfoState = this.stateProvider.getActive(ADD_EDIT_CIPHER_INFO_KEY);\n    this.ciphersExpectingUpdate = this.stateProvider.getDerived(\n      this.encryptedCiphersState.state$,\n      new DeriveDefinition(CIPHERS_MEMORY, \"ciphersExpectingUpdate\", {\n        derive: (_: Record<CipherId, CipherData>) => false,\n        deserializer: (value) => value,\n      }),\n      {},\n    );\n\n    this.localData$ = this.localDataState.state$.pipe(map((data) => data ?? {}));\n    // First wait for ciphersExpectingUpdate to be false before emitting ciphers\n    this.ciphers$ = this.ciphersExpectingUpdate.state$.pipe(\n      skipWhile((expectingUpdate) => expectingUpdate),\n      switchMap(() => this.encryptedCiphersState.state$),\n      map((ciphers) => ciphers ?? {}),\n    );\n    this.cipherViews$ = this.decryptedCiphersState.state$.pipe(map((views) => views ?? {}));\n    this.addEditCipherInfo$ = this.addEditCipherInfoState.state$;\n  }\n\n  async setDecryptedCipherCache(value: CipherView[], userId: UserId) {\n    // Sometimes we might prematurely decrypt the vault and that will result in no ciphers\n    // if we cache it then we may accidentally return it when it's not right, we'd rather try decryption again.\n    // We still want to set null though, that is the indicator that the cache isn't valid and we should do decryption.\n    if (value == null || value.length !== 0) {\n      await this.setDecryptedCiphers(value, userId);\n    }\n    if (this.searchService != null) {\n      if (value == null) {\n        await this.searchService.clearIndex();\n      } else {\n        await this.searchService.indexCiphers(value);\n      }\n    }\n  }\n\n  private async setDecryptedCiphers(value: CipherView[], userId: UserId) {\n    const cipherViews: { [id: string]: CipherView } = {};\n    value?.forEach((c) => {\n      cipherViews[c.id] = c;\n    });\n    await this.stateProvider.setUserState(DECRYPTED_CIPHERS, cipherViews, userId);\n  }\n\n  async clearCache(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    await this.clearDecryptedCiphersState(userId);\n  }\n\n  async encrypt(\n    model: CipherView,\n    userId: UserId,\n    keyForEncryption?: SymmetricCryptoKey,\n    keyForCipherKeyDecryption?: SymmetricCryptoKey,\n    originalCipher: Cipher = null,\n  ): Promise<Cipher> {\n    if (model.id != null) {\n      if (originalCipher == null) {\n        originalCipher = await this.get(model.id);\n      }\n      if (originalCipher != null) {\n        await this.updateModelfromExistingCipher(model, originalCipher, userId);\n      }\n      this.adjustPasswordHistoryLength(model);\n    }\n\n    const cipher = new Cipher();\n    cipher.id = model.id;\n    cipher.folderId = model.folderId;\n    cipher.favorite = model.favorite;\n    cipher.organizationId = model.organizationId;\n    cipher.type = model.type;\n    cipher.collectionIds = model.collectionIds;\n    cipher.revisionDate = model.revisionDate;\n    cipher.reprompt = model.reprompt;\n    cipher.edit = model.edit;\n\n    if (await this.getCipherKeyEncryptionEnabled()) {\n      cipher.key = originalCipher?.key ?? null;\n      const userOrOrgKey = await this.getKeyForCipherKeyDecryption(cipher, userId);\n      // The keyForEncryption is only used for encrypting the cipher key, not the cipher itself, since cipher key encryption is enabled.\n      // If the caller has provided a key for cipher key encryption, use it. Otherwise, use the user or org key.\n      keyForEncryption ||= userOrOrgKey;\n      // If the caller has provided a key for cipher key decryption, use it. Otherwise, use the user or org key.\n      keyForCipherKeyDecryption ||= userOrOrgKey;\n      return this.encryptCipherWithCipherKey(\n        model,\n        cipher,\n        keyForEncryption,\n        keyForCipherKeyDecryption,\n      );\n    } else {\n      if (keyForEncryption == null && cipher.organizationId != null) {\n        keyForEncryption = await this.cryptoService.getOrgKey(cipher.organizationId);\n        if (keyForEncryption == null) {\n          throw new Error(\"Cannot encrypt cipher for organization. No key.\");\n        }\n      }\n      // We want to ensure that the cipher key is null if cipher key encryption is disabled\n      // so that decryption uses the proper key.\n      cipher.key = null;\n      return this.encryptCipher(model, cipher, keyForEncryption);\n    }\n  }\n\n  async encryptAttachments(\n    attachmentsModel: AttachmentView[],\n    key: SymmetricCryptoKey,\n  ): Promise<Attachment[]> {\n    if (attachmentsModel == null || attachmentsModel.length === 0) {\n      return null;\n    }\n\n    const promises: Promise<any>[] = [];\n    const encAttachments: Attachment[] = [];\n    attachmentsModel.forEach(async (model) => {\n      const attachment = new Attachment();\n      attachment.id = model.id;\n      attachment.size = model.size;\n      attachment.sizeName = model.sizeName;\n      attachment.url = model.url;\n      const promise = this.encryptObjProperty(\n        model,\n        attachment,\n        {\n          fileName: null,\n        },\n        key,\n      ).then(async () => {\n        if (model.key != null) {\n          attachment.key = await this.cryptoService.encrypt(model.key.key, key);\n        }\n        encAttachments.push(attachment);\n      });\n      promises.push(promise);\n    });\n\n    await Promise.all(promises);\n    return encAttachments;\n  }\n\n  async encryptFields(fieldsModel: FieldView[], key: SymmetricCryptoKey): Promise<Field[]> {\n    if (!fieldsModel || !fieldsModel.length) {\n      return null;\n    }\n\n    const self = this;\n    const encFields: Field[] = [];\n    await fieldsModel.reduce(async (promise, field) => {\n      await promise;\n      const encField = await self.encryptField(field, key);\n      encFields.push(encField);\n    }, Promise.resolve());\n\n    return encFields;\n  }\n\n  async encryptField(fieldModel: FieldView, key: SymmetricCryptoKey): Promise<Field> {\n    const field = new Field();\n    field.type = fieldModel.type;\n    field.linkedId = fieldModel.linkedId;\n    // normalize boolean type field values\n    if (fieldModel.type === FieldType.Boolean && fieldModel.value !== \"true\") {\n      fieldModel.value = \"false\";\n    }\n\n    await this.encryptObjProperty(\n      fieldModel,\n      field,\n      {\n        name: null,\n        value: null,\n      },\n      key,\n    );\n\n    return field;\n  }\n\n  async encryptPasswordHistories(\n    phModels: PasswordHistoryView[],\n    key: SymmetricCryptoKey,\n  ): Promise<Password[]> {\n    if (!phModels || !phModels.length) {\n      return null;\n    }\n\n    const self = this;\n    const encPhs: Password[] = [];\n    await phModels.reduce(async (promise, ph) => {\n      await promise;\n      const encPh = await self.encryptPasswordHistory(ph, key);\n      encPhs.push(encPh);\n    }, Promise.resolve());\n\n    return encPhs;\n  }\n\n  async encryptPasswordHistory(\n    phModel: PasswordHistoryView,\n    key: SymmetricCryptoKey,\n  ): Promise<Password> {\n    const ph = new Password();\n    ph.lastUsedDate = phModel.lastUsedDate;\n\n    await this.encryptObjProperty(\n      phModel,\n      ph,\n      {\n        password: null,\n      },\n      key,\n    );\n\n    return ph;\n  }\n\n  async get(id: string): Promise<Cipher> {\n    const ciphers = await firstValueFrom(this.ciphers$);\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id)) {\n      return null;\n    }\n\n    const localData = await firstValueFrom(this.localData$);\n    const cipherId = id as CipherId;\n\n    return new Cipher(ciphers[cipherId], localData ? localData[cipherId] : null);\n  }\n\n  async getAll(): Promise<Cipher[]> {\n    const localData = await firstValueFrom(this.localData$);\n    const ciphers = await firstValueFrom(this.ciphers$);\n    const response: Cipher[] = [];\n    for (const id in ciphers) {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        const cipherId = id as CipherId;\n        response.push(new Cipher(ciphers[cipherId], localData ? localData[cipherId] : null));\n      }\n    }\n    return response;\n  }\n\n  @sequentialize(() => \"getAllDecrypted\")\n  async getAllDecrypted(): Promise<CipherView[]> {\n    let decCiphers = await this.getDecryptedCiphers();\n    if (decCiphers != null && decCiphers.length !== 0) {\n      await this.reindexCiphers();\n      return await this.getDecryptedCiphers();\n    }\n\n    const activeUserId = await firstValueFrom(this.stateProvider.activeUserId$);\n\n    if (activeUserId == null) {\n      return [];\n    }\n\n    decCiphers = await this.decryptCiphers(await this.getAll(), activeUserId);\n\n    await this.setDecryptedCipherCache(decCiphers, activeUserId);\n    return decCiphers;\n  }\n\n  private async getDecryptedCiphers() {\n    return Object.values(await firstValueFrom(this.cipherViews$));\n  }\n\n  private async decryptCiphers(ciphers: Cipher[], userId: UserId) {\n    const keys = await firstValueFrom(this.cryptoService.cipherDecryptionKeys$(userId, true));\n\n    if (keys == null || (keys.userKey == null && Object.keys(keys.orgKeys).length === 0)) {\n      // return early if there are no keys to decrypt with\n      return;\n    }\n\n    // Group ciphers by orgId or under 'null' for the user's ciphers\n    const grouped = ciphers.reduce(\n      (agg, c) => {\n        agg[c.organizationId] ??= [];\n        agg[c.organizationId].push(c);\n        return agg;\n      },\n      {} as Record<string, Cipher[]>,\n    );\n\n    const decCiphers = (\n      await Promise.all(\n        Object.entries(grouped).map(async ([orgId, groupedCiphers]) => {\n          if (await this.configService.getFeatureFlag(FeatureFlag.PM4154_BulkEncryptionService)) {\n            return await this.bulkEncryptService.decryptItems(\n              groupedCiphers,\n              keys.orgKeys[orgId as OrganizationId] ?? keys.userKey,\n            );\n          } else {\n            return await this.encryptService.decryptItems(\n              groupedCiphers,\n              keys.orgKeys[orgId as OrganizationId] ?? keys.userKey,\n            );\n          }\n        }),\n      )\n    )\n      .flat()\n      .sort(this.getLocaleSortingFunction());\n\n    return decCiphers;\n  }\n\n  private async reindexCiphers() {\n    const userId = await this.stateService.getUserId();\n    const reindexRequired =\n      this.searchService != null &&\n      ((await firstValueFrom(this.searchService.indexedEntityId$)) ?? userId) !== userId;\n    if (reindexRequired) {\n      await this.searchService.indexCiphers(await this.getDecryptedCiphers(), userId);\n    }\n  }\n\n  async getAllDecryptedForGrouping(groupingId: string, folder = true): Promise<CipherView[]> {\n    const ciphers = await this.getAllDecrypted();\n\n    return ciphers.filter((cipher) => {\n      if (cipher.isDeleted) {\n        return false;\n      }\n      if (folder && cipher.folderId === groupingId) {\n        return true;\n      } else if (\n        !folder &&\n        cipher.collectionIds != null &&\n        cipher.collectionIds.indexOf(groupingId) > -1\n      ) {\n        return true;\n      }\n\n      return false;\n    });\n  }\n\n  async getAllDecryptedForUrl(\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch: UriMatchStrategySetting = null,\n  ): Promise<CipherView[]> {\n    const ciphers = await this.getAllDecrypted();\n    return await this.filterCiphersForUrl(ciphers, url, includeOtherTypes, defaultMatch);\n  }\n\n  async filterCiphersForUrl(\n    ciphers: CipherView[],\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch: UriMatchStrategySetting = null,\n  ): Promise<CipherView[]> {\n    if (url == null && includeOtherTypes == null) {\n      return [];\n    }\n\n    const equivalentDomains = await firstValueFrom(\n      this.domainSettingsService.getUrlEquivalentDomains(url),\n    );\n    defaultMatch ??= await firstValueFrom(this.domainSettingsService.defaultUriMatchStrategy$);\n\n    return ciphers.filter((cipher) => {\n      const cipherIsLogin = cipher.type === CipherType.Login && cipher.login !== null;\n\n      if (cipher.deletedDate !== null) {\n        return false;\n      }\n\n      if (\n        Array.isArray(includeOtherTypes) &&\n        includeOtherTypes.includes(cipher.type) &&\n        !cipherIsLogin\n      ) {\n        return true;\n      }\n\n      if (cipherIsLogin) {\n        return cipher.login.matchesUri(url, equivalentDomains, defaultMatch);\n      }\n\n      return false;\n    });\n  }\n\n  private async getAllDecryptedCiphersOfType(type: CipherType[]): Promise<CipherView[]> {\n    const ciphers = await this.getAllDecrypted();\n    return ciphers\n      .filter((cipher) => cipher.deletedDate == null && type.includes(cipher.type))\n      .sort((a, b) => this.sortCiphersByLastUsedThenName(a, b));\n  }\n\n  async getAllFromApiForOrganization(organizationId: string): Promise<CipherView[]> {\n    const response = await this.apiService.getCiphersOrganization(organizationId);\n    return await this.decryptOrganizationCiphersResponse(response, organizationId);\n  }\n\n  async getManyFromApiForOrganization(organizationId: string): Promise<CipherView[]> {\n    const response = await this.apiService.send(\n      \"GET\",\n      \"/ciphers/organization-details/assigned?organizationId=\" + organizationId,\n      null,\n      true,\n      true,\n    );\n    return this.decryptOrganizationCiphersResponse(response, organizationId);\n  }\n\n  private async decryptOrganizationCiphersResponse(\n    response: ListResponse<CipherResponse>,\n    organizationId: string,\n  ): Promise<CipherView[]> {\n    if (response?.data == null || response.data.length < 1) {\n      return [];\n    }\n\n    const ciphers = response.data.map((cr) => new Cipher(new CipherData(cr)));\n    const key = await this.cryptoService.getOrgKey(organizationId);\n    let decCiphers: CipherView[] = [];\n    if (await this.configService.getFeatureFlag(FeatureFlag.PM4154_BulkEncryptionService)) {\n      decCiphers = await this.bulkEncryptService.decryptItems(ciphers, key);\n    } else {\n      decCiphers = await this.encryptService.decryptItems(ciphers, key);\n    }\n\n    decCiphers.sort(this.getLocaleSortingFunction());\n    return decCiphers;\n  }\n\n  async getLastUsedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, true, false, autofillOnPageLoad);\n  }\n\n  async getLastLaunchedForUrl(url: string, autofillOnPageLoad = false): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, true, autofillOnPageLoad);\n  }\n\n  async getNextCipherForUrl(url: string): Promise<CipherView> {\n    return this.getCipherForUrl(url, false, false, false);\n  }\n\n  async getNextCardCipher(): Promise<CipherView> {\n    const cacheKey = \"cardCiphers\";\n\n    if (!this.sortedCiphersCache.isCached(cacheKey)) {\n      const ciphers = await this.getAllDecryptedCiphersOfType([CipherType.Card]);\n      if (!ciphers?.length) {\n        return null;\n      }\n\n      this.sortedCiphersCache.addCiphers(cacheKey, ciphers);\n    }\n\n    return this.sortedCiphersCache.getNext(cacheKey);\n  }\n\n  async getNextIdentityCipher(): Promise<CipherView> {\n    const cacheKey = \"identityCiphers\";\n\n    if (!this.sortedCiphersCache.isCached(cacheKey)) {\n      const ciphers = await this.getAllDecryptedCiphersOfType([CipherType.Identity]);\n      if (!ciphers?.length) {\n        return null;\n      }\n\n      this.sortedCiphersCache.addCiphers(cacheKey, ciphers);\n    }\n\n    return this.sortedCiphersCache.getNext(cacheKey);\n  }\n\n  updateLastUsedIndexForUrl(url: string) {\n    this.sortedCiphersCache.updateLastUsedIndex(url);\n  }\n\n  async updateLastUsedDate(id: string): Promise<void> {\n    const userId = await firstValueFrom(this.stateProvider.activeUserId$);\n    let ciphersLocalData = await firstValueFrom(this.localData$);\n\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    const cipherId = id as CipherId;\n    if (ciphersLocalData[cipherId]) {\n      ciphersLocalData[cipherId].lastUsedDate = new Date().getTime();\n    } else {\n      ciphersLocalData[cipherId] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.localDataState.update(() => ciphersLocalData);\n\n    const decryptedCipherCache = await this.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id as CipherId];\n        break;\n      }\n    }\n    await this.setDecryptedCiphers(decryptedCipherCache, userId);\n  }\n\n  async updateLastLaunchedDate(id: string): Promise<void> {\n    const userId = await firstValueFrom(this.stateProvider.activeUserId$);\n    let ciphersLocalData = await firstValueFrom(this.localData$);\n\n    if (!ciphersLocalData) {\n      ciphersLocalData = {};\n    }\n\n    const cipherId = id as CipherId;\n    if (ciphersLocalData[cipherId]) {\n      ciphersLocalData[cipherId].lastLaunched = new Date().getTime();\n    } else {\n      ciphersLocalData[cipherId] = {\n        lastUsedDate: new Date().getTime(),\n      };\n    }\n\n    await this.localDataState.update(() => ciphersLocalData);\n\n    const decryptedCipherCache = await this.getDecryptedCiphers();\n    if (!decryptedCipherCache) {\n      return;\n    }\n\n    for (let i = 0; i < decryptedCipherCache.length; i++) {\n      const cached = decryptedCipherCache[i];\n      if (cached.id === id) {\n        cached.localData = ciphersLocalData[id as CipherId];\n        break;\n      }\n    }\n    await this.setDecryptedCiphers(decryptedCipherCache, userId);\n  }\n\n  async saveNeverDomain(domain: string): Promise<void> {\n    if (domain == null) {\n      return;\n    }\n\n    let domains = await firstValueFrom(this.domainSettingsService.neverDomains$);\n    if (!domains) {\n      domains = {};\n    }\n    domains[domain] = null;\n    await this.domainSettingsService.setNeverDomains(domains);\n  }\n\n  async createWithServer(cipher: Cipher, orgAdmin?: boolean): Promise<Cipher> {\n    let response: CipherResponse;\n    if (orgAdmin && cipher.organizationId != null) {\n      const request = new CipherCreateRequest(cipher);\n      response = await this.apiService.postCipherAdmin(request);\n    } else if (cipher.collectionIds != null) {\n      const request = new CipherCreateRequest(cipher);\n      response = await this.apiService.postCipherCreate(request);\n    } else {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.postCipher(request);\n    }\n    cipher.id = response.id;\n\n    const data = new CipherData(response, cipher.collectionIds);\n    const updated = await this.upsert(data);\n    // No local data for new ciphers\n    return new Cipher(updated[cipher.id as CipherId]);\n  }\n\n  async updateWithServer(\n    cipher: Cipher,\n    orgAdmin?: boolean,\n    isNotClone?: boolean,\n  ): Promise<Cipher> {\n    let response: CipherResponse;\n    if (orgAdmin && isNotClone) {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipherAdmin(cipher.id, request);\n    } else if (cipher.edit) {\n      const request = new CipherRequest(cipher);\n      response = await this.apiService.putCipher(cipher.id, request);\n    } else {\n      const request = new CipherPartialRequest(cipher);\n      response = await this.apiService.putPartialCipher(cipher.id, request);\n    }\n\n    const data = new CipherData(response, cipher.collectionIds);\n    const updated = await this.upsert(data);\n    // updating with server does not change local data\n    return new Cipher(updated[cipher.id as CipherId], cipher.localData);\n  }\n\n  async shareWithServer(\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[],\n    userId: UserId,\n  ): Promise<any> {\n    const attachmentPromises: Promise<any>[] = [];\n    if (cipher.attachments != null) {\n      cipher.attachments.forEach((attachment) => {\n        if (attachment.key == null) {\n          attachmentPromises.push(\n            this.shareAttachmentWithServer(attachment, cipher.id, organizationId),\n          );\n        }\n      });\n    }\n    await Promise.all(attachmentPromises);\n\n    cipher.organizationId = organizationId;\n    cipher.collectionIds = collectionIds;\n    const encCipher = await this.encryptSharedCipher(cipher, userId);\n    const request = new CipherShareRequest(encCipher);\n    const response = await this.apiService.putShareCipher(cipher.id, request);\n    const data = new CipherData(response, collectionIds);\n    await this.upsert(data);\n  }\n\n  async shareManyWithServer(\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[],\n    userId: UserId,\n  ): Promise<any> {\n    const promises: Promise<any>[] = [];\n    const encCiphers: Cipher[] = [];\n    for (const cipher of ciphers) {\n      cipher.organizationId = organizationId;\n      cipher.collectionIds = collectionIds;\n      promises.push(\n        this.encryptSharedCipher(cipher, userId).then((c) => {\n          encCiphers.push(c);\n        }),\n      );\n    }\n    await Promise.all(promises);\n    const request = new CipherBulkShareRequest(encCiphers, collectionIds);\n    try {\n      await this.apiService.putShareCiphers(request);\n    } catch (e) {\n      for (const cipher of ciphers) {\n        cipher.organizationId = null;\n        cipher.collectionIds = null;\n      }\n      throw e;\n    }\n    await this.upsert(encCiphers.map((c) => c.toCipherData()));\n  }\n\n  saveAttachmentWithServer(\n    cipher: Cipher,\n    unencryptedFile: any,\n    userId: UserId,\n    admin = false,\n  ): Promise<Cipher> {\n    return new Promise((resolve, reject) => {\n      const reader = new FileReader();\n      reader.readAsArrayBuffer(unencryptedFile);\n      reader.onload = async (evt: any) => {\n        try {\n          const cData = await this.saveAttachmentRawWithServer(\n            cipher,\n            unencryptedFile.name,\n            evt.target.result,\n            userId,\n            admin,\n          );\n          resolve(cData);\n        } catch (e) {\n          reject(e);\n        }\n      };\n      reader.onerror = () => {\n        reject(\"Error reading file.\");\n      };\n    });\n  }\n\n  async saveAttachmentRawWithServer(\n    cipher: Cipher,\n    filename: string,\n    data: Uint8Array,\n    userId: UserId,\n    admin = false,\n  ): Promise<Cipher> {\n    const encKey = await this.getKeyForCipherKeyDecryption(cipher, userId);\n    const cipherKeyEncryptionEnabled = await this.getCipherKeyEncryptionEnabled();\n\n    const cipherEncKey =\n      cipherKeyEncryptionEnabled && cipher.key != null\n        ? (new SymmetricCryptoKey(\n            await this.encryptService.decryptToBytes(cipher.key, encKey),\n          ) as UserKey)\n        : encKey;\n\n    //if cipher key encryption is disabled but the item has an individual key,\n    //then we rollback to using the user key as the main key of encryption of the item\n    //in order to keep item and it's attachments with the same encryption level\n    if (cipher.key != null && !cipherKeyEncryptionEnabled) {\n      const model = await cipher.decrypt(await this.getKeyForCipherKeyDecryption(cipher, userId));\n      cipher = await this.encrypt(model, userId);\n      await this.updateWithServer(cipher);\n    }\n\n    const encFileName = await this.encryptService.encrypt(filename, cipherEncKey);\n\n    const dataEncKey = await this.cryptoService.makeDataEncKey(cipherEncKey);\n    const encData = await this.encryptService.encryptToBytes(new Uint8Array(data), dataEncKey[0]);\n\n    const response = await this.cipherFileUploadService.upload(\n      cipher,\n      encFileName,\n      encData,\n      admin,\n      dataEncKey,\n    );\n\n    const cData = new CipherData(response, cipher.collectionIds);\n    if (!admin) {\n      await this.upsert(cData);\n    }\n    return new Cipher(cData);\n  }\n\n  async saveCollectionsWithServer(cipher: Cipher): Promise<Cipher> {\n    const request = new CipherCollectionsRequest(cipher.collectionIds);\n    const response = await this.apiService.putCipherCollections(cipher.id, request);\n    // The response will now check for an unavailable value. This value determines whether\n    // the user still has Can Manage access to the item after updating.\n    if (response.unavailable) {\n      await this.delete(cipher.id);\n      return;\n    }\n    const data = new CipherData(response.cipher);\n    const updated = await this.upsert(data);\n    return new Cipher(updated[cipher.id as CipherId], cipher.localData);\n  }\n\n  /**\n   * Bulk update collections for many ciphers with the server\n   * @param orgId\n   * @param cipherIds\n   * @param collectionIds\n   * @param removeCollections - If true, the collectionIds will be removed from the ciphers, otherwise they will be added\n   */\n  async bulkUpdateCollectionsWithServer(\n    orgId: OrganizationId,\n    cipherIds: CipherId[],\n    collectionIds: CollectionId[],\n    removeCollections: boolean = false,\n  ): Promise<void> {\n    const request = new CipherBulkUpdateCollectionsRequest(\n      orgId,\n      cipherIds,\n      collectionIds,\n      removeCollections,\n    );\n\n    await this.apiService.send(\"POST\", \"/ciphers/bulk-collections\", request, true, false);\n\n    // Update the local state\n    const ciphers = await firstValueFrom(this.ciphers$);\n\n    for (const id of cipherIds) {\n      const cipher = ciphers[id];\n      if (cipher) {\n        if (removeCollections) {\n          cipher.collectionIds = cipher.collectionIds?.filter(\n            (cid) => !collectionIds.includes(cid as CollectionId),\n          );\n        } else {\n          // Append to the collectionIds if it's not already there\n          cipher.collectionIds = [...new Set([...(cipher.collectionIds ?? []), ...collectionIds])];\n        }\n      }\n    }\n\n    await this.clearCache();\n    await this.encryptedCiphersState.update(() => ciphers);\n  }\n\n  async upsert(cipher: CipherData | CipherData[]): Promise<Record<CipherId, CipherData>> {\n    const ciphers = cipher instanceof CipherData ? [cipher] : cipher;\n    return await this.updateEncryptedCipherState((current) => {\n      ciphers.forEach((c) => (current[c.id as CipherId] = c));\n      return current;\n    });\n  }\n\n  async replace(ciphers: { [id: string]: CipherData }, userId: UserId): Promise<any> {\n    await this.updateEncryptedCipherState(() => ciphers, userId);\n  }\n\n  /**\n   * Updates ciphers for the currently active user. Inactive users can only clear all ciphers, for now.\n   * @param update update callback for encrypted cipher data\n   * @returns\n   */\n  private async updateEncryptedCipherState(\n    update: (current: Record<CipherId, CipherData>) => Record<CipherId, CipherData>,\n    userId: UserId = null,\n  ): Promise<Record<CipherId, CipherData>> {\n    userId ||= await firstValueFrom(this.stateProvider.activeUserId$);\n    // Store that we should wait for an update to return any ciphers\n    await this.ciphersExpectingUpdate.forceValue(true);\n    await this.clearDecryptedCiphersState(userId);\n    const updatedCiphers = await this.stateProvider\n      .getUser(userId, ENCRYPTED_CIPHERS)\n      .update((current) => {\n        const result = update(current ?? {});\n        return result;\n      });\n    return updatedCiphers;\n  }\n\n  async clear(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    await this.clearEncryptedCiphersState(userId);\n    await this.clearCache(userId);\n  }\n\n  async moveManyWithServer(ids: string[], folderId: string): Promise<any> {\n    await this.apiService.putMoveCiphers(new CipherBulkMoveRequest(ids, folderId));\n\n    let ciphers = await firstValueFrom(this.ciphers$);\n    if (ciphers == null) {\n      ciphers = {};\n    }\n\n    ids.forEach((id) => {\n      // eslint-disable-next-line\n      if (ciphers.hasOwnProperty(id)) {\n        ciphers[id as CipherId].folderId = folderId;\n      }\n    });\n\n    await this.clearCache();\n    await this.encryptedCiphersState.update(() => ciphers);\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    const ciphers = await firstValueFrom(this.ciphers$);\n    if (ciphers == null) {\n      return;\n    }\n\n    if (typeof id === \"string\") {\n      const cipherId = id as CipherId;\n      if (ciphers[cipherId] == null) {\n        return;\n      }\n      delete ciphers[cipherId];\n    } else {\n      (id as CipherId[]).forEach((i) => {\n        delete ciphers[i];\n      });\n    }\n\n    await this.clearCache();\n    await this.encryptedCiphersState.update(() => ciphers);\n  }\n\n  async deleteWithServer(id: string, asAdmin = false): Promise<any> {\n    if (asAdmin) {\n      await this.apiService.deleteCipherAdmin(id);\n    } else {\n      await this.apiService.deleteCipher(id);\n    }\n\n    await this.delete(id);\n  }\n\n  async deleteManyWithServer(ids: string[], asAdmin = false): Promise<any> {\n    const request = new CipherBulkDeleteRequest(ids);\n    if (asAdmin) {\n      await this.apiService.deleteManyCiphersAdmin(request);\n    } else {\n      await this.apiService.deleteManyCiphers(request);\n    }\n    await this.delete(ids);\n  }\n\n  async deleteAttachment(id: string, attachmentId: string): Promise<void> {\n    let ciphers = await firstValueFrom(this.ciphers$);\n    const cipherId = id as CipherId;\n    // eslint-disable-next-line\n    if (ciphers == null || !ciphers.hasOwnProperty(id) || ciphers[cipherId].attachments == null) {\n      return;\n    }\n\n    for (let i = 0; i < ciphers[cipherId].attachments.length; i++) {\n      if (ciphers[cipherId].attachments[i].id === attachmentId) {\n        ciphers[cipherId].attachments.splice(i, 1);\n      }\n    }\n\n    await this.clearCache();\n    await this.encryptedCiphersState.update(() => {\n      if (ciphers == null) {\n        ciphers = {};\n      }\n      return ciphers;\n    });\n  }\n\n  async deleteAttachmentWithServer(id: string, attachmentId: string): Promise<void> {\n    try {\n      await this.apiService.deleteCipherAttachment(id, attachmentId);\n    } catch (e) {\n      return Promise.reject((e as ErrorResponse).getSingleMessage());\n    }\n    await this.deleteAttachment(id, attachmentId);\n  }\n\n  sortCiphersByLastUsed(a: CipherView, b: CipherView): number {\n    const aLastUsed =\n      a.localData && a.localData.lastUsedDate ? (a.localData.lastUsedDate as number) : null;\n    const bLastUsed =\n      b.localData && b.localData.lastUsedDate ? (b.localData.lastUsedDate as number) : null;\n\n    const bothNotNull = aLastUsed != null && bLastUsed != null;\n    if (bothNotNull && aLastUsed < bLastUsed) {\n      return 1;\n    }\n    if (aLastUsed != null && bLastUsed == null) {\n      return -1;\n    }\n\n    if (bothNotNull && aLastUsed > bLastUsed) {\n      return -1;\n    }\n    if (bLastUsed != null && aLastUsed == null) {\n      return 1;\n    }\n\n    return 0;\n  }\n\n  sortCiphersByLastUsedThenName(a: CipherView, b: CipherView): number {\n    const result = this.sortCiphersByLastUsed(a, b);\n    if (result !== 0) {\n      return result;\n    }\n\n    return this.getLocaleSortingFunction()(a, b);\n  }\n\n  getLocaleSortingFunction(): (a: CipherView, b: CipherView) => number {\n    return (a, b) => {\n      let aName = a.name;\n      let bName = b.name;\n\n      if (aName == null && bName != null) {\n        return -1;\n      }\n      if (aName != null && bName == null) {\n        return 1;\n      }\n      if (aName == null && bName == null) {\n        return 0;\n      }\n\n      const result = this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n\n      if (result !== 0 || a.type !== CipherType.Login || b.type !== CipherType.Login) {\n        return result;\n      }\n\n      if (a.login.username != null) {\n        aName += a.login.username;\n      }\n\n      if (b.login.username != null) {\n        bName += b.login.username;\n      }\n\n      return this.i18nService.collator\n        ? this.i18nService.collator.compare(aName, bName)\n        : aName.localeCompare(bName);\n    };\n  }\n\n  async softDelete(id: string | string[]): Promise<any> {\n    let ciphers = await firstValueFrom(this.ciphers$);\n    if (ciphers == null) {\n      return;\n    }\n\n    const setDeletedDate = (cipherId: CipherId) => {\n      if (ciphers[cipherId] == null) {\n        return;\n      }\n      ciphers[cipherId].deletedDate = new Date().toISOString();\n    };\n\n    if (typeof id === \"string\") {\n      setDeletedDate(id as CipherId);\n    } else {\n      (id as string[]).forEach(setDeletedDate);\n    }\n\n    await this.clearCache();\n    await this.encryptedCiphersState.update(() => {\n      if (ciphers == null) {\n        ciphers = {};\n      }\n      return ciphers;\n    });\n  }\n\n  async softDeleteWithServer(id: string, asAdmin = false): Promise<any> {\n    if (asAdmin) {\n      await this.apiService.putDeleteCipherAdmin(id);\n    } else {\n      await this.apiService.putDeleteCipher(id);\n    }\n\n    await this.softDelete(id);\n  }\n\n  async softDeleteManyWithServer(ids: string[], asAdmin = false): Promise<any> {\n    const request = new CipherBulkDeleteRequest(ids);\n    if (asAdmin) {\n      await this.apiService.putDeleteManyCiphersAdmin(request);\n    } else {\n      await this.apiService.putDeleteManyCiphers(request);\n    }\n\n    await this.softDelete(ids);\n  }\n\n  async restore(\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[],\n  ) {\n    let ciphers = await firstValueFrom(this.ciphers$);\n    if (ciphers == null) {\n      return;\n    }\n\n    const clearDeletedDate = (c: { id: string; revisionDate: string }) => {\n      const cipherId = c.id as CipherId;\n      if (ciphers[cipherId] == null) {\n        return;\n      }\n      ciphers[cipherId].deletedDate = null;\n      ciphers[cipherId].revisionDate = c.revisionDate;\n    };\n\n    if (cipher.constructor.name === Array.name) {\n      (cipher as { id: string; revisionDate: string }[]).forEach(clearDeletedDate);\n    } else {\n      clearDeletedDate(cipher as { id: string; revisionDate: string });\n    }\n\n    await this.clearCache();\n    await this.encryptedCiphersState.update(() => {\n      if (ciphers == null) {\n        ciphers = {};\n      }\n      return ciphers;\n    });\n  }\n\n  async restoreWithServer(id: string, asAdmin = false): Promise<any> {\n    let response;\n    if (asAdmin) {\n      response = await this.apiService.putRestoreCipherAdmin(id);\n    } else {\n      response = await this.apiService.putRestoreCipher(id);\n    }\n\n    await this.restore({ id: id, revisionDate: response.revisionDate });\n  }\n\n  /**\n   * No longer using an asAdmin Param. Org Vault bulkRestore will assess if an item is unassigned or editable\n   * The Org Vault will pass those ids an array as well as the orgId when calling bulkRestore\n   */\n  async restoreManyWithServer(ids: string[], orgId: string = null): Promise<void> {\n    let response;\n\n    if (orgId) {\n      const request = new CipherBulkRestoreRequest(ids, orgId);\n      response = await this.apiService.putRestoreManyCiphersAdmin(request);\n    } else {\n      const request = new CipherBulkRestoreRequest(ids);\n      response = await this.apiService.putRestoreManyCiphers(request);\n    }\n\n    const restores: { id: string; revisionDate: string }[] = [];\n    for (const cipher of response.data) {\n      restores.push({ id: cipher.id, revisionDate: cipher.revisionDate });\n    }\n    await this.restore(restores);\n  }\n\n  async getKeyForCipherKeyDecryption(cipher: Cipher, userId: UserId): Promise<UserKey | OrgKey> {\n    return (\n      (await this.cryptoService.getOrgKey(cipher.organizationId)) ||\n      ((await this.cryptoService.getUserKeyWithLegacySupport(userId)) as UserKey)\n    );\n  }\n\n  async setAddEditCipherInfo(value: AddEditCipherInfo) {\n    await this.addEditCipherInfoState.update(() => value, {\n      shouldUpdate: (current) => !(current == null && value == null),\n    });\n  }\n\n  async getRotatedData(\n    originalUserKey: UserKey,\n    newUserKey: UserKey,\n    userId: UserId,\n  ): Promise<CipherWithIdRequest[]> {\n    if (originalUserKey == null) {\n      throw new Error(\"Original user key is required to rotate ciphers\");\n    }\n    if (newUserKey == null) {\n      throw new Error(\"New user key is required to rotate ciphers\");\n    }\n\n    let encryptedCiphers: CipherWithIdRequest[] = [];\n\n    const ciphers = await this.getAllDecrypted();\n    if (!ciphers) {\n      return encryptedCiphers;\n    }\n\n    const userCiphers = ciphers.filter((c) => c.organizationId == null);\n    if (userCiphers.length === 0) {\n      return encryptedCiphers;\n    }\n    encryptedCiphers = await Promise.all(\n      userCiphers.map(async (cipher) => {\n        const encryptedCipher = await this.encrypt(cipher, userId, newUserKey, originalUserKey);\n        return new CipherWithIdRequest(encryptedCipher);\n      }),\n    );\n\n    return encryptedCiphers;\n  }\n\n  // Helpers\n\n  // In the case of a cipher that is being shared with an organization, we want to decrypt the\n  // cipher key with the user's key and then re-encrypt it with the organization's key.\n  private async encryptSharedCipher(model: CipherView, userId: UserId): Promise<Cipher> {\n    const keyForCipherKeyDecryption = await this.cryptoService.getUserKeyWithLegacySupport(userId);\n    return await this.encrypt(model, userId, null, keyForCipherKeyDecryption);\n  }\n\n  private async updateModelfromExistingCipher(\n    model: CipherView,\n    originalCipher: Cipher,\n    userId: UserId,\n  ): Promise<void> {\n    const existingCipher = await originalCipher.decrypt(\n      await this.getKeyForCipherKeyDecryption(originalCipher, userId),\n    );\n    model.passwordHistory = existingCipher.passwordHistory || [];\n    if (model.type === CipherType.Login && existingCipher.type === CipherType.Login) {\n      if (\n        existingCipher.login.password != null &&\n        existingCipher.login.password !== \"\" &&\n        existingCipher.login.password !== model.login.password\n      ) {\n        const ph = new PasswordHistoryView();\n        ph.password = existingCipher.login.password;\n        ph.lastUsedDate = model.login.passwordRevisionDate = new Date();\n        model.passwordHistory.splice(0, 0, ph);\n      } else {\n        model.login.passwordRevisionDate = existingCipher.login.passwordRevisionDate;\n      }\n    }\n    if (existingCipher.hasFields) {\n      const existingHiddenFields = existingCipher.fields.filter(\n        (f) =>\n          f.type === FieldType.Hidden &&\n          f.name != null &&\n          f.name !== \"\" &&\n          f.value != null &&\n          f.value !== \"\",\n      );\n      const hiddenFields =\n        model.fields == null\n          ? []\n          : model.fields.filter(\n              (f) => f.type === FieldType.Hidden && f.name != null && f.name !== \"\",\n            );\n      existingHiddenFields.forEach((ef) => {\n        const matchedField = hiddenFields.find((f) => f.name === ef.name);\n        if (matchedField == null || matchedField.value !== ef.value) {\n          const ph = new PasswordHistoryView();\n          ph.password = ef.name + \": \" + ef.value;\n          ph.lastUsedDate = new Date();\n          model.passwordHistory.splice(0, 0, ph);\n        }\n      });\n    }\n  }\n\n  private adjustPasswordHistoryLength(model: CipherView) {\n    if (model.passwordHistory != null && model.passwordHistory.length === 0) {\n      model.passwordHistory = null;\n    } else if (model.passwordHistory != null && model.passwordHistory.length > 5) {\n      // only save last 5 history\n      model.passwordHistory = model.passwordHistory.slice(0, 5);\n    }\n  }\n\n  private async shareAttachmentWithServer(\n    attachmentView: AttachmentView,\n    cipherId: string,\n    organizationId: string,\n  ): Promise<any> {\n    const attachmentResponse = await this.apiService.nativeFetch(\n      new Request(attachmentView.url, { cache: \"no-store\" }),\n    );\n    if (attachmentResponse.status !== 200) {\n      throw Error(\"Failed to download attachment: \" + attachmentResponse.status.toString());\n    }\n\n    const encBuf = await EncArrayBuffer.fromResponse(attachmentResponse);\n    const decBuf = await this.cryptoService.decryptFromBytes(encBuf, null);\n\n    let encKey: UserKey | OrgKey;\n    encKey = await this.cryptoService.getOrgKey(organizationId);\n    encKey ||= (await this.cryptoService.getUserKeyWithLegacySupport()) as UserKey;\n\n    const dataEncKey = await this.cryptoService.makeDataEncKey(encKey);\n\n    const encFileName = await this.encryptService.encrypt(attachmentView.fileName, encKey);\n    const encData = await this.encryptService.encryptToBytes(new Uint8Array(decBuf), dataEncKey[0]);\n\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", dataEncKey[1].encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", dataEncKey[1].encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any,\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    try {\n      await this.apiService.postShareCipherAttachment(\n        cipherId,\n        attachmentView.id,\n        fd,\n        organizationId,\n      );\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n  }\n\n  private async encryptObjProperty<V extends View, D extends Domain>(\n    model: V,\n    obj: D,\n    map: any,\n    key: SymmetricCryptoKey,\n  ): Promise<void> {\n    const promises = [];\n    const self = this;\n\n    for (const prop in map) {\n      // eslint-disable-next-line\n      if (!map.hasOwnProperty(prop)) {\n        continue;\n      }\n\n      (function (theProp, theObj) {\n        const p = Promise.resolve()\n          .then(() => {\n            const modelProp = (model as any)[map[theProp] || theProp];\n            if (modelProp && modelProp !== \"\") {\n              return self.cryptoService.encrypt(modelProp, key);\n            }\n            return null;\n          })\n          .then((val: EncString) => {\n            (theObj as any)[theProp] = val;\n          });\n        promises.push(p);\n      })(prop, obj);\n    }\n\n    await Promise.all(promises);\n  }\n\n  private async encryptCipherData(cipher: Cipher, model: CipherView, key: SymmetricCryptoKey) {\n    switch (cipher.type) {\n      case CipherType.Login:\n        cipher.login = new Login();\n        cipher.login.passwordRevisionDate = model.login.passwordRevisionDate;\n        cipher.login.autofillOnPageLoad = model.login.autofillOnPageLoad;\n        await this.encryptObjProperty(\n          model.login,\n          cipher.login,\n          {\n            username: null,\n            password: null,\n            totp: null,\n          },\n          key,\n        );\n\n        if (model.login.uris != null) {\n          cipher.login.uris = [];\n          model.login.uris = model.login.uris.filter((u) => u.uri != null && u.uri !== \"\");\n          for (let i = 0; i < model.login.uris.length; i++) {\n            const loginUri = new LoginUri();\n            loginUri.match = model.login.uris[i].match;\n            await this.encryptObjProperty(\n              model.login.uris[i],\n              loginUri,\n              {\n                uri: null,\n              },\n              key,\n            );\n            const uriHash = await this.encryptService.hash(model.login.uris[i].uri, \"sha256\");\n            loginUri.uriChecksum = await this.cryptoService.encrypt(uriHash, key);\n            cipher.login.uris.push(loginUri);\n          }\n        }\n\n        if (model.login.fido2Credentials != null) {\n          cipher.login.fido2Credentials = await Promise.all(\n            model.login.fido2Credentials.map(async (viewKey) => {\n              const domainKey = new Fido2Credential();\n              await this.encryptObjProperty(\n                viewKey,\n                domainKey,\n                {\n                  credentialId: null,\n                  keyType: null,\n                  keyAlgorithm: null,\n                  keyCurve: null,\n                  keyValue: null,\n                  rpId: null,\n                  rpName: null,\n                  userHandle: null,\n                  userName: null,\n                  userDisplayName: null,\n                  origin: null,\n                },\n                key,\n              );\n              domainKey.counter = await this.cryptoService.encrypt(String(viewKey.counter), key);\n              domainKey.discoverable = await this.cryptoService.encrypt(\n                String(viewKey.discoverable),\n                key,\n              );\n              domainKey.creationDate = viewKey.creationDate;\n              return domainKey;\n            }),\n          );\n        }\n        return;\n      case CipherType.SecureNote:\n        cipher.secureNote = new SecureNote();\n        cipher.secureNote.type = model.secureNote.type;\n        return;\n      case CipherType.Card:\n        cipher.card = new Card();\n        await this.encryptObjProperty(\n          model.card,\n          cipher.card,\n          {\n            cardholderName: null,\n            brand: null,\n            number: null,\n            expMonth: null,\n            expYear: null,\n            code: null,\n          },\n          key,\n        );\n        return;\n      case CipherType.Identity:\n        cipher.identity = new Identity();\n        await this.encryptObjProperty(\n          model.identity,\n          cipher.identity,\n          {\n            title: null,\n            firstName: null,\n            middleName: null,\n            lastName: null,\n            address1: null,\n            address2: null,\n            address3: null,\n            city: null,\n            state: null,\n            postalCode: null,\n            country: null,\n            company: null,\n            email: null,\n            phone: null,\n            ssn: null,\n            username: null,\n            passportNumber: null,\n            licenseNumber: null,\n          },\n          key,\n        );\n        return;\n      default:\n        throw new Error(\"Unknown cipher type.\");\n    }\n  }\n\n  private async getAutofillOnPageLoadDefault() {\n    return await firstValueFrom(this.autofillSettingsService.autofillOnPageLoadDefault$);\n  }\n\n  private async getCipherForUrl(\n    url: string,\n    lastUsed: boolean,\n    lastLaunched: boolean,\n    autofillOnPageLoad: boolean,\n  ): Promise<CipherView> {\n    const cacheKey = autofillOnPageLoad ? \"autofillOnPageLoad-\" + url : url;\n\n    if (!this.sortedCiphersCache.isCached(cacheKey)) {\n      let ciphers = await this.getAllDecryptedForUrl(url);\n      if (!ciphers) {\n        return null;\n      }\n\n      if (autofillOnPageLoad) {\n        const autofillOnPageLoadDefault = await this.getAutofillOnPageLoadDefault();\n\n        ciphers = ciphers.filter(\n          (cipher) =>\n            cipher.login.autofillOnPageLoad ||\n            (cipher.login.autofillOnPageLoad == null && autofillOnPageLoadDefault !== false),\n        );\n        if (ciphers.length === 0) {\n          return null;\n        }\n      }\n\n      this.sortedCiphersCache.addCiphers(cacheKey, ciphers);\n    }\n\n    if (lastLaunched) {\n      return this.sortedCiphersCache.getLastLaunched(cacheKey);\n    } else if (lastUsed) {\n      return this.sortedCiphersCache.getLastUsed(cacheKey);\n    } else {\n      return this.sortedCiphersCache.getNext(cacheKey);\n    }\n  }\n\n  private async clearEncryptedCiphersState(userId: UserId) {\n    await this.stateProvider.setUserState(ENCRYPTED_CIPHERS, {}, userId);\n  }\n\n  private async clearDecryptedCiphersState(userId: UserId) {\n    await this.setDecryptedCiphers(null, userId);\n    this.clearSortedCiphers();\n  }\n\n  private clearSortedCiphers() {\n    this.sortedCiphersCache.clear();\n  }\n\n  private async encryptCipher(\n    model: CipherView,\n    cipher: Cipher,\n    key: SymmetricCryptoKey,\n  ): Promise<Cipher> {\n    await Promise.all([\n      this.encryptObjProperty(\n        model,\n        cipher,\n        {\n          name: null,\n          notes: null,\n        },\n        key,\n      ),\n      this.encryptCipherData(cipher, model, key),\n      this.encryptFields(model.fields, key).then((fields) => {\n        cipher.fields = fields;\n      }),\n      this.encryptPasswordHistories(model.passwordHistory, key).then((ph) => {\n        cipher.passwordHistory = ph;\n      }),\n      this.encryptAttachments(model.attachments, key).then((attachments) => {\n        cipher.attachments = attachments;\n      }),\n    ]);\n    return cipher;\n  }\n\n  private async encryptCipherWithCipherKey(\n    model: CipherView,\n    cipher: Cipher,\n    keyForCipherKeyEncryption: SymmetricCryptoKey,\n    keyForCipherKeyDecryption: SymmetricCryptoKey,\n  ): Promise<Cipher> {\n    // First, we get the key for cipher key encryption, in its decrypted form\n    let decryptedCipherKey: SymmetricCryptoKey;\n    if (cipher.key == null) {\n      decryptedCipherKey = await this.cryptoService.makeCipherKey();\n    } else {\n      decryptedCipherKey = new SymmetricCryptoKey(\n        await this.encryptService.decryptToBytes(cipher.key, keyForCipherKeyDecryption),\n      );\n    }\n\n    // Then, we have to encrypt the cipher key with the proper key.\n    cipher.key = await this.encryptService.encrypt(\n      decryptedCipherKey.key,\n      keyForCipherKeyEncryption,\n    );\n\n    // Finally, we can encrypt the cipher with the decrypted cipher key.\n    return this.encryptCipher(model, cipher, decryptedCipherKey);\n  }\n\n  private async getCipherKeyEncryptionEnabled(): Promise<boolean> {\n    const featureEnabled = await this.configService.getFeatureFlag(FeatureFlag.CipherKeyEncryption);\n    const meetsServerVersion = await firstValueFrom(\n      this.configService.checkServerMeetsVersionRequirement$(CIPHER_KEY_ENC_MIN_SERVER_VER),\n    );\n    return featureEnabled && meetsServerVersion;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Organization } from \"../../../admin-console/models/domain/organization\";\nimport { View } from \"../../../models/view/view\";\nimport { Collection } from \"../domain/collection\";\nimport { ITreeNodeObject } from \"../domain/tree-node\";\nimport { CollectionAccessDetailsResponse } from \"../response/collection.response\";\n\nexport const NestingDelimiter = \"/\";\n\nexport class CollectionView implements View, ITreeNodeObject {\n  id: string = null;\n  organizationId: string = null;\n  name: string = null;\n  externalId: string = null;\n  // readOnly applies to the items within a collection\n  readOnly: boolean = null;\n  hidePasswords: boolean = null;\n  manage: boolean = null;\n  assigned: boolean = null;\n\n  constructor(c?: Collection | CollectionAccessDetailsResponse) {\n    if (!c) {\n      return;\n    }\n\n    this.id = c.id;\n    this.organizationId = c.organizationId;\n    this.externalId = c.externalId;\n    if (c instanceof Collection) {\n      this.readOnly = c.readOnly;\n      this.hidePasswords = c.hidePasswords;\n      this.manage = c.manage;\n      this.assigned = true;\n    }\n    if (c instanceof CollectionAccessDetailsResponse) {\n      this.assigned = c.assigned;\n    }\n  }\n\n  canEditItems(org: Organization, restrictProviderAccess: boolean): boolean {\n    if (org != null && org.id !== this.organizationId) {\n      throw new Error(\n        \"Id of the organization provided does not match the org id of the collection.\",\n      );\n    }\n\n    return (\n      org?.canEditAllCiphers(restrictProviderAccess) ||\n      this.manage ||\n      (this.assigned && !this.readOnly)\n    );\n  }\n\n  /**\n   * Returns true if the user can edit a collection (including user and group access) from the individual vault.\n   * Does not include admin permissions - see {@link CollectionAdminView.canEdit}.\n   */\n  canEdit(org: Organization): boolean {\n    if (org != null && org.id !== this.organizationId) {\n      throw new Error(\n        \"Id of the organization provided does not match the org id of the collection.\",\n      );\n    }\n\n    return this.manage;\n  }\n\n  /**\n   * Returns true if the user can delete a collection from the individual vault.\n   * Does not include admin permissions - see {@link CollectionAdminView.canDelete}.\n   */\n  canDelete(org: Organization): boolean {\n    if (org != null && org.id !== this.organizationId) {\n      throw new Error(\n        \"Id of the organization provided does not match the org id of the collection.\",\n      );\n    }\n\n    const canDeleteManagedCollections = !org?.limitCollectionCreationDeletion || org.isAdmin;\n\n    // Only use individual permissions, not admin permissions\n    return canDeleteManagedCollections && this.manage;\n  }\n\n  /**\n   * Returns true if the user can view collection info and access in a read-only state from the individual vault\n   */\n  canViewCollectionInfo(org: Organization | undefined): boolean {\n    return false;\n  }\n\n  static fromJSON(obj: Jsonify<CollectionView>) {\n    return Object.assign(new CollectionView(new Collection()), obj);\n  }\n}\n","import Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { OrgKey } from \"../../../types/key\";\nimport { CollectionData } from \"../data/collection.data\";\nimport { CollectionView } from \"../view/collection.view\";\n\nexport class Collection extends Domain {\n  id: string;\n  organizationId: string;\n  name: EncString;\n  externalId: string;\n  readOnly: boolean;\n  hidePasswords: boolean;\n  manage: boolean;\n\n  constructor(obj?: CollectionData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        organizationId: null,\n        name: null,\n        externalId: null,\n        readOnly: null,\n        hidePasswords: null,\n        manage: null,\n      },\n      [\"id\", \"organizationId\", \"readOnly\", \"hidePasswords\", \"manage\"],\n    );\n  }\n\n  decrypt(orgKey: OrgKey): Promise<CollectionView> {\n    return this.decryptObj(\n      new CollectionView(this),\n      {\n        name: null,\n      },\n      this.organizationId,\n      orgKey,\n    );\n  }\n}\n","export class TreeNode<T extends ITreeNodeObject> {\n  node: T;\n  parent: TreeNode<T>;\n  children: TreeNode<T>[] = [];\n\n  constructor(node: T, parent: TreeNode<T>, name?: string, id?: string) {\n    this.parent = parent;\n    this.node = node;\n    if (name) {\n      this.node.name = name;\n    }\n    if (id) {\n      this.node.id = id;\n    }\n  }\n}\n\nexport interface ITreeNodeObject {\n  id: string;\n  name: string;\n}\n","import { ITreeNodeObject, TreeNode } from \"./models/domain/tree-node\";\n\nexport class ServiceUtils {\n  /**\n   * Recursively adds a node to nodeTree\n   * @param {TreeNode<ITreeNodeObject>[]} nodeTree - An array of TreeNodes that the node will be added to\n   * @param {number} partIndex - Index of the `parts` array that is being processed\n   * @param {string[]} parts - Array of strings that represent the path to the `obj` node\n   * @param {ITreeNodeObject} obj - The node to be added to the tree\n   * @param {ITreeNodeObject} parent - The parent node of the `obj` node\n   * @param {string} delimiter - The delimiter used to split the path string, will be used to combine the path for missing nodes\n   */\n  static nestedTraverse(\n    nodeTree: TreeNode<ITreeNodeObject>[],\n    partIndex: number,\n    parts: string[],\n    obj: ITreeNodeObject,\n    parent: TreeNode<ITreeNodeObject> | undefined,\n    delimiter: string,\n  ) {\n    if (parts.length <= partIndex) {\n      return;\n    }\n\n    const end: boolean = partIndex === parts.length - 1;\n    const partName: string = parts[partIndex];\n\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.name !== partName) {\n        continue;\n      }\n      if (end && nodeTree[i].node.id !== obj.id) {\n        // Another node exists with the same name as the node being added\n        nodeTree.push(new TreeNode(obj, parent, partName));\n        return;\n      }\n      // Move down the tree to the next level\n      ServiceUtils.nestedTraverse(\n        nodeTree[i].children,\n        partIndex + 1,\n        parts,\n        obj,\n        nodeTree[i],\n        delimiter,\n      );\n      return;\n    }\n\n    // If there's no node here with the same name...\n    if (nodeTree.filter((n) => n.node.name === partName).length === 0) {\n      // And we're at the end of the path given, add the node\n      if (end) {\n        nodeTree.push(new TreeNode(obj, parent, partName));\n        return;\n      }\n      // And we're not at the end of the path, combine the current name with the next name\n      // 1, *1.2, 1.2.1 becomes\n      // 1, *1.2/1.2.1\n      const newPartName = partName + delimiter + parts[partIndex + 1];\n      ServiceUtils.nestedTraverse(\n        nodeTree,\n        0,\n        [newPartName, ...parts.slice(partIndex + 2)],\n        obj,\n        parent,\n        delimiter,\n      );\n    }\n  }\n\n  /**\n   * Searches a tree for a node with a matching `id`\n   * @param {TreeNode<T>} nodeTree - A single TreeNode branch that will be searched\n   * @param {string} id - The id of the node to be found\n   * @returns {TreeNode<T>} The node with a matching `id`\n   */\n  static getTreeNodeObject<T extends ITreeNodeObject>(\n    nodeTree: TreeNode<T>,\n    id: string,\n  ): TreeNode<T> {\n    if (nodeTree.node.id === id) {\n      return nodeTree;\n    }\n    for (let i = 0; i < nodeTree.children.length; i++) {\n      if (nodeTree.children[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObject(nodeTree.children[i], id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n\n  /**\n   * Searches an array of tree nodes for a node with a matching `id`\n   * @param {TreeNode<T>} nodeTree - An array of TreeNode branches that will be searched\n   * @param {string} id - The id of the node to be found\n   * @returns {TreeNode<T>} The node with a matching `id`\n   */\n  static getTreeNodeObjectFromList<T extends ITreeNodeObject>(\n    nodeTree: TreeNode<T>[],\n    id: string,\n  ): TreeNode<T> {\n    for (let i = 0; i < nodeTree.length; i++) {\n      if (nodeTree[i].node.id === id) {\n        return nodeTree[i];\n      } else if (nodeTree[i].children != null) {\n        const node = ServiceUtils.getTreeNodeObjectFromList(nodeTree[i].children, id);\n        if (node !== null) {\n          return node;\n        }\n      }\n    }\n    return null;\n  }\n}\n","import { firstValueFrom, map, Observable } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { CryptoService } from \"../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../platform/abstractions/i18n.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport {\n  ActiveUserState,\n  StateProvider,\n  COLLECTION_DATA,\n  DeriveDefinition,\n  DerivedState,\n  UserKeyDefinition,\n} from \"../../platform/state\";\nimport { CollectionId, OrganizationId, UserId } from \"../../types/guid\";\nimport { CollectionService as CollectionServiceAbstraction } from \"../../vault/abstractions/collection.service\";\nimport { CollectionData } from \"../models/data/collection.data\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/tree-node\";\nimport { CollectionView } from \"../models/view/collection.view\";\nimport { ServiceUtils } from \"../service-utils\";\n\nconst ENCRYPTED_COLLECTION_DATA_KEY = UserKeyDefinition.record<CollectionData, CollectionId>(\n  COLLECTION_DATA,\n  \"collections\",\n  {\n    deserializer: (jsonData: Jsonify<CollectionData>) => CollectionData.fromJSON(jsonData),\n    clearOn: [\"logout\"],\n  },\n);\n\nconst DECRYPTED_COLLECTION_DATA_KEY = DeriveDefinition.from<\n  Record<CollectionId, CollectionData>,\n  CollectionView[],\n  { collectionService: CollectionService }\n>(ENCRYPTED_COLLECTION_DATA_KEY, {\n  deserializer: (obj) => obj.map((collection) => CollectionView.fromJSON(collection)),\n  derive: async (collections: Record<CollectionId, CollectionData>, { collectionService }) => {\n    const data: Collection[] = [];\n    for (const id in collections ?? {}) {\n      const collectionId = id as CollectionId;\n      data.push(new Collection(collections[collectionId]));\n    }\n    return await collectionService.decryptMany(data);\n  },\n});\n\nconst NestingDelimiter = \"/\";\n\nexport class CollectionService implements CollectionServiceAbstraction {\n  private encryptedCollectionDataState: ActiveUserState<Record<CollectionId, CollectionData>>;\n  encryptedCollections$: Observable<Collection[]>;\n  private decryptedCollectionDataState: DerivedState<CollectionView[]>;\n  decryptedCollections$: Observable<CollectionView[]>;\n\n  decryptedCollectionViews$(ids: CollectionId[]): Observable<CollectionView[]> {\n    return this.decryptedCollections$.pipe(\n      map((collections) => collections.filter((c) => ids.includes(c.id as CollectionId))),\n    );\n  }\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    protected stateProvider: StateProvider,\n  ) {\n    this.encryptedCollectionDataState = this.stateProvider.getActive(ENCRYPTED_COLLECTION_DATA_KEY);\n    this.encryptedCollections$ = this.encryptedCollectionDataState.state$.pipe(\n      map((collections) => {\n        const response: Collection[] = [];\n        for (const id in collections ?? {}) {\n          response.push(new Collection(collections[id as CollectionId]));\n        }\n        return response;\n      }),\n    );\n\n    this.decryptedCollectionDataState = this.stateProvider.getDerived(\n      this.encryptedCollectionDataState.state$,\n      DECRYPTED_COLLECTION_DATA_KEY,\n      { collectionService: this },\n    );\n\n    this.decryptedCollections$ = this.decryptedCollectionDataState.state$;\n  }\n\n  async clearActiveUserCache(): Promise<void> {\n    await this.decryptedCollectionDataState.forceValue(null);\n  }\n\n  async encrypt(model: CollectionView): Promise<Collection> {\n    if (model.organizationId == null) {\n      throw new Error(\"Collection has no organization id.\");\n    }\n    const key = await this.cryptoService.getOrgKey(model.organizationId);\n    if (key == null) {\n      throw new Error(\"No key for this collection's organization.\");\n    }\n    const collection = new Collection();\n    collection.id = model.id;\n    collection.organizationId = model.organizationId;\n    collection.readOnly = model.readOnly;\n    collection.externalId = model.externalId;\n    collection.name = await this.cryptoService.encrypt(model.name, key);\n    return collection;\n  }\n\n  async decryptMany(collections: Collection[]): Promise<CollectionView[]> {\n    if (collections == null) {\n      return [];\n    }\n    const decCollections: CollectionView[] = [];\n\n    const organizationKeys = await firstValueFrom(this.cryptoService.activeUserOrgKeys$);\n\n    const promises: Promise<any>[] = [];\n    collections.forEach((collection) => {\n      promises.push(\n        collection\n          .decrypt(organizationKeys[collection.organizationId as OrganizationId])\n          .then((c) => decCollections.push(c)),\n      );\n    });\n    await Promise.all(promises);\n    return decCollections.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n  }\n\n  async get(id: string): Promise<Collection> {\n    return (\n      (await firstValueFrom(\n        this.encryptedCollections$.pipe(map((cs) => cs.find((c) => c.id === id))),\n      )) ?? null\n    );\n  }\n\n  async getAll(): Promise<Collection[]> {\n    return await firstValueFrom(this.encryptedCollections$);\n  }\n\n  async getAllDecrypted(): Promise<CollectionView[]> {\n    return await firstValueFrom(this.decryptedCollections$);\n  }\n\n  async getAllNested(collections: CollectionView[] = null): Promise<TreeNode<CollectionView>[]> {\n    if (collections == null) {\n      collections = await this.getAllDecrypted();\n    }\n    const nodes: TreeNode<CollectionView>[] = [];\n    collections.forEach((c) => {\n      const collectionCopy = new CollectionView();\n      collectionCopy.id = c.id;\n      collectionCopy.organizationId = c.organizationId;\n      const parts = c.name != null ? c.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, collectionCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  /**\n   * @deprecated August 30 2022: Moved to new Vault Filter Service\n   * Remove when Desktop and Browser are updated\n   */\n  async getNested(id: string): Promise<TreeNode<CollectionView>> {\n    const collections = await this.getAllNested();\n    return ServiceUtils.getTreeNodeObjectFromList(collections, id) as TreeNode<CollectionView>;\n  }\n\n  async upsert(toUpdate: CollectionData | CollectionData[]): Promise<void> {\n    if (toUpdate == null) {\n      return;\n    }\n    await this.encryptedCollectionDataState.update((collections) => {\n      if (collections == null) {\n        collections = {};\n      }\n      if (Array.isArray(toUpdate)) {\n        toUpdate.forEach((c) => {\n          collections[c.id] = c;\n        });\n      } else {\n        collections[toUpdate.id] = toUpdate;\n      }\n      return collections;\n    });\n  }\n\n  async replace(collections: Record<CollectionId, CollectionData>, userId: UserId): Promise<void> {\n    await this.stateProvider\n      .getUser(userId, ENCRYPTED_COLLECTION_DATA_KEY)\n      .update(() => collections);\n  }\n\n  async clear(userId?: UserId): Promise<void> {\n    if (userId == null) {\n      await this.encryptedCollectionDataState.update(() => null);\n      await this.decryptedCollectionDataState.forceValue(null);\n    } else {\n      await this.stateProvider.getUser(userId, ENCRYPTED_COLLECTION_DATA_KEY).update(() => null);\n    }\n  }\n\n  async delete(id: CollectionId | CollectionId[]): Promise<any> {\n    await this.encryptedCollectionDataState.update((collections) => {\n      if (collections == null) {\n        collections = {};\n      }\n      if (typeof id === \"string\") {\n        delete collections[id];\n      } else {\n        (id as CollectionId[]).forEach((i) => {\n          delete collections[i];\n        });\n      }\n      return collections;\n    });\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { ErrorResponse } from \"../../../models/response/error.response\";\nimport {\n  FileUploadApiMethods,\n  FileUploadService,\n} from \"../../../platform/abstractions/file-upload/file-upload.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { EncArrayBuffer } from \"../../../platform/models/domain/enc-array-buffer\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { CipherFileUploadService as CipherFileUploadServiceAbstraction } from \"../../abstractions/file-upload/cipher-file-upload.service\";\nimport { Cipher } from \"../../models/domain/cipher\";\nimport { AttachmentRequest } from \"../../models/request/attachment.request\";\nimport { AttachmentUploadDataResponse } from \"../../models/response/attachment-upload-data.response\";\nimport { CipherResponse } from \"../../models/response/cipher.response\";\n\nexport class CipherFileUploadService implements CipherFileUploadServiceAbstraction {\n  constructor(\n    private apiService: ApiService,\n    private fileUploadService: FileUploadService,\n  ) {}\n\n  async upload(\n    cipher: Cipher,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    admin: boolean,\n    dataEncKey: [SymmetricCryptoKey, EncString],\n  ): Promise<CipherResponse> {\n    const request: AttachmentRequest = {\n      key: dataEncKey[1].encryptedString,\n      fileName: encFileName.encryptedString,\n      fileSize: encData.buffer.byteLength,\n      adminRequest: admin,\n    };\n\n    let response: CipherResponse;\n    try {\n      const uploadDataResponse = await this.apiService.postCipherAttachment(cipher.id, request);\n      response = admin ? uploadDataResponse.cipherMiniResponse : uploadDataResponse.cipherResponse;\n      await this.fileUploadService.upload(\n        uploadDataResponse,\n        encFileName,\n        encData,\n        this.generateMethods(uploadDataResponse, response, request.adminRequest),\n      );\n    } catch (e) {\n      if (\n        (e instanceof ErrorResponse && (e as ErrorResponse).statusCode === 404) ||\n        (e as ErrorResponse).statusCode === 405\n      ) {\n        response = await this.legacyServerAttachmentFileUpload(\n          request.adminRequest,\n          cipher.id,\n          encFileName,\n          encData,\n          dataEncKey[1],\n        );\n      } else if (e instanceof ErrorResponse) {\n        throw new Error((e as ErrorResponse).getSingleMessage());\n      } else {\n        throw e;\n      }\n    }\n    return response;\n  }\n\n  private generateMethods(\n    uploadData: AttachmentUploadDataResponse,\n    response: CipherResponse,\n    isAdmin: boolean,\n  ): FileUploadApiMethods {\n    return {\n      postDirect: this.generatePostDirectCallback(uploadData, isAdmin),\n      renewFileUploadUrl: this.generateRenewFileUploadUrlCallback(uploadData, response, isAdmin),\n      rollback: this.generateRollbackCallback(response, uploadData, isAdmin),\n    };\n  }\n\n  private generatePostDirectCallback(uploadData: AttachmentUploadDataResponse, isAdmin: boolean) {\n    return (data: FormData) => {\n      const response = isAdmin ? uploadData.cipherMiniResponse : uploadData.cipherResponse;\n      return this.apiService.postAttachmentFile(response.id, uploadData.attachmentId, data);\n    };\n  }\n\n  private generateRenewFileUploadUrlCallback(\n    uploadData: AttachmentUploadDataResponse,\n    response: CipherResponse,\n    isAdmin: boolean,\n  ) {\n    return async () => {\n      const renewResponse = await this.apiService.renewAttachmentUploadUrl(\n        response.id,\n        uploadData.attachmentId,\n      );\n      return renewResponse?.url;\n    };\n  }\n\n  private generateRollbackCallback(\n    response: CipherResponse,\n    uploadData: AttachmentUploadDataResponse,\n    isAdmin: boolean,\n  ) {\n    return () => {\n      if (isAdmin) {\n        return this.apiService.deleteCipherAttachmentAdmin(response.id, uploadData.attachmentId);\n      } else {\n        return this.apiService.deleteCipherAttachment(response.id, uploadData.attachmentId);\n      }\n    };\n  }\n\n  /**\n   * @deprecated Mar 25 2021: This method has been deprecated in favor of direct uploads.\n   * This method still exists for backward compatibility with old server versions.\n   */\n  async legacyServerAttachmentFileUpload(\n    admin: boolean,\n    cipherId: string,\n    encFileName: EncString,\n    encData: EncArrayBuffer,\n    key: EncString,\n  ) {\n    const fd = new FormData();\n    try {\n      const blob = new Blob([encData.buffer], { type: \"application/octet-stream\" });\n      fd.append(\"key\", key.encryptedString);\n      fd.append(\"data\", blob, encFileName.encryptedString);\n    } catch (e) {\n      if (Utils.isNode && !Utils.isBrowser) {\n        fd.append(\"key\", key.encryptedString);\n        fd.append(\n          \"data\",\n          Buffer.from(encData.buffer) as any,\n          {\n            filepath: encFileName.encryptedString,\n            contentType: \"application/octet-stream\",\n          } as any,\n        );\n      } else {\n        throw e;\n      }\n    }\n\n    let response: CipherResponse;\n    try {\n      if (admin) {\n        response = await this.apiService.postCipherAttachmentAdminLegacy(cipherId, fd);\n      } else {\n        response = await this.apiService.postCipherAttachmentLegacy(cipherId, fd);\n      }\n    } catch (e) {\n      throw new Error((e as ErrorResponse).getSingleMessage());\n    }\n\n    return response;\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nexport class FolderRequest {\n  name: string;\n\n  constructor(folder: Folder) {\n    this.name = folder.name ? folder.name.encryptedString : null;\n  }\n}\n","import { ApiService } from \"../../../abstractions/api.service\";\nimport { FolderApiServiceAbstraction } from \"../../../vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"../../../vault/abstractions/folder/folder.service.abstraction\";\nimport { FolderData } from \"../../../vault/models/data/folder.data\";\nimport { Folder } from \"../../../vault/models/domain/folder\";\nimport { FolderRequest } from \"../../../vault/models/request/folder.request\";\nimport { FolderResponse } from \"../../../vault/models/response/folder.response\";\n\nexport class FolderApiService implements FolderApiServiceAbstraction {\n  constructor(\n    private folderService: InternalFolderService,\n    private apiService: ApiService,\n  ) {}\n\n  async save(folder: Folder): Promise<any> {\n    const request = new FolderRequest(folder);\n\n    let response: FolderResponse;\n    if (folder.id == null) {\n      response = await this.postFolder(request);\n      folder.id = response.id;\n    } else {\n      response = await this.putFolder(folder.id, request);\n    }\n\n    const data = new FolderData(response);\n    await this.folderService.upsert(data);\n  }\n\n  async delete(id: string): Promise<any> {\n    await this.deleteFolder(id);\n    await this.folderService.delete(id);\n  }\n\n  async deleteAll(): Promise<void> {\n    await this.apiService.send(\"DELETE\", \"/folders/all\", null, true, false);\n    await this.folderService.clear();\n  }\n\n  async get(id: string): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"GET\", \"/folders/\" + id, null, true, true);\n    return new FolderResponse(r);\n  }\n\n  private async postFolder(request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"POST\", \"/folders\", request, true, true);\n    return new FolderResponse(r);\n  }\n\n  async putFolder(id: string, request: FolderRequest): Promise<FolderResponse> {\n    const r = await this.apiService.send(\"PUT\", \"/folders/\" + id, request, true, true);\n    return new FolderResponse(r);\n  }\n\n  private deleteFolder(id: string): Promise<any> {\n    return this.apiService.send(\"DELETE\", \"/folders/\" + id, null, true, false);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { View } from \"../../../models/view/view\";\nimport { Folder } from \"../domain/folder\";\nimport { ITreeNodeObject } from \"../domain/tree-node\";\n\nexport class FolderView implements View, ITreeNodeObject {\n  id: string = null;\n  name: string = null;\n  revisionDate: Date = null;\n\n  constructor(f?: Folder) {\n    if (!f) {\n      return;\n    }\n\n    this.id = f.id;\n    this.revisionDate = f.revisionDate;\n  }\n\n  static fromJSON(obj: Jsonify<FolderView>) {\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    return Object.assign(new FolderView(), obj, { revisionDate });\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport Domain from \"../../../platform/models/domain/domain-base\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { FolderData } from \"../data/folder.data\";\nimport { FolderView } from \"../view/folder.view\";\n\nexport class Folder extends Domain {\n  id: string;\n  name: EncString;\n  revisionDate: Date;\n\n  constructor(obj?: FolderData) {\n    super();\n    if (obj == null) {\n      return;\n    }\n\n    this.buildDomainModel(\n      this,\n      obj,\n      {\n        id: null,\n        name: null,\n      },\n      [\"id\"],\n    );\n\n    this.revisionDate = obj.revisionDate != null ? new Date(obj.revisionDate) : null;\n  }\n\n  decrypt(): Promise<FolderView> {\n    return this.decryptObj(\n      new FolderView(this),\n      {\n        name: null,\n      },\n      null,\n    );\n  }\n\n  static fromJSON(obj: Jsonify<Folder>) {\n    const revisionDate = obj.revisionDate == null ? null : new Date(obj.revisionDate);\n    return Object.assign(new Folder(), obj, { name: EncString.fromJSON(obj.name), revisionDate });\n  }\n}\n","import { Folder } from \"../domain/folder\";\n\nimport { FolderRequest } from \"./folder.request\";\n\nexport class FolderWithIdRequest extends FolderRequest {\n  id: string;\n\n  constructor(folder: Folder) {\n    super(folder);\n    this.id = folder.id;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { DeriveDefinition, FOLDER_DISK, UserKeyDefinition } from \"../../../platform/state\";\nimport { FolderService } from \"../../abstractions/folder/folder.service.abstraction\";\nimport { FolderData } from \"../../models/data/folder.data\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { FolderView } from \"../../models/view/folder.view\";\n\nexport const FOLDER_ENCRYPTED_FOLDERS = UserKeyDefinition.record<FolderData>(\n  FOLDER_DISK,\n  \"folders\",\n  {\n    deserializer: (obj: Jsonify<FolderData>) => FolderData.fromJSON(obj),\n    clearOn: [\"logout\"],\n  },\n);\n\nexport const FOLDER_DECRYPTED_FOLDERS = DeriveDefinition.from<\n  Record<string, FolderData>,\n  FolderView[],\n  { folderService: FolderService; cryptoService: CryptoService }\n>(FOLDER_ENCRYPTED_FOLDERS, {\n  deserializer: (obj) => obj.map((f) => FolderView.fromJSON(f)),\n  derive: async (from, { folderService, cryptoService }) => {\n    const folders = Object.values(from || {}).map((f) => new Folder(f));\n\n    if (await cryptoService.hasUserKey()) {\n      return await folderService.decryptFolders(folders);\n    } else {\n      return [];\n    }\n  },\n});\n","import { Observable, firstValueFrom, map, shareReplay } from \"rxjs\";\n\nimport { CryptoService } from \"../../../platform/abstractions/crypto.service\";\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { ActiveUserState, DerivedState, StateProvider } from \"../../../platform/state\";\nimport { UserId } from \"../../../types/guid\";\nimport { UserKey } from \"../../../types/key\";\nimport { CipherService } from \"../../../vault/abstractions/cipher.service\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"../../../vault/abstractions/folder/folder.service.abstraction\";\nimport { FolderData } from \"../../../vault/models/data/folder.data\";\nimport { Folder } from \"../../../vault/models/domain/folder\";\nimport { FolderView } from \"../../../vault/models/view/folder.view\";\nimport { Cipher } from \"../../models/domain/cipher\";\nimport { FolderWithIdRequest } from \"../../models/request/folder-with-id.request\";\nimport { FOLDER_DECRYPTED_FOLDERS, FOLDER_ENCRYPTED_FOLDERS } from \"../key-state/folder.state\";\n\nexport class FolderService implements InternalFolderServiceAbstraction {\n  folders$: Observable<Folder[]>;\n  folderViews$: Observable<FolderView[]>;\n\n  private encryptedFoldersState: ActiveUserState<Record<string, FolderData>>;\n  private decryptedFoldersState: DerivedState<FolderView[]>;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private i18nService: I18nService,\n    private cipherService: CipherService,\n    private stateProvider: StateProvider,\n  ) {\n    this.encryptedFoldersState = this.stateProvider.getActive(FOLDER_ENCRYPTED_FOLDERS);\n    this.decryptedFoldersState = this.stateProvider.getDerived(\n      this.encryptedFoldersState.state$,\n      FOLDER_DECRYPTED_FOLDERS,\n      { folderService: this, cryptoService: this.cryptoService },\n    );\n\n    this.folders$ = this.encryptedFoldersState.state$.pipe(\n      map((folderData) => Object.values(folderData).map((f) => new Folder(f))),\n    );\n\n    this.folderViews$ = this.decryptedFoldersState.state$;\n  }\n\n  async clearCache(): Promise<void> {\n    await this.decryptedFoldersState.forceValue([]);\n  }\n\n  // TODO: This should be moved to EncryptService or something\n  async encrypt(model: FolderView, key?: SymmetricCryptoKey): Promise<Folder> {\n    const folder = new Folder();\n    folder.id = model.id;\n    folder.name = await this.cryptoService.encrypt(model.name, key);\n    return folder;\n  }\n\n  async get(id: string): Promise<Folder> {\n    const folders = await firstValueFrom(this.folders$);\n\n    return folders.find((folder) => folder.id === id);\n  }\n\n  getDecrypted$(id: string): Observable<FolderView | undefined> {\n    return this.folderViews$.pipe(\n      map((folders) => folders.find((folder) => folder.id === id)),\n      shareReplay({ refCount: true, bufferSize: 1 }),\n    );\n  }\n\n  async getAllFromState(): Promise<Folder[]> {\n    return await firstValueFrom(this.folders$);\n  }\n\n  /**\n   * @deprecated For the CLI only\n   * @param id id of the folder\n   */\n  async getFromState(id: string): Promise<Folder> {\n    const folder = await this.get(id);\n    if (!folder) {\n      return null;\n    }\n\n    return folder;\n  }\n\n  /**\n   * @deprecated Only use in CLI!\n   */\n  async getAllDecryptedFromState(): Promise<FolderView[]> {\n    return await firstValueFrom(this.folderViews$);\n  }\n\n  async upsert(folderData: FolderData | FolderData[]): Promise<void> {\n    await this.encryptedFoldersState.update((folders) => {\n      if (folders == null) {\n        folders = {};\n      }\n\n      if (folderData instanceof FolderData) {\n        const f = folderData as FolderData;\n        folders[f.id] = f;\n      } else {\n        (folderData as FolderData[]).forEach((f) => {\n          folders[f.id] = f;\n        });\n      }\n\n      return folders;\n    });\n  }\n\n  async replace(folders: { [id: string]: FolderData }, userId: UserId): Promise<void> {\n    if (!folders) {\n      return;\n    }\n\n    await this.stateProvider.getUser(userId, FOLDER_ENCRYPTED_FOLDERS).update(() => {\n      const newFolders: Record<string, FolderData> = { ...folders };\n      return newFolders;\n    });\n  }\n\n  async clear(userId?: UserId): Promise<void> {\n    if (userId == null) {\n      await this.encryptedFoldersState.update(() => ({}));\n      await this.decryptedFoldersState.forceValue([]);\n    } else {\n      await this.stateProvider.getUser(userId, FOLDER_ENCRYPTED_FOLDERS).update(() => ({}));\n    }\n  }\n\n  async delete(id: string | string[]): Promise<any> {\n    await this.encryptedFoldersState.update((folders) => {\n      if (folders == null) {\n        return;\n      }\n\n      const folderIdsToDelete = Array.isArray(id) ? id : [id];\n\n      folderIdsToDelete.forEach((id) => {\n        if (folders[id] != null) {\n          delete folders[id];\n        }\n      });\n\n      return folders;\n    });\n\n    // Items in a deleted folder are re-assigned to \"No Folder\"\n    const ciphers = await this.cipherService.getAll();\n    if (ciphers != null) {\n      const updates: Cipher[] = [];\n      for (const cId in ciphers) {\n        if (ciphers[cId].folderId === id) {\n          ciphers[cId].folderId = null;\n          updates.push(ciphers[cId]);\n        }\n      }\n      if (updates.length > 0) {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.cipherService.upsert(updates.map((c) => c.toCipherData()));\n      }\n    }\n  }\n\n  async decryptFolders(folders: Folder[]) {\n    const decryptFolderPromises = folders.map((f) => f.decrypt());\n    const decryptedFolders = await Promise.all(decryptFolderPromises);\n\n    decryptedFolders.sort(Utils.getSortFunction(this.i18nService, \"name\"));\n\n    const noneFolder = new FolderView();\n    noneFolder.name = this.i18nService.t(\"noneFolder\");\n    decryptedFolders.push(noneFolder);\n    return decryptedFolders;\n  }\n\n  async getRotatedData(\n    originalUserKey: UserKey,\n    newUserKey: UserKey,\n    userId: UserId,\n  ): Promise<FolderWithIdRequest[]> {\n    if (newUserKey == null) {\n      throw new Error(\"New user key is required for rotation.\");\n    }\n\n    let encryptedFolders: FolderWithIdRequest[] = [];\n    const folders = await firstValueFrom(this.folderViews$);\n    if (!folders) {\n      return encryptedFolders;\n    }\n    encryptedFolders = await Promise.all(\n      folders.map(async (folder) => {\n        const encryptedFolder = await this.encrypt(folder, newUserKey);\n        return new FolderWithIdRequest(encryptedFolder);\n      }),\n    );\n    return encryptedFolders;\n  }\n}\n","import { CryptoFunctionService } from \"../../platform/abstractions/crypto-function.service\";\nimport { LogService } from \"../../platform/abstractions/log.service\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { TotpService as TotpServiceAbstraction } from \"../abstractions/totp.service\";\n\nconst B32Chars = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ234567\";\nconst SteamChars = \"23456789BCDFGHJKMNPQRTVWXY\";\n\nexport class TotpService implements TotpServiceAbstraction {\n  constructor(\n    private cryptoFunctionService: CryptoFunctionService,\n    private logService: LogService,\n  ) {}\n\n  async getCode(key: string): Promise<string> {\n    if (key == null) {\n      return null;\n    }\n    let period = 30;\n    let alg: \"sha1\" | \"sha256\" | \"sha512\" = \"sha1\";\n    let digits = 6;\n    let keyB32 = key;\n    const isOtpAuth = key.toLowerCase().indexOf(\"otpauth://\") === 0;\n    const isSteamAuth = !isOtpAuth && key.toLowerCase().indexOf(\"steam://\") === 0;\n    if (isOtpAuth) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"digits\") && params.get(\"digits\") != null) {\n        try {\n          const digitParams = parseInt(params.get(\"digits\").trim(), null);\n          if (digitParams > 10) {\n            digits = 10;\n          } else if (digitParams > 0) {\n            digits = digitParams;\n          }\n        } catch {\n          this.logService.error(\"Invalid digits param.\");\n        }\n      }\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          const periodParam = parseInt(params.get(\"period\").trim(), null);\n          if (periodParam > 0) {\n            period = periodParam;\n          }\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n      if (params.has(\"secret\") && params.get(\"secret\") != null) {\n        keyB32 = params.get(\"secret\");\n      }\n      if (params.has(\"algorithm\") && params.get(\"algorithm\") != null) {\n        const algParam = params.get(\"algorithm\").toLowerCase();\n        if (algParam === \"sha1\" || algParam === \"sha256\" || algParam === \"sha512\") {\n          alg = algParam;\n        }\n      }\n    } else if (isSteamAuth) {\n      keyB32 = key.substr(\"steam://\".length);\n      digits = 5;\n    }\n\n    const epoch = Math.round(new Date().getTime() / 1000.0);\n    const timeHex = this.leftPad(this.decToHex(Math.floor(epoch / period)), 16, \"0\");\n    const timeBytes = Utils.fromHexToArray(timeHex);\n    const keyBytes = this.b32ToBytes(keyB32);\n\n    if (!keyBytes.length || !timeBytes.length) {\n      return null;\n    }\n\n    const hash = await this.sign(keyBytes, timeBytes, alg);\n    if (hash.length === 0) {\n      return null;\n    }\n\n    const offset = hash[hash.length - 1] & 0xf;\n    const binary =\n      ((hash[offset] & 0x7f) << 24) |\n      ((hash[offset + 1] & 0xff) << 16) |\n      ((hash[offset + 2] & 0xff) << 8) |\n      (hash[offset + 3] & 0xff);\n\n    let otp = \"\";\n    if (isSteamAuth) {\n      let fullCode = binary & 0x7fffffff;\n      for (let i = 0; i < digits; i++) {\n        otp += SteamChars[fullCode % SteamChars.length];\n        fullCode = Math.trunc(fullCode / SteamChars.length);\n      }\n    } else {\n      otp = (binary % Math.pow(10, digits)).toString();\n      otp = this.leftPad(otp, digits, \"0\");\n    }\n\n    return otp;\n  }\n\n  getTimeInterval(key: string): number {\n    let period = 30;\n    if (key != null && key.toLowerCase().indexOf(\"otpauth://\") === 0) {\n      const params = Utils.getQueryParams(key);\n      if (params.has(\"period\") && params.get(\"period\") != null) {\n        try {\n          period = parseInt(params.get(\"period\").trim(), null);\n        } catch {\n          this.logService.error(\"Invalid period param.\");\n        }\n      }\n    }\n    return period;\n  }\n\n  // Helpers\n\n  private leftPad(s: string, l: number, p: string): string {\n    if (l + 1 >= s.length) {\n      s = Array(l + 1 - s.length).join(p) + s;\n    }\n    return s;\n  }\n\n  private decToHex(d: number): string {\n    return (d < 15.5 ? \"0\" : \"\") + Math.round(d).toString(16);\n  }\n\n  private b32ToHex(s: string): string {\n    s = s.toUpperCase();\n    let cleanedInput = \"\";\n\n    for (let i = 0; i < s.length; i++) {\n      if (B32Chars.indexOf(s[i]) < 0) {\n        continue;\n      }\n\n      cleanedInput += s[i];\n    }\n    s = cleanedInput;\n\n    let bits = \"\";\n    let hex = \"\";\n    for (let i = 0; i < s.length; i++) {\n      const byteIndex = B32Chars.indexOf(s.charAt(i));\n      if (byteIndex < 0) {\n        continue;\n      }\n      bits += this.leftPad(byteIndex.toString(2), 5, \"0\");\n    }\n    for (let i = 0; i + 4 <= bits.length; i += 4) {\n      const chunk = bits.substr(i, 4);\n      hex = hex + parseInt(chunk, 2).toString(16);\n    }\n    return hex;\n  }\n\n  private b32ToBytes(s: string): Uint8Array {\n    return Utils.fromHexToArray(this.b32ToHex(s));\n  }\n\n  private async sign(\n    keyBytes: Uint8Array,\n    timeBytes: Uint8Array,\n    alg: \"sha1\" | \"sha256\" | \"sha512\",\n  ) {\n    const signature = await this.cryptoFunctionService.hmac(timeBytes, keyBytes, alg);\n    return new Uint8Array(signature);\n  }\n}\n","import { VAULT_SETTINGS_DISK, KeyDefinition, UserKeyDefinition } from \"../../../platform/state\";\n\nexport const USER_ENABLE_PASSKEYS = new KeyDefinition<boolean>(\n  VAULT_SETTINGS_DISK,\n  \"enablePasskeys\",\n  {\n    deserializer: (obj) => obj,\n  },\n);\n\nexport const SHOW_CARDS_CURRENT_TAB = new UserKeyDefinition<boolean>(\n  VAULT_SETTINGS_DISK,\n  \"showCardsCurrentTab\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [], // do not clear user settings\n  },\n);\n\nexport const SHOW_IDENTITIES_CURRENT_TAB = new UserKeyDefinition<boolean>(\n  VAULT_SETTINGS_DISK,\n  \"showIdentitiesCurrentTab\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [], // do not clear user settings\n  },\n);\n","import { Observable, map } from \"rxjs\";\n\nimport { ActiveUserState, GlobalState, StateProvider } from \"../../../platform/state\";\nimport { VaultSettingsService as VaultSettingsServiceAbstraction } from \"../../abstractions/vault-settings/vault-settings.service\";\nimport {\n  SHOW_CARDS_CURRENT_TAB,\n  SHOW_IDENTITIES_CURRENT_TAB,\n  USER_ENABLE_PASSKEYS,\n} from \"../key-state/vault-settings.state\";\n\n/**\n * {@link VaultSettingsServiceAbstraction}\n */\nexport class VaultSettingsService implements VaultSettingsServiceAbstraction {\n  private enablePasskeysState: GlobalState<boolean> =\n    this.stateProvider.getGlobal(USER_ENABLE_PASSKEYS);\n  /**\n   * {@link VaultSettingsServiceAbstraction.enablePasskeys$}\n   */\n  readonly enablePasskeys$: Observable<boolean> = this.enablePasskeysState.state$.pipe(\n    map((x) => x ?? true),\n  );\n\n  private showCardsCurrentTabState: ActiveUserState<boolean> =\n    this.stateProvider.getActive(SHOW_CARDS_CURRENT_TAB);\n  /**\n   * {@link VaultSettingsServiceAbstraction.showCardsCurrentTab$}\n   */\n  readonly showCardsCurrentTab$: Observable<boolean> = this.showCardsCurrentTabState.state$.pipe(\n    map((x) => x ?? true),\n  );\n\n  private showIdentitiesCurrentTabState: ActiveUserState<boolean> = this.stateProvider.getActive(\n    SHOW_IDENTITIES_CURRENT_TAB,\n  );\n  /**\n   * {@link VaultSettingsServiceAbstraction.showIdentitiesCurrentTab$}\n   */\n  readonly showIdentitiesCurrentTab$: Observable<boolean> =\n    this.showIdentitiesCurrentTabState.state$.pipe(map((x) => x ?? true));\n\n  constructor(private stateProvider: StateProvider) {}\n\n  /**\n   * {@link VaultSettingsServiceAbstraction.setShowCardsCurrentTab}\n   */\n  async setShowCardsCurrentTab(value: boolean): Promise<void> {\n    await this.showCardsCurrentTabState.update(() => value);\n  }\n\n  /**\n   * {@link VaultSettingsServiceAbstraction.setDontShowIdentitiesCurrentTab}\n   */\n  async setShowIdentitiesCurrentTab(value: boolean): Promise<void> {\n    await this.showIdentitiesCurrentTabState.update(() => value);\n  }\n\n  /**\n   * {@link VaultSettingsServiceAbstraction.setEnablePasskeys}\n   */\n  async setEnablePasskeys(value: boolean): Promise<void> {\n    await this.enablePasskeysState.update(() => value);\n  }\n}\n","import { GENERATOR_DISK, UserKeyDefinition } from \"@bitwarden/common/platform/state\";\n\nimport {\n  PassphraseGenerationOptions,\n  PasswordGenerationOptions,\n  CatchallGenerationOptions,\n  EffUsernameGenerationOptions,\n  SubaddressGenerationOptions,\n} from \"../types\";\n\n/** plaintext password generation options */\nexport const PASSWORD_SETTINGS = new UserKeyDefinition<PasswordGenerationOptions>(\n  GENERATOR_DISK,\n  \"passwordGeneratorSettings\",\n  {\n    deserializer: (value) => value,\n    clearOn: [],\n  },\n);\n\n/** plaintext passphrase generation options */\nexport const PASSPHRASE_SETTINGS = new UserKeyDefinition<PassphraseGenerationOptions>(\n  GENERATOR_DISK,\n  \"passphraseGeneratorSettings\",\n  {\n    deserializer: (value) => value,\n    clearOn: [],\n  },\n);\n\n/** plaintext username generation options */\nexport const EFF_USERNAME_SETTINGS = new UserKeyDefinition<EffUsernameGenerationOptions>(\n  GENERATOR_DISK,\n  \"effUsernameGeneratorSettings\",\n  {\n    deserializer: (value) => value,\n    clearOn: [],\n  },\n);\n\n/** plaintext configuration for a domain catch-all address. */\nexport const CATCHALL_SETTINGS = new UserKeyDefinition<CatchallGenerationOptions>(\n  GENERATOR_DISK,\n  \"catchallGeneratorSettings\",\n  {\n    deserializer: (value) => value,\n    clearOn: [],\n  },\n);\n\n/** plaintext configuration for an email subaddress. */\nexport const SUBADDRESS_SETTINGS = new UserKeyDefinition<SubaddressGenerationOptions>(\n  GENERATOR_DISK,\n  \"subaddressGeneratorSettings\",\n  {\n    deserializer: (value) => value,\n    clearOn: [],\n  },\n);\n","function initializeBoundaries() {\n  const numWords = Object.freeze({\n    min: 3,\n    max: 20,\n  });\n\n  return Object.freeze({\n    numWords,\n  });\n}\n\n/** Immutable default boundaries for passphrase generation.\n * These are used when the policy does not override a value.\n */\nexport const DefaultPassphraseBoundaries = initializeBoundaries();\n","import { PassphraseGenerationOptions } from \"../types\";\n\n/** The default options for passphrase generation. */\nexport const DefaultPassphraseGenerationOptions: Partial<PassphraseGenerationOptions> =\n  Object.freeze({\n    numWords: 3,\n    wordSeparator: \"-\",\n    capitalize: false,\n    includeNumber: false,\n  });\n","function initializeBoundaries() {\n  const length = Object.freeze({\n    min: 5,\n    max: 128,\n  });\n\n  const minDigits = Object.freeze({\n    min: 0,\n    max: 9,\n  });\n\n  const minSpecialCharacters = Object.freeze({\n    min: 0,\n    max: 9,\n  });\n\n  return Object.freeze({\n    length,\n    minDigits,\n    minSpecialCharacters,\n  });\n}\n\n/** Immutable default boundaries for password generation.\n * These are used when the policy does not override a value.\n */\nexport const DefaultPasswordBoundaries = initializeBoundaries();\n","import { PasswordGenerationOptions } from \"../types\";\n\nimport { DefaultPasswordBoundaries } from \"./default-password-boundaries\";\n\n/** The default options for password generation. */\nexport const DefaultPasswordGenerationOptions: Partial<PasswordGenerationOptions> = Object.freeze({\n  length: 14,\n  minLength: DefaultPasswordBoundaries.length.min,\n  ambiguous: true,\n  uppercase: true,\n  minUppercase: 1,\n  lowercase: true,\n  minLowercase: 1,\n  number: true,\n  minNumber: 1,\n  special: false,\n  minSpecial: 0,\n});\n","import { PolicyEvaluator } from \"../abstractions\";\nimport { NoPolicy } from \"../types\";\n\n/** A policy evaluator that does not apply any policy */\nexport class DefaultPolicyEvaluator<PolicyTarget>\n  implements PolicyEvaluator<NoPolicy, PolicyTarget>\n{\n  /** {@link PolicyEvaluator.policy} */\n  get policy() {\n    return {};\n  }\n\n  /** {@link PolicyEvaluator.policyInEffect} */\n  get policyInEffect() {\n    return false;\n  }\n\n  /** {@link PolicyEvaluator.applyPolicy} */\n  applyPolicy(options: PolicyTarget) {\n    return options;\n  }\n\n  /** {@link PolicyEvaluator.sanitize} */\n  sanitize(options: PolicyTarget) {\n    return options;\n  }\n}\n","import { Constraints } from \"@bitwarden/common/tools/types\";\n\nimport { PolicyEvaluator } from \"../abstractions\";\nimport { DefaultPassphraseGenerationOptions, DefaultPassphraseBoundaries } from \"../data\";\nimport { Boundary, PassphraseGenerationOptions, PassphraseGeneratorPolicy } from \"../types\";\n\n/** Enforces policy for passphrase generation options.\n */\nexport class PassphraseGeneratorOptionsEvaluator\n  implements\n    PolicyEvaluator<PassphraseGeneratorPolicy, PassphraseGenerationOptions>,\n    Constraints<PassphraseGenerationOptions>\n{\n  // This design is not ideal, but it is a step towards a more robust passphrase\n  // generator. Ideally, `sanitize` would be implemented on an options class,\n  // and `applyPolicy` would be implemented on a policy class, \"mise en place\".\n  //\n  // The current design of the passphrase generator, unfortunately, would require\n  // a substantial rewrite to make this feasible. Hopefully this change can be\n  // applied when the passphrase generator is ported to rust.\n\n  /** Policy applied by the evaluator.\n   */\n  readonly policy: PassphraseGeneratorPolicy;\n\n  /** Boundaries for the number of words allowed in the password.\n   */\n  readonly numWords: Boundary;\n\n  /** Instantiates the evaluator.\n   * @param policy The policy applied by the evaluator. When this conflicts with\n   *               the defaults, the policy takes precedence.\n   */\n  constructor(policy: PassphraseGeneratorPolicy) {\n    function createBoundary(value: number, defaultBoundary: Boundary): Boundary {\n      const boundary = {\n        min: Math.max(defaultBoundary.min, value),\n        max: Math.max(defaultBoundary.max, value),\n      };\n\n      return boundary;\n    }\n\n    this.policy = structuredClone(policy);\n    this.numWords = createBoundary(policy.minNumberWords, DefaultPassphraseBoundaries.numWords);\n  }\n\n  /** {@link PolicyEvaluator.policyInEffect} */\n  get policyInEffect(): boolean {\n    const policies = [\n      this.policy.capitalize,\n      this.policy.includeNumber,\n      this.policy.minNumberWords > DefaultPassphraseBoundaries.numWords.min,\n    ];\n\n    return policies.includes(true);\n  }\n\n  /** Apply policy to the input options.\n   *  @param options The options to build from. These options are not altered.\n   *  @returns A new password generation request with policy applied.\n   */\n  applyPolicy(options: PassphraseGenerationOptions): PassphraseGenerationOptions {\n    function fitToBounds(value: number, boundaries: Boundary) {\n      const { min, max } = boundaries;\n\n      const withUpperBound = Math.min(value ?? boundaries.min, max);\n      const withLowerBound = Math.max(withUpperBound, min);\n\n      return withLowerBound;\n    }\n\n    // apply policy overrides\n    const capitalize = this.policy.capitalize || options.capitalize || false;\n    const includeNumber = this.policy.includeNumber || options.includeNumber || false;\n\n    // apply boundaries\n    const numWords = fitToBounds(options.numWords, this.numWords);\n\n    return {\n      ...options,\n      numWords,\n      capitalize,\n      includeNumber,\n    };\n  }\n\n  /** Ensures internal options consistency.\n   *  @param options The options to cascade. These options are not altered.\n   *  @returns A passphrase generation request with cascade applied.\n   */\n  sanitize(options: PassphraseGenerationOptions): PassphraseGenerationOptions {\n    // ensure words are separated by a single character or the empty string\n    const wordSeparator =\n      options.wordSeparator === \"\"\n        ? \"\"\n        : (options.wordSeparator?.[0] ?? DefaultPassphraseGenerationOptions.wordSeparator);\n\n    return {\n      ...options,\n      wordSeparator,\n    };\n  }\n}\n","import { Constraints } from \"@bitwarden/common/tools/types\";\n\nimport { PolicyEvaluator } from \"../abstractions\";\nimport { DefaultPasswordBoundaries } from \"../data\";\nimport { Boundary, PasswordGeneratorPolicy, PasswordGenerationOptions } from \"../types\";\n\n/** Enforces policy for password generation.\n */\nexport class PasswordGeneratorOptionsEvaluator\n  implements\n    PolicyEvaluator<PasswordGeneratorPolicy, PasswordGenerationOptions>,\n    Constraints<PasswordGenerationOptions>\n{\n  // Constraints<PasswordGenerationOptions> compatibility\n  get minNumber() {\n    return this.minDigits;\n  }\n\n  get minSpecial() {\n    return this.minSpecialCharacters;\n  }\n\n  // This design is not ideal, but it is a step towards a more robust password\n  // generator. Ideally, `sanitize` would be implemented on an options class,\n  // and `applyPolicy` would be implemented on a policy class, \"mise en place\".\n  //\n  // The current design of the password generator, unfortunately, would require\n  // a substantial rewrite to make this feasible. Hopefully this change can be\n  // applied when the password generator is ported to rust.\n\n  /** Boundaries for the password length. This is always large enough\n   * to accommodate the minimum number of digits and special characters.\n   */\n  readonly length: Boundary;\n\n  /** Boundaries for the minimum number of digits allowed in the password.\n   */\n  readonly minDigits: Boundary;\n\n  /** Boundaries for the minimum number of special characters allowed\n   *  in the password.\n   */\n  readonly minSpecialCharacters: Boundary;\n\n  /** Policy applied by the evaluator.\n   */\n  readonly policy: PasswordGeneratorPolicy;\n\n  /** Instantiates the evaluator.\n   * @param policy The policy applied by the evaluator. When this conflicts with\n   *               the defaults, the policy takes precedence.\n   */\n  constructor(policy: PasswordGeneratorPolicy) {\n    function createBoundary(value: number, defaultBoundary: Boundary): Boundary {\n      const boundary = {\n        min: Math.max(defaultBoundary.min, value),\n        max: Math.max(defaultBoundary.max, value),\n      };\n\n      return boundary;\n    }\n\n    this.policy = structuredClone(policy);\n    this.minDigits = createBoundary(policy.numberCount, DefaultPasswordBoundaries.minDigits);\n    this.minSpecialCharacters = createBoundary(\n      policy.specialCount,\n      DefaultPasswordBoundaries.minSpecialCharacters,\n    );\n\n    // the overall length should be at least as long as the sum of the minimums\n    const minConsistentLength = this.minDigits.min + this.minSpecialCharacters.min;\n    const minPolicyLength =\n      policy.minLength > 0 ? policy.minLength : DefaultPasswordBoundaries.length.min;\n    const minLength = Math.max(\n      minPolicyLength,\n      minConsistentLength,\n      DefaultPasswordBoundaries.length.min,\n    );\n\n    this.length = {\n      min: minLength,\n      max: Math.max(DefaultPasswordBoundaries.length.max, minLength),\n    };\n  }\n\n  /** {@link PolicyEvaluator.policyInEffect} */\n  get policyInEffect(): boolean {\n    const policies = [\n      this.policy.useUppercase,\n      this.policy.useLowercase,\n      this.policy.useNumbers,\n      this.policy.useSpecial,\n      this.policy.minLength > DefaultPasswordBoundaries.length.min,\n      this.policy.numberCount > DefaultPasswordBoundaries.minDigits.min,\n      this.policy.specialCount > DefaultPasswordBoundaries.minSpecialCharacters.min,\n    ];\n\n    return policies.includes(true);\n  }\n\n  /** {@link PolicyEvaluator.applyPolicy} */\n  applyPolicy(options: PasswordGenerationOptions): PasswordGenerationOptions {\n    function fitToBounds(value: number, boundaries: Boundary) {\n      const { min, max } = boundaries;\n\n      const withUpperBound = Math.min(value || 0, max);\n      const withLowerBound = Math.max(withUpperBound, min);\n\n      return withLowerBound;\n    }\n\n    // apply policy overrides\n    const uppercase = this.policy.useUppercase || options.uppercase || false;\n    const lowercase = this.policy.useLowercase || options.lowercase || false;\n\n    // these overrides can cascade numeric fields to boolean fields\n    const number = this.policy.useNumbers || options.number || options.minNumber > 0;\n    const special = this.policy.useSpecial || options.special || options.minSpecial > 0;\n\n    // apply boundaries; the boundaries can cascade boolean fields to numeric fields\n    const length = fitToBounds(options.length, this.length);\n    const minNumber = fitToBounds(options.minNumber, this.minDigits);\n    const minSpecial = fitToBounds(options.minSpecial, this.minSpecialCharacters);\n\n    return {\n      ...options,\n      length,\n      uppercase,\n      lowercase,\n      number,\n      minNumber,\n      special,\n      minSpecial,\n    };\n  }\n\n  /** {@link PolicyEvaluator.sanitize} */\n  sanitize(options: PasswordGenerationOptions): PasswordGenerationOptions {\n    function cascade(enabled: boolean, value: number): [boolean, number] {\n      const enabledResult = enabled ?? value > 0;\n      const valueResult = enabledResult ? value || 1 : 0;\n\n      return [enabledResult, valueResult];\n    }\n\n    const [lowercase, minLowercase] = cascade(options.lowercase, options.minLowercase);\n    const [uppercase, minUppercase] = cascade(options.uppercase, options.minUppercase);\n    const [number, minNumber] = cascade(options.number, options.minNumber);\n    const [special, minSpecial] = cascade(options.special, options.minSpecial);\n\n    // minimums can only increase the length\n    const minConsistentLength = minLowercase + minUppercase + minNumber + minSpecial;\n    const minLength = Math.max(minConsistentLength, this.length.min);\n    const length = Math.max(options.length ?? minLength, minLength);\n\n    return {\n      ...options,\n      length,\n      minLength,\n      lowercase,\n      minLowercase,\n      uppercase,\n      minUppercase,\n      number,\n      minNumber,\n      special,\n      minSpecial,\n    };\n  }\n}\n","import { PolicyType } from \"@bitwarden/common/admin-console/enums\";\n\nimport {\n  passphraseLeastPrivilege,\n  passwordLeastPrivilege,\n  PassphraseGeneratorOptionsEvaluator,\n  PasswordGeneratorOptionsEvaluator,\n} from \"../policies\";\nimport {\n  PassphraseGenerationOptions,\n  PassphraseGeneratorPolicy,\n  PasswordGenerationOptions,\n  PasswordGeneratorPolicy,\n  PolicyConfiguration,\n} from \"../types\";\n\nconst PASSPHRASE = Object.freeze({\n  type: PolicyType.PasswordGenerator,\n  disabledValue: Object.freeze({\n    minNumberWords: 0,\n    capitalize: false,\n    includeNumber: false,\n  }),\n  combine: passphraseLeastPrivilege,\n  createEvaluator: (policy) => new PassphraseGeneratorOptionsEvaluator(policy),\n  createEvaluatorV2: (policy) => new PassphraseGeneratorOptionsEvaluator(policy),\n} as PolicyConfiguration<PassphraseGeneratorPolicy, PassphraseGenerationOptions>);\n\nconst PASSWORD = Object.freeze({\n  type: PolicyType.PasswordGenerator,\n  disabledValue: Object.freeze({\n    minLength: 0,\n    useUppercase: false,\n    useLowercase: false,\n    useNumbers: false,\n    numberCount: 0,\n    useSpecial: false,\n    specialCount: 0,\n  }),\n  combine: passwordLeastPrivilege,\n  createEvaluator: (policy) => new PasswordGeneratorOptionsEvaluator(policy),\n  createEvaluatorV2: (policy) => new PasswordGeneratorOptionsEvaluator(policy),\n} as PolicyConfiguration<PasswordGeneratorPolicy, PasswordGenerationOptions>);\n\n/** Policy configurations */\nexport const Policies = Object.freeze({\n  /** Passphrase policy configuration */\n  Passphrase: PASSPHRASE,\n\n  /** Passphrase policy configuration */\n  Password: PASSWORD,\n});\n","import { PolicyType } from \"@bitwarden/common/admin-console/enums\";\n// FIXME: use index.ts imports once policy abstractions and models\n// implement ADR-0002\nimport { Policy } from \"@bitwarden/common/admin-console/models/domain/policy\";\n\nimport { PassphraseGeneratorPolicy } from \"../types\";\n\n/** Reduces a policy into an accumulator by accepting the most restrictive\n *  values from each policy.\n *  @param acc the accumulator\n *  @param policy the policy to reduce\n *  @returns the most restrictive values between the policy and accumulator.\n */\nexport function passphraseLeastPrivilege(\n  acc: PassphraseGeneratorPolicy,\n  policy: Policy,\n): PassphraseGeneratorPolicy {\n  if (policy.type !== PolicyType.PasswordGenerator) {\n    return acc;\n  }\n\n  return {\n    minNumberWords: Math.max(acc.minNumberWords, policy.data.minNumberWords ?? acc.minNumberWords),\n    capitalize: policy.data.capitalize || acc.capitalize,\n    includeNumber: policy.data.includeNumber || acc.includeNumber,\n  };\n}\n","import { PolicyType } from \"@bitwarden/common/admin-console/enums\";\n// FIXME: use index.ts imports once policy abstractions and models\n// implement ADR-0002\nimport { Policy } from \"@bitwarden/common/admin-console/models/domain/policy\";\n\nimport { PasswordGeneratorPolicy } from \"../types\";\n\n/** Reduces a policy into an accumulator by accepting the most restrictive\n *  values from each policy.\n *  @param acc the accumulator\n *  @param policy the policy to reduce\n *  @returns the most restrictive values between the policy and accumulator.\n */\nexport function passwordLeastPrivilege(acc: PasswordGeneratorPolicy, policy: Policy) {\n  if (policy.type !== PolicyType.PasswordGenerator || !policy.enabled) {\n    return acc;\n  }\n\n  return {\n    minLength: Math.max(acc.minLength, policy.data.minLength ?? acc.minLength),\n    useUppercase: policy.data.useUpper || acc.useUppercase,\n    useLowercase: policy.data.useLower || acc.useLowercase,\n    useNumbers: policy.data.useNumbers || acc.useNumbers,\n    numberCount: Math.max(acc.numberCount, policy.data.minNumbers ?? acc.numberCount),\n    useSpecial: policy.data.useSpecial || acc.useSpecial,\n    specialCount: Math.max(acc.specialCount, policy.data.minSpecial ?? acc.specialCount),\n  };\n}\n","import { PASSPHRASE_SETTINGS, PASSWORD_SETTINGS } from \"../strategies/storage\";\nimport {\n  PassphraseGenerationOptions,\n  PassphraseGeneratorPolicy,\n  PasswordGenerationOptions,\n  PasswordGeneratorPolicy,\n} from \"../types\";\nimport { CredentialGeneratorConfiguration } from \"../types/credential-generator-configuration\";\n\nimport { DefaultPassphraseBoundaries } from \"./default-passphrase-boundaries\";\nimport { DefaultPassphraseGenerationOptions } from \"./default-passphrase-generation-options\";\nimport { DefaultPasswordBoundaries } from \"./default-password-boundaries\";\nimport { DefaultPasswordGenerationOptions } from \"./default-password-generation-options\";\nimport { Policies } from \"./policies\";\n\nconst PASSPHRASE = Object.freeze({\n  settings: {\n    initial: DefaultPassphraseGenerationOptions,\n    constraints: {\n      numWords: {\n        min: DefaultPassphraseBoundaries.numWords.min,\n        max: DefaultPassphraseBoundaries.numWords.max,\n      },\n      wordSeparator: { maxLength: 1 },\n    },\n    account: PASSPHRASE_SETTINGS,\n  },\n  policy: Policies.Passphrase,\n} satisfies CredentialGeneratorConfiguration<\n  PassphraseGenerationOptions,\n  PassphraseGeneratorPolicy\n>);\n\nconst PASSWORD = Object.freeze({\n  settings: {\n    initial: DefaultPasswordGenerationOptions,\n    constraints: {\n      length: {\n        min: DefaultPasswordBoundaries.length.min,\n        max: DefaultPasswordBoundaries.length.max,\n      },\n      minNumber: {\n        min: DefaultPasswordBoundaries.minDigits.min,\n        max: DefaultPasswordBoundaries.minDigits.max,\n      },\n      minSpecial: {\n        min: DefaultPasswordBoundaries.minSpecialCharacters.min,\n        max: DefaultPasswordBoundaries.minSpecialCharacters.max,\n      },\n    },\n    account: PASSWORD_SETTINGS,\n  },\n  policy: Policies.Password,\n} satisfies CredentialGeneratorConfiguration<PasswordGenerationOptions, PasswordGeneratorPolicy>);\n\n/** Generator configurations */\nexport const Generators = Object.freeze({\n  /** Passphrase generator configuration */\n  Passphrase: PASSPHRASE,\n\n  /** Password generator configuration */\n  Password: PASSWORD,\n});\n","import { CatchallGenerationOptions } from \"../types\";\n\n/** The default options for catchall address generation. */\nexport const DefaultCatchallOptions: CatchallGenerationOptions = Object.freeze({\n  catchallType: \"random\",\n  catchallDomain: \"\",\n  website: null,\n});\n","import { EmailDomainOptions, SelfHostedApiOptions } from \"../types\";\n\nexport const DefaultAddyIoOptions: SelfHostedApiOptions & EmailDomainOptions = Object.freeze({\n  website: null,\n  baseUrl: \"https://app.addy.io\",\n  token: \"\",\n  domain: \"\",\n});\n","import { EffUsernameGenerationOptions } from \"../types\";\n\n/** The default options for EFF long word generation. */\nexport const DefaultEffUsernameOptions: EffUsernameGenerationOptions = Object.freeze({\n  wordCapitalize: false,\n  wordIncludeNumber: false,\n  website: null,\n});\n","import { ApiOptions } from \"../types\";\n\nexport const DefaultDuckDuckGoOptions: ApiOptions = Object.freeze({\n  website: null,\n  token: \"\",\n});\n","import { ApiOptions, EmailPrefixOptions } from \"../types\";\n\nexport const DefaultFastmailOptions: ApiOptions & EmailPrefixOptions = Object.freeze({\n  website: \"\",\n  domain: \"\",\n  prefix: \"\",\n  token: \"\",\n});\n","import { ApiOptions, EmailDomainOptions } from \"../types\";\n\nexport const DefaultForwardEmailOptions: ApiOptions & EmailDomainOptions = Object.freeze({\n  website: null,\n  token: \"\",\n  domain: \"\",\n});\n","import { SubaddressGenerationOptions } from \"../types\";\n\n/** The default options for email subaddress generation. */\nexport const DefaultSubaddressOptions: SubaddressGenerationOptions = Object.freeze({\n  subaddressType: \"random\",\n  subaddressEmail: \"\",\n  website: null,\n});\n","import { ApiOptions } from \"../types\";\n\nexport const DefaultFirefoxRelayOptions: ApiOptions = Object.freeze({\n  website: null,\n  token: \"\",\n});\n","import { ForwarderMetadata } from \"../types\";\n\n/** Metadata about an email forwarding service.\n *  @remarks This is used to populate the forwarder selection list\n *  and to identify forwarding services in error messages.\n */\nexport const Forwarders = Object.freeze({\n  /** For https://addy.io/ */\n  AddyIo: Object.freeze({\n    id: \"anonaddy\",\n    name: \"Addy.io\",\n    validForSelfHosted: true,\n  } as ForwarderMetadata),\n\n  /** For https://duckduckgo.com/email/ */\n  DuckDuckGo: Object.freeze({\n    id: \"duckduckgo\",\n    name: \"DuckDuckGo\",\n    validForSelfHosted: false,\n  } as ForwarderMetadata),\n\n  /** For https://www.fastmail.com. */\n  Fastmail: Object.freeze({\n    id: \"fastmail\",\n    name: \"Fastmail\",\n    validForSelfHosted: true,\n  } as ForwarderMetadata),\n\n  /** For https://relay.firefox.com/ */\n  FirefoxRelay: Object.freeze({\n    id: \"firefoxrelay\",\n    name: \"Firefox Relay\",\n    validForSelfHosted: false,\n  } as ForwarderMetadata),\n\n  /** For https://forwardemail.net/ */\n  ForwardEmail: Object.freeze({\n    id: \"forwardemail\",\n    name: \"Forward Email\",\n    validForSelfHosted: true,\n  } as ForwarderMetadata),\n\n  /** For https://simplelogin.io/ */\n  SimpleLogin: Object.freeze({\n    id: \"simplelogin\",\n    name: \"SimpleLogin\",\n    validForSelfHosted: true,\n  } as ForwarderMetadata),\n});\n","import { SelfHostedApiOptions } from \"../types\";\n\nexport const DefaultSimpleLoginOptions: SelfHostedApiOptions = Object.freeze({\n  website: null,\n  baseUrl: \"https://app.simplelogin.io\",\n  token: \"\",\n});\n","import { UserKeyDefinition, UserKeyDefinitionOptions } from \"../../platform/state\";\n// eslint-disable-next-line -- `StateDefinition` used as an argument\nimport { StateDefinition } from \"../../platform/state/state-definition\";\n\n/** A set of options for customizing the behavior of a {@link BufferedKeyDefinition}\n */\nexport type BufferedKeyDefinitionOptions<Input, Output, Dependency> =\n  UserKeyDefinitionOptions<Input> & {\n    /** Checks whether the input type can be converted to the output type.\n     *  @param input the data that is rolling over.\n     *  @returns `true` if the definition is valid, otherwise `false`. If this\n     *  function is not specified, any truthy input is valid.\n     *\n     * @remarks this is intended for cases where you're working with validated or\n     * signed data. It should be used to prevent data from being \"laundered\" through\n     * synchronized state.\n     */\n    isValid?: (input: Input, dependency: Dependency) => Promise<boolean>;\n\n    /** Transforms the input data format to its output format.\n     *  @param input the data that is rolling over.\n     *  @returns the converted value. If this function is not specified, the value\n     *  is asserted as the output type.\n     *\n     * @remarks This is intended for converting between, say, a replication format\n     * and a disk format or rotating encryption keys.\n     */\n    map?: (input: Input, dependency: Dependency) => Promise<Output>;\n\n    /** Checks whether an overwrite should occur\n     *  @param dependency the latest value from the dependency observable provided\n     *    to the buffered state.\n     *  @returns `true` if a overwrite should occur, otherwise `false`. If this\n     *   function is not specified, overwrites occur when the dependency is truthy.\n     *\n     *  @remarks This is intended for waiting to overwrite until a dependency becomes\n     *   available (e.g. an encryption key or a user confirmation).\n     */\n    shouldOverwrite?: (dependency: Dependency) => boolean;\n  };\n\n/** Storage and mapping settings for data stored by a `BufferedState`.\n */\nexport class BufferedKeyDefinition<Input, Output = Input, Dependency = true> {\n  /**\n   * Defines a buffered state\n   * @param stateDefinition The domain of the buffer\n   * @param key Domain key that identifies the buffered value. This key must\n   *    not be reused in any capacity.\n   * @param options Configures the operation of the buffered state.\n   */\n  constructor(\n    readonly stateDefinition: StateDefinition,\n    readonly key: string,\n    readonly options: BufferedKeyDefinitionOptions<Input, Output, Dependency>,\n  ) {}\n\n  /** Converts the buffered key definition to a state provider\n   *  key definition\n   */\n  toKeyDefinition() {\n    const bufferedKey = new UserKeyDefinition<Input>(this.stateDefinition, this.key, this.options);\n\n    return bufferedKey;\n  }\n\n  /** Checks whether the dependency triggers an overwrite. */\n  shouldOverwrite(dependency: Dependency) {\n    const shouldOverwrite = this.options?.shouldOverwrite;\n    if (shouldOverwrite) {\n      return shouldOverwrite(dependency);\n    }\n\n    return dependency ? true : false;\n  }\n\n  /** Converts the input data format to its output format.\n   *  @returns the converted value.\n   */\n  map(input: Input, dependency: Dependency) {\n    const map = this.options?.map;\n    if (map) {\n      return map(input, dependency);\n    }\n\n    return Promise.resolve(input as unknown as Output);\n  }\n\n  /** Checks whether the input type can be converted to the output type.\n   *  @returns `true` if the definition is defined and valid, otherwise `false`.\n   */\n  isValid(input: Input, dependency: Dependency) {\n    if (input === null) {\n      return Promise.resolve(false);\n    }\n\n    const isValid = this.options?.isValid;\n    if (isValid) {\n      return isValid(input, dependency);\n    }\n\n    return Promise.resolve(input ? true : false);\n  }\n}\n","import { GENERATOR_DISK, UserKeyDefinition } from \"@bitwarden/common/platform/state\";\nimport { IntegrationContext, IntegrationId } from \"@bitwarden/common/tools/integration\";\nimport {\n  ApiSettings,\n  IntegrationRequest,\n  SelfHostedApiSettings,\n} from \"@bitwarden/common/tools/integration/rpc\";\nimport { BufferedKeyDefinition } from \"@bitwarden/common/tools/state/buffered-key-definition\";\n\nimport { ForwarderConfiguration, ForwarderContext, EmailDomainSettings } from \"../engine\";\nimport { CreateForwardingEmailRpcDef } from \"../engine/forwarder-configuration\";\nimport { EmailDomainOptions, SelfHostedApiOptions } from \"../types\";\n\n// integration types\nexport type AddyIoSettings = SelfHostedApiSettings & EmailDomainSettings;\nexport type AddyIoOptions = SelfHostedApiOptions & EmailDomainOptions;\nexport type AddyIoConfiguration = ForwarderConfiguration<AddyIoSettings>;\n\n// default values\nconst defaultSettings = Object.freeze({\n  token: \"\",\n  domain: \"\",\n});\n\n// supported RPC calls\nconst createForwardingEmail = Object.freeze({\n  url(_request: IntegrationRequest, context: ForwarderContext<AddyIoSettings>) {\n    return context.baseUrl() + \"/api/v1/aliases\";\n  },\n  body(request: IntegrationRequest, context: ForwarderContext<AddyIoSettings>) {\n    return {\n      domain: context.emailDomain(),\n      description: context.generatedBy(request),\n    };\n  },\n  hasJsonPayload(response: Response) {\n    return response.status === 200 || response.status === 201;\n  },\n  processJson(json: any) {\n    return [json?.data?.email];\n  },\n} as CreateForwardingEmailRpcDef<AddyIoSettings>);\n\n// forwarder configuration\nconst forwarder = Object.freeze({\n  defaultSettings,\n  settings: new UserKeyDefinition<AddyIoSettings>(GENERATOR_DISK, \"addyIoForwarder\", {\n    deserializer: (value) => value,\n    clearOn: [],\n  }),\n  importBuffer: new BufferedKeyDefinition<AddyIoSettings>(GENERATOR_DISK, \"addyIoBuffer\", {\n    deserializer: (value) => value,\n    clearOn: [\"logout\"],\n  }),\n  createForwardingEmail,\n} as const);\n\nexport const AddyIo = Object.freeze({\n  // integration\n  id: \"anonaddy\" as IntegrationId,\n  name: \"Addy.io\",\n  extends: [\"forwarder\"],\n\n  // hosting\n  selfHost: \"maybe\",\n  baseUrl: \"https://app.addy.io\",\n  authenticate(_request: IntegrationRequest, context: IntegrationContext<ApiSettings>) {\n    return { Authorization: \"Bearer \" + context.authenticationToken() };\n  },\n\n  // extensions\n  forwarder,\n} as AddyIoConfiguration);\n","import { GENERATOR_DISK, UserKeyDefinition } from \"@bitwarden/common/platform/state\";\nimport { IntegrationContext, IntegrationId } from \"@bitwarden/common/tools/integration\";\nimport { ApiSettings, IntegrationRequest } from \"@bitwarden/common/tools/integration/rpc\";\nimport { BufferedKeyDefinition } from \"@bitwarden/common/tools/state/buffered-key-definition\";\n\nimport { ForwarderConfiguration, ForwarderContext } from \"../engine\";\nimport { CreateForwardingEmailRpcDef } from \"../engine/forwarder-configuration\";\nimport { ApiOptions } from \"../types\";\n\n// integration types\nexport type DuckDuckGoSettings = ApiSettings;\nexport type DuckDuckGoOptions = ApiOptions;\nexport type DuckDuckGoConfiguration = ForwarderConfiguration<DuckDuckGoSettings>;\n\n// default values\nconst defaultSettings = Object.freeze({\n  token: \"\",\n});\n\n// supported RPC calls\nconst createForwardingEmail = Object.freeze({\n  url(_request: IntegrationRequest, context: ForwarderContext<DuckDuckGoSettings>) {\n    return context.baseUrl() + \"/email/addresses\";\n  },\n  body(_request: IntegrationRequest, _context: ForwarderContext<DuckDuckGoSettings>) {\n    return undefined;\n  },\n  hasJsonPayload(response: Response) {\n    return response.status === 200 || response.status === 201;\n  },\n  processJson(json: any) {\n    return [`${json.address}@duck.com`];\n  },\n} as CreateForwardingEmailRpcDef<DuckDuckGoSettings>);\n\n// forwarder configuration\nconst forwarder = Object.freeze({\n  defaultSettings,\n  settings: new UserKeyDefinition<DuckDuckGoSettings>(GENERATOR_DISK, \"duckDuckGoForwarder\", {\n    deserializer: (value) => value,\n    clearOn: [],\n  }),\n  importBuffer: new BufferedKeyDefinition<DuckDuckGoSettings>(GENERATOR_DISK, \"duckDuckGoBuffer\", {\n    deserializer: (value) => value,\n    clearOn: [\"logout\"],\n  }),\n  createForwardingEmail,\n} as const);\n\n// integration-wide configuration\nexport const DuckDuckGo = Object.freeze({\n  id: \"duckduckgo\" as IntegrationId,\n  name: \"DuckDuckGo\",\n  baseUrl: \"https://quack.duckduckgo.com/api\",\n  selfHost: \"never\",\n  extends: [\"forwarder\"],\n  authenticate(_request: IntegrationRequest, context: IntegrationContext<ApiSettings>) {\n    return { Authorization: \"Bearer \" + context.authenticationToken() };\n  },\n  forwarder,\n} as DuckDuckGoConfiguration);\n","import { GENERATOR_DISK, UserKeyDefinition } from \"@bitwarden/common/platform/state\";\nimport { IntegrationContext, IntegrationId } from \"@bitwarden/common/tools/integration\";\nimport { ApiSettings, IntegrationRequest } from \"@bitwarden/common/tools/integration/rpc\";\nimport { BufferedKeyDefinition } from \"@bitwarden/common/tools/state/buffered-key-definition\";\n\nimport {\n  ForwarderConfiguration,\n  ForwarderContext,\n  EmailDomainSettings,\n  AccountRequest,\n  EmailPrefixSettings,\n} from \"../engine\";\nimport { CreateForwardingEmailRpcDef, GetAccountIdRpcDef } from \"../engine/forwarder-configuration\";\nimport { ApiOptions, EmailPrefixOptions } from \"../types\";\n\n// integration types\nexport type FastmailSettings = ApiSettings & EmailPrefixSettings & EmailDomainSettings;\nexport type FastmailOptions = ApiOptions & EmailPrefixOptions & AccountRequest;\nexport type FastmailRequest = IntegrationRequest & AccountRequest;\nexport type FastmailConfiguration = ForwarderConfiguration<FastmailSettings, FastmailRequest>;\n\n// default values\nconst defaultSettings = Object.freeze({\n  domain: \"\",\n  prefix: \"\",\n  token: \"\",\n});\n\n// supported RPC calls\nconst getAccountId = Object.freeze({\n  url(_request: IntegrationRequest, context: ForwarderContext<FastmailSettings>) {\n    // cannot use \"/.well-known/jmap\" because integration RPCs\n    // never follow redirects\n    return context.baseUrl() + \"/jmap/session\";\n  },\n  hasJsonPayload(response: Response) {\n    return response.status === 200;\n  },\n  processJson(json: any, context: ForwarderContext<FastmailSettings>) {\n    const result = json.primaryAccounts?.[\"https://www.fastmail.com/dev/maskedemail\"] ?? undefined;\n\n    return [result, result ? undefined : context.missingAccountIdCause()];\n  },\n} as GetAccountIdRpcDef<FastmailSettings>);\n\nconst createForwardingEmail = Object.freeze({\n  url(_request: IntegrationRequest, context: ForwarderContext<FastmailSettings>) {\n    return context.baseUrl() + \"/jmap/api/\";\n  },\n  body(request: FastmailRequest, context: ForwarderContext<FastmailSettings>) {\n    const body = {\n      using: [\"https://www.fastmail.com/dev/maskedemail\", \"urn:ietf:params:jmap:core\"],\n      methodCalls: [\n        [\n          \"MaskedEmail/set\",\n          {\n            accountId: request.accountId,\n            create: {\n              \"new-masked-email\": {\n                state: \"enabled\",\n                description: \"\",\n                forDomain: context.website(request),\n                emailPrefix: \"\",\n              },\n            },\n          },\n          \"0\",\n        ],\n      ],\n    };\n\n    return body;\n  },\n  hasJsonPayload(response: Response) {\n    return response.status === 200;\n  },\n  processJson(json: any): [string?, string?] {\n    if (\n      json.methodResponses != null &&\n      json.methodResponses.length > 0 &&\n      json.methodResponses[0].length > 0\n    ) {\n      if (json.methodResponses[0][0] === \"MaskedEmail/set\") {\n        if (json.methodResponses[0][1]?.created?.[\"new-masked-email\"] != null) {\n          const email: string = json.methodResponses[0][1]?.created?.[\"new-masked-email\"]?.email;\n          return [email];\n        }\n        if (json.methodResponses[0][1]?.notCreated?.[\"new-masked-email\"] != null) {\n          const errorDescription: string =\n            json.methodResponses[0][1]?.notCreated?.[\"new-masked-email\"]?.description;\n          return [undefined, errorDescription];\n        }\n      } else if (json.methodResponses[0][0] === \"error\") {\n        const errorDescription: string = json.methodResponses[0][1]?.description;\n        return [undefined, errorDescription];\n      }\n    }\n  },\n} as CreateForwardingEmailRpcDef<FastmailSettings, FastmailRequest>);\n\n// forwarder configuration\nconst forwarder = Object.freeze({\n  defaultSettings,\n  settings: new UserKeyDefinition<FastmailSettings>(GENERATOR_DISK, \"fastmailForwarder\", {\n    deserializer: (value) => value,\n    clearOn: [],\n  }),\n  importBuffer: new BufferedKeyDefinition<FastmailSettings>(GENERATOR_DISK, \"fastmailBuffer\", {\n    deserializer: (value) => value,\n    clearOn: [\"logout\"],\n  }),\n  createForwardingEmail,\n  getAccountId,\n} as const);\n\n// integration-wide configuration\nexport const Fastmail = Object.freeze({\n  id: \"fastmail\" as IntegrationId,\n  name: \"Fastmail\",\n  baseUrl: \"https://api.fastmail.com\",\n  selfHost: \"maybe\",\n  extends: [\"forwarder\"],\n  authenticate(_request: IntegrationRequest, context: IntegrationContext<ApiSettings>) {\n    return { Authorization: \"Bearer \" + context.authenticationToken() };\n  },\n  forwarder,\n} as FastmailConfiguration);\n","import { GENERATOR_DISK, UserKeyDefinition } from \"@bitwarden/common/platform/state\";\nimport { IntegrationContext, IntegrationId } from \"@bitwarden/common/tools/integration\";\nimport { ApiSettings, IntegrationRequest } from \"@bitwarden/common/tools/integration/rpc\";\nimport { BufferedKeyDefinition } from \"@bitwarden/common/tools/state/buffered-key-definition\";\n\nimport { ForwarderConfiguration, ForwarderContext } from \"../engine\";\nimport { CreateForwardingEmailRpcDef } from \"../engine/forwarder-configuration\";\nimport { ApiOptions } from \"../types\";\n\n// integration types\nexport type FirefoxRelaySettings = ApiSettings;\nexport type FirefoxRelayOptions = ApiOptions;\nexport type FirefoxRelayConfiguration = ForwarderConfiguration<FirefoxRelaySettings>;\n\n// default values\nconst defaultSettings = Object.freeze({\n  token: \"\",\n} as FirefoxRelaySettings);\n\n// supported RPC calls\nconst createForwardingEmail = Object.freeze({\n  url(_request: IntegrationRequest, context: ForwarderContext<FirefoxRelaySettings>) {\n    return context.baseUrl() + \"/v1/relayaddresses/\";\n  },\n  body(request: IntegrationRequest, context: ForwarderContext<FirefoxRelaySettings>) {\n    return {\n      enabled: true,\n      generated_for: context.website(request),\n      description: context.generatedBy(request),\n    };\n  },\n  hasJsonPayload(response: Response) {\n    return response.status === 200 || response.status === 201;\n  },\n  processJson(json: any) {\n    return [json.full_address];\n  },\n} as CreateForwardingEmailRpcDef<FirefoxRelaySettings>);\n\n// forwarder configuration\nconst forwarder = Object.freeze({\n  defaultSettings,\n  settings: new UserKeyDefinition<FirefoxRelaySettings>(GENERATOR_DISK, \"firefoxRelayForwarder\", {\n    deserializer: (value) => value,\n    clearOn: [],\n  }),\n  importBuffer: new BufferedKeyDefinition<FirefoxRelaySettings>(\n    GENERATOR_DISK,\n    \"firefoxRelayBuffer\",\n    {\n      deserializer: (value) => value,\n      clearOn: [\"logout\"],\n    },\n  ),\n  createForwardingEmail,\n} as const);\n\n// integration-wide configuration\nexport const FirefoxRelay = Object.freeze({\n  id: \"firefoxrelay\" as IntegrationId,\n  name: \"Firefox Relay\",\n  baseUrl: \"https://relay.firefox.com/api\",\n  selfHost: \"never\",\n  extends: [\"forwarder\"],\n  authenticate(_request: IntegrationRequest, context: IntegrationContext<ApiSettings>) {\n    return { Authorization: \"Token \" + context.authenticationToken() };\n  },\n  forwarder,\n} as FirefoxRelayConfiguration);\n","import { GENERATOR_DISK, UserKeyDefinition } from \"@bitwarden/common/platform/state\";\nimport { IntegrationContext, IntegrationId } from \"@bitwarden/common/tools/integration\";\nimport { ApiSettings, IntegrationRequest } from \"@bitwarden/common/tools/integration/rpc\";\nimport { BufferedKeyDefinition } from \"@bitwarden/common/tools/state/buffered-key-definition\";\n\nimport { ForwarderConfiguration, ForwarderContext, EmailDomainSettings } from \"../engine\";\nimport { CreateForwardingEmailRpcDef } from \"../engine/forwarder-configuration\";\nimport { ApiOptions, EmailDomainOptions } from \"../types\";\n\n// integration types\nexport type ForwardEmailSettings = ApiSettings & EmailDomainSettings;\nexport type ForwardEmailOptions = ApiOptions & EmailDomainOptions;\nexport type ForwardEmailConfiguration = ForwarderConfiguration<ForwardEmailSettings>;\n\n// default values\nconst defaultSettings = Object.freeze({\n  token: \"\",\n  domain: \"\",\n});\n\n// supported RPC calls\nconst createForwardingEmail = Object.freeze({\n  url(_request: IntegrationRequest, context: ForwarderContext<ForwardEmailSettings>) {\n    const domain = context.emailDomain();\n    return context.baseUrl() + `/v1/domains/${domain}/aliases`;\n  },\n  body(request: IntegrationRequest, context: ForwarderContext<ForwardEmailSettings>) {\n    return {\n      labels: context.website(request),\n      description: context.generatedBy(request),\n    };\n  },\n  hasJsonPayload(response: Response) {\n    return response.status === 200 || response.status === 201;\n  },\n  processJson(json: any, context: ForwarderContext<ForwardEmailSettings>) {\n    const { name, domain } = json;\n    const domainPart = domain?.name ?? context.emailDomain();\n    return [`${name}@${domainPart}`];\n  },\n} as CreateForwardingEmailRpcDef<ForwardEmailSettings>);\n\n// forwarder configuration\nconst forwarder = Object.freeze({\n  defaultSettings,\n  settings: new UserKeyDefinition<ForwardEmailSettings>(GENERATOR_DISK, \"forwardEmailForwarder\", {\n    deserializer: (value) => value,\n    clearOn: [],\n  }),\n  importBuffer: new BufferedKeyDefinition<ForwardEmailSettings>(\n    GENERATOR_DISK,\n    \"forwardEmailBuffer\",\n    {\n      deserializer: (value) => value,\n      clearOn: [\"logout\"],\n    },\n  ),\n  createForwardingEmail,\n} as const);\n\nexport const ForwardEmail = Object.freeze({\n  // integration metadata\n  id: \"forwardemail\" as IntegrationId,\n  name: \"Forward Email\",\n  extends: [\"forwarder\"],\n\n  // service provider\n  selfHost: \"never\",\n  baseUrl: \"https://api.forwardemail.net\",\n  authenticate(_request: IntegrationRequest, context: IntegrationContext<ApiSettings>) {\n    return { Authorization: \"Basic \" + context.authenticationToken({ base64: true, suffix: \":\" }) };\n  },\n\n  // specialized configurations\n  forwarder,\n} as ForwardEmailConfiguration);\n","import { GENERATOR_DISK, UserKeyDefinition } from \"@bitwarden/common/platform/state\";\nimport { IntegrationContext, IntegrationId } from \"@bitwarden/common/tools/integration\";\nimport {\n  ApiSettings,\n  IntegrationRequest,\n  SelfHostedApiSettings,\n} from \"@bitwarden/common/tools/integration/rpc\";\nimport { BufferedKeyDefinition } from \"@bitwarden/common/tools/state/buffered-key-definition\";\n\nimport { ForwarderConfiguration, ForwarderContext } from \"../engine\";\nimport { CreateForwardingEmailRpcDef } from \"../engine/forwarder-configuration\";\nimport { SelfHostedApiOptions } from \"../types\";\n\n// integration types\nexport type SimpleLoginSettings = SelfHostedApiSettings;\nexport type SimpleLoginOptions = SelfHostedApiOptions;\nexport type SimpleLoginConfiguration = ForwarderConfiguration<SimpleLoginSettings>;\n\n// default values\nconst defaultSettings = Object.freeze({\n  token: \"\",\n  domain: \"\",\n});\n\n// supported RPC calls\nconst createForwardingEmail = Object.freeze({\n  url(request: IntegrationRequest, context: ForwarderContext<SimpleLoginSettings>) {\n    const endpoint = context.baseUrl() + \"/api/alias/random/new\";\n    const hostname = context.website(request);\n    const url = hostname !== \"\" ? `${endpoint}?hostname=${hostname}` : endpoint;\n\n    return url;\n  },\n  body(request: IntegrationRequest, context: ForwarderContext<SimpleLoginSettings>) {\n    return { note: context.generatedBy(request) };\n  },\n  hasJsonPayload(response: Response) {\n    return response.status === 200 || response.status === 201;\n  },\n  processJson(json: any) {\n    return [json?.alias];\n  },\n} as CreateForwardingEmailRpcDef<SimpleLoginSettings>);\n\n// forwarder configuration\nconst forwarder = Object.freeze({\n  defaultSettings,\n  settings: new UserKeyDefinition<SimpleLoginSettings>(GENERATOR_DISK, \"simpleLoginForwarder\", {\n    deserializer: (value) => value,\n    clearOn: [],\n  }),\n  importBuffer: new BufferedKeyDefinition<SimpleLoginSettings>(\n    GENERATOR_DISK,\n    \"simpleLoginBuffer\",\n    {\n      deserializer: (value) => value,\n      clearOn: [\"logout\"],\n    },\n  ),\n  createForwardingEmail,\n} as const);\n\n// integration-wide configuration\nexport const SimpleLogin = Object.freeze({\n  id: \"simplelogin\" as IntegrationId,\n  name: \"SimpleLogin\",\n  selfHost: \"maybe\",\n  extends: [\"forwarder\"],\n  baseUrl: \"https://app.simplelogin.io\",\n  authenticate(_request: IntegrationRequest, context: IntegrationContext<ApiSettings>) {\n    return { Authentication: context.authenticationToken() };\n  },\n  forwarder,\n} as SimpleLoginConfiguration);\n","import { AddyIo } from \"../integration/addy-io\";\nimport { DuckDuckGo } from \"../integration/duck-duck-go\";\nimport { Fastmail } from \"../integration/fastmail\";\nimport { FirefoxRelay } from \"../integration/firefox-relay\";\nimport { ForwardEmail } from \"../integration/forward-email\";\nimport { SimpleLogin } from \"../integration/simple-login\";\n\nexport const Integrations = Object.freeze({\n  AddyIo,\n  DuckDuckGo,\n  Fastmail,\n  FirefoxRelay,\n  ForwardEmail,\n  SimpleLogin,\n} as const);\n","export const UsernameDigits = Object.freeze({\n  enabled: 4,\n  disabled: 0,\n});\n","/** Types of passwords that may be configured by the password generator */\nexport const PasswordTypes = Object.freeze([\"password\", \"passphrase\"] as const);\n\n/** Types of generators that may be configured by the password generator */\nexport const GeneratorTypes = Object.freeze([...PasswordTypes, \"username\"] as const);\n","import { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\n\nimport { Randomizer } from \"../abstractions\";\nimport { WordOptions } from \"../types\";\n\n/** A randomizer backed by a CryptoService. */\nexport class CryptoServiceRandomizer implements Randomizer {\n  /** instantiates the type.\n   * @param crypto generates random numbers\n   */\n  constructor(private crypto: CryptoService) {}\n\n  async pick<Entry>(list: Array<Entry>): Promise<Entry> {\n    const length = list?.length ?? 0;\n    if (length <= 0) {\n      throw new Error(\"list must have at least one entry.\");\n    }\n\n    const index = await this.uniform(0, list.length - 1);\n    return list[index];\n  }\n\n  async pickWord(list: Array<string>, options?: WordOptions) {\n    let word = await this.pick(list);\n\n    if (options?.titleCase ?? false) {\n      word = word.charAt(0).toUpperCase() + word.slice(1);\n    }\n\n    if (options?.number ?? false) {\n      const num = await this.crypto.randomNumber(1, 9);\n      word = word + num.toString();\n    }\n\n    return word;\n  }\n\n  // ref: https://stackoverflow.com/a/12646864/1090359\n  async shuffle<T>(items: Array<T>, options?: { copy?: boolean }) {\n    const length = items?.length ?? 0;\n    if (length <= 0) {\n      throw new Error(\"items must have at least one entry.\");\n    }\n\n    const shuffled = (options?.copy ?? true) ? [...items] : items;\n\n    for (let i = shuffled.length - 1; i > 0; i--) {\n      const j = await this.uniform(0, i);\n      [shuffled[i], shuffled[j]] = [shuffled[j], shuffled[i]];\n    }\n\n    return shuffled;\n  }\n\n  async chars(length: number) {\n    let str = \"\";\n    const charSet = \"abcdefghijklmnopqrstuvwxyz1234567890\";\n    for (let i = 0; i < length; i++) {\n      const randomCharIndex = await this.uniform(0, charSet.length - 1);\n      str += charSet.charAt(randomCharIndex);\n    }\n    return str;\n  }\n\n  async uniform(min: number, max: number) {\n    return this.crypto.randomNumber(min, max);\n  }\n}\n","import { firstValueFrom, Observable } from \"rxjs\";\n\n// FIXME: use index.ts imports once policy abstractions and models\n// implement ADR-0002\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { GeneratorStrategy, GeneratorService, PolicyEvaluator } from \"../abstractions\";\n\n/** {@link GeneratorServiceAbstraction} */\nexport class DefaultGeneratorService<Options, Policy> implements GeneratorService<Options, Policy> {\n  /** Instantiates the generator service\n   * @param strategy tailors the service to a specific generator type\n   *            (e.g. password, passphrase)\n   * @param policy provides the policy to enforce\n   */\n  constructor(\n    private strategy: GeneratorStrategy<Options, Policy>,\n    private policy: PolicyService,\n  ) {}\n\n  private _evaluators$ = new Map<UserId, Observable<PolicyEvaluator<Policy, Options>>>();\n\n  /** {@link GeneratorService.options$} */\n  options$(userId: UserId) {\n    return this.strategy.durableState(userId).state$;\n  }\n\n  /** {@link GeneratorService.defaults$} */\n  defaults$(userId: UserId) {\n    return this.strategy.defaults$(userId);\n  }\n\n  /** {@link GeneratorService.saveOptions} */\n  async saveOptions(userId: UserId, options: Options): Promise<void> {\n    await this.strategy.durableState(userId).update(() => options);\n  }\n\n  /** {@link GeneratorService.evaluator$} */\n  evaluator$(userId: UserId) {\n    let evaluator$ = this._evaluators$.get(userId);\n\n    if (!evaluator$) {\n      evaluator$ = this.createEvaluator(userId);\n      this._evaluators$.set(userId, evaluator$);\n    }\n\n    return evaluator$;\n  }\n\n  private createEvaluator(userId: UserId) {\n    const evaluator$ = this.policy.getAll$(this.strategy.policy, userId).pipe(\n      // create the evaluator from the policies\n      this.strategy.toEvaluator(),\n    );\n\n    return evaluator$;\n  }\n\n  /** {@link GeneratorService.enforcePolicy} */\n  async enforcePolicy(userId: UserId, options: Options): Promise<Options> {\n    const policy = await firstValueFrom(this.evaluator$(userId));\n    const evaluated = policy.applyPolicy(options);\n    const sanitized = policy.sanitize(evaluated);\n    return sanitized;\n  }\n\n  /** {@link GeneratorService.generate} */\n  async generate(options: Options): Promise<string> {\n    return await this.strategy.generate(options);\n  }\n}\n","import {\n  Observer,\n  SubjectLike,\n  Unsubscribable,\n  ReplaySubject,\n  filter,\n  map,\n  Subject,\n  takeUntil,\n  pairwise,\n  combineLatest,\n  distinctUntilChanged,\n  BehaviorSubject,\n  race,\n  ignoreElements,\n  endWith,\n  startWith,\n  Observable,\n  Subscription,\n} from \"rxjs\";\nimport { Simplify } from \"type-fest\";\n\nimport { SingleUserState } from \"@bitwarden/common/platform/state\";\n\nimport { Dependencies, SingleUserDependency, WhenDependency } from \"../dependencies\";\n\n/** dependencies accepted by the user state subject */\nexport type UserStateSubjectDependencies<State, Dependency> = Simplify<\n  SingleUserDependency &\n    Partial<WhenDependency> &\n    Partial<Dependencies<Dependency>> & {\n      /** Compute the next stored value. If this is not set, values\n       *  provided to `next` unconditionally override state.\n       *  @param current the value stored in state\n       *  @param next the value received by the user state subject's `next` member\n       *  @param dependencies the latest value from `Dependencies<TCombine>`\n       *  @returns the value to store in state\n       */\n      nextValue?: (current: State, next: State, dependencies?: Dependency) => State;\n      /**\n       * Compute whether the state should update. If this is not set, values\n       * provided to `next` always update the state.\n       * @param current the value stored in state\n       * @param next the value received by the user state subject's `next` member\n       * @param dependencies the latest value from `Dependencies<TCombine>`\n       * @returns `true` if the value should be stored, otherwise `false`.\n       */\n      shouldUpdate?: (value: State, next: State, dependencies?: Dependency) => boolean;\n    }\n>;\n\n/**\n * Adapt a state provider to an rxjs subject.\n *\n * This subject buffers the last value it received in memory. The buffer is erased\n * if the subject receives a complete or error event. It does not persist the buffer.\n *\n * Warning! The user state subject has a synchronous interface, but subscriptions are\n * always asynchronous.\n *\n * @template State the state stored by the subject\n * @template Dependencies use-specific dependencies provided by the user.\n */\nexport class UserStateSubject<State, Dependencies = null>\n  extends Observable<State>\n  implements SubjectLike<State>\n{\n  /**\n   * Instantiates the user state subject\n   * @param state the backing store of the subject\n   * @param dependencies tailor the subject's behavior for a particular\n   *   purpose.\n   * @param dependencies.when$ blocks updates to the state subject until\n   *   this becomes true. When this occurs, only the last-received update\n   *   is applied. The blocked update is kept in memory. It does not persist\n   *   to disk.\n   * @param dependencies.singleUserId$ writes block until the singleUserId$\n   *   is available.\n   */\n  constructor(\n    private state: SingleUserState<State>,\n    private dependencies: UserStateSubjectDependencies<State, Dependencies>,\n  ) {\n    super();\n\n    // normalize dependencies\n    const when$ = (this.dependencies.when$ ?? new BehaviorSubject(true)).pipe(\n      distinctUntilChanged(),\n    );\n    const userIdAvailable$ = this.dependencies.singleUserId$.pipe(\n      startWith(state.userId),\n      pairwise(),\n      map(([expectedUserId, actualUserId]) => {\n        if (expectedUserId === actualUserId) {\n          return true;\n        } else {\n          throw { expectedUserId, actualUserId };\n        }\n      }),\n      distinctUntilChanged(),\n    );\n\n    // observe completion\n    const whenComplete$ = when$.pipe(ignoreElements(), endWith(true));\n    const inputComplete$ = this.input.pipe(ignoreElements(), endWith(true));\n    const userIdComplete$ = this.dependencies.singleUserId$.pipe(ignoreElements(), endWith(true));\n    const completion$ = race(whenComplete$, inputComplete$, userIdComplete$);\n\n    // wire subscriptions\n    this.outputSubscription = this.state.state$.subscribe(this.output);\n    this.inputSubscription = combineLatest([this.input, when$, userIdAvailable$])\n      .pipe(\n        filter(([_, when]) => when),\n        map(([state]) => state),\n        takeUntil(completion$),\n      )\n      .subscribe({\n        next: (r) => this.onNext(r),\n        error: (e: unknown) => this.onError(e),\n        complete: () => this.onComplete(),\n      });\n  }\n\n  /** The userId to which the subject is bound.\n   */\n  get userId() {\n    return this.state.userId;\n  }\n\n  next(value: State) {\n    this.input?.next(value);\n  }\n\n  error(err: any) {\n    this.input?.error(err);\n  }\n\n  complete() {\n    this.input?.complete();\n  }\n\n  /** Subscribe to the subject's event stream\n   * @param observer listening for events\n   * @returns the subscription\n   */\n  subscribe(observer?: Partial<Observer<State>> | ((value: State) => void) | null): Subscription {\n    return this.output.subscribe(observer);\n  }\n\n  // using subjects to ensure the right semantics are followed;\n  // if greater efficiency becomes desirable, consider implementing\n  // `SubjectLike` directly\n  private input = new Subject<State>();\n  private readonly output = new ReplaySubject<State>(1);\n\n  private inputSubscription: Unsubscribable;\n  private outputSubscription: Unsubscribable;\n\n  private onNext(value: State) {\n    const nextValue = this.dependencies.nextValue ?? ((_: State, next: State) => next);\n    const shouldUpdate = this.dependencies.shouldUpdate ?? ((_: State) => true);\n\n    this.state\n      .update(\n        (state, dependencies) => {\n          const next = nextValue(state, value, dependencies);\n          return next;\n        },\n        {\n          shouldUpdate(current, dependencies) {\n            const update = shouldUpdate(current, value, dependencies);\n            return update;\n          },\n          combineLatestWith: this.dependencies.dependencies$,\n        },\n      )\n      .catch((e: any) => this.onError(e));\n  }\n\n  private onError(value: any) {\n    if (!this.isDisposed) {\n      this.output.error(value);\n    }\n\n    this.dispose();\n  }\n\n  private onComplete() {\n    if (!this.isDisposed) {\n      this.output.complete();\n    }\n\n    this.dispose();\n  }\n\n  private get isDisposed() {\n    return this.input === null;\n  }\n\n  private dispose() {\n    if (!this.isDisposed) {\n      // clean up internal subscriptions\n      this.inputSubscription.unsubscribe();\n      this.outputSubscription.unsubscribe();\n      this.inputSubscription = null;\n      this.outputSubscription = null;\n\n      // drop input to ensure its value is removed from memory\n      this.input = null;\n    }\n  }\n}\n","import { map, distinctUntilChanged, OperatorFunction } from \"rxjs\";\n\n/**\n * An observable operator that reduces an emitted collection to a single object,\n * returning a default if all items are ignored.\n * @param reduce The reduce function to apply to the filtered collection. The\n *  first argument is the accumulator, and the second is the current item. The\n *  return value is the new accumulator.\n * @param defaultValue The default value to return if the collection is empty. The\n *   default value is also the initial value of the accumulator.\n */\nexport function reduceCollection<Item, Accumulator>(\n  reduce: (acc: Accumulator, value: Item) => Accumulator,\n  defaultValue: Accumulator,\n): OperatorFunction<Item[], Accumulator> {\n  return map((values: Item[]) => {\n    const reduced = (values ?? []).reduce(reduce, structuredClone(defaultValue));\n    return reduced;\n  });\n}\n\n/**\n * An observable operator that emits distinct values by checking that all\n *   values in the previous entry match the next entry. This method emits\n *   when a key is added and does not when a key is removed.\n * @remarks This method checks objects. It does not check items in arrays.\n */\nexport function distinctIfShallowMatch<Item>(): OperatorFunction<Item, Item> {\n  return distinctUntilChanged((previous, current) => {\n    let isDistinct = true;\n\n    for (const key in current) {\n      isDistinct &&= previous[key] === current[key];\n    }\n\n    return isDistinct;\n  });\n}\n","import { map, pipe } from \"rxjs\";\n\nimport { reduceCollection, distinctIfShallowMatch } from \"@bitwarden/common/tools/rx\";\n\nimport { DefaultPolicyEvaluator } from \"./policies\";\nimport { PolicyConfiguration } from \"./types\";\n\n/** Maps an administrative console policy to a policy evaluator using the provided configuration.\n *  @param configuration the configuration that constructs the evaluator.\n */\nexport function mapPolicyToEvaluator<Policy, Evaluator>(\n  configuration: PolicyConfiguration<Policy, Evaluator>,\n) {\n  return pipe(\n    reduceCollection(configuration.combine, configuration.disabledValue),\n    distinctIfShallowMatch(),\n    map(configuration.createEvaluator),\n  );\n}\n\n/** Maps an administrative console policy to a policy evaluator using the provided configuration.\n *  @param configuration the configuration that constructs the evaluator.\n */\nexport function mapPolicyToEvaluatorV2<Policy, Evaluator>(\n  configuration: PolicyConfiguration<Policy, Evaluator>,\n) {\n  return pipe(\n    reduceCollection(configuration.combine, configuration.disabledValue),\n    distinctIfShallowMatch(),\n    map(configuration.createEvaluatorV2),\n  );\n}\n\n/** Constructs a method that maps a policy to the default (no-op) policy. */\nexport function newDefaultEvaluator<Target>() {\n  return () => {\n    return pipe(map((_) => new DefaultPolicyEvaluator<Target>()));\n  };\n}\n","import { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { IntegrationMetadata } from \"./integration-metadata\";\nimport { ApiSettings, IntegrationRequest } from \"./rpc\";\n\n/** Utilities for processing integration settings */\nexport class IntegrationContext<Settings extends object> {\n  /** Instantiates an integration context\n   *  @param metadata - defines integration capabilities\n   *  @param i18n - localizes error messages\n   */\n  constructor(\n    readonly metadata: IntegrationMetadata,\n    protected settings: Settings,\n    protected i18n: I18nService,\n  ) {}\n\n  /** Lookup the integration's baseUrl\n   *  @returns the baseUrl for the API's integration point.\n   *   - By default this is defined by the metadata\n   *   - When a service allows self-hosting, this can be supplied by `settings`.\n   *  @throws a localized error message when a base URL is neither defined by the metadata or\n   *   supplied by an argument.\n   */\n  baseUrl(): string {\n    // normalize baseUrl\n    const setting =\n      (this.settings && \"baseUrl\" in this.settings\n        ? (this.settings.baseUrl as string)\n        : undefined) ?? \"\";\n    let result = \"\";\n\n    // look up definition\n    if (this.metadata.selfHost === \"always\") {\n      result = setting;\n    } else if (this.metadata.selfHost === \"never\" || setting.length <= 0) {\n      result = this.metadata.baseUrl ?? \"\";\n    } else {\n      result = setting;\n    }\n\n    // postconditions\n    if (result === \"\") {\n      const error = this.i18n.t(\"forwarderNoUrl\", this.metadata.name);\n      throw error;\n    }\n\n    return result;\n  }\n\n  /** look up a service API's authentication token\n   *  @param options.base64 when `true`, base64 encodes the result. Defaults to `false`.\n   *  @param options.suffix a string to append to the token. Defaults to empty.\n   *  @returns the user's authentication token\n   *  @throws a localized error message when the token is invalid.\n   *  @remarks the string is thrown for backwards compatibility\n   */\n  authenticationToken(\n    options: { base64?: boolean; suffix?: string } = null,\n  ): Settings extends ApiSettings ? string : never {\n    // normalize `token` then assert it has a value\n    let token = \"token\" in this.settings ? ((this.settings.token as string) ?? \"\") : \"\";\n    if (token === \"\") {\n      const error = this.i18n.t(\"forwaderInvalidToken\", this.metadata.name);\n      throw error;\n    }\n\n    // if a suffix exists, it needs to be included before encoding\n    token += options?.suffix ?? \"\";\n    if (options?.base64) {\n      token = Utils.fromUtf8ToB64(token);\n    }\n\n    return token;\n  }\n\n  /** look up the website the integration is working with.\n   *  @param request supplies information about the state of the extension site\n   *  @returns The website or an empty string if a website isn't available\n   *  @remarks `website` is usually supplied when generating a credential from the vault\n   */\n  website(request: IntegrationRequest) {\n    return request.website ?? \"\";\n  }\n\n  /** look up localized text indicating Bitwarden requested the forwarding address.\n   *  @param request supplies information about the state of the extension site\n   *  @returns localized text describing a generated forwarding address\n   */\n  generatedBy(request: IntegrationRequest) {\n    const website = this.website(request);\n\n    const descriptionId =\n      website === \"\" ? \"forwarderGeneratedBy\" : \"forwarderGeneratedByWithWebsite\";\n    const description = this.i18n.t(descriptionId, website);\n\n    return description;\n  }\n}\n","import { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { IntegrationContext } from \"@bitwarden/common/tools/integration/integration-context\";\nimport { ApiSettings } from \"@bitwarden/common/tools/integration/rpc\";\n\nimport { ForwarderConfiguration } from \"./forwarder-configuration\";\nimport { EmailDomainSettings, EmailPrefixSettings } from \"./settings\";\n\n/**\n * Surfaces contextual information to forwarder integrations.\n */\nexport class ForwarderContext<Settings extends ApiSettings> extends IntegrationContext<Settings> {\n  /** Instantiates the context.\n   * @param configuration of the forwarder this context assists\n   * @param settings loaded from the forwarder's state\n   * @param i18n localizes error handling\n   */\n  constructor(\n    readonly configuration: ForwarderConfiguration<Settings>,\n    settings: Settings,\n    i18n: I18nService,\n  ) {\n    super(configuration, settings, i18n);\n  }\n\n  /** look up the domain part of an email address from the forwarder's settings.\n   *  @returns a domain part of an email address\n   *  @throws a localized error message when the domain isn't found.\n   *  @remarks the string is thrown for backwards compatibility\n   */\n  emailDomain(): Settings extends EmailDomainSettings ? string : never {\n    const domain = \"domain\" in this.settings ? (this.settings.domain ?? \"\") : \"\";\n    if (domain === \"\") {\n      const error = this.i18n.t(\"forwarderNoDomain\", this.configuration.name);\n      throw error;\n    }\n\n    return domain as any;\n  }\n\n  /** look up a prefix applied to the email address from the forwarder's settings.\n   *  @returns the prefix\n   *  @throws a localized error message when the prefix isn't found.\n   *  @remarks the string is thrown for backwards compatibility\n   */\n  emailPrefix(): Settings extends EmailPrefixSettings ? string : never {\n    const prefix = \"prefix\" in this.settings ? (this.settings.prefix ?? \"\") : \"\";\n    if (prefix === \"\") {\n      const error = this.i18n.t(\"forwarderNoPrefix\", this.configuration.name);\n      throw error;\n    }\n\n    return prefix as any;\n  }\n\n  /** look up a localized error message indicating an account id is required\n   *  but wasn't found.\n   *  @remarks this returns a string instead of throwing it so that the\n   *    user can decide upon control flow.\n   */\n  missingAccountIdCause() {\n    return this.i18n.t(\"forwarderNoAccountId\", this.configuration.name);\n  }\n}\n","// EFF's Long Wordlist from https://www.eff.org/dice\nexport const EFFLongWordList = [\n  \"abacus\",\n  \"abdomen\",\n  \"abdominal\",\n  \"abide\",\n  \"abiding\",\n  \"ability\",\n  \"ablaze\",\n  \"able\",\n  \"abnormal\",\n  \"abrasion\",\n  \"abrasive\",\n  \"abreast\",\n  \"abridge\",\n  \"abroad\",\n  \"abruptly\",\n  \"absence\",\n  \"absentee\",\n  \"absently\",\n  \"absinthe\",\n  \"absolute\",\n  \"absolve\",\n  \"abstain\",\n  \"abstract\",\n  \"absurd\",\n  \"accent\",\n  \"acclaim\",\n  \"acclimate\",\n  \"accompany\",\n  \"account\",\n  \"accuracy\",\n  \"accurate\",\n  \"accustom\",\n  \"acetone\",\n  \"achiness\",\n  \"aching\",\n  \"acid\",\n  \"acorn\",\n  \"acquaint\",\n  \"acquire\",\n  \"acre\",\n  \"acrobat\",\n  \"acronym\",\n  \"acting\",\n  \"action\",\n  \"activate\",\n  \"activator\",\n  \"active\",\n  \"activism\",\n  \"activist\",\n  \"activity\",\n  \"actress\",\n  \"acts\",\n  \"acutely\",\n  \"acuteness\",\n  \"aeration\",\n  \"aerobics\",\n  \"aerosol\",\n  \"aerospace\",\n  \"afar\",\n  \"affair\",\n  \"affected\",\n  \"affecting\",\n  \"affection\",\n  \"affidavit\",\n  \"affiliate\",\n  \"affirm\",\n  \"affix\",\n  \"afflicted\",\n  \"affluent\",\n  \"afford\",\n  \"affront\",\n  \"aflame\",\n  \"afloat\",\n  \"aflutter\",\n  \"afoot\",\n  \"afraid\",\n  \"afterglow\",\n  \"afterlife\",\n  \"aftermath\",\n  \"aftermost\",\n  \"afternoon\",\n  \"aged\",\n  \"ageless\",\n  \"agency\",\n  \"agenda\",\n  \"agent\",\n  \"aggregate\",\n  \"aghast\",\n  \"agile\",\n  \"agility\",\n  \"aging\",\n  \"agnostic\",\n  \"agonize\",\n  \"agonizing\",\n  \"agony\",\n  \"agreeable\",\n  \"agreeably\",\n  \"agreed\",\n  \"agreeing\",\n  \"agreement\",\n  \"aground\",\n  \"ahead\",\n  \"ahoy\",\n  \"aide\",\n  \"aids\",\n  \"aim\",\n  \"ajar\",\n  \"alabaster\",\n  \"alarm\",\n  \"albatross\",\n  \"album\",\n  \"alfalfa\",\n  \"algebra\",\n  \"algorithm\",\n  \"alias\",\n  \"alibi\",\n  \"alienable\",\n  \"alienate\",\n  \"aliens\",\n  \"alike\",\n  \"alive\",\n  \"alkaline\",\n  \"alkalize\",\n  \"almanac\",\n  \"almighty\",\n  \"almost\",\n  \"aloe\",\n  \"aloft\",\n  \"aloha\",\n  \"alone\",\n  \"alongside\",\n  \"aloof\",\n  \"alphabet\",\n  \"alright\",\n  \"although\",\n  \"altitude\",\n  \"alto\",\n  \"aluminum\",\n  \"alumni\",\n  \"always\",\n  \"amaretto\",\n  \"amaze\",\n  \"amazingly\",\n  \"amber\",\n  \"ambiance\",\n  \"ambiguity\",\n  \"ambiguous\",\n  \"ambition\",\n  \"ambitious\",\n  \"ambulance\",\n  \"ambush\",\n  \"amendable\",\n  \"amendment\",\n  \"amends\",\n  \"amenity\",\n  \"amiable\",\n  \"amicably\",\n  \"amid\",\n  \"amigo\",\n  \"amino\",\n  \"amiss\",\n  \"ammonia\",\n  \"ammonium\",\n  \"amnesty\",\n  \"amniotic\",\n  \"among\",\n  \"amount\",\n  \"amperage\",\n  \"ample\",\n  \"amplifier\",\n  \"amplify\",\n  \"amply\",\n  \"amuck\",\n  \"amulet\",\n  \"amusable\",\n  \"amused\",\n  \"amusement\",\n  \"amuser\",\n  \"amusing\",\n  \"anaconda\",\n  \"anaerobic\",\n  \"anagram\",\n  \"anatomist\",\n  \"anatomy\",\n  \"anchor\",\n  \"anchovy\",\n  \"ancient\",\n  \"android\",\n  \"anemia\",\n  \"anemic\",\n  \"aneurism\",\n  \"anew\",\n  \"angelfish\",\n  \"angelic\",\n  \"anger\",\n  \"angled\",\n  \"angler\",\n  \"angles\",\n  \"angling\",\n  \"angrily\",\n  \"angriness\",\n  \"anguished\",\n  \"angular\",\n  \"animal\",\n  \"animate\",\n  \"animating\",\n  \"animation\",\n  \"animator\",\n  \"anime\",\n  \"animosity\",\n  \"ankle\",\n  \"annex\",\n  \"annotate\",\n  \"announcer\",\n  \"annoying\",\n  \"annually\",\n  \"annuity\",\n  \"anointer\",\n  \"another\",\n  \"answering\",\n  \"antacid\",\n  \"antarctic\",\n  \"anteater\",\n  \"antelope\",\n  \"antennae\",\n  \"anthem\",\n  \"anthill\",\n  \"anthology\",\n  \"antibody\",\n  \"antics\",\n  \"antidote\",\n  \"antihero\",\n  \"antiquely\",\n  \"antiques\",\n  \"antiquity\",\n  \"antirust\",\n  \"antitoxic\",\n  \"antitrust\",\n  \"antiviral\",\n  \"antivirus\",\n  \"antler\",\n  \"antonym\",\n  \"antsy\",\n  \"anvil\",\n  \"anybody\",\n  \"anyhow\",\n  \"anymore\",\n  \"anyone\",\n  \"anyplace\",\n  \"anything\",\n  \"anytime\",\n  \"anyway\",\n  \"anywhere\",\n  \"aorta\",\n  \"apache\",\n  \"apostle\",\n  \"appealing\",\n  \"appear\",\n  \"appease\",\n  \"appeasing\",\n  \"appendage\",\n  \"appendix\",\n  \"appetite\",\n  \"appetizer\",\n  \"applaud\",\n  \"applause\",\n  \"apple\",\n  \"appliance\",\n  \"applicant\",\n  \"applied\",\n  \"apply\",\n  \"appointee\",\n  \"appraisal\",\n  \"appraiser\",\n  \"apprehend\",\n  \"approach\",\n  \"approval\",\n  \"approve\",\n  \"apricot\",\n  \"april\",\n  \"apron\",\n  \"aptitude\",\n  \"aptly\",\n  \"aqua\",\n  \"aqueduct\",\n  \"arbitrary\",\n  \"arbitrate\",\n  \"ardently\",\n  \"area\",\n  \"arena\",\n  \"arguable\",\n  \"arguably\",\n  \"argue\",\n  \"arise\",\n  \"armadillo\",\n  \"armband\",\n  \"armchair\",\n  \"armed\",\n  \"armful\",\n  \"armhole\",\n  \"arming\",\n  \"armless\",\n  \"armoire\",\n  \"armored\",\n  \"armory\",\n  \"armrest\",\n  \"army\",\n  \"aroma\",\n  \"arose\",\n  \"around\",\n  \"arousal\",\n  \"arrange\",\n  \"array\",\n  \"arrest\",\n  \"arrival\",\n  \"arrive\",\n  \"arrogance\",\n  \"arrogant\",\n  \"arson\",\n  \"art\",\n  \"ascend\",\n  \"ascension\",\n  \"ascent\",\n  \"ascertain\",\n  \"ashamed\",\n  \"ashen\",\n  \"ashes\",\n  \"ashy\",\n  \"aside\",\n  \"askew\",\n  \"asleep\",\n  \"asparagus\",\n  \"aspect\",\n  \"aspirate\",\n  \"aspire\",\n  \"aspirin\",\n  \"astonish\",\n  \"astound\",\n  \"astride\",\n  \"astrology\",\n  \"astronaut\",\n  \"astronomy\",\n  \"astute\",\n  \"atlantic\",\n  \"atlas\",\n  \"atom\",\n  \"atonable\",\n  \"atop\",\n  \"atrium\",\n  \"atrocious\",\n  \"atrophy\",\n  \"attach\",\n  \"attain\",\n  \"attempt\",\n  \"attendant\",\n  \"attendee\",\n  \"attention\",\n  \"attentive\",\n  \"attest\",\n  \"attic\",\n  \"attire\",\n  \"attitude\",\n  \"attractor\",\n  \"attribute\",\n  \"atypical\",\n  \"auction\",\n  \"audacious\",\n  \"audacity\",\n  \"audible\",\n  \"audibly\",\n  \"audience\",\n  \"audio\",\n  \"audition\",\n  \"augmented\",\n  \"august\",\n  \"authentic\",\n  \"author\",\n  \"autism\",\n  \"autistic\",\n  \"autograph\",\n  \"automaker\",\n  \"automated\",\n  \"automatic\",\n  \"autopilot\",\n  \"available\",\n  \"avalanche\",\n  \"avatar\",\n  \"avenge\",\n  \"avenging\",\n  \"avenue\",\n  \"average\",\n  \"aversion\",\n  \"avert\",\n  \"aviation\",\n  \"aviator\",\n  \"avid\",\n  \"avoid\",\n  \"await\",\n  \"awaken\",\n  \"award\",\n  \"aware\",\n  \"awhile\",\n  \"awkward\",\n  \"awning\",\n  \"awoke\",\n  \"awry\",\n  \"axis\",\n  \"babble\",\n  \"babbling\",\n  \"babied\",\n  \"baboon\",\n  \"backache\",\n  \"backboard\",\n  \"backboned\",\n  \"backdrop\",\n  \"backed\",\n  \"backer\",\n  \"backfield\",\n  \"backfire\",\n  \"backhand\",\n  \"backing\",\n  \"backlands\",\n  \"backlash\",\n  \"backless\",\n  \"backlight\",\n  \"backlit\",\n  \"backlog\",\n  \"backpack\",\n  \"backpedal\",\n  \"backrest\",\n  \"backroom\",\n  \"backshift\",\n  \"backside\",\n  \"backslid\",\n  \"backspace\",\n  \"backspin\",\n  \"backstab\",\n  \"backstage\",\n  \"backtalk\",\n  \"backtrack\",\n  \"backup\",\n  \"backward\",\n  \"backwash\",\n  \"backwater\",\n  \"backyard\",\n  \"bacon\",\n  \"bacteria\",\n  \"bacterium\",\n  \"badass\",\n  \"badge\",\n  \"badland\",\n  \"badly\",\n  \"badness\",\n  \"baffle\",\n  \"baffling\",\n  \"bagel\",\n  \"bagful\",\n  \"baggage\",\n  \"bagged\",\n  \"baggie\",\n  \"bagginess\",\n  \"bagging\",\n  \"baggy\",\n  \"bagpipe\",\n  \"baguette\",\n  \"baked\",\n  \"bakery\",\n  \"bakeshop\",\n  \"baking\",\n  \"balance\",\n  \"balancing\",\n  \"balcony\",\n  \"balmy\",\n  \"balsamic\",\n  \"bamboo\",\n  \"banana\",\n  \"banish\",\n  \"banister\",\n  \"banjo\",\n  \"bankable\",\n  \"bankbook\",\n  \"banked\",\n  \"banker\",\n  \"banking\",\n  \"banknote\",\n  \"bankroll\",\n  \"banner\",\n  \"bannister\",\n  \"banshee\",\n  \"banter\",\n  \"barbecue\",\n  \"barbed\",\n  \"barbell\",\n  \"barber\",\n  \"barcode\",\n  \"barge\",\n  \"bargraph\",\n  \"barista\",\n  \"baritone\",\n  \"barley\",\n  \"barmaid\",\n  \"barman\",\n  \"barn\",\n  \"barometer\",\n  \"barrack\",\n  \"barracuda\",\n  \"barrel\",\n  \"barrette\",\n  \"barricade\",\n  \"barrier\",\n  \"barstool\",\n  \"bartender\",\n  \"barterer\",\n  \"bash\",\n  \"basically\",\n  \"basics\",\n  \"basil\",\n  \"basin\",\n  \"basis\",\n  \"basket\",\n  \"batboy\",\n  \"batch\",\n  \"bath\",\n  \"baton\",\n  \"bats\",\n  \"battalion\",\n  \"battered\",\n  \"battering\",\n  \"battery\",\n  \"batting\",\n  \"battle\",\n  \"bauble\",\n  \"bazooka\",\n  \"blabber\",\n  \"bladder\",\n  \"blade\",\n  \"blah\",\n  \"blame\",\n  \"blaming\",\n  \"blanching\",\n  \"blandness\",\n  \"blank\",\n  \"blaspheme\",\n  \"blasphemy\",\n  \"blast\",\n  \"blatancy\",\n  \"blatantly\",\n  \"blazer\",\n  \"blazing\",\n  \"bleach\",\n  \"bleak\",\n  \"bleep\",\n  \"blemish\",\n  \"blend\",\n  \"bless\",\n  \"blighted\",\n  \"blimp\",\n  \"bling\",\n  \"blinked\",\n  \"blinker\",\n  \"blinking\",\n  \"blinks\",\n  \"blip\",\n  \"blissful\",\n  \"blitz\",\n  \"blizzard\",\n  \"bloated\",\n  \"bloating\",\n  \"blob\",\n  \"blog\",\n  \"bloomers\",\n  \"blooming\",\n  \"blooper\",\n  \"blot\",\n  \"blouse\",\n  \"blubber\",\n  \"bluff\",\n  \"bluish\",\n  \"blunderer\",\n  \"blunt\",\n  \"blurb\",\n  \"blurred\",\n  \"blurry\",\n  \"blurt\",\n  \"blush\",\n  \"blustery\",\n  \"boaster\",\n  \"boastful\",\n  \"boasting\",\n  \"boat\",\n  \"bobbed\",\n  \"bobbing\",\n  \"bobble\",\n  \"bobcat\",\n  \"bobsled\",\n  \"bobtail\",\n  \"bodacious\",\n  \"body\",\n  \"bogged\",\n  \"boggle\",\n  \"bogus\",\n  \"boil\",\n  \"bok\",\n  \"bolster\",\n  \"bolt\",\n  \"bonanza\",\n  \"bonded\",\n  \"bonding\",\n  \"bondless\",\n  \"boned\",\n  \"bonehead\",\n  \"boneless\",\n  \"bonelike\",\n  \"boney\",\n  \"bonfire\",\n  \"bonnet\",\n  \"bonsai\",\n  \"bonus\",\n  \"bony\",\n  \"boogeyman\",\n  \"boogieman\",\n  \"book\",\n  \"boondocks\",\n  \"booted\",\n  \"booth\",\n  \"bootie\",\n  \"booting\",\n  \"bootlace\",\n  \"bootleg\",\n  \"boots\",\n  \"boozy\",\n  \"borax\",\n  \"boring\",\n  \"borough\",\n  \"borrower\",\n  \"borrowing\",\n  \"boss\",\n  \"botanical\",\n  \"botanist\",\n  \"botany\",\n  \"botch\",\n  \"both\",\n  \"bottle\",\n  \"bottling\",\n  \"bottom\",\n  \"bounce\",\n  \"bouncing\",\n  \"bouncy\",\n  \"bounding\",\n  \"boundless\",\n  \"bountiful\",\n  \"bovine\",\n  \"boxcar\",\n  \"boxer\",\n  \"boxing\",\n  \"boxlike\",\n  \"boxy\",\n  \"breach\",\n  \"breath\",\n  \"breeches\",\n  \"breeching\",\n  \"breeder\",\n  \"breeding\",\n  \"breeze\",\n  \"breezy\",\n  \"brethren\",\n  \"brewery\",\n  \"brewing\",\n  \"briar\",\n  \"bribe\",\n  \"brick\",\n  \"bride\",\n  \"bridged\",\n  \"brigade\",\n  \"bright\",\n  \"brilliant\",\n  \"brim\",\n  \"bring\",\n  \"brink\",\n  \"brisket\",\n  \"briskly\",\n  \"briskness\",\n  \"bristle\",\n  \"brittle\",\n  \"broadband\",\n  \"broadcast\",\n  \"broaden\",\n  \"broadly\",\n  \"broadness\",\n  \"broadside\",\n  \"broadways\",\n  \"broiler\",\n  \"broiling\",\n  \"broken\",\n  \"broker\",\n  \"bronchial\",\n  \"bronco\",\n  \"bronze\",\n  \"bronzing\",\n  \"brook\",\n  \"broom\",\n  \"brought\",\n  \"browbeat\",\n  \"brownnose\",\n  \"browse\",\n  \"browsing\",\n  \"bruising\",\n  \"brunch\",\n  \"brunette\",\n  \"brunt\",\n  \"brush\",\n  \"brussels\",\n  \"brute\",\n  \"brutishly\",\n  \"bubble\",\n  \"bubbling\",\n  \"bubbly\",\n  \"buccaneer\",\n  \"bucked\",\n  \"bucket\",\n  \"buckle\",\n  \"buckshot\",\n  \"buckskin\",\n  \"bucktooth\",\n  \"buckwheat\",\n  \"buddhism\",\n  \"buddhist\",\n  \"budding\",\n  \"buddy\",\n  \"budget\",\n  \"buffalo\",\n  \"buffed\",\n  \"buffer\",\n  \"buffing\",\n  \"buffoon\",\n  \"buggy\",\n  \"bulb\",\n  \"bulge\",\n  \"bulginess\",\n  \"bulgur\",\n  \"bulk\",\n  \"bulldog\",\n  \"bulldozer\",\n  \"bullfight\",\n  \"bullfrog\",\n  \"bullhorn\",\n  \"bullion\",\n  \"bullish\",\n  \"bullpen\",\n  \"bullring\",\n  \"bullseye\",\n  \"bullwhip\",\n  \"bully\",\n  \"bunch\",\n  \"bundle\",\n  \"bungee\",\n  \"bunion\",\n  \"bunkbed\",\n  \"bunkhouse\",\n  \"bunkmate\",\n  \"bunny\",\n  \"bunt\",\n  \"busboy\",\n  \"bush\",\n  \"busily\",\n  \"busload\",\n  \"bust\",\n  \"busybody\",\n  \"buzz\",\n  \"cabana\",\n  \"cabbage\",\n  \"cabbie\",\n  \"cabdriver\",\n  \"cable\",\n  \"caboose\",\n  \"cache\",\n  \"cackle\",\n  \"cacti\",\n  \"cactus\",\n  \"caddie\",\n  \"caddy\",\n  \"cadet\",\n  \"cadillac\",\n  \"cadmium\",\n  \"cage\",\n  \"cahoots\",\n  \"cake\",\n  \"calamari\",\n  \"calamity\",\n  \"calcium\",\n  \"calculate\",\n  \"calculus\",\n  \"caliber\",\n  \"calibrate\",\n  \"calm\",\n  \"caloric\",\n  \"calorie\",\n  \"calzone\",\n  \"camcorder\",\n  \"cameo\",\n  \"camera\",\n  \"camisole\",\n  \"camper\",\n  \"campfire\",\n  \"camping\",\n  \"campsite\",\n  \"campus\",\n  \"canal\",\n  \"canary\",\n  \"cancel\",\n  \"candied\",\n  \"candle\",\n  \"candy\",\n  \"cane\",\n  \"canine\",\n  \"canister\",\n  \"cannabis\",\n  \"canned\",\n  \"canning\",\n  \"cannon\",\n  \"cannot\",\n  \"canola\",\n  \"canon\",\n  \"canopener\",\n  \"canopy\",\n  \"canteen\",\n  \"canyon\",\n  \"capable\",\n  \"capably\",\n  \"capacity\",\n  \"cape\",\n  \"capillary\",\n  \"capital\",\n  \"capitol\",\n  \"capped\",\n  \"capricorn\",\n  \"capsize\",\n  \"capsule\",\n  \"caption\",\n  \"captivate\",\n  \"captive\",\n  \"captivity\",\n  \"capture\",\n  \"caramel\",\n  \"carat\",\n  \"caravan\",\n  \"carbon\",\n  \"cardboard\",\n  \"carded\",\n  \"cardiac\",\n  \"cardigan\",\n  \"cardinal\",\n  \"cardstock\",\n  \"carefully\",\n  \"caregiver\",\n  \"careless\",\n  \"caress\",\n  \"caretaker\",\n  \"cargo\",\n  \"caring\",\n  \"carless\",\n  \"carload\",\n  \"carmaker\",\n  \"carnage\",\n  \"carnation\",\n  \"carnival\",\n  \"carnivore\",\n  \"carol\",\n  \"carpenter\",\n  \"carpentry\",\n  \"carpool\",\n  \"carport\",\n  \"carried\",\n  \"carrot\",\n  \"carrousel\",\n  \"carry\",\n  \"cartel\",\n  \"cartload\",\n  \"carton\",\n  \"cartoon\",\n  \"cartridge\",\n  \"cartwheel\",\n  \"carve\",\n  \"carving\",\n  \"carwash\",\n  \"cascade\",\n  \"case\",\n  \"cash\",\n  \"casing\",\n  \"casino\",\n  \"casket\",\n  \"cassette\",\n  \"casually\",\n  \"casualty\",\n  \"catacomb\",\n  \"catalog\",\n  \"catalyst\",\n  \"catalyze\",\n  \"catapult\",\n  \"cataract\",\n  \"catatonic\",\n  \"catcall\",\n  \"catchable\",\n  \"catcher\",\n  \"catching\",\n  \"catchy\",\n  \"caterer\",\n  \"catering\",\n  \"catfight\",\n  \"catfish\",\n  \"cathedral\",\n  \"cathouse\",\n  \"catlike\",\n  \"catnap\",\n  \"catnip\",\n  \"catsup\",\n  \"cattail\",\n  \"cattishly\",\n  \"cattle\",\n  \"catty\",\n  \"catwalk\",\n  \"caucasian\",\n  \"caucus\",\n  \"causal\",\n  \"causation\",\n  \"cause\",\n  \"causing\",\n  \"cauterize\",\n  \"caution\",\n  \"cautious\",\n  \"cavalier\",\n  \"cavalry\",\n  \"caviar\",\n  \"cavity\",\n  \"cedar\",\n  \"celery\",\n  \"celestial\",\n  \"celibacy\",\n  \"celibate\",\n  \"celtic\",\n  \"cement\",\n  \"census\",\n  \"ceramics\",\n  \"ceremony\",\n  \"certainly\",\n  \"certainty\",\n  \"certified\",\n  \"certify\",\n  \"cesarean\",\n  \"cesspool\",\n  \"chafe\",\n  \"chaffing\",\n  \"chain\",\n  \"chair\",\n  \"chalice\",\n  \"challenge\",\n  \"chamber\",\n  \"chamomile\",\n  \"champion\",\n  \"chance\",\n  \"change\",\n  \"channel\",\n  \"chant\",\n  \"chaos\",\n  \"chaperone\",\n  \"chaplain\",\n  \"chapped\",\n  \"chaps\",\n  \"chapter\",\n  \"character\",\n  \"charbroil\",\n  \"charcoal\",\n  \"charger\",\n  \"charging\",\n  \"chariot\",\n  \"charity\",\n  \"charm\",\n  \"charred\",\n  \"charter\",\n  \"charting\",\n  \"chase\",\n  \"chasing\",\n  \"chaste\",\n  \"chastise\",\n  \"chastity\",\n  \"chatroom\",\n  \"chatter\",\n  \"chatting\",\n  \"chatty\",\n  \"cheating\",\n  \"cheddar\",\n  \"cheek\",\n  \"cheer\",\n  \"cheese\",\n  \"cheesy\",\n  \"chef\",\n  \"chemicals\",\n  \"chemist\",\n  \"chemo\",\n  \"cherisher\",\n  \"cherub\",\n  \"chess\",\n  \"chest\",\n  \"chevron\",\n  \"chevy\",\n  \"chewable\",\n  \"chewer\",\n  \"chewing\",\n  \"chewy\",\n  \"chief\",\n  \"chihuahua\",\n  \"childcare\",\n  \"childhood\",\n  \"childish\",\n  \"childless\",\n  \"childlike\",\n  \"chili\",\n  \"chill\",\n  \"chimp\",\n  \"chip\",\n  \"chirping\",\n  \"chirpy\",\n  \"chitchat\",\n  \"chivalry\",\n  \"chive\",\n  \"chloride\",\n  \"chlorine\",\n  \"choice\",\n  \"chokehold\",\n  \"choking\",\n  \"chomp\",\n  \"chooser\",\n  \"choosing\",\n  \"choosy\",\n  \"chop\",\n  \"chosen\",\n  \"chowder\",\n  \"chowtime\",\n  \"chrome\",\n  \"chubby\",\n  \"chuck\",\n  \"chug\",\n  \"chummy\",\n  \"chump\",\n  \"chunk\",\n  \"churn\",\n  \"chute\",\n  \"cider\",\n  \"cilantro\",\n  \"cinch\",\n  \"cinema\",\n  \"cinnamon\",\n  \"circle\",\n  \"circling\",\n  \"circular\",\n  \"circulate\",\n  \"circus\",\n  \"citable\",\n  \"citadel\",\n  \"citation\",\n  \"citizen\",\n  \"citric\",\n  \"citrus\",\n  \"city\",\n  \"civic\",\n  \"civil\",\n  \"clad\",\n  \"claim\",\n  \"clambake\",\n  \"clammy\",\n  \"clamor\",\n  \"clamp\",\n  \"clamshell\",\n  \"clang\",\n  \"clanking\",\n  \"clapped\",\n  \"clapper\",\n  \"clapping\",\n  \"clarify\",\n  \"clarinet\",\n  \"clarity\",\n  \"clash\",\n  \"clasp\",\n  \"class\",\n  \"clatter\",\n  \"clause\",\n  \"clavicle\",\n  \"claw\",\n  \"clay\",\n  \"clean\",\n  \"clear\",\n  \"cleat\",\n  \"cleaver\",\n  \"cleft\",\n  \"clench\",\n  \"clergyman\",\n  \"clerical\",\n  \"clerk\",\n  \"clever\",\n  \"clicker\",\n  \"client\",\n  \"climate\",\n  \"climatic\",\n  \"cling\",\n  \"clinic\",\n  \"clinking\",\n  \"clip\",\n  \"clique\",\n  \"cloak\",\n  \"clobber\",\n  \"clock\",\n  \"clone\",\n  \"cloning\",\n  \"closable\",\n  \"closure\",\n  \"clothes\",\n  \"clothing\",\n  \"cloud\",\n  \"clover\",\n  \"clubbed\",\n  \"clubbing\",\n  \"clubhouse\",\n  \"clump\",\n  \"clumsily\",\n  \"clumsy\",\n  \"clunky\",\n  \"clustered\",\n  \"clutch\",\n  \"clutter\",\n  \"coach\",\n  \"coagulant\",\n  \"coastal\",\n  \"coaster\",\n  \"coasting\",\n  \"coastland\",\n  \"coastline\",\n  \"coat\",\n  \"coauthor\",\n  \"cobalt\",\n  \"cobbler\",\n  \"cobweb\",\n  \"cocoa\",\n  \"coconut\",\n  \"cod\",\n  \"coeditor\",\n  \"coerce\",\n  \"coexist\",\n  \"coffee\",\n  \"cofounder\",\n  \"cognition\",\n  \"cognitive\",\n  \"cogwheel\",\n  \"coherence\",\n  \"coherent\",\n  \"cohesive\",\n  \"coil\",\n  \"coke\",\n  \"cola\",\n  \"cold\",\n  \"coleslaw\",\n  \"coliseum\",\n  \"collage\",\n  \"collapse\",\n  \"collar\",\n  \"collected\",\n  \"collector\",\n  \"collide\",\n  \"collie\",\n  \"collision\",\n  \"colonial\",\n  \"colonist\",\n  \"colonize\",\n  \"colony\",\n  \"colossal\",\n  \"colt\",\n  \"coma\",\n  \"come\",\n  \"comfort\",\n  \"comfy\",\n  \"comic\",\n  \"coming\",\n  \"comma\",\n  \"commence\",\n  \"commend\",\n  \"comment\",\n  \"commerce\",\n  \"commode\",\n  \"commodity\",\n  \"commodore\",\n  \"common\",\n  \"commotion\",\n  \"commute\",\n  \"commuting\",\n  \"compacted\",\n  \"compacter\",\n  \"compactly\",\n  \"compactor\",\n  \"companion\",\n  \"company\",\n  \"compare\",\n  \"compel\",\n  \"compile\",\n  \"comply\",\n  \"component\",\n  \"composed\",\n  \"composer\",\n  \"composite\",\n  \"compost\",\n  \"composure\",\n  \"compound\",\n  \"compress\",\n  \"comprised\",\n  \"computer\",\n  \"computing\",\n  \"comrade\",\n  \"concave\",\n  \"conceal\",\n  \"conceded\",\n  \"concept\",\n  \"concerned\",\n  \"concert\",\n  \"conch\",\n  \"concierge\",\n  \"concise\",\n  \"conclude\",\n  \"concrete\",\n  \"concur\",\n  \"condense\",\n  \"condiment\",\n  \"condition\",\n  \"condone\",\n  \"conducive\",\n  \"conductor\",\n  \"conduit\",\n  \"cone\",\n  \"confess\",\n  \"confetti\",\n  \"confidant\",\n  \"confident\",\n  \"confider\",\n  \"confiding\",\n  \"configure\",\n  \"confined\",\n  \"confining\",\n  \"confirm\",\n  \"conflict\",\n  \"conform\",\n  \"confound\",\n  \"confront\",\n  \"confused\",\n  \"confusing\",\n  \"confusion\",\n  \"congenial\",\n  \"congested\",\n  \"congrats\",\n  \"congress\",\n  \"conical\",\n  \"conjoined\",\n  \"conjure\",\n  \"conjuror\",\n  \"connected\",\n  \"connector\",\n  \"consensus\",\n  \"consent\",\n  \"console\",\n  \"consoling\",\n  \"consonant\",\n  \"constable\",\n  \"constant\",\n  \"constrain\",\n  \"constrict\",\n  \"construct\",\n  \"consult\",\n  \"consumer\",\n  \"consuming\",\n  \"contact\",\n  \"container\",\n  \"contempt\",\n  \"contend\",\n  \"contented\",\n  \"contently\",\n  \"contents\",\n  \"contest\",\n  \"context\",\n  \"contort\",\n  \"contour\",\n  \"contrite\",\n  \"control\",\n  \"contusion\",\n  \"convene\",\n  \"convent\",\n  \"copartner\",\n  \"cope\",\n  \"copied\",\n  \"copier\",\n  \"copilot\",\n  \"coping\",\n  \"copious\",\n  \"copper\",\n  \"copy\",\n  \"coral\",\n  \"cork\",\n  \"cornball\",\n  \"cornbread\",\n  \"corncob\",\n  \"cornea\",\n  \"corned\",\n  \"corner\",\n  \"cornfield\",\n  \"cornflake\",\n  \"cornhusk\",\n  \"cornmeal\",\n  \"cornstalk\",\n  \"corny\",\n  \"coronary\",\n  \"coroner\",\n  \"corporal\",\n  \"corporate\",\n  \"corral\",\n  \"correct\",\n  \"corridor\",\n  \"corrode\",\n  \"corroding\",\n  \"corrosive\",\n  \"corsage\",\n  \"corset\",\n  \"cortex\",\n  \"cosigner\",\n  \"cosmetics\",\n  \"cosmic\",\n  \"cosmos\",\n  \"cosponsor\",\n  \"cost\",\n  \"cottage\",\n  \"cotton\",\n  \"couch\",\n  \"cough\",\n  \"could\",\n  \"countable\",\n  \"countdown\",\n  \"counting\",\n  \"countless\",\n  \"country\",\n  \"county\",\n  \"courier\",\n  \"covenant\",\n  \"cover\",\n  \"coveted\",\n  \"coveting\",\n  \"coyness\",\n  \"cozily\",\n  \"coziness\",\n  \"cozy\",\n  \"crabbing\",\n  \"crabgrass\",\n  \"crablike\",\n  \"crabmeat\",\n  \"cradle\",\n  \"cradling\",\n  \"crafter\",\n  \"craftily\",\n  \"craftsman\",\n  \"craftwork\",\n  \"crafty\",\n  \"cramp\",\n  \"cranberry\",\n  \"crane\",\n  \"cranial\",\n  \"cranium\",\n  \"crank\",\n  \"crate\",\n  \"crave\",\n  \"craving\",\n  \"crawfish\",\n  \"crawlers\",\n  \"crawling\",\n  \"crayfish\",\n  \"crayon\",\n  \"crazed\",\n  \"crazily\",\n  \"craziness\",\n  \"crazy\",\n  \"creamed\",\n  \"creamer\",\n  \"creamlike\",\n  \"crease\",\n  \"creasing\",\n  \"creatable\",\n  \"create\",\n  \"creation\",\n  \"creative\",\n  \"creature\",\n  \"credible\",\n  \"credibly\",\n  \"credit\",\n  \"creed\",\n  \"creme\",\n  \"creole\",\n  \"crepe\",\n  \"crept\",\n  \"crescent\",\n  \"crested\",\n  \"cresting\",\n  \"crestless\",\n  \"crevice\",\n  \"crewless\",\n  \"crewman\",\n  \"crewmate\",\n  \"crib\",\n  \"cricket\",\n  \"cried\",\n  \"crier\",\n  \"crimp\",\n  \"crimson\",\n  \"cringe\",\n  \"cringing\",\n  \"crinkle\",\n  \"crinkly\",\n  \"crisped\",\n  \"crisping\",\n  \"crisply\",\n  \"crispness\",\n  \"crispy\",\n  \"criteria\",\n  \"critter\",\n  \"croak\",\n  \"crock\",\n  \"crook\",\n  \"croon\",\n  \"crop\",\n  \"cross\",\n  \"crouch\",\n  \"crouton\",\n  \"crowbar\",\n  \"crowd\",\n  \"crown\",\n  \"crucial\",\n  \"crudely\",\n  \"crudeness\",\n  \"cruelly\",\n  \"cruelness\",\n  \"cruelty\",\n  \"crumb\",\n  \"crummiest\",\n  \"crummy\",\n  \"crumpet\",\n  \"crumpled\",\n  \"cruncher\",\n  \"crunching\",\n  \"crunchy\",\n  \"crusader\",\n  \"crushable\",\n  \"crushed\",\n  \"crusher\",\n  \"crushing\",\n  \"crust\",\n  \"crux\",\n  \"crying\",\n  \"cryptic\",\n  \"crystal\",\n  \"cubbyhole\",\n  \"cube\",\n  \"cubical\",\n  \"cubicle\",\n  \"cucumber\",\n  \"cuddle\",\n  \"cuddly\",\n  \"cufflink\",\n  \"culinary\",\n  \"culminate\",\n  \"culpable\",\n  \"culprit\",\n  \"cultivate\",\n  \"cultural\",\n  \"culture\",\n  \"cupbearer\",\n  \"cupcake\",\n  \"cupid\",\n  \"cupped\",\n  \"cupping\",\n  \"curable\",\n  \"curator\",\n  \"curdle\",\n  \"cure\",\n  \"curfew\",\n  \"curing\",\n  \"curled\",\n  \"curler\",\n  \"curliness\",\n  \"curling\",\n  \"curly\",\n  \"curry\",\n  \"curse\",\n  \"cursive\",\n  \"cursor\",\n  \"curtain\",\n  \"curtly\",\n  \"curtsy\",\n  \"curvature\",\n  \"curve\",\n  \"curvy\",\n  \"cushy\",\n  \"cusp\",\n  \"cussed\",\n  \"custard\",\n  \"custodian\",\n  \"custody\",\n  \"customary\",\n  \"customer\",\n  \"customize\",\n  \"customs\",\n  \"cut\",\n  \"cycle\",\n  \"cyclic\",\n  \"cycling\",\n  \"cyclist\",\n  \"cylinder\",\n  \"cymbal\",\n  \"cytoplasm\",\n  \"cytoplast\",\n  \"dab\",\n  \"dad\",\n  \"daffodil\",\n  \"dagger\",\n  \"daily\",\n  \"daintily\",\n  \"dainty\",\n  \"dairy\",\n  \"daisy\",\n  \"dallying\",\n  \"dance\",\n  \"dancing\",\n  \"dandelion\",\n  \"dander\",\n  \"dandruff\",\n  \"dandy\",\n  \"danger\",\n  \"dangle\",\n  \"dangling\",\n  \"daredevil\",\n  \"dares\",\n  \"daringly\",\n  \"darkened\",\n  \"darkening\",\n  \"darkish\",\n  \"darkness\",\n  \"darkroom\",\n  \"darling\",\n  \"darn\",\n  \"dart\",\n  \"darwinism\",\n  \"dash\",\n  \"dastardly\",\n  \"data\",\n  \"datebook\",\n  \"dating\",\n  \"daughter\",\n  \"daunting\",\n  \"dawdler\",\n  \"dawn\",\n  \"daybed\",\n  \"daybreak\",\n  \"daycare\",\n  \"daydream\",\n  \"daylight\",\n  \"daylong\",\n  \"dayroom\",\n  \"daytime\",\n  \"dazzler\",\n  \"dazzling\",\n  \"deacon\",\n  \"deafening\",\n  \"deafness\",\n  \"dealer\",\n  \"dealing\",\n  \"dealmaker\",\n  \"dealt\",\n  \"dean\",\n  \"debatable\",\n  \"debate\",\n  \"debating\",\n  \"debit\",\n  \"debrief\",\n  \"debtless\",\n  \"debtor\",\n  \"debug\",\n  \"debunk\",\n  \"decade\",\n  \"decaf\",\n  \"decal\",\n  \"decathlon\",\n  \"decay\",\n  \"deceased\",\n  \"deceit\",\n  \"deceiver\",\n  \"deceiving\",\n  \"december\",\n  \"decency\",\n  \"decent\",\n  \"deception\",\n  \"deceptive\",\n  \"decibel\",\n  \"decidable\",\n  \"decimal\",\n  \"decimeter\",\n  \"decipher\",\n  \"deck\",\n  \"declared\",\n  \"decline\",\n  \"decode\",\n  \"decompose\",\n  \"decorated\",\n  \"decorator\",\n  \"decoy\",\n  \"decrease\",\n  \"decree\",\n  \"dedicate\",\n  \"dedicator\",\n  \"deduce\",\n  \"deduct\",\n  \"deed\",\n  \"deem\",\n  \"deepen\",\n  \"deeply\",\n  \"deepness\",\n  \"deface\",\n  \"defacing\",\n  \"defame\",\n  \"default\",\n  \"defeat\",\n  \"defection\",\n  \"defective\",\n  \"defendant\",\n  \"defender\",\n  \"defense\",\n  \"defensive\",\n  \"deferral\",\n  \"deferred\",\n  \"defiance\",\n  \"defiant\",\n  \"defile\",\n  \"defiling\",\n  \"define\",\n  \"definite\",\n  \"deflate\",\n  \"deflation\",\n  \"deflator\",\n  \"deflected\",\n  \"deflector\",\n  \"defog\",\n  \"deforest\",\n  \"defraud\",\n  \"defrost\",\n  \"deftly\",\n  \"defuse\",\n  \"defy\",\n  \"degraded\",\n  \"degrading\",\n  \"degrease\",\n  \"degree\",\n  \"dehydrate\",\n  \"deity\",\n  \"dejected\",\n  \"delay\",\n  \"delegate\",\n  \"delegator\",\n  \"delete\",\n  \"deletion\",\n  \"delicacy\",\n  \"delicate\",\n  \"delicious\",\n  \"delighted\",\n  \"delirious\",\n  \"delirium\",\n  \"deliverer\",\n  \"delivery\",\n  \"delouse\",\n  \"delta\",\n  \"deluge\",\n  \"delusion\",\n  \"deluxe\",\n  \"demanding\",\n  \"demeaning\",\n  \"demeanor\",\n  \"demise\",\n  \"democracy\",\n  \"democrat\",\n  \"demote\",\n  \"demotion\",\n  \"demystify\",\n  \"denatured\",\n  \"deniable\",\n  \"denial\",\n  \"denim\",\n  \"denote\",\n  \"dense\",\n  \"density\",\n  \"dental\",\n  \"dentist\",\n  \"denture\",\n  \"deny\",\n  \"deodorant\",\n  \"deodorize\",\n  \"departed\",\n  \"departure\",\n  \"depict\",\n  \"deplete\",\n  \"depletion\",\n  \"deplored\",\n  \"deploy\",\n  \"deport\",\n  \"depose\",\n  \"depraved\",\n  \"depravity\",\n  \"deprecate\",\n  \"depress\",\n  \"deprive\",\n  \"depth\",\n  \"deputize\",\n  \"deputy\",\n  \"derail\",\n  \"deranged\",\n  \"derby\",\n  \"derived\",\n  \"desecrate\",\n  \"deserve\",\n  \"deserving\",\n  \"designate\",\n  \"designed\",\n  \"designer\",\n  \"designing\",\n  \"deskbound\",\n  \"desktop\",\n  \"deskwork\",\n  \"desolate\",\n  \"despair\",\n  \"despise\",\n  \"despite\",\n  \"destiny\",\n  \"destitute\",\n  \"destruct\",\n  \"detached\",\n  \"detail\",\n  \"detection\",\n  \"detective\",\n  \"detector\",\n  \"detention\",\n  \"detergent\",\n  \"detest\",\n  \"detonate\",\n  \"detonator\",\n  \"detoxify\",\n  \"detract\",\n  \"deuce\",\n  \"devalue\",\n  \"deviancy\",\n  \"deviant\",\n  \"deviate\",\n  \"deviation\",\n  \"deviator\",\n  \"device\",\n  \"devious\",\n  \"devotedly\",\n  \"devotee\",\n  \"devotion\",\n  \"devourer\",\n  \"devouring\",\n  \"devoutly\",\n  \"dexterity\",\n  \"dexterous\",\n  \"diabetes\",\n  \"diabetic\",\n  \"diabolic\",\n  \"diagnoses\",\n  \"diagnosis\",\n  \"diagram\",\n  \"dial\",\n  \"diameter\",\n  \"diaper\",\n  \"diaphragm\",\n  \"diary\",\n  \"dice\",\n  \"dicing\",\n  \"dictate\",\n  \"dictation\",\n  \"dictator\",\n  \"difficult\",\n  \"diffused\",\n  \"diffuser\",\n  \"diffusion\",\n  \"diffusive\",\n  \"dig\",\n  \"dilation\",\n  \"diligence\",\n  \"diligent\",\n  \"dill\",\n  \"dilute\",\n  \"dime\",\n  \"diminish\",\n  \"dimly\",\n  \"dimmed\",\n  \"dimmer\",\n  \"dimness\",\n  \"dimple\",\n  \"diner\",\n  \"dingbat\",\n  \"dinghy\",\n  \"dinginess\",\n  \"dingo\",\n  \"dingy\",\n  \"dining\",\n  \"dinner\",\n  \"diocese\",\n  \"dioxide\",\n  \"diploma\",\n  \"dipped\",\n  \"dipper\",\n  \"dipping\",\n  \"directed\",\n  \"direction\",\n  \"directive\",\n  \"directly\",\n  \"directory\",\n  \"direness\",\n  \"dirtiness\",\n  \"disabled\",\n  \"disagree\",\n  \"disallow\",\n  \"disarm\",\n  \"disarray\",\n  \"disaster\",\n  \"disband\",\n  \"disbelief\",\n  \"disburse\",\n  \"discard\",\n  \"discern\",\n  \"discharge\",\n  \"disclose\",\n  \"discolor\",\n  \"discount\",\n  \"discourse\",\n  \"discover\",\n  \"discuss\",\n  \"disdain\",\n  \"disengage\",\n  \"disfigure\",\n  \"disgrace\",\n  \"dish\",\n  \"disinfect\",\n  \"disjoin\",\n  \"disk\",\n  \"dislike\",\n  \"disliking\",\n  \"dislocate\",\n  \"dislodge\",\n  \"disloyal\",\n  \"dismantle\",\n  \"dismay\",\n  \"dismiss\",\n  \"dismount\",\n  \"disobey\",\n  \"disorder\",\n  \"disown\",\n  \"disparate\",\n  \"disparity\",\n  \"dispatch\",\n  \"dispense\",\n  \"dispersal\",\n  \"dispersed\",\n  \"disperser\",\n  \"displace\",\n  \"display\",\n  \"displease\",\n  \"disposal\",\n  \"dispose\",\n  \"disprove\",\n  \"dispute\",\n  \"disregard\",\n  \"disrupt\",\n  \"dissuade\",\n  \"distance\",\n  \"distant\",\n  \"distaste\",\n  \"distill\",\n  \"distinct\",\n  \"distort\",\n  \"distract\",\n  \"distress\",\n  \"district\",\n  \"distrust\",\n  \"ditch\",\n  \"ditto\",\n  \"ditzy\",\n  \"dividable\",\n  \"divided\",\n  \"dividend\",\n  \"dividers\",\n  \"dividing\",\n  \"divinely\",\n  \"diving\",\n  \"divinity\",\n  \"divisible\",\n  \"divisibly\",\n  \"division\",\n  \"divisive\",\n  \"divorcee\",\n  \"dizziness\",\n  \"dizzy\",\n  \"doable\",\n  \"docile\",\n  \"dock\",\n  \"doctrine\",\n  \"document\",\n  \"dodge\",\n  \"dodgy\",\n  \"doily\",\n  \"doing\",\n  \"dole\",\n  \"dollar\",\n  \"dollhouse\",\n  \"dollop\",\n  \"dolly\",\n  \"dolphin\",\n  \"domain\",\n  \"domelike\",\n  \"domestic\",\n  \"dominion\",\n  \"dominoes\",\n  \"donated\",\n  \"donation\",\n  \"donator\",\n  \"donor\",\n  \"donut\",\n  \"doodle\",\n  \"doorbell\",\n  \"doorframe\",\n  \"doorknob\",\n  \"doorman\",\n  \"doormat\",\n  \"doornail\",\n  \"doorpost\",\n  \"doorstep\",\n  \"doorstop\",\n  \"doorway\",\n  \"doozy\",\n  \"dork\",\n  \"dormitory\",\n  \"dorsal\",\n  \"dosage\",\n  \"dose\",\n  \"dotted\",\n  \"doubling\",\n  \"douche\",\n  \"dove\",\n  \"down\",\n  \"dowry\",\n  \"doze\",\n  \"drab\",\n  \"dragging\",\n  \"dragonfly\",\n  \"dragonish\",\n  \"dragster\",\n  \"drainable\",\n  \"drainage\",\n  \"drained\",\n  \"drainer\",\n  \"drainpipe\",\n  \"dramatic\",\n  \"dramatize\",\n  \"drank\",\n  \"drapery\",\n  \"drastic\",\n  \"draw\",\n  \"dreaded\",\n  \"dreadful\",\n  \"dreadlock\",\n  \"dreamboat\",\n  \"dreamily\",\n  \"dreamland\",\n  \"dreamless\",\n  \"dreamlike\",\n  \"dreamt\",\n  \"dreamy\",\n  \"drearily\",\n  \"dreary\",\n  \"drench\",\n  \"dress\",\n  \"drew\",\n  \"dribble\",\n  \"dried\",\n  \"drier\",\n  \"drift\",\n  \"driller\",\n  \"drilling\",\n  \"drinkable\",\n  \"drinking\",\n  \"dripping\",\n  \"drippy\",\n  \"drivable\",\n  \"driven\",\n  \"driver\",\n  \"driveway\",\n  \"driving\",\n  \"drizzle\",\n  \"drizzly\",\n  \"drone\",\n  \"drool\",\n  \"droop\",\n  \"drop-down\",\n  \"dropbox\",\n  \"dropkick\",\n  \"droplet\",\n  \"dropout\",\n  \"dropper\",\n  \"drove\",\n  \"drown\",\n  \"drowsily\",\n  \"drudge\",\n  \"drum\",\n  \"dry\",\n  \"dubbed\",\n  \"dubiously\",\n  \"duchess\",\n  \"duckbill\",\n  \"ducking\",\n  \"duckling\",\n  \"ducktail\",\n  \"ducky\",\n  \"duct\",\n  \"dude\",\n  \"duffel\",\n  \"dugout\",\n  \"duh\",\n  \"duke\",\n  \"duller\",\n  \"dullness\",\n  \"duly\",\n  \"dumping\",\n  \"dumpling\",\n  \"dumpster\",\n  \"duo\",\n  \"dupe\",\n  \"duplex\",\n  \"duplicate\",\n  \"duplicity\",\n  \"durable\",\n  \"durably\",\n  \"duration\",\n  \"duress\",\n  \"during\",\n  \"dusk\",\n  \"dust\",\n  \"dutiful\",\n  \"duty\",\n  \"duvet\",\n  \"dwarf\",\n  \"dweeb\",\n  \"dwelled\",\n  \"dweller\",\n  \"dwelling\",\n  \"dwindle\",\n  \"dwindling\",\n  \"dynamic\",\n  \"dynamite\",\n  \"dynasty\",\n  \"dyslexia\",\n  \"dyslexic\",\n  \"each\",\n  \"eagle\",\n  \"earache\",\n  \"eardrum\",\n  \"earflap\",\n  \"earful\",\n  \"earlobe\",\n  \"early\",\n  \"earmark\",\n  \"earmuff\",\n  \"earphone\",\n  \"earpiece\",\n  \"earplugs\",\n  \"earring\",\n  \"earshot\",\n  \"earthen\",\n  \"earthlike\",\n  \"earthling\",\n  \"earthly\",\n  \"earthworm\",\n  \"earthy\",\n  \"earwig\",\n  \"easeful\",\n  \"easel\",\n  \"easiest\",\n  \"easily\",\n  \"easiness\",\n  \"easing\",\n  \"eastbound\",\n  \"eastcoast\",\n  \"easter\",\n  \"eastward\",\n  \"eatable\",\n  \"eaten\",\n  \"eatery\",\n  \"eating\",\n  \"eats\",\n  \"ebay\",\n  \"ebony\",\n  \"ebook\",\n  \"ecard\",\n  \"eccentric\",\n  \"echo\",\n  \"eclair\",\n  \"eclipse\",\n  \"ecologist\",\n  \"ecology\",\n  \"economic\",\n  \"economist\",\n  \"economy\",\n  \"ecosphere\",\n  \"ecosystem\",\n  \"edge\",\n  \"edginess\",\n  \"edging\",\n  \"edgy\",\n  \"edition\",\n  \"editor\",\n  \"educated\",\n  \"education\",\n  \"educator\",\n  \"eel\",\n  \"effective\",\n  \"effects\",\n  \"efficient\",\n  \"effort\",\n  \"eggbeater\",\n  \"egging\",\n  \"eggnog\",\n  \"eggplant\",\n  \"eggshell\",\n  \"egomaniac\",\n  \"egotism\",\n  \"egotistic\",\n  \"either\",\n  \"eject\",\n  \"elaborate\",\n  \"elastic\",\n  \"elated\",\n  \"elbow\",\n  \"eldercare\",\n  \"elderly\",\n  \"eldest\",\n  \"electable\",\n  \"election\",\n  \"elective\",\n  \"elephant\",\n  \"elevate\",\n  \"elevating\",\n  \"elevation\",\n  \"elevator\",\n  \"eleven\",\n  \"elf\",\n  \"eligible\",\n  \"eligibly\",\n  \"eliminate\",\n  \"elite\",\n  \"elitism\",\n  \"elixir\",\n  \"elk\",\n  \"ellipse\",\n  \"elliptic\",\n  \"elm\",\n  \"elongated\",\n  \"elope\",\n  \"eloquence\",\n  \"eloquent\",\n  \"elsewhere\",\n  \"elude\",\n  \"elusive\",\n  \"elves\",\n  \"email\",\n  \"embargo\",\n  \"embark\",\n  \"embassy\",\n  \"embattled\",\n  \"embellish\",\n  \"ember\",\n  \"embezzle\",\n  \"emblaze\",\n  \"emblem\",\n  \"embody\",\n  \"embolism\",\n  \"emboss\",\n  \"embroider\",\n  \"emcee\",\n  \"emerald\",\n  \"emergency\",\n  \"emission\",\n  \"emit\",\n  \"emote\",\n  \"emoticon\",\n  \"emotion\",\n  \"empathic\",\n  \"empathy\",\n  \"emperor\",\n  \"emphases\",\n  \"emphasis\",\n  \"emphasize\",\n  \"emphatic\",\n  \"empirical\",\n  \"employed\",\n  \"employee\",\n  \"employer\",\n  \"emporium\",\n  \"empower\",\n  \"emptier\",\n  \"emptiness\",\n  \"empty\",\n  \"emu\",\n  \"enable\",\n  \"enactment\",\n  \"enamel\",\n  \"enchanted\",\n  \"enchilada\",\n  \"encircle\",\n  \"enclose\",\n  \"enclosure\",\n  \"encode\",\n  \"encore\",\n  \"encounter\",\n  \"encourage\",\n  \"encroach\",\n  \"encrust\",\n  \"encrypt\",\n  \"endanger\",\n  \"endeared\",\n  \"endearing\",\n  \"ended\",\n  \"ending\",\n  \"endless\",\n  \"endnote\",\n  \"endocrine\",\n  \"endorphin\",\n  \"endorse\",\n  \"endowment\",\n  \"endpoint\",\n  \"endurable\",\n  \"endurance\",\n  \"enduring\",\n  \"energetic\",\n  \"energize\",\n  \"energy\",\n  \"enforced\",\n  \"enforcer\",\n  \"engaged\",\n  \"engaging\",\n  \"engine\",\n  \"engorge\",\n  \"engraved\",\n  \"engraver\",\n  \"engraving\",\n  \"engross\",\n  \"engulf\",\n  \"enhance\",\n  \"enigmatic\",\n  \"enjoyable\",\n  \"enjoyably\",\n  \"enjoyer\",\n  \"enjoying\",\n  \"enjoyment\",\n  \"enlarged\",\n  \"enlarging\",\n  \"enlighten\",\n  \"enlisted\",\n  \"enquirer\",\n  \"enrage\",\n  \"enrich\",\n  \"enroll\",\n  \"enslave\",\n  \"ensnare\",\n  \"ensure\",\n  \"entail\",\n  \"entangled\",\n  \"entering\",\n  \"entertain\",\n  \"enticing\",\n  \"entire\",\n  \"entitle\",\n  \"entity\",\n  \"entomb\",\n  \"entourage\",\n  \"entrap\",\n  \"entree\",\n  \"entrench\",\n  \"entrust\",\n  \"entryway\",\n  \"entwine\",\n  \"enunciate\",\n  \"envelope\",\n  \"enviable\",\n  \"enviably\",\n  \"envious\",\n  \"envision\",\n  \"envoy\",\n  \"envy\",\n  \"enzyme\",\n  \"epic\",\n  \"epidemic\",\n  \"epidermal\",\n  \"epidermis\",\n  \"epidural\",\n  \"epilepsy\",\n  \"epileptic\",\n  \"epilogue\",\n  \"epiphany\",\n  \"episode\",\n  \"equal\",\n  \"equate\",\n  \"equation\",\n  \"equator\",\n  \"equinox\",\n  \"equipment\",\n  \"equity\",\n  \"equivocal\",\n  \"eradicate\",\n  \"erasable\",\n  \"erased\",\n  \"eraser\",\n  \"erasure\",\n  \"ergonomic\",\n  \"errand\",\n  \"errant\",\n  \"erratic\",\n  \"error\",\n  \"erupt\",\n  \"escalate\",\n  \"escalator\",\n  \"escapable\",\n  \"escapade\",\n  \"escapist\",\n  \"escargot\",\n  \"eskimo\",\n  \"esophagus\",\n  \"espionage\",\n  \"espresso\",\n  \"esquire\",\n  \"essay\",\n  \"essence\",\n  \"essential\",\n  \"establish\",\n  \"estate\",\n  \"esteemed\",\n  \"estimate\",\n  \"estimator\",\n  \"estranged\",\n  \"estrogen\",\n  \"etching\",\n  \"eternal\",\n  \"eternity\",\n  \"ethanol\",\n  \"ether\",\n  \"ethically\",\n  \"ethics\",\n  \"euphemism\",\n  \"evacuate\",\n  \"evacuee\",\n  \"evade\",\n  \"evaluate\",\n  \"evaluator\",\n  \"evaporate\",\n  \"evasion\",\n  \"evasive\",\n  \"even\",\n  \"everglade\",\n  \"evergreen\",\n  \"everybody\",\n  \"everyday\",\n  \"everyone\",\n  \"evict\",\n  \"evidence\",\n  \"evident\",\n  \"evil\",\n  \"evoke\",\n  \"evolution\",\n  \"evolve\",\n  \"exact\",\n  \"exalted\",\n  \"example\",\n  \"excavate\",\n  \"excavator\",\n  \"exceeding\",\n  \"exception\",\n  \"excess\",\n  \"exchange\",\n  \"excitable\",\n  \"exciting\",\n  \"exclaim\",\n  \"exclude\",\n  \"excluding\",\n  \"exclusion\",\n  \"exclusive\",\n  \"excretion\",\n  \"excretory\",\n  \"excursion\",\n  \"excusable\",\n  \"excusably\",\n  \"excuse\",\n  \"exemplary\",\n  \"exemplify\",\n  \"exemption\",\n  \"exerciser\",\n  \"exert\",\n  \"exes\",\n  \"exfoliate\",\n  \"exhale\",\n  \"exhaust\",\n  \"exhume\",\n  \"exile\",\n  \"existing\",\n  \"exit\",\n  \"exodus\",\n  \"exonerate\",\n  \"exorcism\",\n  \"exorcist\",\n  \"expand\",\n  \"expanse\",\n  \"expansion\",\n  \"expansive\",\n  \"expectant\",\n  \"expedited\",\n  \"expediter\",\n  \"expel\",\n  \"expend\",\n  \"expenses\",\n  \"expensive\",\n  \"expert\",\n  \"expire\",\n  \"expiring\",\n  \"explain\",\n  \"expletive\",\n  \"explicit\",\n  \"explode\",\n  \"exploit\",\n  \"explore\",\n  \"exploring\",\n  \"exponent\",\n  \"exporter\",\n  \"exposable\",\n  \"expose\",\n  \"exposure\",\n  \"express\",\n  \"expulsion\",\n  \"exquisite\",\n  \"extended\",\n  \"extending\",\n  \"extent\",\n  \"extenuate\",\n  \"exterior\",\n  \"external\",\n  \"extinct\",\n  \"extortion\",\n  \"extradite\",\n  \"extras\",\n  \"extrovert\",\n  \"extrude\",\n  \"extruding\",\n  \"exuberant\",\n  \"fable\",\n  \"fabric\",\n  \"fabulous\",\n  \"facebook\",\n  \"facecloth\",\n  \"facedown\",\n  \"faceless\",\n  \"facelift\",\n  \"faceplate\",\n  \"faceted\",\n  \"facial\",\n  \"facility\",\n  \"facing\",\n  \"facsimile\",\n  \"faction\",\n  \"factoid\",\n  \"factor\",\n  \"factsheet\",\n  \"factual\",\n  \"faculty\",\n  \"fade\",\n  \"fading\",\n  \"failing\",\n  \"falcon\",\n  \"fall\",\n  \"false\",\n  \"falsify\",\n  \"fame\",\n  \"familiar\",\n  \"family\",\n  \"famine\",\n  \"famished\",\n  \"fanatic\",\n  \"fancied\",\n  \"fanciness\",\n  \"fancy\",\n  \"fanfare\",\n  \"fang\",\n  \"fanning\",\n  \"fantasize\",\n  \"fantastic\",\n  \"fantasy\",\n  \"fascism\",\n  \"fastball\",\n  \"faster\",\n  \"fasting\",\n  \"fastness\",\n  \"faucet\",\n  \"favorable\",\n  \"favorably\",\n  \"favored\",\n  \"favoring\",\n  \"favorite\",\n  \"fax\",\n  \"feast\",\n  \"federal\",\n  \"fedora\",\n  \"feeble\",\n  \"feed\",\n  \"feel\",\n  \"feisty\",\n  \"feline\",\n  \"felt-tip\",\n  \"feminine\",\n  \"feminism\",\n  \"feminist\",\n  \"feminize\",\n  \"femur\",\n  \"fence\",\n  \"fencing\",\n  \"fender\",\n  \"ferment\",\n  \"fernlike\",\n  \"ferocious\",\n  \"ferocity\",\n  \"ferret\",\n  \"ferris\",\n  \"ferry\",\n  \"fervor\",\n  \"fester\",\n  \"festival\",\n  \"festive\",\n  \"festivity\",\n  \"fetal\",\n  \"fetch\",\n  \"fever\",\n  \"fiber\",\n  \"fiction\",\n  \"fiddle\",\n  \"fiddling\",\n  \"fidelity\",\n  \"fidgeting\",\n  \"fidgety\",\n  \"fifteen\",\n  \"fifth\",\n  \"fiftieth\",\n  \"fifty\",\n  \"figment\",\n  \"figure\",\n  \"figurine\",\n  \"filing\",\n  \"filled\",\n  \"filler\",\n  \"filling\",\n  \"film\",\n  \"filter\",\n  \"filth\",\n  \"filtrate\",\n  \"finale\",\n  \"finalist\",\n  \"finalize\",\n  \"finally\",\n  \"finance\",\n  \"financial\",\n  \"finch\",\n  \"fineness\",\n  \"finer\",\n  \"finicky\",\n  \"finished\",\n  \"finisher\",\n  \"finishing\",\n  \"finite\",\n  \"finless\",\n  \"finlike\",\n  \"fiscally\",\n  \"fit\",\n  \"five\",\n  \"flaccid\",\n  \"flagman\",\n  \"flagpole\",\n  \"flagship\",\n  \"flagstick\",\n  \"flagstone\",\n  \"flail\",\n  \"flakily\",\n  \"flaky\",\n  \"flame\",\n  \"flammable\",\n  \"flanked\",\n  \"flanking\",\n  \"flannels\",\n  \"flap\",\n  \"flaring\",\n  \"flashback\",\n  \"flashbulb\",\n  \"flashcard\",\n  \"flashily\",\n  \"flashing\",\n  \"flashy\",\n  \"flask\",\n  \"flatbed\",\n  \"flatfoot\",\n  \"flatly\",\n  \"flatness\",\n  \"flatten\",\n  \"flattered\",\n  \"flatterer\",\n  \"flattery\",\n  \"flattop\",\n  \"flatware\",\n  \"flatworm\",\n  \"flavored\",\n  \"flavorful\",\n  \"flavoring\",\n  \"flaxseed\",\n  \"fled\",\n  \"fleshed\",\n  \"fleshy\",\n  \"flick\",\n  \"flier\",\n  \"flight\",\n  \"flinch\",\n  \"fling\",\n  \"flint\",\n  \"flip\",\n  \"flirt\",\n  \"float\",\n  \"flock\",\n  \"flogging\",\n  \"flop\",\n  \"floral\",\n  \"florist\",\n  \"floss\",\n  \"flounder\",\n  \"flyable\",\n  \"flyaway\",\n  \"flyer\",\n  \"flying\",\n  \"flyover\",\n  \"flypaper\",\n  \"foam\",\n  \"foe\",\n  \"fog\",\n  \"foil\",\n  \"folic\",\n  \"folk\",\n  \"follicle\",\n  \"follow\",\n  \"fondling\",\n  \"fondly\",\n  \"fondness\",\n  \"fondue\",\n  \"font\",\n  \"food\",\n  \"fool\",\n  \"footage\",\n  \"football\",\n  \"footbath\",\n  \"footboard\",\n  \"footer\",\n  \"footgear\",\n  \"foothill\",\n  \"foothold\",\n  \"footing\",\n  \"footless\",\n  \"footman\",\n  \"footnote\",\n  \"footpad\",\n  \"footpath\",\n  \"footprint\",\n  \"footrest\",\n  \"footsie\",\n  \"footsore\",\n  \"footwear\",\n  \"footwork\",\n  \"fossil\",\n  \"foster\",\n  \"founder\",\n  \"founding\",\n  \"fountain\",\n  \"fox\",\n  \"foyer\",\n  \"fraction\",\n  \"fracture\",\n  \"fragile\",\n  \"fragility\",\n  \"fragment\",\n  \"fragrance\",\n  \"fragrant\",\n  \"frail\",\n  \"frame\",\n  \"framing\",\n  \"frantic\",\n  \"fraternal\",\n  \"frayed\",\n  \"fraying\",\n  \"frays\",\n  \"freckled\",\n  \"freckles\",\n  \"freebase\",\n  \"freebee\",\n  \"freebie\",\n  \"freedom\",\n  \"freefall\",\n  \"freehand\",\n  \"freeing\",\n  \"freeload\",\n  \"freely\",\n  \"freemason\",\n  \"freeness\",\n  \"freestyle\",\n  \"freeware\",\n  \"freeway\",\n  \"freewill\",\n  \"freezable\",\n  \"freezing\",\n  \"freight\",\n  \"french\",\n  \"frenzied\",\n  \"frenzy\",\n  \"frequency\",\n  \"frequent\",\n  \"fresh\",\n  \"fretful\",\n  \"fretted\",\n  \"friction\",\n  \"friday\",\n  \"fridge\",\n  \"fried\",\n  \"friend\",\n  \"frighten\",\n  \"frightful\",\n  \"frigidity\",\n  \"frigidly\",\n  \"frill\",\n  \"fringe\",\n  \"frisbee\",\n  \"frisk\",\n  \"fritter\",\n  \"frivolous\",\n  \"frolic\",\n  \"from\",\n  \"front\",\n  \"frostbite\",\n  \"frosted\",\n  \"frostily\",\n  \"frosting\",\n  \"frostlike\",\n  \"frosty\",\n  \"froth\",\n  \"frown\",\n  \"frozen\",\n  \"fructose\",\n  \"frugality\",\n  \"frugally\",\n  \"fruit\",\n  \"frustrate\",\n  \"frying\",\n  \"gab\",\n  \"gaffe\",\n  \"gag\",\n  \"gainfully\",\n  \"gaining\",\n  \"gains\",\n  \"gala\",\n  \"gallantly\",\n  \"galleria\",\n  \"gallery\",\n  \"galley\",\n  \"gallon\",\n  \"gallows\",\n  \"gallstone\",\n  \"galore\",\n  \"galvanize\",\n  \"gambling\",\n  \"game\",\n  \"gaming\",\n  \"gamma\",\n  \"gander\",\n  \"gangly\",\n  \"gangrene\",\n  \"gangway\",\n  \"gap\",\n  \"garage\",\n  \"garbage\",\n  \"garden\",\n  \"gargle\",\n  \"garland\",\n  \"garlic\",\n  \"garment\",\n  \"garnet\",\n  \"garnish\",\n  \"garter\",\n  \"gas\",\n  \"gatherer\",\n  \"gathering\",\n  \"gating\",\n  \"gauging\",\n  \"gauntlet\",\n  \"gauze\",\n  \"gave\",\n  \"gawk\",\n  \"gazing\",\n  \"gear\",\n  \"gecko\",\n  \"geek\",\n  \"geiger\",\n  \"gem\",\n  \"gender\",\n  \"generic\",\n  \"generous\",\n  \"genetics\",\n  \"genre\",\n  \"gentile\",\n  \"gentleman\",\n  \"gently\",\n  \"gents\",\n  \"geography\",\n  \"geologic\",\n  \"geologist\",\n  \"geology\",\n  \"geometric\",\n  \"geometry\",\n  \"geranium\",\n  \"gerbil\",\n  \"geriatric\",\n  \"germicide\",\n  \"germinate\",\n  \"germless\",\n  \"germproof\",\n  \"gestate\",\n  \"gestation\",\n  \"gesture\",\n  \"getaway\",\n  \"getting\",\n  \"getup\",\n  \"giant\",\n  \"gibberish\",\n  \"giblet\",\n  \"giddily\",\n  \"giddiness\",\n  \"giddy\",\n  \"gift\",\n  \"gigabyte\",\n  \"gigahertz\",\n  \"gigantic\",\n  \"giggle\",\n  \"giggling\",\n  \"giggly\",\n  \"gigolo\",\n  \"gilled\",\n  \"gills\",\n  \"gimmick\",\n  \"girdle\",\n  \"giveaway\",\n  \"given\",\n  \"giver\",\n  \"giving\",\n  \"gizmo\",\n  \"gizzard\",\n  \"glacial\",\n  \"glacier\",\n  \"glade\",\n  \"gladiator\",\n  \"gladly\",\n  \"glamorous\",\n  \"glamour\",\n  \"glance\",\n  \"glancing\",\n  \"glandular\",\n  \"glare\",\n  \"glaring\",\n  \"glass\",\n  \"glaucoma\",\n  \"glazing\",\n  \"gleaming\",\n  \"gleeful\",\n  \"glider\",\n  \"gliding\",\n  \"glimmer\",\n  \"glimpse\",\n  \"glisten\",\n  \"glitch\",\n  \"glitter\",\n  \"glitzy\",\n  \"gloater\",\n  \"gloating\",\n  \"gloomily\",\n  \"gloomy\",\n  \"glorified\",\n  \"glorifier\",\n  \"glorify\",\n  \"glorious\",\n  \"glory\",\n  \"gloss\",\n  \"glove\",\n  \"glowing\",\n  \"glowworm\",\n  \"glucose\",\n  \"glue\",\n  \"gluten\",\n  \"glutinous\",\n  \"glutton\",\n  \"gnarly\",\n  \"gnat\",\n  \"goal\",\n  \"goatskin\",\n  \"goes\",\n  \"goggles\",\n  \"going\",\n  \"goldfish\",\n  \"goldmine\",\n  \"goldsmith\",\n  \"golf\",\n  \"goliath\",\n  \"gonad\",\n  \"gondola\",\n  \"gone\",\n  \"gong\",\n  \"good\",\n  \"gooey\",\n  \"goofball\",\n  \"goofiness\",\n  \"goofy\",\n  \"google\",\n  \"goon\",\n  \"gopher\",\n  \"gore\",\n  \"gorged\",\n  \"gorgeous\",\n  \"gory\",\n  \"gosling\",\n  \"gossip\",\n  \"gothic\",\n  \"gotten\",\n  \"gout\",\n  \"gown\",\n  \"grab\",\n  \"graceful\",\n  \"graceless\",\n  \"gracious\",\n  \"gradation\",\n  \"graded\",\n  \"grader\",\n  \"gradient\",\n  \"grading\",\n  \"gradually\",\n  \"graduate\",\n  \"graffiti\",\n  \"grafted\",\n  \"grafting\",\n  \"grain\",\n  \"granddad\",\n  \"grandkid\",\n  \"grandly\",\n  \"grandma\",\n  \"grandpa\",\n  \"grandson\",\n  \"granite\",\n  \"granny\",\n  \"granola\",\n  \"grant\",\n  \"granular\",\n  \"grape\",\n  \"graph\",\n  \"grapple\",\n  \"grappling\",\n  \"grasp\",\n  \"grass\",\n  \"gratified\",\n  \"gratify\",\n  \"grating\",\n  \"gratitude\",\n  \"gratuity\",\n  \"gravel\",\n  \"graveness\",\n  \"graves\",\n  \"graveyard\",\n  \"gravitate\",\n  \"gravity\",\n  \"gravy\",\n  \"gray\",\n  \"grazing\",\n  \"greasily\",\n  \"greedily\",\n  \"greedless\",\n  \"greedy\",\n  \"green\",\n  \"greeter\",\n  \"greeting\",\n  \"grew\",\n  \"greyhound\",\n  \"grid\",\n  \"grief\",\n  \"grievance\",\n  \"grieving\",\n  \"grievous\",\n  \"grill\",\n  \"grimace\",\n  \"grimacing\",\n  \"grime\",\n  \"griminess\",\n  \"grimy\",\n  \"grinch\",\n  \"grinning\",\n  \"grip\",\n  \"gristle\",\n  \"grit\",\n  \"groggily\",\n  \"groggy\",\n  \"groin\",\n  \"groom\",\n  \"groove\",\n  \"grooving\",\n  \"groovy\",\n  \"grope\",\n  \"ground\",\n  \"grouped\",\n  \"grout\",\n  \"grove\",\n  \"grower\",\n  \"growing\",\n  \"growl\",\n  \"grub\",\n  \"grudge\",\n  \"grudging\",\n  \"grueling\",\n  \"gruffly\",\n  \"grumble\",\n  \"grumbling\",\n  \"grumbly\",\n  \"grumpily\",\n  \"grunge\",\n  \"grunt\",\n  \"guacamole\",\n  \"guidable\",\n  \"guidance\",\n  \"guide\",\n  \"guiding\",\n  \"guileless\",\n  \"guise\",\n  \"gulf\",\n  \"gullible\",\n  \"gully\",\n  \"gulp\",\n  \"gumball\",\n  \"gumdrop\",\n  \"gumminess\",\n  \"gumming\",\n  \"gummy\",\n  \"gurgle\",\n  \"gurgling\",\n  \"guru\",\n  \"gush\",\n  \"gusto\",\n  \"gusty\",\n  \"gutless\",\n  \"guts\",\n  \"gutter\",\n  \"guy\",\n  \"guzzler\",\n  \"gyration\",\n  \"habitable\",\n  \"habitant\",\n  \"habitat\",\n  \"habitual\",\n  \"hacked\",\n  \"hacker\",\n  \"hacking\",\n  \"hacksaw\",\n  \"had\",\n  \"haggler\",\n  \"haiku\",\n  \"half\",\n  \"halogen\",\n  \"halt\",\n  \"halved\",\n  \"halves\",\n  \"hamburger\",\n  \"hamlet\",\n  \"hammock\",\n  \"hamper\",\n  \"hamster\",\n  \"hamstring\",\n  \"handbag\",\n  \"handball\",\n  \"handbook\",\n  \"handbrake\",\n  \"handcart\",\n  \"handclap\",\n  \"handclasp\",\n  \"handcraft\",\n  \"handcuff\",\n  \"handed\",\n  \"handful\",\n  \"handgrip\",\n  \"handgun\",\n  \"handheld\",\n  \"handiness\",\n  \"handiwork\",\n  \"handlebar\",\n  \"handled\",\n  \"handler\",\n  \"handling\",\n  \"handmade\",\n  \"handoff\",\n  \"handpick\",\n  \"handprint\",\n  \"handrail\",\n  \"handsaw\",\n  \"handset\",\n  \"handsfree\",\n  \"handshake\",\n  \"handstand\",\n  \"handwash\",\n  \"handwork\",\n  \"handwoven\",\n  \"handwrite\",\n  \"handyman\",\n  \"hangnail\",\n  \"hangout\",\n  \"hangover\",\n  \"hangup\",\n  \"hankering\",\n  \"hankie\",\n  \"hanky\",\n  \"haphazard\",\n  \"happening\",\n  \"happier\",\n  \"happiest\",\n  \"happily\",\n  \"happiness\",\n  \"happy\",\n  \"harbor\",\n  \"hardcopy\",\n  \"hardcore\",\n  \"hardcover\",\n  \"harddisk\",\n  \"hardened\",\n  \"hardener\",\n  \"hardening\",\n  \"hardhat\",\n  \"hardhead\",\n  \"hardiness\",\n  \"hardly\",\n  \"hardness\",\n  \"hardship\",\n  \"hardware\",\n  \"hardwired\",\n  \"hardwood\",\n  \"hardy\",\n  \"harmful\",\n  \"harmless\",\n  \"harmonica\",\n  \"harmonics\",\n  \"harmonize\",\n  \"harmony\",\n  \"harness\",\n  \"harpist\",\n  \"harsh\",\n  \"harvest\",\n  \"hash\",\n  \"hassle\",\n  \"haste\",\n  \"hastily\",\n  \"hastiness\",\n  \"hasty\",\n  \"hatbox\",\n  \"hatchback\",\n  \"hatchery\",\n  \"hatchet\",\n  \"hatching\",\n  \"hatchling\",\n  \"hate\",\n  \"hatless\",\n  \"hatred\",\n  \"haunt\",\n  \"haven\",\n  \"hazard\",\n  \"hazelnut\",\n  \"hazily\",\n  \"haziness\",\n  \"hazing\",\n  \"hazy\",\n  \"headache\",\n  \"headband\",\n  \"headboard\",\n  \"headcount\",\n  \"headdress\",\n  \"headed\",\n  \"header\",\n  \"headfirst\",\n  \"headgear\",\n  \"heading\",\n  \"headlamp\",\n  \"headless\",\n  \"headlock\",\n  \"headphone\",\n  \"headpiece\",\n  \"headrest\",\n  \"headroom\",\n  \"headscarf\",\n  \"headset\",\n  \"headsman\",\n  \"headstand\",\n  \"headstone\",\n  \"headway\",\n  \"headwear\",\n  \"heap\",\n  \"heat\",\n  \"heave\",\n  \"heavily\",\n  \"heaviness\",\n  \"heaving\",\n  \"hedge\",\n  \"hedging\",\n  \"heftiness\",\n  \"hefty\",\n  \"helium\",\n  \"helmet\",\n  \"helper\",\n  \"helpful\",\n  \"helping\",\n  \"helpless\",\n  \"helpline\",\n  \"hemlock\",\n  \"hemstitch\",\n  \"hence\",\n  \"henchman\",\n  \"henna\",\n  \"herald\",\n  \"herbal\",\n  \"herbicide\",\n  \"herbs\",\n  \"heritage\",\n  \"hermit\",\n  \"heroics\",\n  \"heroism\",\n  \"herring\",\n  \"herself\",\n  \"hertz\",\n  \"hesitancy\",\n  \"hesitant\",\n  \"hesitate\",\n  \"hexagon\",\n  \"hexagram\",\n  \"hubcap\",\n  \"huddle\",\n  \"huddling\",\n  \"huff\",\n  \"hug\",\n  \"hula\",\n  \"hulk\",\n  \"hull\",\n  \"human\",\n  \"humble\",\n  \"humbling\",\n  \"humbly\",\n  \"humid\",\n  \"humiliate\",\n  \"humility\",\n  \"humming\",\n  \"hummus\",\n  \"humongous\",\n  \"humorist\",\n  \"humorless\",\n  \"humorous\",\n  \"humpback\",\n  \"humped\",\n  \"humvee\",\n  \"hunchback\",\n  \"hundredth\",\n  \"hunger\",\n  \"hungrily\",\n  \"hungry\",\n  \"hunk\",\n  \"hunter\",\n  \"hunting\",\n  \"huntress\",\n  \"huntsman\",\n  \"hurdle\",\n  \"hurled\",\n  \"hurler\",\n  \"hurling\",\n  \"hurray\",\n  \"hurricane\",\n  \"hurried\",\n  \"hurry\",\n  \"hurt\",\n  \"husband\",\n  \"hush\",\n  \"husked\",\n  \"huskiness\",\n  \"hut\",\n  \"hybrid\",\n  \"hydrant\",\n  \"hydrated\",\n  \"hydration\",\n  \"hydrogen\",\n  \"hydroxide\",\n  \"hyperlink\",\n  \"hypertext\",\n  \"hyphen\",\n  \"hypnoses\",\n  \"hypnosis\",\n  \"hypnotic\",\n  \"hypnotism\",\n  \"hypnotist\",\n  \"hypnotize\",\n  \"hypocrisy\",\n  \"hypocrite\",\n  \"ibuprofen\",\n  \"ice\",\n  \"iciness\",\n  \"icing\",\n  \"icky\",\n  \"icon\",\n  \"icy\",\n  \"idealism\",\n  \"idealist\",\n  \"idealize\",\n  \"ideally\",\n  \"idealness\",\n  \"identical\",\n  \"identify\",\n  \"identity\",\n  \"ideology\",\n  \"idiocy\",\n  \"idiom\",\n  \"idly\",\n  \"igloo\",\n  \"ignition\",\n  \"ignore\",\n  \"iguana\",\n  \"illicitly\",\n  \"illusion\",\n  \"illusive\",\n  \"image\",\n  \"imaginary\",\n  \"imagines\",\n  \"imaging\",\n  \"imbecile\",\n  \"imitate\",\n  \"imitation\",\n  \"immature\",\n  \"immerse\",\n  \"immersion\",\n  \"imminent\",\n  \"immobile\",\n  \"immodest\",\n  \"immorally\",\n  \"immortal\",\n  \"immovable\",\n  \"immovably\",\n  \"immunity\",\n  \"immunize\",\n  \"impaired\",\n  \"impale\",\n  \"impart\",\n  \"impatient\",\n  \"impeach\",\n  \"impeding\",\n  \"impending\",\n  \"imperfect\",\n  \"imperial\",\n  \"impish\",\n  \"implant\",\n  \"implement\",\n  \"implicate\",\n  \"implicit\",\n  \"implode\",\n  \"implosion\",\n  \"implosive\",\n  \"imply\",\n  \"impolite\",\n  \"important\",\n  \"importer\",\n  \"impose\",\n  \"imposing\",\n  \"impotence\",\n  \"impotency\",\n  \"impotent\",\n  \"impound\",\n  \"imprecise\",\n  \"imprint\",\n  \"imprison\",\n  \"impromptu\",\n  \"improper\",\n  \"improve\",\n  \"improving\",\n  \"improvise\",\n  \"imprudent\",\n  \"impulse\",\n  \"impulsive\",\n  \"impure\",\n  \"impurity\",\n  \"iodine\",\n  \"iodize\",\n  \"ion\",\n  \"ipad\",\n  \"iphone\",\n  \"ipod\",\n  \"irate\",\n  \"irk\",\n  \"iron\",\n  \"irregular\",\n  \"irrigate\",\n  \"irritable\",\n  \"irritably\",\n  \"irritant\",\n  \"irritate\",\n  \"islamic\",\n  \"islamist\",\n  \"isolated\",\n  \"isolating\",\n  \"isolation\",\n  \"isotope\",\n  \"issue\",\n  \"issuing\",\n  \"italicize\",\n  \"italics\",\n  \"item\",\n  \"itinerary\",\n  \"itunes\",\n  \"ivory\",\n  \"ivy\",\n  \"jab\",\n  \"jackal\",\n  \"jacket\",\n  \"jackknife\",\n  \"jackpot\",\n  \"jailbird\",\n  \"jailbreak\",\n  \"jailer\",\n  \"jailhouse\",\n  \"jalapeno\",\n  \"jam\",\n  \"janitor\",\n  \"january\",\n  \"jargon\",\n  \"jarring\",\n  \"jasmine\",\n  \"jaundice\",\n  \"jaunt\",\n  \"java\",\n  \"jawed\",\n  \"jawless\",\n  \"jawline\",\n  \"jaws\",\n  \"jaybird\",\n  \"jaywalker\",\n  \"jazz\",\n  \"jeep\",\n  \"jeeringly\",\n  \"jellied\",\n  \"jelly\",\n  \"jersey\",\n  \"jester\",\n  \"jet\",\n  \"jiffy\",\n  \"jigsaw\",\n  \"jimmy\",\n  \"jingle\",\n  \"jingling\",\n  \"jinx\",\n  \"jitters\",\n  \"jittery\",\n  \"job\",\n  \"jockey\",\n  \"jockstrap\",\n  \"jogger\",\n  \"jogging\",\n  \"john\",\n  \"joining\",\n  \"jokester\",\n  \"jokingly\",\n  \"jolliness\",\n  \"jolly\",\n  \"jolt\",\n  \"jot\",\n  \"jovial\",\n  \"joyfully\",\n  \"joylessly\",\n  \"joyous\",\n  \"joyride\",\n  \"joystick\",\n  \"jubilance\",\n  \"jubilant\",\n  \"judge\",\n  \"judgingly\",\n  \"judicial\",\n  \"judiciary\",\n  \"judo\",\n  \"juggle\",\n  \"juggling\",\n  \"jugular\",\n  \"juice\",\n  \"juiciness\",\n  \"juicy\",\n  \"jujitsu\",\n  \"jukebox\",\n  \"july\",\n  \"jumble\",\n  \"jumbo\",\n  \"jump\",\n  \"junction\",\n  \"juncture\",\n  \"june\",\n  \"junior\",\n  \"juniper\",\n  \"junkie\",\n  \"junkman\",\n  \"junkyard\",\n  \"jurist\",\n  \"juror\",\n  \"jury\",\n  \"justice\",\n  \"justifier\",\n  \"justify\",\n  \"justly\",\n  \"justness\",\n  \"juvenile\",\n  \"kabob\",\n  \"kangaroo\",\n  \"karaoke\",\n  \"karate\",\n  \"karma\",\n  \"kebab\",\n  \"keenly\",\n  \"keenness\",\n  \"keep\",\n  \"keg\",\n  \"kelp\",\n  \"kennel\",\n  \"kept\",\n  \"kerchief\",\n  \"kerosene\",\n  \"kettle\",\n  \"kick\",\n  \"kiln\",\n  \"kilobyte\",\n  \"kilogram\",\n  \"kilometer\",\n  \"kilowatt\",\n  \"kilt\",\n  \"kimono\",\n  \"kindle\",\n  \"kindling\",\n  \"kindly\",\n  \"kindness\",\n  \"kindred\",\n  \"kinetic\",\n  \"kinfolk\",\n  \"king\",\n  \"kinship\",\n  \"kinsman\",\n  \"kinswoman\",\n  \"kissable\",\n  \"kisser\",\n  \"kissing\",\n  \"kitchen\",\n  \"kite\",\n  \"kitten\",\n  \"kitty\",\n  \"kiwi\",\n  \"kleenex\",\n  \"knapsack\",\n  \"knee\",\n  \"knelt\",\n  \"knickers\",\n  \"knoll\",\n  \"koala\",\n  \"kooky\",\n  \"kosher\",\n  \"krypton\",\n  \"kudos\",\n  \"kung\",\n  \"labored\",\n  \"laborer\",\n  \"laboring\",\n  \"laborious\",\n  \"labrador\",\n  \"ladder\",\n  \"ladies\",\n  \"ladle\",\n  \"ladybug\",\n  \"ladylike\",\n  \"lagged\",\n  \"lagging\",\n  \"lagoon\",\n  \"lair\",\n  \"lake\",\n  \"lance\",\n  \"landed\",\n  \"landfall\",\n  \"landfill\",\n  \"landing\",\n  \"landlady\",\n  \"landless\",\n  \"landline\",\n  \"landlord\",\n  \"landmark\",\n  \"landmass\",\n  \"landmine\",\n  \"landowner\",\n  \"landscape\",\n  \"landside\",\n  \"landslide\",\n  \"language\",\n  \"lankiness\",\n  \"lanky\",\n  \"lantern\",\n  \"lapdog\",\n  \"lapel\",\n  \"lapped\",\n  \"lapping\",\n  \"laptop\",\n  \"lard\",\n  \"large\",\n  \"lark\",\n  \"lash\",\n  \"lasso\",\n  \"last\",\n  \"latch\",\n  \"late\",\n  \"lather\",\n  \"latitude\",\n  \"latrine\",\n  \"latter\",\n  \"latticed\",\n  \"launch\",\n  \"launder\",\n  \"laundry\",\n  \"laurel\",\n  \"lavender\",\n  \"lavish\",\n  \"laxative\",\n  \"lazily\",\n  \"laziness\",\n  \"lazy\",\n  \"lecturer\",\n  \"left\",\n  \"legacy\",\n  \"legal\",\n  \"legend\",\n  \"legged\",\n  \"leggings\",\n  \"legible\",\n  \"legibly\",\n  \"legislate\",\n  \"lego\",\n  \"legroom\",\n  \"legume\",\n  \"legwarmer\",\n  \"legwork\",\n  \"lemon\",\n  \"lend\",\n  \"length\",\n  \"lens\",\n  \"lent\",\n  \"leotard\",\n  \"lesser\",\n  \"letdown\",\n  \"lethargic\",\n  \"lethargy\",\n  \"letter\",\n  \"lettuce\",\n  \"level\",\n  \"leverage\",\n  \"levers\",\n  \"levitate\",\n  \"levitator\",\n  \"liability\",\n  \"liable\",\n  \"liberty\",\n  \"librarian\",\n  \"library\",\n  \"licking\",\n  \"licorice\",\n  \"lid\",\n  \"life\",\n  \"lifter\",\n  \"lifting\",\n  \"liftoff\",\n  \"ligament\",\n  \"likely\",\n  \"likeness\",\n  \"likewise\",\n  \"liking\",\n  \"lilac\",\n  \"lilly\",\n  \"lily\",\n  \"limb\",\n  \"limeade\",\n  \"limelight\",\n  \"limes\",\n  \"limit\",\n  \"limping\",\n  \"limpness\",\n  \"line\",\n  \"lingo\",\n  \"linguini\",\n  \"linguist\",\n  \"lining\",\n  \"linked\",\n  \"linoleum\",\n  \"linseed\",\n  \"lint\",\n  \"lion\",\n  \"lip\",\n  \"liquefy\",\n  \"liqueur\",\n  \"liquid\",\n  \"lisp\",\n  \"list\",\n  \"litigate\",\n  \"litigator\",\n  \"litmus\",\n  \"litter\",\n  \"little\",\n  \"livable\",\n  \"lived\",\n  \"lively\",\n  \"liver\",\n  \"livestock\",\n  \"lividly\",\n  \"living\",\n  \"lizard\",\n  \"lubricant\",\n  \"lubricate\",\n  \"lucid\",\n  \"luckily\",\n  \"luckiness\",\n  \"luckless\",\n  \"lucrative\",\n  \"ludicrous\",\n  \"lugged\",\n  \"lukewarm\",\n  \"lullaby\",\n  \"lumber\",\n  \"luminance\",\n  \"luminous\",\n  \"lumpiness\",\n  \"lumping\",\n  \"lumpish\",\n  \"lunacy\",\n  \"lunar\",\n  \"lunchbox\",\n  \"luncheon\",\n  \"lunchroom\",\n  \"lunchtime\",\n  \"lung\",\n  \"lurch\",\n  \"lure\",\n  \"luridness\",\n  \"lurk\",\n  \"lushly\",\n  \"lushness\",\n  \"luster\",\n  \"lustfully\",\n  \"lustily\",\n  \"lustiness\",\n  \"lustrous\",\n  \"lusty\",\n  \"luxurious\",\n  \"luxury\",\n  \"lying\",\n  \"lyrically\",\n  \"lyricism\",\n  \"lyricist\",\n  \"lyrics\",\n  \"macarena\",\n  \"macaroni\",\n  \"macaw\",\n  \"mace\",\n  \"machine\",\n  \"machinist\",\n  \"magazine\",\n  \"magenta\",\n  \"maggot\",\n  \"magical\",\n  \"magician\",\n  \"magma\",\n  \"magnesium\",\n  \"magnetic\",\n  \"magnetism\",\n  \"magnetize\",\n  \"magnifier\",\n  \"magnify\",\n  \"magnitude\",\n  \"magnolia\",\n  \"mahogany\",\n  \"maimed\",\n  \"majestic\",\n  \"majesty\",\n  \"majorette\",\n  \"majority\",\n  \"makeover\",\n  \"maker\",\n  \"makeshift\",\n  \"making\",\n  \"malformed\",\n  \"malt\",\n  \"mama\",\n  \"mammal\",\n  \"mammary\",\n  \"mammogram\",\n  \"manager\",\n  \"managing\",\n  \"manatee\",\n  \"mandarin\",\n  \"mandate\",\n  \"mandatory\",\n  \"mandolin\",\n  \"manger\",\n  \"mangle\",\n  \"mango\",\n  \"mangy\",\n  \"manhandle\",\n  \"manhole\",\n  \"manhood\",\n  \"manhunt\",\n  \"manicotti\",\n  \"manicure\",\n  \"manifesto\",\n  \"manila\",\n  \"mankind\",\n  \"manlike\",\n  \"manliness\",\n  \"manly\",\n  \"manmade\",\n  \"manned\",\n  \"mannish\",\n  \"manor\",\n  \"manpower\",\n  \"mantis\",\n  \"mantra\",\n  \"manual\",\n  \"many\",\n  \"map\",\n  \"marathon\",\n  \"marauding\",\n  \"marbled\",\n  \"marbles\",\n  \"marbling\",\n  \"march\",\n  \"mardi\",\n  \"margarine\",\n  \"margarita\",\n  \"margin\",\n  \"marigold\",\n  \"marina\",\n  \"marine\",\n  \"marital\",\n  \"maritime\",\n  \"marlin\",\n  \"marmalade\",\n  \"maroon\",\n  \"married\",\n  \"marrow\",\n  \"marry\",\n  \"marshland\",\n  \"marshy\",\n  \"marsupial\",\n  \"marvelous\",\n  \"marxism\",\n  \"mascot\",\n  \"masculine\",\n  \"mashed\",\n  \"mashing\",\n  \"massager\",\n  \"masses\",\n  \"massive\",\n  \"mastiff\",\n  \"matador\",\n  \"matchbook\",\n  \"matchbox\",\n  \"matcher\",\n  \"matching\",\n  \"matchless\",\n  \"material\",\n  \"maternal\",\n  \"maternity\",\n  \"math\",\n  \"mating\",\n  \"matriarch\",\n  \"matrimony\",\n  \"matrix\",\n  \"matron\",\n  \"matted\",\n  \"matter\",\n  \"maturely\",\n  \"maturing\",\n  \"maturity\",\n  \"mauve\",\n  \"maverick\",\n  \"maximize\",\n  \"maximum\",\n  \"maybe\",\n  \"mayday\",\n  \"mayflower\",\n  \"moaner\",\n  \"moaning\",\n  \"mobile\",\n  \"mobility\",\n  \"mobilize\",\n  \"mobster\",\n  \"mocha\",\n  \"mocker\",\n  \"mockup\",\n  \"modified\",\n  \"modify\",\n  \"modular\",\n  \"modulator\",\n  \"module\",\n  \"moisten\",\n  \"moistness\",\n  \"moisture\",\n  \"molar\",\n  \"molasses\",\n  \"mold\",\n  \"molecular\",\n  \"molecule\",\n  \"molehill\",\n  \"mollusk\",\n  \"mom\",\n  \"monastery\",\n  \"monday\",\n  \"monetary\",\n  \"monetize\",\n  \"moneybags\",\n  \"moneyless\",\n  \"moneywise\",\n  \"mongoose\",\n  \"mongrel\",\n  \"monitor\",\n  \"monkhood\",\n  \"monogamy\",\n  \"monogram\",\n  \"monologue\",\n  \"monopoly\",\n  \"monorail\",\n  \"monotone\",\n  \"monotype\",\n  \"monoxide\",\n  \"monsieur\",\n  \"monsoon\",\n  \"monstrous\",\n  \"monthly\",\n  \"monument\",\n  \"moocher\",\n  \"moodiness\",\n  \"moody\",\n  \"mooing\",\n  \"moonbeam\",\n  \"mooned\",\n  \"moonlight\",\n  \"moonlike\",\n  \"moonlit\",\n  \"moonrise\",\n  \"moonscape\",\n  \"moonshine\",\n  \"moonstone\",\n  \"moonwalk\",\n  \"mop\",\n  \"morale\",\n  \"morality\",\n  \"morally\",\n  \"morbidity\",\n  \"morbidly\",\n  \"morphine\",\n  \"morphing\",\n  \"morse\",\n  \"mortality\",\n  \"mortally\",\n  \"mortician\",\n  \"mortified\",\n  \"mortify\",\n  \"mortuary\",\n  \"mosaic\",\n  \"mossy\",\n  \"most\",\n  \"mothball\",\n  \"mothproof\",\n  \"motion\",\n  \"motivate\",\n  \"motivator\",\n  \"motive\",\n  \"motocross\",\n  \"motor\",\n  \"motto\",\n  \"mountable\",\n  \"mountain\",\n  \"mounted\",\n  \"mounting\",\n  \"mourner\",\n  \"mournful\",\n  \"mouse\",\n  \"mousiness\",\n  \"moustache\",\n  \"mousy\",\n  \"mouth\",\n  \"movable\",\n  \"move\",\n  \"movie\",\n  \"moving\",\n  \"mower\",\n  \"mowing\",\n  \"much\",\n  \"muck\",\n  \"mud\",\n  \"mug\",\n  \"mulberry\",\n  \"mulch\",\n  \"mule\",\n  \"mulled\",\n  \"mullets\",\n  \"multiple\",\n  \"multiply\",\n  \"multitask\",\n  \"multitude\",\n  \"mumble\",\n  \"mumbling\",\n  \"mumbo\",\n  \"mummified\",\n  \"mummify\",\n  \"mummy\",\n  \"mumps\",\n  \"munchkin\",\n  \"mundane\",\n  \"municipal\",\n  \"muppet\",\n  \"mural\",\n  \"murkiness\",\n  \"murky\",\n  \"murmuring\",\n  \"muscular\",\n  \"museum\",\n  \"mushily\",\n  \"mushiness\",\n  \"mushroom\",\n  \"mushy\",\n  \"music\",\n  \"musket\",\n  \"muskiness\",\n  \"musky\",\n  \"mustang\",\n  \"mustard\",\n  \"muster\",\n  \"mustiness\",\n  \"musty\",\n  \"mutable\",\n  \"mutate\",\n  \"mutation\",\n  \"mute\",\n  \"mutilated\",\n  \"mutilator\",\n  \"mutiny\",\n  \"mutt\",\n  \"mutual\",\n  \"muzzle\",\n  \"myself\",\n  \"myspace\",\n  \"mystified\",\n  \"mystify\",\n  \"myth\",\n  \"nacho\",\n  \"nag\",\n  \"nail\",\n  \"name\",\n  \"naming\",\n  \"nanny\",\n  \"nanometer\",\n  \"nape\",\n  \"napkin\",\n  \"napped\",\n  \"napping\",\n  \"nappy\",\n  \"narrow\",\n  \"nastily\",\n  \"nastiness\",\n  \"national\",\n  \"native\",\n  \"nativity\",\n  \"natural\",\n  \"nature\",\n  \"naturist\",\n  \"nautical\",\n  \"navigate\",\n  \"navigator\",\n  \"navy\",\n  \"nearby\",\n  \"nearest\",\n  \"nearly\",\n  \"nearness\",\n  \"neatly\",\n  \"neatness\",\n  \"nebula\",\n  \"nebulizer\",\n  \"nectar\",\n  \"negate\",\n  \"negation\",\n  \"negative\",\n  \"neglector\",\n  \"negligee\",\n  \"negligent\",\n  \"negotiate\",\n  \"nemeses\",\n  \"nemesis\",\n  \"neon\",\n  \"nephew\",\n  \"nerd\",\n  \"nervous\",\n  \"nervy\",\n  \"nest\",\n  \"net\",\n  \"neurology\",\n  \"neuron\",\n  \"neurosis\",\n  \"neurotic\",\n  \"neuter\",\n  \"neutron\",\n  \"never\",\n  \"next\",\n  \"nibble\",\n  \"nickname\",\n  \"nicotine\",\n  \"niece\",\n  \"nifty\",\n  \"nimble\",\n  \"nimbly\",\n  \"nineteen\",\n  \"ninetieth\",\n  \"ninja\",\n  \"nintendo\",\n  \"ninth\",\n  \"nuclear\",\n  \"nuclei\",\n  \"nucleus\",\n  \"nugget\",\n  \"nullify\",\n  \"number\",\n  \"numbing\",\n  \"numbly\",\n  \"numbness\",\n  \"numeral\",\n  \"numerate\",\n  \"numerator\",\n  \"numeric\",\n  \"numerous\",\n  \"nuptials\",\n  \"nursery\",\n  \"nursing\",\n  \"nurture\",\n  \"nutcase\",\n  \"nutlike\",\n  \"nutmeg\",\n  \"nutrient\",\n  \"nutshell\",\n  \"nuttiness\",\n  \"nutty\",\n  \"nuzzle\",\n  \"nylon\",\n  \"oaf\",\n  \"oak\",\n  \"oasis\",\n  \"oat\",\n  \"obedience\",\n  \"obedient\",\n  \"obituary\",\n  \"object\",\n  \"obligate\",\n  \"obliged\",\n  \"oblivion\",\n  \"oblivious\",\n  \"oblong\",\n  \"obnoxious\",\n  \"oboe\",\n  \"obscure\",\n  \"obscurity\",\n  \"observant\",\n  \"observer\",\n  \"observing\",\n  \"obsessed\",\n  \"obsession\",\n  \"obsessive\",\n  \"obsolete\",\n  \"obstacle\",\n  \"obstinate\",\n  \"obstruct\",\n  \"obtain\",\n  \"obtrusive\",\n  \"obtuse\",\n  \"obvious\",\n  \"occultist\",\n  \"occupancy\",\n  \"occupant\",\n  \"occupier\",\n  \"occupy\",\n  \"ocean\",\n  \"ocelot\",\n  \"octagon\",\n  \"octane\",\n  \"october\",\n  \"octopus\",\n  \"ogle\",\n  \"oil\",\n  \"oink\",\n  \"ointment\",\n  \"okay\",\n  \"old\",\n  \"olive\",\n  \"olympics\",\n  \"omega\",\n  \"omen\",\n  \"ominous\",\n  \"omission\",\n  \"omit\",\n  \"omnivore\",\n  \"onboard\",\n  \"oncoming\",\n  \"ongoing\",\n  \"onion\",\n  \"online\",\n  \"onlooker\",\n  \"only\",\n  \"onscreen\",\n  \"onset\",\n  \"onshore\",\n  \"onslaught\",\n  \"onstage\",\n  \"onto\",\n  \"onward\",\n  \"onyx\",\n  \"oops\",\n  \"ooze\",\n  \"oozy\",\n  \"opacity\",\n  \"opal\",\n  \"open\",\n  \"operable\",\n  \"operate\",\n  \"operating\",\n  \"operation\",\n  \"operative\",\n  \"operator\",\n  \"opium\",\n  \"opossum\",\n  \"opponent\",\n  \"oppose\",\n  \"opposing\",\n  \"opposite\",\n  \"oppressed\",\n  \"oppressor\",\n  \"opt\",\n  \"opulently\",\n  \"osmosis\",\n  \"other\",\n  \"otter\",\n  \"ouch\",\n  \"ought\",\n  \"ounce\",\n  \"outage\",\n  \"outback\",\n  \"outbid\",\n  \"outboard\",\n  \"outbound\",\n  \"outbreak\",\n  \"outburst\",\n  \"outcast\",\n  \"outclass\",\n  \"outcome\",\n  \"outdated\",\n  \"outdoors\",\n  \"outer\",\n  \"outfield\",\n  \"outfit\",\n  \"outflank\",\n  \"outgoing\",\n  \"outgrow\",\n  \"outhouse\",\n  \"outing\",\n  \"outlast\",\n  \"outlet\",\n  \"outline\",\n  \"outlook\",\n  \"outlying\",\n  \"outmatch\",\n  \"outmost\",\n  \"outnumber\",\n  \"outplayed\",\n  \"outpost\",\n  \"outpour\",\n  \"output\",\n  \"outrage\",\n  \"outrank\",\n  \"outreach\",\n  \"outright\",\n  \"outscore\",\n  \"outsell\",\n  \"outshine\",\n  \"outshoot\",\n  \"outsider\",\n  \"outskirts\",\n  \"outsmart\",\n  \"outsource\",\n  \"outspoken\",\n  \"outtakes\",\n  \"outthink\",\n  \"outward\",\n  \"outweigh\",\n  \"outwit\",\n  \"oval\",\n  \"ovary\",\n  \"oven\",\n  \"overact\",\n  \"overall\",\n  \"overarch\",\n  \"overbid\",\n  \"overbill\",\n  \"overbite\",\n  \"overblown\",\n  \"overboard\",\n  \"overbook\",\n  \"overbuilt\",\n  \"overcast\",\n  \"overcoat\",\n  \"overcome\",\n  \"overcook\",\n  \"overcrowd\",\n  \"overdraft\",\n  \"overdrawn\",\n  \"overdress\",\n  \"overdrive\",\n  \"overdue\",\n  \"overeager\",\n  \"overeater\",\n  \"overexert\",\n  \"overfed\",\n  \"overfeed\",\n  \"overfill\",\n  \"overflow\",\n  \"overfull\",\n  \"overgrown\",\n  \"overhand\",\n  \"overhang\",\n  \"overhaul\",\n  \"overhead\",\n  \"overhear\",\n  \"overheat\",\n  \"overhung\",\n  \"overjoyed\",\n  \"overkill\",\n  \"overlabor\",\n  \"overlaid\",\n  \"overlap\",\n  \"overlay\",\n  \"overload\",\n  \"overlook\",\n  \"overlord\",\n  \"overlying\",\n  \"overnight\",\n  \"overpass\",\n  \"overpay\",\n  \"overplant\",\n  \"overplay\",\n  \"overpower\",\n  \"overprice\",\n  \"overrate\",\n  \"overreach\",\n  \"overreact\",\n  \"override\",\n  \"overripe\",\n  \"overrule\",\n  \"overrun\",\n  \"overshoot\",\n  \"overshot\",\n  \"oversight\",\n  \"oversized\",\n  \"oversleep\",\n  \"oversold\",\n  \"overspend\",\n  \"overstate\",\n  \"overstay\",\n  \"overstep\",\n  \"overstock\",\n  \"overstuff\",\n  \"oversweet\",\n  \"overtake\",\n  \"overthrow\",\n  \"overtime\",\n  \"overtly\",\n  \"overtone\",\n  \"overture\",\n  \"overturn\",\n  \"overuse\",\n  \"overvalue\",\n  \"overview\",\n  \"overwrite\",\n  \"owl\",\n  \"oxford\",\n  \"oxidant\",\n  \"oxidation\",\n  \"oxidize\",\n  \"oxidizing\",\n  \"oxygen\",\n  \"oxymoron\",\n  \"oyster\",\n  \"ozone\",\n  \"paced\",\n  \"pacemaker\",\n  \"pacific\",\n  \"pacifier\",\n  \"pacifism\",\n  \"pacifist\",\n  \"pacify\",\n  \"padded\",\n  \"padding\",\n  \"paddle\",\n  \"paddling\",\n  \"padlock\",\n  \"pagan\",\n  \"pager\",\n  \"paging\",\n  \"pajamas\",\n  \"palace\",\n  \"palatable\",\n  \"palm\",\n  \"palpable\",\n  \"palpitate\",\n  \"paltry\",\n  \"pampered\",\n  \"pamperer\",\n  \"pampers\",\n  \"pamphlet\",\n  \"panama\",\n  \"pancake\",\n  \"pancreas\",\n  \"panda\",\n  \"pandemic\",\n  \"pang\",\n  \"panhandle\",\n  \"panic\",\n  \"panning\",\n  \"panorama\",\n  \"panoramic\",\n  \"panther\",\n  \"pantomime\",\n  \"pantry\",\n  \"pants\",\n  \"pantyhose\",\n  \"paparazzi\",\n  \"papaya\",\n  \"paper\",\n  \"paprika\",\n  \"papyrus\",\n  \"parabola\",\n  \"parachute\",\n  \"parade\",\n  \"paradox\",\n  \"paragraph\",\n  \"parakeet\",\n  \"paralegal\",\n  \"paralyses\",\n  \"paralysis\",\n  \"paralyze\",\n  \"paramedic\",\n  \"parameter\",\n  \"paramount\",\n  \"parasail\",\n  \"parasite\",\n  \"parasitic\",\n  \"parcel\",\n  \"parched\",\n  \"parchment\",\n  \"pardon\",\n  \"parish\",\n  \"parka\",\n  \"parking\",\n  \"parkway\",\n  \"parlor\",\n  \"parmesan\",\n  \"parole\",\n  \"parrot\",\n  \"parsley\",\n  \"parsnip\",\n  \"partake\",\n  \"parted\",\n  \"parting\",\n  \"partition\",\n  \"partly\",\n  \"partner\",\n  \"partridge\",\n  \"party\",\n  \"passable\",\n  \"passably\",\n  \"passage\",\n  \"passcode\",\n  \"passenger\",\n  \"passerby\",\n  \"passing\",\n  \"passion\",\n  \"passive\",\n  \"passivism\",\n  \"passover\",\n  \"passport\",\n  \"password\",\n  \"pasta\",\n  \"pasted\",\n  \"pastel\",\n  \"pastime\",\n  \"pastor\",\n  \"pastrami\",\n  \"pasture\",\n  \"pasty\",\n  \"patchwork\",\n  \"patchy\",\n  \"paternal\",\n  \"paternity\",\n  \"path\",\n  \"patience\",\n  \"patient\",\n  \"patio\",\n  \"patriarch\",\n  \"patriot\",\n  \"patrol\",\n  \"patronage\",\n  \"patronize\",\n  \"pauper\",\n  \"pavement\",\n  \"paver\",\n  \"pavestone\",\n  \"pavilion\",\n  \"paving\",\n  \"pawing\",\n  \"payable\",\n  \"payback\",\n  \"paycheck\",\n  \"payday\",\n  \"payee\",\n  \"payer\",\n  \"paying\",\n  \"payment\",\n  \"payphone\",\n  \"payroll\",\n  \"pebble\",\n  \"pebbly\",\n  \"pecan\",\n  \"pectin\",\n  \"peculiar\",\n  \"peddling\",\n  \"pediatric\",\n  \"pedicure\",\n  \"pedigree\",\n  \"pedometer\",\n  \"pegboard\",\n  \"pelican\",\n  \"pellet\",\n  \"pelt\",\n  \"pelvis\",\n  \"penalize\",\n  \"penalty\",\n  \"pencil\",\n  \"pendant\",\n  \"pending\",\n  \"penholder\",\n  \"penknife\",\n  \"pennant\",\n  \"penniless\",\n  \"penny\",\n  \"penpal\",\n  \"pension\",\n  \"pentagon\",\n  \"pentagram\",\n  \"pep\",\n  \"perceive\",\n  \"percent\",\n  \"perch\",\n  \"percolate\",\n  \"perennial\",\n  \"perfected\",\n  \"perfectly\",\n  \"perfume\",\n  \"periscope\",\n  \"perish\",\n  \"perjurer\",\n  \"perjury\",\n  \"perkiness\",\n  \"perky\",\n  \"perm\",\n  \"peroxide\",\n  \"perpetual\",\n  \"perplexed\",\n  \"persecute\",\n  \"persevere\",\n  \"persuaded\",\n  \"persuader\",\n  \"pesky\",\n  \"peso\",\n  \"pessimism\",\n  \"pessimist\",\n  \"pester\",\n  \"pesticide\",\n  \"petal\",\n  \"petite\",\n  \"petition\",\n  \"petri\",\n  \"petroleum\",\n  \"petted\",\n  \"petticoat\",\n  \"pettiness\",\n  \"petty\",\n  \"petunia\",\n  \"phantom\",\n  \"phobia\",\n  \"phoenix\",\n  \"phonebook\",\n  \"phoney\",\n  \"phonics\",\n  \"phoniness\",\n  \"phony\",\n  \"phosphate\",\n  \"photo\",\n  \"phrase\",\n  \"phrasing\",\n  \"placard\",\n  \"placate\",\n  \"placidly\",\n  \"plank\",\n  \"planner\",\n  \"plant\",\n  \"plasma\",\n  \"plaster\",\n  \"plastic\",\n  \"plated\",\n  \"platform\",\n  \"plating\",\n  \"platinum\",\n  \"platonic\",\n  \"platter\",\n  \"platypus\",\n  \"plausible\",\n  \"plausibly\",\n  \"playable\",\n  \"playback\",\n  \"player\",\n  \"playful\",\n  \"playgroup\",\n  \"playhouse\",\n  \"playing\",\n  \"playlist\",\n  \"playmaker\",\n  \"playmate\",\n  \"playoff\",\n  \"playpen\",\n  \"playroom\",\n  \"playset\",\n  \"plaything\",\n  \"playtime\",\n  \"plaza\",\n  \"pleading\",\n  \"pleat\",\n  \"pledge\",\n  \"plentiful\",\n  \"plenty\",\n  \"plethora\",\n  \"plexiglas\",\n  \"pliable\",\n  \"plod\",\n  \"plop\",\n  \"plot\",\n  \"plow\",\n  \"ploy\",\n  \"pluck\",\n  \"plug\",\n  \"plunder\",\n  \"plunging\",\n  \"plural\",\n  \"plus\",\n  \"plutonium\",\n  \"plywood\",\n  \"poach\",\n  \"pod\",\n  \"poem\",\n  \"poet\",\n  \"pogo\",\n  \"pointed\",\n  \"pointer\",\n  \"pointing\",\n  \"pointless\",\n  \"pointy\",\n  \"poise\",\n  \"poison\",\n  \"poker\",\n  \"poking\",\n  \"polar\",\n  \"police\",\n  \"policy\",\n  \"polio\",\n  \"polish\",\n  \"politely\",\n  \"polka\",\n  \"polo\",\n  \"polyester\",\n  \"polygon\",\n  \"polygraph\",\n  \"polymer\",\n  \"poncho\",\n  \"pond\",\n  \"pony\",\n  \"popcorn\",\n  \"pope\",\n  \"poplar\",\n  \"popper\",\n  \"poppy\",\n  \"popsicle\",\n  \"populace\",\n  \"popular\",\n  \"populate\",\n  \"porcupine\",\n  \"pork\",\n  \"porous\",\n  \"porridge\",\n  \"portable\",\n  \"portal\",\n  \"portfolio\",\n  \"porthole\",\n  \"portion\",\n  \"portly\",\n  \"portside\",\n  \"poser\",\n  \"posh\",\n  \"posing\",\n  \"possible\",\n  \"possibly\",\n  \"possum\",\n  \"postage\",\n  \"postal\",\n  \"postbox\",\n  \"postcard\",\n  \"posted\",\n  \"poster\",\n  \"posting\",\n  \"postnasal\",\n  \"posture\",\n  \"postwar\",\n  \"pouch\",\n  \"pounce\",\n  \"pouncing\",\n  \"pound\",\n  \"pouring\",\n  \"pout\",\n  \"powdered\",\n  \"powdering\",\n  \"powdery\",\n  \"power\",\n  \"powwow\",\n  \"pox\",\n  \"praising\",\n  \"prance\",\n  \"prancing\",\n  \"pranker\",\n  \"prankish\",\n  \"prankster\",\n  \"prayer\",\n  \"praying\",\n  \"preacher\",\n  \"preaching\",\n  \"preachy\",\n  \"preamble\",\n  \"precinct\",\n  \"precise\",\n  \"precision\",\n  \"precook\",\n  \"precut\",\n  \"predator\",\n  \"predefine\",\n  \"predict\",\n  \"preface\",\n  \"prefix\",\n  \"preflight\",\n  \"preformed\",\n  \"pregame\",\n  \"pregnancy\",\n  \"pregnant\",\n  \"preheated\",\n  \"prelaunch\",\n  \"prelaw\",\n  \"prelude\",\n  \"premiere\",\n  \"premises\",\n  \"premium\",\n  \"prenatal\",\n  \"preoccupy\",\n  \"preorder\",\n  \"prepaid\",\n  \"prepay\",\n  \"preplan\",\n  \"preppy\",\n  \"preschool\",\n  \"prescribe\",\n  \"preseason\",\n  \"preset\",\n  \"preshow\",\n  \"president\",\n  \"presoak\",\n  \"press\",\n  \"presume\",\n  \"presuming\",\n  \"preteen\",\n  \"pretended\",\n  \"pretender\",\n  \"pretense\",\n  \"pretext\",\n  \"pretty\",\n  \"pretzel\",\n  \"prevail\",\n  \"prevalent\",\n  \"prevent\",\n  \"preview\",\n  \"previous\",\n  \"prewar\",\n  \"prewashed\",\n  \"prideful\",\n  \"pried\",\n  \"primal\",\n  \"primarily\",\n  \"primary\",\n  \"primate\",\n  \"primer\",\n  \"primp\",\n  \"princess\",\n  \"print\",\n  \"prior\",\n  \"prism\",\n  \"prison\",\n  \"prissy\",\n  \"pristine\",\n  \"privacy\",\n  \"private\",\n  \"privatize\",\n  \"prize\",\n  \"proactive\",\n  \"probable\",\n  \"probably\",\n  \"probation\",\n  \"probe\",\n  \"probing\",\n  \"probiotic\",\n  \"problem\",\n  \"procedure\",\n  \"process\",\n  \"proclaim\",\n  \"procreate\",\n  \"procurer\",\n  \"prodigal\",\n  \"prodigy\",\n  \"produce\",\n  \"product\",\n  \"profane\",\n  \"profanity\",\n  \"professed\",\n  \"professor\",\n  \"profile\",\n  \"profound\",\n  \"profusely\",\n  \"progeny\",\n  \"prognosis\",\n  \"program\",\n  \"progress\",\n  \"projector\",\n  \"prologue\",\n  \"prolonged\",\n  \"promenade\",\n  \"prominent\",\n  \"promoter\",\n  \"promotion\",\n  \"prompter\",\n  \"promptly\",\n  \"prone\",\n  \"prong\",\n  \"pronounce\",\n  \"pronto\",\n  \"proofing\",\n  \"proofread\",\n  \"proofs\",\n  \"propeller\",\n  \"properly\",\n  \"property\",\n  \"proponent\",\n  \"proposal\",\n  \"propose\",\n  \"props\",\n  \"prorate\",\n  \"protector\",\n  \"protegee\",\n  \"proton\",\n  \"prototype\",\n  \"protozoan\",\n  \"protract\",\n  \"protrude\",\n  \"proud\",\n  \"provable\",\n  \"proved\",\n  \"proven\",\n  \"provided\",\n  \"provider\",\n  \"providing\",\n  \"province\",\n  \"proving\",\n  \"provoke\",\n  \"provoking\",\n  \"provolone\",\n  \"prowess\",\n  \"prowler\",\n  \"prowling\",\n  \"proximity\",\n  \"proxy\",\n  \"prozac\",\n  \"prude\",\n  \"prudishly\",\n  \"prune\",\n  \"pruning\",\n  \"pry\",\n  \"psychic\",\n  \"public\",\n  \"publisher\",\n  \"pucker\",\n  \"pueblo\",\n  \"pug\",\n  \"pull\",\n  \"pulmonary\",\n  \"pulp\",\n  \"pulsate\",\n  \"pulse\",\n  \"pulverize\",\n  \"puma\",\n  \"pumice\",\n  \"pummel\",\n  \"punch\",\n  \"punctual\",\n  \"punctuate\",\n  \"punctured\",\n  \"pungent\",\n  \"punisher\",\n  \"punk\",\n  \"pupil\",\n  \"puppet\",\n  \"puppy\",\n  \"purchase\",\n  \"pureblood\",\n  \"purebred\",\n  \"purely\",\n  \"pureness\",\n  \"purgatory\",\n  \"purge\",\n  \"purging\",\n  \"purifier\",\n  \"purify\",\n  \"purist\",\n  \"puritan\",\n  \"purity\",\n  \"purple\",\n  \"purplish\",\n  \"purposely\",\n  \"purr\",\n  \"purse\",\n  \"pursuable\",\n  \"pursuant\",\n  \"pursuit\",\n  \"purveyor\",\n  \"pushcart\",\n  \"pushchair\",\n  \"pusher\",\n  \"pushiness\",\n  \"pushing\",\n  \"pushover\",\n  \"pushpin\",\n  \"pushup\",\n  \"pushy\",\n  \"putdown\",\n  \"putt\",\n  \"puzzle\",\n  \"puzzling\",\n  \"pyramid\",\n  \"pyromania\",\n  \"python\",\n  \"quack\",\n  \"quadrant\",\n  \"quail\",\n  \"quaintly\",\n  \"quake\",\n  \"quaking\",\n  \"qualified\",\n  \"qualifier\",\n  \"qualify\",\n  \"quality\",\n  \"qualm\",\n  \"quantum\",\n  \"quarrel\",\n  \"quarry\",\n  \"quartered\",\n  \"quarterly\",\n  \"quarters\",\n  \"quartet\",\n  \"quench\",\n  \"query\",\n  \"quicken\",\n  \"quickly\",\n  \"quickness\",\n  \"quicksand\",\n  \"quickstep\",\n  \"quiet\",\n  \"quill\",\n  \"quilt\",\n  \"quintet\",\n  \"quintuple\",\n  \"quirk\",\n  \"quit\",\n  \"quiver\",\n  \"quizzical\",\n  \"quotable\",\n  \"quotation\",\n  \"quote\",\n  \"rabid\",\n  \"race\",\n  \"racing\",\n  \"racism\",\n  \"rack\",\n  \"racoon\",\n  \"radar\",\n  \"radial\",\n  \"radiance\",\n  \"radiantly\",\n  \"radiated\",\n  \"radiation\",\n  \"radiator\",\n  \"radio\",\n  \"radish\",\n  \"raffle\",\n  \"raft\",\n  \"rage\",\n  \"ragged\",\n  \"raging\",\n  \"ragweed\",\n  \"raider\",\n  \"railcar\",\n  \"railing\",\n  \"railroad\",\n  \"railway\",\n  \"raisin\",\n  \"rake\",\n  \"raking\",\n  \"rally\",\n  \"ramble\",\n  \"rambling\",\n  \"ramp\",\n  \"ramrod\",\n  \"ranch\",\n  \"rancidity\",\n  \"random\",\n  \"ranged\",\n  \"ranger\",\n  \"ranging\",\n  \"ranked\",\n  \"ranking\",\n  \"ransack\",\n  \"ranting\",\n  \"rants\",\n  \"rare\",\n  \"rarity\",\n  \"rascal\",\n  \"rash\",\n  \"rasping\",\n  \"ravage\",\n  \"raven\",\n  \"ravine\",\n  \"raving\",\n  \"ravioli\",\n  \"ravishing\",\n  \"reabsorb\",\n  \"reach\",\n  \"reacquire\",\n  \"reaction\",\n  \"reactive\",\n  \"reactor\",\n  \"reaffirm\",\n  \"ream\",\n  \"reanalyze\",\n  \"reappear\",\n  \"reapply\",\n  \"reappoint\",\n  \"reapprove\",\n  \"rearrange\",\n  \"rearview\",\n  \"reason\",\n  \"reassign\",\n  \"reassure\",\n  \"reattach\",\n  \"reawake\",\n  \"rebalance\",\n  \"rebate\",\n  \"rebel\",\n  \"rebirth\",\n  \"reboot\",\n  \"reborn\",\n  \"rebound\",\n  \"rebuff\",\n  \"rebuild\",\n  \"rebuilt\",\n  \"reburial\",\n  \"rebuttal\",\n  \"recall\",\n  \"recant\",\n  \"recapture\",\n  \"recast\",\n  \"recede\",\n  \"recent\",\n  \"recess\",\n  \"recharger\",\n  \"recipient\",\n  \"recital\",\n  \"recite\",\n  \"reckless\",\n  \"reclaim\",\n  \"recliner\",\n  \"reclining\",\n  \"recluse\",\n  \"reclusive\",\n  \"recognize\",\n  \"recoil\",\n  \"recollect\",\n  \"recolor\",\n  \"reconcile\",\n  \"reconfirm\",\n  \"reconvene\",\n  \"recopy\",\n  \"record\",\n  \"recount\",\n  \"recoup\",\n  \"recovery\",\n  \"recreate\",\n  \"rectal\",\n  \"rectangle\",\n  \"rectified\",\n  \"rectify\",\n  \"recycled\",\n  \"recycler\",\n  \"recycling\",\n  \"reemerge\",\n  \"reenact\",\n  \"reenter\",\n  \"reentry\",\n  \"reexamine\",\n  \"referable\",\n  \"referee\",\n  \"reference\",\n  \"refill\",\n  \"refinance\",\n  \"refined\",\n  \"refinery\",\n  \"refining\",\n  \"refinish\",\n  \"reflected\",\n  \"reflector\",\n  \"reflex\",\n  \"reflux\",\n  \"refocus\",\n  \"refold\",\n  \"reforest\",\n  \"reformat\",\n  \"reformed\",\n  \"reformer\",\n  \"reformist\",\n  \"refract\",\n  \"refrain\",\n  \"refreeze\",\n  \"refresh\",\n  \"refried\",\n  \"refueling\",\n  \"refund\",\n  \"refurbish\",\n  \"refurnish\",\n  \"refusal\",\n  \"refuse\",\n  \"refusing\",\n  \"refutable\",\n  \"refute\",\n  \"regain\",\n  \"regalia\",\n  \"regally\",\n  \"reggae\",\n  \"regime\",\n  \"region\",\n  \"register\",\n  \"registrar\",\n  \"registry\",\n  \"regress\",\n  \"regretful\",\n  \"regroup\",\n  \"regular\",\n  \"regulate\",\n  \"regulator\",\n  \"rehab\",\n  \"reheat\",\n  \"rehire\",\n  \"rehydrate\",\n  \"reimburse\",\n  \"reissue\",\n  \"reiterate\",\n  \"rejoice\",\n  \"rejoicing\",\n  \"rejoin\",\n  \"rekindle\",\n  \"relapse\",\n  \"relapsing\",\n  \"relatable\",\n  \"related\",\n  \"relation\",\n  \"relative\",\n  \"relax\",\n  \"relay\",\n  \"relearn\",\n  \"release\",\n  \"relenting\",\n  \"reliable\",\n  \"reliably\",\n  \"reliance\",\n  \"reliant\",\n  \"relic\",\n  \"relieve\",\n  \"relieving\",\n  \"relight\",\n  \"relish\",\n  \"relive\",\n  \"reload\",\n  \"relocate\",\n  \"relock\",\n  \"reluctant\",\n  \"rely\",\n  \"remake\",\n  \"remark\",\n  \"remarry\",\n  \"rematch\",\n  \"remedial\",\n  \"remedy\",\n  \"remember\",\n  \"reminder\",\n  \"remindful\",\n  \"remission\",\n  \"remix\",\n  \"remnant\",\n  \"remodeler\",\n  \"remold\",\n  \"remorse\",\n  \"remote\",\n  \"removable\",\n  \"removal\",\n  \"removed\",\n  \"remover\",\n  \"removing\",\n  \"rename\",\n  \"renderer\",\n  \"rendering\",\n  \"rendition\",\n  \"renegade\",\n  \"renewable\",\n  \"renewably\",\n  \"renewal\",\n  \"renewed\",\n  \"renounce\",\n  \"renovate\",\n  \"renovator\",\n  \"rentable\",\n  \"rental\",\n  \"rented\",\n  \"renter\",\n  \"reoccupy\",\n  \"reoccur\",\n  \"reopen\",\n  \"reorder\",\n  \"repackage\",\n  \"repacking\",\n  \"repaint\",\n  \"repair\",\n  \"repave\",\n  \"repaying\",\n  \"repayment\",\n  \"repeal\",\n  \"repeated\",\n  \"repeater\",\n  \"repent\",\n  \"rephrase\",\n  \"replace\",\n  \"replay\",\n  \"replica\",\n  \"reply\",\n  \"reporter\",\n  \"repose\",\n  \"repossess\",\n  \"repost\",\n  \"repressed\",\n  \"reprimand\",\n  \"reprint\",\n  \"reprise\",\n  \"reproach\",\n  \"reprocess\",\n  \"reproduce\",\n  \"reprogram\",\n  \"reps\",\n  \"reptile\",\n  \"reptilian\",\n  \"repugnant\",\n  \"repulsion\",\n  \"repulsive\",\n  \"repurpose\",\n  \"reputable\",\n  \"reputably\",\n  \"request\",\n  \"require\",\n  \"requisite\",\n  \"reroute\",\n  \"rerun\",\n  \"resale\",\n  \"resample\",\n  \"rescuer\",\n  \"reseal\",\n  \"research\",\n  \"reselect\",\n  \"reseller\",\n  \"resemble\",\n  \"resend\",\n  \"resent\",\n  \"reset\",\n  \"reshape\",\n  \"reshoot\",\n  \"reshuffle\",\n  \"residence\",\n  \"residency\",\n  \"resident\",\n  \"residual\",\n  \"residue\",\n  \"resigned\",\n  \"resilient\",\n  \"resistant\",\n  \"resisting\",\n  \"resize\",\n  \"resolute\",\n  \"resolved\",\n  \"resonant\",\n  \"resonate\",\n  \"resort\",\n  \"resource\",\n  \"respect\",\n  \"resubmit\",\n  \"result\",\n  \"resume\",\n  \"resupply\",\n  \"resurface\",\n  \"resurrect\",\n  \"retail\",\n  \"retainer\",\n  \"retaining\",\n  \"retake\",\n  \"retaliate\",\n  \"retention\",\n  \"rethink\",\n  \"retinal\",\n  \"retired\",\n  \"retiree\",\n  \"retiring\",\n  \"retold\",\n  \"retool\",\n  \"retorted\",\n  \"retouch\",\n  \"retrace\",\n  \"retract\",\n  \"retrain\",\n  \"retread\",\n  \"retreat\",\n  \"retrial\",\n  \"retrieval\",\n  \"retriever\",\n  \"retry\",\n  \"return\",\n  \"retying\",\n  \"retype\",\n  \"reunion\",\n  \"reunite\",\n  \"reusable\",\n  \"reuse\",\n  \"reveal\",\n  \"reveler\",\n  \"revenge\",\n  \"revenue\",\n  \"reverb\",\n  \"revered\",\n  \"reverence\",\n  \"reverend\",\n  \"reversal\",\n  \"reverse\",\n  \"reversing\",\n  \"reversion\",\n  \"revert\",\n  \"revisable\",\n  \"revise\",\n  \"revision\",\n  \"revisit\",\n  \"revivable\",\n  \"revival\",\n  \"reviver\",\n  \"reviving\",\n  \"revocable\",\n  \"revoke\",\n  \"revolt\",\n  \"revolver\",\n  \"revolving\",\n  \"reward\",\n  \"rewash\",\n  \"rewind\",\n  \"rewire\",\n  \"reword\",\n  \"rework\",\n  \"rewrap\",\n  \"rewrite\",\n  \"rhyme\",\n  \"ribbon\",\n  \"ribcage\",\n  \"rice\",\n  \"riches\",\n  \"richly\",\n  \"richness\",\n  \"rickety\",\n  \"ricotta\",\n  \"riddance\",\n  \"ridden\",\n  \"ride\",\n  \"riding\",\n  \"rifling\",\n  \"rift\",\n  \"rigging\",\n  \"rigid\",\n  \"rigor\",\n  \"rimless\",\n  \"rimmed\",\n  \"rind\",\n  \"rink\",\n  \"rinse\",\n  \"rinsing\",\n  \"riot\",\n  \"ripcord\",\n  \"ripeness\",\n  \"ripening\",\n  \"ripping\",\n  \"ripple\",\n  \"rippling\",\n  \"riptide\",\n  \"rise\",\n  \"rising\",\n  \"risk\",\n  \"risotto\",\n  \"ritalin\",\n  \"ritzy\",\n  \"rival\",\n  \"riverbank\",\n  \"riverbed\",\n  \"riverboat\",\n  \"riverside\",\n  \"riveter\",\n  \"riveting\",\n  \"roamer\",\n  \"roaming\",\n  \"roast\",\n  \"robbing\",\n  \"robe\",\n  \"robin\",\n  \"robotics\",\n  \"robust\",\n  \"rockband\",\n  \"rocker\",\n  \"rocket\",\n  \"rockfish\",\n  \"rockiness\",\n  \"rocking\",\n  \"rocklike\",\n  \"rockslide\",\n  \"rockstar\",\n  \"rocky\",\n  \"rogue\",\n  \"roman\",\n  \"romp\",\n  \"rope\",\n  \"roping\",\n  \"roster\",\n  \"rosy\",\n  \"rotten\",\n  \"rotting\",\n  \"rotunda\",\n  \"roulette\",\n  \"rounding\",\n  \"roundish\",\n  \"roundness\",\n  \"roundup\",\n  \"roundworm\",\n  \"routine\",\n  \"routing\",\n  \"rover\",\n  \"roving\",\n  \"royal\",\n  \"rubbed\",\n  \"rubber\",\n  \"rubbing\",\n  \"rubble\",\n  \"rubdown\",\n  \"ruby\",\n  \"ruckus\",\n  \"rudder\",\n  \"rug\",\n  \"ruined\",\n  \"rule\",\n  \"rumble\",\n  \"rumbling\",\n  \"rummage\",\n  \"rumor\",\n  \"runaround\",\n  \"rundown\",\n  \"runner\",\n  \"running\",\n  \"runny\",\n  \"runt\",\n  \"runway\",\n  \"rupture\",\n  \"rural\",\n  \"ruse\",\n  \"rush\",\n  \"rust\",\n  \"rut\",\n  \"sabbath\",\n  \"sabotage\",\n  \"sacrament\",\n  \"sacred\",\n  \"sacrifice\",\n  \"sadden\",\n  \"saddlebag\",\n  \"saddled\",\n  \"saddling\",\n  \"sadly\",\n  \"sadness\",\n  \"safari\",\n  \"safeguard\",\n  \"safehouse\",\n  \"safely\",\n  \"safeness\",\n  \"saffron\",\n  \"saga\",\n  \"sage\",\n  \"sagging\",\n  \"saggy\",\n  \"said\",\n  \"saint\",\n  \"sake\",\n  \"salad\",\n  \"salami\",\n  \"salaried\",\n  \"salary\",\n  \"saline\",\n  \"salon\",\n  \"saloon\",\n  \"salsa\",\n  \"salt\",\n  \"salutary\",\n  \"salute\",\n  \"salvage\",\n  \"salvaging\",\n  \"salvation\",\n  \"same\",\n  \"sample\",\n  \"sampling\",\n  \"sanction\",\n  \"sanctity\",\n  \"sanctuary\",\n  \"sandal\",\n  \"sandbag\",\n  \"sandbank\",\n  \"sandbar\",\n  \"sandblast\",\n  \"sandbox\",\n  \"sanded\",\n  \"sandfish\",\n  \"sanding\",\n  \"sandlot\",\n  \"sandpaper\",\n  \"sandpit\",\n  \"sandstone\",\n  \"sandstorm\",\n  \"sandworm\",\n  \"sandy\",\n  \"sanitary\",\n  \"sanitizer\",\n  \"sank\",\n  \"santa\",\n  \"sapling\",\n  \"sappiness\",\n  \"sappy\",\n  \"sarcasm\",\n  \"sarcastic\",\n  \"sardine\",\n  \"sash\",\n  \"sasquatch\",\n  \"sassy\",\n  \"satchel\",\n  \"satiable\",\n  \"satin\",\n  \"satirical\",\n  \"satisfied\",\n  \"satisfy\",\n  \"saturate\",\n  \"saturday\",\n  \"sauciness\",\n  \"saucy\",\n  \"sauna\",\n  \"savage\",\n  \"savanna\",\n  \"saved\",\n  \"savings\",\n  \"savior\",\n  \"savor\",\n  \"saxophone\",\n  \"say\",\n  \"scabbed\",\n  \"scabby\",\n  \"scalded\",\n  \"scalding\",\n  \"scale\",\n  \"scaling\",\n  \"scallion\",\n  \"scallop\",\n  \"scalping\",\n  \"scam\",\n  \"scandal\",\n  \"scanner\",\n  \"scanning\",\n  \"scant\",\n  \"scapegoat\",\n  \"scarce\",\n  \"scarcity\",\n  \"scarecrow\",\n  \"scared\",\n  \"scarf\",\n  \"scarily\",\n  \"scariness\",\n  \"scarring\",\n  \"scary\",\n  \"scavenger\",\n  \"scenic\",\n  \"schedule\",\n  \"schematic\",\n  \"scheme\",\n  \"scheming\",\n  \"schilling\",\n  \"schnapps\",\n  \"scholar\",\n  \"science\",\n  \"scientist\",\n  \"scion\",\n  \"scoff\",\n  \"scolding\",\n  \"scone\",\n  \"scoop\",\n  \"scooter\",\n  \"scope\",\n  \"scorch\",\n  \"scorebook\",\n  \"scorecard\",\n  \"scored\",\n  \"scoreless\",\n  \"scorer\",\n  \"scoring\",\n  \"scorn\",\n  \"scorpion\",\n  \"scotch\",\n  \"scoundrel\",\n  \"scoured\",\n  \"scouring\",\n  \"scouting\",\n  \"scouts\",\n  \"scowling\",\n  \"scrabble\",\n  \"scraggly\",\n  \"scrambled\",\n  \"scrambler\",\n  \"scrap\",\n  \"scratch\",\n  \"scrawny\",\n  \"screen\",\n  \"scribble\",\n  \"scribe\",\n  \"scribing\",\n  \"scrimmage\",\n  \"script\",\n  \"scroll\",\n  \"scrooge\",\n  \"scrounger\",\n  \"scrubbed\",\n  \"scrubber\",\n  \"scruffy\",\n  \"scrunch\",\n  \"scrutiny\",\n  \"scuba\",\n  \"scuff\",\n  \"sculptor\",\n  \"sculpture\",\n  \"scurvy\",\n  \"scuttle\",\n  \"secluded\",\n  \"secluding\",\n  \"seclusion\",\n  \"second\",\n  \"secrecy\",\n  \"secret\",\n  \"sectional\",\n  \"sector\",\n  \"secular\",\n  \"securely\",\n  \"security\",\n  \"sedan\",\n  \"sedate\",\n  \"sedation\",\n  \"sedative\",\n  \"sediment\",\n  \"seduce\",\n  \"seducing\",\n  \"segment\",\n  \"seismic\",\n  \"seizing\",\n  \"seldom\",\n  \"selected\",\n  \"selection\",\n  \"selective\",\n  \"selector\",\n  \"self\",\n  \"seltzer\",\n  \"semantic\",\n  \"semester\",\n  \"semicolon\",\n  \"semifinal\",\n  \"seminar\",\n  \"semisoft\",\n  \"semisweet\",\n  \"senate\",\n  \"senator\",\n  \"send\",\n  \"senior\",\n  \"senorita\",\n  \"sensation\",\n  \"sensitive\",\n  \"sensitize\",\n  \"sensually\",\n  \"sensuous\",\n  \"sepia\",\n  \"september\",\n  \"septic\",\n  \"septum\",\n  \"sequel\",\n  \"sequence\",\n  \"sequester\",\n  \"series\",\n  \"sermon\",\n  \"serotonin\",\n  \"serpent\",\n  \"serrated\",\n  \"serve\",\n  \"service\",\n  \"serving\",\n  \"sesame\",\n  \"sessions\",\n  \"setback\",\n  \"setting\",\n  \"settle\",\n  \"settling\",\n  \"setup\",\n  \"sevenfold\",\n  \"seventeen\",\n  \"seventh\",\n  \"seventy\",\n  \"severity\",\n  \"shabby\",\n  \"shack\",\n  \"shaded\",\n  \"shadily\",\n  \"shadiness\",\n  \"shading\",\n  \"shadow\",\n  \"shady\",\n  \"shaft\",\n  \"shakable\",\n  \"shakily\",\n  \"shakiness\",\n  \"shaking\",\n  \"shaky\",\n  \"shale\",\n  \"shallot\",\n  \"shallow\",\n  \"shame\",\n  \"shampoo\",\n  \"shamrock\",\n  \"shank\",\n  \"shanty\",\n  \"shape\",\n  \"shaping\",\n  \"share\",\n  \"sharpener\",\n  \"sharper\",\n  \"sharpie\",\n  \"sharply\",\n  \"sharpness\",\n  \"shawl\",\n  \"sheath\",\n  \"shed\",\n  \"sheep\",\n  \"sheet\",\n  \"shelf\",\n  \"shell\",\n  \"shelter\",\n  \"shelve\",\n  \"shelving\",\n  \"sherry\",\n  \"shield\",\n  \"shifter\",\n  \"shifting\",\n  \"shiftless\",\n  \"shifty\",\n  \"shimmer\",\n  \"shimmy\",\n  \"shindig\",\n  \"shine\",\n  \"shingle\",\n  \"shininess\",\n  \"shining\",\n  \"shiny\",\n  \"ship\",\n  \"shirt\",\n  \"shivering\",\n  \"shock\",\n  \"shone\",\n  \"shoplift\",\n  \"shopper\",\n  \"shopping\",\n  \"shoptalk\",\n  \"shore\",\n  \"shortage\",\n  \"shortcake\",\n  \"shortcut\",\n  \"shorten\",\n  \"shorter\",\n  \"shorthand\",\n  \"shortlist\",\n  \"shortly\",\n  \"shortness\",\n  \"shorts\",\n  \"shortwave\",\n  \"shorty\",\n  \"shout\",\n  \"shove\",\n  \"showbiz\",\n  \"showcase\",\n  \"showdown\",\n  \"shower\",\n  \"showgirl\",\n  \"showing\",\n  \"showman\",\n  \"shown\",\n  \"showoff\",\n  \"showpiece\",\n  \"showplace\",\n  \"showroom\",\n  \"showy\",\n  \"shrank\",\n  \"shrapnel\",\n  \"shredder\",\n  \"shredding\",\n  \"shrewdly\",\n  \"shriek\",\n  \"shrill\",\n  \"shrimp\",\n  \"shrine\",\n  \"shrink\",\n  \"shrivel\",\n  \"shrouded\",\n  \"shrubbery\",\n  \"shrubs\",\n  \"shrug\",\n  \"shrunk\",\n  \"shucking\",\n  \"shudder\",\n  \"shuffle\",\n  \"shuffling\",\n  \"shun\",\n  \"shush\",\n  \"shut\",\n  \"shy\",\n  \"siamese\",\n  \"siberian\",\n  \"sibling\",\n  \"siding\",\n  \"sierra\",\n  \"siesta\",\n  \"sift\",\n  \"sighing\",\n  \"silenced\",\n  \"silencer\",\n  \"silent\",\n  \"silica\",\n  \"silicon\",\n  \"silk\",\n  \"silliness\",\n  \"silly\",\n  \"silo\",\n  \"silt\",\n  \"silver\",\n  \"similarly\",\n  \"simile\",\n  \"simmering\",\n  \"simple\",\n  \"simplify\",\n  \"simply\",\n  \"sincere\",\n  \"sincerity\",\n  \"singer\",\n  \"singing\",\n  \"single\",\n  \"singular\",\n  \"sinister\",\n  \"sinless\",\n  \"sinner\",\n  \"sinuous\",\n  \"sip\",\n  \"siren\",\n  \"sister\",\n  \"sitcom\",\n  \"sitter\",\n  \"sitting\",\n  \"situated\",\n  \"situation\",\n  \"sixfold\",\n  \"sixteen\",\n  \"sixth\",\n  \"sixties\",\n  \"sixtieth\",\n  \"sixtyfold\",\n  \"sizable\",\n  \"sizably\",\n  \"size\",\n  \"sizing\",\n  \"sizzle\",\n  \"sizzling\",\n  \"skater\",\n  \"skating\",\n  \"skedaddle\",\n  \"skeletal\",\n  \"skeleton\",\n  \"skeptic\",\n  \"sketch\",\n  \"skewed\",\n  \"skewer\",\n  \"skid\",\n  \"skied\",\n  \"skier\",\n  \"skies\",\n  \"skiing\",\n  \"skilled\",\n  \"skillet\",\n  \"skillful\",\n  \"skimmed\",\n  \"skimmer\",\n  \"skimming\",\n  \"skimpily\",\n  \"skincare\",\n  \"skinhead\",\n  \"skinless\",\n  \"skinning\",\n  \"skinny\",\n  \"skintight\",\n  \"skipper\",\n  \"skipping\",\n  \"skirmish\",\n  \"skirt\",\n  \"skittle\",\n  \"skydiver\",\n  \"skylight\",\n  \"skyline\",\n  \"skype\",\n  \"skyrocket\",\n  \"skyward\",\n  \"slab\",\n  \"slacked\",\n  \"slacker\",\n  \"slacking\",\n  \"slackness\",\n  \"slacks\",\n  \"slain\",\n  \"slam\",\n  \"slander\",\n  \"slang\",\n  \"slapping\",\n  \"slapstick\",\n  \"slashed\",\n  \"slashing\",\n  \"slate\",\n  \"slather\",\n  \"slaw\",\n  \"sled\",\n  \"sleek\",\n  \"sleep\",\n  \"sleet\",\n  \"sleeve\",\n  \"slept\",\n  \"sliceable\",\n  \"sliced\",\n  \"slicer\",\n  \"slicing\",\n  \"slick\",\n  \"slider\",\n  \"slideshow\",\n  \"sliding\",\n  \"slighted\",\n  \"slighting\",\n  \"slightly\",\n  \"slimness\",\n  \"slimy\",\n  \"slinging\",\n  \"slingshot\",\n  \"slinky\",\n  \"slip\",\n  \"slit\",\n  \"sliver\",\n  \"slobbery\",\n  \"slogan\",\n  \"sloped\",\n  \"sloping\",\n  \"sloppily\",\n  \"sloppy\",\n  \"slot\",\n  \"slouching\",\n  \"slouchy\",\n  \"sludge\",\n  \"slug\",\n  \"slum\",\n  \"slurp\",\n  \"slush\",\n  \"sly\",\n  \"small\",\n  \"smartly\",\n  \"smartness\",\n  \"smasher\",\n  \"smashing\",\n  \"smashup\",\n  \"smell\",\n  \"smelting\",\n  \"smile\",\n  \"smilingly\",\n  \"smirk\",\n  \"smite\",\n  \"smith\",\n  \"smitten\",\n  \"smock\",\n  \"smog\",\n  \"smoked\",\n  \"smokeless\",\n  \"smokiness\",\n  \"smoking\",\n  \"smoky\",\n  \"smolder\",\n  \"smooth\",\n  \"smother\",\n  \"smudge\",\n  \"smudgy\",\n  \"smuggler\",\n  \"smuggling\",\n  \"smugly\",\n  \"smugness\",\n  \"snack\",\n  \"snagged\",\n  \"snaking\",\n  \"snap\",\n  \"snare\",\n  \"snarl\",\n  \"snazzy\",\n  \"sneak\",\n  \"sneer\",\n  \"sneeze\",\n  \"sneezing\",\n  \"snide\",\n  \"sniff\",\n  \"snippet\",\n  \"snipping\",\n  \"snitch\",\n  \"snooper\",\n  \"snooze\",\n  \"snore\",\n  \"snoring\",\n  \"snorkel\",\n  \"snort\",\n  \"snout\",\n  \"snowbird\",\n  \"snowboard\",\n  \"snowbound\",\n  \"snowcap\",\n  \"snowdrift\",\n  \"snowdrop\",\n  \"snowfall\",\n  \"snowfield\",\n  \"snowflake\",\n  \"snowiness\",\n  \"snowless\",\n  \"snowman\",\n  \"snowplow\",\n  \"snowshoe\",\n  \"snowstorm\",\n  \"snowsuit\",\n  \"snowy\",\n  \"snub\",\n  \"snuff\",\n  \"snuggle\",\n  \"snugly\",\n  \"snugness\",\n  \"speak\",\n  \"spearfish\",\n  \"spearhead\",\n  \"spearman\",\n  \"spearmint\",\n  \"species\",\n  \"specimen\",\n  \"specked\",\n  \"speckled\",\n  \"specks\",\n  \"spectacle\",\n  \"spectator\",\n  \"spectrum\",\n  \"speculate\",\n  \"speech\",\n  \"speed\",\n  \"spellbind\",\n  \"speller\",\n  \"spelling\",\n  \"spendable\",\n  \"spender\",\n  \"spending\",\n  \"spent\",\n  \"spew\",\n  \"sphere\",\n  \"spherical\",\n  \"sphinx\",\n  \"spider\",\n  \"spied\",\n  \"spiffy\",\n  \"spill\",\n  \"spilt\",\n  \"spinach\",\n  \"spinal\",\n  \"spindle\",\n  \"spinner\",\n  \"spinning\",\n  \"spinout\",\n  \"spinster\",\n  \"spiny\",\n  \"spiral\",\n  \"spirited\",\n  \"spiritism\",\n  \"spirits\",\n  \"spiritual\",\n  \"splashed\",\n  \"splashing\",\n  \"splashy\",\n  \"splatter\",\n  \"spleen\",\n  \"splendid\",\n  \"splendor\",\n  \"splice\",\n  \"splicing\",\n  \"splinter\",\n  \"splotchy\",\n  \"splurge\",\n  \"spoilage\",\n  \"spoiled\",\n  \"spoiler\",\n  \"spoiling\",\n  \"spoils\",\n  \"spoken\",\n  \"spokesman\",\n  \"sponge\",\n  \"spongy\",\n  \"sponsor\",\n  \"spoof\",\n  \"spookily\",\n  \"spooky\",\n  \"spool\",\n  \"spoon\",\n  \"spore\",\n  \"sporting\",\n  \"sports\",\n  \"sporty\",\n  \"spotless\",\n  \"spotlight\",\n  \"spotted\",\n  \"spotter\",\n  \"spotting\",\n  \"spotty\",\n  \"spousal\",\n  \"spouse\",\n  \"spout\",\n  \"sprain\",\n  \"sprang\",\n  \"sprawl\",\n  \"spray\",\n  \"spree\",\n  \"sprig\",\n  \"spring\",\n  \"sprinkled\",\n  \"sprinkler\",\n  \"sprint\",\n  \"sprite\",\n  \"sprout\",\n  \"spruce\",\n  \"sprung\",\n  \"spry\",\n  \"spud\",\n  \"spur\",\n  \"sputter\",\n  \"spyglass\",\n  \"squabble\",\n  \"squad\",\n  \"squall\",\n  \"squander\",\n  \"squash\",\n  \"squatted\",\n  \"squatter\",\n  \"squatting\",\n  \"squeak\",\n  \"squealer\",\n  \"squealing\",\n  \"squeamish\",\n  \"squeegee\",\n  \"squeeze\",\n  \"squeezing\",\n  \"squid\",\n  \"squiggle\",\n  \"squiggly\",\n  \"squint\",\n  \"squire\",\n  \"squirt\",\n  \"squishier\",\n  \"squishy\",\n  \"stability\",\n  \"stabilize\",\n  \"stable\",\n  \"stack\",\n  \"stadium\",\n  \"staff\",\n  \"stage\",\n  \"staging\",\n  \"stagnant\",\n  \"stagnate\",\n  \"stainable\",\n  \"stained\",\n  \"staining\",\n  \"stainless\",\n  \"stalemate\",\n  \"staleness\",\n  \"stalling\",\n  \"stallion\",\n  \"stamina\",\n  \"stammer\",\n  \"stamp\",\n  \"stand\",\n  \"stank\",\n  \"staple\",\n  \"stapling\",\n  \"starboard\",\n  \"starch\",\n  \"stardom\",\n  \"stardust\",\n  \"starfish\",\n  \"stargazer\",\n  \"staring\",\n  \"stark\",\n  \"starless\",\n  \"starlet\",\n  \"starlight\",\n  \"starlit\",\n  \"starring\",\n  \"starry\",\n  \"starship\",\n  \"starter\",\n  \"starting\",\n  \"startle\",\n  \"startling\",\n  \"startup\",\n  \"starved\",\n  \"starving\",\n  \"stash\",\n  \"state\",\n  \"static\",\n  \"statistic\",\n  \"statue\",\n  \"stature\",\n  \"status\",\n  \"statute\",\n  \"statutory\",\n  \"staunch\",\n  \"stays\",\n  \"steadfast\",\n  \"steadier\",\n  \"steadily\",\n  \"steadying\",\n  \"steam\",\n  \"steed\",\n  \"steep\",\n  \"steerable\",\n  \"steering\",\n  \"steersman\",\n  \"stegosaur\",\n  \"stellar\",\n  \"stem\",\n  \"stench\",\n  \"stencil\",\n  \"step\",\n  \"stereo\",\n  \"sterile\",\n  \"sterility\",\n  \"sterilize\",\n  \"sterling\",\n  \"sternness\",\n  \"sternum\",\n  \"stew\",\n  \"stick\",\n  \"stiffen\",\n  \"stiffly\",\n  \"stiffness\",\n  \"stifle\",\n  \"stifling\",\n  \"stillness\",\n  \"stilt\",\n  \"stimulant\",\n  \"stimulate\",\n  \"stimuli\",\n  \"stimulus\",\n  \"stinger\",\n  \"stingily\",\n  \"stinging\",\n  \"stingray\",\n  \"stingy\",\n  \"stinking\",\n  \"stinky\",\n  \"stipend\",\n  \"stipulate\",\n  \"stir\",\n  \"stitch\",\n  \"stock\",\n  \"stoic\",\n  \"stoke\",\n  \"stole\",\n  \"stomp\",\n  \"stonewall\",\n  \"stoneware\",\n  \"stonework\",\n  \"stoning\",\n  \"stony\",\n  \"stood\",\n  \"stooge\",\n  \"stool\",\n  \"stoop\",\n  \"stoplight\",\n  \"stoppable\",\n  \"stoppage\",\n  \"stopped\",\n  \"stopper\",\n  \"stopping\",\n  \"stopwatch\",\n  \"storable\",\n  \"storage\",\n  \"storeroom\",\n  \"storewide\",\n  \"storm\",\n  \"stout\",\n  \"stove\",\n  \"stowaway\",\n  \"stowing\",\n  \"straddle\",\n  \"straggler\",\n  \"strained\",\n  \"strainer\",\n  \"straining\",\n  \"strangely\",\n  \"stranger\",\n  \"strangle\",\n  \"strategic\",\n  \"strategy\",\n  \"stratus\",\n  \"straw\",\n  \"stray\",\n  \"streak\",\n  \"stream\",\n  \"street\",\n  \"strength\",\n  \"strenuous\",\n  \"strep\",\n  \"stress\",\n  \"stretch\",\n  \"strewn\",\n  \"stricken\",\n  \"strict\",\n  \"stride\",\n  \"strife\",\n  \"strike\",\n  \"striking\",\n  \"strive\",\n  \"striving\",\n  \"strobe\",\n  \"strode\",\n  \"stroller\",\n  \"strongbox\",\n  \"strongly\",\n  \"strongman\",\n  \"struck\",\n  \"structure\",\n  \"strudel\",\n  \"struggle\",\n  \"strum\",\n  \"strung\",\n  \"strut\",\n  \"stubbed\",\n  \"stubble\",\n  \"stubbly\",\n  \"stubborn\",\n  \"stucco\",\n  \"stuck\",\n  \"student\",\n  \"studied\",\n  \"studio\",\n  \"study\",\n  \"stuffed\",\n  \"stuffing\",\n  \"stuffy\",\n  \"stumble\",\n  \"stumbling\",\n  \"stump\",\n  \"stung\",\n  \"stunned\",\n  \"stunner\",\n  \"stunning\",\n  \"stunt\",\n  \"stupor\",\n  \"sturdily\",\n  \"sturdy\",\n  \"styling\",\n  \"stylishly\",\n  \"stylist\",\n  \"stylized\",\n  \"stylus\",\n  \"suave\",\n  \"subarctic\",\n  \"subatomic\",\n  \"subdivide\",\n  \"subdued\",\n  \"subduing\",\n  \"subfloor\",\n  \"subgroup\",\n  \"subheader\",\n  \"subject\",\n  \"sublease\",\n  \"sublet\",\n  \"sublevel\",\n  \"sublime\",\n  \"submarine\",\n  \"submerge\",\n  \"submersed\",\n  \"submitter\",\n  \"subpanel\",\n  \"subpar\",\n  \"subplot\",\n  \"subprime\",\n  \"subscribe\",\n  \"subscript\",\n  \"subsector\",\n  \"subside\",\n  \"subsiding\",\n  \"subsidize\",\n  \"subsidy\",\n  \"subsoil\",\n  \"subsonic\",\n  \"substance\",\n  \"subsystem\",\n  \"subtext\",\n  \"subtitle\",\n  \"subtly\",\n  \"subtotal\",\n  \"subtract\",\n  \"subtype\",\n  \"suburb\",\n  \"subway\",\n  \"subwoofer\",\n  \"subzero\",\n  \"succulent\",\n  \"such\",\n  \"suction\",\n  \"sudden\",\n  \"sudoku\",\n  \"suds\",\n  \"sufferer\",\n  \"suffering\",\n  \"suffice\",\n  \"suffix\",\n  \"suffocate\",\n  \"suffrage\",\n  \"sugar\",\n  \"suggest\",\n  \"suing\",\n  \"suitable\",\n  \"suitably\",\n  \"suitcase\",\n  \"suitor\",\n  \"sulfate\",\n  \"sulfide\",\n  \"sulfite\",\n  \"sulfur\",\n  \"sulk\",\n  \"sullen\",\n  \"sulphate\",\n  \"sulphuric\",\n  \"sultry\",\n  \"superbowl\",\n  \"superglue\",\n  \"superhero\",\n  \"superior\",\n  \"superjet\",\n  \"superman\",\n  \"supermom\",\n  \"supernova\",\n  \"supervise\",\n  \"supper\",\n  \"supplier\",\n  \"supply\",\n  \"support\",\n  \"supremacy\",\n  \"supreme\",\n  \"surcharge\",\n  \"surely\",\n  \"sureness\",\n  \"surface\",\n  \"surfacing\",\n  \"surfboard\",\n  \"surfer\",\n  \"surgery\",\n  \"surgical\",\n  \"surging\",\n  \"surname\",\n  \"surpass\",\n  \"surplus\",\n  \"surprise\",\n  \"surreal\",\n  \"surrender\",\n  \"surrogate\",\n  \"surround\",\n  \"survey\",\n  \"survival\",\n  \"survive\",\n  \"surviving\",\n  \"survivor\",\n  \"sushi\",\n  \"suspect\",\n  \"suspend\",\n  \"suspense\",\n  \"sustained\",\n  \"sustainer\",\n  \"swab\",\n  \"swaddling\",\n  \"swagger\",\n  \"swampland\",\n  \"swan\",\n  \"swapping\",\n  \"swarm\",\n  \"sway\",\n  \"swear\",\n  \"sweat\",\n  \"sweep\",\n  \"swell\",\n  \"swept\",\n  \"swerve\",\n  \"swifter\",\n  \"swiftly\",\n  \"swiftness\",\n  \"swimmable\",\n  \"swimmer\",\n  \"swimming\",\n  \"swimsuit\",\n  \"swimwear\",\n  \"swinger\",\n  \"swinging\",\n  \"swipe\",\n  \"swirl\",\n  \"switch\",\n  \"swivel\",\n  \"swizzle\",\n  \"swooned\",\n  \"swoop\",\n  \"swoosh\",\n  \"swore\",\n  \"sworn\",\n  \"swung\",\n  \"sycamore\",\n  \"sympathy\",\n  \"symphonic\",\n  \"symphony\",\n  \"symptom\",\n  \"synapse\",\n  \"syndrome\",\n  \"synergy\",\n  \"synopses\",\n  \"synopsis\",\n  \"synthesis\",\n  \"synthetic\",\n  \"syrup\",\n  \"system\",\n  \"t-shirt\",\n  \"tabasco\",\n  \"tabby\",\n  \"tableful\",\n  \"tables\",\n  \"tablet\",\n  \"tableware\",\n  \"tabloid\",\n  \"tackiness\",\n  \"tacking\",\n  \"tackle\",\n  \"tackling\",\n  \"tacky\",\n  \"taco\",\n  \"tactful\",\n  \"tactical\",\n  \"tactics\",\n  \"tactile\",\n  \"tactless\",\n  \"tadpole\",\n  \"taekwondo\",\n  \"tag\",\n  \"tainted\",\n  \"take\",\n  \"taking\",\n  \"talcum\",\n  \"talisman\",\n  \"tall\",\n  \"talon\",\n  \"tamale\",\n  \"tameness\",\n  \"tamer\",\n  \"tamper\",\n  \"tank\",\n  \"tanned\",\n  \"tannery\",\n  \"tanning\",\n  \"tantrum\",\n  \"tapeless\",\n  \"tapered\",\n  \"tapering\",\n  \"tapestry\",\n  \"tapioca\",\n  \"tapping\",\n  \"taps\",\n  \"tarantula\",\n  \"target\",\n  \"tarmac\",\n  \"tarnish\",\n  \"tarot\",\n  \"tartar\",\n  \"tartly\",\n  \"tartness\",\n  \"task\",\n  \"tassel\",\n  \"taste\",\n  \"tastiness\",\n  \"tasting\",\n  \"tasty\",\n  \"tattered\",\n  \"tattle\",\n  \"tattling\",\n  \"tattoo\",\n  \"taunt\",\n  \"tavern\",\n  \"thank\",\n  \"that\",\n  \"thaw\",\n  \"theater\",\n  \"theatrics\",\n  \"thee\",\n  \"theft\",\n  \"theme\",\n  \"theology\",\n  \"theorize\",\n  \"thermal\",\n  \"thermos\",\n  \"thesaurus\",\n  \"these\",\n  \"thesis\",\n  \"thespian\",\n  \"thicken\",\n  \"thicket\",\n  \"thickness\",\n  \"thieving\",\n  \"thievish\",\n  \"thigh\",\n  \"thimble\",\n  \"thing\",\n  \"think\",\n  \"thinly\",\n  \"thinner\",\n  \"thinness\",\n  \"thinning\",\n  \"thirstily\",\n  \"thirsting\",\n  \"thirsty\",\n  \"thirteen\",\n  \"thirty\",\n  \"thong\",\n  \"thorn\",\n  \"those\",\n  \"thousand\",\n  \"thrash\",\n  \"thread\",\n  \"threaten\",\n  \"threefold\",\n  \"thrift\",\n  \"thrill\",\n  \"thrive\",\n  \"thriving\",\n  \"throat\",\n  \"throbbing\",\n  \"throng\",\n  \"throttle\",\n  \"throwaway\",\n  \"throwback\",\n  \"thrower\",\n  \"throwing\",\n  \"thud\",\n  \"thumb\",\n  \"thumping\",\n  \"thursday\",\n  \"thus\",\n  \"thwarting\",\n  \"thyself\",\n  \"tiara\",\n  \"tibia\",\n  \"tidal\",\n  \"tidbit\",\n  \"tidiness\",\n  \"tidings\",\n  \"tidy\",\n  \"tiger\",\n  \"tighten\",\n  \"tightly\",\n  \"tightness\",\n  \"tightrope\",\n  \"tightwad\",\n  \"tigress\",\n  \"tile\",\n  \"tiling\",\n  \"till\",\n  \"tilt\",\n  \"timid\",\n  \"timing\",\n  \"timothy\",\n  \"tinderbox\",\n  \"tinfoil\",\n  \"tingle\",\n  \"tingling\",\n  \"tingly\",\n  \"tinker\",\n  \"tinkling\",\n  \"tinsel\",\n  \"tinsmith\",\n  \"tint\",\n  \"tinwork\",\n  \"tiny\",\n  \"tipoff\",\n  \"tipped\",\n  \"tipper\",\n  \"tipping\",\n  \"tiptoeing\",\n  \"tiptop\",\n  \"tiring\",\n  \"tissue\",\n  \"trace\",\n  \"tracing\",\n  \"track\",\n  \"traction\",\n  \"tractor\",\n  \"trade\",\n  \"trading\",\n  \"tradition\",\n  \"traffic\",\n  \"tragedy\",\n  \"trailing\",\n  \"trailside\",\n  \"train\",\n  \"traitor\",\n  \"trance\",\n  \"tranquil\",\n  \"transfer\",\n  \"transform\",\n  \"translate\",\n  \"transpire\",\n  \"transport\",\n  \"transpose\",\n  \"trapdoor\",\n  \"trapeze\",\n  \"trapezoid\",\n  \"trapped\",\n  \"trapper\",\n  \"trapping\",\n  \"traps\",\n  \"trash\",\n  \"travel\",\n  \"traverse\",\n  \"travesty\",\n  \"tray\",\n  \"treachery\",\n  \"treading\",\n  \"treadmill\",\n  \"treason\",\n  \"treat\",\n  \"treble\",\n  \"tree\",\n  \"trekker\",\n  \"tremble\",\n  \"trembling\",\n  \"tremor\",\n  \"trench\",\n  \"trend\",\n  \"trespass\",\n  \"triage\",\n  \"trial\",\n  \"triangle\",\n  \"tribesman\",\n  \"tribunal\",\n  \"tribune\",\n  \"tributary\",\n  \"tribute\",\n  \"triceps\",\n  \"trickery\",\n  \"trickily\",\n  \"tricking\",\n  \"trickle\",\n  \"trickster\",\n  \"tricky\",\n  \"tricolor\",\n  \"tricycle\",\n  \"trident\",\n  \"tried\",\n  \"trifle\",\n  \"trifocals\",\n  \"trillion\",\n  \"trilogy\",\n  \"trimester\",\n  \"trimmer\",\n  \"trimming\",\n  \"trimness\",\n  \"trinity\",\n  \"trio\",\n  \"tripod\",\n  \"tripping\",\n  \"triumph\",\n  \"trivial\",\n  \"trodden\",\n  \"trolling\",\n  \"trombone\",\n  \"trophy\",\n  \"tropical\",\n  \"tropics\",\n  \"trouble\",\n  \"troubling\",\n  \"trough\",\n  \"trousers\",\n  \"trout\",\n  \"trowel\",\n  \"truce\",\n  \"truck\",\n  \"truffle\",\n  \"trump\",\n  \"trunks\",\n  \"trustable\",\n  \"trustee\",\n  \"trustful\",\n  \"trusting\",\n  \"trustless\",\n  \"truth\",\n  \"try\",\n  \"tubby\",\n  \"tubeless\",\n  \"tubular\",\n  \"tucking\",\n  \"tuesday\",\n  \"tug\",\n  \"tuition\",\n  \"tulip\",\n  \"tumble\",\n  \"tumbling\",\n  \"tummy\",\n  \"turban\",\n  \"turbine\",\n  \"turbofan\",\n  \"turbojet\",\n  \"turbulent\",\n  \"turf\",\n  \"turkey\",\n  \"turmoil\",\n  \"turret\",\n  \"turtle\",\n  \"tusk\",\n  \"tutor\",\n  \"tutu\",\n  \"tux\",\n  \"tweak\",\n  \"tweed\",\n  \"tweet\",\n  \"tweezers\",\n  \"twelve\",\n  \"twentieth\",\n  \"twenty\",\n  \"twerp\",\n  \"twice\",\n  \"twiddle\",\n  \"twiddling\",\n  \"twig\",\n  \"twilight\",\n  \"twine\",\n  \"twins\",\n  \"twirl\",\n  \"twistable\",\n  \"twisted\",\n  \"twister\",\n  \"twisting\",\n  \"twisty\",\n  \"twitch\",\n  \"twitter\",\n  \"tycoon\",\n  \"tying\",\n  \"tyke\",\n  \"udder\",\n  \"ultimate\",\n  \"ultimatum\",\n  \"ultra\",\n  \"umbilical\",\n  \"umbrella\",\n  \"umpire\",\n  \"unabashed\",\n  \"unable\",\n  \"unadorned\",\n  \"unadvised\",\n  \"unafraid\",\n  \"unaired\",\n  \"unaligned\",\n  \"unaltered\",\n  \"unarmored\",\n  \"unashamed\",\n  \"unaudited\",\n  \"unawake\",\n  \"unaware\",\n  \"unbaked\",\n  \"unbalance\",\n  \"unbeaten\",\n  \"unbend\",\n  \"unbent\",\n  \"unbiased\",\n  \"unbitten\",\n  \"unblended\",\n  \"unblessed\",\n  \"unblock\",\n  \"unbolted\",\n  \"unbounded\",\n  \"unboxed\",\n  \"unbraided\",\n  \"unbridle\",\n  \"unbroken\",\n  \"unbuckled\",\n  \"unbundle\",\n  \"unburned\",\n  \"unbutton\",\n  \"uncanny\",\n  \"uncapped\",\n  \"uncaring\",\n  \"uncertain\",\n  \"unchain\",\n  \"unchanged\",\n  \"uncharted\",\n  \"uncheck\",\n  \"uncivil\",\n  \"unclad\",\n  \"unclaimed\",\n  \"unclamped\",\n  \"unclasp\",\n  \"uncle\",\n  \"unclip\",\n  \"uncloak\",\n  \"unclog\",\n  \"unclothed\",\n  \"uncoated\",\n  \"uncoiled\",\n  \"uncolored\",\n  \"uncombed\",\n  \"uncommon\",\n  \"uncooked\",\n  \"uncork\",\n  \"uncorrupt\",\n  \"uncounted\",\n  \"uncouple\",\n  \"uncouth\",\n  \"uncover\",\n  \"uncross\",\n  \"uncrown\",\n  \"uncrushed\",\n  \"uncured\",\n  \"uncurious\",\n  \"uncurled\",\n  \"uncut\",\n  \"undamaged\",\n  \"undated\",\n  \"undaunted\",\n  \"undead\",\n  \"undecided\",\n  \"undefined\",\n  \"underage\",\n  \"underarm\",\n  \"undercoat\",\n  \"undercook\",\n  \"undercut\",\n  \"underdog\",\n  \"underdone\",\n  \"underfed\",\n  \"underfeed\",\n  \"underfoot\",\n  \"undergo\",\n  \"undergrad\",\n  \"underhand\",\n  \"underline\",\n  \"underling\",\n  \"undermine\",\n  \"undermost\",\n  \"underpaid\",\n  \"underpass\",\n  \"underpay\",\n  \"underrate\",\n  \"undertake\",\n  \"undertone\",\n  \"undertook\",\n  \"undertow\",\n  \"underuse\",\n  \"underwear\",\n  \"underwent\",\n  \"underwire\",\n  \"undesired\",\n  \"undiluted\",\n  \"undivided\",\n  \"undocked\",\n  \"undoing\",\n  \"undone\",\n  \"undrafted\",\n  \"undress\",\n  \"undrilled\",\n  \"undusted\",\n  \"undying\",\n  \"unearned\",\n  \"unearth\",\n  \"unease\",\n  \"uneasily\",\n  \"uneasy\",\n  \"uneatable\",\n  \"uneaten\",\n  \"unedited\",\n  \"unelected\",\n  \"unending\",\n  \"unengaged\",\n  \"unenvied\",\n  \"unequal\",\n  \"unethical\",\n  \"uneven\",\n  \"unexpired\",\n  \"unexposed\",\n  \"unfailing\",\n  \"unfair\",\n  \"unfasten\",\n  \"unfazed\",\n  \"unfeeling\",\n  \"unfiled\",\n  \"unfilled\",\n  \"unfitted\",\n  \"unfitting\",\n  \"unfixable\",\n  \"unfixed\",\n  \"unflawed\",\n  \"unfocused\",\n  \"unfold\",\n  \"unfounded\",\n  \"unframed\",\n  \"unfreeze\",\n  \"unfrosted\",\n  \"unfrozen\",\n  \"unfunded\",\n  \"unglazed\",\n  \"ungloved\",\n  \"unglue\",\n  \"ungodly\",\n  \"ungraded\",\n  \"ungreased\",\n  \"unguarded\",\n  \"unguided\",\n  \"unhappily\",\n  \"unhappy\",\n  \"unharmed\",\n  \"unhealthy\",\n  \"unheard\",\n  \"unhearing\",\n  \"unheated\",\n  \"unhelpful\",\n  \"unhidden\",\n  \"unhinge\",\n  \"unhitched\",\n  \"unholy\",\n  \"unhook\",\n  \"unicorn\",\n  \"unicycle\",\n  \"unified\",\n  \"unifier\",\n  \"uniformed\",\n  \"uniformly\",\n  \"unify\",\n  \"unimpeded\",\n  \"uninjured\",\n  \"uninstall\",\n  \"uninsured\",\n  \"uninvited\",\n  \"union\",\n  \"uniquely\",\n  \"unisexual\",\n  \"unison\",\n  \"unissued\",\n  \"unit\",\n  \"universal\",\n  \"universe\",\n  \"unjustly\",\n  \"unkempt\",\n  \"unkind\",\n  \"unknotted\",\n  \"unknowing\",\n  \"unknown\",\n  \"unlaced\",\n  \"unlatch\",\n  \"unlawful\",\n  \"unleaded\",\n  \"unlearned\",\n  \"unleash\",\n  \"unless\",\n  \"unleveled\",\n  \"unlighted\",\n  \"unlikable\",\n  \"unlimited\",\n  \"unlined\",\n  \"unlinked\",\n  \"unlisted\",\n  \"unlit\",\n  \"unlivable\",\n  \"unloaded\",\n  \"unloader\",\n  \"unlocked\",\n  \"unlocking\",\n  \"unlovable\",\n  \"unloved\",\n  \"unlovely\",\n  \"unloving\",\n  \"unluckily\",\n  \"unlucky\",\n  \"unmade\",\n  \"unmanaged\",\n  \"unmanned\",\n  \"unmapped\",\n  \"unmarked\",\n  \"unmasked\",\n  \"unmasking\",\n  \"unmatched\",\n  \"unmindful\",\n  \"unmixable\",\n  \"unmixed\",\n  \"unmolded\",\n  \"unmoral\",\n  \"unmovable\",\n  \"unmoved\",\n  \"unmoving\",\n  \"unnamable\",\n  \"unnamed\",\n  \"unnatural\",\n  \"unneeded\",\n  \"unnerve\",\n  \"unnerving\",\n  \"unnoticed\",\n  \"unopened\",\n  \"unopposed\",\n  \"unpack\",\n  \"unpadded\",\n  \"unpaid\",\n  \"unpainted\",\n  \"unpaired\",\n  \"unpaved\",\n  \"unpeeled\",\n  \"unpicked\",\n  \"unpiloted\",\n  \"unpinned\",\n  \"unplanned\",\n  \"unplanted\",\n  \"unpleased\",\n  \"unpledged\",\n  \"unplowed\",\n  \"unplug\",\n  \"unpopular\",\n  \"unproven\",\n  \"unquote\",\n  \"unranked\",\n  \"unrated\",\n  \"unraveled\",\n  \"unreached\",\n  \"unread\",\n  \"unreal\",\n  \"unreeling\",\n  \"unrefined\",\n  \"unrelated\",\n  \"unrented\",\n  \"unrest\",\n  \"unretired\",\n  \"unrevised\",\n  \"unrigged\",\n  \"unripe\",\n  \"unrivaled\",\n  \"unroasted\",\n  \"unrobed\",\n  \"unroll\",\n  \"unruffled\",\n  \"unruly\",\n  \"unrushed\",\n  \"unsaddle\",\n  \"unsafe\",\n  \"unsaid\",\n  \"unsalted\",\n  \"unsaved\",\n  \"unsavory\",\n  \"unscathed\",\n  \"unscented\",\n  \"unscrew\",\n  \"unsealed\",\n  \"unseated\",\n  \"unsecured\",\n  \"unseeing\",\n  \"unseemly\",\n  \"unseen\",\n  \"unselect\",\n  \"unselfish\",\n  \"unsent\",\n  \"unsettled\",\n  \"unshackle\",\n  \"unshaken\",\n  \"unshaved\",\n  \"unshaven\",\n  \"unsheathe\",\n  \"unshipped\",\n  \"unsightly\",\n  \"unsigned\",\n  \"unskilled\",\n  \"unsliced\",\n  \"unsmooth\",\n  \"unsnap\",\n  \"unsocial\",\n  \"unsoiled\",\n  \"unsold\",\n  \"unsolved\",\n  \"unsorted\",\n  \"unspoiled\",\n  \"unspoken\",\n  \"unstable\",\n  \"unstaffed\",\n  \"unstamped\",\n  \"unsteady\",\n  \"unsterile\",\n  \"unstirred\",\n  \"unstitch\",\n  \"unstopped\",\n  \"unstuck\",\n  \"unstuffed\",\n  \"unstylish\",\n  \"unsubtle\",\n  \"unsubtly\",\n  \"unsuited\",\n  \"unsure\",\n  \"unsworn\",\n  \"untagged\",\n  \"untainted\",\n  \"untaken\",\n  \"untamed\",\n  \"untangled\",\n  \"untapped\",\n  \"untaxed\",\n  \"unthawed\",\n  \"unthread\",\n  \"untidy\",\n  \"untie\",\n  \"until\",\n  \"untimed\",\n  \"untimely\",\n  \"untitled\",\n  \"untoasted\",\n  \"untold\",\n  \"untouched\",\n  \"untracked\",\n  \"untrained\",\n  \"untreated\",\n  \"untried\",\n  \"untrimmed\",\n  \"untrue\",\n  \"untruth\",\n  \"unturned\",\n  \"untwist\",\n  \"untying\",\n  \"unusable\",\n  \"unused\",\n  \"unusual\",\n  \"unvalued\",\n  \"unvaried\",\n  \"unvarying\",\n  \"unveiled\",\n  \"unveiling\",\n  \"unvented\",\n  \"unviable\",\n  \"unvisited\",\n  \"unvocal\",\n  \"unwanted\",\n  \"unwarlike\",\n  \"unwary\",\n  \"unwashed\",\n  \"unwatched\",\n  \"unweave\",\n  \"unwed\",\n  \"unwelcome\",\n  \"unwell\",\n  \"unwieldy\",\n  \"unwilling\",\n  \"unwind\",\n  \"unwired\",\n  \"unwitting\",\n  \"unwomanly\",\n  \"unworldly\",\n  \"unworn\",\n  \"unworried\",\n  \"unworthy\",\n  \"unwound\",\n  \"unwoven\",\n  \"unwrapped\",\n  \"unwritten\",\n  \"unzip\",\n  \"upbeat\",\n  \"upchuck\",\n  \"upcoming\",\n  \"upcountry\",\n  \"update\",\n  \"upfront\",\n  \"upgrade\",\n  \"upheaval\",\n  \"upheld\",\n  \"uphill\",\n  \"uphold\",\n  \"uplifted\",\n  \"uplifting\",\n  \"upload\",\n  \"upon\",\n  \"upper\",\n  \"upright\",\n  \"uprising\",\n  \"upriver\",\n  \"uproar\",\n  \"uproot\",\n  \"upscale\",\n  \"upside\",\n  \"upstage\",\n  \"upstairs\",\n  \"upstart\",\n  \"upstate\",\n  \"upstream\",\n  \"upstroke\",\n  \"upswing\",\n  \"uptake\",\n  \"uptight\",\n  \"uptown\",\n  \"upturned\",\n  \"upward\",\n  \"upwind\",\n  \"uranium\",\n  \"urban\",\n  \"urchin\",\n  \"urethane\",\n  \"urgency\",\n  \"urgent\",\n  \"urging\",\n  \"urologist\",\n  \"urology\",\n  \"usable\",\n  \"usage\",\n  \"useable\",\n  \"used\",\n  \"uselessly\",\n  \"user\",\n  \"usher\",\n  \"usual\",\n  \"utensil\",\n  \"utility\",\n  \"utilize\",\n  \"utmost\",\n  \"utopia\",\n  \"utter\",\n  \"vacancy\",\n  \"vacant\",\n  \"vacate\",\n  \"vacation\",\n  \"vagabond\",\n  \"vagrancy\",\n  \"vagrantly\",\n  \"vaguely\",\n  \"vagueness\",\n  \"valiant\",\n  \"valid\",\n  \"valium\",\n  \"valley\",\n  \"valuables\",\n  \"value\",\n  \"vanilla\",\n  \"vanish\",\n  \"vanity\",\n  \"vanquish\",\n  \"vantage\",\n  \"vaporizer\",\n  \"variable\",\n  \"variably\",\n  \"varied\",\n  \"variety\",\n  \"various\",\n  \"varmint\",\n  \"varnish\",\n  \"varsity\",\n  \"varying\",\n  \"vascular\",\n  \"vaseline\",\n  \"vastly\",\n  \"vastness\",\n  \"veal\",\n  \"vegan\",\n  \"veggie\",\n  \"vehicular\",\n  \"velcro\",\n  \"velocity\",\n  \"velvet\",\n  \"vendetta\",\n  \"vending\",\n  \"vendor\",\n  \"veneering\",\n  \"vengeful\",\n  \"venomous\",\n  \"ventricle\",\n  \"venture\",\n  \"venue\",\n  \"venus\",\n  \"verbalize\",\n  \"verbally\",\n  \"verbose\",\n  \"verdict\",\n  \"verify\",\n  \"verse\",\n  \"version\",\n  \"versus\",\n  \"vertebrae\",\n  \"vertical\",\n  \"vertigo\",\n  \"very\",\n  \"vessel\",\n  \"vest\",\n  \"veteran\",\n  \"veto\",\n  \"vexingly\",\n  \"viability\",\n  \"viable\",\n  \"vibes\",\n  \"vice\",\n  \"vicinity\",\n  \"victory\",\n  \"video\",\n  \"viewable\",\n  \"viewer\",\n  \"viewing\",\n  \"viewless\",\n  \"viewpoint\",\n  \"vigorous\",\n  \"village\",\n  \"villain\",\n  \"vindicate\",\n  \"vineyard\",\n  \"vintage\",\n  \"violate\",\n  \"violation\",\n  \"violator\",\n  \"violet\",\n  \"violin\",\n  \"viper\",\n  \"viral\",\n  \"virtual\",\n  \"virtuous\",\n  \"virus\",\n  \"visa\",\n  \"viscosity\",\n  \"viscous\",\n  \"viselike\",\n  \"visible\",\n  \"visibly\",\n  \"vision\",\n  \"visiting\",\n  \"visitor\",\n  \"visor\",\n  \"vista\",\n  \"vitality\",\n  \"vitalize\",\n  \"vitally\",\n  \"vitamins\",\n  \"vivacious\",\n  \"vividly\",\n  \"vividness\",\n  \"vixen\",\n  \"vocalist\",\n  \"vocalize\",\n  \"vocally\",\n  \"vocation\",\n  \"voice\",\n  \"voicing\",\n  \"void\",\n  \"volatile\",\n  \"volley\",\n  \"voltage\",\n  \"volumes\",\n  \"voter\",\n  \"voting\",\n  \"voucher\",\n  \"vowed\",\n  \"vowel\",\n  \"voyage\",\n  \"wackiness\",\n  \"wad\",\n  \"wafer\",\n  \"waffle\",\n  \"waged\",\n  \"wager\",\n  \"wages\",\n  \"waggle\",\n  \"wagon\",\n  \"wake\",\n  \"waking\",\n  \"walk\",\n  \"walmart\",\n  \"walnut\",\n  \"walrus\",\n  \"waltz\",\n  \"wand\",\n  \"wannabe\",\n  \"wanted\",\n  \"wanting\",\n  \"wasabi\",\n  \"washable\",\n  \"washbasin\",\n  \"washboard\",\n  \"washbowl\",\n  \"washcloth\",\n  \"washday\",\n  \"washed\",\n  \"washer\",\n  \"washhouse\",\n  \"washing\",\n  \"washout\",\n  \"washroom\",\n  \"washstand\",\n  \"washtub\",\n  \"wasp\",\n  \"wasting\",\n  \"watch\",\n  \"water\",\n  \"waviness\",\n  \"waving\",\n  \"wavy\",\n  \"whacking\",\n  \"whacky\",\n  \"wham\",\n  \"wharf\",\n  \"wheat\",\n  \"whenever\",\n  \"whiff\",\n  \"whimsical\",\n  \"whinny\",\n  \"whiny\",\n  \"whisking\",\n  \"whoever\",\n  \"whole\",\n  \"whomever\",\n  \"whoopee\",\n  \"whooping\",\n  \"whoops\",\n  \"why\",\n  \"wick\",\n  \"widely\",\n  \"widen\",\n  \"widget\",\n  \"widow\",\n  \"width\",\n  \"wieldable\",\n  \"wielder\",\n  \"wife\",\n  \"wifi\",\n  \"wikipedia\",\n  \"wildcard\",\n  \"wildcat\",\n  \"wilder\",\n  \"wildfire\",\n  \"wildfowl\",\n  \"wildland\",\n  \"wildlife\",\n  \"wildly\",\n  \"wildness\",\n  \"willed\",\n  \"willfully\",\n  \"willing\",\n  \"willow\",\n  \"willpower\",\n  \"wilt\",\n  \"wimp\",\n  \"wince\",\n  \"wincing\",\n  \"wind\",\n  \"wing\",\n  \"winking\",\n  \"winner\",\n  \"winnings\",\n  \"winter\",\n  \"wipe\",\n  \"wired\",\n  \"wireless\",\n  \"wiring\",\n  \"wiry\",\n  \"wisdom\",\n  \"wise\",\n  \"wish\",\n  \"wisplike\",\n  \"wispy\",\n  \"wistful\",\n  \"wizard\",\n  \"wobble\",\n  \"wobbling\",\n  \"wobbly\",\n  \"wok\",\n  \"wolf\",\n  \"wolverine\",\n  \"womanhood\",\n  \"womankind\",\n  \"womanless\",\n  \"womanlike\",\n  \"womanly\",\n  \"womb\",\n  \"woof\",\n  \"wooing\",\n  \"wool\",\n  \"woozy\",\n  \"word\",\n  \"work\",\n  \"worried\",\n  \"worrier\",\n  \"worrisome\",\n  \"worry\",\n  \"worsening\",\n  \"worshiper\",\n  \"worst\",\n  \"wound\",\n  \"woven\",\n  \"wow\",\n  \"wrangle\",\n  \"wrath\",\n  \"wreath\",\n  \"wreckage\",\n  \"wrecker\",\n  \"wrecking\",\n  \"wrench\",\n  \"wriggle\",\n  \"wriggly\",\n  \"wrinkle\",\n  \"wrinkly\",\n  \"wrist\",\n  \"writing\",\n  \"written\",\n  \"wrongdoer\",\n  \"wronged\",\n  \"wrongful\",\n  \"wrongly\",\n  \"wrongness\",\n  \"wrought\",\n  \"xbox\",\n  \"xerox\",\n  \"yahoo\",\n  \"yam\",\n  \"yanking\",\n  \"yapping\",\n  \"yard\",\n  \"yarn\",\n  \"yeah\",\n  \"yearbook\",\n  \"yearling\",\n  \"yearly\",\n  \"yearning\",\n  \"yeast\",\n  \"yelling\",\n  \"yelp\",\n  \"yen\",\n  \"yesterday\",\n  \"yiddish\",\n  \"yield\",\n  \"yin\",\n  \"yippee\",\n  \"yo-yo\",\n  \"yodel\",\n  \"yoga\",\n  \"yogurt\",\n  \"yonder\",\n  \"yoyo\",\n  \"yummy\",\n  \"zap\",\n  \"zealous\",\n  \"zebra\",\n  \"zen\",\n  \"zeppelin\",\n  \"zero\",\n  \"zestfully\",\n  \"zesty\",\n  \"zigzagged\",\n  \"zipfile\",\n  \"zipping\",\n  \"zippy\",\n  \"zips\",\n  \"zit\",\n  \"zodiac\",\n  \"zombie\",\n  \"zone\",\n  \"zoning\",\n  \"zookeeper\",\n  \"zoologist\",\n  \"zoology\",\n  \"zoom\",\n];\n","import { CharacterSet, CharacterSets } from \"./types\";\n\nfunction toCharacterSet(characters: string) {\n  const set = characters.split(\"\");\n\n  return Object.freeze(set as CharacterSet);\n}\n\nconst SpecialCharacters = toCharacterSet(\"!@#$%^&*\");\n\n/** Sets of Ascii characters used for password generation */\nexport const Ascii = Object.freeze({\n  /** The full set of characters available to the generator */\n  Full: Object.freeze({\n    Uppercase: toCharacterSet(\"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"),\n    Lowercase: toCharacterSet(\"abcdefghijkmnopqrstuvwxyz\"),\n    Digit: toCharacterSet(\"0123456789\"),\n    Special: SpecialCharacters,\n  } as CharacterSets),\n\n  /** All characters available to the generator that are not ambiguous. */\n  Unmistakable: Object.freeze({\n    Uppercase: toCharacterSet(\"ABCDEFGHJKLMNPQRSTUVWXYZ\"),\n    Lowercase: toCharacterSet(\"abcdefghijklmnopqrstuvwxyz\"),\n    Digit: toCharacterSet(\"23456789\"),\n    Special: SpecialCharacters,\n  } as CharacterSets),\n});\n\n/** Splits an email into a username, subaddress, and domain named group.\n * Subaddress is optional.\n */\nexport const SUBADDRESS_PARSER = new RegExp(\n  \"(?<username>[^@+]+)(?<subaddress>\\\\+.+)?(?<domain>@.+)\",\n);\n","import { EFFLongWordList } from \"@bitwarden/common/platform/misc/wordlist\";\n\nimport { Randomizer } from \"./abstractions\";\nimport { SUBADDRESS_PARSER } from \"./data\";\n\n/** Generation algorithms that produce randomized email addresses */\nexport class EmailRandomizer {\n  /** Instantiates the email randomizer\n   *  @param random data source for random data\n   */\n  constructor(private random: Randomizer) {}\n\n  /** Appends a random set of characters as a subaddress\n   *  @param email the email address used to generate a subaddress. If this address\n   *    already contains a subaddress, the subaddress is extended.\n   *  @param options.length the number of characters to append to the subaddress. Defaults to 8. If\n   *    the length is <= 0, the function returns the input address.\n   *  @returns a promise that resolves with the generated email address. If the provided address\n   *    lacks a username (the part before the \"@\") or domain (the part after the \"@\"), the function\n   *    returns the input address.\n   */\n  async randomAsciiSubaddress(email: string, options?: { length?: number }) {\n    let result = email ?? \"\";\n\n    const subaddressLength = options?.length ?? 8;\n    if (subaddressLength < 1) {\n      return result;\n    }\n\n    const parsed = SUBADDRESS_PARSER.exec(result);\n    if (!parsed) {\n      return result;\n    }\n\n    let subaddress = parsed.groups.subaddress ?? \"+\";\n    subaddress += await this.random.chars(subaddressLength);\n    result = `${parsed.groups.username}${subaddress}${parsed.groups.domain}`;\n\n    return result;\n  }\n\n  /** Creates a catchall address composed of random characters\n   *  @param domain the domain part of the generated email address.\n   *  @param options.length the number of characters to include in the catchall\n   *    address. Defaults to 8.\n   *  @returns a promise that resolves with the generated email address. If the domain\n   *    is empty, resolves to null instead.\n   */\n  async randomAsciiCatchall(domain: string, options?: { length?: number }) {\n    const emailDomain = domain?.startsWith(\"@\") ? domain.substring(1, Infinity) : (domain ?? \"\");\n    if (emailDomain.length < 1) {\n      return null;\n    }\n\n    const length = options?.length ?? 8;\n    if (length < 1) {\n      return null;\n    }\n\n    const catchall = await this.random.chars(length);\n    const result = `${catchall}@${domain}`;\n\n    return result;\n  }\n\n  /** Creates a catchall address composed of random words\n   *  @param domain the domain part of the generated email address.\n   *  @param options.numberOfWords the number of words to include in the catchall\n   *    address. Defaults to 1.\n   *  @param options.words selects words from the provided wordlist. Defaults to\n   *    the EFF \"5-dice\" list.\n   *  @returns a promise that resolves with the generated email address.\n   */\n  async randomWordsCatchall(\n    domain: string,\n    options?: { numberOfWords?: number; words?: Array<string> },\n  ) {\n    const emailDomain = domain?.startsWith(\"@\") ? domain.substring(1, Infinity) : (domain ?? \"\");\n    if (emailDomain.length < 1) {\n      return null;\n    }\n\n    const numberOfWords = options?.numberOfWords ?? 1;\n    if (numberOfWords < 1) {\n      return null;\n    }\n\n    const wordList = options?.words ?? EFFLongWordList;\n    const words = [];\n    for (let i = 0; i < numberOfWords; i++) {\n      // camelCase the words for legibility\n      words[i] = await this.random.pickWord(wordList, { titleCase: i !== 0 });\n    }\n\n    const result = `${words.join(\"\")}@${domain}`;\n\n    return result;\n  }\n}\n","import { SUBADDRESS_PARSER } from \"./data\";\n\n/** Generation algorithms that produce deterministic email addresses */\nexport class EmailCalculator {\n  /**\n   * Appends appendText to the subaddress of an email address.\n   * @param appendText  The calculation fails if this is shorter than 1 character\n   *   long, undefined, or null.\n   * @param email the email address to alter.\n   * @returns `email` with `appendText` added to its subaddress (the part\n   *   following the \"+\"). If there is no subaddress, a subaddress is created.\n   *   If the email address fails to parse, it is returned unaltered.\n   */\n  appendToSubaddress(appendText: string, email: string) {\n    let result = (email ?? \"\").trim();\n\n    const suffix = (appendText ?? \"\").trim();\n    if (suffix.length < 1) {\n      return result;\n    }\n\n    const parsed = SUBADDRESS_PARSER.exec(result);\n    if (!parsed) {\n      return result;\n    }\n\n    const subaddress = (parsed.groups.subaddress ?? \"+\") + suffix;\n    result = `${parsed.groups.username}${subaddress}${parsed.groups.domain}`;\n\n    return result;\n  }\n\n  /**\n   * Derives an email address from a username and domain name.\n   * @param username the username part of the email address. The calculation fails if this is\n   *   shorter than 1 character long, undefined, or null.\n   * @param domain the domain part of the email address. The calculation fails if this is empty,\n   *   undefined, or null.\n   * @returns an email address or `null` if the calculation fails.\n   */\n  concatenate(username: string, domain: string) {\n    const emailDomain = domain?.startsWith(\"@\") ? domain.substring(1, Infinity) : (domain ?? \"\");\n    if (emailDomain.length < 1) {\n      return null;\n    }\n\n    const emailWebsite = username ?? \"\";\n    if (emailWebsite.length < 1) {\n      return null;\n    }\n\n    const result = `${emailWebsite}@${emailDomain}`;\n\n    return result;\n  }\n}\n","import { EFFLongWordList } from \"@bitwarden/common/platform/misc/wordlist\";\n\nimport { Randomizer } from \"./abstractions\";\nimport { Ascii } from \"./data\";\nimport { CharacterSet, EffWordListRequest, RandomAsciiRequest } from \"./types\";\n\n/** Generation algorithms that produce randomized secrets */\nexport class PasswordRandomizer {\n  /** Instantiates the password randomizer\n   *  @param random data source for random data\n   */\n  constructor(private randomizer: Randomizer) {}\n\n  /** create a password from ASCII codepoints\n   *  @param request refines the generated password\n   *  @returns a promise that completes with the generated password\n   */\n  async randomAscii(request: RandomAsciiRequest) {\n    // randomize character sets\n    const sets = toAsciiSets(request);\n    const shuffled = await this.randomizer.shuffle(sets);\n\n    // generate password\n    const generating = shuffled.flatMap((set) => this.randomizer.pick(set));\n    const generated = await Promise.all(generating);\n    const result = generated.join(\"\");\n\n    return result;\n  }\n\n  /** create a passphrase from the EFF's \"5 dice\" word list\n   *  @param request refines the generated passphrase\n   * @returns a promise that completes with the generated passphrase\n   */\n  async randomEffLongWords(request: EffWordListRequest) {\n    // select which word gets the number, if any\n    let luckyNumber = -1;\n    if (request.number) {\n      luckyNumber = await this.randomizer.uniform(0, request.numberOfWords - 1);\n    }\n\n    // generate the passphrase\n    const wordList = new Array(request.numberOfWords);\n    for (let i = 0; i < request.numberOfWords; i++) {\n      const word = await this.randomizer.pickWord(EFFLongWordList, {\n        titleCase: request.capitalize,\n        number: i === luckyNumber,\n      });\n\n      wordList[i] = word;\n    }\n\n    return wordList.join(request.separator);\n  }\n}\n\n// given a generator request, convert each of its `number | undefined` properties\n// to an array of character sets, one for each property. The transformation is\n// deterministic.\nfunction toAsciiSets(request: RandomAsciiRequest) {\n  // allocate an array and initialize each cell with a fixed value\n  function allocate<T>(size: number, value: T) {\n    const data = new Array(size > 0 ? size : 0);\n    data.fill(value, 0, size);\n    return data;\n  }\n\n  const allSet: CharacterSet = [];\n  const active = request.ambiguous ? Ascii.Full : Ascii.Unmistakable;\n  const parts: Array<CharacterSet> = [];\n\n  if (request.uppercase !== undefined) {\n    parts.push(...allocate(request.uppercase, active.Uppercase));\n    allSet.push(...active.Uppercase);\n  }\n\n  if (request.lowercase !== undefined) {\n    parts.push(...allocate(request.lowercase, active.Lowercase));\n    allSet.push(...active.Lowercase);\n  }\n\n  if (request.digits !== undefined) {\n    parts.push(...allocate(request.digits, active.Digit));\n    allSet.push(...active.Digit);\n  }\n\n  if (request.special !== undefined) {\n    parts.push(...allocate(request.special, active.Special));\n    allSet.push(...active.Special);\n  }\n\n  parts.push(...allocate(request.all, allSet));\n\n  return parts;\n}\n","import { EFFLongWordList } from \"@bitwarden/common/platform/misc/wordlist\";\n\nimport { Randomizer } from \"./abstractions\";\nimport { WordsRequest } from \"./types\";\n\n/** Generation algorithms that produce randomized usernames */\nexport class UsernameRandomizer {\n  /** Instantiates the username randomizer\n   *  @param random data source for random data\n   */\n  constructor(private random: Randomizer) {}\n\n  /** Creates a username composed of random words\n   *  @param request parameters to which the generated username conforms\n   *  @returns a promise that resolves with the generated username.\n   */\n  async randomWords(request?: WordsRequest) {\n    const numberOfWords = request?.numberOfWords ?? 1;\n    if (numberOfWords < 1) {\n      return \"\";\n    }\n\n    const digits = Math.max(request?.digits ?? 0, 0);\n    let selectCase = (_: number) => false;\n    if (request?.casing === \"camelCase\") {\n      selectCase = (i: number) => i !== 0;\n    } else if (request?.casing === \"TitleCase\") {\n      selectCase = (_: number) => true;\n    }\n\n    const wordList = request?.words ?? EFFLongWordList;\n    const parts = [];\n    for (let i = 0; i < numberOfWords; i++) {\n      const word = await this.random.pickWord(wordList, { titleCase: selectCase(i) });\n      parts.push(word);\n    }\n\n    for (let i = 0; i < digits; i++) {\n      const digit = await this.random.uniform(0, 9);\n      parts.push(digit.toString());\n    }\n\n    const result = parts.join(\"\");\n\n    return result;\n  }\n}\n","import { Observable, combineLatest, concatMap, filter, map, of, concat, merge } from \"rxjs\";\n\nimport {\n  StateProvider,\n  SingleUserState,\n  CombinedState,\n  StateUpdateOptions,\n} from \"../../platform/state\";\n\nimport { BufferedKeyDefinition } from \"./buffered-key-definition\";\n\n/** Stateful storage that overwrites one state with a buffered state.\n *  When a overwrite occurs, the input state is automatically deleted.\n *  @remarks The buffered state can only overwrite non-nullish values. If the\n *   buffer key contains `null` or `undefined`, it will do nothing.\n */\nexport class BufferedState<Input, Output, Dependency> implements SingleUserState<Output> {\n  /**\n   * Instantiate a buffered state\n   * @param provider constructs the buffer.\n   * @param key defines the buffer location.\n   * @param output updates when a overwrite occurs\n   * @param dependency$ provides data the buffer depends upon to evaluate and\n   *   transform its data. If this is omitted, then `true` is injected as\n   *   a dependency, which with a default output will trigger a overwrite immediately.\n   *\n   * @remarks `dependency$` enables overwrite control during dynamic circumstances,\n   *   such as when a overwrite should occur only if a user key is available.\n   */\n  constructor(\n    provider: StateProvider,\n    private key: BufferedKeyDefinition<Input, Output, Dependency>,\n    private output: SingleUserState<Output>,\n    dependency$: Observable<Dependency> = null,\n  ) {\n    this.bufferedState = provider.getUser(output.userId, key.toKeyDefinition());\n\n    // overwrite the output value\n    const hasValue$ = concat(of(null), this.bufferedState.state$).pipe(\n      map((buffer) => (buffer ?? null) !== null),\n    );\n    const overwriteDependency$ = (dependency$ ?? of(true as unknown as Dependency)).pipe(\n      map((dependency) => [key.shouldOverwrite(dependency), dependency] as const),\n    );\n    const overwrite$ = combineLatest([hasValue$, overwriteDependency$]).pipe(\n      concatMap(async ([hasValue, [shouldOverwrite, dependency]]) => {\n        if (hasValue && shouldOverwrite) {\n          await this.overwriteOutput(dependency);\n        }\n        return [false, null] as const;\n      }),\n    );\n\n    // drive overwrites only when there's a subscription;\n    // the output state determines when emissions occur\n    const output$ = this.output.state$.pipe(map((output) => [true, output] as const));\n    this.state$ = merge(overwrite$, output$).pipe(\n      filter(([emit]) => emit),\n      map(([, output]) => output),\n    );\n\n    this.combinedState$ = this.state$.pipe(map((state) => [this.output.userId, state]));\n\n    this.bufferedState$ = this.bufferedState.state$;\n  }\n\n  private bufferedState: SingleUserState<Input>;\n\n  private async overwriteOutput(dependency: Dependency) {\n    // take the latest value from the buffer\n    let buffered: Input;\n    await this.bufferedState.update((state) => {\n      buffered = state ?? null;\n      return null;\n    });\n\n    // update the output state\n    const isValid = await this.key.isValid(buffered, dependency);\n    if (isValid) {\n      const output = await this.key.map(buffered, dependency);\n      await this.output.update(() => output);\n    }\n  }\n\n  /** {@link SingleUserState.userId} */\n  get userId() {\n    return this.output.userId;\n  }\n\n  /** Observes changes to the output state. This updates when the output\n   *  state updates, when the buffer is moved to the output, and when `BufferedState.buffer`\n   *  is invoked.\n   */\n  readonly state$: Observable<Output>;\n\n  /** {@link SingleUserState.combinedState$} */\n  readonly combinedState$: Observable<CombinedState<Output>>;\n\n  /** Buffers a value state. The buffered state overwrites the output\n   *  state when a subscription occurs.\n   *  @param value the state to roll over. Setting this to `null` or `undefined`\n   *  has no effect.\n   */\n  async buffer(value: Input): Promise<void> {\n    const normalized = value ?? null;\n    if (normalized !== null) {\n      await this.bufferedState.update(() => normalized);\n    }\n  }\n\n  /** The data presently being buffered. This emits the pending value each time\n   *  new buffer data is provided. It emits null when the buffer is empty.\n   */\n  readonly bufferedState$: Observable<Input>;\n\n  /** Updates the output state.\n   *  @param configureState a callback that returns an updated output\n   *   state. The callback receives the state's present value as its\n   *   first argument and the dependencies listed in `options.combinedLatestWith`\n   *   as its second argument.\n   *  @param options configures how the update is applied. See {@link StateUpdateOptions}.\n   */\n  update<TCombine>(\n    configureState: (state: Output, dependencies: TCombine) => Output,\n    options: StateUpdateOptions<Output, TCombine> = null,\n  ): Promise<Output> {\n    return this.output.update(configureState, options);\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\n/** A packing strategy that packs data into a string.\n */\nexport abstract class DataPacker {\n  /**\n   * Packs value into a string format.\n   * @type {Data} is the type of data being protected.\n   * @param value is packed into the string\n   * @returns the packed string\n   */\n  abstract pack<Data>(value: Jsonify<Data>): string;\n\n  /** Unpacks a string produced by pack.\n   * @param packedValue is the string to unpack\n   * @type {Data} is the type of data being protected.\n   * @returns the data stored within the secret.\n   * @throws when `packedValue` has an invalid format.\n   */\n  abstract unpack<Data>(packedValue: string): Jsonify<Data>;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Utils } from \"../../platform/misc/utils\";\n\nimport { DataPacker as DataPackerAbstraction } from \"./data-packer.abstraction\";\n\nconst DATA_PACKING = Object.freeze({\n  /** The character to use for padding. */\n  padding: \"0\",\n\n  /** The character dividing packed data. */\n  divider: \"|\",\n\n  /** A regular expression for detecting invalid padding. When the character\n   *  changes, this should be updated to include the new padding pattern.\n   */\n  hasInvalidPadding: /[^0]/,\n});\n\n/** A packing strategy that conceals the length of secret data by padding it\n *  to a multiple of the frame size.\n *  @example\n *  // packed === \"24|e2Zvbzp0cnVlfQ==|0000\"\n *  const packer = new SecretPacker(24);\n *  const packed = packer.pack({ foo: true });\n */\nexport class PaddedDataPacker extends DataPackerAbstraction {\n  /** Instantiates the padded data packer\n   *  @param frameSize The size of the dataframe used to pad encrypted values.\n   */\n  constructor(private readonly frameSize: number) {\n    super();\n  }\n\n  /**\n   * Packs value into a string format that conceals the length by obscuring it\n   * with the frameSize.\n   * @see {@link DataPackerAbstraction.unpack}\n   */\n  pack<Secret>(value: Jsonify<Secret>) {\n    // encode the value\n    const json = JSON.stringify(value);\n    const b64 = Utils.fromUtf8ToB64(json);\n\n    // calculate packing metadata\n    const frameSize = JSON.stringify(this.frameSize);\n    const separatorLength = 2 * DATA_PACKING.divider.length; // there are 2 separators\n    const payloadLength = b64.length + frameSize.length + separatorLength;\n    const paddingLength = this.frameSize - (payloadLength % this.frameSize);\n\n    // pack the data, thereby concealing its length\n    const padding = DATA_PACKING.padding.repeat(paddingLength);\n    const packed = `${frameSize}|${b64}|${padding}`;\n\n    return packed;\n  }\n\n  /** {@link DataPackerAbstraction.unpack} */\n  unpack<Secret>(secret: string): Jsonify<Secret> {\n    // frame size is stored before the JSON payload in base 10\n    const frameEndIndex = secret.indexOf(DATA_PACKING.divider);\n    if (frameEndIndex < 1) {\n      throw new Error(\"missing frame size\");\n    }\n    const frameSize = parseInt(secret.slice(0, frameEndIndex), 10);\n    const dataStartIndex = frameEndIndex + 1;\n\n    // The decrypted string should be a multiple of the frame length\n    if (secret.length % frameSize > 0) {\n      throw new Error(\"invalid length\");\n    }\n\n    // encoded data terminates with the divider, followed by the padding character\n    const dataEndIndex = secret.lastIndexOf(DATA_PACKING.divider);\n    if (dataEndIndex == frameEndIndex) {\n      throw new Error(\"missing json object\");\n    }\n    const paddingStartIndex = dataEndIndex + 1;\n\n    // If the padding contains invalid padding characters then the padding could be used\n    // as a side channel for arbitrary data.\n    if (secret.slice(paddingStartIndex).match(DATA_PACKING.hasInvalidPadding)) {\n      throw new Error(\"invalid padding\");\n    }\n\n    // remove frame size and padding\n    const b64 = secret.slice(dataStartIndex, dataEndIndex);\n\n    // unpack the stored data\n    const json = Utils.fromB64ToUtf8(b64);\n    const unpacked = JSON.parse(json);\n\n    return unpacked;\n  }\n}\n","import { UserKeyDefinitionOptions, UserKeyDefinition } from \"../../platform/state\";\n// eslint-disable-next-line -- `StateDefinition` used as an argument\nimport { StateDefinition } from \"../../platform/state/state-definition\";\nimport { ClassifiedFormat } from \"./classified-format\";\nimport { Classifier } from \"./classifier\";\n\n/** Encryption and storage settings for data stored by a `SecretState`.\n */\nexport class SecretKeyDefinition<Outer, Id, Inner extends object, Disclosed, Secret> {\n  private constructor(\n    readonly stateDefinition: StateDefinition,\n    readonly key: string,\n    readonly classifier: Classifier<Inner, Disclosed, Secret>,\n    readonly options: UserKeyDefinitionOptions<Inner>,\n    // type erasure is necessary here because typescript doesn't support\n    // higher kinded types that generalize over collections. The invariants\n    // needed to make this typesafe are maintained by the static factories.\n    readonly deconstruct: (value: any) => [Id, any][],\n    readonly reconstruct: ([inners, ids]: (readonly [Id, any])[]) => Outer,\n  ) {}\n\n  /** Converts the secret key to the `KeyDefinition` used for secret storage. */\n  toEncryptedStateKey() {\n    const secretKey = new UserKeyDefinition<ClassifiedFormat<Id, Disclosed>[]>(\n      this.stateDefinition,\n      this.key,\n      {\n        cleanupDelayMs: this.options.cleanupDelayMs,\n        deserializer: (jsonValue) => jsonValue as ClassifiedFormat<Id, Disclosed>[],\n        // Clear encrypted state on logout\n        clearOn: this.options.clearOn,\n      },\n    );\n\n    return secretKey;\n  }\n\n  /**\n   * Define a secret state for a single value\n   * @param stateDefinition The domain of the secret's durable state.\n   * @param key Domain key that identifies the stored value. This key must not be reused\n   *    in any capacity.\n   * @param classifier Partitions the value into encrypted, discarded, and public data.\n   * @param options Configures the operation of the secret state.\n   */\n  static value<Value extends object, Disclosed, Secret>(\n    stateDefinition: StateDefinition,\n    key: string,\n    classifier: Classifier<Value, Disclosed, Secret>,\n    options: UserKeyDefinitionOptions<Value>,\n  ) {\n    return new SecretKeyDefinition<Value, void, Value, Disclosed, Secret>(\n      stateDefinition,\n      key,\n      classifier,\n      options,\n      (value) => [[null, value]],\n      ([[, inner]]) => inner,\n    );\n  }\n\n  /**\n   * Define a secret state for an array of values. Each item is encrypted separately.\n   * @param stateDefinition The domain of the secret's durable state.\n   * @param key Domain key that identifies the stored items. This key must not be reused\n   *    in any capacity.\n   * @param classifier Partitions each item into encrypted, discarded, and public data.\n   * @param options Configures the operation of the secret state.\n   */\n  static array<Item extends object, Disclosed, Secret>(\n    stateDefinition: StateDefinition,\n    key: string,\n    classifier: Classifier<Item, Disclosed, Secret>,\n    options: UserKeyDefinitionOptions<Item>,\n  ) {\n    return new SecretKeyDefinition<Item[], number, Item, Disclosed, Secret>(\n      stateDefinition,\n      key,\n      classifier,\n      options,\n      (value) => value.map((v: any, id: number) => [id, v]),\n      (values) => values.map(([, v]) => v),\n    );\n  }\n\n  /**\n   * Define a secret state for a record. Each property is encrypted separately.\n   * @param stateDefinition The domain of the secret's durable state.\n   * @param key Domain key that identifies the stored properties. This key must not be reused\n   *    in any capacity.\n   * @param classifier Partitions each property into encrypted, discarded, and public data.\n   * @param options Configures the operation of the secret state.\n   */\n  static record<Item extends object, Disclosed, Secret, Id extends string | number>(\n    stateDefinition: StateDefinition,\n    key: string,\n    classifier: Classifier<Item, Disclosed, Secret>,\n    options: UserKeyDefinitionOptions<Item>,\n  ) {\n    return new SecretKeyDefinition<Record<Id, Item>, Id, Item, Disclosed, Secret>(\n      stateDefinition,\n      key,\n      classifier,\n      options,\n      (value) => Object.entries(value) as [Id, Item][],\n      (values) => Object.fromEntries(values) as Record<Id, Item>,\n    );\n  }\n}\n","import { Observable, map, concatMap, share, ReplaySubject, timer, combineLatest, of } from \"rxjs\";\n\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport {\n  SingleUserState,\n  StateProvider,\n  StateUpdateOptions,\n  CombinedState,\n} from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\n\nimport { ClassifiedFormat } from \"./classified-format\";\nimport { SecretKeyDefinition } from \"./secret-key-definition\";\nimport { UserEncryptor } from \"./user-encryptor.abstraction\";\n\nconst ONE_MINUTE = 1000 * 60;\n\n/** Stores account-specific secrets protected by a UserKeyEncryptor.\n *\n *  @remarks This state store changes the structure of `Plaintext` during\n *  storage, and requires user keys to operate. It is incompatible with sync,\n *  which expects the disk storage format to be identical to the sync format.\n *\n *  DO NOT USE THIS for synchronized data.\n */\nexport class SecretState<Outer, Id, Plaintext extends object, Disclosed, Secret>\n  implements SingleUserState<Outer>\n{\n  // The constructor is private to avoid creating a circular dependency when\n  // wiring the derived and secret states together.\n  private constructor(\n    private readonly key: SecretKeyDefinition<Outer, Id, Plaintext, Disclosed, Secret>,\n    private readonly $encryptor: Observable<UserEncryptor>,\n    userId: UserId,\n    provider: StateProvider,\n  ) {\n    // construct the backing store\n    this.encryptedState = provider.getUser(userId, key.toEncryptedStateKey());\n\n    // cache plaintext\n    this.combinedState$ = combineLatest([this.encryptedState.combinedState$, this.$encryptor]).pipe(\n      concatMap(\n        async ([[userId, state], encryptor]) =>\n          [userId, await this.declassifyAll(encryptor, state)] as [UserId, Outer],\n      ),\n      share({\n        connector: () => {\n          return new ReplaySubject<[UserId, Outer]>(1);\n        },\n        resetOnRefCountZero: () => timer(key.options.cleanupDelayMs ?? ONE_MINUTE),\n      }),\n    );\n\n    this.state$ = this.combinedState$.pipe(map(([, state]) => state));\n  }\n\n  private readonly encryptedState: SingleUserState<ClassifiedFormat<Id, Disclosed>[]>;\n\n  /** {@link SingleUserState.userId} */\n  get userId() {\n    return this.encryptedState.userId;\n  }\n\n  /** Observes changes to the decrypted secret state. The observer\n   *  updates after the secret has been recorded to state storage.\n   *  @returns `undefined` when the account is locked.\n   */\n  readonly state$: Observable<Outer>;\n\n  /** {@link SingleUserState.combinedState$} */\n  readonly combinedState$: Observable<CombinedState<Outer>>;\n\n  /** Creates a secret state bound to an account encryptor. The account must be unlocked\n   *  when this method is called.\n   *  @param userId: the user to which the secret state is bound.\n   *  @param key Converts between a declassified secret and its formal type.\n   *  @param provider constructs state objects.\n   *  @param encryptor protects `Secret` data.\n   *  @throws when `key.stateDefinition` is backed by memory storage.\n   *  @remarks Secrets are written to a secret store as a named tuple. Data classification is\n   *    determined by the encryptor's classifier. Secret-classification data is jsonified,\n   *    encrypted, and stored in a `secret` property. Disclosed-classification data is stored\n   *    in a `disclosed` property. Omitted-classification data is not stored.\n   */\n  static from<Outer, Id, TFrom extends object, Disclosed, Secret>(\n    userId: UserId,\n    key: SecretKeyDefinition<Outer, Id, TFrom, Disclosed, Secret>,\n    provider: StateProvider,\n    encryptor$: Observable<UserEncryptor>,\n  ) {\n    const secretState = new SecretState(key, encryptor$, userId, provider);\n    return secretState;\n  }\n\n  private async declassifyItem(\n    encryptor: UserEncryptor,\n    { id, secret, disclosed }: ClassifiedFormat<Id, Disclosed>,\n  ) {\n    const encrypted = EncString.fromJSON(secret);\n    const decrypted = await encryptor.decrypt(encrypted);\n\n    const declassified = this.key.classifier.declassify(disclosed, decrypted);\n    const result = [id, this.key.options.deserializer(declassified)] as const;\n\n    return result;\n  }\n\n  private async declassifyAll(encryptor: UserEncryptor, data: ClassifiedFormat<Id, Disclosed>[]) {\n    // fail fast if there's no value\n    if (data === null || data === undefined) {\n      return null;\n    }\n\n    // decrypt each item\n    const decryptTasks = data.map(async (item) => this.declassifyItem(encryptor, item));\n\n    // reconstruct expected type\n    const results = await Promise.all(decryptTasks);\n    const result = this.key.reconstruct(results);\n\n    return result;\n  }\n\n  private async classifyItem(encryptor: UserEncryptor, [id, item]: [Id, Plaintext]) {\n    const classified = this.key.classifier.classify(item);\n    const encrypted = await encryptor.encrypt(classified.secret);\n\n    // the deserializer in the plaintextState's `derive` configuration always runs, but\n    // `encryptedState` is not guaranteed to serialize the data, so it's necessary to\n    // round-trip `encrypted` proactively.\n    const serialized = {\n      id,\n      secret: JSON.parse(JSON.stringify(encrypted)),\n      disclosed: classified.disclosed,\n    } as ClassifiedFormat<Id, Disclosed>;\n\n    return serialized;\n  }\n\n  private async classifyAll(encryptor: UserEncryptor, data: Outer) {\n    // fail fast if there's no value\n    if (data === null || data === undefined) {\n      return null;\n    }\n\n    // convert the object to a list format so that all encrypt and decrypt\n    // operations are self-similar\n    const desconstructed = this.key.deconstruct(data);\n\n    // encrypt each value individually\n    const classifyTasks = desconstructed.map(async (item) => this.classifyItem(encryptor, item));\n    const classified = await Promise.all(classifyTasks);\n\n    return classified;\n  }\n\n  /** Updates the secret stored by this state.\n   *  @param configureState a callback that returns an updated decrypted\n   *   secret state. The callback receives the state's present value as its\n   *   first argument and the dependencies listed in `options.combinedLatestWith`\n   *   as its second argument.\n   *  @param options configures how the update is applied. See {@link StateUpdateOptions}.\n   *  @returns a promise that resolves with the updated value read from the state.\n   *   The round-trip encrypts, decrypts, and deserializes the data, producing a new\n   *   object.\n   *  @remarks `configureState` must return a JSON-serializable object.\n   *   If there are properties of your class which are not JSON-serializable,\n   *   they can be lost when the secret state updates its backing store.\n   */\n  async update<TCombine>(\n    configureState: (state: Outer, dependencies: TCombine) => Outer,\n    options: StateUpdateOptions<Outer, TCombine> = null,\n  ): Promise<Outer> {\n    const combineLatestWith = combineLatest([\n      options?.combineLatestWith ?? of(null),\n      this.$encryptor,\n    ]);\n\n    // read the backing store\n    let latestClassified: ClassifiedFormat<Id, Disclosed>[];\n    let latestCombined: TCombine;\n    let latestEncryptor: UserEncryptor;\n    await this.encryptedState.update((c) => c, {\n      shouldUpdate: (latest, combined) => {\n        latestClassified = latest;\n        [latestCombined, latestEncryptor] = combined;\n        return false;\n      },\n      combineLatestWith,\n    });\n\n    // exit early if there's no update to apply\n    const latestDeclassified = await this.declassifyAll(latestEncryptor, latestClassified);\n    const shouldUpdate = options?.shouldUpdate?.(latestDeclassified, latestCombined) ?? true;\n    if (!shouldUpdate) {\n      return latestDeclassified;\n    }\n\n    // apply the update\n    const updatedDeclassified = configureState(latestDeclassified, latestCombined);\n    const updatedClassified = await this.classifyAll(latestEncryptor, updatedDeclassified);\n    await this.encryptedState.update(() => updatedClassified);\n\n    return updatedDeclassified;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { EncString } from \"../../platform/models/domain/enc-string\";\n\n/** An encryption strategy that protects a type's secrets with\n *  user-specific keys. This strategy is bound to a specific user.\n */\nexport abstract class UserEncryptor {\n  /** Identifies the user bound to the encryptor. */\n  readonly userId: UserId;\n\n  /** Protects secrets in `value` with a user-specific key.\n   *  @param secret the object to protect. This object is mutated during encryption.\n   *  @returns a promise that resolves to a tuple. The tuple's first property contains\n   *    the encrypted secret and whose second property contains an object w/ disclosed\n   *    properties.\n   *   @throws If `value` is `null` or `undefined`, the promise rejects with an error.\n   */\n  abstract encrypt<Secret>(secret: Jsonify<Secret>): Promise<EncString>;\n\n  /** Combines protected secrets and disclosed data into a type that can be\n   *  rehydrated into a domain object.\n   *  @param secret an encrypted JSON payload containing encrypted secrets.\n   *  @returns a promise that resolves to the raw state. This state *is not* a\n   *    class. It contains only data that can be round-tripped through JSON,\n   *    and lacks members such as a prototype or bound functions.\n   *  @throws If `secret` or `disclosed` is `null` or `undefined`, the promise\n   *    rejects with an error.\n   */\n  abstract decrypt<Secret>(secret: EncString): Promise<Jsonify<Secret>>;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { EncryptService } from \"../../platform/abstractions/encrypt.service\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport { UserKey } from \"../../types/key\";\n\nimport { DataPacker } from \"./data-packer.abstraction\";\nimport { UserEncryptor } from \"./user-encryptor.abstraction\";\n\n/** A classification strategy that protects a type's secrets by encrypting them\n *  with a `UserKey`\n */\nexport class UserKeyEncryptor extends UserEncryptor {\n  /** Instantiates the encryptor\n   *  @param userId identifies the user bound to the encryptor.\n   *  @param encryptService protects properties of `Secret`.\n   *  @param keyService looks up the user key when protecting data.\n   *  @param dataPacker packs and unpacks data classified as secrets.\n   */\n  constructor(\n    readonly userId: UserId,\n    private readonly encryptService: EncryptService,\n    private readonly key: UserKey,\n    private readonly dataPacker: DataPacker,\n  ) {\n    super();\n    this.assertHasValue(\"userId\", userId);\n    this.assertHasValue(\"key\", key);\n    this.assertHasValue(\"dataPacker\", dataPacker);\n    this.assertHasValue(\"encryptService\", encryptService);\n  }\n\n  async encrypt<Secret>(secret: Jsonify<Secret>): Promise<EncString> {\n    this.assertHasValue(\"secret\", secret);\n\n    let packed = this.dataPacker.pack(secret);\n    const encrypted = await this.encryptService.encrypt(packed, this.key);\n    packed = null;\n\n    return encrypted;\n  }\n\n  async decrypt<Secret>(secret: EncString): Promise<Jsonify<Secret>> {\n    this.assertHasValue(\"secret\", secret);\n\n    let decrypted = await this.encryptService.decryptToUtf8(secret, this.key);\n    const unpacked = this.dataPacker.unpack<Secret>(decrypted);\n    decrypted = null;\n\n    return unpacked;\n  }\n\n  private assertHasValue(name: string, value: any) {\n    if (value === undefined || value === null) {\n      throw new Error(`${name} cannot be null or undefined`);\n    }\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\n// FIXME: use index.ts imports once policy abstractions and models\n// implement ADR-0002\nimport { Policy as AdminPolicy } from \"@bitwarden/common/admin-console/models/domain/policy\";\nimport { SingleUserState } from \"@bitwarden/common/platform/state\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { PolicyEvaluator } from \"./policy-evaluator.abstraction\";\n\n/** Tailors the generator service to generate a specific kind of credentials */\nexport abstract class GeneratorStrategy<Options, Policy> {\n  /** Retrieve application state that persists across locks.\n   *  @param userId: identifies the user state to retrieve\n   *  @returns the strategy's durable user state\n   */\n  durableState: (userId: UserId) => SingleUserState<Options>;\n\n  /** Gets the default options. */\n  defaults$: (userId: UserId) => Observable<Options>;\n\n  /** Identifies the policy enforced by the generator. */\n  policy: PolicyType;\n\n  /** Operator function that converts a policy collection observable to a single\n   *   policy evaluator observable.\n   * @param policy The policy being evaluated.\n   * @returns the policy evaluator. If `policy` is is `null` or `undefined`,\n   * then the evaluator defaults to the application's limits.\n   * @throws when the policy's type does not match the generator's policy type.\n   */\n  toEvaluator: () => (\n    source: Observable<AdminPolicy[]>,\n  ) => Observable<PolicyEvaluator<Policy, Options>>;\n\n  /** Generates credentials from the given options.\n   * @param options The options used to generate the credentials.\n   * @returns a promise that resolves to the generated credentials.\n   */\n  generate: (options: Options) => Promise<string>;\n}\n","import { IntegrationContext } from \"@bitwarden/common/tools/integration\";\nimport { JsonRpc, IntegrationRequest, ApiSettings } from \"@bitwarden/common/tools/integration/rpc\";\n\nimport { ForwarderConfiguration } from \"../forwarder-configuration\";\nimport { ForwarderContext } from \"../forwarder-context\";\n\nexport class CreateForwardingAddressRpc<\n  Settings extends ApiSettings,\n  Req extends IntegrationRequest = IntegrationRequest,\n> implements JsonRpc<Req, string>\n{\n  constructor(\n    readonly requestor: ForwarderConfiguration<Settings>,\n    readonly context: ForwarderContext<Settings>,\n  ) {}\n\n  private get createForwardingEmail() {\n    return this.requestor.forwarder.createForwardingEmail;\n  }\n\n  toRequest(req: Req) {\n    const url = this.createForwardingEmail.url(req, this.context);\n    const token = this.requestor.authenticate(req, this.context as IntegrationContext<Settings>);\n    const body = this.body(req);\n\n    const request = new Request(url, {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"POST\",\n      headers: new Headers({\n        ...token,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      }),\n      body,\n    });\n\n    return request;\n  }\n\n  private body(req: Req) {\n    const toBody = this.createForwardingEmail.body;\n    if (!toBody) {\n      return undefined;\n    }\n\n    const body = toBody(req, this.context);\n    if (!body) {\n      return undefined;\n    }\n\n    return JSON.stringify(body);\n  }\n\n  hasJsonPayload(response: Response): boolean {\n    return this.createForwardingEmail.hasJsonPayload(response, this.context);\n  }\n\n  processJson(json: any): [string?, string?] {\n    return this.createForwardingEmail.processJson(json, this.context);\n  }\n}\n","import { IntegrationContext } from \"@bitwarden/common/tools/integration\";\nimport { JsonRpc, IntegrationRequest, ApiSettings } from \"@bitwarden/common/tools/integration/rpc\";\n\nimport { ForwarderConfiguration } from \"../forwarder-configuration\";\nimport { ForwarderContext } from \"../forwarder-context\";\n\nexport class GetAccountIdRpc<\n  Settings extends ApiSettings,\n  Req extends IntegrationRequest = IntegrationRequest,\n> implements JsonRpc<Req, string>\n{\n  constructor(\n    readonly requestor: ForwarderConfiguration<Settings>,\n    readonly context: ForwarderContext<Settings>,\n  ) {}\n\n  hasJsonPayload(response: Response) {\n    return this.requestor.forwarder.getAccountId.hasJsonPayload(response, this.context);\n  }\n\n  processJson(json: any) {\n    return this.requestor.forwarder.getAccountId.processJson(json, this.context);\n  }\n\n  toRequest(req: Req) {\n    const url = this.requestor.forwarder.getAccountId.url(req, this.context);\n    const token = this.requestor.authenticate(req, this.context as IntegrationContext<Settings>);\n\n    const request = new Request(url, {\n      redirect: \"manual\",\n      cache: \"no-store\",\n      method: \"GET\",\n      headers: new Headers({\n        ...token,\n        \"Content-Type\": \"application/json\",\n        Accept: \"application/json\",\n      }),\n    });\n\n    return request;\n  }\n}\n","import { BehaviorSubject, Observable } from \"rxjs\";\n\nimport {\n  SingleUserState,\n  StateProvider,\n  UserKeyDefinition,\n} from \"@bitwarden/common/platform/state\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\n/** construct a method that outputs a copy of `defaultValue` as an observable. */\nexport function observe$PerUserId<Value>(\n  create: () => Partial<Value>,\n): (key: UserId) => Observable<Value> {\n  const _subjects = new Map<UserId, BehaviorSubject<Value>>();\n\n  return (key: UserId) => {\n    let value = _subjects.get(key);\n\n    if (value === undefined) {\n      const initialValue = create();\n      value = new BehaviorSubject({ ...initialValue } as Value);\n      _subjects.set(key, value);\n    }\n\n    return value.asObservable();\n  };\n}\n\n/** construct a method that caches user-specific states by userid. */\nexport function sharedByUserId<Value>(create: (userId: UserId) => SingleUserState<Value>) {\n  const _subjects = new Map<UserId, SingleUserState<Value>>();\n\n  return (key: UserId) => {\n    let value = _subjects.get(key);\n\n    if (value === undefined) {\n      value = create(key);\n      _subjects.set(key, value);\n    }\n\n    return value;\n  };\n}\n\n/** construct a method that loads a user-specific state from the provider. */\nexport function sharedStateByUserId<Value>(key: UserKeyDefinition<Value>, provider: StateProvider) {\n  return (id: UserId) => provider.getUser<Value>(id, key);\n}\n\n/** returns the sum of items in the list. */\nexport const sum = (...items: number[]) =>\n  (items ?? []).reduce((sum: number, current: number) => sum + (current ?? 0), 0);\n","import { Jsonify } from \"type-fest\";\n\nimport { IntegrationRequest } from \"@bitwarden/common/tools/integration/rpc\";\nimport { Classifier } from \"@bitwarden/common/tools/state/classifier\";\n\n/** Classifies an object by excluding IntegrationRequest parameters.\n */\nexport class OptionsClassifier<\n  Settings,\n  Options extends IntegrationRequest & Settings = IntegrationRequest & Settings,\n> implements Classifier<Options, Record<string, never>, Settings>\n{\n  /** Partitions `secret` into its disclosed properties and secret properties.\n   *  @param value The object to partition\n   *  @returns an object that classifies secrets.\n   *    The `disclosed` member is new and contains disclosed properties.\n   *    The `secret` member is a copy of the secret parameter, including its\n   *    prototype, with all disclosed and excluded properties deleted.\n   */\n  classify(value: Options) {\n    const secret = JSON.parse(JSON.stringify(value));\n    delete secret.website;\n    const disclosed: Record<string, never> = {};\n    return { disclosed, secret };\n  }\n\n  /** Merges the properties of `secret` and `disclosed`. When `secret` and\n   *  `disclosed` contain the same property, the `secret` property overrides\n   *  the `disclosed` property.\n   *  @param disclosed an object whose disclosed properties are merged into\n   *    the output. Unknown properties are ignored.\n   *  @param secret an objects whose properties are merged into the output.\n   *    Excluded properties are ignored. Unknown properties are retained.\n   *  @returns a new object containing the merged data.\n   *\n   *  @remarks Declassified data is always jsonified--the purpose of classifying it is\n   *   to Jsonify it,\n   *   which causes type conversions.\n   */\n  declassify(_disclosed: Jsonify<Record<keyof Settings, never>>, secret: Jsonify<Settings>) {\n    const result = { ...(secret as any), website: null };\n    return result as Jsonify<Options>;\n  }\n}\n","import { filter, map } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { SingleUserState, StateProvider } from \"@bitwarden/common/platform/state\";\nimport {\n  ApiSettings,\n  IntegrationRequest,\n  RestClient,\n} from \"@bitwarden/common/tools/integration/rpc\";\nimport { BufferedState } from \"@bitwarden/common/tools/state/buffered-state\";\nimport { PaddedDataPacker } from \"@bitwarden/common/tools/state/padded-data-packer\";\nimport { SecretKeyDefinition } from \"@bitwarden/common/tools/state/secret-key-definition\";\nimport { SecretState } from \"@bitwarden/common/tools/state/secret-state\";\nimport { UserKeyEncryptor } from \"@bitwarden/common/tools/state/user-key-encryptor\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { GeneratorStrategy } from \"../abstractions\";\nimport { ForwarderConfiguration, AccountRequest, ForwarderContext } from \"../engine\";\nimport { CreateForwardingAddressRpc } from \"../engine/rpc/create-forwarding-address\";\nimport { GetAccountIdRpc } from \"../engine/rpc/get-account-id\";\nimport { newDefaultEvaluator } from \"../rx\";\nimport { NoPolicy } from \"../types\";\nimport { observe$PerUserId, sharedByUserId } from \"../util\";\n\nimport { OptionsClassifier } from \"./options-classifier\";\n\nconst OPTIONS_FRAME_SIZE = 512;\n\n/** An email forwarding service configurable through an API. */\nexport class ForwarderGeneratorStrategy<\n  Settings extends ApiSettings,\n  Options extends Settings & IntegrationRequest = Settings & IntegrationRequest,\n> extends GeneratorStrategy<Options, NoPolicy> {\n  /** Initializes the generator strategy\n   *  @param encryptService protects sensitive forwarder options\n   *  @param keyService looks up the user key when protecting data.\n   *  @param stateProvider creates the durable state for options storage\n   */\n  constructor(\n    private readonly configuration: ForwarderConfiguration<Settings>,\n    private client: RestClient,\n    private i18nService: I18nService,\n    private readonly encryptService: EncryptService,\n    private readonly keyService: CryptoService,\n    private stateProvider: StateProvider,\n  ) {\n    super();\n  }\n\n  // configuration\n  readonly policy = PolicyType.PasswordGenerator;\n  defaults$ = observe$PerUserId<Options>(\n    () => this.configuration.forwarder.defaultSettings as Options,\n  );\n  toEvaluator = newDefaultEvaluator<Options>();\n  durableState = sharedByUserId((userId) => this.getUserSecrets(userId));\n\n  private get key() {\n    return this.configuration.forwarder.settings;\n  }\n\n  private get rolloverKey() {\n    return this.configuration.forwarder.importBuffer;\n  }\n\n  generate = async (options: Options) => {\n    const requestOptions: IntegrationRequest & AccountRequest = { website: options.website };\n\n    const getAccount = await this.getAccountId(this.configuration, options);\n    if (getAccount) {\n      requestOptions.accountId = await this.client.fetchJson(getAccount, requestOptions);\n    }\n\n    const create = this.createForwardingAddress(this.configuration, options);\n    const result = await this.client.fetchJson(create, requestOptions);\n    return result;\n  };\n\n  // per-user encrypted state\n  private getUserSecrets(userId: UserId): SingleUserState<Options> {\n    // construct the encryptor\n    const packer = new PaddedDataPacker(OPTIONS_FRAME_SIZE);\n    const encryptor$ = this.keyService.userKey$(userId).pipe(\n      map((key) => (key ? new UserKeyEncryptor(userId, this.encryptService, key, packer) : null)),\n      filter((encryptor) => !!encryptor),\n    );\n\n    // always exclude request properties\n    const classifier = new OptionsClassifier<Settings, Options>();\n\n    // Derive the secret key definition\n    const key = SecretKeyDefinition.value<Options, Record<string, never>, Settings>(\n      this.key.stateDefinition,\n      this.key.key,\n      classifier,\n      {\n        deserializer: (d: Jsonify<Options>) => this.key.deserializer(d as any) as any,\n        cleanupDelayMs: this.key.cleanupDelayMs,\n        clearOn: this.key.clearOn,\n      },\n    );\n\n    // the type parameter is explicit because type inference fails for `Omit<Options, \"website\">`\n    const secretState = SecretState.from<Options, void, Options, Record<string, never>, Settings>(\n      userId,\n      key,\n      this.stateProvider,\n      encryptor$,\n    );\n\n    // rollover should occur once the user key is available for decryption\n    const canDecrypt$ = this.keyService.userKey$(userId).pipe(map((key) => key !== null));\n    const rolloverState = new BufferedState(\n      this.stateProvider,\n      this.rolloverKey,\n      secretState,\n      canDecrypt$,\n    );\n\n    // cast through unknown required because there's no way to prove to\n    // the compiler that `OptionsClassifier` runs within the buffer wrapping\n    // the secret state.\n    return rolloverState as unknown as SingleUserState<Options>;\n  }\n\n  private createContext<Settings>(\n    configuration: ForwarderConfiguration<Settings>,\n    settings: Settings,\n  ) {\n    return new ForwarderContext(configuration, settings, this.i18nService);\n  }\n\n  private createForwardingAddress<Settings extends ApiSettings>(\n    configuration: ForwarderConfiguration<Settings>,\n    settings: Settings,\n  ) {\n    const context = this.createContext(configuration, settings);\n    const rpc = new CreateForwardingAddressRpc<Settings>(configuration, context);\n    return rpc;\n  }\n\n  private getAccountId<Settings extends ApiSettings>(\n    configuration: ForwarderConfiguration<Settings>,\n    settings: Settings,\n  ) {\n    if (!configuration.forwarder.getAccountId) {\n      return null;\n    }\n\n    const context = this.createContext(configuration, settings);\n    const rpc = new GetAccountIdRpc<Settings>(configuration, context);\n\n    return rpc;\n  }\n}\n","import { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\n\nimport { GeneratorStrategy } from \"../abstractions\";\nimport { DefaultPassphraseBoundaries, DefaultPassphraseGenerationOptions, Policies } from \"../data\";\nimport { PasswordRandomizer } from \"../engine\";\nimport { mapPolicyToEvaluator } from \"../rx\";\nimport { PassphraseGenerationOptions, PassphraseGeneratorPolicy } from \"../types\";\nimport { observe$PerUserId, sharedStateByUserId } from \"../util\";\n\nimport { PASSPHRASE_SETTINGS } from \"./storage\";\n\n/** Generates passphrases composed of random words */\nexport class PassphraseGeneratorStrategy\n  implements GeneratorStrategy<PassphraseGenerationOptions, PassphraseGeneratorPolicy>\n{\n  /** instantiates the password generator strategy.\n   *  @param legacy generates the passphrase\n   *  @param stateProvider provides durable state\n   */\n  constructor(\n    private randomizer: PasswordRandomizer,\n    private stateProvider: StateProvider,\n  ) {}\n\n  // configuration\n  durableState = sharedStateByUserId(PASSPHRASE_SETTINGS, this.stateProvider);\n  defaults$ = observe$PerUserId(() => DefaultPassphraseGenerationOptions);\n  readonly policy = PolicyType.PasswordGenerator;\n  toEvaluator() {\n    return mapPolicyToEvaluator(Policies.Passphrase);\n  }\n\n  // algorithm\n  async generate(options: PassphraseGenerationOptions): Promise<string> {\n    const requestWords = options.numWords ?? DefaultPassphraseGenerationOptions.numWords;\n    const request = {\n      numberOfWords: Math.max(requestWords, DefaultPassphraseBoundaries.numWords.min),\n      capitalize: options.capitalize ?? DefaultPassphraseGenerationOptions.capitalize,\n      number: options.includeNumber ?? DefaultPassphraseGenerationOptions.includeNumber,\n      separator: options.wordSeparator ?? DefaultPassphraseGenerationOptions.wordSeparator,\n    };\n\n    return this.randomizer.randomEffLongWords(request);\n  }\n}\n","import { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\n\nimport { GeneratorStrategy } from \"../abstractions\";\nimport { Policies, DefaultPasswordGenerationOptions } from \"../data\";\nimport { PasswordRandomizer } from \"../engine\";\nimport { mapPolicyToEvaluator } from \"../rx\";\nimport { PasswordGenerationOptions, PasswordGeneratorPolicy } from \"../types\";\nimport { observe$PerUserId, sharedStateByUserId, sum } from \"../util\";\n\nimport { PASSWORD_SETTINGS } from \"./storage\";\n\n/** Generates passwords composed of random characters */\nexport class PasswordGeneratorStrategy\n  implements GeneratorStrategy<PasswordGenerationOptions, PasswordGeneratorPolicy>\n{\n  /** instantiates the password generator strategy.\n   *  @param legacy generates the password\n   */\n  constructor(\n    private randomizer: PasswordRandomizer,\n    private stateProvider: StateProvider,\n  ) {}\n\n  // configuration\n  durableState = sharedStateByUserId(PASSWORD_SETTINGS, this.stateProvider);\n  defaults$ = observe$PerUserId(() => DefaultPasswordGenerationOptions);\n  readonly policy = PolicyType.PasswordGenerator;\n  toEvaluator() {\n    return mapPolicyToEvaluator(Policies.Password);\n  }\n\n  // algorithm\n  async generate(options: PasswordGenerationOptions): Promise<string> {\n    // converts password generation option sets, which are defined by\n    // an \"enabled\" and \"quantity\" parameter, to the password engine's\n    // parameters, which represent disabled options as `undefined`\n    // properties.\n    function process(\n      // values read from the options\n      enabled: boolean,\n      quantity: number,\n      // value used if an option is missing\n      defaultEnabled: boolean,\n      defaultQuantity: number,\n    ) {\n      const isEnabled = enabled ?? defaultEnabled;\n      const actualQuantity = quantity ?? defaultQuantity;\n      const result = isEnabled ? actualQuantity : undefined;\n\n      return result;\n    }\n\n    const request = {\n      uppercase: process(\n        options.uppercase,\n        options.minUppercase,\n        DefaultPasswordGenerationOptions.uppercase,\n        DefaultPasswordGenerationOptions.minUppercase,\n      ),\n      lowercase: process(\n        options.lowercase,\n        options.minLowercase,\n        DefaultPasswordGenerationOptions.lowercase,\n        DefaultPasswordGenerationOptions.minLowercase,\n      ),\n      digits: process(\n        options.number,\n        options.minNumber,\n        DefaultPasswordGenerationOptions.number,\n        DefaultPasswordGenerationOptions.minNumber,\n      ),\n      special: process(\n        options.special,\n        options.minSpecial,\n        DefaultPasswordGenerationOptions.special,\n        DefaultPasswordGenerationOptions.minSpecial,\n      ),\n      ambiguous: options.ambiguous ?? DefaultPasswordGenerationOptions.ambiguous,\n      all: 0,\n    };\n\n    // engine represents character sets as \"include only\"; you assert how many all\n    // characters there can be rather than a total length. This conversion has\n    // the character classes win, so that the result is always consistent with policy\n    // minimums.\n    const required = sum(request.uppercase, request.lowercase, request.digits, request.special);\n    const remaining = (options.length ?? 0) - required;\n    request.all = Math.max(remaining, 0);\n\n    const result = await this.randomizer.randomAscii(request);\n\n    return result;\n  }\n}\n","import { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\n\nimport { GeneratorStrategy } from \"../abstractions\";\nimport { DefaultCatchallOptions } from \"../data\";\nimport { EmailCalculator, EmailRandomizer } from \"../engine\";\nimport { newDefaultEvaluator } from \"../rx\";\nimport { NoPolicy, CatchallGenerationOptions } from \"../types\";\nimport { observe$PerUserId, sharedStateByUserId } from \"../util\";\n\nimport { CATCHALL_SETTINGS } from \"./storage\";\n\n/** Strategy for creating usernames using a catchall email address */\nexport class CatchallGeneratorStrategy\n  implements GeneratorStrategy<CatchallGenerationOptions, NoPolicy>\n{\n  /** Instantiates the generation strategy\n   *  @param usernameService generates a catchall address for a domain\n   */\n  constructor(\n    private emailCalculator: EmailCalculator,\n    private emailRandomizer: EmailRandomizer,\n    private stateProvider: StateProvider,\n    private defaultOptions: CatchallGenerationOptions = DefaultCatchallOptions,\n  ) {}\n\n  // configuration\n  durableState = sharedStateByUserId(CATCHALL_SETTINGS, this.stateProvider);\n  defaults$ = observe$PerUserId(() => this.defaultOptions);\n  toEvaluator = newDefaultEvaluator<CatchallGenerationOptions>();\n  readonly policy = PolicyType.PasswordGenerator;\n\n  // algorithm\n  async generate(options: CatchallGenerationOptions) {\n    if (options.catchallType == null) {\n      options.catchallType = \"random\";\n    }\n\n    if (options.catchallType === \"website-name\") {\n      return await this.emailCalculator.concatenate(options.website, options.catchallDomain);\n    }\n\n    return this.emailRandomizer.randomAsciiCatchall(options.catchallDomain);\n  }\n}\n","import { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\n\nimport { GeneratorStrategy } from \"../abstractions\";\nimport { DefaultSubaddressOptions } from \"../data\";\nimport { EmailCalculator, EmailRandomizer } from \"../engine\";\nimport { newDefaultEvaluator } from \"../rx\";\nimport { SubaddressGenerationOptions, NoPolicy } from \"../types\";\nimport { observe$PerUserId, sharedStateByUserId } from \"../util\";\n\nimport { SUBADDRESS_SETTINGS } from \"./storage\";\n\n/** Strategy for creating an email subaddress\n *  @remarks The subaddress is the part following the `+`.\n *  For example, if the email address is `jd+xyz@domain.io`,\n *  the subaddress is `xyz`.\n */\nexport class SubaddressGeneratorStrategy\n  implements GeneratorStrategy<SubaddressGenerationOptions, NoPolicy>\n{\n  /** Instantiates the generation strategy\n   *  @param usernameService generates an email subaddress from an email address\n   */\n  constructor(\n    private emailCalculator: EmailCalculator,\n    private emailRandomizer: EmailRandomizer,\n    private stateProvider: StateProvider,\n    private defaultOptions: SubaddressGenerationOptions = DefaultSubaddressOptions,\n  ) {}\n\n  // configuration\n  durableState = sharedStateByUserId(SUBADDRESS_SETTINGS, this.stateProvider);\n  defaults$ = observe$PerUserId(() => this.defaultOptions);\n  toEvaluator = newDefaultEvaluator<SubaddressGenerationOptions>();\n  readonly policy = PolicyType.PasswordGenerator;\n\n  // algorithm\n  async generate(options: SubaddressGenerationOptions) {\n    if (options.subaddressType == null) {\n      options.subaddressType = \"random\";\n    }\n\n    if (options.subaddressType === \"website-name\") {\n      return this.emailCalculator.appendToSubaddress(options.website, options.subaddressEmail);\n    }\n\n    return this.emailRandomizer.randomAsciiSubaddress(options.subaddressEmail);\n  }\n}\n","import { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\n\nimport { GeneratorStrategy } from \"../abstractions\";\nimport { DefaultEffUsernameOptions, UsernameDigits } from \"../data\";\nimport { UsernameRandomizer } from \"../engine\";\nimport { newDefaultEvaluator } from \"../rx\";\nimport { EffUsernameGenerationOptions, NoPolicy } from \"../types\";\nimport { observe$PerUserId, sharedStateByUserId } from \"../util\";\n\nimport { EFF_USERNAME_SETTINGS } from \"./storage\";\n\n/** Strategy for creating usernames from the EFF wordlist */\nexport class EffUsernameGeneratorStrategy\n  implements GeneratorStrategy<EffUsernameGenerationOptions, NoPolicy>\n{\n  /** Instantiates the generation strategy\n   *  @param usernameService generates a username from EFF word list\n   */\n  constructor(\n    private randomizer: UsernameRandomizer,\n    private stateProvider: StateProvider,\n    private defaultOptions: EffUsernameGenerationOptions = DefaultEffUsernameOptions,\n  ) {}\n\n  // configuration\n  durableState = sharedStateByUserId(EFF_USERNAME_SETTINGS, this.stateProvider);\n  defaults$ = observe$PerUserId(() => this.defaultOptions);\n  toEvaluator = newDefaultEvaluator<EffUsernameGenerationOptions>();\n  readonly policy = PolicyType.PasswordGenerator;\n\n  // algorithm\n  async generate(options: EffUsernameGenerationOptions) {\n    const casing =\n      (options.wordCapitalize ?? DefaultEffUsernameOptions.wordCapitalize)\n        ? \"TitleCase\"\n        : \"lowercase\";\n    const digits =\n      (options.wordIncludeNumber ?? DefaultEffUsernameOptions.wordIncludeNumber)\n        ? UsernameDigits.enabled\n        : UsernameDigits.disabled;\n    const word = await this.randomizer.randomWords({ numberOfWords: 1, casing, digits });\n    return word;\n  }\n}\n","export class GeneratedPasswordHistory {\n  password: string;\n  date: number;\n\n  constructor(password: string, date: number) {\n    this.password = password;\n    this.date = date;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { GeneratorCategory } from \"./options\";\n\n/** A credential generation result */\nexport class GeneratedCredential {\n  /**\n   * Instantiates a generated credential\n   * @param credential The value of the generated credential (e.g. a password)\n   * @param category The kind of credential\n   * @param generationDate The date that the credential was generated.\n   *   Numeric values should are interpreted using {@link Date.valueOf}\n   *   semantics.\n   */\n  constructor(\n    readonly credential: string,\n    readonly category: GeneratorCategory,\n    generationDate: Date | number,\n  ) {\n    if (typeof generationDate === \"number\") {\n      this.generationDate = new Date(generationDate);\n    } else {\n      this.generationDate = generationDate;\n    }\n  }\n\n  /** The date that the credential was generated */\n  generationDate: Date;\n\n  /** Constructs a credential from its `toJSON` representation */\n  static fromJSON(jsonValue: Jsonify<GeneratedCredential>) {\n    return new GeneratedCredential(\n      jsonValue.credential,\n      jsonValue.category,\n      jsonValue.generationDate,\n    );\n  }\n\n  /** Serializes a credential to a JSON-compatible object */\n  toJSON() {\n    return {\n      credential: this.credential,\n      category: this.category,\n      generationDate: this.generationDate.valueOf(),\n    };\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { GeneratedCredential } from \"./generated-credential\";\nimport { GeneratorCategory } from \"./options\";\n\n/** Tracks the history of password generations.\n *  Each user gets their own store.\n */\nexport abstract class GeneratorHistoryService {\n  /** Tracks a new credential. When an item with the same `credential` value\n   *  is found, this method does nothing. When the total number of items exceeds\n   *  {@link HistoryServiceOptions.maxTotal}, then the oldest items exceeding the total\n   *  are deleted.\n   *  @param userId identifies the user storing the credential.\n   *  @param credential stored by the history service.\n   *  @param date when the credential was generated. If this is omitted, then the generator\n   *    uses the date the credential was added to the store instead.\n   *  @returns a promise that completes with the added credential. If the credential\n   *    wasn't added, then the promise completes with `null`.\n   *  @remarks this service is not suitable for use with vault items/ciphers. It models only\n   *    a history of an individually generated credential, while a vault item's history\n   *    may contain several credentials that are better modelled as atomic versions of the\n   *    vault item itself.\n   */\n  track: (\n    userId: UserId,\n    credential: string,\n    category: GeneratorCategory,\n    date?: Date,\n  ) => Promise<GeneratedCredential | null>;\n\n  /** Removes a matching credential from the history service.\n   *  @param userId identifies the user taking the credential.\n   *  @param credential to match in the history service.\n   *  @returns A promise that completes with the credential read. If the credential wasn't found,\n   *    the promise completes with null.\n   *  @remarks this can be used to extract an entry when a credential is stored in the vault.\n   */\n  take: (userId: UserId, credential: string) => Promise<GeneratedCredential | null>;\n\n  /** Deletes a user's credential history.\n   *  @param userId identifies the user taking the credential.\n   *  @returns A promise that completes when the history is cleared.\n   */\n  clear: (userId: UserId) => Promise<GeneratedCredential[]>;\n\n  /** Lists all credentials for a user.\n   *  @param userId identifies the user listing the credential.\n   *  @remarks This field is eventually consistent with `track` and `take` operations.\n   *    It is not guaranteed to immediately reflect those changes.\n   */\n  credentials$: (userId: UserId) => Observable<GeneratedCredential[]>;\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { Classifier } from \"./classifier\";\n\n/** Classifies an object's JSON-serializable data by property into\n *  3 categories:\n *  * Disclosed data MAY be stored in plaintext.\n *  * Excluded data MUST NOT be saved.\n *  * The remaining data is secret and MUST be stored using encryption.\n *\n *  This type should not be used to classify functions.\n *  Data that cannot be serialized by JSON.stringify() should\n *  be excluded.\n */\nexport class SecretClassifier<Plaintext extends object, Disclosed, Secret>\n  implements Classifier<Plaintext, Disclosed, Secret>\n{\n  private constructor(\n    disclosed: readonly (keyof Jsonify<Disclosed> & keyof Jsonify<Plaintext>)[],\n    excluded: readonly (keyof Plaintext)[],\n  ) {\n    this.disclosed = disclosed;\n    this.excluded = excluded;\n  }\n\n  /** lists the disclosed properties. */\n  readonly disclosed: readonly (keyof Jsonify<Disclosed> & keyof Jsonify<Plaintext>)[];\n\n  /** lists the excluded properties. */\n  readonly excluded: readonly (keyof Plaintext)[];\n\n  /** Creates a classifier where all properties are secret.\n   *  @type {T} The type of secret being classified.\n   */\n  static allSecret<T extends object>() {\n    const disclosed = Object.freeze([]);\n    const excluded = Object.freeze([]);\n    return new SecretClassifier<T, Record<keyof T, never>, T>(disclosed, excluded);\n  }\n\n  /** Classify a property as disclosed.\n   *  @type {PropertyName} Available secrets to disclose.\n   *  @param disclose The property name to disclose.\n   *  @returns a new classifier\n   */\n  disclose<const PropertyName extends keyof Jsonify<Secret>>(disclose: PropertyName) {\n    // move the property from the secret type to the disclose type\n    type NewDisclosed = Disclosed | Record<PropertyName, Jsonify<Secret>[PropertyName]>;\n    type NewSecret = Omit<Secret, PropertyName>;\n\n    // update the fluent interface\n    const newDisclosed = [...this.disclosed, disclose] as (keyof Jsonify<NewDisclosed> &\n      keyof Jsonify<Plaintext>)[];\n    const classifier = new SecretClassifier<Plaintext, NewDisclosed, NewSecret>(\n      // since `NewDisclosed` is opaque to the type checker, it's necessary\n      // to assert the type of the array here.\n      Object.freeze(newDisclosed),\n      this.excluded,\n    );\n\n    return classifier;\n  }\n\n  /** Classify a property as excluded.\n   *  @type {PropertyName} Available secrets to exclude.\n   *  @param exclude The property name to exclude.\n   *  @returns a new classifier\n   */\n  exclude<const PropertyName extends keyof Secret>(excludedPropertyName: PropertyName) {\n    // remove the property from the secret type\n    type NewConfidential = Omit<Secret, PropertyName>;\n\n    // update the fluent interface\n    const newExcluded = [...this.excluded, excludedPropertyName] as (keyof Plaintext)[];\n    const classifier = new SecretClassifier<Plaintext, Disclosed, NewConfidential>(\n      this.disclosed,\n      Object.freeze(newExcluded),\n    );\n\n    return classifier;\n  }\n\n  /** Partitions `secret` into its disclosed properties and secret properties.\n   *  @param value The object to partition\n   *  @returns an object that classifies secrets.\n   *    The `disclosed` member is new and contains disclosed properties.\n   *    The `secret` member is a copy of the secret parameter, including its\n   *    prototype, with all disclosed and excluded properties deleted.\n   */\n  classify(value: Plaintext): { disclosed: Jsonify<Disclosed>; secret: Jsonify<Secret> } {\n    // need to JSONify during classification because the prototype is almost guaranteed\n    // to be invalid when this  method deletes arbitrary properties.\n    const secret = JSON.parse(JSON.stringify(value)) as Record<keyof Plaintext, unknown>;\n\n    for (const excludedProp of this.excluded) {\n      delete secret[excludedProp];\n    }\n\n    const disclosed: Record<PropertyKey, unknown> = {};\n    for (const disclosedProp of this.disclosed) {\n      // disclosedProp is known to be a subset of the keys of `Plaintext`, so these\n      // type assertions are accurate.\n      // FIXME: prove it to the compiler\n      disclosed[disclosedProp] = secret[disclosedProp as keyof Plaintext];\n      delete secret[disclosedProp as keyof Plaintext];\n    }\n\n    return {\n      disclosed: disclosed as Jsonify<Disclosed>,\n      secret: secret as Jsonify<Secret>,\n    };\n  }\n\n  /** Merges the properties of `secret` and `disclosed`. When `secret` and\n   *  `disclosed` contain the same property, the `secret` property overrides\n   *  the `disclosed` property.\n   *  @param disclosed an object whose disclosed properties are merged into\n   *    the output. Unknown properties are ignored.\n   *  @param secret an objects whose properties are merged into the output.\n   *    Excluded properties are ignored. Unknown properties are retained.\n   *  @returns a new object containing the merged data.\n   */\n  // Declassified data is always jsonified--the purpose of classifying it is to Jsonify it,\n  // which causes type conversions.\n  declassify(disclosed: Jsonify<Disclosed>, secret: Jsonify<Secret>): Jsonify<Plaintext> {\n    // removed unknown keys from `disclosed` to prevent any old edit\n    // of plaintext data from being laundered though declassification.\n    const cleaned = {} as Partial<Jsonify<Disclosed>>;\n    for (const disclosedProp of this.disclosed) {\n      cleaned[disclosedProp] = disclosed[disclosedProp];\n    }\n\n    // merge decrypted into cleaned so that secret data clobbers public data\n    const merged: any = Object.assign(cleaned, secret);\n\n    // delete excluded props\n    for (const excludedProp of this.excluded) {\n      delete merged[excludedProp];\n    }\n\n    return merged as Jsonify<Plaintext>;\n  }\n}\n","import { Jsonify } from \"type-fest\";\n\nimport { GENERATOR_DISK } from \"@bitwarden/common/platform/state\";\nimport { BufferedKeyDefinition } from \"@bitwarden/common/tools/state/buffered-key-definition\";\nimport { SecretClassifier } from \"@bitwarden/common/tools/state/secret-classifier\";\nimport { SecretKeyDefinition } from \"@bitwarden/common/tools/state/secret-key-definition\";\n\nimport { GeneratedCredential } from \"./generated-credential\";\nimport { GeneratedPasswordHistory } from \"./generated-password-history\";\nimport { LegacyPasswordHistoryDecryptor } from \"./legacy-password-history-decryptor\";\n\n/** encrypted password generation history */\nexport const GENERATOR_HISTORY = SecretKeyDefinition.array(\n  GENERATOR_DISK,\n  \"localGeneratorHistory\",\n  SecretClassifier.allSecret<GeneratedCredential>(),\n  {\n    deserializer: GeneratedCredential.fromJSON,\n    clearOn: [\"logout\"],\n  },\n);\n\n/** encrypted password generation history subject to migration */\nexport const GENERATOR_HISTORY_BUFFER = new BufferedKeyDefinition<\n  GeneratedPasswordHistory[],\n  GeneratedCredential[],\n  LegacyPasswordHistoryDecryptor\n>(GENERATOR_DISK, \"localGeneratorHistoryBuffer\", {\n  deserializer(history) {\n    const items = history as Jsonify<GeneratedPasswordHistory>[];\n    return items?.map((h) => new GeneratedPasswordHistory(h.password, h.date));\n  },\n  async isValid(history) {\n    return history.length ? true : false;\n  },\n  async map(history, decryptor) {\n    const credentials = await decryptor.decrypt(history);\n    const mapped = credentials.map((c) => new GeneratedCredential(c.password, \"password\", c.date));\n    return mapped;\n  },\n  clearOn: [\"logout\"],\n});\n","import { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { GeneratedPasswordHistory } from \"./generated-password-history\";\n\n/** Strategy that decrypts a password history */\nexport class LegacyPasswordHistoryDecryptor {\n  constructor(\n    private userId: UserId,\n    private cryptoService: CryptoService,\n    private encryptService: EncryptService,\n  ) {}\n\n  /** Decrypts a password history. */\n  async decrypt(history: GeneratedPasswordHistory[]): Promise<GeneratedPasswordHistory[]> {\n    const key = await this.cryptoService.getUserKey(this.userId);\n\n    const promises = (history ?? []).map(async (item) => {\n      const encrypted = new EncString(item.password);\n      const decrypted = await this.encryptService.decryptToUtf8(encrypted, key);\n      return new GeneratedPasswordHistory(decrypted, item.date);\n    });\n\n    const decrypted = await Promise.all(promises);\n\n    return decrypted;\n  }\n}\n","import { filter, map } from \"rxjs\";\n\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { SingleUserState, StateProvider } from \"@bitwarden/common/platform/state\";\nimport { BufferedState } from \"@bitwarden/common/tools/state/buffered-state\";\nimport { PaddedDataPacker } from \"@bitwarden/common/tools/state/padded-data-packer\";\nimport { SecretState } from \"@bitwarden/common/tools/state/secret-state\";\nimport { UserKeyEncryptor } from \"@bitwarden/common/tools/state/user-key-encryptor\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { GeneratedCredential } from \"./generated-credential\";\nimport { GeneratorHistoryService } from \"./generator-history.abstraction\";\nimport { GENERATOR_HISTORY, GENERATOR_HISTORY_BUFFER } from \"./key-definitions\";\nimport { LegacyPasswordHistoryDecryptor } from \"./legacy-password-history-decryptor\";\nimport { GeneratorCategory, HistoryServiceOptions } from \"./options\";\n\nconst OPTIONS_FRAME_SIZE = 2048;\n\n/** Tracks the history of password generations local to a device.\n *  {@link GeneratorHistoryService}\n */\nexport class LocalGeneratorHistoryService extends GeneratorHistoryService {\n  constructor(\n    private readonly encryptService: EncryptService,\n    private readonly keyService: CryptoService,\n    private readonly stateProvider: StateProvider,\n    private readonly options: HistoryServiceOptions = { maxTotal: 100 },\n  ) {\n    super();\n  }\n\n  private _credentialStates = new Map<UserId, SingleUserState<GeneratedCredential[]>>();\n\n  /** {@link GeneratorHistoryService.track} */\n  track = async (userId: UserId, credential: string, category: GeneratorCategory, date?: Date) => {\n    const state = this.getCredentialState(userId);\n    let result: GeneratedCredential = null;\n\n    await state.update(\n      (credentials) => {\n        credentials = credentials ?? [];\n\n        // add the result\n        result = new GeneratedCredential(credential, category, date ?? Date.now());\n        credentials.unshift(result);\n\n        // trim history\n        const removeAt = Math.max(0, this.options.maxTotal);\n        credentials.splice(removeAt, Infinity);\n\n        return credentials;\n      },\n      {\n        shouldUpdate: (credentials) =>\n          !(credentials?.some((f) => f.credential === credential) ?? false),\n      },\n    );\n\n    return result;\n  };\n\n  /** {@link GeneratorHistoryService.take} */\n  take = async (userId: UserId, credential: string) => {\n    const state = this.getCredentialState(userId);\n    let credentialIndex: number;\n    let result: GeneratedCredential = null;\n\n    await state.update(\n      (credentials) => {\n        credentials = credentials ?? [];\n\n        [result] = credentials.splice(credentialIndex, 1);\n        return credentials;\n      },\n      {\n        shouldUpdate: (credentials) => {\n          credentialIndex = credentials?.findIndex((f) => f.credential === credential) ?? -1;\n          return credentialIndex >= 0;\n        },\n      },\n    );\n\n    return result;\n  };\n\n  /** {@link GeneratorHistoryService.take} */\n  clear = async (userId: UserId) => {\n    const state = this.getCredentialState(userId);\n    const result = (await state.update(() => null)) ?? [];\n    return result;\n  };\n\n  /** {@link GeneratorHistoryService.credentials$} */\n  credentials$ = (userId: UserId) => {\n    return this.getCredentialState(userId).state$.pipe(map((credentials) => credentials ?? []));\n  };\n\n  private getCredentialState(userId: UserId) {\n    let state = this._credentialStates.get(userId);\n\n    if (!state) {\n      state = this.createSecretState(userId);\n      this._credentialStates.set(userId, state);\n    }\n\n    return state;\n  }\n\n  private createSecretState(userId: UserId): SingleUserState<GeneratedCredential[]> {\n    // construct the encryptor\n    const packer = new PaddedDataPacker(OPTIONS_FRAME_SIZE);\n    const encryptor$ = this.keyService.userKey$(userId).pipe(\n      map((key) => (key ? new UserKeyEncryptor(userId, this.encryptService, key, packer) : null)),\n      filter((encryptor) => !!encryptor),\n    );\n\n    // construct the durable state\n    const state = SecretState.from<\n      GeneratedCredential[],\n      number,\n      GeneratedCredential,\n      Record<keyof GeneratedCredential, never>,\n      GeneratedCredential\n    >(userId, GENERATOR_HISTORY, this.stateProvider, encryptor$);\n\n    // decryptor is just an algorithm, but it can't run until the key is available;\n    // providing it via an observable makes running it early impossible\n    const decryptor = new LegacyPasswordHistoryDecryptor(\n      userId,\n      this.keyService,\n      this.encryptService,\n    );\n    const decryptor$ = this.keyService.userKey$(userId).pipe(map((key) => key && decryptor));\n\n    // move data from the old password history once decryptor is available\n    const buffer = new BufferedState(\n      this.stateProvider,\n      GENERATOR_HISTORY_BUFFER,\n      state,\n      decryptor$,\n    );\n\n    return buffer;\n  }\n}\n","import { GeneratorNavigation } from \"./generator-navigation\";\n\n/** The default options for password generation. */\nexport const DefaultGeneratorNavigation: Partial<GeneratorNavigation> = Object.freeze({\n  type: \"password\",\n  username: \"word\",\n  forwarder: \"\",\n});\n","import { PasswordTypes, PolicyEvaluator } from \"@bitwarden/generator-core\";\n\nimport { DefaultGeneratorNavigation } from \"./default-generator-navigation\";\nimport { GeneratorNavigation } from \"./generator-navigation\";\nimport { GeneratorNavigationPolicy } from \"./generator-navigation-policy\";\n\n/** Enforces policy for generator navigation options.\n */\nexport class GeneratorNavigationEvaluator\n  implements PolicyEvaluator<GeneratorNavigationPolicy, GeneratorNavigation>\n{\n  /** Instantiates the evaluator.\n   * @param policy The policy applied by the evaluator. When this conflicts with\n   *               the defaults, the policy takes precedence.\n   */\n  constructor(readonly policy: GeneratorNavigationPolicy) {}\n\n  /** {@link PolicyEvaluator.policyInEffect} */\n  get policyInEffect(): boolean {\n    return PasswordTypes.includes(this.policy?.overridePasswordType);\n  }\n\n  /** Apply policy to the input options.\n   *  @param options The options to build from. These options are not altered.\n   *  @returns A new password generation request with policy applied.\n   */\n  applyPolicy(options: GeneratorNavigation): GeneratorNavigation {\n    const result = { ...options };\n\n    if (this.policyInEffect) {\n      result.type = this.policy.overridePasswordType ?? result.type;\n    }\n\n    return result;\n  }\n\n  /** Ensures internal options consistency.\n   *  @param options The options to cascade. These options are not altered.\n   *  @returns A passphrase generation request with cascade applied.\n   */\n  sanitize(options: GeneratorNavigation): GeneratorNavigation {\n    return {\n      ...options,\n      type: options.type ?? DefaultGeneratorNavigation.type,\n    };\n  }\n}\n","import { PolicyType } from \"@bitwarden/common/admin-console/enums\";\n// FIXME: use index.ts imports once policy abstractions and models\n// implement ADR-0002\nimport { Policy } from \"@bitwarden/common/admin-console/models/domain/policy\";\nimport { PasswordType } from \"@bitwarden/generator-core\";\n\n/** Policy settings affecting password generator navigation */\nexport type GeneratorNavigationPolicy = {\n  /** The type of generator that should be shown by default when opening\n   *  the password generator.\n   */\n  overridePasswordType?: PasswordType;\n};\n\n/** Reduces a policy into an accumulator by preferring the password generator\n *  type to other generator types.\n *  @param acc the accumulator\n *  @param policy the policy to reduce\n *  @returns the resulting `GeneratorNavigationPolicy`\n */\nexport function preferPassword(\n  acc: GeneratorNavigationPolicy,\n  policy: Policy,\n): GeneratorNavigationPolicy {\n  const isEnabled = policy.type === PolicyType.PasswordGenerator && policy.enabled;\n  if (!isEnabled) {\n    return acc;\n  }\n\n  const isOverridable = acc.overridePasswordType !== \"password\" && policy.data.overridePasswordType;\n  const result = isOverridable\n    ? { ...acc, overridePasswordType: policy.data.overridePasswordType }\n    : acc;\n\n  return result;\n}\n\n/** The default options for password generation policy. */\nexport const DisabledGeneratorNavigationPolicy: GeneratorNavigationPolicy = Object.freeze({\n  overridePasswordType: null,\n});\n","import { GENERATOR_DISK, UserKeyDefinition } from \"@bitwarden/common/platform/state\";\n\nimport { GeneratorNavigation } from \"./generator-navigation\";\n\n/** plaintext password generation options */\nexport const GENERATOR_SETTINGS = new UserKeyDefinition<GeneratorNavigation>(\n  GENERATOR_DISK,\n  \"generatorSettings\",\n  {\n    deserializer: (value) => value,\n    clearOn: [\"logout\"],\n  },\n);\n","import { BehaviorSubject, Observable, firstValueFrom, map } from \"rxjs\";\n\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { distinctIfShallowMatch, reduceCollection } from \"@bitwarden/common/tools/rx\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\n\nimport { DefaultGeneratorNavigation } from \"./default-generator-navigation\";\nimport { GeneratorNavigation } from \"./generator-navigation\";\nimport { GeneratorNavigationEvaluator } from \"./generator-navigation-evaluator\";\nimport { DisabledGeneratorNavigationPolicy, preferPassword } from \"./generator-navigation-policy\";\nimport { GeneratorNavigationService } from \"./generator-navigation.service.abstraction\";\nimport { GENERATOR_SETTINGS } from \"./key-definitions\";\n\nexport class DefaultGeneratorNavigationService implements GeneratorNavigationService {\n  /** instantiates the password generator strategy.\n   * @param stateProvider provides durable state\n   * @param policy provides the policy to enforce\n   */\n  constructor(\n    private readonly stateProvider: StateProvider,\n    private readonly policy: PolicyService,\n  ) {}\n\n  /** An observable monitoring the options saved to disk.\n   *  The observable updates when the options are saved.\n   *   @param userId: Identifies the user making the request\n   */\n  options$(userId: UserId): Observable<GeneratorNavigation> {\n    return this.stateProvider.getUserState$(GENERATOR_SETTINGS, userId);\n  }\n\n  /** Gets the default options. */\n  defaults$(userId: UserId): Observable<GeneratorNavigation> {\n    return new BehaviorSubject({ ...DefaultGeneratorNavigation });\n  }\n\n  /** An observable monitoring the options used to enforce policy.\n   *  The observable updates when the policy changes.\n   *  @param userId: Identifies the user making the request\n   */\n  evaluator$(userId: UserId) {\n    const evaluator$ = this.policy.getAll$(PolicyType.PasswordGenerator, userId).pipe(\n      reduceCollection(preferPassword, DisabledGeneratorNavigationPolicy),\n      distinctIfShallowMatch(),\n      map((policy) => new GeneratorNavigationEvaluator(policy)),\n    );\n\n    return evaluator$;\n  }\n\n  /** Enforces the policy on the given options\n   * @param userId: Identifies the user making the request\n   * @param options the options to enforce the policy on\n   * @returns a new instance of the options with the policy enforced\n   */\n  async enforcePolicy(userId: UserId, options: GeneratorNavigation) {\n    const evaluator = await firstValueFrom(this.evaluator$(userId));\n    const applied = evaluator.applyPolicy(options);\n    const sanitized = evaluator.sanitize(applied);\n    return sanitized;\n  }\n\n  /** Saves the navigation options to disk.\n   * @param userId: Identifies the user making the request\n   * @param options the options to save\n   * @returns a promise that resolves when the options are saved\n   */\n  async saveOptions(userId: UserId, options: GeneratorNavigation): Promise<void> {\n    await this.stateProvider.setUserState(GENERATOR_SETTINGS, options, userId);\n  }\n}\n","import Domain from \"../../../platform/models/domain/domain-base\";\n\n/** Enterprise policy for the password generator.\n * @see PolicyType.PasswordGenerator\n */\nexport class PasswordGeneratorPolicyOptions extends Domain {\n  /** The default kind of credential to generate */\n  overridePasswordType: \"password\" | \"passphrase\" | \"\" = \"\";\n\n  /** The minimum length of generated passwords.\n   *  When this is less than or equal to zero, it is ignored.\n   *  If this is less than the total number of characters required by\n   *  the policy's other settings, then it is ignored.\n   *  This field is not used for passphrases.\n   */\n  minLength = 0;\n\n  /** When this is true, an uppercase character must be part of\n   *  the generated password.\n   *  This field is not used for passphrases.\n   */\n  useUppercase = false;\n\n  /** When this is true, a lowercase character must be part of\n   *  the generated password. This field is not used for passphrases.\n   */\n  useLowercase = false;\n\n  /** When this is true, at least one digit must be part of the generated\n   *  password. This field is not used for passphrases.\n   */\n  useNumbers = false;\n\n  /** The quantity of digits to include in the generated password.\n   *  When this is less than or equal to zero, it is ignored.\n   *  This field is not used for passphrases.\n   */\n  numberCount = 0;\n\n  /** When this is true, at least one digit must be part of the generated\n   *  password. This field is not used for passphrases.\n   */\n  useSpecial = false;\n\n  /** The quantity of special characters to include in the generated\n   *  password. When this is less than or equal to zero, it is ignored.\n   *  This field is not used for passphrases.\n   */\n  specialCount = 0;\n\n  /** The minimum number of words required by generated passphrases.\n   *  This field is not used for passwords.\n   */\n  minNumberWords = 0;\n\n  /** When this is true, the first letter of each word in the passphrase\n   *  is capitalized. This field is not used for passwords.\n   */\n  capitalize = false;\n\n  /** When this is true, a number is included within the passphrase.\n   *  This field is not used for passwords.\n   */\n  includeNumber = false;\n\n  /** Checks whether the policy affects the password generator.\n   * @returns True if at least one password or passphrase requirement has been set.\n   * If it returns False, then no requirements have been set and the policy should\n   * not be enforced.\n   */\n  inEffect() {\n    return (\n      this.overridePasswordType ||\n      this.minLength > 0 ||\n      this.numberCount > 0 ||\n      this.specialCount > 0 ||\n      this.useUppercase ||\n      this.useLowercase ||\n      this.useNumbers ||\n      this.useSpecial ||\n      this.minNumberWords > 0 ||\n      this.capitalize ||\n      this.includeNumber\n    );\n  }\n\n  /** Creates a copy of the policy.\n   */\n  clone() {\n    const policy = new PasswordGeneratorPolicyOptions();\n    Object.assign(policy, this);\n    return policy;\n  }\n}\n","import {\n  concatMap,\n  zip,\n  map,\n  firstValueFrom,\n  combineLatest,\n  pairwise,\n  of,\n  concat,\n  Observable,\n  filter,\n  timeout,\n} from \"rxjs\";\n\nimport { PasswordGeneratorPolicyOptions } from \"@bitwarden/common/admin-console/models/domain/password-generator-policy-options\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport {\n  GeneratorService,\n  PassphraseGenerationOptions,\n  PassphraseGeneratorPolicy,\n  PasswordGenerationOptions,\n  PasswordGeneratorPolicy,\n  PolicyEvaluator,\n} from \"@bitwarden/generator-core\";\nimport {\n  GeneratedCredential,\n  GeneratorHistoryService,\n  GeneratedPasswordHistory,\n} from \"@bitwarden/generator-history\";\nimport {\n  GeneratorNavigationService,\n  GeneratorNavigation,\n  GeneratorNavigationPolicy,\n} from \"@bitwarden/generator-navigation\";\n\nimport { PasswordGenerationServiceAbstraction } from \"./password-generation.service.abstraction\";\nimport { PasswordGeneratorOptions } from \"./password-generator-options\";\n\ntype MappedOptions = {\n  generator: GeneratorNavigation;\n  password: PasswordGenerationOptions;\n  passphrase: PassphraseGenerationOptions;\n  policyUpdated: boolean;\n};\n\n/** Adapts the generator 2.0 design to 1.0 angular services. */\nexport class LegacyPasswordGenerationService implements PasswordGenerationServiceAbstraction {\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly navigation: GeneratorNavigationService,\n    private readonly passwords: GeneratorService<\n      PasswordGenerationOptions,\n      PasswordGeneratorPolicy\n    >,\n    private readonly passphrases: GeneratorService<\n      PassphraseGenerationOptions,\n      PassphraseGeneratorPolicy\n    >,\n    private readonly history: GeneratorHistoryService,\n  ) {}\n\n  generatePassword(options: PasswordGeneratorOptions) {\n    if (options.type === \"password\") {\n      return this.passwords.generate(options);\n    } else {\n      return this.passphrases.generate(options);\n    }\n  }\n\n  generatePassphrase(options: PasswordGeneratorOptions) {\n    return this.passphrases.generate(options);\n  }\n\n  private getRawOptions$() {\n    // give the typechecker a nudge to avoid \"implicit any\" errors\n    type RawOptionsIntermediateType = [\n      PasswordGenerationOptions,\n      PasswordGenerationOptions,\n      [PolicyEvaluator<PasswordGeneratorPolicy, PasswordGenerationOptions>, number],\n      PassphraseGenerationOptions,\n      PassphraseGenerationOptions,\n      [PolicyEvaluator<PassphraseGeneratorPolicy, PassphraseGenerationOptions>, number],\n      GeneratorNavigation,\n      GeneratorNavigation,\n      [PolicyEvaluator<GeneratorNavigationPolicy, GeneratorNavigation>, number],\n    ];\n\n    function withSequenceNumber<T>(observable$: Observable<T>) {\n      return observable$.pipe(map((evaluator, i) => [evaluator, i] as const));\n    }\n\n    // initial array ensures that destructuring never fails; sequence numbers\n    // set to `-1` so that the first update reflects that the policy changed from\n    // \"unknown\" to \"whatever was provided by the service\". This needs to be called\n    // each time the active user changes or the `concat` will block.\n    function initial$() {\n      const initial: RawOptionsIntermediateType = [\n        null,\n        null,\n        [null, -1],\n        null,\n        null,\n        [null, -1],\n        null,\n        null,\n        [null, -1],\n      ];\n\n      return of(initial);\n    }\n\n    function intermediatePairsToRawOptions([previous, current]: [\n      RawOptionsIntermediateType,\n      RawOptionsIntermediateType,\n    ]) {\n      const [, , [, passwordPrevious], , , [, passphrasePrevious], , , [, generatorPrevious]] =\n        previous;\n      const [\n        passwordOptions,\n        passwordDefaults,\n        [passwordEvaluator, passwordCurrent],\n        passphraseOptions,\n        passphraseDefaults,\n        [passphraseEvaluator, passphraseCurrent],\n        generatorOptions,\n        generatorDefaults,\n        [generatorEvaluator, generatorCurrent],\n      ] = current;\n\n      // when any of the sequence numbers change, the emission occurs as the result of\n      // a policy update\n      const policyEmitted =\n        passwordPrevious < passwordCurrent ||\n        passphrasePrevious < passphraseCurrent ||\n        generatorPrevious < generatorCurrent;\n\n      const result = [\n        passwordOptions,\n        passwordDefaults,\n        passwordEvaluator,\n        passphraseOptions,\n        passphraseDefaults,\n        passphraseEvaluator,\n        generatorOptions,\n        generatorDefaults,\n        generatorEvaluator,\n        policyEmitted,\n      ] as const;\n\n      return result;\n    }\n\n    // look upon my works, ye mighty, and despair!\n    const rawOptions$ = this.accountService.activeAccount$.pipe(\n      concatMap((activeUser) =>\n        concat(\n          initial$(),\n          combineLatest([\n            this.passwords.options$(activeUser.id),\n            this.passwords.defaults$(activeUser.id),\n            withSequenceNumber(this.passwords.evaluator$(activeUser.id)),\n            this.passphrases.options$(activeUser.id),\n            this.passphrases.defaults$(activeUser.id),\n            withSequenceNumber(this.passphrases.evaluator$(activeUser.id)),\n            this.navigation.options$(activeUser.id),\n            this.navigation.defaults$(activeUser.id),\n            withSequenceNumber(this.navigation.evaluator$(activeUser.id)),\n          ]),\n        ),\n      ),\n      pairwise(),\n      map(intermediatePairsToRawOptions),\n    );\n\n    return rawOptions$;\n  }\n\n  getOptions$() {\n    const options$ = this.getRawOptions$().pipe(\n      map(\n        ([\n          passwordOptions,\n          passwordDefaults,\n          passwordEvaluator,\n          passphraseOptions,\n          passphraseDefaults,\n          passphraseEvaluator,\n          generatorOptions,\n          generatorDefaults,\n          generatorEvaluator,\n          policyUpdated,\n        ]) => {\n          const passwordOptionsWithPolicy = passwordEvaluator.applyPolicy(\n            passwordOptions ?? passwordDefaults,\n          );\n          const passphraseOptionsWithPolicy = passphraseEvaluator.applyPolicy(\n            passphraseOptions ?? passphraseDefaults,\n          );\n          const generatorOptionsWithPolicy = generatorEvaluator.applyPolicy(\n            generatorOptions ?? generatorDefaults,\n          );\n\n          const options = this.toPasswordGeneratorOptions({\n            password: passwordEvaluator.sanitize(passwordOptionsWithPolicy),\n            passphrase: passphraseEvaluator.sanitize(passphraseOptionsWithPolicy),\n            generator: generatorEvaluator.sanitize(generatorOptionsWithPolicy),\n            policyUpdated,\n          });\n\n          const policy = Object.assign(\n            new PasswordGeneratorPolicyOptions(),\n            passwordEvaluator.policy,\n            passphraseEvaluator.policy,\n            generatorEvaluator.policy,\n          );\n\n          return [options, policy] as [PasswordGeneratorOptions, PasswordGeneratorPolicyOptions];\n        },\n      ),\n    );\n\n    return options$;\n  }\n\n  async getOptions() {\n    return await firstValueFrom(this.getOptions$());\n  }\n\n  async enforcePasswordGeneratorPoliciesOnOptions(options: PasswordGeneratorOptions) {\n    const options$ = this.accountService.activeAccount$.pipe(\n      concatMap((activeUser) =>\n        zip(\n          this.passwords.evaluator$(activeUser.id),\n          this.passphrases.evaluator$(activeUser.id),\n          this.navigation.evaluator$(activeUser.id),\n        ),\n      ),\n      map(([passwordEvaluator, passphraseEvaluator, navigationEvaluator]) => {\n        const policy = Object.assign(\n          new PasswordGeneratorPolicyOptions(),\n          passwordEvaluator.policy,\n          passphraseEvaluator.policy,\n          navigationEvaluator.policy,\n        );\n\n        const navigationApplied = navigationEvaluator.applyPolicy(options);\n        const navigationSanitized = {\n          ...options,\n          ...navigationEvaluator.sanitize(navigationApplied),\n        };\n        if (navigationSanitized.type === \"password\") {\n          const applied = passwordEvaluator.applyPolicy(navigationSanitized);\n          const sanitized = passwordEvaluator.sanitize(applied);\n          return [sanitized, policy];\n        } else {\n          const applied = passphraseEvaluator.applyPolicy(navigationSanitized);\n          const sanitized = passphraseEvaluator.sanitize(applied);\n          return [sanitized, policy];\n        }\n      }),\n    );\n\n    const [sanitized, policy] = await firstValueFrom(options$);\n    return [\n      // callers assume this function updates the options parameter\n      Object.assign(options, sanitized),\n      policy,\n    ] as [PasswordGeneratorOptions, PasswordGeneratorPolicyOptions];\n  }\n\n  async saveOptions(options: PasswordGeneratorOptions) {\n    const stored = this.toStoredOptions(options);\n    const activeAccount = await firstValueFrom(this.accountService.activeAccount$);\n\n    // generator settings needs to preserve whether password or passphrase is selected,\n    // so `navigationOptions` is mutated.\n    const navigationOptions$ = zip(\n      this.navigation.options$(activeAccount.id),\n      this.navigation.defaults$(activeAccount.id),\n    ).pipe(map(([options, defaults]) => options ?? defaults));\n    let navigationOptions = await firstValueFrom(navigationOptions$);\n    navigationOptions = Object.assign(navigationOptions, stored.generator);\n    await this.navigation.saveOptions(activeAccount.id, navigationOptions);\n\n    // overwrite all other settings with latest values\n    await this.passwords.saveOptions(activeAccount.id, stored.password);\n    await this.passphrases.saveOptions(activeAccount.id, stored.passphrase);\n  }\n\n  private toStoredOptions(options: PasswordGeneratorOptions): MappedOptions {\n    return {\n      generator: {\n        type: options.type,\n      },\n      password: {\n        length: options.length,\n        minLength: options.minLength,\n        ambiguous: options.ambiguous,\n        uppercase: options.uppercase,\n        minUppercase: options.minUppercase,\n        lowercase: options.lowercase,\n        minLowercase: options.minLowercase,\n        number: options.number,\n        minNumber: options.minNumber,\n        special: options.special,\n        minSpecial: options.minSpecial,\n      },\n      passphrase: {\n        numWords: options.numWords,\n        wordSeparator: options.wordSeparator,\n        capitalize: options.capitalize,\n        includeNumber: options.includeNumber,\n      },\n      policyUpdated: false,\n    };\n  }\n\n  private toPasswordGeneratorOptions(options: MappedOptions): PasswordGeneratorOptions {\n    return {\n      type: options.generator.type,\n      length: options.password.length,\n      minLength: options.password.minLength,\n      ambiguous: options.password.ambiguous,\n      uppercase: options.password.uppercase,\n      minUppercase: options.password.minUppercase,\n      lowercase: options.password.lowercase,\n      minLowercase: options.password.minLowercase,\n      number: options.password.number,\n      minNumber: options.password.minNumber,\n      special: options.password.special,\n      minSpecial: options.password.minSpecial,\n      numWords: options.passphrase.numWords,\n      wordSeparator: options.passphrase.wordSeparator,\n      capitalize: options.passphrase.capitalize,\n      includeNumber: options.passphrase.includeNumber,\n      policyUpdated: options.policyUpdated,\n    };\n  }\n\n  getHistory() {\n    const history = this.accountService.activeAccount$.pipe(\n      concatMap((account) => this.history.credentials$(account.id)),\n      timeout({\n        // timeout after 1 second\n        each: 1000,\n        with() {\n          return [];\n        },\n      }),\n      map((history) => history.map(toGeneratedPasswordHistory)),\n    );\n\n    return firstValueFrom(history);\n  }\n\n  async addHistory(password: string) {\n    const account = await firstValueFrom(this.accountService.activeAccount$);\n    if (account?.id) {\n      // legacy service doesn't distinguish credential types\n      await this.history.track(account.id, password, \"password\");\n    }\n  }\n\n  clear() {\n    const history$ = this.accountService.activeAccount$.pipe(\n      filter((account) => !!account?.id),\n      concatMap((account) => this.history.clear(account.id)),\n      timeout({\n        // timeout after 1 second\n        each: 1000,\n        with() {\n          return [];\n        },\n      }),\n      map((history) => history.map(toGeneratedPasswordHistory)),\n    );\n\n    return firstValueFrom(history$);\n  }\n}\n\nfunction toGeneratedPasswordHistory(value: GeneratedCredential) {\n  return new GeneratedPasswordHistory(value.credential, value.generationDate.valueOf());\n}\n","import { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { engine, services, strategies } from \"@bitwarden/generator-core\";\nimport { LocalGeneratorHistoryService } from \"@bitwarden/generator-history\";\nimport { DefaultGeneratorNavigationService } from \"@bitwarden/generator-navigation\";\n\nimport { LegacyPasswordGenerationService } from \"./legacy-password-generation.service\";\nimport { PasswordGenerationServiceAbstraction } from \"./password-generation.service.abstraction\";\n\nconst { PassphraseGeneratorStrategy, PasswordGeneratorStrategy } = strategies;\nconst { CryptoServiceRandomizer, PasswordRandomizer } = engine;\n\nconst DefaultGeneratorService = services.DefaultGeneratorService;\n\nexport function legacyPasswordGenerationServiceFactory(\n  encryptService: EncryptService,\n  cryptoService: CryptoService,\n  policyService: PolicyService,\n  accountService: AccountService,\n  stateProvider: StateProvider,\n): PasswordGenerationServiceAbstraction {\n  const randomizer = new CryptoServiceRandomizer(cryptoService);\n  const passwordRandomizer = new PasswordRandomizer(randomizer);\n\n  const passwords = new DefaultGeneratorService(\n    new PasswordGeneratorStrategy(passwordRandomizer, stateProvider),\n    policyService,\n  );\n\n  const passphrases = new DefaultGeneratorService(\n    new PassphraseGeneratorStrategy(passwordRandomizer, stateProvider),\n    policyService,\n  );\n\n  const navigation = new DefaultGeneratorNavigationService(stateProvider, policyService);\n\n  const history = new LocalGeneratorHistoryService(encryptService, cryptoService, stateProvider);\n\n  return new LegacyPasswordGenerationService(\n    accountService,\n    navigation,\n    passwords,\n    passphrases,\n    history,\n  );\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\n\nimport { IntegrationRequest } from \"./integration-request\";\nimport { JsonRpc } from \"./rpc\";\n\n/** Makes remote procedure calls using a RESTful interface. */\nexport class RestClient {\n  constructor(\n    private api: ApiService,\n    private i18n: I18nService,\n  ) {}\n\n  /** uses the fetch API to request a JSON payload. */\n  // FIXME: once legacy password generator is removed, replace forwarder-specific error\n  //   messages with RPC-generalized ones.\n  async fetchJson<Parameters extends IntegrationRequest, Result>(\n    rpc: JsonRpc<Parameters, Result>,\n    params: Parameters,\n  ): Promise<Result> {\n    // run the request\n    const request = rpc.toRequest(params);\n    const response = await this.api.nativeFetch(request);\n\n    let result: Result = undefined;\n    let errorKey: string = undefined;\n    let errorMessage: string = undefined;\n\n    const commonError = await this.detectCommonErrors(response);\n    if (commonError) {\n      [errorKey, errorMessage] = commonError;\n    } else if (rpc.hasJsonPayload(response)) {\n      [result, errorMessage] = rpc.processJson(await response.json());\n    }\n\n    if (result) {\n      return result;\n    }\n\n    // handle failures\n    errorKey ??= errorMessage ? \"forwarderError\" : \"forwarderUnknownError\";\n    const error = this.i18n.t(errorKey, rpc.requestor.name, errorMessage);\n    throw error;\n  }\n\n  private async detectCommonErrors(response: Response): Promise<[string, string] | undefined> {\n    if (response.status === 401 || response.status === 403) {\n      const message = await this.tryGetErrorMessage(response);\n      const key = message ? \"forwaderInvalidTokenWithMessage\" : \"forwaderInvalidToken\";\n      return [key, message];\n    } else if (response.status >= 400) {\n      const message = await this.tryGetErrorMessage(response);\n      const key = message ? \"forwarderError\" : \"forwarderUnknownError\";\n      return [key, message];\n    }\n  }\n\n  private async tryGetErrorMessage(response: Response) {\n    const body = (await response.text()) ?? \"\";\n\n    // nullish continues processing; false returns undefined\n    // FIXME: inspect content-type header to determine extraction process\n    const error =\n      this.tryFindErrorAsJson(body) ?? this.tryFindErrorAsText(body) ?? response.statusText;\n\n    return error || undefined;\n  }\n\n  private tryFindErrorAsJson(body: string) {\n    // tryParse JSON object or string\n    const parsable = body.startsWith(\"{\") || body.startsWith(`'`) || body.startsWith(`\"`);\n    if (!parsable) {\n      // fail-and-continue because it's not JSON\n      return undefined;\n    }\n    let parsed = undefined;\n    try {\n      parsed = JSON.parse(body);\n    } catch {\n      // fail-and-exit in case `body` is malformed JSON\n      return false;\n    }\n\n    // could be a string\n    if (parsed && typeof parsed === \"string\") {\n      return parsed;\n    }\n\n    // could be { error?: T, message?: U }\n    const error = parsed.error?.toString() ?? null;\n    const message = parsed.message?.toString() ?? null;\n\n    // `false` signals no message found\n    const result = error && message ? `${error}: ${message}` : (error ?? message ?? false);\n\n    return result;\n  }\n\n  private tryFindErrorAsText(body: string) {\n    if (!body.length || body.includes(\"<\")) {\n      return undefined;\n    }\n\n    return body;\n  }\n}\n","import { zip, firstValueFrom, map, concatMap, combineLatest } from \"rxjs\";\n\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { IntegrationRequest } from \"@bitwarden/common/tools/integration/rpc\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport {\n  ApiOptions,\n  EmailDomainOptions,\n  EmailPrefixOptions,\n  SelfHostedApiOptions,\n  NoPolicy,\n  GeneratorService,\n  CatchallGenerationOptions,\n  EffUsernameGenerationOptions,\n  Forwarders,\n  SubaddressGenerationOptions,\n  UsernameGeneratorType,\n  ForwarderId,\n} from \"@bitwarden/generator-core\";\nimport { GeneratorNavigationService, GeneratorNavigation } from \"@bitwarden/generator-navigation\";\n\nimport { UsernameGeneratorOptions } from \"./username-generation-options\";\nimport { UsernameGenerationServiceAbstraction } from \"./username-generation.service.abstraction\";\n\ntype MappedOptions = {\n  generator: GeneratorNavigation;\n  algorithms: {\n    catchall: CatchallGenerationOptions;\n    effUsername: EffUsernameGenerationOptions;\n    subaddress: SubaddressGenerationOptions;\n  };\n  forwarders: {\n    addyIo: SelfHostedApiOptions & EmailDomainOptions & IntegrationRequest;\n    duckDuckGo: ApiOptions & IntegrationRequest;\n    fastmail: ApiOptions & EmailPrefixOptions & IntegrationRequest;\n    firefoxRelay: ApiOptions & IntegrationRequest;\n    forwardEmail: ApiOptions & EmailDomainOptions & IntegrationRequest;\n    simpleLogin: SelfHostedApiOptions & IntegrationRequest;\n  };\n};\n\n/** Adapts the generator 2.0 design to 1.0 angular services. */\nexport class LegacyUsernameGenerationService implements UsernameGenerationServiceAbstraction {\n  constructor(\n    private readonly accountService: AccountService,\n    private readonly navigation: GeneratorNavigationService,\n    private readonly catchall: GeneratorService<CatchallGenerationOptions, NoPolicy>,\n    private readonly effUsername: GeneratorService<EffUsernameGenerationOptions, NoPolicy>,\n    private readonly subaddress: GeneratorService<SubaddressGenerationOptions, NoPolicy>,\n    private readonly addyIo: GeneratorService<SelfHostedApiOptions & EmailDomainOptions, NoPolicy>,\n    private readonly duckDuckGo: GeneratorService<ApiOptions, NoPolicy>,\n    private readonly fastmail: GeneratorService<ApiOptions & EmailPrefixOptions, NoPolicy>,\n    private readonly firefoxRelay: GeneratorService<ApiOptions, NoPolicy>,\n    private readonly forwardEmail: GeneratorService<ApiOptions & EmailDomainOptions, NoPolicy>,\n    private readonly simpleLogin: GeneratorService<SelfHostedApiOptions, NoPolicy>,\n  ) {}\n\n  generateUsername(options: UsernameGeneratorOptions) {\n    if (options.type === \"catchall\") {\n      return this.generateCatchall(options);\n    } else if (options.type === \"subaddress\") {\n      return this.generateSubaddress(options);\n    } else if (options.type === \"forwarded\") {\n      return this.generateForwarded(options);\n    } else {\n      return this.generateWord(options);\n    }\n  }\n\n  generateWord(options: UsernameGeneratorOptions) {\n    return this.effUsername.generate(options);\n  }\n\n  generateSubaddress(options: UsernameGeneratorOptions) {\n    return this.subaddress.generate(options);\n  }\n\n  generateCatchall(options: UsernameGeneratorOptions) {\n    return this.catchall.generate(options);\n  }\n\n  generateForwarded(options: UsernameGeneratorOptions) {\n    if (!options.forwardedService) {\n      return null;\n    }\n\n    const stored = this.toStoredOptions(options);\n    switch (options.forwardedService) {\n      case Forwarders.AddyIo.id:\n        return this.addyIo.generate(stored.forwarders.addyIo);\n      case Forwarders.DuckDuckGo.id:\n        return this.duckDuckGo.generate(stored.forwarders.duckDuckGo);\n      case Forwarders.Fastmail.id:\n        return this.fastmail.generate(stored.forwarders.fastmail);\n      case Forwarders.FirefoxRelay.id:\n        return this.firefoxRelay.generate(stored.forwarders.firefoxRelay);\n      case Forwarders.ForwardEmail.id:\n        return this.forwardEmail.generate(stored.forwarders.forwardEmail);\n      case Forwarders.SimpleLogin.id:\n        return this.simpleLogin.generate(stored.forwarders.simpleLogin);\n    }\n  }\n\n  getOptions$() {\n    // look upon my works, ye mighty, and despair!\n    const options$ = this.accountService.activeAccount$.pipe(\n      concatMap((account) =>\n        combineLatest([\n          this.navigation.options$(account.id),\n          this.navigation.defaults$(account.id),\n          this.catchall.options$(account.id),\n          this.catchall.defaults$(account.id),\n          this.effUsername.options$(account.id),\n          this.effUsername.defaults$(account.id),\n          this.subaddress.options$(account.id),\n          this.subaddress.defaults$(account.id),\n          this.addyIo.options$(account.id),\n          this.addyIo.defaults$(account.id),\n          this.duckDuckGo.options$(account.id),\n          this.duckDuckGo.defaults$(account.id),\n          this.fastmail.options$(account.id),\n          this.fastmail.defaults$(account.id),\n          this.firefoxRelay.options$(account.id),\n          this.firefoxRelay.defaults$(account.id),\n          this.forwardEmail.options$(account.id),\n          this.forwardEmail.defaults$(account.id),\n          this.simpleLogin.options$(account.id),\n          this.simpleLogin.defaults$(account.id),\n        ]),\n      ),\n      map(\n        ([\n          generatorOptions,\n          generatorDefaults,\n          catchallOptions,\n          catchallDefaults,\n          effUsernameOptions,\n          effUsernameDefaults,\n          subaddressOptions,\n          subaddressDefaults,\n          addyIoOptions,\n          addyIoDefaults,\n          duckDuckGoOptions,\n          duckDuckGoDefaults,\n          fastmailOptions,\n          fastmailDefaults,\n          firefoxRelayOptions,\n          firefoxRelayDefaults,\n          forwardEmailOptions,\n          forwardEmailDefaults,\n          simpleLoginOptions,\n          simpleLoginDefaults,\n        ]) =>\n          this.toUsernameOptions({\n            generator: generatorOptions ?? generatorDefaults,\n            algorithms: {\n              catchall: catchallOptions ?? catchallDefaults,\n              effUsername: effUsernameOptions ?? effUsernameDefaults,\n              subaddress: subaddressOptions ?? subaddressDefaults,\n            },\n            forwarders: {\n              addyIo: addyIoOptions ?? addyIoDefaults,\n              duckDuckGo: duckDuckGoOptions ?? duckDuckGoDefaults,\n              fastmail: fastmailOptions ?? fastmailDefaults,\n              firefoxRelay: firefoxRelayOptions ?? firefoxRelayDefaults,\n              forwardEmail: forwardEmailOptions ?? forwardEmailDefaults,\n              simpleLogin: simpleLoginOptions ?? simpleLoginDefaults,\n            },\n          }),\n      ),\n    );\n\n    return options$;\n  }\n\n  getOptions() {\n    return firstValueFrom(this.getOptions$());\n  }\n\n  async saveOptions(options: UsernameGeneratorOptions) {\n    const stored = this.toStoredOptions(options);\n    const activeAccount = await firstValueFrom(this.accountService.activeAccount$);\n\n    const saved = await this.saveGeneratorOptions(activeAccount.id, options.type, stored);\n    if (!saved) {\n      await this.saveForwarderOptions(activeAccount.id, options.forwardedService, stored);\n    }\n\n    // run navigation options 2nd so that navigation options update doesn't race the `saved options`\n    // update in Firefox.\n    await this.saveNavigationOptions(activeAccount.id, stored);\n  }\n\n  private async saveNavigationOptions(account: UserId, options: MappedOptions) {\n    // generator settings needs to preserve whether password or passphrase is selected,\n    // so `navigationOptions` is mutated.\n    const navigationOptions$ = zip(\n      this.navigation.options$(account),\n      this.navigation.defaults$(account),\n    ).pipe(map(([options, defaults]) => options ?? defaults));\n\n    let navigationOptions = await firstValueFrom(navigationOptions$);\n    navigationOptions = Object.assign(navigationOptions, options.generator);\n    await this.navigation.saveOptions(account, navigationOptions);\n  }\n\n  private async saveGeneratorOptions(\n    account: UserId,\n    type: UsernameGeneratorType,\n    options: MappedOptions,\n  ) {\n    switch (type) {\n      case \"word\":\n        await this.effUsername.saveOptions(account, options.algorithms.effUsername);\n        return true;\n      case \"subaddress\":\n        await this.subaddress.saveOptions(account, options.algorithms.subaddress);\n        return true;\n      case \"catchall\":\n        await this.catchall.saveOptions(account, options.algorithms.catchall);\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  private async saveForwarderOptions(\n    account: UserId,\n    forwarder: ForwarderId | \"\",\n    options: MappedOptions,\n  ) {\n    switch (forwarder) {\n      case \"anonaddy\":\n        await this.addyIo.saveOptions(account, options.forwarders.addyIo);\n        return true;\n      case \"duckduckgo\":\n        await this.duckDuckGo.saveOptions(account, options.forwarders.duckDuckGo);\n        return true;\n      case \"fastmail\":\n        await this.fastmail.saveOptions(account, options.forwarders.fastmail);\n        return true;\n      case \"firefoxrelay\":\n        await this.firefoxRelay.saveOptions(account, options.forwarders.firefoxRelay);\n        return true;\n      case \"forwardemail\":\n        await this.forwardEmail.saveOptions(account, options.forwarders.forwardEmail);\n        return true;\n      case \"simplelogin\":\n        await this.simpleLogin.saveOptions(account, options.forwarders.simpleLogin);\n        return true;\n      default:\n        return false;\n    }\n  }\n\n  private toStoredOptions(options: UsernameGeneratorOptions) {\n    const forwarders = {\n      addyIo: {\n        baseUrl: options.forwardedAnonAddyBaseUrl,\n        token: options.forwardedAnonAddyApiToken,\n        domain: options.forwardedAnonAddyDomain,\n        website: options.website,\n      },\n      duckDuckGo: {\n        token: options.forwardedDuckDuckGoToken,\n        website: options.website,\n      },\n      fastmail: {\n        token: options.forwardedFastmailApiToken,\n        website: options.website,\n      },\n      firefoxRelay: {\n        token: options.forwardedFirefoxApiToken,\n        website: options.website,\n      },\n      forwardEmail: {\n        token: options.forwardedForwardEmailApiToken,\n        domain: options.forwardedForwardEmailDomain,\n        website: options.website,\n      },\n      simpleLogin: {\n        token: options.forwardedSimpleLoginApiKey,\n        baseUrl: options.forwardedSimpleLoginBaseUrl,\n        website: options.website,\n      },\n    };\n\n    const generator = {\n      username: options.type,\n      forwarder: options.forwardedService,\n    };\n\n    const algorithms = {\n      effUsername: {\n        wordCapitalize: options.wordCapitalize,\n        wordIncludeNumber: options.wordIncludeNumber,\n        website: options.website,\n      },\n      subaddress: {\n        subaddressType: options.subaddressType,\n        subaddressEmail: options.subaddressEmail,\n        website: options.website,\n      },\n      catchall: {\n        catchallType: options.catchallType,\n        catchallDomain: options.catchallDomain,\n        website: options.website,\n      },\n    };\n\n    return { generator, algorithms, forwarders } as MappedOptions;\n  }\n\n  private toUsernameOptions(options: MappedOptions) {\n    return {\n      type: options.generator.username,\n      wordCapitalize: options.algorithms.effUsername.wordCapitalize,\n      wordIncludeNumber: options.algorithms.effUsername.wordIncludeNumber,\n      subaddressType: options.algorithms.subaddress.subaddressType,\n      subaddressEmail: options.algorithms.subaddress.subaddressEmail,\n      catchallType: options.algorithms.catchall.catchallType,\n      catchallDomain: options.algorithms.catchall.catchallDomain,\n      forwardedService: options.generator.forwarder,\n      forwardedAnonAddyApiToken: options.forwarders.addyIo.token,\n      forwardedAnonAddyDomain: options.forwarders.addyIo.domain,\n      forwardedAnonAddyBaseUrl: options.forwarders.addyIo.baseUrl,\n      forwardedDuckDuckGoToken: options.forwarders.duckDuckGo.token,\n      forwardedFirefoxApiToken: options.forwarders.firefoxRelay.token,\n      forwardedFastmailApiToken: options.forwarders.fastmail.token,\n      forwardedForwardEmailApiToken: options.forwarders.forwardEmail.token,\n      forwardedForwardEmailDomain: options.forwarders.forwardEmail.domain,\n      forwardedSimpleLoginApiKey: options.forwarders.simpleLogin.token,\n      forwardedSimpleLoginBaseUrl: options.forwarders.simpleLogin.baseUrl,\n    } as UsernameGeneratorOptions;\n  }\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { RestClient } from \"@bitwarden/common/tools/integration/rpc\";\nimport { engine, services, strategies, Integrations } from \"@bitwarden/generator-core\";\nimport { DefaultGeneratorNavigationService } from \"@bitwarden/generator-navigation\";\n\nimport { LegacyUsernameGenerationService } from \"./legacy-username-generation.service\";\nimport { UsernameGenerationServiceAbstraction } from \"./username-generation.service.abstraction\";\n\nconst { CryptoServiceRandomizer, UsernameRandomizer, EmailRandomizer, EmailCalculator } = engine;\nconst DefaultGeneratorService = services.DefaultGeneratorService;\nconst {\n  CatchallGeneratorStrategy,\n  SubaddressGeneratorStrategy,\n  EffUsernameGeneratorStrategy,\n  ForwarderGeneratorStrategy,\n} = strategies;\n\nexport function legacyUsernameGenerationServiceFactory(\n  apiService: ApiService,\n  i18nService: I18nService,\n  cryptoService: CryptoService,\n  encryptService: EncryptService,\n  policyService: PolicyService,\n  accountService: AccountService,\n  stateProvider: StateProvider,\n): UsernameGenerationServiceAbstraction {\n  const randomizer = new CryptoServiceRandomizer(cryptoService);\n  const restClient = new RestClient(apiService, i18nService);\n  const usernameRandomizer = new UsernameRandomizer(randomizer);\n  const emailRandomizer = new EmailRandomizer(randomizer);\n  const emailCalculator = new EmailCalculator();\n\n  const effUsername = new DefaultGeneratorService(\n    new EffUsernameGeneratorStrategy(usernameRandomizer, stateProvider),\n    policyService,\n  );\n\n  const subaddress = new DefaultGeneratorService(\n    new SubaddressGeneratorStrategy(emailCalculator, emailRandomizer, stateProvider),\n    policyService,\n  );\n\n  const catchall = new DefaultGeneratorService(\n    new CatchallGeneratorStrategy(emailCalculator, emailRandomizer, stateProvider),\n    policyService,\n  );\n\n  const addyIo = new DefaultGeneratorService(\n    new ForwarderGeneratorStrategy(\n      Integrations.AddyIo,\n      restClient,\n      i18nService,\n      encryptService,\n      cryptoService,\n      stateProvider,\n    ),\n    policyService,\n  );\n\n  const duckDuckGo = new DefaultGeneratorService(\n    new ForwarderGeneratorStrategy(\n      Integrations.DuckDuckGo,\n      restClient,\n      i18nService,\n      encryptService,\n      cryptoService,\n      stateProvider,\n    ),\n    policyService,\n  );\n\n  const fastmail = new DefaultGeneratorService(\n    new ForwarderGeneratorStrategy(\n      Integrations.Fastmail,\n      restClient,\n      i18nService,\n      encryptService,\n      cryptoService,\n      stateProvider,\n    ),\n    policyService,\n  );\n\n  const firefoxRelay = new DefaultGeneratorService(\n    new ForwarderGeneratorStrategy(\n      Integrations.FirefoxRelay,\n      restClient,\n      i18nService,\n      encryptService,\n      cryptoService,\n      stateProvider,\n    ),\n    policyService,\n  );\n\n  const forwardEmail = new DefaultGeneratorService(\n    new ForwarderGeneratorStrategy(\n      Integrations.ForwardEmail,\n      restClient,\n      i18nService,\n      encryptService,\n      cryptoService,\n      stateProvider,\n    ),\n    policyService,\n  );\n\n  const simpleLogin = new DefaultGeneratorService(\n    new ForwarderGeneratorStrategy(\n      Integrations.SimpleLogin,\n      restClient,\n      i18nService,\n      encryptService,\n      cryptoService,\n      stateProvider,\n    ),\n    policyService,\n  );\n\n  const navigation = new DefaultGeneratorNavigationService(stateProvider, policyService);\n\n  return new LegacyUsernameGenerationService(\n    accountService,\n    navigation,\n    catchall,\n    effUsername,\n    subaddress,\n    addyIo,\n    duckDuckGo,\n    fastmail,\n    firefoxRelay,\n    forwardEmail,\n    simpleLogin,\n  );\n}\n","import { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\n\nimport { ImportApiServiceAbstraction } from \"./import-api.service.abstraction\";\n\nexport class ImportApiService implements ImportApiServiceAbstraction {\n  constructor(private apiService: ApiService) {}\n\n  async postImportCiphers(request: ImportCiphersRequest): Promise<any> {\n    return await this.apiService.send(\"POST\", \"/ciphers/import\", request, true, false);\n  }\n\n  async postImportOrganizationCiphers(\n    organizationId: string,\n    request: ImportOrganizationCiphersRequest,\n  ): Promise<any> {\n    return await this.apiService.send(\n      \"POST\",\n      \"/ciphers/import-organization?organizationId=\" + organizationId,\n      request,\n      true,\n      false,\n    );\n  }\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { FolderWithIdRequest } from \"../../vault/models/request/folder-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  folders: FolderWithIdRequest[] = [];\n  folderRelationships: KvpRequest<number, number>[] = [];\n}\n","import { CipherRequest } from \"../../vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"../../vault/models/request/collection-with-id.request\";\n\nimport { KvpRequest } from \"./kvp.request\";\n\nexport class ImportOrganizationCiphersRequest {\n  ciphers: CipherRequest[] = [];\n  collections: CollectionWithIdRequest[] = [];\n  collectionRelationships: KvpRequest<number, number>[] = [];\n}\n","export class KvpRequest<TK, TV> {\n  key: TK;\n  value: TV;\n\n  constructor(key: TK, value: TV) {\n    this.key = key;\n    this.value = value;\n  }\n}\n","import { SelectionReadOnlyRequest } from \"../../../admin-console/models/request/selection-read-only.request\";\nimport { Collection } from \"../domain/collection\";\n\nexport class CollectionRequest {\n  name: string;\n  externalId: string;\n  groups: SelectionReadOnlyRequest[] = [];\n  users: SelectionReadOnlyRequest[] = [];\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    this.name = collection.name ? collection.name.encryptedString : null;\n    this.externalId = collection.externalId;\n  }\n}\n","import { Collection } from \"../domain/collection\";\n\nimport { CollectionRequest } from \"./collection.request\";\n\nexport class CollectionWithIdRequest extends CollectionRequest {\n  id: string;\n\n  constructor(collection?: Collection) {\n    if (collection == null) {\n      return;\n    }\n    super(collection);\n    this.id = collection.id;\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nexport class ImportResult {\n  success = false;\n  errorMessage: string;\n  ciphers: CipherView[] = [];\n  folders: FolderView[] = [];\n  folderRelationships: [number, number][] = [];\n  collections: CollectionView[] = [];\n  collectionRelationships: [number, number][] = [];\n}\n","import * as papa from \"papaparse\";\n\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\nimport { normalizeExpiryYearFormat } from \"@bitwarden/common/vault/utils\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nexport abstract class BaseImporter {\n  organizationId: string = null;\n\n  protected logService: LogService = new ConsoleLogService(false);\n\n  protected newLineRegex = /(?:\\r\\n|\\r|\\n)/;\n\n  protected passwordFieldNames = [\n    \"password\",\n    \"pass word\",\n    \"passphrase\",\n    \"pass phrase\",\n    \"pass\",\n    \"code\",\n    \"code word\",\n    \"codeword\",\n    \"secret\",\n    \"secret word\",\n    \"personpwd\",\n    \"key\",\n    \"keyword\",\n    \"key word\",\n    \"keyphrase\",\n    \"key phrase\",\n    \"form_pw\",\n    \"wppassword\",\n    \"pin\",\n    \"pwd\",\n    \"pw\",\n    \"pword\",\n    \"passwd\",\n    \"p\",\n    \"serial\",\n    \"serial#\",\n    \"license key\",\n    \"reg #\",\n\n    // Non-English names\n    \"passwort\",\n  ];\n\n  protected usernameFieldNames = [\n    \"user\",\n    \"name\",\n    \"user name\",\n    \"username\",\n    \"login name\",\n    \"email\",\n    \"e-mail\",\n    \"id\",\n    \"userid\",\n    \"user id\",\n    \"login\",\n    \"form_loginname\",\n    \"wpname\",\n    \"mail\",\n    \"loginid\",\n    \"login id\",\n    \"log\",\n    \"personlogin\",\n    \"first name\",\n    \"last name\",\n    \"card#\",\n    \"account #\",\n    \"member\",\n    \"member #\",\n\n    // Non-English names\n    \"nom\",\n    \"benutzername\",\n  ];\n\n  protected notesFieldNames = [\n    \"note\",\n    \"notes\",\n    \"comment\",\n    \"comments\",\n    \"memo\",\n    \"description\",\n    \"free form\",\n    \"freeform\",\n    \"free text\",\n    \"freetext\",\n    \"free\",\n\n    // Non-English names\n    \"kommentar\",\n  ];\n\n  protected uriFieldNames: string[] = [\n    \"url\",\n    \"hyper link\",\n    \"hyperlink\",\n    \"link\",\n    \"host\",\n    \"hostname\",\n    \"host name\",\n    \"server\",\n    \"address\",\n    \"hyper ref\",\n    \"href\",\n    \"web\",\n    \"website\",\n    \"web site\",\n    \"site\",\n    \"web-site\",\n    \"uri\",\n\n    // Non-English names\n    \"ort\",\n    \"adresse\",\n  ];\n\n  protected parseCsvOptions = {\n    encoding: \"UTF-8\",\n    skipEmptyLines: false,\n  };\n\n  protected get organization() {\n    return this.organizationId != null;\n  }\n\n  protected parseXml(data: string): Document {\n    // Ensure there are no external entity elements in the XML to prevent against XXE attacks.\n    if (!this.validateNoExternalEntities(data)) {\n      return null;\n    }\n    const parser = new DOMParser();\n    const doc = parser.parseFromString(data, \"application/xml\");\n    return doc != null && doc.querySelector(\"parsererror\") == null ? doc : null;\n  }\n\n  protected parseCsv(data: string, header: boolean, options: any = {}): any[] {\n    const parseOptions: papa.ParseConfig<string> = Object.assign(\n      { header: header },\n      this.parseCsvOptions,\n      options,\n    );\n    data = this.splitNewLine(data).join(\"\\n\").trim();\n    const result = papa.parse(data, parseOptions);\n    if (result.errors != null && result.errors.length > 0) {\n      result.errors.forEach((e) => {\n        if (e.row != null) {\n          this.logService.warning(\"Error parsing row \" + e.row + \": \" + e.message);\n        }\n      });\n    }\n    return result.data && result.data.length > 0 ? result.data : null;\n  }\n\n  protected parseSingleRowCsv(rowData: string) {\n    if (this.isNullOrWhitespace(rowData)) {\n      return null;\n    }\n    const parsedRow = this.parseCsv(rowData, false);\n    if (parsedRow != null && parsedRow.length > 0 && parsedRow[0].length > 0) {\n      return parsedRow[0];\n    }\n    return null;\n  }\n\n  protected makeUriArray(uri: string | string[]): LoginUriView[] {\n    if (uri == null) {\n      return null;\n    }\n\n    if (typeof uri === \"string\") {\n      const loginUri = new LoginUriView();\n      loginUri.uri = this.fixUri(uri);\n      if (this.isNullOrWhitespace(loginUri.uri)) {\n        return null;\n      }\n      loginUri.match = null;\n      return [loginUri];\n    }\n\n    if (uri.length > 0) {\n      const returnArr: LoginUriView[] = [];\n      uri.forEach((u) => {\n        const loginUri = new LoginUriView();\n        loginUri.uri = this.fixUri(u);\n        if (this.isNullOrWhitespace(loginUri.uri)) {\n          return;\n        }\n        loginUri.match = null;\n        returnArr.push(loginUri);\n      });\n      return returnArr.length === 0 ? null : returnArr;\n    }\n\n    return null;\n  }\n\n  protected fixUri(uri: string) {\n    if (uri == null) {\n      return null;\n    }\n    uri = uri.trim();\n    if (uri.indexOf(\"://\") === -1 && uri.indexOf(\".\") >= 0) {\n      uri = \"http://\" + uri;\n    }\n    if (uri.length > 1000) {\n      return uri.substring(0, 1000);\n    }\n    return uri;\n  }\n\n  protected nameFromUrl(url: string) {\n    const hostname = Utils.getHostname(url);\n    if (this.isNullOrWhitespace(hostname)) {\n      return null;\n    }\n    return hostname.startsWith(\"www.\") ? hostname.replace(\"www.\", \"\") : hostname;\n  }\n\n  protected isNullOrWhitespace(str: string): boolean {\n    return Utils.isNullOrWhitespace(str);\n  }\n\n  protected getValueOrDefault(str: string, defaultValue: string = null): string {\n    if (this.isNullOrWhitespace(str)) {\n      return defaultValue;\n    }\n    return str;\n  }\n\n  protected splitNewLine(str: string): string[] {\n    return str.split(this.newLineRegex);\n  }\n\n  protected setCardExpiration(cipher: CipherView, expiration: string): boolean {\n    if (this.isNullOrWhitespace(expiration)) {\n      return false;\n    }\n\n    expiration = expiration.replace(/\\s/g, \"\");\n\n    const monthRegex = \"0?(?<month>[1-9]|1[0-2])\";\n    const yearRegex = \"(?<year>(?:[1-2][0-9])?[0-9]{2})\";\n    const expiryRegex = new RegExp(`^${monthRegex}/${yearRegex}$`);\n\n    const expiryMatch = expiration.match(expiryRegex);\n\n    if (!expiryMatch) {\n      return false;\n    }\n\n    cipher.card.expMonth = expiryMatch.groups.month;\n    const year: string = expiryMatch.groups.year;\n    cipher.card.expYear = normalizeExpiryYearFormat(year);\n\n    return true;\n  }\n\n  protected moveFoldersToCollections(result: ImportResult) {\n    result.folderRelationships.forEach((r) => result.collectionRelationships.push(r));\n    result.collections = result.folders.map((f) => {\n      const collection = new CollectionView();\n      collection.name = f.name;\n      collection.id = f.id;\n      return collection;\n    });\n    result.folderRelationships = [];\n    result.folders = [];\n  }\n\n  protected querySelectorDirectChild(parentEl: Element, query: string) {\n    const els = this.querySelectorAllDirectChild(parentEl, query);\n    return els.length === 0 ? null : els[0];\n  }\n\n  protected querySelectorAllDirectChild(parentEl: Element, query: string) {\n    return Array.from(parentEl.querySelectorAll(query)).filter((el) => el.parentNode === parentEl);\n  }\n\n  protected initLoginCipher() {\n    const cipher = new CipherView();\n    cipher.favorite = false;\n    cipher.notes = \"\";\n    cipher.fields = [];\n    cipher.login = new LoginView();\n    cipher.type = CipherType.Login;\n    return cipher;\n  }\n\n  protected cleanupCipher(cipher: CipherView) {\n    if (cipher == null) {\n      return;\n    }\n    if (cipher.type !== CipherType.Login) {\n      cipher.login = null;\n    }\n    if (this.isNullOrWhitespace(cipher.name)) {\n      cipher.name = \"--\";\n    }\n    if (this.isNullOrWhitespace(cipher.notes)) {\n      cipher.notes = null;\n    } else {\n      cipher.notes = cipher.notes.trim();\n    }\n    if (cipher.fields != null && cipher.fields.length === 0) {\n      cipher.fields = null;\n    }\n    if (cipher.passwordHistory != null && cipher.passwordHistory.length === 0) {\n      cipher.passwordHistory = null;\n    }\n  }\n\n  protected processKvp(\n    cipher: CipherView,\n    key: string,\n    value: string,\n    type: FieldType = FieldType.Text,\n  ) {\n    if (this.isNullOrWhitespace(value)) {\n      return;\n    }\n    if (this.isNullOrWhitespace(key)) {\n      key = \"\";\n    }\n    if (value.length > 200 || value.trim().search(this.newLineRegex) > -1) {\n      if (cipher.notes == null) {\n        cipher.notes = \"\";\n      }\n      cipher.notes += key + \": \" + this.splitNewLine(value).join(\"\\n\") + \"\\n\";\n    } else {\n      if (cipher.fields == null) {\n        cipher.fields = [];\n      }\n      const field = new FieldView();\n      field.type = type;\n      field.name = key;\n      field.value = value;\n      cipher.fields.push(field);\n    }\n  }\n\n  protected processFolder(\n    result: ImportResult,\n    folderName: string,\n    addRelationship: boolean = true,\n  ) {\n    if (this.isNullOrWhitespace(folderName)) {\n      return;\n    }\n\n    let folderIndex = result.folders.length;\n    // Replace backslashes with forward slashes, ensuring we create sub-folders\n    folderName = folderName.replace(\"\\\\\", \"/\");\n    let addFolder = true;\n\n    for (let i = 0; i < result.folders.length; i++) {\n      if (result.folders[i].name === folderName) {\n        addFolder = false;\n        folderIndex = i;\n        break;\n      }\n    }\n\n    if (addFolder) {\n      const f = new FolderView();\n      f.name = folderName;\n      result.folders.push(f);\n    }\n\n    //Some folders can have sub-folders but no ciphers directly, we should not add to the folderRelationships array\n    if (addRelationship) {\n      result.folderRelationships.push([result.ciphers.length, folderIndex]);\n    }\n  }\n\n  protected convertToNoteIfNeeded(cipher: CipherView) {\n    if (\n      cipher.type === CipherType.Login &&\n      this.isNullOrWhitespace(cipher.login.username) &&\n      this.isNullOrWhitespace(cipher.login.password) &&\n      (cipher.login.uris == null || cipher.login.uris.length === 0)\n    ) {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    }\n  }\n\n  protected processFullName(cipher: CipherView, fullName: string) {\n    if (this.isNullOrWhitespace(fullName)) {\n      return;\n    }\n\n    const nameParts = fullName.split(\" \");\n    if (nameParts.length > 0) {\n      cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n    }\n    if (nameParts.length === 2) {\n      cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n    } else if (nameParts.length >= 3) {\n      cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n      cipher.identity.lastName = nameParts.slice(2, nameParts.length).join(\" \");\n    }\n  }\n\n  private validateNoExternalEntities(data: string): boolean {\n    const regex = new RegExp(\"<!ENTITY\", \"i\");\n    const hasExternalEntities = regex.test(data);\n    return !hasExternalEntities;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AscendoCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 2) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const val: string = value[i + 2];\n          const field: string = value[i + 1];\n          if (this.isNullOrWhitespace(val) || this.isNullOrWhitespace(field)) {\n            continue;\n          }\n\n          const fieldLower = field.toLowerCase();\n          if (cipher.login.password == null && this.passwordFieldNames.indexOf(fieldLower) > -1) {\n            cipher.login.password = this.getValueOrDefault(val);\n          } else if (\n            cipher.login.username == null &&\n            this.usernameFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.username = this.getValueOrDefault(val);\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(fieldLower) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n          } else {\n            this.processKvp(cipher, field, val);\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.login.uris = this.makeUriArray(value.web);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.username = this.getValueOrDefault(value.login);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class AvastJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.logins != null) {\n      results.logins.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.pwd);\n        cipher.login.username = this.getValueOrDefault(value.loginName);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.notes != null) {\n      results.notes.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.name = this.getValueOrDefault(value.label);\n        cipher.notes = this.getValueOrDefault(value.text);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (results.cards != null) {\n      results.cards.forEach((value: any) => {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Card;\n        cipher.name = this.getValueOrDefault(value.custName);\n        cipher.notes = this.getValueOrDefault(value.note);\n        cipher.card.cardholderName = this.getValueOrDefault(value.holderName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (value.expirationDate != null) {\n          if (value.expirationDate.month != null) {\n            cipher.card.expMonth = value.expirationDate.month + \"\";\n          }\n          if (value.expirationDate.year != null) {\n            cipher.card.expYear = value.expirationDate.year + \"\";\n          }\n        }\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class AviraCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.name,\n        this.getValueOrDefault(this.nameFromUrl(value.website), \"--\"),\n      );\n      cipher.login.uris = this.makeUriArray(value.website);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (\n        this.isNullOrWhitespace(value.username) &&\n        !this.isNullOrWhitespace(value.secondary_username)\n      ) {\n        cipher.login.username = value.secondary_username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.notes = this.getValueOrDefault(value.secondary_username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlackBerryCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.grouping === \"list\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.favorite = value.fav === \"1\";\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.extra);\n      if (value.grouping !== \"note\") {\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ChromeCsvImporter extends BaseImporter implements Importer {\n  private androidPatternRegex = new RegExp(\"^android:\\\\/\\\\/.*(?<=@)(.*)(?=\\\\/)\");\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      let name = value.name;\n      if (!name && this.androidPatternRegex.test(value.url)) {\n        name = value.url.match(this.androidPatternRegex)[1];\n      }\n      cipher.name = this.getValueOrDefault(name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.organization && !this.isNullOrWhitespace(value.collections)) {\n        const collections = (value.collections as string).split(\",\");\n        collections.forEach((col) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === col) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = col;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization) {\n        this.processFolder(result, value.folder);\n      }\n\n      const cipher = new CipherView();\n      cipher.favorite =\n        !this.organization && this.getValueOrDefault(value.favorite, \"0\") !== \"0\" ? true : false;\n      cipher.type = CipherType.Login;\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      try {\n        cipher.reprompt = parseInt(\n          this.getValueOrDefault(value.reprompt, CipherRepromptType.None.toString()),\n          10,\n        );\n      } catch (e) {\n        // eslint-disable-next-line\n        console.error(\"Unable to parse reprompt value\", e);\n        cipher.reprompt = CipherRepromptType.None;\n      }\n\n      if (!this.isNullOrWhitespace(value.fields)) {\n        const fields = this.splitNewLine(value.fields);\n        for (let i = 0; i < fields.length; i++) {\n          if (this.isNullOrWhitespace(fields[i])) {\n            continue;\n          }\n\n          const delimPosition = fields[i].lastIndexOf(\": \");\n          if (delimPosition === -1) {\n            continue;\n          }\n\n          if (cipher.fields == null) {\n            cipher.fields = [];\n          }\n\n          const field = new FieldView();\n          field.name = fields[i].substr(0, delimPosition);\n          field.value = null;\n          field.type = FieldType.Text;\n          if (fields[i].length > delimPosition + 2) {\n            field.value = fields[i].substr(delimPosition + 2);\n          }\n          cipher.fields.push(field);\n        }\n      }\n\n      const valueType = value.type != null ? value.type.toLowerCase() : null;\n      switch (valueType) {\n        case \"note\":\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote = new SecureNoteView();\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default: {\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.totp = this.getValueOrDefault(value.login_totp || value.totp);\n          cipher.login.username = this.getValueOrDefault(value.login_username || value.username);\n          cipher.login.password = this.getValueOrDefault(value.login_password || value.password);\n          const uris = this.parseSingleRowCsv(value.login_uri || value.uri);\n          cipher.login.uris = this.makeUriArray(uris);\n          break;\n        }\n      }\n\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\n\nexport function safeGetString(value: string | EncString) {\n  if (value == null) {\n    return null;\n  }\n\n  if (typeof value == \"string\") {\n    return value;\n  }\n  return value?.encryptedString;\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Card as CardDomain } from \"../../vault/models/domain/card\";\nimport { CardView } from \"../../vault/models/view/card.view\";\n\nimport { safeGetString } from \"./utils\";\n\nexport class CardExport {\n  static template(): CardExport {\n    const req = new CardExport();\n    req.cardholderName = \"John Doe\";\n    req.brand = \"visa\";\n    req.number = \"4242424242424242\";\n    req.expMonth = \"04\";\n    req.expYear = \"2023\";\n    req.code = \"123\";\n    return req;\n  }\n\n  static toView(req: CardExport, view = new CardView()) {\n    view.cardholderName = req.cardholderName;\n    view.brand = req.brand;\n    view.number = req.number;\n    view.expMonth = req.expMonth;\n    view.expYear = req.expYear;\n    view.code = req.code;\n    return view;\n  }\n\n  static toDomain(req: CardExport, domain = new CardDomain()) {\n    domain.cardholderName = req.cardholderName != null ? new EncString(req.cardholderName) : null;\n    domain.brand = req.brand != null ? new EncString(req.brand) : null;\n    domain.number = req.number != null ? new EncString(req.number) : null;\n    domain.expMonth = req.expMonth != null ? new EncString(req.expMonth) : null;\n    domain.expYear = req.expYear != null ? new EncString(req.expYear) : null;\n    domain.code = req.code != null ? new EncString(req.code) : null;\n    return domain;\n  }\n\n  cardholderName: string;\n  brand: string;\n  number: string;\n  expMonth: string;\n  expYear: string;\n  code: string;\n\n  constructor(o?: CardView | CardDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.cardholderName = safeGetString(o.cardholderName);\n    this.brand = safeGetString(o.brand);\n    this.number = safeGetString(o.number);\n    this.expMonth = safeGetString(o.expMonth);\n    this.expYear = safeGetString(o.expYear);\n    this.code = safeGetString(o.code);\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { FieldType, LinkedIdType } from \"../../vault/enums\";\nimport { Field as FieldDomain } from \"../../vault/models/domain/field\";\nimport { FieldView } from \"../../vault/models/view/field.view\";\n\nimport { safeGetString } from \"./utils\";\n\nexport class FieldExport {\n  static template(): FieldExport {\n    const req = new FieldExport();\n    req.name = \"Field name\";\n    req.value = \"Some value\";\n    req.type = FieldType.Text;\n    return req;\n  }\n\n  static toView(req: FieldExport, view = new FieldView()) {\n    view.type = req.type;\n    view.value = req.value;\n    view.name = req.name;\n    view.linkedId = req.linkedId;\n    return view;\n  }\n\n  static toDomain(req: FieldExport, domain = new FieldDomain()) {\n    domain.type = req.type;\n    domain.value = req.value != null ? new EncString(req.value) : null;\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.linkedId = req.linkedId;\n    return domain;\n  }\n\n  name: string;\n  value: string;\n  type: FieldType;\n  linkedId: LinkedIdType;\n\n  constructor(o?: FieldView | FieldDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.name = safeGetString(o.name);\n    this.value = safeGetString(o.value);\n    this.type = o.type;\n    this.linkedId = o.linkedId;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Identity as IdentityDomain } from \"../../vault/models/domain/identity\";\nimport { IdentityView } from \"../../vault/models/view/identity.view\";\n\nimport { safeGetString } from \"./utils\";\n\nexport class IdentityExport {\n  static template(): IdentityExport {\n    const req = new IdentityExport();\n    req.title = \"Mr\";\n    req.firstName = \"John\";\n    req.middleName = \"William\";\n    req.lastName = \"Doe\";\n    req.address1 = \"123 Any St\";\n    req.address2 = \"Apt #123\";\n    req.address3 = null;\n    req.city = \"New York\";\n    req.state = \"NY\";\n    req.postalCode = \"10001\";\n    req.country = \"US\";\n    req.company = \"Acme Inc.\";\n    req.email = \"john@company.com\";\n    req.phone = \"5555551234\";\n    req.ssn = \"000-123-4567\";\n    req.username = \"jdoe\";\n    req.passportNumber = \"US-123456789\";\n    req.licenseNumber = \"D123-12-123-12333\";\n    return req;\n  }\n\n  static toView(req: IdentityExport, view = new IdentityView()) {\n    view.title = req.title;\n    view.firstName = req.firstName;\n    view.middleName = req.middleName;\n    view.lastName = req.lastName;\n    view.address1 = req.address1;\n    view.address2 = req.address2;\n    view.address3 = req.address3;\n    view.city = req.city;\n    view.state = req.state;\n    view.postalCode = req.postalCode;\n    view.country = req.country;\n    view.company = req.company;\n    view.email = req.email;\n    view.phone = req.phone;\n    view.ssn = req.ssn;\n    view.username = req.username;\n    view.passportNumber = req.passportNumber;\n    view.licenseNumber = req.licenseNumber;\n    return view;\n  }\n\n  static toDomain(req: IdentityExport, domain = new IdentityDomain()) {\n    domain.title = req.title != null ? new EncString(req.title) : null;\n    domain.firstName = req.firstName != null ? new EncString(req.firstName) : null;\n    domain.middleName = req.middleName != null ? new EncString(req.middleName) : null;\n    domain.lastName = req.lastName != null ? new EncString(req.lastName) : null;\n    domain.address1 = req.address1 != null ? new EncString(req.address1) : null;\n    domain.address2 = req.address2 != null ? new EncString(req.address2) : null;\n    domain.address3 = req.address3 != null ? new EncString(req.address3) : null;\n    domain.city = req.city != null ? new EncString(req.city) : null;\n    domain.state = req.state != null ? new EncString(req.state) : null;\n    domain.postalCode = req.postalCode != null ? new EncString(req.postalCode) : null;\n    domain.country = req.country != null ? new EncString(req.country) : null;\n    domain.company = req.company != null ? new EncString(req.company) : null;\n    domain.email = req.email != null ? new EncString(req.email) : null;\n    domain.phone = req.phone != null ? new EncString(req.phone) : null;\n    domain.ssn = req.ssn != null ? new EncString(req.ssn) : null;\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.passportNumber = req.passportNumber != null ? new EncString(req.passportNumber) : null;\n    domain.licenseNumber = req.licenseNumber != null ? new EncString(req.licenseNumber) : null;\n    return domain;\n  }\n\n  title: string;\n  firstName: string;\n  middleName: string;\n  lastName: string;\n  address1: string;\n  address2: string;\n  address3: string;\n  city: string;\n  state: string;\n  postalCode: string;\n  country: string;\n  company: string;\n  email: string;\n  phone: string;\n  ssn: string;\n  username: string;\n  passportNumber: string;\n  licenseNumber: string;\n\n  constructor(o?: IdentityView | IdentityDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.title = safeGetString(o.title);\n    this.firstName = safeGetString(o.firstName);\n    this.middleName = safeGetString(o.middleName);\n    this.lastName = safeGetString(o.lastName);\n    this.address1 = safeGetString(o.address1);\n    this.address2 = safeGetString(o.address2);\n    this.address3 = safeGetString(o.address3);\n    this.city = safeGetString(o.city);\n    this.state = safeGetString(o.state);\n    this.postalCode = safeGetString(o.postalCode);\n    this.country = safeGetString(o.country);\n    this.company = safeGetString(o.company);\n    this.email = safeGetString(o.email);\n    this.phone = safeGetString(o.phone);\n    this.ssn = safeGetString(o.ssn);\n    this.username = safeGetString(o.username);\n    this.passportNumber = safeGetString(o.passportNumber);\n    this.licenseNumber = safeGetString(o.licenseNumber);\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Fido2Credential } from \"../../vault/models/domain/fido2-credential\";\nimport { Fido2CredentialView } from \"../../vault/models/view/fido2-credential.view\";\n\nimport { safeGetString } from \"./utils\";\n\n/**\n * Represents format of Fido2 Credentials in JSON exports.\n */\nexport class Fido2CredentialExport {\n  /**\n   * Generates a template for Fido2CredentialExport\n   * @returns Instance of Fido2CredentialExport with predefined values.\n   */\n  static template(): Fido2CredentialExport {\n    const req = new Fido2CredentialExport();\n    req.credentialId = \"keyId\";\n    req.keyType = \"keyType\";\n    req.keyAlgorithm = \"keyAlgorithm\";\n    req.keyCurve = \"keyCurve\";\n    req.keyValue = \"keyValue\";\n    req.rpId = \"rpId\";\n    req.userHandle = \"userHandle\";\n    req.userName = \"userName\";\n    req.counter = \"counter\";\n    req.rpName = \"rpName\";\n    req.userDisplayName = \"userDisplayName\";\n    req.discoverable = \"false\";\n    req.creationDate = null;\n    return req;\n  }\n\n  /**\n   * Converts a Fido2CredentialExport object to its view representation.\n   * @param req - The Fido2CredentialExport object to be converted.\n   * @param view - (Optional) The Fido2CredentialView object to popualte with Fido2CredentialExport data\n   * @returns Fido2CredentialView - The populated view, or a new instance if none was provided.\n   */\n  static toView(req: Fido2CredentialExport, view = new Fido2CredentialView()) {\n    view.credentialId = req.credentialId;\n    view.keyType = req.keyType as \"public-key\";\n    view.keyAlgorithm = req.keyAlgorithm as \"ECDSA\";\n    view.keyCurve = req.keyCurve as \"P-256\";\n    view.keyValue = req.keyValue;\n    view.rpId = req.rpId;\n    view.userHandle = req.userHandle;\n    view.userName = req.userName;\n    view.counter = parseInt(req.counter);\n    view.rpName = req.rpName;\n    view.userDisplayName = req.userDisplayName;\n    view.discoverable = req.discoverable === \"true\";\n    view.creationDate = new Date(req.creationDate);\n    return view;\n  }\n\n  /**\n   * Converts a Fido2CredentialExport object to its domain representation.\n   * @param req - The Fido2CredentialExport object to be converted.\n   * @param domain - (Optional) The Fido2Credential object to popualte with Fido2CredentialExport data\n   * @returns Fido2Credential - The populated domain, or a new instance if none was provided.\n   */\n  static toDomain(req: Fido2CredentialExport, domain = new Fido2Credential()) {\n    domain.credentialId = req.credentialId != null ? new EncString(req.credentialId) : null;\n    domain.keyType = req.keyType != null ? new EncString(req.keyType) : null;\n    domain.keyAlgorithm = req.keyAlgorithm != null ? new EncString(req.keyAlgorithm) : null;\n    domain.keyCurve = req.keyCurve != null ? new EncString(req.keyCurve) : null;\n    domain.keyValue = req.keyValue != null ? new EncString(req.keyValue) : null;\n    domain.rpId = req.rpId != null ? new EncString(req.rpId) : null;\n    domain.userHandle = req.userHandle != null ? new EncString(req.userHandle) : null;\n    domain.userName = req.userName != null ? new EncString(req.userName) : null;\n    domain.counter = req.counter != null ? new EncString(req.counter) : null;\n    domain.rpName = req.rpName != null ? new EncString(req.rpName) : null;\n    domain.userDisplayName =\n      req.userDisplayName != null ? new EncString(req.userDisplayName) : null;\n    domain.discoverable = req.discoverable != null ? new EncString(req.discoverable) : null;\n    domain.creationDate = req.creationDate;\n    return domain;\n  }\n\n  credentialId: string;\n  keyType: string;\n  keyAlgorithm: string;\n  keyCurve: string;\n  keyValue: string;\n  rpId: string;\n  userHandle: string;\n  userName: string;\n  counter: string;\n  rpName: string;\n  userDisplayName: string;\n  discoverable: string;\n  creationDate: Date;\n\n  /**\n   * Constructs a new Fid2CredentialExport instance.\n   *\n   * @param o - The credential storing the data being exported. When not provided, an empty export is created instead.\n   */\n  constructor(o?: Fido2CredentialView | Fido2Credential) {\n    if (o == null) {\n      return;\n    }\n\n    this.credentialId = safeGetString(o.credentialId);\n    this.keyType = safeGetString(o.keyType);\n    this.keyAlgorithm = safeGetString(o.keyAlgorithm);\n    this.keyCurve = safeGetString(o.keyCurve);\n    this.keyValue = safeGetString(o.keyValue);\n    this.rpId = safeGetString(o.rpId);\n    this.userHandle = safeGetString(o.userHandle);\n    this.userName = safeGetString(o.userName);\n    this.counter = safeGetString(String(o.counter));\n    this.rpName = safeGetString(o.rpName);\n    this.userDisplayName = safeGetString(o.userDisplayName);\n    this.discoverable = safeGetString(String(o.discoverable));\n    this.creationDate = o.creationDate;\n  }\n}\n","import { UriMatchStrategySetting } from \"../../models/domain/domain-service\";\nimport { EncString } from \"../../platform/models/domain/enc-string\";\nimport { LoginUri as LoginUriDomain } from \"../../vault/models/domain/login-uri\";\nimport { LoginUriView } from \"../../vault/models/view/login-uri.view\";\n\nimport { safeGetString } from \"./utils\";\n\nexport class LoginUriExport {\n  static template(): LoginUriExport {\n    const req = new LoginUriExport();\n    req.uri = \"https://google.com\";\n    req.match = null;\n    return req;\n  }\n\n  static toView(req: LoginUriExport, view = new LoginUriView()) {\n    view.uri = req.uri;\n    view.match = req.match;\n    return view;\n  }\n\n  static toDomain(req: LoginUriExport, domain = new LoginUriDomain()) {\n    domain.uri = req.uri != null ? new EncString(req.uri) : null;\n    domain.uriChecksum = req.uriChecksum != null ? new EncString(req.uriChecksum) : null;\n    domain.match = req.match;\n    return domain;\n  }\n\n  uri: string;\n  uriChecksum: string | undefined;\n  match: UriMatchStrategySetting = null;\n\n  constructor(o?: LoginUriView | LoginUriDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.uri = safeGetString(o.uri);\n    if (\"uriChecksum\" in o) {\n      this.uriChecksum = o.uriChecksum?.encryptedString;\n    }\n    this.match = o.match;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Login as LoginDomain } from \"../../vault/models/domain/login\";\nimport { LoginView } from \"../../vault/models/view/login.view\";\n\nimport { Fido2CredentialExport } from \"./fido2-credential.export\";\nimport { LoginUriExport } from \"./login-uri.export\";\nimport { safeGetString } from \"./utils\";\n\nexport class LoginExport {\n  static template(): LoginExport {\n    const req = new LoginExport();\n    req.uris = [];\n    req.username = \"jdoe\";\n    req.password = \"myp@ssword123\";\n    req.totp = \"JBSWY3DPEHPK3PXP\";\n    req.fido2Credentials = [Fido2CredentialExport.template()];\n    return req;\n  }\n\n  static toView(req: LoginExport, view = new LoginView()) {\n    if (req.uris != null) {\n      view.uris = req.uris.map((u) => LoginUriExport.toView(u));\n    }\n    view.username = req.username;\n    view.password = req.password;\n    view.totp = req.totp;\n    if (req.fido2Credentials != null) {\n      view.fido2Credentials = req.fido2Credentials.map((key) => Fido2CredentialExport.toView(key));\n    }\n    return view;\n  }\n\n  static toDomain(req: LoginExport, domain = new LoginDomain()) {\n    if (req.uris != null) {\n      domain.uris = req.uris.map((u) => LoginUriExport.toDomain(u));\n    }\n    domain.username = req.username != null ? new EncString(req.username) : null;\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.totp = req.totp != null ? new EncString(req.totp) : null;\n    // Fido2credentials are currently not supported for exports.\n\n    return domain;\n  }\n\n  uris: LoginUriExport[];\n  username: string;\n  password: string;\n  totp: string;\n  fido2Credentials: Fido2CredentialExport[] = [];\n\n  constructor(o?: LoginView | LoginDomain) {\n    if (o == null) {\n      return;\n    }\n\n    if (o.uris != null) {\n      this.uris = o.uris.map((u) => new LoginUriExport(u));\n    }\n\n    if (o.fido2Credentials != null) {\n      this.fido2Credentials = o.fido2Credentials.map((key) => new Fido2CredentialExport(key));\n    }\n\n    this.username = safeGetString(o.username);\n    this.password = safeGetString(o.password);\n    this.totp = safeGetString(o.totp);\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Password } from \"../../vault/models/domain/password\";\nimport { PasswordHistoryView } from \"../../vault/models/view/password-history.view\";\n\nimport { safeGetString } from \"./utils\";\n\nexport class PasswordHistoryExport {\n  static template(): PasswordHistoryExport {\n    const req = new PasswordHistoryExport();\n    req.password = null;\n    req.lastUsedDate = null;\n    return req;\n  }\n\n  static toView(req: PasswordHistoryExport, view = new PasswordHistoryView()) {\n    view.password = req.password;\n    view.lastUsedDate = req.lastUsedDate;\n    return view;\n  }\n\n  static toDomain(req: PasswordHistoryExport, domain = new Password()) {\n    domain.password = req.password != null ? new EncString(req.password) : null;\n    domain.lastUsedDate = req.lastUsedDate;\n    return domain;\n  }\n\n  password: string;\n  lastUsedDate: Date = null;\n\n  constructor(o?: PasswordHistoryView | Password) {\n    if (o == null) {\n      return;\n    }\n\n    this.password = safeGetString(o.password);\n    this.lastUsedDate = o.lastUsedDate;\n  }\n}\n","import { SecureNoteType } from \"../../vault/enums\";\nimport { SecureNote as SecureNoteDomain } from \"../../vault/models/domain/secure-note\";\nimport { SecureNoteView } from \"../../vault/models/view/secure-note.view\";\n\nexport class SecureNoteExport {\n  static template(): SecureNoteExport {\n    const req = new SecureNoteExport();\n    req.type = SecureNoteType.Generic;\n    return req;\n  }\n\n  static toView(req: SecureNoteExport, view = new SecureNoteView()) {\n    view.type = req.type;\n    return view;\n  }\n\n  static toDomain(req: SecureNoteExport, view = new SecureNoteDomain()) {\n    view.type = req.type;\n    return view;\n  }\n\n  type: SecureNoteType;\n\n  constructor(o?: SecureNoteView | SecureNoteDomain) {\n    if (o == null) {\n      return;\n    }\n\n    this.type = o.type;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { CipherRepromptType } from \"../../vault/enums/cipher-reprompt-type\";\nimport { CipherType } from \"../../vault/enums/cipher-type\";\nimport { Cipher as CipherDomain } from \"../../vault/models/domain/cipher\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\n\nimport { CardExport } from \"./card.export\";\nimport { FieldExport } from \"./field.export\";\nimport { IdentityExport } from \"./identity.export\";\nimport { LoginExport } from \"./login.export\";\nimport { PasswordHistoryExport } from \"./password-history.export\";\nimport { SecureNoteExport } from \"./secure-note.export\";\nimport { safeGetString } from \"./utils\";\n\nexport class CipherExport {\n  static template(): CipherExport {\n    const req = new CipherExport();\n    req.organizationId = null;\n    req.collectionIds = null;\n    req.folderId = null;\n    req.type = CipherType.Login;\n    req.name = \"Item name\";\n    req.notes = \"Some notes about this item.\";\n    req.favorite = false;\n    req.fields = [];\n    req.login = null;\n    req.secureNote = null;\n    req.card = null;\n    req.identity = null;\n    req.reprompt = CipherRepromptType.None;\n    req.passwordHistory = [];\n    req.creationDate = null;\n    req.revisionDate = null;\n    req.deletedDate = null;\n    return req;\n  }\n\n  static toView(req: CipherExport, view = new CipherView()) {\n    view.type = req.type;\n    view.folderId = req.folderId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    if (view.collectionIds || req.collectionIds) {\n      const set = new Set((view.collectionIds ?? []).concat(req.collectionIds ?? []));\n      view.collectionIds = Array.from(set.values());\n    }\n    view.name = req.name;\n    view.notes = req.notes;\n    view.favorite = req.favorite;\n    view.reprompt = req.reprompt ?? CipherRepromptType.None;\n\n    if (req.fields != null) {\n      view.fields = req.fields.map((f) => FieldExport.toView(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        view.login = LoginExport.toView(req.login);\n        break;\n      case CipherType.SecureNote:\n        view.secureNote = SecureNoteExport.toView(req.secureNote);\n        break;\n      case CipherType.Card:\n        view.card = CardExport.toView(req.card);\n        break;\n      case CipherType.Identity:\n        view.identity = IdentityExport.toView(req.identity);\n        break;\n    }\n\n    if (req.passwordHistory != null) {\n      view.passwordHistory = req.passwordHistory.map((ph) => PasswordHistoryExport.toView(ph));\n    }\n\n    view.creationDate = req.creationDate;\n    view.revisionDate = req.revisionDate;\n    view.deletedDate = req.deletedDate;\n    return view;\n  }\n\n  static toDomain(req: CipherExport, domain = new CipherDomain()) {\n    domain.type = req.type;\n    domain.folderId = req.folderId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.notes = req.notes != null ? new EncString(req.notes) : null;\n    domain.favorite = req.favorite;\n    domain.reprompt = req.reprompt ?? CipherRepromptType.None;\n    domain.key = req.key != null ? new EncString(req.key) : null;\n\n    if (req.fields != null) {\n      domain.fields = req.fields.map((f) => FieldExport.toDomain(f));\n    }\n\n    switch (req.type) {\n      case CipherType.Login:\n        domain.login = LoginExport.toDomain(req.login);\n        break;\n      case CipherType.SecureNote:\n        domain.secureNote = SecureNoteExport.toDomain(req.secureNote);\n        break;\n      case CipherType.Card:\n        domain.card = CardExport.toDomain(req.card);\n        break;\n      case CipherType.Identity:\n        domain.identity = IdentityExport.toDomain(req.identity);\n        break;\n    }\n\n    if (req.passwordHistory != null) {\n      domain.passwordHistory = req.passwordHistory.map((ph) => PasswordHistoryExport.toDomain(ph));\n    }\n\n    domain.creationDate = req.creationDate;\n    domain.revisionDate = req.revisionDate;\n    domain.deletedDate = req.deletedDate;\n    return domain;\n  }\n\n  type: CipherType;\n  folderId: string;\n  organizationId: string;\n  collectionIds: string[];\n  name: string;\n  notes: string;\n  favorite: boolean;\n  fields: FieldExport[];\n  login: LoginExport;\n  secureNote: SecureNoteExport;\n  card: CardExport;\n  identity: IdentityExport;\n  reprompt: CipherRepromptType;\n  passwordHistory: PasswordHistoryExport[] = null;\n  revisionDate: Date = null;\n  creationDate: Date = null;\n  deletedDate: Date = null;\n  key: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.organizationId = o.organizationId;\n    this.folderId = o.folderId;\n    this.type = o.type;\n    this.reprompt = o.reprompt;\n\n    this.name = safeGetString(o.name);\n    this.notes = safeGetString(o.notes);\n    if (\"key\" in o) {\n      this.key = o.key?.encryptedString;\n    }\n\n    this.favorite = o.favorite;\n\n    if (o.fields != null) {\n      this.fields = o.fields.map((f) => new FieldExport(f));\n    }\n\n    switch (o.type) {\n      case CipherType.Login:\n        this.login = new LoginExport(o.login);\n        break;\n      case CipherType.SecureNote:\n        this.secureNote = new SecureNoteExport(o.secureNote);\n        break;\n      case CipherType.Card:\n        this.card = new CardExport(o.card);\n        break;\n      case CipherType.Identity:\n        this.identity = new IdentityExport(o.identity);\n        break;\n    }\n\n    if (o.passwordHistory != null) {\n      this.passwordHistory = o.passwordHistory.map((ph) => new PasswordHistoryExport(ph));\n    }\n\n    this.creationDate = o.creationDate;\n    this.revisionDate = o.revisionDate;\n    this.deletedDate = o.deletedDate;\n  }\n}\n","import { Cipher as CipherDomain } from \"../../vault/models/domain/cipher\";\nimport { CipherView } from \"../../vault/models/view/cipher.view\";\n\nimport { CipherExport } from \"./cipher.export\";\n\nexport class CipherWithIdExport extends CipherExport {\n  id: string;\n  collectionIds: string[];\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CipherView | CipherDomain) {\n    this.id = o.id;\n    super.build(o);\n    this.collectionIds = o.collectionIds;\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Collection as CollectionDomain } from \"../../vault/models/domain/collection\";\nimport { CollectionView } from \"../../vault/models/view/collection.view\";\n\nimport { safeGetString } from \"./utils\";\n\nexport class CollectionExport {\n  static template(): CollectionExport {\n    const req = new CollectionExport();\n    req.organizationId = \"00000000-0000-0000-0000-000000000000\";\n    req.name = \"Collection name\";\n    req.externalId = null;\n    return req;\n  }\n\n  static toView(req: CollectionExport, view = new CollectionView()) {\n    view.name = req.name;\n    view.externalId = req.externalId;\n    if (view.organizationId == null) {\n      view.organizationId = req.organizationId;\n    }\n    return view;\n  }\n\n  static toDomain(req: CollectionExport, domain = new CollectionDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    domain.externalId = req.externalId;\n    if (domain.organizationId == null) {\n      domain.organizationId = req.organizationId;\n    }\n    return domain;\n  }\n\n  organizationId: string;\n  name: string;\n  externalId: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.organizationId = o.organizationId;\n    this.name = safeGetString(o.name);\n    this.externalId = o.externalId;\n  }\n}\n","import { Collection as CollectionDomain } from \"../../vault/models/domain/collection\";\nimport { CollectionView } from \"../../vault/models/view/collection.view\";\n\nimport { CollectionExport } from \"./collection.export\";\n\nexport class CollectionWithIdExport extends CollectionExport {\n  id: string;\n\n  static toView(req: CollectionWithIdExport, view = new CollectionView()) {\n    view.id = req.id;\n    return super.toView(req, view);\n  }\n\n  static toDomain(req: CollectionWithIdExport, domain = new CollectionDomain()) {\n    domain.id = req.id;\n    return super.toDomain(req, domain);\n  }\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: CollectionView | CollectionDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","import { EncString } from \"../../platform/models/domain/enc-string\";\nimport { Folder as FolderDomain } from \"../../vault/models/domain/folder\";\nimport { FolderView } from \"../../vault/models/view/folder.view\";\n\nimport { safeGetString } from \"./utils\";\n\nexport class FolderExport {\n  static template(): FolderExport {\n    const req = new FolderExport();\n    req.name = \"Folder name\";\n    return req;\n  }\n\n  static toView(req: FolderExport, view = new FolderView()) {\n    view.name = req.name;\n    return view;\n  }\n\n  static toDomain(req: FolderExport, domain = new FolderDomain()) {\n    domain.name = req.name != null ? new EncString(req.name) : null;\n    return domain;\n  }\n\n  name: string;\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    this.name = safeGetString(o.name);\n  }\n}\n","import { Folder as FolderDomain } from \"../../vault/models/domain/folder\";\nimport { FolderView } from \"../../vault/models/view/folder.view\";\n\nimport { FolderExport } from \"./folder.export\";\n\nexport class FolderWithIdExport extends FolderExport {\n  id: string;\n\n  static toView(req: FolderWithIdExport, view = new FolderView()) {\n    view.id = req.id;\n    return super.toView(req, view);\n  }\n\n  static toDomain(req: FolderWithIdExport, domain = new FolderDomain()) {\n    domain.id = req.id;\n    return super.toDomain(req, domain);\n  }\n\n  // Use build method instead of ctor so that we can control order of JSON stringify for pretty print\n  build(o: FolderView | FolderDomain) {\n    this.id = o.id;\n    super.build(o);\n  }\n}\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { PinServiceAbstraction } from \"@bitwarden/auth/common\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport {\n  CipherWithIdExport,\n  CollectionWithIdExport,\n  FolderWithIdExport,\n} from \"@bitwarden/common/models/export\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { OrganizationId } from \"@bitwarden/common/types/guid\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport {\n  BitwardenEncryptedIndividualJsonExport,\n  BitwardenEncryptedOrgJsonExport,\n  BitwardenJsonExport,\n  BitwardenUnEncryptedIndividualJsonExport,\n  BitwardenUnEncryptedOrgJsonExport,\n} from \"@bitwarden/vault-export-core\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class BitwardenJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  protected constructor(\n    protected cryptoService: CryptoService,\n    protected i18nService: I18nService,\n    protected cipherService: CipherService,\n    protected pinService: PinServiceAbstraction,\n    protected accountService: AccountService,\n  ) {\n    super();\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results: BitwardenJsonExport = JSON.parse(data);\n    if (results == null || results.items == null) {\n      this.result.success = false;\n      return this.result;\n    }\n\n    if (results.encrypted) {\n      await this.parseEncrypted(results as any);\n    } else {\n      await this.parseDecrypted(results as any);\n    }\n\n    return this.result;\n  }\n\n  private async parseEncrypted(\n    results: BitwardenEncryptedIndividualJsonExport | BitwardenEncryptedOrgJsonExport,\n  ) {\n    if (results.encKeyValidation_DO_NOT_EDIT != null) {\n      const orgKey = await this.cryptoService.getOrgKey(this.organizationId);\n      const encKeyValidation = new EncString(results.encKeyValidation_DO_NOT_EDIT);\n      const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n        encKeyValidation,\n        orgKey,\n      );\n      if (encKeyValidationDecrypt === null) {\n        this.result.success = false;\n        this.result.errorMessage = this.i18nService.t(\"importEncKeyError\");\n        return;\n      }\n    }\n\n    const groupingsMap = this.organization\n      ? await this.parseCollections(results as BitwardenEncryptedOrgJsonExport)\n      : await this.parseFolders(results as BitwardenEncryptedIndividualJsonExport);\n\n    for (const c of results.items) {\n      const cipher = CipherWithIdExport.toDomain(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = this.organizationId;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      const activeUserId = await firstValueFrom(\n        this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n      );\n      const view = await cipher.decrypt(\n        await this.cipherService.getKeyForCipherKeyDecryption(cipher, activeUserId),\n      );\n      this.cleanupCipher(view);\n      this.result.ciphers.push(view);\n    }\n\n    this.result.success = true;\n  }\n\n  private async parseDecrypted(\n    results: BitwardenUnEncryptedIndividualJsonExport | BitwardenUnEncryptedOrgJsonExport,\n  ) {\n    const groupingsMap = this.organization\n      ? await this.parseCollections(results as BitwardenUnEncryptedOrgJsonExport)\n      : await this.parseFolders(results as BitwardenUnEncryptedIndividualJsonExport);\n\n    results.items.forEach((c) => {\n      const cipher = CipherWithIdExport.toView(c);\n      // reset ids incase they were set for some reason\n      cipher.id = null;\n      cipher.organizationId = null;\n      cipher.collectionIds = null;\n\n      // make sure password history is limited\n      if (cipher.passwordHistory != null && cipher.passwordHistory.length > 5) {\n        cipher.passwordHistory = cipher.passwordHistory.slice(0, 5);\n      }\n\n      if (!this.organization && c.folderId != null && groupingsMap.has(c.folderId)) {\n        this.result.folderRelationships.push([\n          this.result.ciphers.length,\n          groupingsMap.get(c.folderId),\n        ]);\n      } else if (this.organization && c.collectionIds != null) {\n        c.collectionIds.forEach((cId) => {\n          if (groupingsMap.has(cId)) {\n            this.result.collectionRelationships.push([\n              this.result.ciphers.length,\n              groupingsMap.get(cId),\n            ]);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n  }\n\n  private async parseFolders(\n    data: BitwardenUnEncryptedIndividualJsonExport | BitwardenEncryptedIndividualJsonExport,\n  ): Promise<Map<string, number>> | null {\n    if (data.folders == null) {\n      return null;\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    for (const f of data.folders) {\n      let folderView: FolderView;\n      if (data.encrypted) {\n        const folder = FolderWithIdExport.toDomain(f);\n        if (folder != null) {\n          folderView = await folder.decrypt();\n        }\n      } else {\n        folderView = FolderWithIdExport.toView(f);\n      }\n\n      if (folderView != null) {\n        groupingsMap.set(f.id, this.result.folders.length);\n        this.result.folders.push(folderView);\n      }\n    }\n    return groupingsMap;\n  }\n\n  private async parseCollections(\n    data: BitwardenUnEncryptedOrgJsonExport | BitwardenEncryptedOrgJsonExport,\n  ): Promise<Map<string, number>> | null {\n    if (data.collections == null) {\n      return null;\n    }\n\n    const groupingsMap = new Map<string, number>();\n\n    for (const c of data.collections) {\n      let collectionView: CollectionView;\n      if (data.encrypted) {\n        const collection = CollectionWithIdExport.toDomain(c);\n        collection.organizationId = this.organizationId;\n        collectionView = await firstValueFrom(this.cryptoService.activeUserOrgKeys$).then(\n          (orgKeys) => collection.decrypt(orgKeys[c.organizationId as OrganizationId]),\n        );\n      } else {\n        collectionView = CollectionWithIdExport.toView(c);\n        collectionView.organizationId = null;\n      }\n\n      if (collectionView != null) {\n        groupingsMap.set(c.id, this.result.collections.length);\n        this.result.collections.push(collectionView);\n      }\n    }\n    return groupingsMap;\n  }\n}\n","import { PinServiceAbstraction } from \"@bitwarden/auth/common\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport {\n  Argon2KdfConfig,\n  KdfConfig,\n  PBKDF2KdfConfig,\n} from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { KdfType } from \"@bitwarden/common/platform/enums\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { BitwardenPasswordProtectedFileFormat } from \"@bitwarden/vault-export-core\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { Importer } from \"../importer\";\n\nimport { BitwardenJsonImporter } from \"./bitwarden-json-importer\";\n\nexport class BitwardenPasswordProtectedImporter extends BitwardenJsonImporter implements Importer {\n  private key: SymmetricCryptoKey;\n\n  constructor(\n    cryptoService: CryptoService,\n    i18nService: I18nService,\n    cipherService: CipherService,\n    pinService: PinServiceAbstraction,\n    accountService: AccountService,\n    private promptForPassword_callback: () => Promise<string>,\n  ) {\n    super(cryptoService, i18nService, cipherService, pinService, accountService);\n  }\n\n  async parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const parsedData: BitwardenPasswordProtectedFileFormat = JSON.parse(data);\n\n    if (!parsedData) {\n      result.success = false;\n      return result;\n    }\n\n    // File is unencrypted\n    if (!parsedData?.encrypted) {\n      return await super.parse(data);\n    }\n\n    // File is account-encrypted\n    if (!parsedData?.passwordProtected) {\n      return await super.parse(data);\n    }\n\n    if (this.cannotParseFile(parsedData)) {\n      result.success = false;\n      return result;\n    }\n\n    // File is password-protected\n    const password = await this.promptForPassword_callback();\n    if (!(await this.checkPassword(parsedData, password))) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"invalidFilePassword\");\n      return result;\n    }\n\n    const encData = new EncString(parsedData.data);\n    const clearTextData = await this.cryptoService.decryptToUtf8(encData, this.key);\n    return await super.parse(clearTextData);\n  }\n\n  private async checkPassword(\n    jdoc: BitwardenPasswordProtectedFileFormat,\n    password: string,\n  ): Promise<boolean> {\n    if (this.isNullOrWhitespace(password)) {\n      return false;\n    }\n\n    const kdfConfig: KdfConfig =\n      jdoc.kdfType === KdfType.PBKDF2_SHA256\n        ? new PBKDF2KdfConfig(jdoc.kdfIterations)\n        : new Argon2KdfConfig(jdoc.kdfIterations, jdoc.kdfMemory, jdoc.kdfParallelism);\n\n    this.key = await this.pinService.makePinKey(password, jdoc.salt, kdfConfig);\n\n    const encKeyValidation = new EncString(jdoc.encKeyValidation_DO_NOT_EDIT);\n\n    const encKeyValidationDecrypt = await this.cryptoService.decryptToUtf8(\n      encKeyValidation,\n      this.key,\n    );\n    if (encKeyValidationDecrypt === null) {\n      return false;\n    }\n    return true;\n  }\n\n  private cannotParseFile(jdoc: BitwardenPasswordProtectedFileFormat): boolean {\n    return (\n      !jdoc ||\n      !jdoc.encrypted ||\n      !jdoc.passwordProtected ||\n      !jdoc.salt ||\n      !jdoc.kdfIterations ||\n      typeof jdoc.kdfIterations !== \"number\" ||\n      jdoc.kdfType == null ||\n      KdfType[jdoc.kdfType] == null ||\n      !jdoc.encKeyValidation_DO_NOT_EDIT ||\n      !jdoc.data\n    );\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class BlurCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.label === \"null\") {\n        value.label = null;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(\n        value.label,\n        this.getValueOrDefault(this.nameFromUrl(value.domain), \"--\"),\n      );\n      cipher.login.uris = this.makeUriArray(value.domain);\n      cipher.login.password = this.getValueOrDefault(value.password);\n\n      if (this.isNullOrWhitespace(value.email) && !this.isNullOrWhitespace(value.username)) {\n        cipher.login.username = value.username;\n      } else {\n        cipher.login.username = this.getValueOrDefault(value.email);\n        cipher.notes = this.getValueOrDefault(value.username);\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst OfficialProps = [\"!group_id\", \"!group_name\", \"title\", \"username\", \"password\", \"URL\", \"id\"];\n\nexport class ButtercupCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value[\"!group_name\"]));\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      let processingCustomFields = false;\n      for (const prop in value) {\n        // eslint-disable-next-line\n        if (value.hasOwnProperty(prop)) {\n          if (!processingCustomFields && OfficialProps.indexOf(prop) === -1) {\n            processingCustomFields = true;\n          }\n          if (processingCustomFields) {\n            this.processKvp(cipher, prop, value[prop]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ClipperzHtmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const textarea = doc.querySelector(\"textarea\");\n    if (textarea == null || this.isNullOrWhitespace(textarea.textContent)) {\n      result.errorMessage = \"Missing textarea.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const entries = JSON.parse(textarea.textContent);\n    entries.forEach((entry: any) => {\n      const cipher = this.initLoginCipher();\n      if (!this.isNullOrWhitespace(entry.label)) {\n        cipher.name = entry.label.split(\" \")[0];\n      }\n      if (entry.data != null && !this.isNullOrWhitespace(entry.data.notes)) {\n        cipher.notes = entry.data.notes.split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (entry.currentVersion != null && entry.currentVersion.fields != null) {\n        for (const property in entry.currentVersion.fields) {\n          // eslint-disable-next-line\n          if (!entry.currentVersion.fields.hasOwnProperty(property)) {\n            continue;\n          }\n\n          const field = entry.currentVersion.fields[property];\n          const actionType = field.actionType != null ? field.actionType.toLowerCase() : null;\n          switch (actionType) {\n            case \"password\":\n              cipher.login.password = this.getValueOrDefault(field.value);\n              break;\n            case \"email\":\n            case \"username\":\n            case \"user\":\n            case \"name\":\n              cipher.login.username = this.getValueOrDefault(field.value);\n              break;\n            case \"url\":\n              cipher.login.uris = this.makeUriArray(field.value);\n              break;\n            default: {\n              const labelLower = field.label != null ? field.label.toLowerCase() : null;\n              if (\n                cipher.login.password == null &&\n                this.passwordFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.password = this.getValueOrDefault(field.value);\n              } else if (\n                cipher.login.username == null &&\n                this.usernameFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.username = this.getValueOrDefault(field.value);\n              } else if (\n                (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n                this.uriFieldNames.indexOf(labelLower) > -1\n              ) {\n                cipher.login.uris = this.makeUriArray(field.value);\n              } else {\n                this.processKvp(cipher, field.label, field.value);\n              }\n              break;\n            }\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class CodebookCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValueOrDefault(value.Category));\n\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite) === \"True\";\n      cipher.name = this.getValueOrDefault(value.Entry, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.login.username = this.getValueOrDefault(value.Username, value.Email);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.totp = this.getValueOrDefault(value.TOTP);\n      cipher.login.uris = this.makeUriArray(value.Website);\n\n      if (!this.isNullOrWhitespace(value.Username)) {\n        this.processKvp(cipher, \"Email\", value.Email);\n      }\n      this.processKvp(cipher, \"Phone\", value.Phone);\n      this.processKvp(cipher, \"PIN\", value.PIN);\n      this.processKvp(cipher, \"Account\", value.Account);\n      this.processKvp(cipher, \"Date\", value.Date);\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CredentialsRecord,\n  IdRecord,\n  PaymentsRecord,\n  PersonalInformationRecord,\n  SecureNoteRecord,\n} from \"./types/dashlane-csv-types\";\n\nconst _mappedCredentialsColumns = new Set([\n  \"title\",\n  \"note\",\n  \"username\",\n  \"password\",\n  \"url\",\n  \"otpSecret\",\n  \"category\",\n]);\n\nconst _mappedPersonalInfoAsIdentityColumns = new Set([\n  \"type\",\n  \"title\",\n  \"first_name\",\n  \"middle_name\",\n  \"last_name\",\n  \"login\",\n  \"email\",\n  \"phone_number\",\n  \"address\",\n  \"country\",\n  \"state\",\n  \"city\",\n  \"zip\",\n  // Skip item_name as we already have set a combined name\n  \"item_name\",\n]);\n\nconst _mappedSecureNoteColumns = new Set([\"title\", \"note\"]);\n\nexport class DashlaneCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results[0].type != null && results[0].title != null) {\n      const personalRecords = results as PersonalInformationRecord[];\n\n      // If personalRecords has only one \"name\" then create an Identity-Cipher\n      if (personalRecords.filter((x) => x.type === \"name\").length === 1) {\n        const cipher = this.initLoginCipher();\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        results.forEach((row) => {\n          this.parsePersonalInformationRecordAsIdentity(cipher, row);\n        });\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n        result.success = true;\n        return Promise.resolve(result);\n      }\n    }\n\n    results.forEach((row) => {\n      const cipher = this.initLoginCipher();\n\n      const rowKeys = Object.keys(row);\n      if (rowKeys[0] === \"username\") {\n        this.processFolder(result, row.category);\n        this.parseCredentialsRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"account_name\") {\n        this.parsePaymentRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"type\" && rowKeys[1] === \"number\") {\n        this.parseIdRecord(cipher, row);\n      }\n\n      if ((rowKeys[0] === \"type\") != null && rowKeys[1] === \"title\") {\n        this.parsePersonalInformationRecord(cipher, row);\n      }\n\n      if (rowKeys[0] === \"title\" && rowKeys[1] === \"note\") {\n        this.parseSecureNoteRecords(cipher, row);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  parseCredentialsRecord(cipher: CipherView, row: CredentialsRecord) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    cipher.name = row.title;\n    cipher.notes = row.note;\n    cipher.login.username = row.username;\n    cipher.login.password = row.password;\n    cipher.login.totp = row.otpSecret;\n    cipher.login.uris = this.makeUriArray(row.url);\n\n    this.importUnmappedFields(cipher, row, _mappedCredentialsColumns);\n  }\n\n  parsePaymentRecord(cipher: CipherView, row: PaymentsRecord) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n\n    cipher.name = row.account_name;\n    let mappedValues: string[] = [];\n    switch (row.type) {\n      case \"credit_card\":\n        cipher.card.cardholderName = row.account_name;\n        cipher.card.number = row.cc_number;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = row.code;\n        this.setCardExpiration(cipher, `${row.expiration_month}/${row.expiration_year}`);\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\n          \"account_name\",\n          \"account_holder\",\n          \"cc_number\",\n          \"code\",\n          \"expiration_month\",\n          \"expiration_year\",\n        ];\n        break;\n      case \"bank\":\n        cipher.card.cardholderName = row.account_holder;\n        cipher.card.number = row.account_number;\n\n        // If you add more mapped fields please extend this\n        mappedValues = [\"account_name\", \"account_holder\", \"account_number\"];\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parseIdRecord(cipher: CipherView, row: IdRecord) {\n    cipher.type = CipherType.Identity;\n    cipher.identity = new IdentityView();\n\n    const mappedValues: string[] = [\"name\", \"number\"];\n    switch (row.type) {\n      case \"card\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        break;\n      case \"passport\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.passportNumber = row.number;\n        break;\n      case \"license\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.licenseNumber = row.number;\n        cipher.identity.state = row.state;\n\n        mappedValues.push(\"state\");\n        break;\n      case \"social_security\":\n        cipher.name = `${row.name} ${row.type}`;\n        this.processFullName(cipher, row.name);\n        cipher.identity.ssn = row.number;\n        break;\n      case \"tax_number\":\n        cipher.name = row.type;\n        cipher.identity.licenseNumber = row.number;\n        break;\n\n      default:\n        break;\n    }\n\n    // If you add more mapped fields please extend this\n    this.importUnmappedFields(cipher, row, new Set(mappedValues));\n  }\n\n  parsePersonalInformationRecord(cipher: CipherView, row: PersonalInformationRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    if (row.type === \"name\") {\n      cipher.name = `${row.title} ${row.first_name} ${row.middle_name} ${row.last_name}`\n        .replace(\"  \", \" \")\n        .trim();\n    } else {\n      cipher.name = row.item_name;\n    }\n\n    const dataRow = row as any;\n    Object.keys(row).forEach((key) => {\n      this.processKvp(cipher, key, dataRow[key]);\n    });\n  }\n\n  parsePersonalInformationRecordAsIdentity(cipher: CipherView, row: PersonalInformationRecord) {\n    switch (row.type) {\n      case \"name\":\n        this.processFullName(cipher, `${row.first_name} ${row.middle_name} ${row.last_name}`);\n        cipher.identity.title = row.title;\n        cipher.name = cipher.identity.fullName;\n\n        cipher.identity.username = row.login;\n        break;\n      case \"email\":\n        cipher.identity.email = row.email;\n        break;\n      case \"number\":\n        cipher.identity.phone = row.phone_number;\n        break;\n      case \"address\":\n        cipher.identity.address1 = row.address;\n        cipher.identity.city = row.city;\n        cipher.identity.postalCode = row.zip;\n        cipher.identity.state = row.state;\n        cipher.identity.country = row.country;\n        break;\n      default:\n        break;\n    }\n\n    this.importUnmappedFields(cipher, row, _mappedPersonalInfoAsIdentityColumns);\n  }\n\n  parseSecureNoteRecords(cipher: CipherView, row: SecureNoteRecord) {\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = row.title;\n    cipher.notes = row.note;\n\n    this.importUnmappedFields(cipher, row, _mappedSecureNoteColumns);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nconst HandledResults = new Set([\n  \"ADDRESS\",\n  \"AUTHENTIFIANT\",\n  \"BANKSTATEMENT\",\n  \"IDCARD\",\n  \"IDENTITY\",\n  \"PAYMENTMEANS_CREDITCARD\",\n  \"PAYMENTMEAN_PAYPAL\",\n  \"EMAIL\",\n]);\n\nexport class DashlaneJsonImporter extends BaseImporter implements Importer {\n  private result: ImportResult;\n\n  parse(data: string): Promise<ImportResult> {\n    this.result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    if (results.ADDRESS != null) {\n      this.processAddress(results.ADDRESS);\n    }\n    if (results.AUTHENTIFIANT != null) {\n      this.processAuth(results.AUTHENTIFIANT);\n    }\n    if (results.BANKSTATEMENT != null) {\n      this.processNote(results.BANKSTATEMENT, \"BankAccountName\");\n    }\n    if (results.IDCARD != null) {\n      this.processNote(results.IDCARD, \"Fullname\");\n    }\n    if (results.PAYMENTMEANS_CREDITCARD != null) {\n      this.processCard(results.PAYMENTMEANS_CREDITCARD);\n    }\n    if (results.IDENTITY != null) {\n      this.processIdentity(results.IDENTITY);\n    }\n\n    for (const key in results) {\n      // eslint-disable-next-line\n      if (results.hasOwnProperty(key) && !HandledResults.has(key)) {\n        this.processNote(results[key], null, \"Generic Note\");\n      }\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processAuth(results: any[]) {\n    results.forEach((credential: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(credential.title);\n\n      cipher.login.username = this.getValueOrDefault(\n        credential.login,\n        this.getValueOrDefault(credential.secondaryLogin),\n      );\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.domain);\n      cipher.notes += this.getValueOrDefault(credential.note, \"\");\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processIdentity(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.fullName, \"\");\n      const nameParts = cipher.name.split(\" \");\n      if (nameParts.length > 0) {\n        cipher.identity.firstName = this.getValueOrDefault(nameParts[0]);\n      }\n      if (nameParts.length === 2) {\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[1]);\n      } else if (nameParts.length === 3) {\n        cipher.identity.middleName = this.getValueOrDefault(nameParts[1]);\n        cipher.identity.lastName = this.getValueOrDefault(nameParts[2]);\n      }\n      cipher.identity.username = this.getValueOrDefault(obj.pseudo);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processAddress(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.identity = new IdentityView();\n      cipher.type = CipherType.Identity;\n      cipher.name = this.getValueOrDefault(obj.addressName);\n      cipher.identity.address1 = this.getValueOrDefault(obj.addressFull);\n      cipher.identity.city = this.getValueOrDefault(obj.city);\n      cipher.identity.state = this.getValueOrDefault(obj.state);\n      cipher.identity.postalCode = this.getValueOrDefault(obj.zipcode);\n      cipher.identity.country = this.getValueOrDefault(obj.country);\n      if (cipher.identity.country != null) {\n        cipher.identity.country = cipher.identity.country.toUpperCase();\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processCard(results: any[]) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.card = new CardView();\n      cipher.type = CipherType.Card;\n      cipher.name = this.getValueOrDefault(obj.bank);\n      cipher.card.number = this.getValueOrDefault(obj.cardNumber);\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      cipher.card.cardholderName = this.getValueOrDefault(obj.owner);\n      if (!this.isNullOrWhitespace(cipher.card.brand)) {\n        if (this.isNullOrWhitespace(cipher.name)) {\n          cipher.name = cipher.card.brand;\n        } else {\n          cipher.name += \" - \" + cipher.card.brand;\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n\n  private processNote(results: any[], nameProperty: string, name: string = null) {\n    results.forEach((obj: any) => {\n      const cipher = new CipherView();\n      cipher.secureNote = new SecureNoteView();\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote.type = SecureNoteType.Generic;\n      if (name != null) {\n        cipher.name = name;\n      } else {\n        cipher.name = this.getValueOrDefault(obj[nameProperty]);\n      }\n      for (const key in obj) {\n        // eslint-disable-next-line\n        if (obj.hasOwnProperty(key) && key !== nameProperty) {\n          this.processKvp(cipher, key, obj[key].toString());\n        }\n      }\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class EncryptrCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Label, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      const text = this.getValueOrDefault(value.Text);\n      if (!this.isNullOrWhitespace(text)) {\n        if (this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = text;\n        } else {\n          cipher.notes += \"\\n\\n\" + text;\n        }\n      }\n\n      const type = value[\"Entry Type\"];\n      if (type === \"Password\") {\n        cipher.login.username = this.getValueOrDefault(value.Username);\n        cipher.login.password = this.getValueOrDefault(value.Password);\n        cipher.login.uris = this.makeUriArray(value[\"Site URL\"]);\n      } else if (type === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value[\"Name on card\"]);\n        cipher.card.number = this.getValueOrDefault(value[\"Card Number\"]);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.CVV);\n        const expiry = this.getValueOrDefault(value.Expiry);\n        if (!this.isNullOrWhitespace(expiry)) {\n          const expParts = expiry.split(\"/\");\n          if (expParts.length > 1) {\n            cipher.card.expMonth = parseInt(expParts[0], null).toString();\n            cipher.card.expYear = (2000 + parseInt(expParts[1], null)).toString();\n          }\n        }\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class EnpassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let firstRow = true;\n    results.forEach((value) => {\n      if (value.length < 2 || (firstRow && (value[0] === \"Title\" || value[0] === \"title\"))) {\n        firstRow = false;\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 1]);\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      if (\n        value.length === 2 ||\n        (!this.containsField(value, \"username\") &&\n          !this.containsField(value, \"password\") &&\n          !this.containsField(value, \"email\") &&\n          !this.containsField(value, \"url\"))\n      ) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      }\n\n      if (\n        this.containsField(value, \"cardholder\") &&\n        this.containsField(value, \"number\") &&\n        this.containsField(value, \"expiry date\")\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      }\n\n      if (value.length > 2 && value.length % 2 === 0) {\n        for (let i = 0; i < value.length - 2; i += 2) {\n          const fieldValue: string = value[i + 2];\n          if (this.isNullOrWhitespace(fieldValue)) {\n            continue;\n          }\n\n          const fieldName: string = value[i + 1];\n          const fieldNameLower = fieldName.toLowerCase();\n\n          if (cipher.type === CipherType.Login) {\n            if (\n              fieldNameLower === \"url\" &&\n              (cipher.login.uris == null || cipher.login.uris.length === 0)\n            ) {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              continue;\n            } else if (\n              (fieldNameLower === \"username\" || fieldNameLower === \"email\") &&\n              this.isNullOrWhitespace(cipher.login.username)\n            ) {\n              cipher.login.username = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"password\" &&\n              this.isNullOrWhitespace(cipher.login.password)\n            ) {\n              cipher.login.password = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n              cipher.login.totp = fieldValue;\n              continue;\n            }\n          } else if (cipher.type === CipherType.Card) {\n            if (\n              fieldNameLower === \"cardholder\" &&\n              this.isNullOrWhitespace(cipher.card.cardholderName)\n            ) {\n              cipher.card.cardholderName = fieldValue;\n              continue;\n            } else if (fieldNameLower === \"number\" && this.isNullOrWhitespace(cipher.card.number)) {\n              cipher.card.number = fieldValue;\n              cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n              continue;\n            } else if (fieldNameLower === \"cvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n              cipher.card.code = fieldValue;\n              continue;\n            } else if (\n              fieldNameLower === \"expiry date\" &&\n              this.isNullOrWhitespace(cipher.card.expMonth) &&\n              this.isNullOrWhitespace(cipher.card.expYear)\n            ) {\n              if (this.setCardExpiration(cipher, fieldValue)) {\n                continue;\n              }\n            } else if (fieldNameLower === \"type\") {\n              // Skip since brand was determined from number above\n              continue;\n            }\n          }\n\n          this.processKvp(cipher, fieldName, fieldValue);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private containsField(fields: any[], name: string) {\n    if (fields == null || name == null) {\n      return false;\n    }\n    return (\n      fields.filter((f) => !this.isNullOrWhitespace(f) && f.toLowerCase() === name.toLowerCase())\n        .length > 0\n    );\n  }\n}\n","import { FieldType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { EnpassJsonFile, EnpassFolder, EnpassField } from \"./types/enpass-json-type\";\n\ntype EnpassFolderTreeItem = EnpassFolder & { children: EnpassFolderTreeItem[] };\nconst androidUrlRegex = new RegExp(\"androidapp://.*==@\", \"g\");\n\nexport class EnpassJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: EnpassJsonFile = JSON.parse(data);\n    if (results == null || results.items == null || results.items.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    const foldersIndexMap = new Map<string, number>();\n    const folderTree = this.buildFolderTree(results.folders);\n    this.flattenFolderTree(null, folderTree, foldersMap);\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((item) => {\n      if (item.folders != null && item.folders.length > 0 && foldersIndexMap.has(item.folders[0])) {\n        result.folderRelationships.push([\n          result.ciphers.length,\n          foldersIndexMap.get(item.folders[0]),\n        ]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(item.title);\n      cipher.favorite = item.favorite > 0;\n\n      if (item.template_type != null && item.fields != null && item.fields.length > 0) {\n        if (\n          item.template_type.indexOf(\"login.\") === 0 ||\n          item.template_type.indexOf(\"password.\") === 0\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else if (item.template_type.indexOf(\"creditcard.\") === 0) {\n          this.processCard(cipher, item.fields);\n        } else if (\n          item.template_type.indexOf(\"identity.\") < 0 &&\n          item.fields.some((f) => f.type === \"password\" && !this.isNullOrWhitespace(f.value))\n        ) {\n          this.processLogin(cipher, item.fields);\n        } else {\n          this.processNote(cipher, item.fields);\n        }\n      }\n\n      cipher.notes += \"\\n\" + this.getValueOrDefault(item.note, \"\");\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private processLogin(cipher: CipherView, fields: EnpassField[]) {\n    const urls: string[] = [];\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n\n      if (\n        (field.type === \"username\" || field.type === \"email\") &&\n        this.isNullOrWhitespace(cipher.login.username)\n      ) {\n        cipher.login.username = field.value;\n      } else if (field.type === \"password\" && this.isNullOrWhitespace(cipher.login.password)) {\n        cipher.login.password = field.value;\n      } else if (field.type === \"totp\" && this.isNullOrWhitespace(cipher.login.totp)) {\n        cipher.login.totp = field.value;\n      } else if (field.type === \"url\") {\n        urls.push(field.value);\n      } else if (field.type === \".Android#\") {\n        let cleanedValue = field.value.startsWith(\"androidapp://\")\n          ? field.value\n          : \"androidapp://\" + field.value;\n        cleanedValue = cleanedValue.replace(\"android://\", \"\");\n        cleanedValue = cleanedValue.replace(androidUrlRegex, \"androidapp://\");\n        urls.push(cleanedValue);\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text,\n        );\n      }\n    });\n    cipher.login.uris = this.makeUriArray(urls);\n  }\n\n  private processCard(cipher: CipherView, fields: EnpassField[]) {\n    cipher.card = new CardView();\n    cipher.type = CipherType.Card;\n    fields.forEach((field) => {\n      if (\n        this.isNullOrWhitespace(field.value) ||\n        field.type === \"section\" ||\n        field.type === \"ccType\"\n      ) {\n        return;\n      }\n\n      if (field.type === \"ccName\" && this.isNullOrWhitespace(cipher.card.cardholderName)) {\n        cipher.card.cardholderName = field.value;\n      } else if (field.type === \"ccNumber\" && this.isNullOrWhitespace(cipher.card.number)) {\n        cipher.card.number = field.value;\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      } else if (field.type === \"ccCvc\" && this.isNullOrWhitespace(cipher.card.code)) {\n        cipher.card.code = field.value;\n      } else if (field.type === \"ccExpiry\" && this.isNullOrWhitespace(cipher.card.expYear)) {\n        if (!this.setCardExpiration(cipher, field.value)) {\n          this.processKvp(\n            cipher,\n            field.label,\n            field.value,\n            field.sensitive === 1 ? FieldType.Hidden : FieldType.Text,\n          );\n        }\n      } else {\n        this.processKvp(\n          cipher,\n          field.label,\n          field.value,\n          field.sensitive === 1 ? FieldType.Hidden : FieldType.Text,\n        );\n      }\n    });\n  }\n\n  private processNote(cipher: CipherView, fields: EnpassField[]) {\n    fields.forEach((field) => {\n      if (this.isNullOrWhitespace(field.value) || field.type === \"section\") {\n        return;\n      }\n      this.processKvp(\n        cipher,\n        field.label,\n        field.value,\n        field.sensitive === 1 ? FieldType.Hidden : FieldType.Text,\n      );\n    });\n  }\n\n  private buildFolderTree(folders: EnpassFolder[]): EnpassFolderTreeItem[] {\n    if (folders == null) {\n      return [];\n    }\n    const folderTree: EnpassFolderTreeItem[] = [];\n    const map = new Map<string, EnpassFolderTreeItem>([]);\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      map.set(obj.uuid, obj);\n      obj.children = [];\n    });\n    folders.forEach((obj: EnpassFolderTreeItem) => {\n      if (obj.parent_uuid != null && obj.parent_uuid !== \"\" && map.has(obj.parent_uuid)) {\n        map.get(obj.parent_uuid).children.push(obj);\n      } else {\n        folderTree.push(obj);\n      }\n    });\n    return folderTree;\n  }\n\n  private flattenFolderTree(\n    titlePrefix: string,\n    tree: EnpassFolderTreeItem[],\n    map: Map<string, string>,\n  ) {\n    if (tree == null) {\n      return;\n    }\n    tree.forEach((f) => {\n      if (f.title != null && f.title.trim() !== \"\") {\n        let title = f.title.trim();\n        if (titlePrefix != null && titlePrefix.trim() !== \"\") {\n          title = titlePrefix + \"/\" + title;\n        }\n        map.set(f.uuid, title);\n        if (f.children != null && f.children.length !== 0) {\n          this.flattenFolderTree(title, f.children, map);\n        }\n      }\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class FirefoxCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results\n      .filter((value) => {\n        return value.url !== \"chrome://FirefoxAccounts\";\n      })\n      .forEach((value) => {\n        const cipher = this.initLoginCipher();\n        const url = this.getValueOrDefault(value.url, this.getValueOrDefault(value.hostname));\n        cipher.name = this.getValueOrDefault(this.nameFromUrl(url), \"--\");\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.uris = this.makeUriArray(url);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export interface FskFile {\n  data: Data;\n}\n\nexport interface Data {\n  [key: string]: FskEntry;\n}\n\nexport enum FskEntryTypesEnum {\n  Login = 1,\n  CreditCard = 2,\n}\n\nexport interface FskEntry {\n  color: string;\n  creditCvv: string;\n  creditExpiry: string;\n  creditNumber: string;\n  favorite: number; // UNIX timestamp\n  notes: string;\n  password: string;\n  passwordList: PasswordList[];\n  passwordModifiedDate: number; // UNIX timestamp\n  rev: string | number;\n  service: string;\n  style: string;\n  type: FskEntryTypesEnum;\n  url: string;\n  username: string;\n  createdDate: number; // UNIX timestamp\n  modifiedDate: number; // UNIX timestamp\n}\n\nexport interface PasswordList {\n  changedate: string;\n  password: string;\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { FskEntry, FskEntryTypesEnum, FskFile } from \"./fsecure-fsk-types\";\n\nexport class FSecureFskImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: FskFile = JSON.parse(data);\n    if (results == null || results.data == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const key in results.data) {\n      // eslint-disable-next-line\n      if (!results.data.hasOwnProperty(key)) {\n        continue;\n      }\n\n      const value = results.data[key];\n      const cipher = this.parseEntry(value);\n      result.ciphers.push(cipher);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseEntry(entry: FskEntry): CipherView {\n    const cipher = this.initLoginCipher();\n    cipher.name = this.getValueOrDefault(entry.service);\n    cipher.notes = this.getValueOrDefault(entry.notes);\n    cipher.favorite = entry.favorite > 0;\n\n    switch (entry.type) {\n      case FskEntryTypesEnum.Login:\n        this.handleLoginEntry(entry, cipher);\n        break;\n      case FskEntryTypesEnum.CreditCard:\n        this.handleCreditCardEntry(entry, cipher);\n        break;\n      default:\n        return;\n        break;\n    }\n\n    this.convertToNoteIfNeeded(cipher);\n    this.cleanupCipher(cipher);\n    return cipher;\n  }\n\n  private handleLoginEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.login.username = this.getValueOrDefault(entry.username);\n    cipher.login.password = this.getValueOrDefault(entry.password);\n    cipher.login.uris = this.makeUriArray(entry.url);\n  }\n\n  private handleCreditCardEntry(entry: FskEntry, cipher: CipherView) {\n    cipher.type = CipherType.Card;\n    cipher.card = new CardView();\n    cipher.card.cardholderName = this.getValueOrDefault(entry.username);\n    cipher.card.number = this.getValueOrDefault(entry.creditNumber);\n    cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n    cipher.card.code = this.getValueOrDefault(entry.creditCvv);\n    if (!this.isNullOrWhitespace(entry.creditExpiry)) {\n      if (!this.setCardExpiration(cipher, entry.creditExpiry)) {\n        this.processKvp(cipher, \"Expiration\", entry.creditExpiry);\n      }\n    }\n    if (!this.isNullOrWhitespace(entry.password)) {\n      this.processKvp(cipher, \"PIN\", entry.password);\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class GnomeJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || Object.keys(results).length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    for (const keyRing in results) {\n      if (\n        !results.hasOwnProperty(keyRing) || // eslint-disable-line\n        this.isNullOrWhitespace(keyRing) ||\n        results[keyRing].length === 0\n      ) {\n        continue;\n      }\n\n      results[keyRing].forEach((value: any) => {\n        if (\n          this.isNullOrWhitespace(value.display_name) ||\n          value.display_name.indexOf(\"http\") !== 0\n        ) {\n          return;\n        }\n\n        this.processFolder(result, keyRing);\n        const cipher = this.initLoginCipher();\n        cipher.name = value.display_name.replace(\"http://\", \"\").replace(\"https://\", \"\");\n        if (cipher.name.length > 30) {\n          cipher.name = cipher.name.substring(0, 30);\n        }\n        cipher.login.password = this.getValueOrDefault(value.secret);\n        cipher.login.uris = this.makeUriArray(value.display_name);\n\n        if (value.attributes != null) {\n          cipher.login.username =\n            value.attributes != null\n              ? this.getValueOrDefault(value.attributes.username_value)\n              : null;\n          for (const attr in value.attributes) {\n            if (\n              !value.attributes.hasOwnProperty(attr) || // eslint-disable-line\n              attr === \"username_value\" ||\n              attr === \"xdg:schema\"\n            ) {\n              continue;\n            }\n            this.processKvp(cipher, attr, value.attributes[attr]);\n          }\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      });\n    }\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst NotesHeader = \"Notes\\n\\n\";\nconst ApplicationsHeader = \"Applications\\n\\n\";\nconst WebsitesHeader = \"Websites\\n\\n\";\nconst Delimiter = \"\\n---\\n\";\n\nexport class KasperskyTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n\n    let notesData: string;\n    let applicationsData: string;\n    let websitesData: string;\n    let workingData = this.splitNewLine(data).join(\"\\n\");\n\n    if (workingData.indexOf(NotesHeader) !== -1) {\n      const parts = workingData.split(NotesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        notesData = parts[1];\n      }\n    }\n    if (workingData.indexOf(ApplicationsHeader) !== -1) {\n      const parts = workingData.split(ApplicationsHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        applicationsData = parts[1];\n      }\n    }\n    if (workingData.indexOf(WebsitesHeader) === 0) {\n      const parts = workingData.split(WebsitesHeader);\n      if (parts.length > 1) {\n        workingData = parts[0];\n        websitesData = parts[1];\n      }\n    }\n\n    const notes = this.parseDataCategory(notesData);\n    const applications = this.parseDataCategory(applicationsData);\n    const websites = this.parseDataCategory(websitesData);\n\n    notes.forEach((n) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(n.get(\"Name\"));\n      cipher.notes = this.getValueOrDefault(n.get(\"Text\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    websites.concat(applications).forEach((w) => {\n      const cipher = this.initLoginCipher();\n      const nameKey = w.has(\"Website name\") ? \"Website name\" : \"Application\";\n      cipher.name = this.getValueOrDefault(w.get(nameKey), \"\");\n      if (!this.isNullOrWhitespace(w.get(\"Login name\"))) {\n        if (!this.isNullOrWhitespace(cipher.name)) {\n          cipher.name += \": \";\n        }\n        cipher.name += w.get(\"Login name\");\n      }\n      cipher.notes = this.getValueOrDefault(w.get(\"Comment\"));\n      if (w.has(\"Website URL\")) {\n        cipher.login.uris = this.makeUriArray(w.get(\"Website URL\"));\n      }\n      cipher.login.username = this.getValueOrDefault(w.get(\"Login\"));\n      cipher.login.password = this.getValueOrDefault(w.get(\"Password\"));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseDataCategory(data: string): Map<string, string>[] {\n    if (this.isNullOrWhitespace(data) || data.indexOf(Delimiter) === -1) {\n      return [];\n    }\n    const items: Map<string, string>[] = [];\n    data.split(Delimiter).forEach((p) => {\n      if (p.indexOf(\"\\n\") === -1) {\n        return;\n      }\n      const item = new Map<string, string>();\n      let itemComment: string;\n      let itemCommentKey: string;\n      p.split(\"\\n\").forEach((l) => {\n        if (itemComment != null) {\n          itemComment += \"\\n\" + l;\n          return;\n        }\n        const colonIndex = l.indexOf(\":\");\n        let key: string;\n        let val: string;\n        if (colonIndex === -1) {\n          return;\n        } else {\n          key = l.substring(0, colonIndex);\n          if (l.length > colonIndex + 1) {\n            val = l.substring(colonIndex + 2);\n          }\n        }\n        if (key != null) {\n          item.set(key, val);\n        }\n        if (key === \"Comment\" || key === \"Text\") {\n          itemComment = val;\n          itemCommentKey = key;\n        }\n      });\n      if (itemComment != null && itemCommentKey != null) {\n        item.set(itemCommentKey, itemComment);\n      }\n      if (item.size === 0) {\n        return;\n      }\n      items.push(item);\n    });\n    return items;\n  }\n}\n","import { FieldType } from \"@bitwarden/common/vault/enums\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePass2XmlImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    //Note: The doc.querySelector(\"KeePassFile > Root > Group\") no longers works on node and we have to breakdown the query by nodes\n    const KeePassFileNode = doc.querySelector(\"KeePassFile\");\n\n    if (KeePassFileNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const RootNode = KeePassFileNode.querySelector(\"Root\");\n    if (RootNode == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    const rootGroup = RootNode.querySelector(\"Group\");\n    if (rootGroup == null) {\n      this.result.errorMessage = \"Missing `KeePassFile > Root > Group` node.\";\n      this.result.success = false;\n      return Promise.resolve(this.result);\n    }\n\n    this.traverse(rootGroup, true, \"\");\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  traverse(node: Element, isRootNode: boolean, groupPrefixName: string) {\n    const folderIndex = this.result.folders.length;\n    let groupName = groupPrefixName;\n\n    if (!isRootNode) {\n      if (groupName !== \"\") {\n        groupName += \"/\";\n      }\n      const nameEl = this.querySelectorDirectChild(node, \"Name\");\n      groupName += nameEl == null ? \"-\" : nameEl.textContent;\n      const folder = new FolderView();\n      folder.name = groupName;\n      this.result.folders.push(folder);\n    }\n\n    this.querySelectorAllDirectChild(node, \"Entry\").forEach((entry) => {\n      const cipherIndex = this.result.ciphers.length;\n\n      const cipher = this.initLoginCipher();\n      this.querySelectorAllDirectChild(entry, \"String\").forEach((entryString) => {\n        const valueEl = this.querySelectorDirectChild(entryString, \"Value\");\n        const value = valueEl != null ? valueEl.textContent : null;\n        if (this.isNullOrWhitespace(value)) {\n          return;\n        }\n        const keyEl = this.querySelectorDirectChild(entryString, \"Key\");\n        const key = keyEl != null ? keyEl.textContent : null;\n\n        if (key === \"URL\") {\n          cipher.login.uris = this.makeUriArray(value);\n        } else if (key === \"UserName\") {\n          cipher.login.username = value;\n        } else if (key === \"Password\") {\n          cipher.login.password = value;\n        } else if (key === \"otp\") {\n          cipher.login.totp = value.replace(\"key=\", \"\");\n        } else if (key === \"Title\") {\n          cipher.name = value;\n        } else if (key === \"Notes\") {\n          cipher.notes += value + \"\\n\";\n        } else {\n          let type = FieldType.Text;\n          const attrs = valueEl.attributes as any;\n          if (\n            attrs.length > 0 &&\n            attrs.ProtectInMemory != null &&\n            attrs.ProtectInMemory.value === \"True\"\n          ) {\n            type = FieldType.Hidden;\n          }\n          this.processKvp(cipher, key, value, type);\n        }\n      });\n\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n\n      if (!isRootNode) {\n        this.result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    this.querySelectorAllDirectChild(node, \"Group\").forEach((group) => {\n      this.traverse(group, false, groupName);\n    });\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class KeePassXCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(value.Title)) {\n        return;\n      }\n\n      value.Group =\n        !this.isNullOrWhitespace(value.Group) && value.Group.startsWith(\"Root/\")\n          ? value.Group.replace(\"Root/\", \"\")\n          : value.Group;\n      const groupName = !this.isNullOrWhitespace(value.Group) ? value.Group : null;\n      this.processFolder(result, groupName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class KeeperCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 6) {\n        return;\n      }\n\n      this.processFolder(result, value[0]);\n      const cipher = this.initLoginCipher();\n\n      const notes = this.getValueOrDefault(value[5]);\n      if (notes) {\n        cipher.notes = `${notes}\\n`;\n      }\n\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[4]);\n\n      if (value.length > 7) {\n        // we have some custom fields.\n        for (let i = 7; i < value.length; i = i + 2) {\n          if (value[i] == \"TFC:Keeper\") {\n            cipher.login.totp = value[i + 1];\n          } else {\n            this.processKvp(cipher, value[i], value[i + 1]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LastPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipherIndex = result.ciphers.length;\n      let folderIndex = result.folders.length;\n      let grouping = value.grouping;\n      if (grouping != null) {\n        // eslint-disable-next-line\n        grouping = grouping.replace(/\\\\/g, \"/\").replace(/[\\x00-\\x1F\\x7F-\\x9F]/g, \"\");\n      }\n      const hasFolder = this.getValueOrDefault(grouping, \"(none)\") !== \"(none)\";\n      let addFolder = hasFolder;\n\n      if (hasFolder) {\n        for (let i = 0; i < result.folders.length; i++) {\n          if (result.folders[i].name === grouping) {\n            addFolder = false;\n            folderIndex = i;\n            break;\n          }\n        }\n      }\n\n      const cipher = this.buildBaseCipher(value);\n      if (cipher.type === CipherType.Login) {\n        cipher.notes = this.getValueOrDefault(value.extra);\n        cipher.login = new LoginView();\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.totp);\n      } else if (cipher.type === CipherType.SecureNote) {\n        this.parseSecureNote(value, cipher);\n      } else if (cipher.type === CipherType.Card) {\n        cipher.card = this.parseCard(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n      } else if (cipher.type === CipherType.Identity) {\n        cipher.identity = this.parseIdentity(value);\n        cipher.notes = this.getValueOrDefault(value.notes);\n        if (!this.isNullOrWhitespace(value.ccnum)) {\n          // there is a card on this identity too\n          const cardCipher = this.buildBaseCipher(value);\n          cardCipher.identity = null;\n          cardCipher.type = CipherType.Card;\n          cardCipher.card = this.parseCard(value);\n          result.ciphers.push(cardCipher);\n        }\n      }\n\n      result.ciphers.push(cipher);\n\n      if (addFolder) {\n        const f = new FolderView();\n        f.name = grouping;\n        result.folders.push(f);\n      }\n      if (hasFolder) {\n        result.folderRelationships.push([cipherIndex, folderIndex]);\n      }\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private buildBaseCipher(value: any) {\n    const cipher = new CipherView();\n    // eslint-disable-next-line\n    if (value.hasOwnProperty(\"profilename\") && value.hasOwnProperty(\"profilelanguage\")) {\n      // form fill\n      cipher.favorite = false;\n      cipher.name = this.getValueOrDefault(value.profilename, \"--\");\n      cipher.type = CipherType.Card;\n\n      if (\n        !this.isNullOrWhitespace(value.title) ||\n        !this.isNullOrWhitespace(value.firstname) ||\n        !this.isNullOrWhitespace(value.lastname) ||\n        !this.isNullOrWhitespace(value.address1) ||\n        !this.isNullOrWhitespace(value.phone) ||\n        !this.isNullOrWhitespace(value.username) ||\n        !this.isNullOrWhitespace(value.email)\n      ) {\n        cipher.type = CipherType.Identity;\n      }\n    } else {\n      // site or secure note\n      cipher.favorite = !this.organization && this.getValueOrDefault(value.fav, \"0\") === \"1\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.type = value.url === \"http://sn\" ? CipherType.SecureNote : CipherType.Login;\n    }\n    return cipher;\n  }\n\n  private parseCard(value: any): CardView {\n    const card = new CardView();\n    card.cardholderName = this.getValueOrDefault(value.ccname);\n    card.number = this.getValueOrDefault(value.ccnum);\n    card.code = this.getValueOrDefault(value.cccsc);\n    card.brand = CardView.getCardBrandByPatterns(card.number);\n\n    if (!this.isNullOrWhitespace(value.ccexp) && value.ccexp.indexOf(\"-\") > -1) {\n      const ccexpParts = (value.ccexp as string).split(\"-\");\n      if (ccexpParts.length > 1) {\n        card.expYear = ccexpParts[0];\n        card.expMonth = ccexpParts[1];\n        if (card.expMonth.length === 2 && card.expMonth[0] === \"0\") {\n          card.expMonth = card.expMonth[1];\n        }\n      }\n    }\n\n    return card;\n  }\n\n  private parseIdentity(value: any): IdentityView {\n    const identity = new IdentityView();\n    identity.title = this.getValueOrDefault(value.title);\n    identity.firstName = this.getValueOrDefault(value.firstname);\n    identity.middleName = this.getValueOrDefault(value.middlename);\n    identity.lastName = this.getValueOrDefault(value.lastname);\n    identity.username = this.getValueOrDefault(value.username);\n    identity.company = this.getValueOrDefault(value.company);\n    identity.ssn = this.getValueOrDefault(value.ssn);\n    identity.address1 = this.getValueOrDefault(value.address1);\n    identity.address2 = this.getValueOrDefault(value.address2);\n    identity.address3 = this.getValueOrDefault(value.address3);\n    identity.city = this.getValueOrDefault(value.city);\n    identity.state = this.getValueOrDefault(value.state);\n    identity.postalCode = this.getValueOrDefault(value.zip);\n    identity.country = this.getValueOrDefault(value.country);\n    identity.email = this.getValueOrDefault(value.email);\n    identity.phone = this.getValueOrDefault(value.phone);\n\n    if (!this.isNullOrWhitespace(identity.title)) {\n      identity.title = identity.title.charAt(0).toUpperCase() + identity.title.slice(1);\n    }\n\n    return identity;\n  }\n\n  private parseSecureNote(value: any, cipher: CipherView) {\n    const extraParts = this.splitNewLine(value.extra);\n    let processedNote = false;\n\n    if (extraParts.length) {\n      const typeParts = extraParts[0].split(\":\");\n      if (\n        typeParts.length > 1 &&\n        typeParts[0] === \"NoteType\" &&\n        (typeParts[1] === \"Credit Card\" || typeParts[1] === \"Address\")\n      ) {\n        if (typeParts[1] === \"Credit Card\") {\n          const mappedData = this.parseSecureNoteMapping<CardView>(cipher, extraParts, {\n            Number: \"number\",\n            \"Name on Card\": \"cardholderName\",\n            \"Security Code\": \"code\",\n            // LP provides date in a format like 'June,2020'\n            // Store in expMonth, then parse and modify\n            \"Expiration Date\": \"expMonth\",\n          });\n\n          if (this.isNullOrWhitespace(mappedData.expMonth) || mappedData.expMonth === \",\") {\n            // No expiration data\n            mappedData.expMonth = undefined;\n          } else {\n            const [monthString, year] = mappedData.expMonth.split(\",\");\n            // Parse month name into number\n            if (!this.isNullOrWhitespace(monthString)) {\n              const month = new Date(Date.parse(monthString.trim() + \" 1, 2012\")).getMonth() + 1;\n              if (isNaN(month)) {\n                mappedData.expMonth = undefined;\n              } else {\n                mappedData.expMonth = month.toString();\n              }\n            } else {\n              mappedData.expMonth = undefined;\n            }\n            if (!this.isNullOrWhitespace(year)) {\n              mappedData.expYear = year;\n            }\n          }\n\n          cipher.type = CipherType.Card;\n          cipher.card = mappedData;\n        } else if (typeParts[1] === \"Address\") {\n          const mappedData = this.parseSecureNoteMapping<IdentityView>(cipher, extraParts, {\n            Title: \"title\",\n            \"First Name\": \"firstName\",\n            \"Last Name\": \"lastName\",\n            \"Middle Name\": \"middleName\",\n            Company: \"company\",\n            \"Address 1\": \"address1\",\n            \"Address 2\": \"address2\",\n            \"Address 3\": \"address3\",\n            \"City / Town\": \"city\",\n            State: \"state\",\n            \"Zip / Postal Code\": \"postalCode\",\n            Country: \"country\",\n            \"Email Address\": \"email\",\n            Username: \"username\",\n          });\n          cipher.type = CipherType.Identity;\n          cipher.identity = mappedData;\n        }\n        processedNote = true;\n      }\n    }\n\n    if (!processedNote) {\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n      cipher.notes = this.getValueOrDefault(value.extra);\n    }\n  }\n\n  private parseSecureNoteMapping<T>(cipher: CipherView, extraParts: string[], map: any): T {\n    const dataObj: any = {};\n\n    let processingNotes = false;\n    extraParts.forEach((extraPart) => {\n      let key: string = null;\n      let val: string = null;\n      if (!processingNotes) {\n        if (this.isNullOrWhitespace(extraPart)) {\n          return;\n        }\n        const colonIndex = extraPart.indexOf(\":\");\n        if (colonIndex === -1) {\n          key = extraPart;\n        } else {\n          key = extraPart.substring(0, colonIndex);\n          if (extraPart.length > colonIndex) {\n            val = extraPart.substring(colonIndex + 1);\n          }\n        }\n        if (this.isNullOrWhitespace(key) || this.isNullOrWhitespace(val) || key === \"NoteType\") {\n          return;\n        }\n      }\n\n      if (processingNotes) {\n        cipher.notes += \"\\n\" + extraPart;\n      } else if (key === \"Notes\") {\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes += \"\\n\" + val;\n        } else {\n          cipher.notes = val;\n        }\n        processingNotes = true;\n        // eslint-disable-next-line\n      } else if (map.hasOwnProperty(key)) {\n        dataObj[map[key]] = val;\n      } else {\n        this.processKvp(cipher, key, val);\n      }\n    });\n\n    return dataObj;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class LogMeOnceCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 4) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[2]);\n      cipher.login.password = this.getValueOrDefault(value[3]);\n      cipher.login.uris = this.makeUriArray(value[1]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MeldiumCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.DisplayName, \"--\");\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.login.username = this.getValueOrDefault(value.UserName);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class MSecureCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false, { delimiter: \",\" });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      const folderName =\n        this.getValueOrDefault(value[2], \"Unassigned\") !== \"Unassigned\" ? value[2] : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0].split(\"|\")[0], \"--\");\n\n      if (value[1] === \"Web Logins\" || value[1] === \"Login\") {\n        cipher.login.username = this.getValueOrDefault(this.splitValueRetainingLastPart(value[5]));\n        cipher.login.uris = this.makeUriArray(this.splitValueRetainingLastPart(value[4]));\n        cipher.login.password = this.getValueOrDefault(this.splitValueRetainingLastPart(value[6]));\n        cipher.notes = !this.isNullOrWhitespace(value[3]) ? value[3].split(\"\\\\n\").join(\"\\n\") : null;\n      } else if (value[1] === \"Credit Card\") {\n        cipher.type = CipherType.Card;\n        cipher.card.number = this.getValueOrDefault(this.splitValueRetainingLastPart(value[4]));\n\n        const [month, year] = this.getValueOrDefault(\n          this.splitValueRetainingLastPart(value[5]),\n        ).split(\"/\");\n        cipher.card.expMonth = month.trim();\n        cipher.card.expYear = year.trim();\n        cipher.card.code = this.getValueOrDefault(this.splitValueRetainingLastPart(value[6]));\n        cipher.card.cardholderName = this.getValueOrDefault(\n          this.splitValueRetainingLastPart(value[7]),\n        );\n        cipher.card.brand = this.getValueOrDefault(this.splitValueRetainingLastPart(value[9]));\n        cipher.notes =\n          this.getValueOrDefault(value[8].split(\"|\")[0]) +\n          \": \" +\n          this.getValueOrDefault(this.splitValueRetainingLastPart(value[8]), \"\") +\n          \"\\n\" +\n          this.getValueOrDefault(value[10].split(\"|\")[0]) +\n          \": \" +\n          this.getValueOrDefault(this.splitValueRetainingLastPart(value[10]), \"\") +\n          \"\\n\" +\n          this.getValueOrDefault(value[11].split(\"|\")[0]) +\n          \": \" +\n          this.getValueOrDefault(this.splitValueRetainingLastPart(value[11]), \"\");\n      } else if (value.length > 3) {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        for (let i = 3; i < value.length; i++) {\n          if (!this.isNullOrWhitespace(value[i])) {\n            cipher.notes += value[i] + \"\\n\";\n          }\n        }\n      }\n\n      if (\n        !this.isNullOrWhitespace(value[1]) &&\n        cipher.type !== CipherType.Login &&\n        cipher.type !== CipherType.Card\n      ) {\n        cipher.name = value[1] + \": \" + cipher.name;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // mSecure returns values separated by \"|\" where after the second separator is the value\n  // like \"Password|8|myPassword\", we want to keep the \"myPassword\" but also ensure that if\n  // the value contains any \"|\" it works fine\n  private splitValueRetainingLastPart(value: string) {\n    return value.split(\"|\").slice(0, 2).concat(value.split(\"|\").slice(2).join(\"|\")).pop();\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst mappedBaseColumns = [\"nickname\", \"additionalInfo\"];\nconst _mappedUserAccountColumns = new Set(\n  mappedBaseColumns.concat([\"url\", \"username\", \"password\", \"twofaSecret\"]),\n);\nconst _mappedCreditCardColumns = new Set(\n  mappedBaseColumns.concat([\"cardNumber\", \"cardName\", \"exp_month\", \"exp_year\", \"cvv\"]),\n);\n\nconst _mappedIdentityColumns = new Set(\n  mappedBaseColumns.concat([\n    \"title\",\n    \"firstName\",\n    \"middleName\",\n    \"lastName\",\n    \"email\",\n    \"firstAddressLine\",\n    \"secondAddressLine\",\n    \"city\",\n    \"country\",\n    \"zipCode\",\n  ]),\n);\n\nconst _mappedIdCardColumns = new Set(mappedBaseColumns.concat([\"idName\", \"idNumber\", \"idCountry\"]));\n\nconst _mappedTwoFaColumns = new Set(mappedBaseColumns.concat([\"authToken\"]));\n\nconst _mappedUserNoteColumns = new Set(mappedBaseColumns.concat([\"content\"]));\n\nexport class MykiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.nickname, \"--\");\n      cipher.notes = this.getValueOrDefault(value.additionalInfo);\n\n      if (value.url !== undefined) {\n        // Accounts\n        cipher.login.uris = this.makeUriArray(value.url);\n        cipher.login.username = this.getValueOrDefault(value.username);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.totp = this.getValueOrDefault(value.twofaSecret);\n\n        this.importUnmappedFields(cipher, value, _mappedUserAccountColumns);\n      } else if (value.authToken !== undefined) {\n        // TwoFA\n        cipher.login.totp = this.getValueOrDefault(value.authToken);\n\n        this.importUnmappedFields(cipher, value, _mappedTwoFaColumns);\n      } else if (value.cardNumber !== undefined) {\n        // Cards\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardName);\n        cipher.card.number = this.getValueOrDefault(value.cardNumber);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.expMonth = this.getValueOrDefault(value.exp_month);\n        cipher.card.expYear = this.getValueOrDefault(value.exp_year);\n        cipher.card.code = this.getValueOrDefault(value.cvv);\n\n        this.importUnmappedFields(cipher, value, _mappedCreditCardColumns);\n      } else if (value.firstName !== undefined) {\n        // Identities\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        cipher.identity.title = this.getValueOrDefault(value.title);\n        cipher.identity.firstName = this.getValueOrDefault(value.firstName);\n        cipher.identity.middleName = this.getValueOrDefault(value.middleName);\n        cipher.identity.lastName = this.getValueOrDefault(value.lastName);\n        cipher.identity.phone = this.getValueOrDefault(value.number);\n        cipher.identity.email = this.getValueOrDefault(value.email);\n        cipher.identity.address1 = this.getValueOrDefault(value.firstAddressLine);\n        cipher.identity.address2 = this.getValueOrDefault(value.secondAddressLine);\n        cipher.identity.city = this.getValueOrDefault(value.city);\n        cipher.identity.country = this.getValueOrDefault(value.country);\n        cipher.identity.postalCode = this.getValueOrDefault(value.zipCode);\n\n        this.importUnmappedFields(cipher, value, _mappedIdentityColumns);\n      } else if (value.idType !== undefined) {\n        // IdCards\n\n        cipher.identity = new IdentityView();\n        cipher.type = CipherType.Identity;\n        this.processFullName(cipher, value.idName);\n        cipher.identity.country = this.getValueOrDefault(value.idCountry);\n\n        switch (value.idType) {\n          // case \"Driver's License\":\n          // case \"ID Card\":\n          // case \"Outdoor License\":\n          // case \"Software License\":\n          // case \"Tax Number\":\n          // case \"Bank Account\":\n          // case \"Insurance Card\":\n          // case \"Health Card\":\n          // case \"Membership\":\n          // case \"Database\":\n          // case \"Reward Program\":\n          // case \"Tour Visa\":\n          case \"Passport\":\n            cipher.identity.passportNumber = value.idNumber;\n            break;\n          case \"Social Security\":\n            cipher.identity.ssn = value.idNumber;\n            break;\n          default:\n            cipher.identity.licenseNumber = value.idNumber;\n            break;\n        }\n\n        this.importUnmappedFields(cipher, value, _mappedIdCardColumns);\n      } else if (value.content !== undefined) {\n        // Notes\n        cipher.secureNote = new SecureNoteView();\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote.type = SecureNoteType.Generic;\n        cipher.notes = this.getValueOrDefault(value.content);\n\n        this.importUnmappedFields(cipher, value, _mappedUserNoteColumns);\n      } else {\n        return;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  importUnmappedFields(cipher: CipherView, row: any, mappedValues: Set<string>) {\n    const unmappedFields = Object.keys(row).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = row as any;\n      this.processKvp(cipher, key, item[key]);\n    });\n  }\n}\n","import { SecureNoteType, CipherType, FieldType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\ntype NordPassCsvParsed = {\n  name: string;\n  url: string;\n  additional_urls: string;\n  username: string;\n  password: string;\n  note: string;\n  cardholdername: string;\n  cardnumber: string;\n  cvc: string;\n  expirydate: string;\n  zipcode: string;\n  folder: string;\n  full_name: string;\n  phone_number: string;\n  email: string;\n  address1: string;\n  address2: string;\n  city: string;\n  country: string;\n  state: string;\n  type: string;\n  custom_fields: string;\n};\n\ntype NordPassCustomField = {\n  label: string;\n  type: string;\n  value: string;\n};\n\nexport class NordPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: NordPassCsvParsed[] = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((record) => {\n      const recordType = this.evaluateType(record);\n      if (recordType === undefined) {\n        return;\n      }\n\n      this.processFolder(result, record.folder);\n\n      const cipher = new CipherView();\n      cipher.name = this.getValueOrDefault(record.name, \"--\");\n      cipher.notes = this.getValueOrDefault(record.note);\n\n      if (record.custom_fields) {\n        const customFieldsParsed: NordPassCustomField[] = JSON.parse(record.custom_fields);\n        if (customFieldsParsed && customFieldsParsed.length > 0) {\n          customFieldsParsed.forEach((field) => {\n            let fieldType = FieldType.Text;\n\n            if (field.type == \"hidden\") {\n              fieldType = FieldType.Hidden;\n            }\n\n            this.processKvp(cipher, field.label, field.value, fieldType);\n          });\n        }\n      }\n\n      switch (recordType) {\n        case CipherType.Login:\n          cipher.type = CipherType.Login;\n          cipher.login = new LoginView();\n          cipher.login.username = this.getValueOrDefault(record.username);\n          cipher.login.password = this.getValueOrDefault(record.password);\n          if (record.additional_urls) {\n            const additionalUrlsParsed: string[] = JSON.parse(record.additional_urls);\n            const uris = [record.url, ...additionalUrlsParsed];\n            cipher.login.uris = this.makeUriArray(uris);\n          } else {\n            cipher.login.uris = this.makeUriArray(record.url);\n          }\n          break;\n        case CipherType.Card:\n          cipher.type = CipherType.Card;\n          cipher.card.cardholderName = this.getValueOrDefault(record.cardholdername);\n          cipher.card.number = this.getValueOrDefault(record.cardnumber);\n          cipher.card.code = this.getValueOrDefault(record.cvc);\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          this.setCardExpiration(cipher, record.expirydate);\n          break;\n\n        case CipherType.Identity:\n          cipher.type = CipherType.Identity;\n\n          this.processFullName(cipher, this.getValueOrDefault(record.full_name));\n          cipher.identity.address1 = this.getValueOrDefault(record.address1);\n          cipher.identity.address2 = this.getValueOrDefault(record.address2);\n          cipher.identity.city = this.getValueOrDefault(record.city);\n          cipher.identity.state = this.getValueOrDefault(record.state);\n          cipher.identity.postalCode = this.getValueOrDefault(record.zipcode);\n          cipher.identity.country = this.getValueOrDefault(record.country);\n          if (cipher.identity.country != null) {\n            cipher.identity.country = cipher.identity.country.toUpperCase();\n          }\n          cipher.identity.email = this.getValueOrDefault(record.email);\n          cipher.identity.phone = this.getValueOrDefault(record.phone_number);\n          break;\n        case CipherType.SecureNote:\n          cipher.type = CipherType.SecureNote;\n          cipher.secureNote.type = SecureNoteType.Generic;\n          break;\n        default:\n          break;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private evaluateType(record: NordPassCsvParsed): CipherType {\n    switch (record.type) {\n      case \"password\":\n        return CipherType.Login;\n      case \"credit_card\":\n        return CipherType.Card;\n      case \"note\":\n        return CipherType.SecureNote;\n      case \"identity\":\n        return CipherType.Identity;\n    }\n\n    return undefined;\n  }\n}\n","import { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nexport class OnePassword1PifImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    data.split(this.newLineRegex).forEach((line) => {\n      if (this.isNullOrWhitespace(line) || line[0] !== \"{\") {\n        return;\n      }\n      const item = JSON.parse(line);\n      if (item.trashed === true) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n\n      if (this.isNullOrWhitespace(item.hmac)) {\n        this.processStandardItem(item, cipher);\n      } else {\n        this.processWinOpVaultItem(item, cipher);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      this.result.ciphers.push(cipher);\n    });\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processWinOpVaultItem(item: any, cipher: CipherView) {\n    if (item.overview != null) {\n      cipher.name = this.getValueOrDefault(item.overview.title);\n      if (item.overview.URLs != null) {\n        const urls: string[] = [];\n        item.overview.URLs.forEach((url: any) => {\n          if (!this.isNullOrWhitespace(url.u)) {\n            urls.push(url.u);\n          }\n        });\n        cipher.login.uris = this.makeUriArray(urls);\n      }\n    }\n\n    if (item.details != null) {\n      if (item.details.passwordHistory != null) {\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n      }\n      if (\n        !this.isNullOrWhitespace(item.details.ccnum) ||\n        !this.isNullOrWhitespace(item.details.cvv)\n      ) {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n      } else if (\n        !this.isNullOrWhitespace(item.details.firstname) ||\n        !this.isNullOrWhitespace(item.details.address1)\n      ) {\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n      }\n      if (cipher.type === CipherType.Login && !this.isNullOrWhitespace(item.details.password)) {\n        cipher.login.password = item.details.password;\n      }\n      if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n        cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (item.details.fields != null) {\n        this.parseFields(item.details.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.details.sections != null) {\n        item.details.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private processStandardItem(item: any, cipher: CipherView) {\n    cipher.favorite = item.openContents && item.openContents.faveIndex ? true : false;\n    cipher.name = this.getValueOrDefault(item.title);\n\n    if (item.typeName === \"securenotes.SecureNote\") {\n      cipher.type = CipherType.SecureNote;\n      cipher.secureNote = new SecureNoteView();\n      cipher.secureNote.type = SecureNoteType.Generic;\n    } else if (item.typeName === \"wallet.financial.CreditCard\") {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    } else if (item.typeName === \"identities.Identity\") {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    } else {\n      cipher.login.uris = this.makeUriArray(item.location);\n    }\n\n    if (item.secureContents != null) {\n      if (item.secureContents.passwordHistory != null) {\n        this.parsePasswordHistory(item.secureContents.passwordHistory, cipher);\n      }\n      if (!this.isNullOrWhitespace(item.secureContents.notesPlain)) {\n        cipher.notes = item.secureContents.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n      }\n      if (cipher.type === CipherType.Login) {\n        if (!this.isNullOrWhitespace(item.secureContents.password)) {\n          cipher.login.password = item.secureContents.password;\n        }\n        if (item.secureContents.URLs != null) {\n          const urls: string[] = [];\n          item.secureContents.URLs.forEach((u: any) => {\n            if (!this.isNullOrWhitespace(u.url)) {\n              urls.push(u.url);\n            }\n          });\n          if (urls.length > 0) {\n            cipher.login.uris = this.makeUriArray(urls);\n          }\n        }\n      }\n      if (item.secureContents.fields != null) {\n        this.parseFields(item.secureContents.fields, cipher, \"designation\", \"value\", \"name\");\n      }\n      if (item.secureContents.sections != null) {\n        item.secureContents.sections.forEach((section: any) => {\n          if (section.fields != null) {\n            this.parseFields(section.fields, cipher, \"n\", \"v\", \"t\");\n          }\n        });\n      }\n    }\n  }\n\n  private parsePasswordHistory(items: any[], cipher: CipherView) {\n    const maxSize = items.length > 5 ? 5 : items.length;\n    cipher.passwordHistory = items\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n\n  private parseFields(\n    fields: any[],\n    cipher: CipherView,\n    designationKey: string,\n    valueKey: string,\n    nameKey: string,\n  ) {\n    fields.forEach((field: any) => {\n      if (field[valueKey] == null || field[valueKey].toString().trim() === \"\") {\n        return;\n      }\n\n      // TODO: when date FieldType exists, store this as a date field type instead of formatted Text if k is 'date'\n      const fieldValue =\n        field.k === \"date\"\n          ? new Date(field[valueKey] * 1000).toUTCString()\n          : field[valueKey].toString();\n      const fieldDesignation =\n        field[designationKey] != null ? field[designationKey].toString() : null;\n\n      if (cipher.type === CipherType.Login) {\n        if (this.isNullOrWhitespace(cipher.login.username) && fieldDesignation === \"username\") {\n          cipher.login.username = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.password) &&\n          fieldDesignation === \"password\"\n        ) {\n          cipher.login.password = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.login.totp) &&\n          fieldDesignation != null &&\n          fieldDesignation.startsWith(\"TOTP_\")\n        ) {\n          cipher.login.totp = fieldValue;\n          return;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.isNullOrWhitespace(cipher.card.number) && fieldDesignation === \"ccnum\") {\n          cipher.card.number = fieldValue;\n          cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n          return;\n        } else if (this.isNullOrWhitespace(cipher.card.code) && fieldDesignation === \"cvv\") {\n          cipher.card.code = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.cardholderName) &&\n          fieldDesignation === \"cardholder\"\n        ) {\n          cipher.card.cardholderName = fieldValue;\n          return;\n        } else if (\n          this.isNullOrWhitespace(cipher.card.expiration) &&\n          fieldDesignation === \"expiry\" &&\n          fieldValue.length === 6\n        ) {\n          cipher.card.expMonth = (fieldValue as string).substr(4, 2);\n          if (cipher.card.expMonth[0] === \"0\") {\n            cipher.card.expMonth = cipher.card.expMonth.substr(1, 1);\n          }\n          cipher.card.expYear = (fieldValue as string).substr(0, 4);\n          return;\n        } else if (fieldDesignation === \"type\") {\n          // Skip since brand was determined from number above\n          return;\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        const identity = cipher.identity;\n        if (this.isNullOrWhitespace(identity.firstName) && fieldDesignation === \"firstname\") {\n          identity.firstName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.lastName) && fieldDesignation === \"lastname\") {\n          identity.lastName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.middleName) && fieldDesignation === \"initial\") {\n          identity.middleName = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.phone) && fieldDesignation === \"defphone\") {\n          identity.phone = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.company) && fieldDesignation === \"company\") {\n          identity.company = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.email) && fieldDesignation === \"email\") {\n          identity.email = fieldValue;\n          return;\n        } else if (this.isNullOrWhitespace(identity.username) && fieldDesignation === \"username\") {\n          identity.username = fieldValue;\n          return;\n        } else if (fieldDesignation === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip } = field[valueKey];\n          identity.address1 = this.getValueOrDefault(street);\n          identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            identity.country = country.toUpperCase();\n          }\n          identity.postalCode = this.getValueOrDefault(zip);\n          return;\n        }\n      }\n\n      const fieldName = this.isNullOrWhitespace(field[nameKey]) ? \"no_name\" : field[nameKey];\n      if (\n        fieldName === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      const fieldType = field.k === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n}\n","export interface ExportData {\n  accounts?: AccountsEntity[] | null;\n}\nexport interface AccountsEntity {\n  attrs: AccountAttributes;\n  vaults?: VaultsEntity[] | null;\n}\nexport interface AccountAttributes {\n  accountName: string;\n  name: string;\n  avatar: string;\n  email: string;\n  uuid: string;\n  domain: string;\n}\nexport interface VaultsEntity {\n  attrs: VaultAttributes;\n  items?: Item[] | null;\n}\nexport interface VaultAttributes {\n  uuid: string;\n  desc: string;\n  avatar: string;\n  name: string;\n  type: string;\n}\n\nexport enum CategoryEnum {\n  Login = \"001\",\n  CreditCard = \"002\",\n  SecureNote = \"003\",\n  Identity = \"004\",\n  Password = \"005\",\n  Document = \"006\",\n  SoftwareLicense = \"100\",\n  BankAccount = \"101\",\n  Database = \"102\",\n  DriversLicense = \"103\",\n  OutdoorLicense = \"104\",\n  Membership = \"105\",\n  Passport = \"106\",\n  RewardsProgram = \"107\",\n  SocialSecurityNumber = \"108\",\n  WirelessRouter = \"109\",\n  Server = \"110\",\n  EmailAccount = \"111\",\n  API_Credential = \"112\",\n  MedicalRecord = \"113\",\n}\n\nexport interface Item {\n  uuid: string;\n  favIndex: number;\n  createdAt: number;\n  updatedAt: number;\n  trashed?: boolean;\n  categoryUuid: string;\n  details: Details;\n  overview: Overview;\n}\nexport interface Details {\n  loginFields?: (LoginFieldsEntity | null)[] | null;\n  notesPlain?: string | null;\n  sections?: (SectionsEntity | null)[] | null;\n  passwordHistory?: (PasswordHistoryEntity | null)[] | null;\n  documentAttributes?: DocumentAttributes | null;\n  password?: string | null;\n}\n\nexport enum LoginFieldTypeEnum {\n  TextOrHtml = \"T\",\n  EmailAddress = \"E\",\n  URL = \"U\",\n  Number = \"N\",\n  Password = \"P\",\n  TextArea = \"A\",\n  PhoneNumber = \"TEL\",\n  CheckBox = \"C\",\n}\nexport interface LoginFieldsEntity {\n  value: string;\n  id: string;\n  name: string;\n  fieldType: LoginFieldTypeEnum | string;\n  designation?: string | null;\n}\nexport interface SectionsEntity {\n  title: string;\n  name?: string | null;\n  fields?: FieldsEntity[] | null;\n}\nexport interface FieldsEntity {\n  title: string;\n  id: string;\n  value: Value;\n  indexAtSource: number;\n  guarded: boolean;\n  multiline: boolean;\n  dontGenerate: boolean;\n  placeholder?: string;\n  inputTraits: InputTraits;\n  clipboardFilter?: string | null;\n}\nexport interface Value {\n  totp?: string | null;\n  date?: number | null;\n  string?: string | null;\n  concealed?: string | null;\n  email?: Email | null;\n  phone?: string | null;\n  menu?: string | null;\n  gender?: string | null;\n  monthYear?: number | null;\n  url?: string | null;\n  address?: Address | null;\n  creditCardType?: string | null;\n  creditCardNumber?: string | null;\n  reference?: string | null;\n}\n\nexport interface Email {\n  email_address: string;\n  provider: string;\n}\n\nexport interface Address {\n  street: string;\n  city: string;\n  country: string;\n  zip: string;\n  state: string;\n}\nexport interface InputTraits {\n  keyboard: string;\n  correction: string;\n  capitalization: string;\n}\nexport interface PasswordHistoryEntity {\n  value: string;\n  time: number;\n}\nexport interface DocumentAttributes {\n  fileName: string;\n  documentId: string;\n  decryptedSize: number;\n}\nexport interface Overview {\n  subtitle: string;\n  title: string;\n  url: string;\n  urls?: UrlsEntity[] | null;\n  ps?: number | null;\n  pbe?: number | null;\n  pgrng?: boolean | null;\n  tags?: string[] | null;\n}\nexport interface UrlsEntity {\n  label: string;\n  url: string;\n}\n","import { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\nimport { PasswordHistoryView } from \"@bitwarden/common/vault/models/view/password-history.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  CategoryEnum,\n  Details,\n  ExportData,\n  FieldsEntity,\n  Item,\n  LoginFieldTypeEnum,\n  Overview,\n  PasswordHistoryEntity,\n  SectionsEntity,\n  UrlsEntity,\n  Value,\n  VaultsEntity,\n} from \"./types/onepassword-1pux-importer-types\";\n\nexport class OnePassword1PuxImporter extends BaseImporter implements Importer {\n  result = new ImportResult();\n\n  parse(data: string): Promise<ImportResult> {\n    const exportData: ExportData = JSON.parse(data);\n\n    const account = exportData.accounts[0];\n    // TODO Add handling of multiple vaults\n    // const personalVaults = account.vaults[0].filter((v) => v.attrs.type === VaultAttributeTypeEnum.Personal);\n    account.vaults.forEach((vault: VaultsEntity) => {\n      vault.items.forEach((item: Item) => {\n        if (item.trashed === true) {\n          return;\n        }\n\n        const cipher = this.initLoginCipher();\n\n        const category = item.categoryUuid as CategoryEnum;\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.Password:\n          case CategoryEnum.WirelessRouter:\n          case CategoryEnum.Server:\n          case CategoryEnum.API_Credential:\n            cipher.type = CipherType.Login;\n            cipher.login = new LoginView();\n            break;\n          case CategoryEnum.CreditCard:\n          case CategoryEnum.BankAccount:\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            break;\n          case CategoryEnum.SecureNote:\n          case CategoryEnum.SoftwareLicense:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.MedicalRecord:\n            // case CategoryEnum.Document:\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case CategoryEnum.Identity:\n          case CategoryEnum.DriversLicense:\n          case CategoryEnum.OutdoorLicense:\n          case CategoryEnum.Membership:\n          case CategoryEnum.Passport:\n          case CategoryEnum.RewardsProgram:\n          case CategoryEnum.SocialSecurityNumber:\n            cipher.type = CipherType.Identity;\n            cipher.identity = new IdentityView();\n            break;\n          default:\n            break;\n        }\n\n        cipher.favorite = item.favIndex === 1 ? true : false;\n\n        this.processOverview(item.overview, cipher);\n\n        this.processLoginFields(item, cipher);\n\n        this.processDetails(category, item.details, cipher);\n\n        this.parsePasswordHistory(item.details.passwordHistory, cipher);\n\n        this.processSections(category, item.details.sections, cipher);\n\n        if (!this.isNullOrWhitespace(item.details.notesPlain)) {\n          cipher.notes = item.details.notesPlain.split(this.newLineRegex).join(\"\\n\") + \"\\n\";\n        }\n\n        this.convertToNoteIfNeeded(cipher);\n        this.cleanupCipher(cipher);\n        this.result.ciphers.push(cipher);\n      });\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(this.result);\n    }\n\n    this.result.success = true;\n    return Promise.resolve(this.result);\n  }\n\n  private processOverview(overview: Overview, cipher: CipherView) {\n    if (overview == null) {\n      return;\n    }\n\n    cipher.name = this.getValueOrDefault(overview.title);\n\n    if (overview.urls != null) {\n      const urls: string[] = [];\n      overview.urls.forEach((url: UrlsEntity) => {\n        if (!this.isNullOrWhitespace(url.url)) {\n          urls.push(url.url);\n        }\n      });\n      cipher.login.uris = this.makeUriArray(urls);\n    }\n\n    if (overview.tags != null && overview.tags.length > 0) {\n      const folderName = this.capitalize(overview.tags[0]);\n      this.processFolder(this.result, folderName);\n    }\n  }\n\n  private capitalize(inputString: string): string {\n    return inputString.trim().replace(/\\w\\S*/g, (w) => w.replace(/^\\w/, (c) => c.toUpperCase()));\n  }\n\n  private processLoginFields(item: Item, cipher: CipherView) {\n    if (item.details == null) {\n      return;\n    }\n\n    if (item.details.loginFields == null || item.details.loginFields.length === 0) {\n      return;\n    }\n\n    item.details.loginFields.forEach((loginField) => {\n      if (loginField.designation === \"username\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.username = loginField.value;\n        return;\n      }\n\n      if (loginField.designation === \"password\" && loginField.value !== \"\") {\n        cipher.type = CipherType.Login;\n        cipher.login.password = loginField.value;\n        return;\n      }\n\n      let fieldValue = loginField.value;\n      let fieldType: FieldType = FieldType.Text;\n      switch (loginField.fieldType) {\n        case LoginFieldTypeEnum.Password:\n          fieldType = FieldType.Hidden;\n          break;\n        case LoginFieldTypeEnum.CheckBox:\n          fieldValue = loginField.value !== \"\" ? \"true\" : \"false\";\n          fieldType = FieldType.Boolean;\n          break;\n        default:\n          break;\n      }\n      this.processKvp(cipher, loginField.name, fieldValue, fieldType);\n    });\n  }\n\n  private processDetails(category: CategoryEnum, details: Details, cipher: CipherView) {\n    if (category !== CategoryEnum.Password) {\n      return;\n    }\n\n    if (details == null) {\n      return;\n    }\n    cipher.login.password = details.password;\n  }\n\n  private processSections(category: CategoryEnum, sections: SectionsEntity[], cipher: CipherView) {\n    if (sections == null || sections.length === 0) {\n      return;\n    }\n\n    sections.forEach((section: SectionsEntity) => {\n      if (section.fields == null) {\n        return;\n      }\n\n      this.parseSectionFields(category, section.fields, cipher, section.title);\n    });\n  }\n\n  private parseSectionFields(\n    category: CategoryEnum,\n    fields: FieldsEntity[],\n    cipher: CipherView,\n    sectionTitle: string,\n  ) {\n    fields.forEach((field: FieldsEntity) => {\n      const valueKey = Object.keys(field.value)[0];\n      const anyField = field as any;\n\n      if (\n        anyField.value == null ||\n        anyField.value[valueKey] == null ||\n        anyField.value[valueKey] === \"\"\n      ) {\n        return;\n      }\n\n      const fieldName = this.getFieldName(field.title, sectionTitle);\n      const fieldValue = this.extractValue(field.value, valueKey);\n\n      if (cipher.type === CipherType.Login) {\n        if (this.fillLogin(field, fieldValue, cipher)) {\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Login:\n          case CategoryEnum.Database:\n          case CategoryEnum.EmailAccount:\n          case CategoryEnum.WirelessRouter:\n            break;\n\n          case CategoryEnum.Server:\n            if (this.isNullOrWhitespace(cipher.login.uri) && field.id === \"url\") {\n              cipher.login.uris = this.makeUriArray(fieldValue);\n              return;\n            }\n            break;\n\n          case CategoryEnum.API_Credential:\n            if (this.fillApiCredentials(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      } else if (cipher.type === CipherType.Card) {\n        if (this.fillCreditCard(field, fieldValue, cipher)) {\n          return;\n        }\n\n        if (category === CategoryEnum.BankAccount) {\n          if (this.fillBankAccount(field, fieldValue, cipher)) {\n            return;\n          }\n        }\n      } else if (cipher.type === CipherType.Identity) {\n        if (this.fillIdentity(field, fieldValue, cipher, valueKey)) {\n          return;\n        }\n        if (valueKey === \"address\") {\n          // fieldValue is an object casted into a string, so access the plain value instead\n          const { street, city, country, zip, state } = field.value.address;\n          cipher.identity.address1 = this.getValueOrDefault(street);\n          cipher.identity.city = this.getValueOrDefault(city);\n          if (!this.isNullOrWhitespace(country)) {\n            cipher.identity.country = country.toUpperCase();\n          }\n          cipher.identity.postalCode = this.getValueOrDefault(zip);\n          cipher.identity.state = this.getValueOrDefault(state);\n          return;\n        }\n\n        switch (category) {\n          case CategoryEnum.Identity:\n            break;\n          case CategoryEnum.DriversLicense:\n            if (this.fillDriversLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.OutdoorLicense:\n            if (this.fillOutdoorLicense(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Membership:\n            if (this.fillMembership(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.Passport:\n            if (this.fillPassport(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.RewardsProgram:\n            if (this.fillRewardsProgram(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          case CategoryEnum.SocialSecurityNumber:\n            if (this.fillSSN(field, fieldValue, cipher)) {\n              return;\n            }\n            break;\n          default:\n            break;\n        }\n      }\n\n      if (valueKey === \"email\") {\n        // fieldValue is an object casted into a string, so access the plain value instead\n        const { email_address, provider } = field.value.email;\n        this.processKvp(cipher, fieldName, email_address, FieldType.Text);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return;\n      }\n\n      // Do not include a password field if it's already in the history\n      if (\n        field.title === \"password\" &&\n        cipher.passwordHistory != null &&\n        cipher.passwordHistory.some((h) => h.password === fieldValue)\n      ) {\n        return;\n      }\n\n      // TODO ?? If one of the fields is marked as guarded, then activate Password-Reprompt for the entire item\n      if (field.guarded && cipher.reprompt === CipherRepromptType.None) {\n        cipher.reprompt = CipherRepromptType.Password;\n      }\n\n      const fieldType = valueKey === \"concealed\" ? FieldType.Hidden : FieldType.Text;\n      this.processKvp(cipher, fieldName, fieldValue, fieldType);\n    });\n  }\n\n  // Use the title if available. If not use the sectionTitle if available.\n  // Default to an empty string in all other cases.\n  private getFieldName(title: string, sectionTitle?: string): string {\n    if (!this.isNullOrWhitespace(title)) {\n      return title;\n    }\n\n    if (!this.isNullOrWhitespace(sectionTitle)) {\n      return sectionTitle;\n    }\n\n    return \"\";\n  }\n\n  private extractValue(value: Value, valueKey: string): string {\n    if (valueKey === \"date\") {\n      return new Date(value.date * 1000).toUTCString();\n    }\n\n    if (valueKey === \"monthYear\") {\n      return value.monthYear.toString();\n    }\n\n    return (value as any)[valueKey];\n  }\n\n  private fillLogin(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.username) && fieldName === \"username\") {\n      cipher.login.username = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"password\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (\n      this.isNullOrWhitespace(cipher.login.totp) &&\n      field.id != null &&\n      field.id.startsWith(\"TOTP_\")\n    ) {\n      cipher.login.totp = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillApiCredentials(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    const fieldName = this.getFieldName(field.title);\n\n    if (this.isNullOrWhitespace(cipher.login.password) && fieldName === \"credential\") {\n      cipher.login.password = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.login.uri) && fieldName === \"hostname\") {\n      cipher.login.uris = this.makeUriArray(fieldValue);\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillCreditCard(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.number) && field.id === \"ccnum\") {\n      cipher.card.number = fieldValue;\n      cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.code) && field.id === \"cvv\") {\n      cipher.card.code = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"cardholder\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.card.expiration) && field.id === \"expiry\") {\n      const monthYear: string = fieldValue.toString().trim();\n      cipher.card.expMonth = monthYear.substring(4, 6);\n      if (cipher.card.expMonth[0] === \"0\") {\n        cipher.card.expMonth = cipher.card.expMonth.substring(1, 2);\n      }\n      cipher.card.expYear = monthYear.substring(0, 4);\n      return true;\n    }\n\n    if (field.id === \"type\") {\n      // Skip since brand was determined from number above\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillBankAccount(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.card.cardholderName) && field.id === \"owner\") {\n      cipher.card.cardholderName = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillIdentity(\n    field: FieldsEntity,\n    fieldValue: string,\n    cipher: CipherView,\n    valueKey: string,\n  ): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"firstname\") {\n      cipher.identity.firstName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.lastName) && field.id === \"lastname\") {\n      cipher.identity.lastName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.middleName) && field.id === \"initial\") {\n      cipher.identity.middleName = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"defphone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.email)) {\n      if (valueKey === \"email\") {\n        const { email_address, provider } = field.value.email;\n        cipher.identity.email = this.getValueOrDefault(email_address);\n        this.processKvp(cipher, \"provider\", provider, FieldType.Text);\n        return true;\n      }\n\n      if (field.id === \"email\") {\n        cipher.identity.email = fieldValue;\n        return true;\n      }\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.username) && field.id === \"username\") {\n      cipher.identity.username = fieldValue;\n      return true;\n    }\n    return false;\n  }\n\n  private fillDriversLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.address1) && field.id === \"address\") {\n      cipher.identity.address1 = fieldValue;\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.licenseNumber) && field.id === \"number\") {\n      cipher.identity.licenseNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillOutdoorLicense(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO ISO code\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.state) && field.id === \"state\") {\n      cipher.identity.state = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillMembership(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"org_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.phone) && field.id === \"phone\") {\n      cipher.identity.phone = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillPassport(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"fullname\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    // TODO Iso\n    if (this.isNullOrWhitespace(cipher.identity.country) && field.id === \"issuing_country\") {\n      cipher.identity.country = fieldValue;\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.passportNumber) && field.id === \"number\") {\n      cipher.identity.passportNumber = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillRewardsProgram(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"member_name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.company) && field.id === \"company_name\") {\n      cipher.identity.company = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private fillSSN(field: FieldsEntity, fieldValue: string, cipher: CipherView): boolean {\n    if (this.isNullOrWhitespace(cipher.identity.firstName) && field.id === \"name\") {\n      this.processFullName(cipher, fieldValue);\n      return true;\n    }\n\n    if (this.isNullOrWhitespace(cipher.identity.ssn) && field.id === \"number\") {\n      cipher.identity.ssn = fieldValue;\n      return true;\n    }\n\n    return false;\n  }\n\n  private parsePasswordHistory(historyItems: PasswordHistoryEntity[], cipher: CipherView) {\n    if (historyItems == null || historyItems.length === 0) {\n      return;\n    }\n\n    const maxSize = historyItems.length > 5 ? 5 : historyItems.length;\n    cipher.passwordHistory = historyItems\n      .filter((h: any) => !this.isNullOrWhitespace(h.value) && h.time != null)\n      .sort((a, b) => b.time - a.time)\n      .slice(0, maxSize)\n      .map((h: any) => {\n        const ph = new PasswordHistoryView();\n        ph.password = h.value;\n        ph.lastUsedDate = new Date((\"\" + h.time).length >= 13 ? h.time : h.time * 1000);\n        return ph;\n      });\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class CipherImportContext {\n  lowerProperty: string;\n  constructor(\n    public importRecord: any,\n    public property: string,\n    public cipher: CipherView,\n  ) {\n    this.lowerProperty = property.toLowerCase();\n  }\n}\n","import { FieldType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\n\nexport const IgnoredProperties = [\n  \"ainfo\",\n  \"autosubmit\",\n  \"notesplain\",\n  \"ps\",\n  \"scope\",\n  \"tags\",\n  \"title\",\n  \"uuid\",\n  \"notes\",\n];\n\nexport abstract class OnePasswordCsvImporter extends BaseImporter implements Importer {\n  protected loginPropertyParsers = [\n    this.setLoginUsername,\n    this.setLoginPassword,\n    this.setLoginUris,\n  ];\n  protected creditCardPropertyParsers = [\n    this.setCreditCardNumber,\n    this.setCreditCardVerification,\n    this.setCreditCardCardholderName,\n    this.setCreditCardExpiry,\n  ];\n  protected identityPropertyParsers = [\n    this.setIdentityFirstName,\n    this.setIdentityInitial,\n    this.setIdentityLastName,\n    this.setIdentityUserName,\n    this.setIdentityEmail,\n    this.setIdentityPhone,\n    this.setIdentityCompany,\n  ];\n\n  abstract setCipherType(value: any, cipher: CipherView): void;\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true, {\n      quoteChar: '\"',\n      escapeChar: \"\\\\\",\n    });\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (this.isNullOrWhitespace(this.getProp(value, \"title\"))) {\n        return;\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.getProp(value, \"title\"), \"--\");\n\n      this.setNotes(value, cipher);\n\n      this.setCipherType(value, cipher);\n\n      let altUsername: string = null;\n      for (const property in value) {\n        // eslint-disable-next-line\n        if (!value.hasOwnProperty(property) || this.isNullOrWhitespace(value[property])) {\n          continue;\n        }\n\n        const context = new CipherImportContext(value, property, cipher);\n        if (cipher.type === CipherType.Login && this.setKnownLoginValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Card && this.setKnownCreditCardValue(context)) {\n          continue;\n        } else if (cipher.type === CipherType.Identity && this.setKnownIdentityValue(context)) {\n          continue;\n        }\n\n        altUsername = this.setUnknownValue(context, altUsername);\n      }\n\n      if (\n        cipher.type === CipherType.Login &&\n        !this.isNullOrWhitespace(altUsername) &&\n        this.isNullOrWhitespace(cipher.login.username) &&\n        altUsername.indexOf(\"://\") === -1\n      ) {\n        cipher.login.username = altUsername;\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  protected getProp(obj: any, name: string): any {\n    const lowerObj = Object.entries(obj).reduce((agg: any, entry: [string, any]) => {\n      agg[entry[0].toLowerCase()] = entry[1];\n      return agg;\n    }, {});\n    return lowerObj[name.toLowerCase()];\n  }\n\n  protected getPropByRegexp(obj: any, regexp: RegExp): any {\n    const matchingKeys = Object.keys(obj).reduce((agg: string[], key: string) => {\n      if (key.match(regexp)) {\n        agg.push(key);\n      }\n      return agg;\n    }, []);\n    if (matchingKeys.length === 0) {\n      return null;\n    } else {\n      return obj[matchingKeys[0]];\n    }\n  }\n\n  protected getPropIncluding(obj: any, name: string): any {\n    const includesMap = Object.keys(obj).reduce((agg: string[], entry: string) => {\n      if (entry.toLowerCase().includes(name.toLowerCase())) {\n        agg.push(entry);\n      }\n      return agg;\n    }, []);\n    if (includesMap.length === 0) {\n      return null;\n    } else {\n      return obj[includesMap[0]];\n    }\n  }\n\n  protected setNotes(importRecord: any, cipher: CipherView) {\n    cipher.notes =\n      this.getValueOrDefault(this.getProp(importRecord, \"notesPlain\"), \"\") +\n      \"\\n\" +\n      this.getValueOrDefault(this.getProp(importRecord, \"notes\"), \"\") +\n      \"\\n\";\n    cipher.notes.trim();\n  }\n\n  protected setKnownLoginValue(context: CipherImportContext): boolean {\n    return this.loginPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownCreditCardValue(context: CipherImportContext): boolean {\n    return this.creditCardPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setKnownIdentityValue(context: CipherImportContext): boolean {\n    return this.identityPropertyParsers.reduce((agg: boolean, func) => {\n      if (!agg) {\n        agg = func.bind(this)(context);\n      }\n      return agg;\n    }, false);\n  }\n\n  protected setUnknownValue(context: CipherImportContext, altUsername: string): string {\n    if (\n      IgnoredProperties.indexOf(context.lowerProperty) === -1 &&\n      !context.lowerProperty.startsWith(\"section:\") &&\n      !context.lowerProperty.startsWith(\"section \")\n    ) {\n      if (altUsername == null && context.lowerProperty === \"email\") {\n        return context.importRecord[context.property];\n      } else if (\n        context.lowerProperty === \"created date\" ||\n        context.lowerProperty === \"modified date\"\n      ) {\n        const readableDate = new Date(\n          parseInt(context.importRecord[context.property], 10) * 1000,\n        ).toUTCString();\n        this.processKvp(context.cipher, \"1Password \" + context.property, readableDate);\n        return null;\n      }\n      if (\n        context.lowerProperty.includes(\"password\") ||\n        context.lowerProperty.includes(\"key\") ||\n        context.lowerProperty.includes(\"secret\")\n      ) {\n        this.processKvp(\n          context.cipher,\n          context.property,\n          context.importRecord[context.property],\n          FieldType.Hidden,\n        );\n      } else {\n        this.processKvp(context.cipher, context.property, context.importRecord[context.property]);\n      }\n    }\n    return null;\n  }\n\n  protected setIdentityFirstName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.firstName) &&\n      context.lowerProperty.includes(\"first name\")\n    ) {\n      context.cipher.identity.firstName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityInitial(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.middleName) &&\n      context.lowerProperty.includes(\"initial\")\n    ) {\n      context.cipher.identity.middleName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityLastName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.lastName) &&\n      context.lowerProperty.includes(\"last name\")\n    ) {\n      context.cipher.identity.lastName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityUserName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.username) &&\n      context.lowerProperty.includes(\"username\")\n    ) {\n      context.cipher.identity.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityCompany(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.company) &&\n      context.lowerProperty.includes(\"company\")\n    ) {\n      context.cipher.identity.company = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityPhone(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.phone) &&\n      context.lowerProperty.includes(\"default phone\")\n    ) {\n      context.cipher.identity.phone = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setIdentityEmail(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.identity.email) &&\n      context.lowerProperty.includes(\"email\")\n    ) {\n      context.cipher.identity.email = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardNumber(context: CipherImportContext): boolean {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.number) &&\n      context.lowerProperty.includes(\"number\")\n    ) {\n      context.cipher.card.number = context.importRecord[context.property];\n      context.cipher.card.brand = CardView.getCardBrandByPatterns(context.cipher.card.number);\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardVerification(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.code) &&\n      context.lowerProperty.includes(\"verification number\")\n    ) {\n      context.cipher.card.code = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardCardholderName(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.cardholderName) &&\n      context.lowerProperty.includes(\"cardholder name\")\n    ) {\n      context.cipher.card.cardholderName = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\") &&\n      context.importRecord[context.property].length === 7\n    ) {\n      context.cipher.card.expMonth = (context.importRecord[context.property] as string).substr(\n        0,\n        2,\n      );\n      if (context.cipher.card.expMonth[0] === \"0\") {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = (context.importRecord[context.property] as string).substr(3, 4);\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginPassword(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.password) &&\n      context.lowerProperty === \"password\"\n    ) {\n      context.cipher.login.password = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUsername(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.login.username) &&\n      context.lowerProperty === \"username\"\n    ) {\n      context.cipher.login.username = context.importRecord[context.property];\n      return true;\n    }\n    return false;\n  }\n\n  protected setLoginUris(context: CipherImportContext) {\n    if (\n      (context.cipher.login.uris == null || context.cipher.login.uris.length === 0) &&\n      context.lowerProperty === \"urls\"\n    ) {\n      const urls = context.importRecord[context.property].split(this.newLineRegex);\n      context.cipher.login.uris = this.makeUriArray(urls);\n      return true;\n    } else if (context.lowerProperty === \"url\") {\n      if (context.cipher.login.uris == null) {\n        context.cipher.login.uris = [];\n      }\n      context.cipher.login.uris.concat(this.makeUriArray(context.importRecord[context.property]));\n      return true;\n    }\n    return false;\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { IgnoredProperties, OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordMacCsvImporter extends OnePasswordCsvImporter implements Importer {\n  setCipherType(value: any, cipher: CipherView) {\n    const onePassType = this.getValueOrDefault(this.getProp(value, \"type\"), \"Login\");\n    switch (onePassType) {\n      case \"Credit Card\":\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Identity\":\n        cipher.type = CipherType.Identity;\n        cipher.identity = new IdentityView();\n        IgnoredProperties.push(\"type\");\n        break;\n      case \"Login\":\n      case \"Secure Note\":\n        IgnoredProperties.push(\"type\");\n        break;\n      default:\n        break;\n    }\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { Importer } from \"../importer\";\n\nimport { CipherImportContext } from \"./cipher-import-context\";\nimport { OnePasswordCsvImporter } from \"./onepassword-csv-importer\";\n\nexport class OnePasswordWinCsvImporter extends OnePasswordCsvImporter implements Importer {\n  constructor() {\n    super();\n    this.identityPropertyParsers.push(this.setIdentityAddress);\n  }\n\n  setCipherType(value: any, cipher: CipherView) {\n    cipher.type = CipherType.Login;\n    cipher.login = new LoginView();\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: number/i)) &&\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /\\d+: expiry date/i))\n    ) {\n      cipher.type = CipherType.Card;\n      cipher.card = new CardView();\n    }\n\n    if (\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: first name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: initial/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /name \\d+: last name/i)) ||\n      !this.isNullOrWhitespace(this.getPropByRegexp(value, /internet \\d+: email/i))\n    ) {\n      cipher.type = CipherType.Identity;\n      cipher.identity = new IdentityView();\n    }\n  }\n\n  setIdentityAddress(context: CipherImportContext) {\n    if (context.lowerProperty.match(/address \\d+: address/i)) {\n      this.processKvp(context.cipher, \"address\", context.importRecord[context.property]);\n      return true;\n    }\n    return false;\n  }\n\n  setCreditCardExpiry(context: CipherImportContext) {\n    if (\n      this.isNullOrWhitespace(context.cipher.card.expiration) &&\n      context.lowerProperty.includes(\"expiry date\")\n    ) {\n      const expSplit = (context.importRecord[context.property] as string).split(\"/\");\n      context.cipher.card.expMonth = expSplit[0];\n      if (context.cipher.card.expMonth[0] === \"0\" && context.cipher.card.expMonth.length === 2) {\n        context.cipher.card.expMonth = context.cipher.card.expMonth.substr(1, 1);\n      }\n      context.cipher.card.expYear = expSplit[2].length > 4 ? expSplit[2].substr(0, 4) : expSplit[2];\n      return true;\n    }\n    return false;\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PadlockCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let headers: string[] = null;\n    results.forEach((value) => {\n      if (headers == null) {\n        headers = value.map((v: string) => v);\n        return;\n      }\n\n      if (value.length < 2 || value.length !== headers.length) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value[1])) {\n        if (this.organization) {\n          const tags = (value[1] as string).split(\",\");\n          tags.forEach((tag) => {\n            tag = tag.trim();\n            let addCollection = true;\n            let collectionIndex = result.collections.length;\n\n            for (let i = 0; i < result.collections.length; i++) {\n              if (result.collections[i].name === tag) {\n                addCollection = false;\n                collectionIndex = i;\n                break;\n              }\n            }\n\n            if (addCollection) {\n              const collection = new CollectionView();\n              collection.name = tag;\n              result.collections.push(collection);\n            }\n\n            result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n          });\n        } else {\n          const tags = (value[1] as string).split(\",\");\n          const tag = tags.length > 0 ? tags[0].trim() : null;\n          this.processFolder(result, tag);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n\n      for (let i = 2; i < value.length; i++) {\n        const header = headers[i].trim().toLowerCase();\n        if (this.isNullOrWhitespace(value[i]) || this.isNullOrWhitespace(header)) {\n          continue;\n        }\n\n        if (this.usernameFieldNames.indexOf(header) > -1) {\n          cipher.login.username = value[i];\n        } else if (this.passwordFieldNames.indexOf(header) > -1) {\n          cipher.login.password = value[i];\n        } else if (this.uriFieldNames.indexOf(header) > -1) {\n          cipher.login.uris = this.makeUriArray(value[i]);\n        } else {\n          this.processKvp(cipher, headers[i], value[i]);\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassKeepCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      this.processFolder(result, this.getValue(\"category\", value));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValue(\"description\", value);\n      cipher.name = this.getValueOrDefault(this.getValue(\"title\", value), \"--\");\n      cipher.login.username = this.getValue(\"username\", value);\n      cipher.login.password = this.getValue(\"password\", value);\n      cipher.login.uris = this.makeUriArray(this.getValue(\"site\", value));\n      this.processKvp(cipher, \"Password 2\", this.getValue(\"password2\", value));\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private getValue(key: string, value: any) {\n    return this.getValueOrDefault(value[key], this.getValueOrDefault(value[\" \" + key]));\n  }\n}\n","import { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport { PasskyJsonExport } from \"./passky-json-types\";\n\nexport class PasskyJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const passkyExport: PasskyJsonExport = JSON.parse(data);\n    if (\n      passkyExport == null ||\n      passkyExport.passwords == null ||\n      passkyExport.passwords.length === 0\n    ) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (passkyExport.encrypted == true) {\n      result.success = false;\n      result.errorMessage = \"Unable to import an encrypted passky backup.\";\n      return Promise.resolve(result);\n    }\n\n    passkyExport.passwords.forEach((record) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = record.website;\n      cipher.login.username = record.username;\n      cipher.login.password = record.password;\n\n      cipher.login.uris = this.makeUriArray(record.website);\n      cipher.notes = record.message;\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PassmanJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.length === 0) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((credential: any) => {\n      if (credential.tags != null && credential.tags.length > 0) {\n        const folderName = credential.tags[0].text;\n        this.processFolder(result, folderName);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = credential.label;\n\n      cipher.login.username = this.getValueOrDefault(credential.username);\n      if (this.isNullOrWhitespace(cipher.login.username)) {\n        cipher.login.username = this.getValueOrDefault(credential.email);\n      } else if (!this.isNullOrWhitespace(credential.email)) {\n        cipher.notes = \"Email: \" + credential.email + \"\\n\";\n      }\n\n      cipher.login.password = this.getValueOrDefault(credential.password);\n      cipher.login.uris = this.makeUriArray(credential.url);\n      cipher.notes += this.getValueOrDefault(credential.description, \"\");\n      if (credential.otp != null) {\n        cipher.login.totp = this.getValueOrDefault(credential.otp.secret);\n      }\n\n      if (credential.custom_fields != null) {\n        credential.custom_fields.forEach((customField: any) => {\n          switch (customField.field_type) {\n            case \"text\":\n            case \"password\":\n              this.processKvp(cipher, customField.label, customField.value);\n              break;\n          }\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasspackCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const tagsJson = !this.isNullOrWhitespace(value.Tags) ? JSON.parse(value.Tags) : null;\n      const tags: string[] =\n        tagsJson != null && tagsJson.tags != null && tagsJson.tags.length > 0\n          ? tagsJson.tags\n              .map((tagJson: string) => {\n                try {\n                  const t = JSON.parse(tagJson);\n                  return this.getValueOrDefault(t.tag);\n                } catch {\n                  // Ignore error\n                }\n                return null;\n              })\n              .filter((t: string) => !this.isNullOrWhitespace(t))\n          : null;\n\n      if (this.organization && tags != null && tags.length > 0) {\n        tags.forEach((tag) => {\n          let addCollection = true;\n          let collectionIndex = result.collections.length;\n\n          for (let i = 0; i < result.collections.length; i++) {\n            if (result.collections[i].name === tag) {\n              addCollection = false;\n              collectionIndex = i;\n              break;\n            }\n          }\n\n          if (addCollection) {\n            const collection = new CollectionView();\n            collection.name = tag;\n            result.collections.push(collection);\n          }\n\n          result.collectionRelationships.push([result.ciphers.length, collectionIndex]);\n        });\n      } else if (!this.organization && tags != null && tags.length > 0) {\n        this.processFolder(result, tags[0]);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Notes, \"\");\n      cipher.notes += \"\\n\\n\" + this.getValueOrDefault(value[\"Shared Notes\"], \"\") + \"\\n\";\n      cipher.name = this.getValueOrDefault(value[\"Entry Name\"], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User ID\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n\n      if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n        value.__parsed_extra.forEach((extra: string) => {\n          if (!this.isNullOrWhitespace(extra)) {\n            cipher.notes += \"\\n\" + extra;\n          }\n        });\n      }\n\n      const fieldsJson = !this.isNullOrWhitespace(value[\"Extra Fields\"])\n        ? JSON.parse(value[\"Extra Fields\"])\n        : null;\n      const fields =\n        fieldsJson != null && fieldsJson.extraFields != null && fieldsJson.extraFields.length > 0\n          ? fieldsJson.extraFields.map((fieldJson: string) => {\n              try {\n                return JSON.parse(fieldJson);\n              } catch {\n                // Ignore error\n              }\n              return null;\n            })\n          : null;\n      if (fields != null) {\n        fields.forEach((f: any) => {\n          if (f != null) {\n            this.processKvp(cipher, f.name, f.data);\n          }\n        });\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordAgentCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let newVersion = true;\n    results.forEach((value) => {\n      if (value.length !== 5 && value.length < 9) {\n        return;\n      }\n      const altFormat = value.length === 10 && value[0] === \"0\";\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[altFormat ? 1 : 0], \"--\");\n      cipher.login.username = this.getValueOrDefault(value[altFormat ? 2 : 1]);\n      cipher.login.password = this.getValueOrDefault(value[altFormat ? 3 : 2]);\n      if (value.length === 5) {\n        newVersion = false;\n        cipher.notes = this.getValueOrDefault(value[4]);\n        cipher.login.uris = this.makeUriArray(value[3]);\n      } else {\n        const folder = this.getValueOrDefault(value[altFormat ? 9 : 8], \"(None)\");\n        let folderName = folder !== \"(None)\" ? folder.split(\"\\\\\").join(\"/\") : null;\n        if (folderName != null) {\n          folderName = folder.split(\" > \").join(\"/\");\n          folderName = folder.split(\">\").join(\"/\");\n        }\n        this.processFolder(result, folderName);\n        cipher.notes = this.getValueOrDefault(value[altFormat ? 5 : 3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n      }\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (newVersion && this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordBossJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = JSON.parse(data);\n    if (results == null || results.items == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, string>();\n    results.folders.forEach((value: any) => {\n      foldersMap.set(value.id, value.name);\n    });\n    const foldersIndexMap = new Map<string, number>();\n    foldersMap.forEach((val, key) => {\n      foldersIndexMap.set(key, result.folders.length);\n      const f = new FolderView();\n      f.name = val;\n      result.folders.push(f);\n    });\n\n    results.items.forEach((value: any) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.login.uris = this.makeUriArray(value.login_url);\n\n      if (value.folder != null && foldersIndexMap.has(value.folder)) {\n        result.folderRelationships.push([result.ciphers.length, foldersIndexMap.get(value.folder)]);\n      }\n\n      if (value.identifiers == null) {\n        return;\n      }\n\n      if (!this.isNullOrWhitespace(value.identifiers.notes)) {\n        cipher.notes = value.identifiers.notes.split(\"\\\\r\\\\n\").join(\"\\n\").split(\"\\\\n\").join(\"\\n\");\n      }\n\n      if (value.type === \"CreditCard\") {\n        cipher.card = new CardView();\n        cipher.type = CipherType.Card;\n      }\n\n      for (const property in value.identifiers) {\n        // eslint-disable-next-line\n        if (!value.identifiers.hasOwnProperty(property)) {\n          continue;\n        }\n        const valObj = value.identifiers[property];\n        const val = valObj != null ? valObj.toString() : null;\n        if (\n          this.isNullOrWhitespace(val) ||\n          property === \"notes\" ||\n          property === \"ignoreItemInSecurityScore\"\n        ) {\n          continue;\n        }\n\n        if (property === \"custom_fields\") {\n          valObj.forEach((cf: any) => {\n            this.processKvp(cipher, cf.name, cf.value);\n          });\n          continue;\n        }\n\n        if (cipher.type === CipherType.Card) {\n          if (property === \"cardNumber\") {\n            cipher.card.number = val;\n            cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n            continue;\n          } else if (property === \"nameOnCard\") {\n            cipher.card.cardholderName = val;\n            continue;\n          } else if (property === \"security_code\") {\n            cipher.card.code = val;\n            continue;\n          } else if (property === \"expires\") {\n            try {\n              const expDate = new Date(val);\n              cipher.card.expYear = expDate.getFullYear().toString();\n              cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n            } catch {\n              // Ignore error\n            }\n            continue;\n          } else if (property === \"cardType\") {\n            continue;\n          }\n        } else {\n          if (\n            (property === \"username\" || property === \"email\") &&\n            this.isNullOrWhitespace(cipher.login.username)\n          ) {\n            cipher.login.username = val;\n            continue;\n          } else if (property === \"password\") {\n            cipher.login.password = val;\n            continue;\n          } else if (property === \"totp\") {\n            cipher.login.totp = val;\n            continue;\n          } else if (\n            (cipher.login.uris == null || cipher.login.uris.length === 0) &&\n            this.uriFieldNames.indexOf(property) > -1\n          ) {\n            cipher.login.uris = this.makeUriArray(val);\n            continue;\n          }\n        }\n\n        this.processKvp(cipher, property, val);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordDragonXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const records = doc.querySelectorAll(\"PasswordManager > record\");\n    Array.from(records).forEach((record) => {\n      const category = this.querySelectorDirectChild(record, \"Category\");\n      const categoryText =\n        category != null &&\n        !this.isNullOrWhitespace(category.textContent) &&\n        category.textContent !== \"Unfiled\"\n          ? category.textContent\n          : null;\n      this.processFolder(result, categoryText);\n\n      const accountName = this.querySelectorDirectChild(record, \"Account-Name\");\n      const userId = this.querySelectorDirectChild(record, \"User-Id\");\n      const password = this.querySelectorDirectChild(record, \"Password\");\n      const url = this.querySelectorDirectChild(record, \"URL\");\n      const notes = this.querySelectorDirectChild(record, \"Notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name =\n        accountName != null ? this.getValueOrDefault(accountName.textContent, \"--\") : \"--\";\n      cipher.notes = notes != null ? this.getValueOrDefault(notes.textContent) : \"\";\n      cipher.login.username = userId != null ? this.getValueOrDefault(userId.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      const attributes: string[] = [];\n      for (let i = 1; i <= 10; i++) {\n        attributes.push(\"Attribute-\" + i);\n      }\n\n      this.querySelectorAllDirectChild(record, attributes.join(\",\")).forEach((attr) => {\n        if (this.isNullOrWhitespace(attr.textContent) || attr.textContent === \"null\") {\n          return;\n        }\n        this.processKvp(cipher, attr.tagName, attr.textContent);\n      });\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\n/** This is the importer for the xml format from pwsafe.org  */\nexport class PasswordSafeXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const passwordSafe = doc.querySelector(\"passwordsafe\");\n    if (passwordSafe == null) {\n      result.errorMessage = \"Missing `passwordsafe` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const notesDelimiter = passwordSafe.getAttribute(\"delimiter\");\n    const entries = doc.querySelectorAll(\"passwordsafe > entry\");\n    Array.from(entries).forEach((entry) => {\n      const group = this.querySelectorDirectChild(entry, \"group\");\n      const groupText =\n        group != null && !this.isNullOrWhitespace(group.textContent)\n          ? group.textContent.split(\".\").join(\"/\")\n          : null;\n      this.processFolder(result, groupText);\n\n      const title = this.querySelectorDirectChild(entry, \"title\");\n      const username = this.querySelectorDirectChild(entry, \"username\");\n      const email = this.querySelectorDirectChild(entry, \"email\");\n      const password = this.querySelectorDirectChild(entry, \"password\");\n      const url = this.querySelectorDirectChild(entry, \"url\");\n      const notes = this.querySelectorDirectChild(entry, \"notes\");\n      const cipher = this.initLoginCipher();\n      cipher.name = title != null ? this.getValueOrDefault(title.textContent, \"--\") : \"--\";\n      cipher.notes =\n        notes != null\n          ? this.getValueOrDefault(notes.textContent, \"\").split(notesDelimiter).join(\"\\n\")\n          : null;\n      cipher.login.username =\n        username != null ? this.getValueOrDefault(username.textContent) : null;\n      cipher.login.password =\n        password != null ? this.getValueOrDefault(password.textContent) : null;\n      cipher.login.uris = url != null ? this.makeUriArray(url.textContent) : null;\n\n      if (this.isNullOrWhitespace(cipher.login.username) && email != null) {\n        cipher.login.username = this.getValueOrDefault(email.textContent);\n      } else if (email != null && !this.isNullOrWhitespace(email.textContent)) {\n        cipher.notes = this.isNullOrWhitespace(cipher.notes)\n          ? \"Email: \" + email.textContent\n          : cipher.notes + \"\\n\" + \"Email: \" + email.textContent;\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class PasswordWalletTxtImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 1) {\n        return;\n      }\n      if (value.length > 5) {\n        this.processFolder(result, value[5]);\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      if (value.length > 4) {\n        cipher.notes = this.getValueOrDefault(value[4], \"\").split(\"¬\").join(\"\\n\");\n      }\n      if (value.length > 2) {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n      }\n      if (value.length > 3) {\n        cipher.login.password = this.getValueOrDefault(value[3]);\n      }\n      if (value.length > 1) {\n        cipher.login.uris = this.makeUriArray(value[1]);\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","export type ProtonPassJsonFile = {\n  version: string;\n  userId: string;\n  encrypted: boolean;\n  vaults: Record<string, ProtonPassVault>;\n};\n\nexport type ProtonPassVault = {\n  name: string;\n  description: string;\n  display: {\n    color: number;\n    icon: number;\n  };\n  items: ProtonPassItem[];\n};\n\nexport type ProtonPassItem = {\n  itemId: string;\n  shareId: string;\n  data: ProtonPassItemData;\n  state: ProtonPassItemState;\n  aliasEmail: string | null;\n  contentFormatVersion: number;\n  createTime: number;\n  modifyTime: number;\n  pinned: boolean;\n};\n\nexport enum ProtonPassItemState {\n  ACTIVE = 1,\n  TRASHED = 2,\n}\n\nexport type ProtonPassItemData = {\n  metadata: ProtonPassItemMetadata;\n  extraFields: ProtonPassItemExtraField[];\n  platformSpecific?: any;\n  type: \"login\" | \"alias\" | \"creditCard\" | \"note\";\n  content: ProtonPassLoginItemContent | ProtonPassCreditCardItemContent;\n};\n\nexport type ProtonPassItemMetadata = {\n  name: string;\n  note: string;\n  itemUuid: string;\n};\n\nexport type ProtonPassItemExtraField = {\n  fieldName: string;\n  type: string;\n  data: ProtonPassItemExtraFieldData;\n};\n\nexport type ProtonPassItemExtraFieldData = {\n  content?: string;\n  totpUri?: string;\n};\n\nexport type ProtonPassLoginItemContent = {\n  itemEmail?: string;\n  password?: string;\n  urls?: string[];\n  totpUri?: string;\n  passkeys: [];\n  itemUsername?: string;\n};\n\nexport type ProtonPassCreditCardItemContent = {\n  cardholderName?: string;\n  cardType?: number;\n  number?: string;\n  verificationNumber?: string;\n  expirationDate?: string;\n  pin?: string;\n};\n","import { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  ProtonPassCreditCardItemContent,\n  ProtonPassItemState,\n  ProtonPassJsonFile,\n  ProtonPassLoginItemContent,\n} from \"./types/protonpass-json-type\";\n\nexport class ProtonPassJsonImporter extends BaseImporter implements Importer {\n  constructor(private i18nService: I18nService) {\n    super();\n  }\n\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results: ProtonPassJsonFile = JSON.parse(data);\n    if (results == null || results.vaults == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    if (results.encrypted) {\n      result.success = false;\n      result.errorMessage = this.i18nService.t(\"unsupportedEncryptedImport\");\n      return Promise.resolve(result);\n    }\n\n    for (const [, vault] of Object.entries(results.vaults)) {\n      for (const item of vault.items) {\n        if (item.state == ProtonPassItemState.TRASHED) {\n          continue;\n        }\n        this.processFolder(result, vault.name);\n\n        const cipher = this.initLoginCipher();\n        cipher.name = this.getValueOrDefault(item.data.metadata.name, \"--\");\n        cipher.notes = this.getValueOrDefault(item.data.metadata.note);\n        cipher.favorite = item.pinned;\n\n        switch (item.data.type) {\n          case \"login\": {\n            const loginContent = item.data.content as ProtonPassLoginItemContent;\n            cipher.login.uris = this.makeUriArray(loginContent.urls);\n\n            cipher.login.username = this.getValueOrDefault(loginContent.itemUsername);\n            // if the cipher has no username then the email is used as the username\n            if (cipher.login.username == null) {\n              cipher.login.username = this.getValueOrDefault(loginContent.itemEmail);\n            } else {\n              this.processKvp(cipher, \"email\", loginContent.itemEmail);\n            }\n\n            cipher.login.password = this.getValueOrDefault(loginContent.password);\n            cipher.login.totp = this.getValueOrDefault(loginContent.totpUri);\n            for (const extraField of item.data.extraFields) {\n              this.processKvp(\n                cipher,\n                extraField.fieldName,\n                extraField.type == \"totp\" ? extraField.data.totpUri : extraField.data.content,\n                extraField.type == \"text\" ? FieldType.Text : FieldType.Hidden,\n              );\n            }\n            break;\n          }\n          case \"note\":\n            cipher.type = CipherType.SecureNote;\n            cipher.secureNote = new SecureNoteView();\n            cipher.secureNote.type = SecureNoteType.Generic;\n            break;\n          case \"creditCard\": {\n            const creditCardContent = item.data.content as ProtonPassCreditCardItemContent;\n            cipher.type = CipherType.Card;\n            cipher.card = new CardView();\n            cipher.card.cardholderName = this.getValueOrDefault(creditCardContent.cardholderName);\n            cipher.card.number = this.getValueOrDefault(creditCardContent.number);\n            cipher.card.brand = CardView.getCardBrandByPatterns(creditCardContent.number);\n            cipher.card.code = this.getValueOrDefault(creditCardContent.verificationNumber);\n\n            if (!this.isNullOrWhitespace(creditCardContent.expirationDate)) {\n              cipher.card.expMonth = creditCardContent.expirationDate.substring(5, 7);\n              cipher.card.expMonth = cipher.card.expMonth.replace(/^0+/, \"\");\n              cipher.card.expYear = creditCardContent.expirationDate.substring(0, 4);\n            }\n\n            if (!this.isNullOrWhitespace(creditCardContent.pin)) {\n              this.processKvp(cipher, \"PIN\", creditCardContent.pin, FieldType.Hidden);\n            }\n\n            break;\n          }\n        }\n\n        this.cleanupCipher(cipher);\n        result.ciphers.push(cipher);\n      }\n    }\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../../models/import-result\";\nimport { BaseImporter } from \"../base-importer\";\nimport { Importer } from \"../importer\";\n\nimport {\n  AppPasswordEntry,\n  BookmarkEntry,\n  EnvironmentVariablesEntry,\n  FoldersEntity,\n  GPGEntry,\n  NotesEntry,\n  PsonoItemTypes,\n  PsonoJsonExport,\n  TOTPEntry,\n  WebsitePasswordEntry,\n} from \"./psono-json-types\";\n\nexport class PsonoJsonImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const psonoExport: PsonoJsonExport = JSON.parse(data);\n    if (psonoExport == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    this.parseFolders(result, psonoExport.folders);\n    this.handleItemParsing(result, psonoExport.items);\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFolders(result: ImportResult, folders: FoldersEntity[], parentName?: string) {\n    if (folders == null || folders.length === 0) {\n      return;\n    }\n\n    folders.forEach((folder) => {\n      const folderHasItems = folder.items != null && folder.items.length > 0;\n      const folderHasSubfolders = folder.folders != null && folder.folders.length > 0;\n\n      if (!folderHasItems && !folderHasSubfolders) {\n        return;\n      }\n\n      if (!Utils.isNullOrWhitespace(parentName)) {\n        folder.name = parentName + \"/\" + folder.name;\n      }\n\n      if (folderHasSubfolders) {\n        this.parseFolders(result, folder.folders, folder.name);\n      }\n\n      if (!folderHasItems) {\n        this.processFolder(result, folder.name, folderHasItems);\n      } else {\n        this.handleItemParsing(result, folder.items, folder.name);\n      }\n    });\n  }\n\n  private handleItemParsing(result: ImportResult, items?: PsonoItemTypes[], folderName?: string) {\n    if (items == null || items.length === 0) {\n      return;\n    }\n\n    items.forEach((record) => {\n      const cipher = this.parsePsonoItem(record);\n      this.processFolder(result, folderName, true);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n  }\n\n  private parsePsonoItem(item: PsonoItemTypes): CipherView {\n    const cipher = this.initLoginCipher();\n\n    switch (item.type) {\n      case \"website_password\":\n        this.parseWebsiteLogins(item, cipher);\n        break;\n      case \"application_password\":\n        this.parseApplicationPasswords(item, cipher);\n        break;\n      case \"environment_variables\":\n        this.parseEnvironmentVariables(item, cipher);\n        break;\n      case \"totp\":\n        this.parseTOTP(item, cipher);\n        break;\n      case \"bookmark\":\n        this.parseBookmarks(item, cipher);\n        break;\n      // Skipping this until we can save GPG into notes/custom fields\n      // case \"mail_gpg_own_key\":\n      //   this.parseGPG(item, cipher);\n      //   break;\n      case \"note\":\n        this.parseNotes(item, cipher);\n        break;\n      default:\n        break;\n    }\n\n    return cipher;\n  }\n\n  readonly WEBSITE_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"website_password_title\",\n    \"website_password_notes\",\n    \"website_password_username\",\n    \"website_password_password\",\n    \"website_password_url\",\n    \"autosubmit\",\n    \"website_password_auto_submit\",\n    \"urlfilter\",\n    \"website_password_url_filter\",\n  ]);\n  private parseWebsiteLogins(entry: WebsitePasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"website_password\") {\n      return;\n    }\n\n    cipher.name = entry.website_password_title;\n    cipher.notes = entry.website_password_notes;\n\n    cipher.login.username = entry.website_password_username;\n    cipher.login.password = entry.website_password_password;\n\n    cipher.login.uris = this.makeUriArray(entry.website_password_url);\n\n    this.processKvp(\n      cipher,\n      \"website_password_auto_submit\",\n      entry.website_password_auto_submit?.toString(),\n      FieldType.Boolean,\n    );\n\n    this.processKvp(cipher, \"website_password_url_filter\", entry.website_password_url_filter);\n\n    this.importUnmappedFields(cipher, entry, this.WEBSITE_mappedValues);\n  }\n\n  readonly APP_PWD_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"application_password_title\",\n    \"application_password_notes\",\n    \"application_password_username\",\n    \"application_password_password\",\n  ]);\n  private parseApplicationPasswords(entry: AppPasswordEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"application_password\") {\n      return;\n    }\n\n    cipher.name = entry.application_password_title;\n    cipher.notes = entry.application_password_notes;\n\n    cipher.login.username = entry.application_password_username;\n    cipher.login.password = entry.application_password_password;\n\n    this.importUnmappedFields(cipher, entry, this.APP_PWD_mappedValues);\n  }\n\n  readonly BOOKMARK_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"bookmark_title\",\n    \"bookmark_notes\",\n    \"bookmark_url\",\n  ]);\n  private parseBookmarks(entry: BookmarkEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"bookmark\") {\n      return;\n    }\n\n    cipher.name = entry.bookmark_title;\n    cipher.notes = entry.bookmark_notes;\n\n    cipher.login.uris = this.makeUriArray(entry.bookmark_url);\n\n    this.importUnmappedFields(cipher, entry, this.BOOKMARK_mappedValues);\n  }\n\n  readonly NOTES_mappedValues = new Set([\"type\", \"name\", \"note_title\", \"note_notes\"]);\n  private parseNotes(entry: NotesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"note\") {\n      return;\n    }\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.note_title;\n    cipher.notes = entry.note_notes;\n\n    this.importUnmappedFields(cipher, entry, this.NOTES_mappedValues);\n  }\n\n  readonly TOTP_mappedValues = new Set([\"type\", \"name\", \"totp_title\", \"totp_notes\", \"totp_code\"]);\n  private parseTOTP(entry: TOTPEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"totp\") {\n      return;\n    }\n\n    cipher.name = entry.totp_title;\n    cipher.notes = entry.totp_notes;\n\n    cipher.login.totp = entry.totp_code;\n\n    this.importUnmappedFields(cipher, entry, this.TOTP_mappedValues);\n  }\n\n  readonly ENV_VARIABLES_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"environment_variables_title\",\n    \"environment_variables_notes\",\n    \"environment_variables_variables\",\n  ]);\n  private parseEnvironmentVariables(entry: EnvironmentVariablesEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"environment_variables\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.environment_variables_title;\n    cipher.notes = entry.environment_variables_notes;\n\n    entry.environment_variables_variables.forEach((KvPair) => {\n      this.processKvp(cipher, KvPair.key, KvPair.value);\n    });\n\n    this.importUnmappedFields(cipher, entry, this.ENV_VARIABLES_mappedValues);\n  }\n\n  readonly GPG_mappedValues = new Set([\n    \"type\",\n    \"name\",\n    \"mail_gpg_own_key_title\",\n    \"mail_gpg_own_key_public\",\n    \"mail_gpg_own_key_name\",\n    \"mail_gpg_own_key_email\",\n    \"mail_gpg_own_key_private\",\n  ]);\n  private parseGPG(entry: GPGEntry, cipher: CipherView) {\n    if (entry == null || entry.type != \"mail_gpg_own_key\") {\n      return;\n    }\n\n    cipher.type = CipherType.SecureNote;\n    cipher.secureNote = new SecureNoteView();\n    cipher.secureNote.type = SecureNoteType.Generic;\n    cipher.name = entry.mail_gpg_own_key_title;\n    cipher.notes = entry.mail_gpg_own_key_public;\n\n    this.processKvp(cipher, \"mail_gpg_own_key_name\", entry.mail_gpg_own_key_name);\n    this.processKvp(cipher, \"mail_gpg_own_key_email\", entry.mail_gpg_own_key_email);\n    this.processKvp(\n      cipher,\n      \"mail_gpg_own_key_private\",\n      entry.mail_gpg_own_key_private,\n      FieldType.Hidden,\n    );\n\n    this.importUnmappedFields(cipher, entry, this.GPG_mappedValues);\n  }\n\n  private importUnmappedFields(\n    cipher: CipherView,\n    entry: PsonoItemTypes,\n    mappedValues: Set<string>,\n  ) {\n    const unmappedFields = Object.keys(entry).filter((x) => !mappedValues.has(x));\n    unmappedFields.forEach((key) => {\n      const item = entry as any;\n      this.processKvp(cipher, key, item[key].toString());\n    });\n  }\n}\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RememBearCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.trash === \"true\") {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.name);\n      cipher.notes = this.getValueOrDefault(value.notes);\n      if (value.type === \"LoginItem\") {\n        cipher.login.uris = this.makeUriArray(value.website);\n        cipher.login.password = this.getValueOrDefault(value.password);\n        cipher.login.username = this.getValueOrDefault(value.username);\n      } else if (value.type === \"CreditCardItem\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        cipher.card.code = this.getValueOrDefault(value.verification);\n\n        try {\n          const expMonth = this.getValueOrDefault(value.expiryMonth);\n          if (expMonth != null) {\n            const expMonthNumber = parseInt(expMonth, null);\n            if (expMonthNumber != null && expMonthNumber >= 1 && expMonthNumber <= 12) {\n              cipher.card.expMonth = expMonthNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n        try {\n          const expYear = this.getValueOrDefault(value.expiryYear);\n          if (expYear != null) {\n            const expYearNumber = parseInt(expYear, null);\n            if (expYearNumber != null) {\n              cipher.card.expYear = expYearNumber.toString();\n            }\n          }\n        } catch {\n          // Ignore error\n        }\n\n        const pin = this.getValueOrDefault(value.pin);\n        if (pin != null) {\n          this.processKvp(cipher, \"PIN\", pin);\n        }\n        const zip = this.getValueOrDefault(value.zipCode);\n        if (zip != null) {\n          this.processKvp(cipher, \"Zip Code\", zip);\n        }\n      }\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class RoboFormCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    let i = 1;\n    results.forEach((value) => {\n      const folder =\n        !this.isNullOrWhitespace(value.Folder) && value.Folder.startsWith(\"/\")\n          ? value.Folder.replace(\"/\", \"\")\n          : value.Folder;\n      const folderName = !this.isNullOrWhitespace(folder) ? folder : null;\n      this.processFolder(result, folderName);\n\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value.Note);\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Login);\n      cipher.login.password = this.getValueOrDefault(value.Pwd);\n      cipher.login.uris = this.makeUriArray(value.Url);\n\n      if (!this.isNullOrWhitespace(value.Rf_fields)) {\n        let fields: string[] = [value.Rf_fields];\n        if (value.__parsed_extra != null && value.__parsed_extra.length > 0) {\n          fields = fields.concat(value.__parsed_extra);\n        }\n        fields.forEach((field: string) => {\n          const parts = field.split(\":\");\n          if (parts.length < 3) {\n            return;\n          }\n          const key = parts[0] === \"-no-name-\" ? null : parts[0];\n          const val = parts.length === 4 && parts[2] === \"rck\" ? parts[1] : parts[2];\n          this.processKvp(cipher, key, val);\n        });\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n\n      if (\n        i === results.length &&\n        cipher.name === \"--\" &&\n        this.isNullOrWhitespace(cipher.login.password)\n      ) {\n        return;\n      }\n\n      result.ciphers.push(cipher);\n      i++;\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafariCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title, \"--\");\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.Url ?? value.URL);\n      cipher.login.totp = this.getValueOrDefault(value.OTPAuth);\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { FieldType, SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SafeInCloudXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const db = doc.querySelector(\"database\");\n    if (db == null) {\n      result.errorMessage = \"Missing `database` node.\";\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const foldersMap = new Map<string, number>();\n\n    Array.from(doc.querySelectorAll(\"database > label\")).forEach((labelEl) => {\n      const name = labelEl.getAttribute(\"name\");\n      const id = labelEl.getAttribute(\"id\");\n      if (!this.isNullOrWhitespace(name) && !this.isNullOrWhitespace(id)) {\n        foldersMap.set(id, result.folders.length);\n        const folder = new FolderView();\n        folder.name = name;\n        result.folders.push(folder);\n      }\n    });\n\n    Array.from(doc.querySelectorAll(\"database > card\")).forEach((cardEl) => {\n      if (cardEl.getAttribute(\"template\") === \"true\" || cardEl.getAttribute(\"deleted\") === \"true\") {\n        return;\n      }\n\n      const labelIdEl = this.querySelectorDirectChild(cardEl, \"label_id\");\n      if (labelIdEl != null) {\n        const labelId = labelIdEl.textContent;\n        if (!this.isNullOrWhitespace(labelId) && foldersMap.has(labelId)) {\n          result.folderRelationships.push([result.ciphers.length, foldersMap.get(labelId)]);\n        }\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(cardEl.getAttribute(\"title\"), \"--\");\n\n      if (cardEl.getAttribute(\"star\") === \"true\") {\n        cipher.favorite = true;\n      }\n\n      const cardType = cardEl.getAttribute(\"type\");\n      if (cardType === \"note\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n      } else {\n        Array.from(this.querySelectorAllDirectChild(cardEl, \"field\")).forEach((fieldEl) => {\n          const text = fieldEl.textContent;\n          if (this.isNullOrWhitespace(text)) {\n            return;\n          }\n          const name = fieldEl.getAttribute(\"name\");\n          const fieldType = this.getValueOrDefault(fieldEl.getAttribute(\"type\"), \"\").toLowerCase();\n          if (fieldType === \"login\") {\n            cipher.login.username = text;\n          } else if (fieldType === \"password\" || fieldType === \"secret\") {\n            // safeInCloud allows for more than one password. we just insert them here and find the one used as password later\n            this.processKvp(cipher, name, text, FieldType.Hidden);\n          } else if (fieldType === \"one_time_password\") {\n            cipher.login.totp = text;\n          } else if (fieldType === \"notes\") {\n            cipher.notes += text + \"\\n\";\n          } else if (fieldType === \"weblogin\" || fieldType === \"website\") {\n            cipher.login.uris.push(...this.makeUriArray(text));\n          } else {\n            this.processKvp(cipher, name, text);\n          }\n        });\n      }\n\n      Array.from(this.querySelectorAllDirectChild(cardEl, \"notes\")).forEach((notesEl) => {\n        cipher.notes += notesEl.textContent + \"\\n\";\n      });\n\n      this.setPassword(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  // Choose a password from all passwords. Take one that has password in its name, or the first one if there is no such entry\n  // if its name is password, we can safely remove it form the fields. otherwise, it would maybe be best to keep it as a hidden field\n  setPassword(cipher: CipherView) {\n    const candidates = cipher.fields.filter((field) => field.type === FieldType.Hidden);\n    if (!candidates.length) {\n      return;\n    }\n\n    let choice: FieldView;\n    for (const field of candidates) {\n      if (this.passwordFieldNames.includes(field.name.toLowerCase())) {\n        choice = field;\n        cipher.fields = cipher.fields.filter((f) => f !== choice);\n        break;\n      }\n    }\n\n    if (!choice) {\n      choice = candidates[0];\n    }\n\n    cipher.login.password = choice.value;\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SaferPassCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(this.nameFromUrl(value.url), \"--\");\n      cipher.notes = this.getValueOrDefault(value.notes);\n      cipher.login.username = this.getValueOrDefault(value.username);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SecureSafeCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    // The url field can be in different case formats.\n    const urlField = Object.keys(results[0]).find((k) => /url/i.test(k));\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Title);\n      cipher.notes = this.getValueOrDefault(value.Comment);\n      cipher.login.uris = this.makeUriArray(value[urlField]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.username = this.getValueOrDefault(value.Username);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class SplashIdCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length < 3) {\n        return;\n      }\n\n      this.processFolder(result, this.getValueOrDefault(value[value.length - 1]));\n      const cipher = this.initLoginCipher();\n      cipher.notes = this.getValueOrDefault(value[value.length - 2], \"\");\n      cipher.name = this.getValueOrDefault(value[1], \"--\");\n\n      if (value[0] === \"Web Logins\" || value[0] === \"Servers\" || value[0] === \"Email Accounts\") {\n        cipher.login.username = this.getValueOrDefault(value[2]);\n        cipher.login.password = this.getValueOrDefault(value[3]);\n        cipher.login.uris = this.makeUriArray(value[4]);\n        this.parseFieldsToNotes(cipher, 5, value);\n      } else {\n        this.parseFieldsToNotes(cipher, 2, value);\n      }\n\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseFieldsToNotes(cipher: CipherView, startIndex: number, value: any) {\n    // last 3 rows do not get parsed\n    for (let i = startIndex; i < value.length - 3; i++) {\n      if (this.isNullOrWhitespace(value[i])) {\n        continue;\n      }\n      cipher.notes += value[i] + \"\\n\";\n    }\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class StickyPasswordXmlImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const doc = this.parseXml(data);\n    if (doc == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    const loginNodes = doc.querySelectorAll(\"root > Database > Logins > Login\");\n    Array.from(loginNodes).forEach((loginNode) => {\n      const accountId = loginNode.getAttribute(\"ID\");\n      if (this.isNullOrWhitespace(accountId)) {\n        return;\n      }\n\n      const usernameText = loginNode.getAttribute(\"Name\");\n      const passwordText = loginNode.getAttribute(\"Password\");\n      let titleText: string = null;\n      let linkText: string = null;\n      let notesText: string = null;\n      let groupId: string = null;\n      let groupText: string = null;\n\n      const accountLogin = doc.querySelector(\n        \"root > Database > Accounts > Account > \" +\n          'LoginLinks > Login[SourceLoginID=\"' +\n          accountId +\n          '\"]',\n      );\n      if (accountLogin != null) {\n        const account = accountLogin.parentElement.parentElement;\n        if (account != null) {\n          titleText = account.getAttribute(\"Name\");\n          linkText = account.getAttribute(\"Link\");\n          groupId = account.getAttribute(\"ParentID\");\n          notesText = account.getAttribute(\"Comments\");\n          if (!this.isNullOrWhitespace(notesText)) {\n            notesText = notesText.split(\"/n\").join(\"\\n\");\n          }\n        }\n      }\n\n      if (!this.isNullOrWhitespace(groupId)) {\n        groupText = this.buildGroupText(doc, groupId, \"\");\n        this.processFolder(result, groupText);\n      }\n\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(titleText, \"--\");\n      cipher.notes = this.getValueOrDefault(notesText);\n      cipher.login.username = this.getValueOrDefault(usernameText);\n      cipher.login.password = this.getValueOrDefault(passwordText);\n      cipher.login.uris = this.makeUriArray(linkText);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  buildGroupText(doc: Document, groupId: string, groupText: string): string {\n    const group = doc.querySelector('root > Database > Groups > Group[ID=\"' + groupId + '\"]');\n    if (group == null) {\n      return groupText;\n    }\n    if (!this.isNullOrWhitespace(groupText)) {\n      groupText = \"/\" + groupText;\n    }\n    groupText = group.getAttribute(\"Name\") + groupText;\n    return this.buildGroupText(doc, group.getAttribute(\"ParentID\"), groupText);\n  }\n}\n","import { SecureNoteType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { SecureNoteView } from \"@bitwarden/common/vault/models/view/secure-note.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nconst PropertiesToIgnore = [\n  \"kind\",\n  \"autologin\",\n  \"favorite\",\n  \"hexcolor\",\n  \"protectedwithpassword\",\n  \"subdomainonly\",\n  \"type\",\n  \"tk_export_version\",\n  \"note\",\n  \"title\",\n  \"document_content\",\n];\n\nexport class TrueKeyCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.favorite, \"\").toLowerCase() === \"true\";\n      cipher.name = this.getValueOrDefault(value.name, \"--\");\n      cipher.notes = this.getValueOrDefault(value.memo, \"\");\n      cipher.login.username = this.getValueOrDefault(value.login);\n      cipher.login.password = this.getValueOrDefault(value.password);\n      cipher.login.uris = this.makeUriArray(value.url);\n\n      if (value.kind !== \"login\") {\n        cipher.name = this.getValueOrDefault(value.title, \"--\");\n        cipher.notes = this.getValueOrDefault(value.note, \"\");\n      }\n\n      if (value.kind === \"cc\") {\n        cipher.type = CipherType.Card;\n        cipher.card = new CardView();\n        cipher.card.cardholderName = this.getValueOrDefault(value.cardholder);\n        cipher.card.number = this.getValueOrDefault(value.number);\n        cipher.card.brand = CardView.getCardBrandByPatterns(cipher.card.number);\n        if (!this.isNullOrWhitespace(value.expiryDate)) {\n          try {\n            const expDate = new Date(value.expiryDate);\n            cipher.card.expYear = expDate.getFullYear().toString();\n            cipher.card.expMonth = (expDate.getMonth() + 1).toString();\n          } catch {\n            // Ignore error\n          }\n        }\n      } else if (value.kind !== \"login\") {\n        cipher.type = CipherType.SecureNote;\n        cipher.secureNote = new SecureNoteView();\n        cipher.secureNote.type = SecureNoteType.Generic;\n        if (!this.isNullOrWhitespace(cipher.notes)) {\n          cipher.notes = this.getValueOrDefault(value.document_content, \"\");\n        }\n        for (const property in value) {\n          if (\n            value.hasOwnProperty(property) && // eslint-disable-line\n            PropertiesToIgnore.indexOf(property.toLowerCase()) < 0 &&\n            !this.isNullOrWhitespace(value[property])\n          ) {\n            this.processKvp(cipher, property, value[property]);\n          }\n        }\n      }\n\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class UpmCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, false);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (value.length !== 5) {\n        return;\n      }\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value[0], \"--\");\n      cipher.notes = this.getValueOrDefault(value[4]);\n      cipher.login.username = this.getValueOrDefault(value[1]);\n      cipher.login.password = this.getValueOrDefault(value[2]);\n      cipher.login.uris = this.makeUriArray(value[3]);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class YotiCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      const cipher = this.initLoginCipher();\n      cipher.name = this.getValueOrDefault(value.Name, \"--\");\n      cipher.login.username = this.getValueOrDefault(value[\"User name\"]);\n      cipher.login.password = this.getValueOrDefault(value.Password);\n      cipher.login.uris = this.makeUriArray(value.URL);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n}\n","import { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { ImportResult } from \"../models/import-result\";\n\nimport { BaseImporter } from \"./base-importer\";\nimport { Importer } from \"./importer\";\n\nexport class ZohoVaultCsvImporter extends BaseImporter implements Importer {\n  parse(data: string): Promise<ImportResult> {\n    const result = new ImportResult();\n    const results = this.parseCsv(data, true);\n    if (results == null) {\n      result.success = false;\n      return Promise.resolve(result);\n    }\n\n    results.forEach((value) => {\n      if (\n        this.isNullOrWhitespace(value[\"Password Name\"]) &&\n        this.isNullOrWhitespace(value[\"Secret Name\"])\n      ) {\n        return;\n      }\n      this.processFolder(result, this.getValueOrDefault(value.ChamberName));\n      const cipher = this.initLoginCipher();\n      cipher.favorite = this.getValueOrDefault(value.Favorite, \"0\") === \"1\";\n      cipher.notes = this.getValueOrDefault(value.Notes);\n      cipher.name = this.getValueOrDefault(\n        value[\"Password Name\"],\n        this.getValueOrDefault(value[\"Secret Name\"], \"--\"),\n      );\n      cipher.login.uris = this.makeUriArray(\n        this.getValueOrDefault(value[\"Password URL\"], this.getValueOrDefault(value[\"Secret URL\"])),\n      );\n      this.parseData(cipher, value.SecretData);\n      this.parseData(cipher, value.CustomData);\n      this.convertToNoteIfNeeded(cipher);\n      this.cleanupCipher(cipher);\n      result.ciphers.push(cipher);\n    });\n\n    if (this.organization) {\n      this.moveFoldersToCollections(result);\n    }\n\n    result.success = true;\n    return Promise.resolve(result);\n  }\n\n  private parseData(cipher: CipherView, data: string) {\n    if (this.isNullOrWhitespace(data)) {\n      return;\n    }\n    const dataLines = this.splitNewLine(data);\n    dataLines.forEach((line) => {\n      const delimPosition = line.indexOf(\":\");\n      if (delimPosition < 0) {\n        return;\n      }\n      const field = line.substring(0, delimPosition);\n      const value = line.length > delimPosition ? line.substring(delimPosition + 1) : null;\n      if (\n        this.isNullOrWhitespace(field) ||\n        this.isNullOrWhitespace(value) ||\n        field === \"SecretType\"\n      ) {\n        return;\n      }\n      const fieldLower = field.toLowerCase();\n      if (cipher.login.username == null && this.usernameFieldNames.indexOf(fieldLower) > -1) {\n        cipher.login.username = value;\n      } else if (\n        cipher.login.password == null &&\n        this.passwordFieldNames.indexOf(fieldLower) > -1\n      ) {\n        cipher.login.password = value;\n      } else {\n        this.processKvp(cipher, field, value);\n      }\n    });\n  }\n}\n","export interface ImportOption {\n  id: string;\n  name: string;\n}\n\nexport const featuredImportOptions = [\n  { id: \"bitwardenjson\", name: \"Bitwarden (json)\" },\n  { id: \"bitwardencsv\", name: \"Bitwarden (csv)\" },\n  { id: \"chromecsv\", name: \"Chrome (csv)\" },\n  { id: \"dashlanecsv\", name: \"Dashlane (csv)\" },\n  { id: \"firefoxcsv\", name: \"Firefox (csv)\" },\n  { id: \"keepass2xml\", name: \"KeePass 2 (xml)\" },\n  { id: \"lastpasscsv\", name: \"LastPass\" },\n  { id: \"safaricsv\", name: \"Safari and macOS (csv)\" },\n  { id: \"1password1pux\", name: \"1Password (1pux/json)\" },\n] as const;\n\nexport const regularImportOptions = [\n  { id: \"keepassxcsv\", name: \"KeePassX (csv)\" },\n  { id: \"1password1pif\", name: \"1Password (1pif)\" },\n  { id: \"1passwordwincsv\", name: \"1Password 6 and 7 Windows (csv)\" },\n  { id: \"1passwordmaccsv\", name: \"1Password 6 and 7 Mac (csv)\" },\n  { id: \"dashlanejson\", name: \"Dashlane (json)\" },\n  { id: \"roboformcsv\", name: \"RoboForm (csv)\" },\n  { id: \"keepercsv\", name: \"Keeper (csv)\" },\n  // Temporarily remove this option for the Feb release\n  // { id: \"keeperjson\", name: \"Keeper (json)\" },\n  { id: \"enpasscsv\", name: \"Enpass (csv)\" },\n  { id: \"enpassjson\", name: \"Enpass (json)\" },\n  { id: \"protonpass\", name: \"ProtonPass (zip/json)\" },\n  { id: \"safeincloudxml\", name: \"SafeInCloud (xml)\" },\n  { id: \"pwsafexml\", name: \"Password Safe - pwsafe.org (xml)\" },\n  { id: \"stickypasswordxml\", name: \"Sticky Password (xml)\" },\n  { id: \"msecurecsv\", name: \"mSecure (csv)\" },\n  { id: \"truekeycsv\", name: \"True Key (csv)\" },\n  { id: \"passwordbossjson\", name: \"Password Boss (json)\" },\n  { id: \"zohovaultcsv\", name: \"Zoho Vault (csv)\" },\n  { id: \"splashidcsv\", name: \"SplashID (csv)\" },\n  { id: \"passworddragonxml\", name: \"Password Dragon (xml)\" },\n  { id: \"padlockcsv\", name: \"Padlock (csv)\" },\n  { id: \"passboltcsv\", name: \"Passbolt (csv)\" },\n  { id: \"clipperzhtml\", name: \"Clipperz (html)\" },\n  { id: \"aviracsv\", name: \"Avira (csv)\" },\n  { id: \"saferpasscsv\", name: \"SaferPass (csv)\" },\n  { id: \"upmcsv\", name: \"Universal Password Manager (csv)\" },\n  { id: \"ascendocsv\", name: \"Ascendo DataVault (csv)\" },\n  { id: \"meldiumcsv\", name: \"Meldium (csv)\" },\n  { id: \"passkeepcsv\", name: \"PassKeep (csv)\" },\n  { id: \"operacsv\", name: \"Opera (csv)\" },\n  { id: \"vivaldicsv\", name: \"Vivaldi (csv)\" },\n  { id: \"gnomejson\", name: \"GNOME Passwords and Keys/Seahorse (json)\" },\n  { id: \"blurcsv\", name: \"Blur (csv)\" },\n  { id: \"passwordagentcsv\", name: \"Password Agent (csv)\" },\n  { id: \"passpackcsv\", name: \"Passpack (csv)\" },\n  { id: \"passmanjson\", name: \"Passman (json)\" },\n  { id: \"avastcsv\", name: \"Avast Passwords (csv)\" },\n  { id: \"avastjson\", name: \"Avast Passwords (json)\" },\n  { id: \"fsecurefsk\", name: \"F-Secure KEY (fsk)\" },\n  { id: \"kasperskytxt\", name: \"Kaspersky Password Manager (txt)\" },\n  { id: \"remembearcsv\", name: \"RememBear (csv)\" },\n  { id: \"passwordwallettxt\", name: \"PasswordWallet (txt)\" },\n  { id: \"mykicsv\", name: \"Myki (csv)\" },\n  { id: \"securesafecsv\", name: \"SecureSafe (csv)\" },\n  { id: \"logmeoncecsv\", name: \"LogMeOnce (csv)\" },\n  { id: \"blackberrycsv\", name: \"BlackBerry Password Keeper (csv)\" },\n  { id: \"buttercupcsv\", name: \"Buttercup (csv)\" },\n  { id: \"codebookcsv\", name: \"Codebook (csv)\" },\n  { id: \"encryptrcsv\", name: \"Encryptr (csv)\" },\n  { id: \"yoticsv\", name: \"Yoti (csv)\" },\n  { id: \"nordpasscsv\", name: \"Nordpass (csv)\" },\n  { id: \"psonojson\", name: \"Psono (json)\" },\n  { id: \"passkyjson\", name: \"Passky (json)\" },\n] as const;\n\nexport type ImportType =\n  | (typeof featuredImportOptions)[number][\"id\"]\n  | (typeof regularImportOptions)[number][\"id\"];\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { PinServiceAbstraction } from \"@bitwarden/auth/common\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { ImportCiphersRequest } from \"@bitwarden/common/models/request/import-ciphers.request\";\nimport { ImportOrganizationCiphersRequest } from \"@bitwarden/common/models/request/import-organization-ciphers.request\";\nimport { KvpRequest } from \"@bitwarden/common/models/request/kvp.request\";\nimport { ErrorResponse } from \"@bitwarden/common/models/response/error.response\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRequest } from \"@bitwarden/common/vault/models/request/cipher.request\";\nimport { CollectionWithIdRequest } from \"@bitwarden/common/vault/models/request/collection-with-id.request\";\nimport { FolderWithIdRequest } from \"@bitwarden/common/vault/models/request/folder-with-id.request\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport {\n  AscendoCsvImporter,\n  AvastCsvImporter,\n  AvastJsonImporter,\n  AviraCsvImporter,\n  BitwardenCsvImporter,\n  BitwardenPasswordProtectedImporter,\n  BlackBerryCsvImporter,\n  BlurCsvImporter,\n  ButtercupCsvImporter,\n  ChromeCsvImporter,\n  ClipperzHtmlImporter,\n  CodebookCsvImporter,\n  DashlaneCsvImporter,\n  DashlaneJsonImporter,\n  EncryptrCsvImporter,\n  EnpassCsvImporter,\n  EnpassJsonImporter,\n  FirefoxCsvImporter,\n  FSecureFskImporter,\n  GnomeJsonImporter,\n  KasperskyTxtImporter,\n  KeePass2XmlImporter,\n  KeePassXCsvImporter,\n  KeeperCsvImporter,\n  // KeeperJsonImporter,\n  LastPassCsvImporter,\n  LogMeOnceCsvImporter,\n  MSecureCsvImporter,\n  MeldiumCsvImporter,\n  MykiCsvImporter,\n  NordPassCsvImporter,\n  OnePassword1PifImporter,\n  OnePassword1PuxImporter,\n  OnePasswordMacCsvImporter,\n  OnePasswordWinCsvImporter,\n  PadlockCsvImporter,\n  PassKeepCsvImporter,\n  PasskyJsonImporter,\n  PassmanJsonImporter,\n  PasspackCsvImporter,\n  PasswordAgentCsvImporter,\n  PasswordBossJsonImporter,\n  PasswordDragonXmlImporter,\n  PasswordSafeXmlImporter,\n  PasswordWalletTxtImporter,\n  ProtonPassJsonImporter,\n  PsonoJsonImporter,\n  RememBearCsvImporter,\n  RoboFormCsvImporter,\n  SafariCsvImporter,\n  SafeInCloudXmlImporter,\n  SaferPassCsvImporter,\n  SecureSafeCsvImporter,\n  SplashIdCsvImporter,\n  StickyPasswordXmlImporter,\n  TrueKeyCsvImporter,\n  UpmCsvImporter,\n  YotiCsvImporter,\n  ZohoVaultCsvImporter,\n} from \"../importers\";\nimport { Importer } from \"../importers/importer\";\nimport {\n  featuredImportOptions,\n  ImportOption,\n  ImportType,\n  regularImportOptions,\n} from \"../models/import-options\";\nimport { ImportResult } from \"../models/import-result\";\nimport { ImportApiServiceAbstraction } from \"../services/import-api.service.abstraction\";\nimport { ImportServiceAbstraction } from \"../services/import.service.abstraction\";\n\nexport class ImportService implements ImportServiceAbstraction {\n  featuredImportOptions = featuredImportOptions as readonly ImportOption[];\n\n  regularImportOptions = regularImportOptions as readonly ImportOption[];\n\n  constructor(\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private importApiService: ImportApiServiceAbstraction,\n    private i18nService: I18nService,\n    private collectionService: CollectionService,\n    private cryptoService: CryptoService,\n    private pinService: PinServiceAbstraction,\n    private accountService: AccountService,\n  ) {}\n\n  getImportOptions(): ImportOption[] {\n    return this.featuredImportOptions.concat(this.regularImportOptions);\n  }\n\n  async import(\n    importer: Importer,\n    fileContents: string,\n    organizationId: string = null,\n    selectedImportTarget: FolderView | CollectionView = null,\n    canAccessImportExport: boolean,\n  ): Promise<ImportResult> {\n    let importResult: ImportResult;\n    try {\n      importResult = await importer.parse(fileContents);\n    } catch (error) {\n      if (error instanceof SyntaxError) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n      throw error;\n    }\n\n    if (!importResult.success) {\n      if (!Utils.isNullOrWhitespace(importResult.errorMessage)) {\n        throw new Error(importResult.errorMessage);\n      }\n      throw new Error(this.i18nService.t(\"importFormatError\"));\n    }\n\n    if (importResult.folders.length === 0 && importResult.ciphers.length === 0) {\n      throw new Error(this.i18nService.t(\"importNothingError\"));\n    }\n\n    if (importResult.ciphers.length > 0) {\n      const halfway = Math.floor(importResult.ciphers.length / 2);\n      const last = importResult.ciphers.length - 1;\n\n      if (\n        this.badData(importResult.ciphers[0]) &&\n        this.badData(importResult.ciphers[halfway]) &&\n        this.badData(importResult.ciphers[last])\n      ) {\n        throw new Error(this.i18nService.t(\"importFormatError\"));\n      }\n    }\n\n    if (organizationId && !selectedImportTarget && !canAccessImportExport) {\n      const hasUnassignedCollections =\n        importResult.collectionRelationships.length < importResult.ciphers.length;\n      if (hasUnassignedCollections) {\n        throw new Error(this.i18nService.t(\"importUnassignedItemsError\"));\n      }\n    }\n\n    try {\n      await this.setImportTarget(importResult, organizationId, selectedImportTarget);\n      if (organizationId != null) {\n        await this.handleOrganizationalImport(importResult, organizationId);\n      } else {\n        await this.handleIndividualImport(importResult);\n      }\n    } catch (error) {\n      const errorResponse = new ErrorResponse(error, 400);\n      throw this.handleServerError(errorResponse, importResult);\n    }\n    return importResult;\n  }\n\n  getImporter(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n    organizationId: string = null,\n  ): Importer {\n    if (promptForPassword_callback == null) {\n      return null;\n    }\n\n    const importer = this.getImporterInstance(format, promptForPassword_callback);\n    if (importer == null) {\n      return null;\n    }\n    importer.organizationId = organizationId;\n    return importer;\n  }\n\n  private getImporterInstance(\n    format: ImportType | \"bitwardenpasswordprotected\",\n    promptForPassword_callback: () => Promise<string>,\n  ) {\n    if (format == null) {\n      return null;\n    }\n\n    switch (format) {\n      case \"bitwardencsv\":\n        return new BitwardenCsvImporter();\n      case \"bitwardenjson\":\n      case \"bitwardenpasswordprotected\":\n        return new BitwardenPasswordProtectedImporter(\n          this.cryptoService,\n          this.i18nService,\n          this.cipherService,\n          this.pinService,\n          this.accountService,\n          promptForPassword_callback,\n        );\n      case \"lastpasscsv\":\n      case \"passboltcsv\":\n        return new LastPassCsvImporter();\n      case \"keepassxcsv\":\n        return new KeePassXCsvImporter();\n      case \"aviracsv\":\n        return new AviraCsvImporter();\n      case \"blurcsv\":\n        return new BlurCsvImporter();\n      case \"safeincloudxml\":\n        return new SafeInCloudXmlImporter();\n      case \"padlockcsv\":\n        return new PadlockCsvImporter();\n      case \"keepass2xml\":\n        return new KeePass2XmlImporter();\n      case \"chromecsv\":\n      case \"operacsv\":\n      case \"vivaldicsv\":\n        return new ChromeCsvImporter();\n      case \"firefoxcsv\":\n        return new FirefoxCsvImporter();\n      case \"upmcsv\":\n        return new UpmCsvImporter();\n      case \"saferpasscsv\":\n        return new SaferPassCsvImporter();\n      case \"safaricsv\":\n        return new SafariCsvImporter();\n      case \"meldiumcsv\":\n        return new MeldiumCsvImporter();\n      case \"1password1pif\":\n        return new OnePassword1PifImporter();\n      case \"1password1pux\":\n        return new OnePassword1PuxImporter();\n      case \"1passwordwincsv\":\n        return new OnePasswordWinCsvImporter();\n      case \"1passwordmaccsv\":\n        return new OnePasswordMacCsvImporter();\n      case \"keepercsv\":\n        return new KeeperCsvImporter();\n      // case \"keeperjson\":\n      //   return new KeeperJsonImporter();\n      case \"passworddragonxml\":\n        return new PasswordDragonXmlImporter();\n      case \"enpasscsv\":\n        return new EnpassCsvImporter();\n      case \"enpassjson\":\n        return new EnpassJsonImporter();\n      case \"pwsafexml\":\n        return new PasswordSafeXmlImporter();\n      case \"dashlanecsv\":\n        return new DashlaneCsvImporter();\n      case \"dashlanejson\":\n        return new DashlaneJsonImporter();\n      case \"msecurecsv\":\n        return new MSecureCsvImporter();\n      case \"stickypasswordxml\":\n        return new StickyPasswordXmlImporter();\n      case \"truekeycsv\":\n        return new TrueKeyCsvImporter();\n      case \"clipperzhtml\":\n        return new ClipperzHtmlImporter();\n      case \"roboformcsv\":\n        return new RoboFormCsvImporter();\n      case \"ascendocsv\":\n        return new AscendoCsvImporter();\n      case \"passwordbossjson\":\n        return new PasswordBossJsonImporter();\n      case \"zohovaultcsv\":\n        return new ZohoVaultCsvImporter();\n      case \"splashidcsv\":\n        return new SplashIdCsvImporter();\n      case \"passkeepcsv\":\n        return new PassKeepCsvImporter();\n      case \"gnomejson\":\n        return new GnomeJsonImporter();\n      case \"passwordagentcsv\":\n        return new PasswordAgentCsvImporter();\n      case \"passpackcsv\":\n        return new PasspackCsvImporter();\n      case \"passmanjson\":\n        return new PassmanJsonImporter();\n      case \"avastcsv\":\n        return new AvastCsvImporter();\n      case \"avastjson\":\n        return new AvastJsonImporter();\n      case \"fsecurefsk\":\n        return new FSecureFskImporter();\n      case \"kasperskytxt\":\n        return new KasperskyTxtImporter();\n      case \"remembearcsv\":\n        return new RememBearCsvImporter();\n      case \"passwordwallettxt\":\n        return new PasswordWalletTxtImporter();\n      case \"mykicsv\":\n        return new MykiCsvImporter();\n      case \"securesafecsv\":\n        return new SecureSafeCsvImporter();\n      case \"logmeoncecsv\":\n        return new LogMeOnceCsvImporter();\n      case \"blackberrycsv\":\n        return new BlackBerryCsvImporter();\n      case \"buttercupcsv\":\n        return new ButtercupCsvImporter();\n      case \"codebookcsv\":\n        return new CodebookCsvImporter();\n      case \"encryptrcsv\":\n        return new EncryptrCsvImporter();\n      case \"yoticsv\":\n        return new YotiCsvImporter();\n      case \"nordpasscsv\":\n        return new NordPassCsvImporter();\n      case \"psonojson\":\n        return new PsonoJsonImporter();\n      case \"passkyjson\":\n        return new PasskyJsonImporter();\n      case \"protonpass\":\n        return new ProtonPassJsonImporter(this.i18nService);\n      default:\n        return null;\n    }\n  }\n\n  private async handleIndividualImport(importResult: ImportResult) {\n    const request = new ImportCiphersRequest();\n    const activeUserId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n    );\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      const c = await this.cipherService.encrypt(importResult.ciphers[i], activeUserId);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.folders != null) {\n      for (let i = 0; i < importResult.folders.length; i++) {\n        const f = await this.folderService.encrypt(importResult.folders[i]);\n        request.folders.push(new FolderWithIdRequest(f));\n      }\n    }\n    if (importResult.folderRelationships != null) {\n      importResult.folderRelationships.forEach((r) =>\n        request.folderRelationships.push(new KvpRequest(r[0], r[1])),\n      );\n    }\n    return await this.importApiService.postImportCiphers(request);\n  }\n\n  private async handleOrganizationalImport(importResult: ImportResult, organizationId: string) {\n    const request = new ImportOrganizationCiphersRequest();\n    const activeUserId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n    );\n    for (let i = 0; i < importResult.ciphers.length; i++) {\n      importResult.ciphers[i].organizationId = organizationId;\n      const c = await this.cipherService.encrypt(importResult.ciphers[i], activeUserId);\n      request.ciphers.push(new CipherRequest(c));\n    }\n    if (importResult.collections != null) {\n      for (let i = 0; i < importResult.collections.length; i++) {\n        importResult.collections[i].organizationId = organizationId;\n        const c = await this.collectionService.encrypt(importResult.collections[i]);\n        request.collections.push(new CollectionWithIdRequest(c));\n      }\n    }\n    if (importResult.collectionRelationships != null) {\n      importResult.collectionRelationships.forEach((r) =>\n        request.collectionRelationships.push(new KvpRequest(r[0], r[1])),\n      );\n    }\n    return await this.importApiService.postImportOrganizationCiphers(organizationId, request);\n  }\n\n  private badData(c: CipherView) {\n    return (\n      (c.name == null || c.name === \"--\") &&\n      c.type === CipherType.Login &&\n      c.login != null &&\n      Utils.isNullOrWhitespace(c.login.password)\n    );\n  }\n\n  private handleServerError(errorResponse: ErrorResponse, importResult: ImportResult): Error {\n    if (errorResponse.validationErrors == null) {\n      return new Error(errorResponse.message);\n    }\n\n    let errorMessage = \"\";\n\n    Object.entries(errorResponse.validationErrors).forEach(([key, value], index) => {\n      let item;\n      let itemType;\n      const i = Number(key.match(/[0-9]+/)[0]);\n\n      switch (key.match(/^\\w+/)[0]) {\n        case \"Ciphers\":\n          item = importResult.ciphers[i];\n          itemType = CipherType[item.type];\n          break;\n        case \"Folders\":\n          item = importResult.folders[i];\n          itemType = \"Folder\";\n          break;\n        case \"Collections\":\n          item = importResult.collections[i];\n          itemType = \"Collection\";\n          break;\n        default:\n          return;\n      }\n\n      if (index > 0) {\n        errorMessage += \"\\n\\n\";\n      }\n\n      if (itemType !== \"Folder\" && itemType !== \"Collection\") {\n        errorMessage += \"[\" + (i + 1) + \"] \";\n      }\n\n      errorMessage += \"[\" + itemType + '] \"' + item.name + '\": ' + value;\n    });\n\n    return new Error(errorMessage);\n  }\n\n  private async setImportTarget(\n    importResult: ImportResult,\n    organizationId: string,\n    importTarget: FolderView | CollectionView,\n  ) {\n    if (!importTarget) {\n      return;\n    }\n\n    if (organizationId) {\n      if (!(importTarget instanceof CollectionView)) {\n        throw new Error(this.i18nService.t(\"errorAssigningTargetCollection\"));\n      }\n\n      const noCollectionRelationShips: [number, number][] = [];\n      importResult.ciphers.forEach((c, index) => {\n        if (\n          !Array.isArray(importResult.collectionRelationships) ||\n          !importResult.collectionRelationships.some(([cipherPos]) => cipherPos === index)\n        ) {\n          noCollectionRelationShips.push([index, 0]);\n        }\n      });\n\n      const collections: CollectionView[] = [...importResult.collections];\n      importResult.collections = [importTarget as CollectionView];\n      collections.map((x) => {\n        const f = new CollectionView();\n        f.name = `${importTarget.name}/${x.name}`;\n        importResult.collections.push(f);\n      });\n\n      const relationships: [number, number][] = [...importResult.collectionRelationships];\n      importResult.collectionRelationships = [...noCollectionRelationShips];\n      relationships.map((x) => {\n        importResult.collectionRelationships.push([x[0], x[1] + 1]);\n      });\n\n      return;\n    }\n\n    if (!(importTarget instanceof FolderView)) {\n      throw new Error(this.i18nService.t(\"errorAssigningTargetFolder\"));\n    }\n\n    const noFolderRelationShips: [number, number][] = [];\n    importResult.ciphers.forEach((c, index) => {\n      if (Utils.isNullOrEmpty(c.folderId)) {\n        c.folderId = importTarget.id;\n        noFolderRelationShips.push([index, 0]);\n      }\n    });\n\n    const folders: FolderView[] = [...importResult.folders];\n    importResult.folders = [importTarget as FolderView];\n    folders.map((x) => {\n      const newFolderName = `${importTarget.name}/${x.name}`;\n      const f = new FolderView();\n      f.name = newFolderName;\n      importResult.folders.push(f);\n    });\n\n    const relationships: [number, number][] = [...importResult.folderRelationships];\n    importResult.folderRelationships = [...noFolderRelationShips];\n    relationships.map((x) => {\n      importResult.folderRelationships.push([x[0], x[1] + 1]);\n    });\n  }\n}\n","export class ExportHelper {\n  static getFileName(prefix: string = null, extension = \"csv\"): string {\n    const now = new Date();\n    const dateString =\n      now.getFullYear() +\n      \"\" +\n      this.padNumber(now.getMonth() + 1, 2) +\n      \"\" +\n      this.padNumber(now.getDate(), 2) +\n      this.padNumber(now.getHours(), 2) +\n      \"\" +\n      this.padNumber(now.getMinutes(), 2) +\n      this.padNumber(now.getSeconds(), 2);\n\n    return \"bitwarden\" + (prefix ? \"_\" + prefix : \"\") + \"_export_\" + dateString + \".\" + extension;\n  }\n\n  private static padNumber(num: number, width: number, padCharacter = \"0\"): string {\n    const numString = num.toString();\n    return numString.length >= width\n      ? numString\n      : new Array(width - numString.length + 1).join(padCharacter) + numString;\n  }\n}\n","import { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { ExportHelper } from \"./export-helper\";\nimport { IndividualVaultExportServiceAbstraction } from \"./individual-vault-export.service.abstraction\";\nimport { OrganizationVaultExportServiceAbstraction } from \"./org-vault-export.service.abstraction\";\nimport { ExportFormat, VaultExportServiceAbstraction } from \"./vault-export.service.abstraction\";\n\nexport class VaultExportService implements VaultExportServiceAbstraction {\n  constructor(\n    private individualVaultExportService: IndividualVaultExportServiceAbstraction,\n    private organizationVaultExportService: OrganizationVaultExportServiceAbstraction,\n  ) {}\n\n  async getExport(format: ExportFormat = \"csv\", password: string): Promise<string> {\n    if (!Utils.isNullOrWhitespace(password)) {\n      if (format == \"csv\") {\n        throw new Error(\"CSV does not support password protected export\");\n      }\n\n      return this.individualVaultExportService.getPasswordProtectedExport(password);\n    }\n    return this.individualVaultExportService.getExport(format);\n  }\n\n  async getOrganizationExport(\n    organizationId: string,\n    format: ExportFormat,\n    password: string,\n    onlyManagedCollections = false,\n  ): Promise<string> {\n    if (!Utils.isNullOrWhitespace(password)) {\n      if (format == \"csv\") {\n        throw new Error(\"CSV does not support password protected export\");\n      }\n\n      return this.organizationVaultExportService.getPasswordProtectedExport(\n        organizationId,\n        password,\n        onlyManagedCollections,\n      );\n    }\n\n    return this.organizationVaultExportService.getOrganizationExport(\n      organizationId,\n      format,\n      onlyManagedCollections,\n    );\n  }\n\n  getFileName(prefix: string = null, extension = \"csv\"): string {\n    return ExportHelper.getFileName(prefix, extension);\n  }\n}\n","import { PinServiceAbstraction } from \"@bitwarden/auth/common\";\nimport { KdfConfigService } from \"@bitwarden/common/auth/abstractions/kdf-config.service\";\nimport { KdfConfig } from \"@bitwarden/common/auth/models/domain/kdf-config\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { KdfType } from \"@bitwarden/common/platform/enums\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { BitwardenCsvExportType, BitwardenPasswordProtectedFileFormat } from \"../types\";\nexport class BaseVaultExportService {\n  constructor(\n    protected pinService: PinServiceAbstraction,\n    protected cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private kdfConfigService: KdfConfigService,\n  ) {}\n\n  protected async buildPasswordExport(clearText: string, password: string): Promise<string> {\n    const kdfConfig: KdfConfig = await this.kdfConfigService.getKdfConfig();\n\n    const salt = Utils.fromBufferToB64(await this.cryptoFunctionService.randomBytes(16));\n    const key = await this.pinService.makePinKey(password, salt, kdfConfig);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), key);\n    const encText = await this.cryptoService.encrypt(clearText, key);\n\n    const jsonDoc: BitwardenPasswordProtectedFileFormat = {\n      encrypted: true,\n      passwordProtected: true,\n      salt: salt,\n      kdfType: kdfConfig.kdfType,\n      kdfIterations: kdfConfig.iterations,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      data: encText.encryptedString,\n    };\n\n    if (kdfConfig.kdfType === KdfType.Argon2id) {\n      jsonDoc.kdfMemory = kdfConfig.memory;\n      jsonDoc.kdfParallelism = kdfConfig.parallelism;\n    }\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  protected buildCommonCipher(\n    cipher: BitwardenCsvExportType,\n    c: CipherView,\n  ): BitwardenCsvExportType {\n    cipher.type = null;\n    cipher.name = c.name;\n    cipher.notes = c.notes;\n    cipher.fields = null;\n    cipher.reprompt = c.reprompt;\n    // Login props\n    cipher.login_uri = null;\n    cipher.login_username = null;\n    cipher.login_password = null;\n    cipher.login_totp = null;\n\n    if (c.fields) {\n      c.fields.forEach((f) => {\n        if (!cipher.fields) {\n          cipher.fields = \"\";\n        } else {\n          cipher.fields += \"\\n\";\n        }\n\n        cipher.fields += (f.name || \"\") + \": \" + f.value;\n      });\n    }\n\n    switch (c.type) {\n      case CipherType.Login:\n        cipher.type = \"login\";\n        cipher.login_username = c.login.username;\n        cipher.login_password = c.login.password;\n        cipher.login_totp = c.login.totp;\n\n        if (c.login.uris) {\n          cipher.login_uri = [];\n          c.login.uris.forEach((u) => {\n            cipher.login_uri.push(u.uri);\n          });\n        }\n        break;\n      case CipherType.SecureNote:\n        cipher.type = \"note\";\n        break;\n      default:\n        return;\n    }\n\n    return cipher;\n  }\n}\n","import * as papa from \"papaparse\";\nimport { firstValueFrom, map } from \"rxjs\";\n\nimport { PinServiceAbstraction } from \"@bitwarden/auth/common\";\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { KdfConfigService } from \"@bitwarden/common/auth/abstractions/kdf-config.service\";\nimport { CipherWithIdExport, CollectionWithIdExport } from \"@bitwarden/common/models/export\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { OrganizationId } from \"@bitwarden/common/types/guid\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherData } from \"@bitwarden/common/vault/models/data/cipher.data\";\nimport { CollectionData } from \"@bitwarden/common/vault/models/data/collection.data\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { Collection } from \"@bitwarden/common/vault/models/domain/collection\";\nimport { CollectionDetailsResponse } from \"@bitwarden/common/vault/models/response/collection.response\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\n\nimport {\n  BitwardenCsvOrgExportType,\n  BitwardenEncryptedOrgJsonExport,\n  BitwardenUnEncryptedOrgJsonExport,\n} from \"../types\";\n\nimport { BaseVaultExportService } from \"./base-vault-export.service\";\nimport { OrganizationVaultExportServiceAbstraction } from \"./org-vault-export.service.abstraction\";\nimport { ExportFormat } from \"./vault-export.service.abstraction\";\n\nexport class OrganizationVaultExportService\n  extends BaseVaultExportService\n  implements OrganizationVaultExportServiceAbstraction\n{\n  constructor(\n    private cipherService: CipherService,\n    private apiService: ApiService,\n    pinService: PinServiceAbstraction,\n    cryptoService: CryptoService,\n    cryptoFunctionService: CryptoFunctionService,\n    private collectionService: CollectionService,\n    kdfConfigService: KdfConfigService,\n    private accountService: AccountService,\n  ) {\n    super(pinService, cryptoService, cryptoFunctionService, kdfConfigService);\n  }\n\n  async getPasswordProtectedExport(\n    organizationId: string,\n    password: string,\n    onlyManagedCollections: boolean,\n  ): Promise<string> {\n    const clearText = await this.getOrganizationExport(\n      organizationId,\n      \"json\",\n      onlyManagedCollections,\n    );\n\n    return this.buildPasswordExport(clearText, password);\n  }\n\n  async getOrganizationExport(\n    organizationId: string,\n    format: ExportFormat = \"csv\",\n    onlyManagedCollections: boolean,\n  ): Promise<string> {\n    if (Utils.isNullOrWhitespace(organizationId)) {\n      throw new Error(\"OrganizationId must be set\");\n    }\n\n    if (format === \"encrypted_json\") {\n      return onlyManagedCollections\n        ? this.getEncryptedManagedExport(organizationId)\n        : this.getOrganizationEncryptedExport(organizationId);\n    }\n\n    return onlyManagedCollections\n      ? this.getDecryptedManagedExport(organizationId, format)\n      : this.getOrganizationDecryptedExport(organizationId, format);\n  }\n\n  private async getOrganizationDecryptedExport(\n    organizationId: string,\n    format: \"json\" | \"csv\",\n  ): Promise<string> {\n    const decCollections: CollectionView[] = [];\n    const decCiphers: CipherView[] = [];\n    const promises = [];\n    const activeUserId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n    );\n\n    promises.push(\n      this.apiService.getOrganizationExport(organizationId).then((exportData) => {\n        const exportPromises: any = [];\n        if (exportData != null) {\n          if (exportData.collections != null && exportData.collections.length > 0) {\n            exportData.collections.forEach((c) => {\n              const collection = new Collection(new CollectionData(c as CollectionDetailsResponse));\n              exportPromises.push(\n                firstValueFrom(this.cryptoService.activeUserOrgKeys$)\n                  .then((keys) => collection.decrypt(keys[organizationId as OrganizationId]))\n                  .then((decCol) => {\n                    decCollections.push(decCol);\n                  }),\n              );\n            });\n          }\n          if (exportData.ciphers != null && exportData.ciphers.length > 0) {\n            exportData.ciphers\n              .filter((c) => c.deletedDate === null)\n              .forEach(async (c) => {\n                const cipher = new Cipher(new CipherData(c));\n                exportPromises.push(\n                  this.cipherService\n                    .getKeyForCipherKeyDecryption(cipher, activeUserId)\n                    .then((key) => cipher.decrypt(key))\n                    .then((decCipher) => {\n                      decCiphers.push(decCipher);\n                    }),\n                );\n              });\n          }\n        }\n        return Promise.all(exportPromises);\n      }),\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      return this.buildCsvExport(decCollections, decCiphers);\n    }\n    return this.buildJsonExport(decCollections, decCiphers);\n  }\n\n  private async getOrganizationEncryptedExport(organizationId: string): Promise<string> {\n    const collections: Collection[] = [];\n    const ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.apiService.getCollections(organizationId).then((c) => {\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data.forEach((r) => {\n            const collection = new Collection(new CollectionData(r as CollectionDetailsResponse));\n            collections.push(collection);\n          });\n        }\n      }),\n    );\n\n    promises.push(\n      this.apiService.getCiphersOrganization(organizationId).then((c) => {\n        if (c != null && c.data != null && c.data.length > 0) {\n          c.data\n            .filter((item) => item.deletedDate === null)\n            .forEach((item) => {\n              const cipher = new Cipher(new CipherData(item));\n              ciphers.push(cipher);\n            });\n        }\n      }),\n    );\n\n    await Promise.all(promises);\n\n    return this.BuildEncryptedExport(organizationId, collections, ciphers);\n  }\n\n  private async getDecryptedManagedExport(\n    organizationId: string,\n    format: \"json\" | \"csv\",\n  ): Promise<string> {\n    let decCiphers: CipherView[] = [];\n    let allDecCiphers: CipherView[] = [];\n    let decCollections: CollectionView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.collectionService.getAllDecrypted().then(async (collections) => {\n        decCollections = collections.filter((c) => c.organizationId == organizationId && c.manage);\n      }),\n    );\n\n    promises.push(\n      this.cipherService.getAllDecrypted().then((ciphers) => {\n        allDecCiphers = ciphers;\n      }),\n    );\n    await Promise.all(promises);\n\n    decCiphers = allDecCiphers.filter(\n      (f) =>\n        f.deletedDate == null &&\n        f.organizationId == organizationId &&\n        decCollections.some((dC) => f.collectionIds.some((cId) => dC.id === cId)),\n    );\n\n    if (format === \"csv\") {\n      return this.buildCsvExport(decCollections, decCiphers);\n    }\n    return this.buildJsonExport(decCollections, decCiphers);\n  }\n\n  private async getEncryptedManagedExport(organizationId: string): Promise<string> {\n    let encCiphers: Cipher[] = [];\n    let allCiphers: Cipher[] = [];\n    let encCollections: Collection[] = [];\n    const promises = [];\n\n    promises.push(\n      this.collectionService.getAll().then((collections) => {\n        encCollections = collections.filter((c) => c.organizationId == organizationId && c.manage);\n      }),\n    );\n\n    promises.push(\n      this.cipherService.getAll().then((ciphers) => {\n        allCiphers = ciphers;\n      }),\n    );\n\n    await Promise.all(promises);\n\n    encCiphers = allCiphers.filter(\n      (f) =>\n        f.deletedDate == null &&\n        f.organizationId == organizationId &&\n        encCollections.some((eC) => f.collectionIds.some((cId) => eC.id === cId)),\n    );\n\n    return this.BuildEncryptedExport(organizationId, encCollections, encCiphers);\n  }\n\n  private async BuildEncryptedExport(\n    organizationId: string,\n    collections: Collection[],\n    ciphers: Cipher[],\n  ): Promise<string> {\n    const orgKey = await this.cryptoService.getOrgKey(organizationId);\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid(), orgKey);\n\n    const jsonDoc: BitwardenEncryptedOrgJsonExport = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      collections: [],\n      items: [],\n    };\n\n    collections.forEach((c) => {\n      const collection = new CollectionWithIdExport();\n      collection.build(c);\n      jsonDoc.collections.push(collection);\n    });\n\n    ciphers.forEach((c) => {\n      const cipher = new CipherWithIdExport();\n      cipher.build(c);\n      jsonDoc.items.push(cipher);\n    });\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private buildCsvExport(decCollections: CollectionView[], decCiphers: CipherView[]): string {\n    const collectionsMap = new Map<string, CollectionView>();\n    decCollections.forEach((c) => {\n      collectionsMap.set(c.id, c);\n    });\n\n    const exportCiphers: BitwardenCsvOrgExportType[] = [];\n    decCiphers.forEach((c) => {\n      // only export logins and secure notes\n      if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n        return;\n      }\n\n      const cipher = {} as BitwardenCsvOrgExportType;\n      cipher.collections = [];\n      if (c.collectionIds != null) {\n        cipher.collections = c.collectionIds\n          .filter((id) => collectionsMap.has(id))\n          .map((id) => collectionsMap.get(id).name);\n      }\n      this.buildCommonCipher(cipher, c);\n      exportCiphers.push(cipher);\n    });\n\n    return papa.unparse(exportCiphers);\n  }\n\n  private buildJsonExport(decCollections: CollectionView[], decCiphers: CipherView[]): string {\n    const jsonDoc: BitwardenUnEncryptedOrgJsonExport = {\n      encrypted: false,\n      collections: [],\n      items: [],\n    };\n\n    decCollections.forEach((c) => {\n      const collection = new CollectionWithIdExport();\n      collection.build(c);\n      jsonDoc.collections.push(collection);\n    });\n\n    decCiphers.forEach((c) => {\n      const cipher = new CipherWithIdExport();\n      cipher.build(c);\n      jsonDoc.items.push(cipher);\n    });\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n}\n","import * as papa from \"papaparse\";\n\nimport { PinServiceAbstraction } from \"@bitwarden/auth/common\";\nimport { KdfConfigService } from \"@bitwarden/common/auth/abstractions/kdf-config.service\";\nimport { CipherWithIdExport, FolderWithIdExport } from \"@bitwarden/common/models/export\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { Cipher } from \"@bitwarden/common/vault/models/domain/cipher\";\nimport { Folder } from \"@bitwarden/common/vault/models/domain/folder\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\n\nimport {\n  BitwardenCsvIndividualExportType,\n  BitwardenEncryptedIndividualJsonExport,\n  BitwardenUnEncryptedIndividualJsonExport,\n} from \"../types\";\n\nimport { BaseVaultExportService } from \"./base-vault-export.service\";\nimport { IndividualVaultExportServiceAbstraction } from \"./individual-vault-export.service.abstraction\";\nimport { ExportFormat } from \"./vault-export.service.abstraction\";\n\nexport class IndividualVaultExportService\n  extends BaseVaultExportService\n  implements IndividualVaultExportServiceAbstraction\n{\n  constructor(\n    private folderService: FolderService,\n    private cipherService: CipherService,\n    pinService: PinServiceAbstraction,\n    cryptoService: CryptoService,\n    cryptoFunctionService: CryptoFunctionService,\n    kdfConfigService: KdfConfigService,\n  ) {\n    super(pinService, cryptoService, cryptoFunctionService, kdfConfigService);\n  }\n\n  async getExport(format: ExportFormat = \"csv\"): Promise<string> {\n    if (format === \"encrypted_json\") {\n      return this.getEncryptedExport();\n    }\n    return this.getDecryptedExport(format);\n  }\n\n  async getPasswordProtectedExport(password: string): Promise<string> {\n    const clearText = await this.getExport(\"json\");\n    return this.buildPasswordExport(clearText, password);\n  }\n\n  private async getDecryptedExport(format: \"json\" | \"csv\"): Promise<string> {\n    let decFolders: FolderView[] = [];\n    let decCiphers: CipherView[] = [];\n    const promises = [];\n\n    promises.push(\n      this.folderService.getAllDecryptedFromState().then((folders) => {\n        decFolders = folders;\n      }),\n    );\n\n    promises.push(\n      this.cipherService.getAllDecrypted().then((ciphers) => {\n        decCiphers = ciphers.filter((f) => f.deletedDate == null);\n      }),\n    );\n\n    await Promise.all(promises);\n\n    if (format === \"csv\") {\n      return this.buildCsvExport(decFolders, decCiphers);\n    }\n\n    return this.buildJsonExport(decFolders, decCiphers);\n  }\n\n  private async getEncryptedExport(): Promise<string> {\n    let folders: Folder[] = [];\n    let ciphers: Cipher[] = [];\n    const promises = [];\n\n    promises.push(\n      this.folderService.getAllFromState().then((f) => {\n        folders = f;\n      }),\n    );\n\n    promises.push(\n      this.cipherService.getAll().then((c) => {\n        ciphers = c.filter((f) => f.deletedDate == null);\n      }),\n    );\n\n    await Promise.all(promises);\n\n    const encKeyValidation = await this.cryptoService.encrypt(Utils.newGuid());\n\n    const jsonDoc: BitwardenEncryptedIndividualJsonExport = {\n      encrypted: true,\n      encKeyValidation_DO_NOT_EDIT: encKeyValidation.encryptedString,\n      folders: [],\n      items: [],\n    };\n\n    folders.forEach((f) => {\n      if (f.id == null) {\n        return;\n      }\n      const folder = new FolderWithIdExport();\n      folder.build(f);\n      jsonDoc.folders.push(folder);\n    });\n\n    ciphers.forEach((c) => {\n      if (c.organizationId != null) {\n        return;\n      }\n      const cipher = new CipherWithIdExport();\n      cipher.build(c);\n      cipher.collectionIds = null;\n      jsonDoc.items.push(cipher);\n    });\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n\n  private buildCsvExport(decFolders: FolderView[], decCiphers: CipherView[]): string {\n    const foldersMap = new Map<string, FolderView>();\n    decFolders.forEach((f) => {\n      if (f.id != null) {\n        foldersMap.set(f.id, f);\n      }\n    });\n\n    const exportCiphers: BitwardenCsvIndividualExportType[] = [];\n    decCiphers.forEach((c) => {\n      // only export logins and secure notes\n      if (c.type !== CipherType.Login && c.type !== CipherType.SecureNote) {\n        return;\n      }\n      if (c.organizationId != null) {\n        return;\n      }\n\n      const cipher = {} as BitwardenCsvIndividualExportType;\n      cipher.folder =\n        c.folderId != null && foldersMap.has(c.folderId) ? foldersMap.get(c.folderId).name : null;\n      cipher.favorite = c.favorite ? 1 : null;\n      this.buildCommonCipher(cipher, c);\n      exportCiphers.push(cipher);\n    });\n\n    return papa.unparse(exportCiphers);\n  }\n\n  private buildJsonExport(decFolders: FolderView[], decCiphers: CipherView[]): string {\n    const jsonDoc: BitwardenUnEncryptedIndividualJsonExport = {\n      encrypted: false,\n      folders: [],\n      items: [],\n    };\n\n    decFolders.forEach((f) => {\n      if (f.id == null) {\n        return;\n      }\n      const folder = new FolderWithIdExport();\n      folder.build(f);\n      jsonDoc.folders.push(folder);\n    });\n\n    decCiphers.forEach((c) => {\n      if (c.organizationId != null) {\n        return;\n      }\n      const cipher = new CipherWithIdExport();\n      cipher.build(c);\n      cipher.collectionIds = null;\n      jsonDoc.items.push(cipher);\n    });\n\n    return JSON.stringify(jsonDoc, null, \"  \");\n  }\n}\n","import { BrowserApi } from \"../platform/browser/browser-api\";\n\nexport class SafariApp {\n  static sendMessageToApp(command: string, data: any = null, resolveNow = false): Promise<any> {\n    if (!BrowserApi.isSafariApi) {\n      return Promise.resolve(null);\n    }\n    return new Promise((resolve) => {\n      const now = new Date();\n      const messageId =\n        now.getTime().toString() + \"_\" + Math.floor(Math.random() * Number.MAX_SAFE_INTEGER);\n      (browser as any).runtime.sendNativeMessage(\n        \"com.bitwarden.desktop\",\n        {\n          id: messageId,\n          command: command,\n          data: data,\n          responseData: null,\n        },\n        (response: any) => {\n          resolve(response);\n        },\n      );\n    });\n  }\n}\n","import { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\n\nclass BrowserClipboardService {\n  private static consoleLogService: ConsoleLogService = new ConsoleLogService(false);\n\n  /**\n   * Copies the given text to the user's clipboard.\n   *\n   * @param globalContext - The global window context.\n   * @param text - The text to copy.\n   */\n  static async copy(globalContext: Window, text: string) {\n    if (!BrowserClipboardService.isClipboardApiSupported(globalContext, \"writeText\")) {\n      this.useLegacyCopyMethod(globalContext, text);\n      return;\n    }\n\n    try {\n      await globalContext.navigator.clipboard.writeText(text);\n    } catch (error) {\n      BrowserClipboardService.consoleLogService.debug(\n        `Error copying to clipboard using the clipboard API, attempting legacy method: ${error}`,\n      );\n\n      this.useLegacyCopyMethod(globalContext, text);\n    }\n  }\n\n  /**\n   * Reads the user's clipboard and returns the text.\n   *\n   * @param globalContext - The global window context.\n   */\n  static async read(globalContext: Window): Promise<string> {\n    if (!BrowserClipboardService.isClipboardApiSupported(globalContext, \"readText\")) {\n      return this.useLegacyReadMethod(globalContext);\n    }\n\n    try {\n      return await globalContext.navigator.clipboard.readText();\n    } catch (error) {\n      BrowserClipboardService.consoleLogService.debug(\n        `Error reading from clipboard using the clipboard API, attempting legacy method: ${error}`,\n      );\n\n      return this.useLegacyReadMethod(globalContext);\n    }\n  }\n\n  /**\n   * Copies the given text to the user's clipboard using the legacy `execCommand` method. This\n   * method is used as a fallback when the clipboard API is not supported or fails.\n   *\n   * @param globalContext - The global window context.\n   * @param text - The text to copy.\n   */\n  private static useLegacyCopyMethod(globalContext: Window, text: string) {\n    if (!BrowserClipboardService.isLegacyClipboardMethodSupported(globalContext, \"copy\")) {\n      BrowserClipboardService.consoleLogService.warning(\"Legacy copy method not supported\");\n      return;\n    }\n\n    const textareaElement = globalContext.document.createElement(\"textarea\");\n    textareaElement.textContent = !text ? \" \" : text;\n    textareaElement.style.position = \"fixed\";\n    globalContext.document.body.appendChild(textareaElement);\n    textareaElement.select();\n\n    try {\n      globalContext.document.execCommand(\"copy\");\n    } catch (error) {\n      BrowserClipboardService.consoleLogService.warning(`Error writing to clipboard: ${error}`);\n    } finally {\n      globalContext.document.body.removeChild(textareaElement);\n    }\n  }\n\n  /**\n   * Reads the user's clipboard using the legacy `execCommand` method. This method is used as a\n   * fallback when the clipboard API is not supported or fails.\n   *\n   * @param globalContext - The global window context.\n   */\n  private static useLegacyReadMethod(globalContext: Window): string {\n    if (!BrowserClipboardService.isLegacyClipboardMethodSupported(globalContext, \"paste\")) {\n      BrowserClipboardService.consoleLogService.warning(\"Legacy paste method not supported\");\n      return \"\";\n    }\n\n    const textareaElement = globalContext.document.createElement(\"textarea\");\n    textareaElement.style.position = \"fixed\";\n    globalContext.document.body.appendChild(textareaElement);\n    textareaElement.focus();\n\n    try {\n      return globalContext.document.execCommand(\"paste\") ? textareaElement.value : \"\";\n    } catch (error) {\n      BrowserClipboardService.consoleLogService.warning(`Error reading from clipboard: ${error}`);\n    } finally {\n      globalContext.document.body.removeChild(textareaElement);\n    }\n\n    return \"\";\n  }\n\n  /**\n   * Checks if the clipboard API is supported in the current environment.\n   *\n   * @param globalContext - The global window context.\n   * @param method - The clipboard API method to check for support.\n   */\n  private static isClipboardApiSupported(globalContext: Window, method: \"writeText\" | \"readText\") {\n    return \"clipboard\" in globalContext.navigator && method in globalContext.navigator.clipboard;\n  }\n\n  /**\n   * Checks if the legacy clipboard method is supported in the current environment.\n   *\n   * @param globalContext - The global window context.\n   * @param method - The legacy clipboard method to check for support.\n   */\n  private static isLegacyClipboardMethodSupported(globalContext: Window, method: \"copy\" | \"paste\") {\n    return (\n      \"queryCommandSupported\" in globalContext.document &&\n      globalContext.document.queryCommandSupported(method)\n    );\n  }\n}\n\nexport default BrowserClipboardService;\n","import { ExtensionCommand } from \"@bitwarden/common/autofill/constants\";\nimport { ClientType, DeviceType } from \"@bitwarden/common/enums\";\nimport {\n  ClipboardOptions,\n  PlatformUtilsService,\n} from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { SafariApp } from \"../../../browser/safariApp\";\nimport { BrowserApi } from \"../../browser/browser-api\";\nimport { OffscreenDocumentService } from \"../../offscreen-document/abstractions/offscreen-document\";\nimport BrowserClipboardService from \"../browser-clipboard.service\";\n\nexport abstract class BrowserPlatformUtilsService implements PlatformUtilsService {\n  private static deviceCache: DeviceType = null;\n\n  constructor(\n    private clipboardWriteCallback: (clipboardValue: string, clearMs: number) => void,\n    private globalContext: Window | ServiceWorkerGlobalScope,\n    private offscreenDocumentService: OffscreenDocumentService,\n  ) {}\n\n  static getDevice(globalContext: Window | ServiceWorkerGlobalScope): DeviceType {\n    if (this.deviceCache) {\n      return this.deviceCache;\n    }\n\n    if (BrowserPlatformUtilsService.isFirefox()) {\n      this.deviceCache = DeviceType.FirefoxExtension;\n    } else if (BrowserPlatformUtilsService.isOpera(globalContext)) {\n      this.deviceCache = DeviceType.OperaExtension;\n    } else if (BrowserPlatformUtilsService.isEdge()) {\n      this.deviceCache = DeviceType.EdgeExtension;\n    } else if (BrowserPlatformUtilsService.isVivaldi()) {\n      this.deviceCache = DeviceType.VivaldiExtension;\n    } else if (BrowserPlatformUtilsService.isChrome(globalContext)) {\n      this.deviceCache = DeviceType.ChromeExtension;\n    } else if (BrowserPlatformUtilsService.isSafari(globalContext)) {\n      this.deviceCache = DeviceType.SafariExtension;\n    }\n\n    return this.deviceCache;\n  }\n\n  getDevice(): DeviceType {\n    return BrowserPlatformUtilsService.getDevice(this.globalContext);\n  }\n\n  getDeviceString(): string {\n    const device = DeviceType[this.getDevice()].toLowerCase();\n    return device.replace(\"extension\", \"\");\n  }\n\n  getClientType(): ClientType {\n    return ClientType.Browser;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  static isFirefox(): boolean {\n    return (\n      navigator.userAgent.indexOf(\" Firefox/\") !== -1 ||\n      navigator.userAgent.indexOf(\" Gecko/\") !== -1\n    );\n  }\n\n  isFirefox(): boolean {\n    return this.getDevice() === DeviceType.FirefoxExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isChrome(globalContext: Window | ServiceWorkerGlobalScope): boolean {\n    return globalContext.chrome && navigator.userAgent.indexOf(\" Chrome/\") !== -1;\n  }\n\n  isChrome(): boolean {\n    return this.getDevice() === DeviceType.ChromeExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isEdge(): boolean {\n    return navigator.userAgent.indexOf(\" Edg/\") !== -1;\n  }\n\n  isEdge(): boolean {\n    return this.getDevice() === DeviceType.EdgeExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isOpera(globalContext: Window | ServiceWorkerGlobalScope): boolean {\n    return (\n      !!globalContext.opr?.addons ||\n      !!globalContext.opera ||\n      navigator.userAgent.indexOf(\" OPR/\") >= 0\n    );\n  }\n\n  isOpera(): boolean {\n    return this.getDevice() === DeviceType.OperaExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  private static isVivaldi(): boolean {\n    return navigator.userAgent.indexOf(\" Vivaldi/\") !== -1;\n  }\n\n  isVivaldi(): boolean {\n    return this.getDevice() === DeviceType.VivaldiExtension;\n  }\n\n  /**\n   * @deprecated Do not call this directly, use getDevice() instead\n   */\n  static isSafari(globalContext: Window | ServiceWorkerGlobalScope): boolean {\n    // Opera masquerades as Safari, so make sure we're not there first\n    return (\n      !BrowserPlatformUtilsService.isOpera(globalContext) &&\n      navigator.userAgent.indexOf(\" Safari/\") !== -1\n    );\n  }\n\n  private static safariVersion(): string {\n    return navigator.userAgent.match(\"Version/([0-9.]*)\")?.[1];\n  }\n\n  /**\n   * Safari previous to version 16.1 had a bug which caused artifacts on hover in large extension popups.\n   * https://bugs.webkit.org/show_bug.cgi?id=218704\n   */\n  static shouldApplySafariHeightFix(globalContext: Window | ServiceWorkerGlobalScope): boolean {\n    if (BrowserPlatformUtilsService.getDevice(globalContext) !== DeviceType.SafariExtension) {\n      return false;\n    }\n\n    const version = BrowserPlatformUtilsService.safariVersion();\n    const parts = version?.split(\".\")?.map((v) => Number(v));\n    return parts?.[0] < 16 || (parts?.[0] === 16 && parts?.[1] === 0);\n  }\n\n  isSafari(): boolean {\n    return this.getDevice() === DeviceType.SafariExtension;\n  }\n\n  isIE(): boolean {\n    return false;\n  }\n\n  isMacAppStore(): boolean {\n    return false;\n  }\n\n  /**\n   * Identifies if the vault popup is currently open. This is done by sending a\n   * message to the popup and waiting for a response. If a response is received,\n   * the view is open.\n   */\n  async isViewOpen(): Promise<boolean> {\n    if (this.isSafari()) {\n      // Query views on safari since chrome.runtime.sendMessage does not timeout and will hang.\n      return BrowserApi.isPopupOpen();\n    }\n    return Boolean(await BrowserApi.sendMessageWithResponse(\"checkVaultPopupHeartbeat\"));\n  }\n\n  lockTimeout(): number {\n    return null;\n  }\n\n  launchUri(uri: string, options?: any): void {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.createNewTab(uri, options && options.extensionPage === true);\n  }\n\n  getApplicationVersion(): Promise<string> {\n    const manifest = chrome.runtime.getManifest();\n    return Promise.resolve(manifest.version_name ?? manifest.version);\n  }\n\n  getApplicationVersionNumber(): Promise<string> {\n    const manifest = chrome.runtime.getManifest();\n    return Promise.resolve(manifest.version.split(RegExp(\"[+|-]\"))[0].trim());\n  }\n\n  supportsWebAuthn(win: Window): boolean {\n    return typeof PublicKeyCredential !== \"undefined\";\n  }\n\n  supportsDuo(): boolean {\n    return true;\n  }\n\n  abstract showToast(\n    type: \"error\" | \"success\" | \"warning\" | \"info\",\n    title: string,\n    text: string | string[],\n    options?: any,\n  ): void;\n\n  isDev(): boolean {\n    return process.env.ENV === \"development\";\n  }\n\n  isSelfHost(): boolean {\n    return false;\n  }\n\n  /**\n   * Copies the passed text to the clipboard. For Safari, this will use\n   * the native messaging API to send the text to the Bitwarden app. If\n   * the extension is using manifest v3, the offscreen document API will\n   * be used to copy the text to the clipboard. Otherwise, the browser's\n   * clipboard API will be used.\n   *\n   * @param text - The text to copy to the clipboard.\n   * @param options - Options for the clipboard operation.\n   */\n  copyToClipboard(text: string, options?: ClipboardOptions): void {\n    const windowContext = options?.window || (this.globalContext as Window);\n    const clearing = Boolean(options?.clearing);\n    const clearMs: number = options?.clearMs || null;\n    const handleClipboardWriteCallback = () => {\n      if (!clearing && this.clipboardWriteCallback != null) {\n        this.clipboardWriteCallback(text, clearMs);\n      }\n    };\n\n    if (this.isSafari()) {\n      void SafariApp.sendMessageToApp(\"copyToClipboard\", text).then(handleClipboardWriteCallback);\n\n      return;\n    }\n\n    if (this.isChrome() && text === \"\") {\n      text = \"\\u0000\";\n    }\n\n    if (BrowserApi.isManifestVersion(3) && this.offscreenDocumentService.offscreenApiSupported()) {\n      void this.triggerOffscreenCopyToClipboard(text).then(handleClipboardWriteCallback);\n\n      return;\n    }\n\n    void BrowserClipboardService.copy(windowContext, text).then(handleClipboardWriteCallback);\n  }\n\n  /**\n   * Reads the text from the clipboard. For Safari, this will use the\n   * native messaging API to request the text from the Bitwarden app. If\n   * the extension is using manifest v3, the offscreen document API will\n   * be used to read the text from the clipboard. Otherwise, the browser's\n   * clipboard API will be used.\n   *\n   * @param options - Options for the clipboard operation.\n   */\n  async readFromClipboard(options?: ClipboardOptions): Promise<string> {\n    const windowContext = options?.window || (this.globalContext as Window);\n\n    if (this.isSafari()) {\n      return await SafariApp.sendMessageToApp(\"readFromClipboard\");\n    }\n\n    if (BrowserApi.isManifestVersion(3) && this.offscreenDocumentService.offscreenApiSupported()) {\n      return await this.triggerOffscreenReadFromClipboard();\n    }\n\n    return await BrowserClipboardService.read(windowContext);\n  }\n\n  supportsSecureStorage(): boolean {\n    return false;\n  }\n\n  async getAutofillKeyboardShortcut(): Promise<string> {\n    let autofillCommand: string;\n    // You can not change the command in Safari or obtain it programmatically\n    if (this.isSafari()) {\n      autofillCommand = \"Cmd+Shift+L\";\n    } else if (this.isFirefox()) {\n      autofillCommand = (await browser.commands.getAll()).find(\n        (c) => c.name === ExtensionCommand.AutofillLogin,\n      ).shortcut;\n      // Firefox is returning Ctrl instead of Cmd for the modifier key on macOS if\n      // the command is the default one set on installation.\n      if (\n        (await browser.runtime.getPlatformInfo()).os === \"mac\" &&\n        autofillCommand === \"Ctrl+Shift+L\"\n      ) {\n        autofillCommand = \"Cmd+Shift+L\";\n      }\n    } else {\n      await new Promise((resolve) =>\n        chrome.commands.getAll((c) =>\n          resolve(\n            (autofillCommand = c.find((c) => c.name === ExtensionCommand.AutofillLogin).shortcut),\n          ),\n        ),\n      );\n    }\n    return autofillCommand;\n  }\n\n  /**\n   * Triggers the offscreen document API to copy the text to the clipboard.\n   */\n  private async triggerOffscreenCopyToClipboard(text: string) {\n    await this.offscreenDocumentService.withDocument(\n      [chrome.offscreen.Reason.CLIPBOARD],\n      \"Write text to the clipboard.\",\n      async () => {\n        await BrowserApi.sendMessageWithResponse(\"offscreenCopyToClipboard\", { text });\n      },\n    );\n  }\n\n  /**\n   * Triggers the offscreen document API to read the text from the clipboard.\n   */\n  private async triggerOffscreenReadFromClipboard() {\n    const response = await this.offscreenDocumentService.withDocument(\n      [chrome.offscreen.Reason.CLIPBOARD],\n      \"Read text from the clipboard.\",\n      async () => {\n        return await BrowserApi.sendMessageWithResponse(\"offscreenReadFromClipboard\");\n      },\n    );\n    if (typeof response === \"string\") {\n      return response;\n    }\n\n    return \"\";\n  }\n}\n","/**\n * MIT License\n *\n * Copyright (c) Federico Brigante <me@fregante.com> (https://fregante.com)\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \"Software\"), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.\n *\n * @see https://github.com/fregante/content-scripts-register-polyfill\n * @version 4.0.2\n */\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\n\nimport { BrowserApi } from \"./browser-api\";\n\nlet registerContentScripts: (\n  contentScriptOptions: browser.contentScripts.RegisteredContentScriptOptions,\n  callback?: (registeredContentScript: browser.contentScripts.RegisteredContentScript) => void,\n) => Promise<browser.contentScripts.RegisteredContentScript>;\nexport async function registerContentScriptsPolyfill(\n  contentScriptOptions: browser.contentScripts.RegisteredContentScriptOptions,\n  callback?: (registeredContentScript: browser.contentScripts.RegisteredContentScript) => void,\n) {\n  if (!registerContentScripts) {\n    registerContentScripts = buildRegisterContentScriptsPolyfill();\n  }\n\n  return registerContentScripts(contentScriptOptions, callback);\n}\n\nfunction buildRegisterContentScriptsPolyfill() {\n  const logService = new ConsoleLogService(false);\n  const chromeProxy = globalThis.chrome && NestedProxy<typeof globalThis.chrome>(globalThis.chrome);\n  const patternValidationRegex =\n    /^(https?|wss?|file|ftp|\\*):\\/\\/(\\*|\\*\\.[^*/]+|[^*/]+)\\/.*$|^file:\\/\\/\\/.*$|^resource:\\/\\/(\\*|\\*\\.[^*/]+|[^*/]+)\\/.*$|^about:/;\n  const isFirefox = globalThis.navigator?.userAgent.includes(\"Firefox/\");\n  const gotScripting = Boolean(globalThis.chrome?.scripting);\n  const gotNavigation = typeof chrome === \"object\" && \"webNavigation\" in chrome;\n\n  function NestedProxy<T extends object>(target: T): T {\n    return new Proxy(target, {\n      get(target, prop) {\n        if (!target[prop as keyof T]) {\n          return;\n        }\n\n        if (typeof target[prop as keyof T] !== \"function\") {\n          return NestedProxy(target[prop as keyof T]);\n        }\n\n        return (...arguments_: any[]) =>\n          new Promise((resolve, reject) => {\n            target[prop as keyof T](...arguments_, (result: any) => {\n              if (chrome.runtime.lastError) {\n                reject(new Error(chrome.runtime.lastError.message));\n              } else {\n                resolve(result);\n              }\n            });\n          });\n      },\n    });\n  }\n\n  function assertValidPattern(matchPattern: string) {\n    if (!isValidPattern(matchPattern)) {\n      throw new Error(\n        `${matchPattern} is an invalid pattern, it must match ${String(patternValidationRegex)}`,\n      );\n    }\n  }\n\n  function isValidPattern(matchPattern: string) {\n    return matchPattern === \"<all_urls>\" || patternValidationRegex.test(matchPattern);\n  }\n\n  function getRawPatternRegex(matchPattern: string) {\n    assertValidPattern(matchPattern);\n    let [, protocol, host = \"\", pathname] = matchPattern.split(/(^[^:]+:[/][/])([^/]+)?/);\n    protocol = protocol\n      .replace(\"*\", isFirefox ? \"(https?|wss?)\" : \"https?\")\n      .replaceAll(/[/]/g, \"[/]\");\n\n    if (host === \"*\") {\n      host = \"[^/]+\";\n    } else if (host) {\n      host = host\n        .replace(/^[*][.]/, \"([^/]+.)*\")\n        .replaceAll(/[.]/g, \"[.]\")\n        .replace(/[*]$/, \"[^.]+\");\n    }\n\n    pathname = pathname\n      .replaceAll(/[/]/g, \"[/]\")\n      .replaceAll(/[.]/g, \"[.]\")\n      .replaceAll(/[*]/g, \".*\");\n\n    return \"^\" + protocol + host + \"(\" + pathname + \")?$\";\n  }\n\n  function patternToRegex(...matchPatterns: string[]) {\n    if (matchPatterns.length === 0) {\n      return /$./;\n    }\n\n    if (matchPatterns.includes(\"<all_urls>\")) {\n      // <all_urls> regex\n      return /^(https?|file|ftp):[/]+/;\n    }\n\n    if (matchPatterns.includes(\"*://*/*\")) {\n      // all stars regex\n      return isFirefox ? /^(https?|wss?):[/][/][^/]+([/].*)?$/ : /^https?:[/][/][^/]+([/].*)?$/;\n    }\n\n    return new RegExp(matchPatterns.map((x) => getRawPatternRegex(x)).join(\"|\"));\n  }\n\n  function castAllFramesTarget(target: number | { tabId: number; frameId: number }) {\n    if (typeof target === \"object\") {\n      return { ...target, allFrames: false };\n    }\n\n    return {\n      tabId: target,\n      frameId: undefined,\n      allFrames: true,\n    };\n  }\n\n  function castArray(possibleArray: any | any[]) {\n    if (Array.isArray(possibleArray)) {\n      return possibleArray;\n    }\n\n    return [possibleArray];\n  }\n\n  function arrayOrUndefined(value?: number) {\n    return value === undefined ? undefined : [value];\n  }\n\n  async function insertCSS(\n    {\n      tabId,\n      frameId,\n      files,\n      allFrames,\n      matchAboutBlank,\n      runAt,\n    }: {\n      tabId: number;\n      frameId?: number;\n      files: browser.extensionTypes.ExtensionFileOrCode[];\n      allFrames: boolean;\n      matchAboutBlank: boolean;\n      runAt: browser.extensionTypes.RunAt;\n    },\n    { ignoreTargetErrors }: { ignoreTargetErrors?: boolean } = {},\n  ) {\n    const everyInsertion = Promise.all(\n      files.map(async (content) => {\n        if (typeof content === \"string\") {\n          content = { file: content };\n        }\n\n        if (gotScripting) {\n          return chrome.scripting.insertCSS({\n            target: {\n              tabId,\n              frameIds: arrayOrUndefined(frameId),\n              allFrames: frameId === undefined ? allFrames : undefined,\n            },\n            files: \"file\" in content ? [content.file] : undefined,\n            css: \"code\" in content ? content.code : undefined,\n          });\n        }\n\n        return chromeProxy.tabs.insertCSS(tabId, {\n          ...content,\n          matchAboutBlank,\n          allFrames,\n          frameId,\n          runAt: runAt ?? \"document_start\",\n        });\n      }),\n    );\n\n    if (ignoreTargetErrors) {\n      await catchTargetInjectionErrors(everyInsertion);\n    } else {\n      await everyInsertion;\n    }\n  }\n  function assertNoCode(files: browser.extensionTypes.ExtensionFileOrCode[]) {\n    if (files.some((content) => \"code\" in content)) {\n      throw new Error(\"chrome.scripting does not support injecting strings of `code`\");\n    }\n  }\n\n  async function executeScript(\n    {\n      tabId,\n      frameId,\n      files,\n      allFrames,\n      matchAboutBlank,\n      runAt,\n    }: {\n      tabId: number;\n      frameId?: number;\n      files: browser.extensionTypes.ExtensionFileOrCode[];\n      allFrames: boolean;\n      matchAboutBlank: boolean;\n      runAt: browser.extensionTypes.RunAt;\n    },\n    { ignoreTargetErrors }: { ignoreTargetErrors?: boolean } = {},\n  ) {\n    const normalizedFiles = files.map((file) => (typeof file === \"string\" ? { file } : file));\n\n    if (gotScripting) {\n      assertNoCode(normalizedFiles);\n      const injection = chrome.scripting.executeScript({\n        target: {\n          tabId,\n          frameIds: arrayOrUndefined(frameId),\n          allFrames: frameId === undefined ? allFrames : undefined,\n        },\n        files: normalizedFiles.map(({ file }: { file: string }) => file),\n      });\n\n      if (ignoreTargetErrors) {\n        await catchTargetInjectionErrors(injection);\n      } else {\n        await injection;\n      }\n\n      return;\n    }\n\n    const executions = [];\n    for (const content of normalizedFiles) {\n      if (\"code\" in content) {\n        await executions.at(-1);\n      }\n\n      executions.push(\n        chromeProxy.tabs.executeScript(tabId, {\n          ...content,\n          matchAboutBlank,\n          allFrames,\n          frameId,\n          runAt,\n        }),\n      );\n    }\n\n    if (ignoreTargetErrors) {\n      await catchTargetInjectionErrors(Promise.all(executions));\n    } else {\n      await Promise.all(executions);\n    }\n  }\n\n  async function injectContentScript(\n    where: { tabId: number; frameId: number },\n    scripts: {\n      css: browser.extensionTypes.ExtensionFileOrCode[];\n      js: browser.extensionTypes.ExtensionFileOrCode[];\n      matchAboutBlank: boolean;\n      runAt: browser.extensionTypes.RunAt;\n    },\n    options = {},\n  ) {\n    const targets = castArray(where);\n    await Promise.all(\n      targets.map(async (target) =>\n        injectContentScriptInSpecificTarget(castAllFramesTarget(target), scripts, options),\n      ),\n    );\n  }\n\n  async function injectContentScriptInSpecificTarget(\n    { frameId, tabId, allFrames }: { frameId?: number; tabId: number; allFrames: boolean },\n    scripts: {\n      css: browser.extensionTypes.ExtensionFileOrCode[];\n      js: browser.extensionTypes.ExtensionFileOrCode[];\n      matchAboutBlank: boolean;\n      runAt: browser.extensionTypes.RunAt;\n    },\n    options = {},\n  ) {\n    const injections = castArray(scripts).flatMap((script) => [\n      insertCSS(\n        {\n          tabId,\n          frameId,\n          allFrames,\n          files: script.css ?? [],\n          matchAboutBlank: script.matchAboutBlank ?? script.match_about_blank,\n          runAt: script.runAt ?? script.run_at,\n        },\n        options,\n      ),\n      executeScript(\n        {\n          tabId,\n          frameId,\n          allFrames,\n          files: script.js ?? [],\n          matchAboutBlank: script.matchAboutBlank ?? script.match_about_blank,\n          runAt: script.runAt ?? script.run_at,\n        },\n        options,\n      ),\n    ]);\n    await Promise.all(injections);\n  }\n\n  async function catchTargetInjectionErrors(promise: Promise<any>) {\n    try {\n      await promise;\n    } catch (error) {\n      const targetErrors =\n        /^No frame with id \\d+ in tab \\d+.$|^No tab with id: \\d+.$|^The tab was closed.$|^The frame was removed.$/;\n      if (!targetErrors.test(error?.message)) {\n        throw error;\n      }\n    }\n  }\n\n  async function isOriginPermitted(url: string) {\n    return chromeProxy.permissions.contains({\n      origins: [new URL(url).origin + \"/*\"],\n    });\n  }\n\n  return async (\n    contentScriptOptions: browser.contentScripts.RegisteredContentScriptOptions,\n    callback: CallableFunction,\n  ) => {\n    const {\n      js = [],\n      css = [],\n      matchAboutBlank,\n      matches = [],\n      excludeMatches,\n      runAt,\n    } = contentScriptOptions;\n    let { allFrames } = contentScriptOptions;\n\n    if (gotNavigation) {\n      allFrames = false;\n    } else if (allFrames) {\n      logService.warning(\n        \"`allFrames: true` requires the `webNavigation` permission to work correctly: https://github.com/fregante/content-scripts-register-polyfill#permissions\",\n      );\n    }\n\n    if (matches.length === 0) {\n      throw new Error(\n        \"Type error for parameter contentScriptOptions (Error processing matches: Array requires at least 1 items; you have 0) for contentScripts.register.\",\n      );\n    }\n\n    await Promise.all(\n      matches.map(async (pattern: string) => {\n        if (!(await chromeProxy.permissions.contains({ origins: [pattern] }))) {\n          throw new Error(`Permission denied to register a content script for ${pattern}`);\n        }\n      }),\n    );\n\n    const matchesRegex = patternToRegex(...matches);\n    const excludeMatchesRegex = patternToRegex(\n      ...(excludeMatches !== null && excludeMatches !== void 0 ? excludeMatches : []),\n    );\n    const inject = async (url: string, tabId: number, frameId = 0) => {\n      if (\n        !matchesRegex.test(url) ||\n        excludeMatchesRegex.test(url) ||\n        !(await isOriginPermitted(url))\n      ) {\n        return;\n      }\n\n      await injectContentScript(\n        { tabId, frameId },\n        { css, js, matchAboutBlank, runAt },\n        { ignoreTargetErrors: true },\n      );\n    };\n    const tabListener = async (\n      tabId: number,\n      { status }: chrome.tabs.TabChangeInfo,\n      { url }: chrome.tabs.Tab,\n    ) => {\n      if (status === \"loading\" && url) {\n        void inject(url, tabId);\n      }\n    };\n    const navListener = async ({\n      tabId,\n      frameId,\n      url,\n    }: chrome.webNavigation.WebNavigationTransitionCallbackDetails) => {\n      void inject(url, tabId, frameId);\n    };\n\n    if (gotNavigation) {\n      BrowserApi.addListener(chrome.webNavigation.onCommitted, navListener);\n    } else {\n      BrowserApi.addListener(chrome.tabs.onUpdated, tabListener);\n    }\n\n    const registeredContentScript = {\n      async unregister() {\n        if (gotNavigation) {\n          chrome.webNavigation.onCommitted.removeListener(navListener);\n        } else {\n          chrome.tabs.onUpdated.removeListener(tabListener);\n        }\n      },\n    };\n\n    if (typeof callback === \"function\") {\n      callback(registeredContentScript);\n    }\n\n    return registeredContentScript;\n  };\n}\n","import { Observable } from \"rxjs\";\n\nimport { DeviceType } from \"@bitwarden/common/enums\";\n\nimport { TabMessage } from \"../../types/tab-messages\";\nimport { BrowserPlatformUtilsService } from \"../services/platform-utils/browser-platform-utils.service\";\n\nimport { registerContentScriptsPolyfill } from \"./browser-api.register-content-scripts-polyfill\";\n\nexport class BrowserApi {\n  static isWebExtensionsApi: boolean = typeof browser !== \"undefined\";\n  static isSafariApi: boolean =\n    navigator.userAgent.indexOf(\" Safari/\") !== -1 &&\n    navigator.userAgent.indexOf(\" Chrome/\") === -1 &&\n    navigator.userAgent.indexOf(\" Chromium/\") === -1;\n  static isChromeApi: boolean = !BrowserApi.isSafariApi && typeof chrome !== \"undefined\";\n  static isFirefoxOnAndroid: boolean =\n    navigator.userAgent.indexOf(\"Firefox/\") !== -1 && navigator.userAgent.indexOf(\"Android\") !== -1;\n\n  static get manifestVersion() {\n    return chrome.runtime.getManifest().manifest_version;\n  }\n\n  /**\n   * Determines if the extension manifest version is the given version.\n   *\n   * @param expectedVersion - The expected manifest version to check against.\n   */\n  static isManifestVersion(expectedVersion: 2 | 3) {\n    return BrowserApi.manifestVersion === expectedVersion;\n  }\n\n  /**\n   * Gets the current window or the window with the given id.\n   *\n   * @param windowId - The id of the window to get. If not provided, the current window is returned.\n   */\n  static async getWindow(windowId?: number): Promise<chrome.windows.Window> {\n    if (!windowId) {\n      return BrowserApi.getCurrentWindow();\n    }\n\n    return await BrowserApi.getWindowById(windowId);\n  }\n\n  /**\n   * Gets the currently active browser window.\n   */\n  static async getCurrentWindow(): Promise<chrome.windows.Window> {\n    return new Promise((resolve) => chrome.windows.getCurrent({ populate: true }, resolve));\n  }\n\n  /**\n   * Gets the window with the given id.\n   *\n   * @param windowId - The id of the window to get.\n   */\n  static async getWindowById(windowId: number): Promise<chrome.windows.Window> {\n    return new Promise((resolve) => chrome.windows.get(windowId, { populate: true }, resolve));\n  }\n\n  static async createWindow(options: chrome.windows.CreateData): Promise<chrome.windows.Window> {\n    return new Promise((resolve) =>\n      chrome.windows.create(options, (window) => {\n        resolve(window);\n      }),\n    );\n  }\n\n  /**\n   * Removes the window with the given id.\n   *\n   * @param windowId - The id of the window to remove.\n   */\n  static async removeWindow(windowId: number): Promise<void> {\n    return new Promise((resolve) => chrome.windows.remove(windowId, () => resolve()));\n  }\n\n  /**\n   * Updates the properties of the window with the given id.\n   *\n   * @param windowId - The id of the window to update.\n   * @param options - The window properties to update.\n   */\n  static async updateWindowProperties(\n    windowId: number,\n    options: chrome.windows.UpdateInfo,\n  ): Promise<void> {\n    return new Promise((resolve) =>\n      chrome.windows.update(windowId, options, () => {\n        resolve();\n      }),\n    );\n  }\n\n  /**\n   * Focuses the window with the given id.\n   *\n   * @param windowId - The id of the window to focus.\n   */\n  static async focusWindow(windowId: number) {\n    await BrowserApi.updateWindowProperties(windowId, { focused: true });\n  }\n\n  static async getTabFromCurrentWindowId(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      windowId: chrome.windows.WINDOW_ID_CURRENT,\n    });\n  }\n\n  /**\n   * Gets the tab with the given id.\n   *\n   * @param tabId - The id of the tab to get.\n   */\n  static async getTab(tabId: number): Promise<chrome.tabs.Tab> | null {\n    if (!tabId) {\n      return null;\n    }\n\n    if (BrowserApi.isManifestVersion(3)) {\n      return await chrome.tabs.get(tabId);\n    }\n\n    return new Promise((resolve) =>\n      chrome.tabs.get(tabId, (tab) => {\n        resolve(tab);\n      }),\n    );\n  }\n\n  static async getTabFromCurrentWindow(): Promise<chrome.tabs.Tab> | null {\n    return await BrowserApi.tabsQueryFirst({\n      active: true,\n      currentWindow: true,\n    });\n  }\n\n  static async getActiveTabs(): Promise<chrome.tabs.Tab[]> {\n    return await BrowserApi.tabsQuery({\n      active: true,\n    });\n  }\n\n  static async tabsQuery(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab[]> {\n    return new Promise((resolve) => {\n      chrome.tabs.query(options, (tabs) => {\n        resolve(tabs);\n      });\n    });\n  }\n\n  static async tabsQueryFirst(options: chrome.tabs.QueryInfo): Promise<chrome.tabs.Tab> | null {\n    const tabs = await BrowserApi.tabsQuery(options);\n    if (tabs.length > 0) {\n      return tabs[0];\n    }\n\n    return null;\n  }\n\n  static tabSendMessageData(\n    tab: chrome.tabs.Tab,\n    command: string,\n    data: any = null,\n  ): Promise<void> {\n    const obj: any = {\n      command: command,\n    };\n\n    if (data != null) {\n      obj.data = data;\n    }\n\n    return BrowserApi.tabSendMessage(tab, obj);\n  }\n\n  static async tabSendMessage<T, TResponse = unknown>(\n    tab: chrome.tabs.Tab,\n    obj: T,\n    options: chrome.tabs.MessageSendOptions = null,\n  ): Promise<TResponse> {\n    if (!tab || !tab.id) {\n      return;\n    }\n\n    return new Promise<TResponse>((resolve) => {\n      chrome.tabs.sendMessage(tab.id, obj, options, (response) => {\n        if (chrome.runtime.lastError) {\n          // Some error happened\n        }\n        resolve(response);\n      });\n    });\n  }\n\n  static sendTabsMessage<T>(\n    tabId: number,\n    message: TabMessage,\n    options?: chrome.tabs.MessageSendOptions,\n    responseCallback?: (response: T) => void,\n  ) {\n    chrome.tabs.sendMessage<TabMessage, T>(tabId, message, options, responseCallback);\n  }\n\n  static async onWindowCreated(callback: (win: chrome.windows.Window) => any) {\n    // FIXME: Make sure that is does not cause a memory leak in Safari or use BrowserApi.AddListener\n    // and test that it doesn't break.\n    // eslint-disable-next-line no-restricted-syntax\n    return chrome.windows.onCreated.addListener(callback);\n  }\n\n  /**\n   * Gets the background page for the extension. This method is\n   * not valid within manifest v3 background service workers. As\n   * a result, it will return null when called from that context.\n   */\n  static getBackgroundPage(): any {\n    if (typeof chrome.extension.getBackgroundPage === \"undefined\") {\n      return null;\n    }\n\n    return chrome.extension.getBackgroundPage();\n  }\n\n  /**\n   * Accepts a window object and determines if it is\n   * associated with the background page of the extension.\n   *\n   * @param window - The window to check.\n   */\n  static isBackgroundPage(window: Window & typeof globalThis): boolean {\n    return typeof window !== \"undefined\" && window === BrowserApi.getBackgroundPage();\n  }\n\n  /**\n   * Gets the extension views that match the given properties. This method is not\n   * available within background service worker. As a result, it will return an\n   * empty array when called from that context.\n   *\n   * @param fetchProperties - The properties used to filter extension views.\n   */\n  static getExtensionViews(fetchProperties?: chrome.extension.FetchProperties): Window[] {\n    if (typeof chrome.extension.getViews === \"undefined\") {\n      return [];\n    }\n\n    return chrome.extension.getViews(fetchProperties);\n  }\n\n  /**\n   * Queries all extension views that are of type `popup`\n   * and returns whether any are currently open.\n   */\n  static async isPopupOpen(): Promise<boolean> {\n    return Promise.resolve(BrowserApi.getExtensionViews({ type: \"popup\" }).length > 0);\n  }\n\n  static createNewTab(url: string, active = true): Promise<chrome.tabs.Tab> {\n    return new Promise((resolve) =>\n      chrome.tabs.create({ url: url, active: active }, (tab) => resolve(tab)),\n    );\n  }\n\n  /**\n   * Gathers the details for a specified sub-frame of a tab.\n   *\n   * @param details - The details of the frame to get.\n   */\n  static async getFrameDetails(\n    details: chrome.webNavigation.GetFrameDetails,\n  ): Promise<chrome.webNavigation.GetFrameResultDetails> {\n    return new Promise((resolve) => chrome.webNavigation.getFrame(details, resolve));\n  }\n\n  /**\n   * Gets all frames associated with a tab.\n   *\n   * @param tabId - The id of the tab to get the frames for.\n   */\n  static async getAllFrameDetails(\n    tabId: chrome.tabs.Tab[\"id\"],\n  ): Promise<chrome.webNavigation.GetAllFrameResultDetails[]> {\n    return new Promise((resolve) => chrome.webNavigation.getAllFrames({ tabId }, resolve));\n  }\n\n  // Keep track of all the events registered in a Safari popup so we can remove\n  // them when the popup gets unloaded, otherwise we cause a memory leak\n  private static trackedChromeEventListeners: [\n    event: chrome.events.Event<(...args: unknown[]) => unknown>,\n    callback: (...args: unknown[]) => unknown,\n  ][] = [];\n\n  static messageListener(\n    name: string,\n    callback: (\n      message: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: any,\n    ) => boolean | void,\n  ) {\n    BrowserApi.addListener(chrome.runtime.onMessage, callback);\n  }\n\n  static messageListener$() {\n    return new Observable<unknown>((subscriber) => {\n      const handler = (message: unknown) => {\n        subscriber.next(message);\n      };\n\n      BrowserApi.addListener(chrome.runtime.onMessage, handler);\n\n      return () => BrowserApi.removeListener(chrome.runtime.onMessage, handler);\n    });\n  }\n\n  static storageChangeListener(\n    callback: Parameters<typeof chrome.storage.onChanged.addListener>[0],\n  ) {\n    BrowserApi.addListener(chrome.storage.onChanged, callback);\n  }\n\n  /**\n   * Adds a callback to the given chrome event in a cross-browser platform manner.\n   *\n   * **Important:** All event listeners in the browser extension popup context must\n   * use this instead of the native APIs to handle unsubscribing from Safari properly.\n   *\n   * @param event - The event in which to add the listener to.\n   * @param callback - The callback you want registered onto the event.\n   */\n  static addListener<T extends (...args: readonly unknown[]) => unknown>(\n    event: chrome.events.Event<T>,\n    callback: T,\n  ) {\n    event.addListener(callback);\n\n    if (BrowserApi.isSafariApi && !BrowserApi.isBackgroundPage(self)) {\n      BrowserApi.trackedChromeEventListeners.push([event, callback]);\n      BrowserApi.setupUnloadListeners();\n    }\n  }\n\n  /**\n   * Removes a callback from the given chrome event in a cross-browser platform manner.\n   * @param event - The event in which to remove the listener from.\n   * @param callback - The callback you want removed from the event.\n   */\n  static removeListener<T extends (...args: readonly unknown[]) => unknown>(\n    event: chrome.events.Event<T>,\n    callback: T,\n  ) {\n    event.removeListener(callback);\n\n    if (BrowserApi.isSafariApi && !BrowserApi.isBackgroundPage(self)) {\n      const index = BrowserApi.trackedChromeEventListeners.findIndex(([_event, eventListener]) => {\n        return eventListener == callback;\n      });\n      if (index !== -1) {\n        BrowserApi.trackedChromeEventListeners.splice(index, 1);\n      }\n    }\n  }\n\n  // Setup the event to destroy all the listeners when the popup gets unloaded in Safari, otherwise we get a memory leak\n  private static setupUnloadListeners() {\n    // The MDN recommend using 'visibilitychange' but that event is fired any time the popup window is obscured as well\n    // 'pagehide' works just like 'unload' but is compatible with the back/forward cache, so we prefer using that one\n    self.addEventListener(\"pagehide\", () => {\n      for (const [event, callback] of BrowserApi.trackedChromeEventListeners) {\n        event.removeListener(callback);\n      }\n    });\n  }\n\n  static sendMessage(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    return chrome.runtime.sendMessage(message);\n  }\n\n  static sendMessageWithResponse<TResponse>(subscriber: string, arg: any = {}) {\n    const message = Object.assign({}, { command: subscriber }, arg);\n    return new Promise<TResponse>((resolve) => chrome.runtime.sendMessage(message, resolve));\n  }\n\n  static async focusTab(tabId: number) {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    chrome.tabs.update(tabId, { active: true, highlighted: true });\n  }\n\n  static closePopup(win: Window) {\n    if (BrowserApi.isWebExtensionsApi && BrowserApi.isFirefoxOnAndroid) {\n      // Reactivating the active tab dismisses the popup tab. The promise final\n      // condition is only called if the popup wasn't already dismissed (future proofing).\n      // ref: https://bugzilla.mozilla.org/show_bug.cgi?id=1433604\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      browser.tabs.update({ active: true }).finally(win.close);\n    } else {\n      win.close();\n    }\n  }\n\n  static gaFilter() {\n    return process.env.ENV !== \"production\";\n  }\n\n  static getUILanguage() {\n    return chrome.i18n.getUILanguage();\n  }\n\n  /**\n   * Handles reloading the extension using the underlying functionality exposed by the browser API.\n   */\n  static reloadExtension() {\n    return chrome.runtime.reload();\n  }\n\n  /**\n   * Reloads all open extension views, except the background page. Will also\n   * skip reloading the current window location if exemptCurrentHref is true.\n   *\n   * @param exemptCurrentHref - Whether to exempt the current window location from the reload.\n   */\n  static reloadOpenWindows(exemptCurrentHref = false) {\n    const views = BrowserApi.getExtensionViews();\n    if (!views.length) {\n      return;\n    }\n\n    const currentHref = self.location.href;\n    views\n      .filter((w) => w.location.href != null && !w.location.href.includes(\"background.html\"))\n      .filter((w) => !exemptCurrentHref || w.location.href !== currentHref)\n      .forEach((w) => w.location.reload());\n  }\n\n  static connectNative(application: string): browser.runtime.Port | chrome.runtime.Port {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.connectNative(application);\n    } else if (BrowserApi.isChromeApi) {\n      return chrome.runtime.connectNative(application);\n    }\n  }\n\n  static requestPermission(permission: any) {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.permissions.request(permission);\n    }\n    return new Promise((resolve) => {\n      chrome.permissions.request(permission, resolve);\n    });\n  }\n\n  /**\n   * Checks if the user has provided the given permissions to the extension.\n   *\n   * @param permissions - The permissions to check.\n   */\n  static async permissionsGranted(permissions: string[]): Promise<boolean> {\n    return new Promise((resolve) =>\n      chrome.permissions.contains({ permissions }, (result) => resolve(result)),\n    );\n  }\n\n  static getPlatformInfo(): Promise<browser.runtime.PlatformInfo | chrome.runtime.PlatformInfo> {\n    if (BrowserApi.isWebExtensionsApi) {\n      return browser.runtime.getPlatformInfo();\n    }\n    return new Promise((resolve) => {\n      chrome.runtime.getPlatformInfo(resolve);\n    });\n  }\n\n  /**\n   * Returns the supported BrowserAction API based on the manifest version.\n   */\n  static getBrowserAction() {\n    return BrowserApi.isManifestVersion(3) ? chrome.action : chrome.browserAction;\n  }\n\n  static getSidebarAction(\n    win: Window & typeof globalThis,\n  ): OperaSidebarAction | FirefoxSidebarAction | null {\n    const deviceType = BrowserPlatformUtilsService.getDevice(win);\n    if (deviceType !== DeviceType.FirefoxExtension && deviceType !== DeviceType.OperaExtension) {\n      return null;\n    }\n    return win.opr?.sidebarAction || browser.sidebarAction;\n  }\n\n  static captureVisibleTab(): Promise<string> {\n    return new Promise((resolve) => {\n      chrome.tabs.captureVisibleTab(null, { format: \"png\" }, resolve);\n    });\n  }\n\n  /**\n   * Extension API helper method used to execute a script in a tab.\n   *\n   * @see https://developer.chrome.com/docs/extensions/reference/tabs/#method-executeScript\n   * @param tabId - The id of the tab to execute the script in.\n   * @param details {@link \"InjectDetails\" https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/extensionTypes/InjectDetails}\n   * @param scriptingApiDetails {@link \"ExecutionWorld\" https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/scripting/ExecutionWorld}\n   */\n  static executeScriptInTab(\n    tabId: number,\n    details: chrome.tabs.InjectDetails,\n    scriptingApiDetails?: {\n      world: chrome.scripting.ExecutionWorld;\n    },\n  ): Promise<unknown> {\n    if (BrowserApi.isManifestVersion(3)) {\n      const target: chrome.scripting.InjectionTarget = {\n        tabId,\n      };\n\n      if (typeof details.frameId === \"number\") {\n        target.frameIds = [details.frameId];\n      }\n\n      if (!target.frameIds?.length && details.allFrames) {\n        target.allFrames = details.allFrames;\n      }\n\n      return chrome.scripting.executeScript({\n        target,\n        files: details.file ? [details.file] : null,\n        injectImmediately: details.runAt === \"document_start\",\n        world: scriptingApiDetails?.world || \"ISOLATED\",\n      });\n    }\n\n    return new Promise((resolve) => {\n      chrome.tabs.executeScript(tabId, details, (result) => {\n        resolve(result);\n      });\n    });\n  }\n\n  /**\n   * Identifies if the browser autofill settings are overridden by the extension.\n   */\n  static async browserAutofillSettingsOverridden(): Promise<boolean> {\n    const checkOverrideStatus = (details: chrome.types.ChromeSettingGetResultDetails) =>\n      details.levelOfControl === \"controlled_by_this_extension\" && !details.value;\n\n    const autofillAddressOverridden: boolean = await new Promise((resolve) =>\n      chrome.privacy.services.autofillAddressEnabled.get({}, (details) =>\n        resolve(checkOverrideStatus(details)),\n      ),\n    );\n\n    const autofillCreditCardOverridden: boolean = await new Promise((resolve) =>\n      chrome.privacy.services.autofillCreditCardEnabled.get({}, (details) =>\n        resolve(checkOverrideStatus(details)),\n      ),\n    );\n\n    const passwordSavingOverridden: boolean = await new Promise((resolve) =>\n      chrome.privacy.services.passwordSavingEnabled.get({}, (details) =>\n        resolve(checkOverrideStatus(details)),\n      ),\n    );\n\n    return autofillAddressOverridden && autofillCreditCardOverridden && passwordSavingOverridden;\n  }\n\n  /**\n   * Updates the browser autofill settings to the given value.\n   *\n   * @param value - Determines whether to enable or disable the autofill settings.\n   */\n  static updateDefaultBrowserAutofillSettings(value: boolean) {\n    chrome.privacy.services.autofillAddressEnabled.set({ value });\n    chrome.privacy.services.autofillCreditCardEnabled.set({ value });\n    chrome.privacy.services.passwordSavingEnabled.set({ value });\n  }\n\n  /**\n   * Handles registration of static content scripts within manifest v2.\n   *\n   * @param contentScriptOptions - Details of the registered content scripts\n   */\n  static async registerContentScriptsMv2(\n    contentScriptOptions: browser.contentScripts.RegisteredContentScriptOptions,\n  ): Promise<browser.contentScripts.RegisteredContentScript> {\n    if (typeof browser !== \"undefined\" && !!browser.contentScripts?.register) {\n      return await browser.contentScripts.register(contentScriptOptions);\n    }\n\n    return await registerContentScriptsPolyfill(contentScriptOptions);\n  }\n\n  /**\n   * Handles registration of static content scripts within manifest v3.\n   *\n   * @param scripts - Details of the registered content scripts\n   */\n  static async registerContentScriptsMv3(\n    scripts: chrome.scripting.RegisteredContentScript[],\n  ): Promise<void> {\n    await chrome.scripting.registerContentScripts(scripts);\n  }\n\n  /**\n   * Handles unregistering of static content scripts within manifest v3.\n   *\n   * @param filter - Optional filter to unregister content scripts. Passing an empty object will unregister all content scripts.\n   */\n  static async unregisterContentScriptsMv3(\n    filter?: chrome.scripting.ContentScriptFilter,\n  ): Promise<void> {\n    await chrome.scripting.unregisterContentScripts(filter);\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Policy } from \"@bitwarden/common/admin-console/models/domain/policy\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { ScriptInjectorService } from \"../../platform/services/abstractions/script-injector.service\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\n\nimport {\n  AutoSubmitLoginBackground as AutoSubmitLoginBackgroundAbstraction,\n  AutoSubmitLoginBackgroundExtensionMessageHandlers,\n  AutoSubmitLoginMessage,\n} from \"./abstractions/auto-submit-login.background\";\n\nexport class AutoSubmitLoginBackground implements AutoSubmitLoginBackgroundAbstraction {\n  private validIdpHosts: Set<string> = new Set();\n  private validAutoSubmitHosts: Set<string> = new Set();\n  private mostRecentIdpHost: { url?: string; tabId?: number } = {};\n  private currentAutoSubmitHostData: { url?: string; tabId?: number } = {};\n  private readonly isSafariBrowser: boolean = false;\n  private readonly extensionMessageHandlers: AutoSubmitLoginBackgroundExtensionMessageHandlers = {\n    triggerAutoSubmitLogin: ({ message, sender }) => this.triggerAutoSubmitLogin(message, sender),\n    multiStepAutoSubmitLoginComplete: ({ sender }) =>\n      this.handleMultiStepAutoSubmitLoginComplete(sender),\n  };\n\n  constructor(\n    private logService: LogService,\n    private autofillService: AutofillService,\n    private scriptInjectorService: ScriptInjectorService,\n    private authService: AuthService,\n    private configService: ConfigService,\n    private platformUtilsService: PlatformUtilsService,\n    private policyService: PolicyService,\n  ) {\n    this.isSafariBrowser = this.platformUtilsService.isSafari();\n  }\n\n  /**\n   * Initializes the auto-submit login policy. Will return early if\n   * the feature flag is not set. If the policy is not enabled, it\n   * will trigger a removal of any established listeners.\n   */\n  async init() {\n    const featureFlagEnabled = await this.configService.getFeatureFlag(\n      FeatureFlag.IdpAutoSubmitLogin,\n    );\n    if (featureFlagEnabled) {\n      this.policyService\n        .get$(PolicyType.AutomaticAppLogIn)\n        .subscribe(this.handleAutoSubmitLoginPolicySubscription.bind(this));\n    }\n  }\n\n  /**\n   * Handles changes to the AutomaticAppLogIn policy. If the policy is not enabled, trigger\n   * a removal of any established listeners. If the policy is enabled, apply the policy to\n   * the active user.\n   *\n   * @param policy - The AutomaticAppLogIn policy details.\n   */\n  private handleAutoSubmitLoginPolicySubscription = (policy: Policy) => {\n    if (!policy?.enabled) {\n      this.destroy();\n      return;\n    }\n\n    this.applyPolicyToActiveUser(policy).catch((error) => this.logService.error(error));\n  };\n\n  /**\n   * Verifies if the policy applies to the active user. If so, the event listeners\n   * used to trigger auto-submission of login forms will be established.\n   *\n   * @param policy - The AutomaticAppLogIn policy details.\n   */\n  private applyPolicyToActiveUser = async (policy: Policy) => {\n    const policyAppliesToUser = await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.AutomaticAppLogIn),\n    );\n\n    if (!policyAppliesToUser) {\n      this.destroy();\n      return;\n    }\n\n    await this.setupAutoSubmitLoginListeners(policy);\n  };\n\n  /**\n   * Sets up the event listeners used to trigger auto-submission of login forms.\n   *\n   * @param policy - The AutomaticAppLogIn policy details.\n   */\n  private setupAutoSubmitLoginListeners = async (policy: Policy) => {\n    this.parseIpdHostsFromPolicy(policy?.data.idpHost);\n    if (!this.validIdpHosts.size) {\n      this.destroy();\n      return;\n    }\n\n    BrowserApi.addListener(chrome.runtime.onMessage, this.handleExtensionMessage);\n    chrome.webRequest.onBeforeRequest.addListener(this.handleOnBeforeRequest, {\n      urls: [\"<all_urls>\"],\n      types: [\"main_frame\", \"sub_frame\"],\n    });\n    chrome.webRequest.onBeforeRedirect.addListener(this.handleWebRequestOnBeforeRedirect, {\n      urls: [\"<all_urls>\"],\n      types: [\"main_frame\", \"sub_frame\"],\n    });\n\n    if (this.isSafariBrowser) {\n      this.initSafari().catch((error) => this.logService.error(error));\n    }\n  };\n\n  /**\n   * Parses the comma-separated list of IDP hosts from the AutomaticAppLogIn policy.\n   *\n   * @param idpHost - The comma-separated list of IDP hosts.\n   */\n  private parseIpdHostsFromPolicy = (idpHost?: string) => {\n    if (!idpHost) {\n      return;\n    }\n\n    const urls = idpHost.split(\",\");\n    urls.forEach((url) => {\n      const host = this.getUrlHost(url?.trim());\n      if (host) {\n        this.validIdpHosts.add(host);\n      }\n    });\n  };\n\n  /**\n   * Handles the onBeforeRequest event. This event is used to determine if a request should initialize\n   * the auto-submit login workflow. A valid request will initialize the workflow, while an invalid\n   * request will clear and disable the workflow.\n   *\n   * @param details - The details of the request.\n   */\n  private handleOnBeforeRequest = (details: chrome.webRequest.WebRequestBodyDetails) => {\n    const requestInitiator = this.getRequestInitiator(details);\n    const isValidInitiator = this.isValidInitiator(requestInitiator);\n\n    if (\n      this.postRequestEncounteredAfterSubmission(details, isValidInitiator) ||\n      this.requestRedirectsToInvalidHost(details, isValidInitiator)\n    ) {\n      this.clearAutoSubmitHostData();\n      return;\n    }\n\n    if (isValidInitiator && this.shouldRouteTriggerAutoSubmit(details, requestInitiator)) {\n      this.setupAutoSubmitFlow(details);\n      return;\n    }\n\n    this.disableAutoSubmitFlow(requestInitiator, details).catch((error) =>\n      this.logService.error(error),\n    );\n  };\n\n  /**\n   * This triggers if the upcoming request is a POST request and the initiator is valid. It indicates\n   * that a submission has occurred and the auto-submit login workflow should be cleared.\n   *\n   * @param details - The details of the request.\n   * @param isValidInitiator - A flag indicating if the initiator of the request is valid.\n   */\n  private postRequestEncounteredAfterSubmission = (\n    details: chrome.webRequest.WebRequestBodyDetails,\n    isValidInitiator: boolean,\n  ) => {\n    return details.method === \"POST\" && this.validAutoSubmitHosts.size > 0 && isValidInitiator;\n  };\n\n  /**\n   * Determines if a request is attempting to redirect to an invalid host. We identify this as a case\n   * where the top level frame has navigated to either an invalid IDP host or auto-submit host.\n   *\n   * @param details - The details of the request.\n   * @param isValidInitiator - A flag indicating if the initiator of the request is valid.\n   */\n  private requestRedirectsToInvalidHost = (\n    details: chrome.webRequest.WebRequestBodyDetails,\n    isValidInitiator: boolean,\n  ) => {\n    return (\n      this.validAutoSubmitHosts.size > 0 &&\n      this.isRequestInMainFrame(details) &&\n      (!isValidInitiator || !this.isValidAutoSubmitHost(details.url))\n    );\n  };\n\n  /**\n   * Initializes the auto-submit flow for the given request, and adds the routed-to URL\n   *  to the list of valid auto-submit hosts.\n   *\n   * @param details - The details of the request.\n   */\n  private setupAutoSubmitFlow = (details: chrome.webRequest.WebRequestBodyDetails) => {\n    if (this.isRequestInMainFrame(details)) {\n      this.currentAutoSubmitHostData = {\n        url: details.url,\n        tabId: details.tabId,\n      };\n    }\n\n    const autoSubmitHost = this.getUrlHost(details.url);\n    this.validAutoSubmitHosts.add(autoSubmitHost);\n    chrome.webNavigation.onCompleted.removeListener(this.handleAutoSubmitHostNavigationCompleted);\n    chrome.webNavigation.onCompleted.addListener(this.handleAutoSubmitHostNavigationCompleted, {\n      url: [{ hostEquals: autoSubmitHost }],\n    });\n  };\n\n  /**\n   * Triggers the injection of the auto-submit login content script once the page has completely loaded.\n   *\n   * @param details - The details of the navigation event.\n   */\n  private handleAutoSubmitHostNavigationCompleted = (\n    details: chrome.webNavigation.WebNavigationFramedCallbackDetails,\n  ) => {\n    if (\n      details.tabId === this.currentAutoSubmitHostData.tabId &&\n      this.urlContainsAutoFillParam(details.url)\n    ) {\n      this.injectAutoSubmitLoginScript(details.tabId).catch((error) =>\n        this.logService.error(error),\n      );\n      chrome.webNavigation.onCompleted.removeListener(this.handleAutoSubmitHostNavigationCompleted);\n    }\n  };\n\n  /**\n   * Triggers the injection of the auto-submit login script if the user is authenticated.\n   *\n   * @param tabId - The ID of the tab to inject the script into.\n   */\n  private injectAutoSubmitLoginScript = async (tabId: number) => {\n    if ((await this.getAuthStatus()) === AuthenticationStatus.Unlocked) {\n      await this.scriptInjectorService.inject({\n        tabId: tabId,\n        injectDetails: {\n          file: \"content/auto-submit-login.js\",\n          runAt: \"document_start\",\n          frame: \"all_frames\",\n        },\n      });\n    }\n  };\n\n  /**\n   * Retrieves the authentication status of the active user.\n   */\n  private getAuthStatus = async () => {\n    return firstValueFrom(this.authService.activeAccountStatus$);\n  };\n\n  /**\n   * Handles web requests that are triggering a redirect. Stores the redirect URL as a valid\n   * auto-submit host if the redirectUrl should trigger an auto-submit.\n   *\n   * @param details - The details of the request.\n   */\n  private handleWebRequestOnBeforeRedirect = (\n    details: chrome.webRequest.WebRedirectionResponseDetails,\n  ) => {\n    if (this.isRequestInMainFrame(details) && this.urlContainsAutoFillParam(details.redirectUrl)) {\n      this.validAutoSubmitHosts.add(this.getUrlHost(details.redirectUrl));\n      this.validAutoSubmitHosts.add(this.getUrlHost(details.url));\n    }\n  };\n\n  /**\n   * Determines if the provided URL is a valid initiator for the auto-submit login feature.\n   *\n   * @param url - The URL to validate as an initiator.\n   */\n  private isValidInitiator = (url: string) => {\n    return this.isValidIdpHost(url) || this.isValidAutoSubmitHost(url);\n  };\n\n  /**\n   * Determines if the provided URL is a valid IDP host.\n   *\n   * @param url - The URL to validate as an IDP host.\n   */\n  private isValidIdpHost = (url: string) => {\n    const host = this.getUrlHost(url);\n    if (!host) {\n      return false;\n    }\n\n    return this.validIdpHosts.has(host);\n  };\n\n  /**\n   * Determines if the provided URL is a valid auto-submit host.\n   *\n   * @param url - The URL to validate as an auto-submit host.\n   */\n  private isValidAutoSubmitHost = (url: string) => {\n    const host = this.getUrlHost(url);\n    if (!host) {\n      return false;\n    }\n\n    return this.validAutoSubmitHosts.has(host);\n  };\n\n  /**\n   * Removes the provided URL from the list of valid auto-submit hosts.\n   *\n   * @param url - The URL to remove from the list of valid auto-submit hosts.\n   */\n  private removeUrlFromAutoSubmitHosts = (url: string) => {\n    this.validAutoSubmitHosts.delete(this.getUrlHost(url));\n  };\n\n  /**\n   * Disables an active auto-submit login workflow. This triggers when a request is made that should\n   * not trigger auto-submit. If the initiator of the request is a valid auto-submit host, we need to\n   * treat this request as a navigation within the current website, but away from the intended\n   * auto-submit route. If that isn't the case, we capture the tab's details and check if an\n   * internal navigation is occurring. If so, we invalidate that host.\n   *\n   * @param requestInitiator - The initiator of the request.\n   * @param details - The details of the request.\n   */\n  private disableAutoSubmitFlow = async (\n    requestInitiator: string,\n    details: chrome.webRequest.WebRequestBodyDetails,\n  ) => {\n    if (this.isValidAutoSubmitHost(requestInitiator)) {\n      this.removeUrlFromAutoSubmitHosts(requestInitiator);\n      return;\n    }\n\n    if (details.tabId < 0) {\n      return;\n    }\n\n    const tab = await BrowserApi.getTab(details.tabId);\n    if (this.isValidAutoSubmitHost(tab?.url)) {\n      this.removeUrlFromAutoSubmitHosts(tab.url);\n    }\n  };\n\n  /**\n   * Clears all data associated with the current auto-submit host workflow.\n   */\n  private clearAutoSubmitHostData = () => {\n    this.validAutoSubmitHosts.clear();\n    this.currentAutoSubmitHostData = {};\n    this.mostRecentIdpHost = {};\n  };\n\n  /**\n   * Determines if the provided URL is a valid auto-submit host. If the request is occurring\n   * in the main frame, we will check for the presence of the `autofill=1` query parameter.\n   * If the request is occurring in a sub frame, the main frame URL should be set as a\n   * valid auto-submit host and can be used to validate the request.\n   *\n   * @param details - The details of the request.\n   * @param initiator - The initiator of the request.\n   */\n  private shouldRouteTriggerAutoSubmit = (\n    details: chrome.webRequest.ResourceRequest,\n    initiator: string,\n  ) => {\n    if (this.isRequestInMainFrame(details)) {\n      return !!(\n        this.urlContainsAutoFillParam(details.url) ||\n        this.triggerAutoSubmitAfterRedirectOnSafari(details.url)\n      );\n    }\n\n    return this.isValidAutoSubmitHost(initiator);\n  };\n\n  /**\n   * Determines if the provided URL contains the `autofill=1` query parameter.\n   *\n   * @param url - The URL to check for the `autofill=1` query parameter.\n   */\n  private urlContainsAutoFillParam = (url: string) => {\n    try {\n      const urlObj = new URL(url);\n      return urlObj.search.indexOf(\"autofill=1\") !== -1;\n    } catch {\n      return false;\n    }\n  };\n\n  /**\n   * Extracts the host from a given URL.\n   * Will return an empty string if the provided URL is invalid.\n   *\n   * @param url - The URL to extract the host from.\n   */\n  private getUrlHost = (url: string) => {\n    let parsedUrl = url;\n    if (!parsedUrl) {\n      return \"\";\n    }\n\n    if (!parsedUrl.startsWith(\"http\")) {\n      parsedUrl = `https://${parsedUrl}`;\n    }\n\n    try {\n      const urlObj = new URL(parsedUrl);\n      return urlObj.host;\n    } catch {\n      return \"\";\n    }\n  };\n\n  /**\n   * Determines the initiator of a request. If the request is happening in a Safari browser, we\n   * need to determine the initiator based on the stored most recently visited IDP host. When\n   * handling a sub frame request in Safari, we treat the passed URL detail as the initiator\n   * of the request, as long as an IPD host has been previously identified.\n   *\n   * @param details - The details of the request.\n   */\n  private getRequestInitiator = (details: chrome.webRequest.ResourceRequest) => {\n    if (!this.isSafariBrowser) {\n      return details.initiator || (details as browser.webRequest._OnBeforeRequestDetails).originUrl;\n    }\n\n    if (this.isRequestInMainFrame(details)) {\n      return this.mostRecentIdpHost.url;\n    }\n\n    if (!this.mostRecentIdpHost.url) {\n      return \"\";\n    }\n\n    return details.url;\n  };\n\n  /**\n   * Verifies if a request is occurring in the main / top-level frame of a tab.\n   *\n   * @param details - The details of the request.\n   */\n  private isRequestInMainFrame = (details: chrome.webRequest.ResourceRequest) => {\n    if (this.isSafariBrowser) {\n      return details.frameId === 0;\n    }\n\n    return details.type === \"main_frame\";\n  };\n\n  /**\n   * Triggers the auto-submit login feature on the provided tab.\n   *\n   * @param message - The auto-submit login message.\n   * @param sender - The message sender.\n   */\n  private triggerAutoSubmitLogin = async (\n    message: AutoSubmitLoginMessage,\n    sender: chrome.runtime.MessageSender,\n  ) => {\n    await this.autofillService.doAutoFillOnTab(\n      [\n        {\n          frameId: sender.frameId,\n          tab: sender.tab,\n          details: message.pageDetails,\n        },\n      ],\n      sender.tab,\n      true,\n      true,\n    );\n  };\n\n  /**\n   * Handles the completion of auto-submit login workflow on a multistep form.\n   *\n   * @param sender - The message sender.\n   */\n  private handleMultiStepAutoSubmitLoginComplete = (sender: chrome.runtime.MessageSender) => {\n    this.removeUrlFromAutoSubmitHosts(sender.url);\n  };\n\n  /**\n   * Initializes several fallback event listeners for the auto-submit login feature on the Safari browser.\n   * This is required due to limitations that Safari has with the `webRequest` API. Specifically, Safari\n   * does not provide the `initiator` of a request, which is required to determine if a request is coming\n   * from a valid IDP host.\n   */\n  private async initSafari() {\n    const currentTab = await BrowserApi.getTabFromCurrentWindow();\n    if (currentTab) {\n      this.setMostRecentIdpHost(currentTab.url, currentTab.id);\n    }\n\n    chrome.tabs.onActivated.addListener(this.handleSafariTabOnActivated);\n    chrome.tabs.onUpdated.addListener(this.handleSafariTabOnUpdated);\n    chrome.webNavigation.onCompleted.addListener(this.handleSafariWebNavigationOnCompleted);\n  }\n\n  /**\n   * Sets the most recent IDP host based on the provided URL and tab ID.\n   *\n   * @param url - The URL to set as the most recent IDP host.\n   * @param tabId - The tab ID associated with the URL.\n   */\n  private setMostRecentIdpHost(url: string, tabId: number) {\n    if (this.isValidIdpHost(url)) {\n      this.mostRecentIdpHost = { url, tabId };\n    }\n  }\n\n  /**\n   * Triggers an update of the most recently visited IDP host when a user focuses a different tab.\n   *\n   * @param activeInfo - The active tab information.\n   */\n  private handleSafariTabOnActivated = async (activeInfo: chrome.tabs.TabActiveInfo) => {\n    if (activeInfo.tabId < 0) {\n      return;\n    }\n\n    const tab = await BrowserApi.getTab(activeInfo.tabId);\n    if (tab) {\n      this.setMostRecentIdpHost(tab.url, tab.id);\n    }\n  };\n\n  /**\n   * Triggers an update of the most recently visited IDP host when the URL of a tab is updated.\n   *\n   * @param tabId - The tab ID associated with the URL.\n   * @param changeInfo - The change information of the tab.\n   */\n  private handleSafariTabOnUpdated = (tabId: number, changeInfo: chrome.tabs.TabChangeInfo) => {\n    if (changeInfo) {\n      this.setMostRecentIdpHost(changeInfo.url, tabId);\n    }\n  };\n\n  /**\n   * Handles the completion of a web navigation event on the Safari browser. If the navigation event\n   * is for the main frame and the URL is a valid IDP host, the most recent IDP host will be updated.\n   *\n   * @param details - The web navigation details.\n   */\n  private handleSafariWebNavigationOnCompleted = (\n    details: chrome.webNavigation.WebNavigationFramedCallbackDetails,\n  ) => {\n    if (details.frameId === 0 && this.isValidIdpHost(details.url)) {\n      this.validAutoSubmitHosts.clear();\n      this.mostRecentIdpHost = {\n        url: details.url,\n        tabId: details.tabId,\n      };\n      chrome.tabs.onRemoved.addListener(this.handleSafariTabOnRemoved);\n    }\n  };\n\n  /**\n   * Handles the removal of a tab on the Safari browser. If the tab being removed is the current\n   * auto-submit host tab, all data associated with the current auto-submit workflow will be cleared.\n   *\n   * @param tabId - The tab ID of the tab being removed.\n   */\n  private handleSafariTabOnRemoved = (tabId: number) => {\n    if (this.currentAutoSubmitHostData.tabId === tabId) {\n      this.clearAutoSubmitHostData();\n      chrome.tabs.onRemoved.removeListener(this.handleSafariTabOnRemoved);\n    }\n  };\n\n  /**\n   * Determines if the auto-submit login feature should be triggered after a redirect on the Safari browser.\n   * This is required because Safari does not provide query params for the URL that is being routed to within\n   * the onBefore request listener.\n   *\n   * @param url - The URL of the redirect.\n   */\n  private triggerAutoSubmitAfterRedirectOnSafari = (url: string) => {\n    return this.isSafariBrowser && this.isValidAutoSubmitHost(url);\n  };\n\n  /**\n   * Handles incoming messages from the extension. The message is only listened to if it comes from\n   * the current auto-submit workflow tab and the URL is a valid auto-submit host.\n   *\n   * @param message - The incoming message.\n   * @param sender - The message sender.\n   * @param sendResponse - The response callback.\n   */\n  private handleExtensionMessage = async (\n    message: AutoSubmitLoginMessage,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response?: any) => void,\n  ) => {\n    const { tab, url } = sender;\n    if (tab?.id !== this.currentAutoSubmitHostData.tabId || !this.isValidAutoSubmitHost(url)) {\n      return null;\n    }\n\n    const handler: CallableFunction | undefined = this.extensionMessageHandlers[message?.command];\n    if (!handler) {\n      return null;\n    }\n\n    const messageResponse = handler({ message, sender });\n    if (typeof messageResponse === \"undefined\") {\n      return null;\n    }\n\n    Promise.resolve(messageResponse)\n      .then((response) => sendResponse(response))\n      .catch((error) => this.logService.error(error));\n    return true;\n  };\n\n  /**\n   * Tears down all established event listeners for the auto-submit login feature.\n   */\n  private destroy() {\n    BrowserApi.removeListener(chrome.runtime.onMessage, this.handleExtensionMessage);\n    chrome.webRequest.onBeforeRequest.removeListener(this.handleOnBeforeRequest);\n    chrome.webRequest.onBeforeRedirect.removeListener(this.handleWebRequestOnBeforeRedirect);\n    chrome.webNavigation.onCompleted.removeListener(this.handleAutoSubmitHostNavigationCompleted);\n    chrome.webNavigation.onCompleted.removeListener(this.handleSafariWebNavigationOnCompleted);\n    chrome.tabs.onActivated.removeListener(this.handleSafariTabOnActivated);\n    chrome.tabs.onUpdated.removeListener(this.handleSafariTabOnUpdated);\n    chrome.tabs.onRemoved.removeListener(this.handleSafariTabOnRemoved);\n  }\n}\n","import { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { ContextMenuClickedHandler } from \"../browser/context-menu-clicked-handler\";\n\nimport { LockedVaultPendingNotificationsData } from \"./abstractions/notification.background\";\n\nexport default class ContextMenusBackground {\n  private contextMenus: typeof chrome.contextMenus;\n\n  constructor(private contextMenuClickedHandler: ContextMenuClickedHandler) {\n    this.contextMenus = chrome.contextMenus;\n  }\n\n  init() {\n    if (!this.contextMenus) {\n      return;\n    }\n\n    this.contextMenus.onClicked.addListener((info, tab) =>\n      this.contextMenuClickedHandler.run(info, tab),\n    );\n\n    BrowserApi.messageListener(\n      \"contextmenus.background\",\n      (\n        msg: { command: string; data: LockedVaultPendingNotificationsData },\n        sender: chrome.runtime.MessageSender,\n      ) => {\n        if (msg.command === \"unlockCompleted\" && msg.data.target === \"contextmenus.background\") {\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.contextMenuClickedHandler\n            .cipherAction(\n              msg.data.commandToRetry.message.contextMenuOnClickData,\n              msg.data.commandToRetry.sender.tab,\n            )\n            .then(() => {\n              // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n            });\n        }\n      },\n    );\n  }\n}\n","import { BrowserApi } from \"../browser/browser-api\";\n\nimport { ScrollOptions } from \"./abstractions/browser-popup-utils.abstractions\";\n\nclass BrowserPopupUtils {\n  /**\n   * Identifies if the popup is within the sidebar.\n   *\n   * @param win - The passed window object.\n   */\n  static inSidebar(win: Window): boolean {\n    return BrowserPopupUtils.urlContainsSearchParams(win, \"uilocation\", \"sidebar\");\n  }\n\n  /**\n   * Identifies if the popup is within the popout.\n   *\n   * @param win - The passed window object.\n   */\n  static inPopout(win: Window): boolean {\n    return BrowserPopupUtils.urlContainsSearchParams(win, \"uilocation\", \"popout\");\n  }\n\n  /**\n   * Identifies if the popup is within the single action popout.\n   *\n   * @param win - The passed window object.\n   * @param popoutKey - The single action popout key used to identify the popout.\n   */\n  static inSingleActionPopout(win: Window, popoutKey: string): boolean {\n    return BrowserPopupUtils.urlContainsSearchParams(win, \"singleActionPopout\", popoutKey);\n  }\n\n  /**\n   * Identifies if the popup is within the popup.\n   *\n   * @param win - The passed window object.\n   */\n  static inPopup(win: Window): boolean {\n    return (\n      win.location.href.indexOf(\"uilocation=\") === -1 ||\n      win.location.href.indexOf(\"uilocation=popup\") > -1\n    );\n  }\n\n  /**\n   * Gets the scroll position of the popup.\n   *\n   * @param win - The passed window object.\n   * @param scrollingContainer - Element tag name of the scrolling container.\n   */\n  static getContentScrollY(win: Window, scrollingContainer = \"main\"): number {\n    const content = win.document.getElementsByTagName(scrollingContainer)[0];\n    return content.scrollTop;\n  }\n\n  /**\n   * Sets the scroll position of the popup.\n   *\n   * @param win - The passed window object.\n   * @param scrollYAmount - The amount to scroll the popup.\n   * @param options - Allows for setting the delay in ms to wait before scrolling the popup and the scrolling container tag name.\n   */\n  static async setContentScrollY(\n    win: Window,\n    scrollYAmount: number | undefined,\n    options: ScrollOptions = {\n      delay: 0,\n      containerSelector: \"main\",\n    },\n  ) {\n    const { delay, containerSelector } = options;\n    return new Promise<void>((resolve) =>\n      win.setTimeout(() => {\n        const container = win.document.querySelector(containerSelector);\n        if (!isNaN(scrollYAmount) && container) {\n          container.scrollTop = scrollYAmount;\n        }\n\n        resolve();\n      }, delay),\n    );\n  }\n\n  /**\n   * Identifies if the background page needs to be initialized.\n   */\n  static backgroundInitializationRequired() {\n    return !BrowserApi.getBackgroundPage() || BrowserApi.isManifestVersion(3);\n  }\n\n  /**\n   * Opens a popout window of any extension page. If the popout window is already open, it will be focused.\n   *\n   * @param extensionUrlPath - A relative path to the extension page. Example: \"popup/index.html#/tabs/vault\"\n   * @param options - Options for the popout window that overrides the default options.\n   */\n  static async openPopout(\n    extensionUrlPath: string,\n    options: {\n      senderWindowId?: number;\n      singleActionKey?: string;\n      forceCloseExistingWindows?: boolean;\n      windowOptions?: Partial<chrome.windows.CreateData>;\n    } = {},\n  ) {\n    const { senderWindowId, singleActionKey, forceCloseExistingWindows, windowOptions } = options;\n    const defaultPopoutWindowOptions: chrome.windows.CreateData = {\n      type: \"popup\",\n      focused: true,\n      width: 380,\n      height: 630,\n    };\n    const offsetRight = 15;\n    const offsetTop = 90;\n    const popupWidth = defaultPopoutWindowOptions.width;\n    const senderWindow = await BrowserApi.getWindow(senderWindowId);\n    const popoutWindowOptions = {\n      left: senderWindow.left + senderWindow.width - popupWidth - offsetRight,\n      top: senderWindow.top + offsetTop,\n      ...defaultPopoutWindowOptions,\n      ...windowOptions,\n      url: BrowserPopupUtils.buildPopoutUrl(extensionUrlPath, singleActionKey),\n    };\n\n    if (\n      (await BrowserPopupUtils.isSingleActionPopoutOpen(\n        singleActionKey,\n        popoutWindowOptions,\n        forceCloseExistingWindows,\n      )) &&\n      !forceCloseExistingWindows\n    ) {\n      return;\n    }\n\n    return await BrowserApi.createWindow(popoutWindowOptions);\n  }\n\n  /**\n   * Closes the single action popout window.\n   *\n   * @param popoutKey - The single action popout key used to identify the popout.\n   * @param delayClose - The amount of time to wait before closing the popout. Defaults to 0.\n   */\n  static async closeSingleActionPopout(popoutKey: string, delayClose = 0): Promise<void> {\n    const extensionUrl = chrome.runtime.getURL(\"popup/index.html\");\n    const tabs = await BrowserApi.tabsQuery({ url: `${extensionUrl}*` });\n    for (const tab of tabs) {\n      if (!tab.url.includes(`singleActionPopout=${popoutKey}`)) {\n        continue;\n      }\n\n      setTimeout(() => BrowserApi.removeWindow(tab.windowId), delayClose);\n    }\n  }\n\n  /**\n   * Opens a popout window for the current page.\n   * If the current page is set for the current tab, then the\n   * popout window will be set for the vault items listing tab.\n   *\n   * @param win - The passed window object.\n   * @param href - The href to open in the popout window.\n   */\n  static async openCurrentPagePopout(win: Window, href: string = null) {\n    const popoutUrl = href || win.location.href;\n    const parsedUrl = new URL(popoutUrl);\n    let hashRoute = parsedUrl.hash;\n    if (hashRoute.startsWith(\"#/tabs/current\")) {\n      hashRoute = \"#/tabs/vault\";\n    }\n\n    await BrowserPopupUtils.openPopout(`${parsedUrl.pathname}${hashRoute}`);\n\n    if (BrowserPopupUtils.inPopup(win)) {\n      BrowserApi.closePopup(win);\n    }\n  }\n\n  /**\n   * Identifies if a single action window is open based on the passed popoutKey.\n   * Will focus the existing window, and close any other windows that might exist\n   * with the same popout key.\n   *\n   * @param popoutKey - The single action popout key used to identify the popout.\n   * @param windowInfo - The window info to use to update the existing window.\n   * @param forceCloseExistingWindows - Identifies if the existing windows should be closed.\n   */\n  private static async isSingleActionPopoutOpen(\n    popoutKey: string | undefined,\n    windowInfo: chrome.windows.CreateData,\n    forceCloseExistingWindows = false,\n  ) {\n    if (!popoutKey) {\n      return false;\n    }\n\n    const extensionUrl = chrome.runtime.getURL(\"popup/index.html\");\n    const popoutTabs = (await BrowserApi.tabsQuery({ url: `${extensionUrl}*` })).filter((tab) =>\n      tab.url.includes(`singleActionPopout=${popoutKey}`),\n    );\n    if (popoutTabs.length === 0) {\n      return false;\n    }\n\n    if (!forceCloseExistingWindows) {\n      // Update first, remove it from list\n      const tab = popoutTabs.shift();\n      await BrowserApi.updateWindowProperties(tab.windowId, {\n        focused: true,\n        width: windowInfo.width,\n        height: windowInfo.height,\n        top: windowInfo.top,\n        left: windowInfo.left,\n      });\n    }\n\n    popoutTabs.forEach((tab) => BrowserApi.removeWindow(tab.windowId));\n\n    return true;\n  }\n\n  /**\n   * Identifies if the url contains the specified search param and value.\n   *\n   * @param win - The passed window object.\n   * @param searchParam - The search param to identify.\n   * @param searchValue - The search value to identify.\n   */\n  private static urlContainsSearchParams(\n    win: Window,\n    searchParam: string,\n    searchValue: string,\n  ): boolean {\n    return win.location.href.indexOf(`${searchParam}=${searchValue}`) > -1;\n  }\n\n  /**\n   * Builds the popout url path. Ensures that the uilocation param is set to\n   * `popout` and that the singleActionPopout param is set to the passed singleActionKey.\n   *\n   * @param extensionUrlPath - A relative path to the extension page. Example: \"popup/index.html#/tabs/vault\"\n   * @param singleActionKey - The single action popout key used to identify the popout.\n   */\n  private static buildPopoutUrl(extensionUrlPath: string, singleActionKey: string) {\n    const parsedUrl = new URL(chrome.runtime.getURL(extensionUrlPath));\n    parsedUrl.searchParams.set(\"uilocation\", \"popout\");\n\n    if (singleActionKey) {\n      parsedUrl.searchParams.set(\"singleActionPopout\", singleActionKey);\n    }\n\n    return parsedUrl.toString();\n  }\n}\n\nexport default BrowserPopupUtils;\n","import { BrowserApi } from \"../../../platform/browser/browser-api\";\nimport BrowserPopupUtils from \"../../../platform/popup/browser-popup-utils\";\n\nconst AuthPopoutType = {\n  unlockExtension: \"auth_unlockExtension\",\n  ssoAuthResult: \"auth_ssoAuthResult\",\n  twoFactorAuth: \"auth_twoFactorAuth\",\n} as const;\nconst extensionUnlockUrls = new Set([\n  chrome.runtime.getURL(\"popup/index.html#/lock\"),\n  chrome.runtime.getURL(\"popup/index.html#/home\"),\n]);\n\n/**\n * Opens a window that facilitates unlocking / logging into the extension.\n *\n * @param senderTab - Used to determine the windowId of the sender.\n * @param skipNotification - Used to determine whether to show the unlock notification.\n */\nasync function openUnlockPopout(senderTab: chrome.tabs.Tab, skipNotification = false) {\n  const existingPopoutWindowTabs = await BrowserApi.tabsQuery({ windowType: \"popup\" });\n  existingPopoutWindowTabs.forEach((tab) => {\n    if (extensionUnlockUrls.has(tab.url)) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      BrowserApi.removeWindow(tab.windowId);\n    }\n  });\n\n  await BrowserPopupUtils.openPopout(\"popup/index.html\", {\n    singleActionKey: AuthPopoutType.unlockExtension,\n    senderWindowId: senderTab.windowId,\n  });\n  await BrowserApi.tabSendMessageData(senderTab, \"bgUnlockPopoutOpened\", { skipNotification });\n}\n\n/**\n * Closes the unlock popout window.\n */\nasync function closeUnlockPopout() {\n  await BrowserPopupUtils.closeSingleActionPopout(AuthPopoutType.unlockExtension);\n}\n\n/**\n * Opens a window that facilitates presenting the results for SSO authentication.\n *\n * @param resultData - The result data from the SSO authentication.\n */\nasync function openSsoAuthResultPopout(resultData: { code: string; state: string }) {\n  const { code, state } = resultData;\n  const authResultUrl = `popup/index.html#/sso?code=${encodeURIComponent(\n    code,\n  )}&state=${encodeURIComponent(state)}`;\n\n  await BrowserPopupUtils.openPopout(authResultUrl, {\n    singleActionKey: AuthPopoutType.ssoAuthResult,\n  });\n}\n\n/**\n * Opens a window that facilitates two-factor authentication.\n *\n * @param twoFactorAuthData - The data from the two-factor authentication.\n */\nasync function openTwoFactorAuthPopout(twoFactorAuthData: { data: string; remember: string }) {\n  const { data, remember } = twoFactorAuthData;\n  const params =\n    `webAuthnResponse=${encodeURIComponent(data)};` + `remember=${encodeURIComponent(remember)}`;\n  const twoFactorUrl = `popup/index.html#/2fa;${params}`;\n\n  await BrowserPopupUtils.openPopout(twoFactorUrl, {\n    singleActionKey: AuthPopoutType.twoFactorAuth,\n  });\n}\n\n/**\n * Closes the two-factor authentication popout window.\n */\nasync function closeTwoFactorAuthPopout() {\n  await BrowserPopupUtils.closeSingleActionPopout(AuthPopoutType.twoFactorAuth);\n}\n\nexport {\n  AuthPopoutType,\n  openUnlockPopout,\n  closeUnlockPopout,\n  openSsoAuthResultPopout,\n  openTwoFactorAuthPopout,\n  closeTwoFactorAuthPopout,\n};\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\n\nimport { BrowserApi } from \"../../../platform/browser/browser-api\";\nimport BrowserPopupUtils from \"../../../platform/popup/browser-popup-utils\";\n\nconst VaultPopoutType = {\n  viewVaultItem: \"vault_viewVaultItem\",\n  addEditVaultItem: \"vault_AddEditVaultItem\",\n  fido2Popout: \"vault_Fido2Popout\",\n} as const;\n\n/**\n * Opens a popout window that facilitates viewing a vault item.\n *\n * @param senderTab - The tab that sent the request.\n * @param cipherOptions - The cipher id and action to perform.\n */\nasync function openViewVaultItemPopout(\n  senderTab: chrome.tabs.Tab,\n  cipherOptions: {\n    cipherId: string;\n    action: string;\n    forceCloseExistingWindows?: boolean;\n  },\n) {\n  const { cipherId, action, forceCloseExistingWindows } = cipherOptions;\n  let promptWindowPath = \"popup/index.html#/view-cipher\";\n  let queryParamToken = \"?\";\n  const formatQueryString = (key: string, value: string) => {\n    const queryString = `${queryParamToken}${key}=${value}`;\n    queryParamToken = \"&\";\n    return queryString;\n  };\n\n  if (cipherId) {\n    promptWindowPath += formatQueryString(\"cipherId\", cipherId);\n  }\n  if (senderTab.id) {\n    promptWindowPath += formatQueryString(\"senderTabId\", String(senderTab.id));\n  }\n  if (action) {\n    promptWindowPath += formatQueryString(\"action\", action);\n  }\n\n  await BrowserPopupUtils.openPopout(promptWindowPath, {\n    singleActionKey: `${VaultPopoutType.viewVaultItem}_${cipherId}`,\n    senderWindowId: senderTab.windowId,\n    forceCloseExistingWindows,\n  });\n}\n\n/**\n * Closes the view vault item popout window.\n *\n * @param singleActionKey - The single action popout key used to identify the popout.\n * @param delayClose - The amount of time to wait before closing the popout. Defaults to 0.\n */\nasync function closeViewVaultItemPopout(singleActionKey: string, delayClose = 0) {\n  await BrowserPopupUtils.closeSingleActionPopout(singleActionKey, delayClose);\n}\n\n/**\n * Opens a popout window that facilitates re-prompting for\n * the password of a vault item.\n *\n * @param senderTab - The tab that sent the request.\n * @param cipherOptions - The cipher id and action to perform.\n */\nasync function openVaultItemPasswordRepromptPopout(\n  senderTab: chrome.tabs.Tab,\n  cipherOptions: {\n    cipherId: string;\n    action: string;\n  },\n) {\n  await openViewVaultItemPopout(senderTab, {\n    forceCloseExistingWindows: true,\n    ...cipherOptions,\n  });\n  await BrowserApi.tabSendMessageData(senderTab, \"bgVaultItemRepromptPopoutOpened\");\n}\n\n/**\n * Opens a popout window that facilitates adding or editing a vault item.\n *\n * @param senderTab - The window id of the sender.\n * @param cipherOptions - Options passed as query params to the popout.\n */\nasync function openAddEditVaultItemPopout(\n  senderTab: chrome.tabs.Tab,\n  cipherOptions: { cipherId?: string; cipherType?: CipherType } = {},\n) {\n  const { cipherId, cipherType } = cipherOptions;\n  const { url, windowId } = senderTab;\n  let singleActionKey = VaultPopoutType.addEditVaultItem;\n  let addEditCipherUrl = \"popup/index.html#/edit-cipher\";\n  let queryParamToken = \"?\";\n  const formatQueryString = (key: string, value: string) => {\n    const queryString = `${queryParamToken}${key}=${value}`;\n    queryParamToken = \"&\";\n    return queryString;\n  };\n\n  if (cipherId && !cipherType) {\n    singleActionKey += `_${cipherId}`;\n    addEditCipherUrl += formatQueryString(\"cipherId\", cipherId);\n  }\n  if (cipherType && !cipherId) {\n    singleActionKey += `_${cipherType}`;\n    addEditCipherUrl += formatQueryString(\"type\", String(cipherType));\n  }\n  if (senderTab.url) {\n    addEditCipherUrl += formatQueryString(\"uri\", url);\n  }\n\n  await BrowserPopupUtils.openPopout(addEditCipherUrl, {\n    singleActionKey,\n    senderWindowId: windowId,\n  });\n}\n\n/**\n * Closes the add/edit vault item popout window.\n *\n * @param delayClose - The amount of time to wait before closing the popout. Defaults to 0.\n */\nasync function closeAddEditVaultItemPopout(delayClose = 0) {\n  await BrowserPopupUtils.closeSingleActionPopout(VaultPopoutType.addEditVaultItem, delayClose);\n}\n\n/**\n * Opens a popout window that facilitates FIDO2\n * authentication and passkey management.\n *\n * @param senderTab - The tab that sent the request.\n * @param options - Options passed as query params to the popout.\n */\nasync function openFido2Popout(\n  senderTab: chrome.tabs.Tab,\n  options: {\n    sessionId: string;\n    fallbackSupported: boolean;\n  },\n): Promise<chrome.windows.Window[\"id\"]> {\n  const { sessionId, fallbackSupported } = options;\n  const promptWindowPath =\n    \"popup/index.html#/fido2\" +\n    `?sessionId=${sessionId}` +\n    `&fallbackSupported=${fallbackSupported}` +\n    `&senderTabId=${senderTab.id}` +\n    `&senderUrl=${encodeURIComponent(senderTab.url)}`;\n\n  const popoutWindow = await BrowserPopupUtils.openPopout(promptWindowPath, {\n    singleActionKey: `${VaultPopoutType.fido2Popout}_${sessionId}`,\n    senderWindowId: senderTab.windowId,\n    forceCloseExistingWindows: true,\n    windowOptions: { height: 570 },\n  });\n\n  return popoutWindow.id;\n}\n\n/**\n * Closes the FIDO2 popout window associated with the passed session ID.\n *\n * @param sessionId - The session ID of the popout to close.\n */\nasync function closeFido2Popout(sessionId: string): Promise<void> {\n  await BrowserPopupUtils.closeSingleActionPopout(`${VaultPopoutType.fido2Popout}_${sessionId}`);\n}\n\nexport {\n  VaultPopoutType,\n  openViewVaultItemPopout,\n  closeViewVaultItemPopout,\n  openVaultItemPasswordRepromptPopout,\n  openAddEditVaultItemPopout,\n  closeAddEditVaultItemPopout,\n  openFido2Popout,\n  closeFido2Popout,\n};\n","const NotificationQueueMessageType = {\n  AddLogin: \"add\",\n  ChangePassword: \"change\",\n  UnlockVault: \"unlock\",\n  RequestFilelessImport: \"fileless-import\",\n} as const;\n\ntype NotificationQueueMessageTypes =\n  (typeof NotificationQueueMessageType)[keyof typeof NotificationQueueMessageType];\n\nexport { NotificationQueueMessageType, NotificationQueueMessageTypes };\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport {\n  ExtensionCommand,\n  ExtensionCommandType,\n  NOTIFICATION_BAR_LIFESPAN_MS,\n} from \"@bitwarden/common/autofill/constants\";\nimport { DomainSettingsService } from \"@bitwarden/common/autofill/services/domain-settings.service\";\nimport { UserNotificationSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/user-notification-settings.service\";\nimport { NeverDomains } from \"@bitwarden/common/models/domain/domain-service\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { ServerConfig } from \"@bitwarden/common/platform/abstractions/config/server-config\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ThemeStateService } from \"@bitwarden/common/platform/theming/theme-state.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { openUnlockPopout } from \"../../auth/popup/utils/auth-popout-window\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { openAddEditVaultItemPopout } from \"../../vault/popup/utils/vault-popout-window\";\nimport { NotificationQueueMessageType } from \"../enums/notification-queue-message-type.enum\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\n\nimport {\n  AddChangePasswordQueueMessage,\n  AddLoginQueueMessage,\n  AddRequestFilelessImportQueueMessage,\n  AddUnlockVaultQueueMessage,\n  ChangePasswordMessageData,\n  AddLoginMessageData,\n  NotificationQueueMessageItem,\n  LockedVaultPendingNotificationsData,\n  NotificationBackgroundExtensionMessage,\n  NotificationBackgroundExtensionMessageHandlers,\n} from \"./abstractions/notification.background\";\nimport { NotificationTypeData } from \"./abstractions/overlay-notifications.background\";\nimport { OverlayBackgroundExtensionMessage } from \"./abstractions/overlay.background\";\n\nexport default class NotificationBackground {\n  private openUnlockPopout = openUnlockPopout;\n  private openAddEditVaultItemPopout = openAddEditVaultItemPopout;\n  private notificationQueue: NotificationQueueMessageItem[] = [];\n  private allowedRetryCommands: Set<ExtensionCommandType> = new Set([\n    ExtensionCommand.AutofillLogin,\n    ExtensionCommand.AutofillCard,\n    ExtensionCommand.AutofillIdentity,\n  ]);\n  private readonly extensionMessageHandlers: NotificationBackgroundExtensionMessageHandlers = {\n    unlockCompleted: ({ message, sender }) => this.handleUnlockCompleted(message, sender),\n    bgGetFolderData: () => this.getFolderData(),\n    bgCloseNotificationBar: ({ message, sender }) =>\n      this.handleCloseNotificationBarMessage(message, sender),\n    bgAdjustNotificationBar: ({ message, sender }) =>\n      this.handleAdjustNotificationBarMessage(message, sender),\n    bgAddLogin: ({ message, sender }) => this.addLogin(message, sender),\n    bgChangedPassword: ({ message, sender }) => this.changedPassword(message, sender),\n    bgRemoveTabFromNotificationQueue: ({ sender }) =>\n      this.removeTabFromNotificationQueue(sender.tab),\n    bgSaveCipher: ({ message, sender }) => this.handleSaveCipherMessage(message, sender),\n    bgNeverSave: ({ sender }) => this.saveNever(sender.tab),\n    collectPageDetailsResponse: ({ message }) =>\n      this.handleCollectPageDetailsResponseMessage(message),\n    bgUnlockPopoutOpened: ({ message, sender }) => this.unlockVault(message, sender.tab),\n    checkNotificationQueue: ({ sender }) => this.checkNotificationQueue(sender.tab),\n    bgReopenUnlockPopout: ({ sender }) => this.openUnlockPopout(sender.tab),\n    bgGetEnableChangedPasswordPrompt: () => this.getEnableChangedPasswordPrompt(),\n    bgGetEnableAddedLoginPrompt: () => this.getEnableAddedLoginPrompt(),\n    bgGetExcludedDomains: () => this.getExcludedDomains(),\n    bgGetActiveUserServerConfig: () => this.getActiveUserServerConfig(),\n    getWebVaultUrlForNotification: () => this.getWebVaultUrl(),\n  };\n\n  constructor(\n    private autofillService: AutofillService,\n    private cipherService: CipherService,\n    private authService: AuthService,\n    private policyService: PolicyService,\n    private folderService: FolderService,\n    private userNotificationSettingsService: UserNotificationSettingsServiceAbstraction,\n    private domainSettingsService: DomainSettingsService,\n    private environmentService: EnvironmentService,\n    private logService: LogService,\n    private themeStateService: ThemeStateService,\n    private configService: ConfigService,\n    private accountService: AccountService,\n  ) {}\n\n  init() {\n    if (chrome.runtime == null) {\n      return;\n    }\n\n    this.setupExtensionMessageListener();\n\n    this.cleanupNotificationQueue();\n  }\n\n  /**\n   * Gets the enableChangedPasswordPrompt setting from the user notification settings service.\n   */\n  async getEnableChangedPasswordPrompt(): Promise<boolean> {\n    return await firstValueFrom(this.userNotificationSettingsService.enableChangedPasswordPrompt$);\n  }\n\n  /**\n   * Gets the enableAddedLoginPrompt setting from the user notification settings service.\n   */\n  async getEnableAddedLoginPrompt(): Promise<boolean> {\n    return await firstValueFrom(this.userNotificationSettingsService.enableAddedLoginPrompt$);\n  }\n\n  /**\n   * Gets the neverDomains setting from the domain settings service.\n   */\n  async getExcludedDomains(): Promise<NeverDomains> {\n    return await firstValueFrom(this.domainSettingsService.neverDomains$);\n  }\n\n  /**\n   * Gets the active user server config from the config service.\n   */\n  async getActiveUserServerConfig(): Promise<ServerConfig> {\n    return await firstValueFrom(this.configService.serverConfig$);\n  }\n\n  private async getAuthStatus() {\n    return await firstValueFrom(this.authService.activeAccountStatus$);\n  }\n\n  /**\n   * Checks the notification queue for any messages that need to be sent to the\n   * specified tab. If no tab is specified, the current tab will be used.\n   *\n   * @param tab - The tab to check the notification queue for\n   */\n  async checkNotificationQueue(tab: chrome.tabs.Tab = null): Promise<void> {\n    if (this.notificationQueue.length === 0) {\n      return;\n    }\n\n    if (tab != null) {\n      await this.doNotificationQueueCheck(tab);\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindow();\n    if (currentTab != null) {\n      await this.doNotificationQueueCheck(currentTab);\n    }\n  }\n\n  private cleanupNotificationQueue() {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].expires < new Date()) {\n        BrowserApi.tabSendMessageData(this.notificationQueue[i].tab, \"closeNotificationBar\").catch(\n          (error) => this.logService.error(error),\n        );\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n    setTimeout(() => this.cleanupNotificationQueue(), 30000); // check every 30 seconds\n  }\n\n  private async doNotificationQueueCheck(tab: chrome.tabs.Tab): Promise<void> {\n    const tabDomain = Utils.getDomain(tab?.url);\n    if (!tabDomain) {\n      return;\n    }\n\n    const queueMessage = this.notificationQueue.find(\n      (message) => message.tab.id === tab.id && message.domain === tabDomain,\n    );\n    if (queueMessage) {\n      await this.sendNotificationQueueMessage(tab, queueMessage);\n    }\n  }\n\n  private async sendNotificationQueueMessage(\n    tab: chrome.tabs.Tab,\n    notificationQueueMessage: NotificationQueueMessageItem,\n  ) {\n    const notificationType = notificationQueueMessage.type;\n\n    const typeData: NotificationTypeData = {\n      isVaultLocked: notificationQueueMessage.wasVaultLocked,\n      theme: await firstValueFrom(this.themeStateService.selectedTheme$),\n      launchTimestamp: notificationQueueMessage.launchTimestamp,\n    };\n\n    switch (notificationType) {\n      case NotificationQueueMessageType.AddLogin:\n        typeData.removeIndividualVault = await this.removeIndividualVault();\n        break;\n      case NotificationQueueMessageType.RequestFilelessImport:\n        typeData.importType = (\n          notificationQueueMessage as AddRequestFilelessImportQueueMessage\n        ).importType;\n        break;\n    }\n\n    await BrowserApi.tabSendMessageData(tab, \"openNotificationBar\", {\n      type: notificationType,\n      typeData,\n    });\n  }\n\n  /**\n   * Removes any login messages from the notification queue that\n   * are associated with the specified tab.\n   *\n   * @param tab - The tab to remove messages for\n   */\n  private removeTabFromNotificationQueue(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      if (this.notificationQueue[i].tab.id === tab.id) {\n        this.notificationQueue.splice(i, 1);\n      }\n    }\n  }\n\n  /**\n   * Adds a login message to the notification queue, prompting the user to save\n   * the login if it does not already exist in the vault. If the cipher exists\n   * but the password has changed, the user will be prompted to update the password.\n   *\n   * @param message - The message to add to the queue\n   * @param sender - The contextual sender of the message\n   */\n  async addLogin(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    const authStatus = await this.getAuthStatus();\n    if (authStatus === AuthenticationStatus.LoggedOut) {\n      return;\n    }\n\n    const loginInfo = message.login;\n    const normalizedUsername = loginInfo.username ? loginInfo.username.toLowerCase() : \"\";\n    const loginDomain = Utils.getDomain(loginInfo.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    const addLoginIsEnabled = await this.getEnableAddedLoginPrompt();\n\n    if (authStatus === AuthenticationStatus.Locked) {\n      if (addLoginIsEnabled) {\n        await this.pushAddLoginToQueue(loginDomain, loginInfo, sender.tab, true);\n      }\n\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(loginInfo.url);\n    const usernameMatches = ciphers.filter(\n      (c) => c.login.username != null && c.login.username.toLowerCase() === normalizedUsername,\n    );\n    if (addLoginIsEnabled && usernameMatches.length === 0) {\n      await this.pushAddLoginToQueue(loginDomain, loginInfo, sender.tab);\n      return;\n    }\n\n    const changePasswordIsEnabled = await this.getEnableChangedPasswordPrompt();\n\n    if (\n      changePasswordIsEnabled &&\n      usernameMatches.length === 1 &&\n      usernameMatches[0].login.password !== loginInfo.password\n    ) {\n      await this.pushChangePasswordToQueue(\n        usernameMatches[0].id,\n        loginDomain,\n        loginInfo.password,\n        sender.tab,\n      );\n    }\n  }\n\n  private async pushAddLoginToQueue(\n    loginDomain: string,\n    loginInfo: AddLoginMessageData,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false,\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const launchTimestamp = new Date().getTime();\n    const message: AddLoginQueueMessage = {\n      type: NotificationQueueMessageType.AddLogin,\n      username: loginInfo.username,\n      password: loginInfo.password,\n      domain: loginDomain,\n      uri: loginInfo.url,\n      tab: tab,\n      launchTimestamp,\n      expires: new Date(launchTimestamp + NOTIFICATION_BAR_LIFESPAN_MS),\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  /**\n   * Adds a change password message to the notification queue, prompting the user\n   * to update the password for a login that has changed.\n   *\n   * @param message - The message to add to the queue\n   * @param sender - The contextual sender of the message\n   */\n  async changedPassword(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    const changeData = message.data as ChangePasswordMessageData;\n    const loginDomain = Utils.getDomain(changeData.url);\n    if (loginDomain == null) {\n      return;\n    }\n\n    if ((await this.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      await this.pushChangePasswordToQueue(\n        null,\n        loginDomain,\n        changeData.newPassword,\n        sender.tab,\n        true,\n      );\n      return;\n    }\n\n    let id: string = null;\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(changeData.url);\n    if (changeData.currentPassword != null) {\n      const passwordMatches = ciphers.filter(\n        (c) => c.login.password === changeData.currentPassword,\n      );\n      if (passwordMatches.length === 1) {\n        id = passwordMatches[0].id;\n      }\n    } else if (ciphers.length === 1) {\n      id = ciphers[0].id;\n    }\n    if (id != null) {\n      await this.pushChangePasswordToQueue(id, loginDomain, changeData.newPassword, sender.tab);\n    }\n  }\n\n  /**\n   * Sends the page details to the notification bar. Will query all\n   * forms with a password field and pass them to the notification bar.\n   *\n   * @param message - The extension message\n   */\n  private async handleCollectPageDetailsResponseMessage(\n    message: NotificationBackgroundExtensionMessage,\n  ) {\n    if (message.sender !== \"notificationBar\") {\n      return;\n    }\n\n    const forms = this.autofillService.getFormsWithPasswordFields(message.details);\n    await BrowserApi.tabSendMessageData(message.tab, \"notificationBarPageDetails\", {\n      details: message.details,\n      forms: forms,\n    });\n  }\n\n  /**\n   * Sets up a notification to unlock the vault when the user\n   * attempts to autofill a cipher while the vault is locked.\n   *\n   * @param message - Extension message, determines if the notification should be skipped\n   * @param tab - The tab that the message was sent from\n   */\n  private async unlockVault(message: NotificationBackgroundExtensionMessage, tab: chrome.tabs.Tab) {\n    if (message.data?.skipNotification) {\n      return;\n    }\n\n    const currentAuthStatus = await this.getAuthStatus();\n    if (currentAuthStatus !== AuthenticationStatus.Locked || this.notificationQueue.length) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(tab.url);\n    if (loginDomain) {\n      await this.pushUnlockVaultToQueue(loginDomain, tab);\n    }\n  }\n\n  /**\n   * Sets up a notification to request a fileless import when the user\n   * attempts to trigger an import from a third party website.\n   *\n   * @param tab - The tab that we are sending the notification to\n   * @param importType - The type of import that is being requested\n   */\n  async requestFilelessImport(tab: chrome.tabs.Tab, importType: string) {\n    const currentAuthStatus = await this.getAuthStatus();\n    if (currentAuthStatus !== AuthenticationStatus.Unlocked || this.notificationQueue.length) {\n      return;\n    }\n\n    const loginDomain = Utils.getDomain(tab.url);\n    if (loginDomain) {\n      await this.pushRequestFilelessImportToQueue(loginDomain, tab, importType);\n    }\n  }\n\n  private async pushChangePasswordToQueue(\n    cipherId: string,\n    loginDomain: string,\n    newPassword: string,\n    tab: chrome.tabs.Tab,\n    isVaultLocked = false,\n  ) {\n    // remove any old messages for this tab\n    this.removeTabFromNotificationQueue(tab);\n    const launchTimestamp = new Date().getTime();\n    const message: AddChangePasswordQueueMessage = {\n      type: NotificationQueueMessageType.ChangePassword,\n      cipherId: cipherId,\n      newPassword: newPassword,\n      domain: loginDomain,\n      tab: tab,\n      launchTimestamp,\n      expires: new Date(launchTimestamp + NOTIFICATION_BAR_LIFESPAN_MS),\n      wasVaultLocked: isVaultLocked,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n  }\n\n  private async pushUnlockVaultToQueue(loginDomain: string, tab: chrome.tabs.Tab) {\n    this.removeTabFromNotificationQueue(tab);\n    const launchTimestamp = new Date().getTime();\n    const message: AddUnlockVaultQueueMessage = {\n      type: NotificationQueueMessageType.UnlockVault,\n      domain: loginDomain,\n      tab: tab,\n      launchTimestamp,\n      expires: new Date(launchTimestamp + 0.5 * 60000), // 30 seconds\n      wasVaultLocked: true,\n    };\n    await this.sendNotificationQueueMessage(tab, message);\n  }\n\n  /**\n   * Pushes a request to start a fileless import to the notification queue.\n   * This will display a notification bar to the user, prompting them to\n   * start the import.\n   *\n   * @param loginDomain - The domain of the tab that we are sending the notification to\n   * @param tab - The tab that we are sending the notification to\n   * @param importType - The type of import that is being requested\n   */\n  private async pushRequestFilelessImportToQueue(\n    loginDomain: string,\n    tab: chrome.tabs.Tab,\n    importType?: string,\n  ) {\n    this.removeTabFromNotificationQueue(tab);\n    const launchTimestamp = new Date().getTime();\n    const message: AddRequestFilelessImportQueueMessage = {\n      type: NotificationQueueMessageType.RequestFilelessImport,\n      domain: loginDomain,\n      tab,\n      launchTimestamp,\n      expires: new Date(launchTimestamp + 0.5 * 60000), // 30 seconds\n      wasVaultLocked: false,\n      importType,\n    };\n    this.notificationQueue.push(message);\n    await this.checkNotificationQueue(tab);\n    this.removeTabFromNotificationQueue(tab);\n  }\n\n  /**\n   * Saves a cipher based on the message sent from the notification bar. If the vault\n   * is locked, the message will be added to the notification queue and the unlock\n   * popout will be opened.\n   *\n   * @param message - The extension message\n   * @param sender - The contextual sender of the message\n   */\n  private async handleSaveCipherMessage(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if ((await this.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      await BrowserApi.tabSendMessageData(sender.tab, \"addToLockedVaultPendingNotifications\", {\n        commandToRetry: {\n          message: {\n            command: message.command,\n            edit: message.edit,\n            folder: message.folder,\n          },\n          sender: sender,\n        },\n        target: \"notification.background\",\n      } as LockedVaultPendingNotificationsData);\n      await this.openUnlockPopout(sender.tab);\n      return;\n    }\n\n    await this.saveOrUpdateCredentials(sender.tab, message.edit, message.folder);\n  }\n\n  /**\n   * Saves or updates credentials based on the message within the\n   * notification queue that is associated with the specified tab.\n   *\n   * @param tab - The tab to save or update credentials for\n   * @param edit - Identifies if the credentials should be edited or simply added\n   * @param folderId - The folder to add the cipher to\n   */\n  private async saveOrUpdateCredentials(tab: chrome.tabs.Tab, edit: boolean, folderId?: string) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tab.id !== tab.id ||\n        (queueMessage.type !== NotificationQueueMessageType.AddLogin &&\n          queueMessage.type !== NotificationQueueMessageType.ChangePassword)\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n\n      if (queueMessage.type === NotificationQueueMessageType.ChangePassword) {\n        const cipherView = await this.getDecryptedCipherById(queueMessage.cipherId);\n        await this.updatePassword(cipherView, queueMessage.newPassword, edit, tab);\n        return;\n      }\n\n      // If the vault was locked, check if a cipher needs updating instead of creating a new one\n      if (queueMessage.wasVaultLocked) {\n        const allCiphers = await this.cipherService.getAllDecryptedForUrl(queueMessage.uri);\n        const existingCipher = allCiphers.find(\n          (c) =>\n            c.login.username != null && c.login.username.toLowerCase() === queueMessage.username,\n        );\n\n        if (existingCipher != null) {\n          await this.updatePassword(existingCipher, queueMessage.password, edit, tab);\n          return;\n        }\n      }\n\n      folderId = (await this.folderExists(folderId)) ? folderId : null;\n      const newCipher = this.convertAddLoginQueueMessageToCipherView(queueMessage, folderId);\n\n      if (edit) {\n        await this.editItem(newCipher, tab);\n        await BrowserApi.tabSendMessage(tab, { command: \"closeNotificationBar\" });\n        return;\n      }\n\n      const activeUserId = await firstValueFrom(\n        this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n      );\n\n      const cipher = await this.cipherService.encrypt(newCipher, activeUserId);\n      try {\n        await this.cipherService.createWithServer(cipher);\n        await BrowserApi.tabSendMessage(tab, { command: \"saveCipherAttemptCompleted\" });\n        await BrowserApi.tabSendMessage(tab, { command: \"addedCipher\" });\n      } catch (error) {\n        await BrowserApi.tabSendMessageData(tab, \"saveCipherAttemptCompleted\", {\n          error: String(error.message),\n        });\n      }\n    }\n  }\n\n  /**\n   * Handles updating an existing cipher's password. If the cipher\n   * is being edited, a popup will be opened to allow the user to\n   * edit the cipher.\n   *\n   * @param cipherView - The cipher to update\n   * @param newPassword - The new password to update the cipher with\n   * @param edit - Identifies if the cipher should be edited or simply updated\n   * @param tab - The tab that the message was sent from\n   */\n  private async updatePassword(\n    cipherView: CipherView,\n    newPassword: string,\n    edit: boolean,\n    tab: chrome.tabs.Tab,\n  ) {\n    cipherView.login.password = newPassword;\n\n    if (edit) {\n      await this.editItem(cipherView, tab);\n      await BrowserApi.tabSendMessage(tab, { command: \"closeNotificationBar\" });\n      await BrowserApi.tabSendMessage(tab, { command: \"editedCipher\" });\n      return;\n    }\n\n    const activeUserId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n    );\n\n    const cipher = await this.cipherService.encrypt(cipherView, activeUserId);\n    try {\n      // We've only updated the password, no need to broadcast editedCipher message\n      await this.cipherService.updateWithServer(cipher);\n      await BrowserApi.tabSendMessage(tab, { command: \"saveCipherAttemptCompleted\" });\n    } catch (error) {\n      await BrowserApi.tabSendMessageData(tab, \"saveCipherAttemptCompleted\", {\n        error: String(error.message),\n      });\n    }\n  }\n\n  /**\n   * Sets the add/edit cipher info in the cipher service\n   * and opens the add/edit vault item popout.\n   *\n   * @param cipherView - The cipher to edit\n   * @param senderTab - The tab that the message was sent from\n   */\n  private async editItem(cipherView: CipherView, senderTab: chrome.tabs.Tab) {\n    await this.cipherService.setAddEditCipherInfo({\n      cipher: cipherView,\n      collectionIds: cipherView.collectionIds,\n    });\n\n    await this.openAddEditVaultItemPopout(senderTab, { cipherId: cipherView.id });\n  }\n\n  private async folderExists(folderId: string) {\n    if (Utils.isNullOrWhitespace(folderId) || folderId === \"null\") {\n      return false;\n    }\n\n    const folders = await firstValueFrom(this.folderService.folderViews$);\n    return folders.some((x) => x.id === folderId);\n  }\n\n  private async getDecryptedCipherById(cipherId: string) {\n    const cipher = await this.cipherService.get(cipherId);\n    if (cipher != null && cipher.type === CipherType.Login) {\n      const activeUserId = await firstValueFrom(\n        this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n      );\n\n      return await cipher.decrypt(\n        await this.cipherService.getKeyForCipherKeyDecryption(cipher, activeUserId),\n      );\n    }\n    return null;\n  }\n\n  /**\n   * Saves the current tab's domain to the never save list.\n   *\n   * @param tab - The tab that sent the neverSave message\n   */\n  private async saveNever(tab: chrome.tabs.Tab) {\n    for (let i = this.notificationQueue.length - 1; i >= 0; i--) {\n      const queueMessage = this.notificationQueue[i];\n      if (\n        queueMessage.tab.id !== tab.id ||\n        queueMessage.type !== NotificationQueueMessageType.AddLogin\n      ) {\n        continue;\n      }\n\n      const tabDomain = Utils.getDomain(tab.url);\n      if (tabDomain != null && tabDomain !== queueMessage.domain) {\n        continue;\n      }\n\n      this.notificationQueue.splice(i, 1);\n      await BrowserApi.tabSendMessageData(tab, \"closeNotificationBar\");\n\n      const hostname = Utils.getHostname(tab.url);\n      await this.cipherService.saveNeverDomain(hostname);\n    }\n  }\n\n  /**\n   * Returns the first value found from the folder service's folderViews$ observable.\n   */\n  private async getFolderData() {\n    return await firstValueFrom(this.folderService.folderViews$);\n  }\n\n  private async getWebVaultUrl(): Promise<string> {\n    const env = await firstValueFrom(this.environmentService.environment$);\n    return env.getWebVaultUrl();\n  }\n\n  private async removeIndividualVault(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n    );\n  }\n\n  /**\n   * Handles the unlockCompleted extension message. Will close the notification bar\n   * after an attempted autofill action, and retry the autofill action if the message\n   * contains a follow-up command.\n   *\n   * @param message - The extension message\n   * @param sender - The contextual sender of the message\n   */\n  private async handleUnlockCompleted(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ): Promise<void> {\n    const messageData = message.data as LockedVaultPendingNotificationsData;\n    const retryCommand = messageData.commandToRetry.message.command as ExtensionCommandType;\n    if (this.allowedRetryCommands.has(retryCommand)) {\n      await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\");\n    }\n\n    if (messageData.target !== \"notification.background\") {\n      return;\n    }\n\n    const retryHandler: CallableFunction | undefined = this.extensionMessageHandlers[retryCommand];\n    if (retryHandler) {\n      retryHandler({\n        message: messageData.commandToRetry.message,\n        sender: messageData.commandToRetry.sender,\n      });\n    }\n  }\n\n  /**\n   * Sends a message back to the sender tab which\n   * triggers closure of the notification bar.\n   *\n   * @param message - The extension message\n   * @param sender - The contextual sender of the message\n   */\n  private async handleCloseNotificationBarMessage(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    await BrowserApi.tabSendMessageData(sender.tab, \"closeNotificationBar\", {\n      fadeOutNotification: !!message.fadeOutNotification,\n    });\n  }\n\n  /**\n   * Sends a message back to the sender tab which triggers\n   * an CSS adjustment of the notification bar.\n   *\n   * @param message - The extension message\n   * @param sender - The contextual sender of the message\n   */\n  private async handleAdjustNotificationBarMessage(\n    message: NotificationBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    await BrowserApi.tabSendMessageData(sender.tab, \"adjustNotificationBar\", message.data);\n  }\n\n  /**\n   * Accepts a login queue message and converts it into a\n   * login uri view, login view, and cipher view.\n   *\n   * @param message - The message to convert to a cipher view\n   * @param folderId - The folder to add the cipher to\n   */\n  private convertAddLoginQueueMessageToCipherView(\n    message: AddLoginQueueMessage,\n    folderId?: string,\n  ): CipherView {\n    const uriView = new LoginUriView();\n    uriView.uri = message.uri;\n\n    const loginView = new LoginView();\n    loginView.uris = [uriView];\n    loginView.username = message.username;\n    loginView.password = message.password;\n\n    const cipherView = new CipherView();\n    cipherView.name = (Utils.getHostname(message.uri) || message.domain).replace(/^www\\./, \"\");\n    cipherView.folderId = folderId;\n    cipherView.type = CipherType.Login;\n    cipherView.login = loginView;\n\n    return cipherView;\n  }\n\n  private setupExtensionMessageListener() {\n    BrowserApi.messageListener(\"notification.background\", this.handleExtensionMessage);\n  }\n\n  private handleExtensionMessage = (\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response?: any) => void,\n  ) => {\n    const handler: CallableFunction | undefined = this.extensionMessageHandlers[message?.command];\n    if (!handler) {\n      return null;\n    }\n\n    const messageResponse = handler({ message, sender });\n    if (typeof messageResponse === \"undefined\") {\n      return null;\n    }\n\n    Promise.resolve(messageResponse)\n      .then((response) => sendResponse(response))\n      .catch((error) => this.logService.error(error));\n    return true;\n  };\n}\n","import { Subject, switchMap, timer } from \"rxjs\";\n\nimport { CLEAR_NOTIFICATION_LOGIN_DATA_DURATION } from \"@bitwarden/common/autofill/constants\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\n\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\n\nimport {\n  ActiveFormSubmissionRequests,\n  ModifyLoginCipherFormData,\n  ModifyLoginCipherFormDataForTab,\n  OverlayNotificationsBackground as OverlayNotificationsBackgroundInterface,\n  OverlayNotificationsExtensionMessage,\n  OverlayNotificationsExtensionMessageHandlers,\n  WebsiteOriginsWithFields,\n} from \"./abstractions/overlay-notifications.background\";\nimport NotificationBackground from \"./notification.background\";\n\nexport class OverlayNotificationsBackground implements OverlayNotificationsBackgroundInterface {\n  private websiteOriginsWithFields: WebsiteOriginsWithFields = new Map();\n  private activeFormSubmissionRequests: ActiveFormSubmissionRequests = new Set();\n  private modifyLoginCipherFormData: ModifyLoginCipherFormDataForTab = new Map();\n  private clearLoginCipherFormDataSubject: Subject<void> = new Subject();\n  private readonly formSubmissionRequestMethods: Set<string> = new Set([\"POST\", \"PUT\", \"PATCH\"]);\n  private readonly extensionMessageHandlers: OverlayNotificationsExtensionMessageHandlers = {\n    formFieldSubmitted: ({ message, sender }) => this.storeModifiedLoginFormData(message, sender),\n    collectPageDetailsResponse: ({ message, sender }) =>\n      this.handleCollectPageDetailsResponse(message, sender),\n  };\n\n  constructor(\n    private logService: LogService,\n    private configService: ConfigService,\n    private notificationBackground: NotificationBackground,\n  ) {}\n\n  /**\n   * Initialize the overlay notifications background service.\n   */\n  async init() {\n    const featureFlagActive = await this.configService.getFeatureFlag(\n      FeatureFlag.NotificationBarAddLoginImprovements,\n    );\n    if (!featureFlagActive) {\n      return;\n    }\n\n    this.setupExtensionListeners();\n    this.clearLoginCipherFormDataSubject\n      .pipe(switchMap(() => timer(CLEAR_NOTIFICATION_LOGIN_DATA_DURATION)))\n      .subscribe(() => this.modifyLoginCipherFormData.clear());\n  }\n\n  /**\n   * Handles the response from the content script with the page details. Triggers an initialization\n   * of the add login or change password notification if the conditions are met.\n   *\n   * @param message - The message from the content script\n   * @param sender - The sender of the message\n   */\n  private async handleCollectPageDetailsResponse(\n    message: OverlayNotificationsExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (await this.shouldInitAddLoginOrChangePasswordNotification(message, sender)) {\n      this.websiteOriginsWithFields.set(sender.tab.id, this.getSenderUrlMatchPatterns(sender));\n      this.setupWebRequestsListeners();\n    }\n  }\n\n  /**\n   * Determines if the add login or change password notification should be initialized. This depends\n   * on whether the user has enabled the notification, the sender is not from an excluded domain, the\n   * tab's page details contains fillable fields, and the website origin has not been previously stored.\n   *\n   * @param message - The message from the content script\n   * @param sender - The sender of the message\n   */\n  private async shouldInitAddLoginOrChangePasswordNotification(\n    message: OverlayNotificationsExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    return (\n      (await this.isAddLoginOrChangePasswordNotificationEnabled()) &&\n      !(await this.isSenderFromExcludedDomain(sender)) &&\n      message.details?.fields?.length > 0 &&\n      !this.websiteOriginsWithFields.has(sender.tab.id)\n    );\n  }\n\n  /**\n   * Determines if the add login or change password notification is enabled.\n   * This is based on the user's settings for the notification.\n   */\n  private async isAddLoginOrChangePasswordNotificationEnabled() {\n    return (\n      (await this.notificationBackground.getEnableChangedPasswordPrompt()) ||\n      (await this.notificationBackground.getEnableAddedLoginPrompt())\n    );\n  }\n\n  /**\n   * Returns the match patterns for the sender's URL. This is used to filter out\n   * the web requests that are not from the sender's tab.\n   *\n   * @param sender - The sender of the message\n   */\n  private getSenderUrlMatchPatterns(sender: chrome.runtime.MessageSender) {\n    return new Set([\n      ...this.generateMatchPatterns(sender.url),\n      ...this.generateMatchPatterns(sender.tab.url),\n    ]);\n  }\n\n  /**\n   * Generates the origin and subdomain match patterns for the URL.\n   *\n   * @param url - The URL of the tab\n   */\n  private generateMatchPatterns(url: string): string[] {\n    try {\n      if (!url.startsWith(\"http\")) {\n        url = `https://${url}`;\n      }\n\n      const originMatchPattern = `${new URL(url).origin}/*`;\n\n      const parsedUrl = new URL(url);\n      const splitHost = parsedUrl.hostname.split(\".\");\n      const domain = splitHost.slice(-2).join(\".\");\n      const subDomainMatchPattern = `${parsedUrl.protocol}//*.${domain}/*`;\n\n      return [originMatchPattern, subDomainMatchPattern];\n    } catch {\n      return [];\n    }\n  }\n\n  /**\n   * Stores the login form data that was modified by the user in the content script. This data is\n   * used to trigger the add login or change password notification when the form is submitted.\n   *\n   * @param message - The message from the content script\n   * @param sender - The sender of the message\n   */\n  private storeModifiedLoginFormData = (\n    message: OverlayNotificationsExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) => {\n    const { uri, username, password, newPassword } = message;\n    if (!username && !password && !newPassword) {\n      return;\n    }\n\n    this.clearLoginCipherFormDataSubject.next();\n    const formData = { uri, username, password, newPassword };\n\n    const existingModifyLoginData = this.modifyLoginCipherFormData.get(sender.tab.id);\n    if (existingModifyLoginData) {\n      formData.username = formData.username || existingModifyLoginData.username;\n      formData.password = formData.password || existingModifyLoginData.password;\n      formData.newPassword = formData.newPassword || existingModifyLoginData.newPassword;\n    }\n\n    this.modifyLoginCipherFormData.set(sender.tab.id, formData);\n  };\n\n  /**\n   * Determines if the sender of the message is from an excluded domain. This is used to prevent the\n   * add login or change password notification from being triggered on the user's vault domain or\n   * other excluded domains.\n   *\n   * @param sender - The sender of the message\n   */\n  private async isSenderFromExcludedDomain(sender: chrome.runtime.MessageSender): Promise<boolean> {\n    try {\n      const senderOrigin = sender.origin;\n      const serverConfig = await this.notificationBackground.getActiveUserServerConfig();\n      const activeUserVault = serverConfig?.environment?.vault;\n      if (activeUserVault === senderOrigin) {\n        return true;\n      }\n\n      const excludedDomains = await this.notificationBackground.getExcludedDomains();\n      if (!excludedDomains) {\n        return false;\n      }\n\n      const senderDomain = new URL(senderOrigin).hostname;\n      return excludedDomains[senderDomain] !== undefined;\n    } catch {\n      return true;\n    }\n  }\n\n  /**\n   * Removes and resets the onBeforeRequest and onCompleted listeners for web requests. This ensures\n   * that we are only listening for form submission requests on the tabs that have fillable form fields.\n   */\n  private setupWebRequestsListeners() {\n    chrome.webRequest.onBeforeRequest.removeListener(this.handleOnBeforeRequestEvent);\n    chrome.webRequest.onCompleted.removeListener(this.handleOnCompletedRequestEvent);\n    if (this.websiteOriginsWithFields.size) {\n      const requestFilter: chrome.webRequest.RequestFilter = this.generateRequestFilter();\n      chrome.webRequest.onBeforeRequest.addListener(this.handleOnBeforeRequestEvent, requestFilter);\n      chrome.webRequest.onCompleted.addListener(this.handleOnCompletedRequestEvent, requestFilter);\n    }\n  }\n\n  /**\n   * Generates the request filter for the web requests. This is used to filter out the web requests\n   * that are not from the tabs that have fillable form fields.\n   */\n  private generateRequestFilter(): chrome.webRequest.RequestFilter {\n    const websiteOrigins = Array.from(this.websiteOriginsWithFields.values());\n    const urls: string[] = [];\n    websiteOrigins.forEach((origins) => urls.push(...origins));\n    return {\n      urls,\n      types: [\"main_frame\", \"sub_frame\", \"xmlhttprequest\"],\n    };\n  }\n\n  /**\n   * Handles the onBeforeRequest event for web requests. This is used to ensures that the following\n   * onCompleted event is only triggered for form submission requests.\n   *\n   * @param details - The details of the web request\n   */\n  private handleOnBeforeRequestEvent = (details: chrome.webRequest.WebRequestDetails) => {\n    if (this.isPostSubmissionFormRedirection(details)) {\n      this.setupNotificationInitTrigger(\n        details.tabId,\n        details.requestId,\n        this.modifyLoginCipherFormData.get(details.tabId),\n      ).catch((error) => this.logService.error(error));\n\n      return;\n    }\n\n    if (!this.isValidFormSubmissionRequest(details)) {\n      return;\n    }\n\n    const { requestId, tabId, frameId } = details;\n    this.activeFormSubmissionRequests.add(requestId);\n\n    if (this.notificationDataIncompleteOnBeforeRequest(tabId)) {\n      this.getFormFieldDataFromTab(tabId, frameId).catch((error) => this.logService.error(error));\n    }\n  };\n\n  /**\n   * Captures the modified login form data if the tab contains incomplete data. This is used as\n   * a redundancy to ensure that the modified login form data is captured in cases where the form\n   * is split into multiple parts.\n   *\n   * @param tabId - The id of the tab\n   */\n  private notificationDataIncompleteOnBeforeRequest = (tabId: number) => {\n    const modifyLoginData = this.modifyLoginCipherFormData.get(tabId);\n    return (\n      !modifyLoginData ||\n      !this.shouldTriggerAddLoginNotification(modifyLoginData) ||\n      !this.shouldTriggerChangePasswordNotification(modifyLoginData)\n    );\n  };\n\n  /**\n   * Determines whether the request is happening after a form submission. This is identified by a GET\n   * request that is triggered after a form submission POST request from the same request id. If\n   * this is the case, and the modified login form data is available, the add login or change password\n   * notification is triggered.\n   *\n   * @param details - The details of the web request\n   */\n  private isPostSubmissionFormRedirection = (details: chrome.webRequest.WebRequestDetails) => {\n    return (\n      details.method?.toUpperCase() === \"GET\" &&\n      this.activeFormSubmissionRequests.has(details.requestId) &&\n      this.modifyLoginCipherFormData.has(details.tabId)\n    );\n  };\n\n  /**\n   * Determines if the web request is a valid form submission request. A valid web request\n   * is a POST, PUT, or PATCH request that is not from an invalid host.\n   *\n   * @param details - The details of the web request\n   */\n  private isValidFormSubmissionRequest = (details: chrome.webRequest.WebRequestDetails) => {\n    return (\n      !this.requestHostIsInvalid(details) &&\n      this.formSubmissionRequestMethods.has(details.method?.toUpperCase())\n    );\n  };\n\n  /**\n   * Retrieves the form field data from the tab. This is used to get the modified login form data\n   * in cases where the submit button is not clicked, but the form is submitted through other means.\n   *\n   * @param tabId - The senders tab id\n   * @param frameId - The frame where the form is located\n   */\n  private getFormFieldDataFromTab = async (tabId: number, frameId: number) => {\n    const tab = await BrowserApi.getTab(tabId);\n    if (!tab) {\n      return;\n    }\n\n    const response = (await BrowserApi.tabSendMessage(\n      tab,\n      { command: \"getFormFieldDataForNotification\" },\n      { frameId },\n    )) as OverlayNotificationsExtensionMessage;\n    if (response) {\n      this.storeModifiedLoginFormData(response, { tab });\n    }\n  };\n\n  /**\n   * Handles the onCompleted event for web requests. This is used to trigger the add login or change\n   * password notification when a form submission request is completed.\n   *\n   * @param details - The details of the web response\n   */\n  private handleOnCompletedRequestEvent = async (details: chrome.webRequest.WebResponseDetails) => {\n    if (\n      this.requestHostIsInvalid(details) ||\n      this.isInvalidStatusCode(details.statusCode) ||\n      !this.activeFormSubmissionRequests.has(details.requestId)\n    ) {\n      return;\n    }\n\n    const modifyLoginData = this.modifyLoginCipherFormData.get(details.tabId);\n    if (!modifyLoginData) {\n      return;\n    }\n\n    this.setupNotificationInitTrigger(details.tabId, details.requestId, modifyLoginData).catch(\n      (error) => this.logService.error(error),\n    );\n  };\n\n  /**\n   * Sets up the initialization trigger for the add login or change password notification. This is used\n   * to ensure that the notification is triggered after the tab has finished loading.\n   *\n   * @param tabId - The id of the tab\n   * @param requestId - The request id of the web request\n   * @param modifyLoginData - The modified login form data\n   */\n  private setupNotificationInitTrigger = async (\n    tabId: number,\n    requestId: string,\n    modifyLoginData: ModifyLoginCipherFormData,\n  ) => {\n    const tab = await BrowserApi.getTab(tabId);\n    if (tab.status !== \"complete\") {\n      await this.delayNotificationInitUntilTabIsComplete(tabId, requestId, modifyLoginData);\n      return;\n    }\n\n    await this.triggerNotificationInit(requestId, modifyLoginData, tab);\n  };\n\n  /**\n   * Delays the initialization of the add login or change password notification\n   * until the tab is complete. This is used to ensure that the notification is\n   * triggered after the tab has finished loading.\n   *\n   * @param tabId - The id of the tab\n   * @param requestId - The request id of the web request\n   * @param modifyLoginData - The modified login form data\n   */\n  private delayNotificationInitUntilTabIsComplete = async (\n    tabId: chrome.webRequest.ResourceRequest[\"tabId\"],\n    requestId: chrome.webRequest.ResourceRequest[\"requestId\"],\n    modifyLoginData: ModifyLoginCipherFormData,\n  ) => {\n    const handleWebNavigationOnCompleted = async () => {\n      chrome.webNavigation.onCompleted.removeListener(handleWebNavigationOnCompleted);\n      const tab = await BrowserApi.getTab(tabId);\n      await this.triggerNotificationInit(requestId, modifyLoginData, tab);\n    };\n    chrome.webNavigation.onCompleted.addListener(handleWebNavigationOnCompleted);\n  };\n\n  /**\n   * Initializes the add login or change password notification based on the modified login form data\n   * and the tab details. This will trigger the notification to be displayed to the user.\n   *\n   * @param requestId - The details of the web response\n   * @param modifyLoginData  - The modified login form data\n   * @param tab - The tab details\n   */\n  private triggerNotificationInit = async (\n    requestId: chrome.webRequest.ResourceRequest[\"requestId\"],\n    modifyLoginData: ModifyLoginCipherFormData,\n    tab: chrome.tabs.Tab,\n  ) => {\n    if (this.shouldTriggerChangePasswordNotification(modifyLoginData)) {\n      // These notifications are temporarily setup as \"messages\" to the notification background.\n      // This will be structured differently in a future refactor.\n      await this.notificationBackground.changedPassword(\n        {\n          command: \"bgChangedPassword\",\n          data: {\n            url: modifyLoginData.uri,\n            currentPassword: modifyLoginData.password,\n            newPassword: modifyLoginData.newPassword,\n          },\n        },\n        { tab },\n      );\n      this.clearCompletedWebRequest(requestId, tab);\n      return;\n    }\n\n    if (this.shouldTriggerAddLoginNotification(modifyLoginData)) {\n      await this.notificationBackground.addLogin(\n        {\n          command: \"bgAddLogin\",\n          login: {\n            url: modifyLoginData.uri,\n            username: modifyLoginData.username,\n            password: modifyLoginData.password || modifyLoginData.newPassword,\n          },\n        },\n        { tab },\n      );\n      this.clearCompletedWebRequest(requestId, tab);\n    }\n  };\n\n  /**\n   * Determines if the change password notification should be triggered.\n   *\n   * @param modifyLoginData - The modified login form data\n   */\n  private shouldTriggerChangePasswordNotification = (\n    modifyLoginData: ModifyLoginCipherFormData,\n  ) => {\n    return modifyLoginData.newPassword && !modifyLoginData.username;\n  };\n\n  /**\n   * Determines if the add login notification should be triggered.\n   *\n   * @param modifyLoginData - The modified login form data\n   */\n  private shouldTriggerAddLoginNotification = (modifyLoginData: ModifyLoginCipherFormData) => {\n    return modifyLoginData.username && (modifyLoginData.password || modifyLoginData.newPassword);\n  };\n\n  /**\n   * Clears the completed web request and removes the modified login form data for the tab.\n   *\n   * @param requestId - The request id of the web request\n   * @param tab - The tab details\n   */\n  private clearCompletedWebRequest = (\n    requestId: chrome.webRequest.ResourceRequest[\"requestId\"],\n    tab: chrome.tabs.Tab,\n  ) => {\n    this.activeFormSubmissionRequests.delete(requestId);\n    this.modifyLoginCipherFormData.delete(tab.id);\n    this.websiteOriginsWithFields.delete(tab.id);\n    this.setupWebRequestsListeners();\n  };\n\n  /**\n   * Determines if the status code of the web response is invalid. An invalid status code is\n   * any status code that is not in the 200-299 range.\n   *\n   * @param statusCode - The status code of the web response\n   */\n  private isInvalidStatusCode = (statusCode: number) => {\n    return statusCode < 200 || statusCode >= 300;\n  };\n\n  /**\n   * Determines if the host of the web request is invalid. An invalid host is any host that does not\n   * start with \"http\" or a tab id that is less than 0.\n   *\n   * @param details - The details of the web request\n   */\n  private requestHostIsInvalid = (details: chrome.webRequest.ResourceRequest) => {\n    return !details.url?.startsWith(\"http\") || details.tabId < 0;\n  };\n\n  /**\n   * Sets up the listeners for the extension messages and the tab events.\n   */\n  private setupExtensionListeners() {\n    BrowserApi.messageListener(\"overlay-notifications\", this.handleExtensionMessage);\n    chrome.tabs.onRemoved.addListener(this.handleTabRemoved);\n    chrome.tabs.onUpdated.addListener(this.handleTabUpdated);\n  }\n\n  /**\n   * Handles messages that are sent to the extension background.\n   *\n   * @param message - The message from the content script\n   * @param sender - The sender of the message\n   * @param sendResponse - The response to send back to the content script\n   */\n  private handleExtensionMessage = (\n    message: OverlayNotificationsExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response?: any) => void,\n  ) => {\n    const handler: CallableFunction = this.extensionMessageHandlers[message.command];\n    if (!handler) {\n      return null;\n    }\n\n    const messageResponse = handler({ message, sender });\n    if (typeof messageResponse === \"undefined\") {\n      return null;\n    }\n\n    Promise.resolve(messageResponse)\n      .then((response) => sendResponse(response))\n      .catch((error) => this.logService.error(error));\n    return true;\n  };\n\n  /**\n   * Handles the removal of a tab. This is used to remove the modified login form data for the tab.\n   *\n   * @param tabId - The id of the tab that was removed\n   */\n  private handleTabRemoved = (tabId: number) => {\n    this.modifyLoginCipherFormData.delete(tabId);\n    if (this.websiteOriginsWithFields.has(tabId)) {\n      this.websiteOriginsWithFields.delete(tabId);\n      this.setupWebRequestsListeners();\n    }\n  };\n\n  /**\n   * Handles the update of a tab. This is used to remove the modified\n   * login form  data for the tab when the tab is loading.\n   *\n   * @param tabId - The id of the tab that was updated\n   * @param changeInfo - The change info of the tab\n   */\n  private handleTabUpdated = (tabId: number, changeInfo: chrome.tabs.TabChangeInfo) => {\n    if (changeInfo.status === \"loading\" && this.websiteOriginsWithFields.has(tabId)) {\n      this.websiteOriginsWithFields.delete(tabId);\n    }\n  };\n}\n","import { Utils } from \"../../platform/misc/utils\";\nimport { CipherType } from \"../enums/cipher-type\";\nimport { CipherView } from \"../models/view/cipher.view\";\n\nexport function buildCipherIcon(iconsServerUrl: string, cipher: CipherView, showFavicon: boolean) {\n  let icon;\n  let image;\n  let fallbackImage = \"\";\n  const cardIcons: Record<string, string> = {\n    Visa: \"card-visa\",\n    Mastercard: \"card-mastercard\",\n    Amex: \"card-amex\",\n    Discover: \"card-discover\",\n    \"Diners Club\": \"card-diners-club\",\n    JCB: \"card-jcb\",\n    Maestro: \"card-maestro\",\n    UnionPay: \"card-union-pay\",\n    RuPay: \"card-ru-pay\",\n  };\n\n  switch (cipher.type) {\n    case CipherType.Login:\n      icon = \"bwi-globe\";\n\n      if (cipher.login.uri) {\n        let hostnameUri = cipher.login.uri;\n        let isWebsite = false;\n\n        if (hostnameUri.indexOf(\"androidapp://\") === 0) {\n          icon = \"bwi-android\";\n          image = null;\n        } else if (hostnameUri.indexOf(\"iosapp://\") === 0) {\n          icon = \"bwi-apple\";\n          image = null;\n        } else if (\n          showFavicon &&\n          hostnameUri.indexOf(\"://\") === -1 &&\n          hostnameUri.indexOf(\".\") > -1\n        ) {\n          hostnameUri = `http://${hostnameUri}`;\n          isWebsite = true;\n        } else if (showFavicon) {\n          isWebsite = hostnameUri.indexOf(\"http\") === 0 && hostnameUri.indexOf(\".\") > -1;\n        }\n\n        if (showFavicon && isWebsite) {\n          try {\n            image = `${iconsServerUrl}/${Utils.getHostname(hostnameUri)}/icon.png`;\n            fallbackImage = \"images/bwi-globe.png\";\n          } catch (e) {\n            // Ignore error since the fallback icon will be shown if image is null.\n          }\n        }\n      } else {\n        image = null;\n      }\n      break;\n    case CipherType.SecureNote:\n      icon = \"bwi-sticky-note\";\n      break;\n    case CipherType.Card:\n      icon = \"bwi-credit-card\";\n      if (showFavicon && cipher.card.brand in cardIcons) {\n        icon = `credit-card-icon ${cardIcons[cipher.card.brand]}`;\n      }\n      break;\n    case CipherType.Identity:\n      icon = \"bwi-id-card\";\n      break;\n    default:\n      break;\n  }\n\n  return {\n    imageEnabled: showFavicon,\n    image,\n    fallbackImage,\n    icon,\n  };\n}\n","export const AutofillOverlayElement = {\n  Button: \"autofill-inline-menu-button\",\n  List: \"autofill-inline-menu-list\",\n} as const;\n\nexport type AutofillOverlayElementType =\n  (typeof AutofillOverlayElement)[keyof typeof AutofillOverlayElement];\n\nexport const AutofillOverlayPort = {\n  Button: \"autofill-inline-menu-button-port\",\n  ButtonMessageConnector: \"autofill-inline-menu-button-message-connector\",\n  List: \"autofill-inline-menu-list-port\",\n  ListMessageConnector: \"autofill-inline-menu-list-message-connector\",\n} as const;\n\nexport const RedirectFocusDirection = {\n  Current: \"current\",\n  Previous: \"previous\",\n  Next: \"next\",\n} as const;\n\nexport const MAX_SUB_FRAME_DEPTH = 8;\n","const AutofillPort = {\n  InjectedScript: \"autofill-injected-script-port\",\n} as const;\n\nexport { AutofillPort };\n","import { AutofillPort } from \"../enums/autofill-port.enum\";\nimport { FillableFormFieldElement, FormElementWithAttribute, FormFieldElement } from \"../types\";\n\n/**\n * Generates a random string of characters.\n *\n * @param length - The length of the random string to generate.\n */\nexport function generateRandomChars(length: number): string {\n  const chars = \"abcdefghijklmnopqrstuvwxyz\";\n  const randomChars = [];\n  const randomBytes = new Uint8Array(length);\n  globalThis.crypto.getRandomValues(randomBytes);\n\n  for (let byteIndex = 0; byteIndex < randomBytes.length; byteIndex++) {\n    const byte = randomBytes[byteIndex];\n    randomChars.push(chars[byte % chars.length]);\n  }\n\n  return randomChars.join(\"\");\n}\n\n/**\n * Polyfills the requestIdleCallback API with a setTimeout fallback.\n *\n * @param callback - The callback function to run when the browser is idle.\n * @param options - The options to pass to the requestIdleCallback function.\n */\nexport function requestIdleCallbackPolyfill(\n  callback: () => void,\n  options?: Record<string, any>,\n): number | NodeJS.Timeout {\n  if (\"requestIdleCallback\" in globalThis) {\n    return globalThis.requestIdleCallback(() => callback(), options);\n  }\n\n  return globalThis.setTimeout(() => callback(), 1);\n}\n\n/**\n * Polyfills the cancelIdleCallback API with a clearTimeout fallback.\n *\n * @param id - The ID of the idle callback to cancel.\n */\nexport function cancelIdleCallbackPolyfill(id: NodeJS.Timeout | number) {\n  if (\"cancelIdleCallback\" in globalThis) {\n    return globalThis.cancelIdleCallback(id as number);\n  }\n\n  return globalThis.clearTimeout(id);\n}\n\n/**\n * Generates a random string of characters that formatted as a custom element name.\n */\nexport function generateRandomCustomElementName(): string {\n  const length = Math.floor(Math.random() * 5) + 8; // Between 8 and 12 characters\n  const numHyphens = Math.min(Math.max(Math.floor(Math.random() * 4), 1), length - 1); // At least 1, maximum of 3 hyphens\n\n  const hyphenIndices: number[] = [];\n  while (hyphenIndices.length < numHyphens) {\n    const index = Math.floor(Math.random() * (length - 1)) + 1;\n    if (!hyphenIndices.includes(index)) {\n      hyphenIndices.push(index);\n    }\n  }\n  hyphenIndices.sort((a, b) => a - b);\n\n  let randomString = \"\";\n  let prevIndex = 0;\n\n  for (let index = 0; index < hyphenIndices.length; index++) {\n    const hyphenIndex = hyphenIndices[index];\n    randomString = randomString + generateRandomChars(hyphenIndex - prevIndex) + \"-\";\n    prevIndex = hyphenIndex;\n  }\n\n  randomString += generateRandomChars(length - prevIndex);\n\n  return randomString;\n}\n\n/**\n * Builds a DOM element from an SVG string.\n *\n * @param svgString - The SVG string to build the DOM element from.\n * @param ariaHidden - Determines whether the SVG should be hidden from screen readers.\n */\nexport function buildSvgDomElement(svgString: string, ariaHidden = true): HTMLElement {\n  const domParser = new DOMParser();\n  const svgDom = domParser.parseFromString(svgString, \"image/svg+xml\");\n  const domElement = svgDom.documentElement;\n  domElement.setAttribute(\"aria-hidden\", `${ariaHidden}`);\n\n  return domElement;\n}\n\n/**\n * Sends a message to the extension.\n *\n * @param command - The command to send.\n * @param options - The options to send with the command.\n */\nexport async function sendExtensionMessage(\n  command: string,\n  options: Record<string, any> = {},\n): Promise<any> {\n  if (\n    typeof browser !== \"undefined\" &&\n    typeof browser.runtime !== \"undefined\" &&\n    typeof browser.runtime.sendMessage !== \"undefined\"\n  ) {\n    return browser.runtime.sendMessage({ command, ...options });\n  }\n\n  return new Promise((resolve) =>\n    chrome.runtime.sendMessage(Object.assign({ command }, options), (response) => {\n      if (chrome.runtime.lastError) {\n        resolve(null);\n      }\n\n      resolve(response);\n    }),\n  );\n}\n\n/**\n * Sets CSS styles on an element.\n *\n * @param element - The element to set the styles on.\n * @param styles - The styles to set on the element.\n * @param priority - Determines whether the styles should be set as important.\n */\nexport function setElementStyles(\n  element: HTMLElement,\n  styles: Partial<CSSStyleDeclaration>,\n  priority?: boolean,\n) {\n  if (!element || !styles || !Object.keys(styles).length) {\n    return;\n  }\n\n  for (const styleProperty in styles) {\n    element.style.setProperty(\n      styleProperty.replace(/([a-z])([A-Z])/g, \"$1-$2\"), // Convert camelCase to kebab-case\n      styles[styleProperty],\n      priority ? \"important\" : undefined,\n    );\n  }\n}\n\n/**\n * Sets up a long-lived connection with the extension background\n * and triggers an onDisconnect event if the extension context\n * is invalidated.\n *\n * @param callback - Callback export function to run when the extension disconnects\n */\nexport function setupExtensionDisconnectAction(callback: (port: chrome.runtime.Port) => void) {\n  const port = chrome.runtime.connect({ name: AutofillPort.InjectedScript });\n  const onDisconnectCallback = (disconnectedPort: chrome.runtime.Port) => {\n    callback(disconnectedPort);\n    port.onDisconnect.removeListener(onDisconnectCallback);\n  };\n  port.onDisconnect.addListener(onDisconnectCallback);\n}\n\n/**\n * Handles setup of the extension disconnect action for the autofill init class\n * in both instances where the overlay might or might not be initialized.\n *\n * @param windowContext - The global window context\n */\nexport function setupAutofillInitDisconnectAction(windowContext: Window) {\n  if (!windowContext.bitwardenAutofillInit) {\n    return;\n  }\n\n  const onDisconnectCallback = () => {\n    windowContext.bitwardenAutofillInit.destroy();\n    delete windowContext.bitwardenAutofillInit;\n  };\n  setupExtensionDisconnectAction(onDisconnectCallback);\n}\n\n/**\n * Identifies whether an element is a fillable form field.\n * This is determined by whether the element is a form field and not a span.\n *\n * @param formFieldElement - The form field element to check.\n */\nexport function elementIsFillableFormField(\n  formFieldElement: FormFieldElement,\n): formFieldElement is FillableFormFieldElement {\n  return !elementIsSpanElement(formFieldElement);\n}\n\n/**\n * Identifies whether an element is an instance of a specific tag name.\n *\n * @param element - The element to check.\n * @param tagName -  The tag name to check against.\n */\nexport function elementIsInstanceOf<T extends Element>(\n  element: Element,\n  tagName: string,\n): element is T {\n  return nodeIsElement(element) && element.tagName.toLowerCase() === tagName;\n}\n\n/**\n * Identifies whether an element is a span element.\n *\n * @param element - The element to check.\n */\nexport function elementIsSpanElement(element: Element): element is HTMLSpanElement {\n  return elementIsInstanceOf<HTMLSpanElement>(element, \"span\");\n}\n\n/**\n * Identifies whether an element is an input field.\n *\n * @param element - The element to check.\n */\nexport function elementIsInputElement(element: Element): element is HTMLInputElement {\n  return elementIsInstanceOf<HTMLInputElement>(element, \"input\");\n}\n\n/**\n * Identifies whether an element is a select field.\n *\n * @param element - The element to check.\n */\nexport function elementIsSelectElement(element: Element): element is HTMLSelectElement {\n  return elementIsInstanceOf<HTMLSelectElement>(element, \"select\");\n}\n\n/**\n * Identifies whether an element is a textarea field.\n *\n * @param element - The element to check.\n */\nexport function elementIsTextAreaElement(element: Element): element is HTMLTextAreaElement {\n  return elementIsInstanceOf<HTMLTextAreaElement>(element, \"textarea\");\n}\n\n/**\n * Identifies whether an element is a form element.\n *\n * @param element - The element to check.\n */\nexport function elementIsFormElement(element: Element): element is HTMLFormElement {\n  return elementIsInstanceOf<HTMLFormElement>(element, \"form\");\n}\n\n/**\n * Identifies whether an element is a label element.\n *\n * @param element - The element to check.\n */\nexport function elementIsLabelElement(element: Element): element is HTMLLabelElement {\n  return elementIsInstanceOf<HTMLLabelElement>(element, \"label\");\n}\n\n/**\n * Identifies whether an element is a description details `dd` element.\n *\n * @param element - The element to check.\n */\nexport function elementIsDescriptionDetailsElement(element: Element): element is HTMLElement {\n  return elementIsInstanceOf<HTMLElement>(element, \"dd\");\n}\n\n/**\n * Identifies whether an element is a description term `dt` element.\n *\n * @param element - The element to check.\n */\nexport function elementIsDescriptionTermElement(element: Element): element is HTMLElement {\n  return elementIsInstanceOf<HTMLElement>(element, \"dt\");\n}\n\n/**\n * Identifies whether a node is an HTML element.\n *\n * @param node - The node to check.\n */\nexport function nodeIsElement(node: Node): node is Element {\n  if (!node) {\n    return false;\n  }\n\n  return node?.nodeType === Node.ELEMENT_NODE;\n}\n\n/**\n * Identifies whether a node is an input element.\n *\n * @param node - The node to check.\n */\nexport function nodeIsInputElement(node: Node): node is HTMLInputElement {\n  return nodeIsElement(node) && elementIsInputElement(node);\n}\n\n/**\n * Identifies whether a node is a form element.\n *\n * @param node - The node to check.\n */\nexport function nodeIsFormElement(node: Node): node is HTMLFormElement {\n  return nodeIsElement(node) && elementIsFormElement(node);\n}\n\n/**\n * Returns a boolean representing the attribute value of an element.\n *\n * @param element\n * @param attributeName\n * @param checkString\n */\nexport function getAttributeBoolean(\n  element: HTMLElement,\n  attributeName: string,\n  checkString = false,\n): boolean {\n  if (checkString) {\n    return getPropertyOrAttribute(element, attributeName) === \"true\";\n  }\n\n  return Boolean(getPropertyOrAttribute(element, attributeName));\n}\n\n/**\n * Get the value of a property or attribute from a FormFieldElement.\n *\n * @param element\n * @param attributeName\n */\nexport function getPropertyOrAttribute(element: HTMLElement, attributeName: string): string | null {\n  if (attributeName in element) {\n    return (element as FormElementWithAttribute)[attributeName];\n  }\n\n  return element.getAttribute(attributeName);\n}\n\n/**\n * Throttles a callback function to run at most once every `limit` milliseconds.\n *\n * @param callback - The callback function to throttle.\n * @param limit - The time in milliseconds to throttle the callback.\n */\nexport function throttle(callback: (_args: any) => any, limit: number) {\n  let waitingDelay = false;\n  return function (...args: unknown[]) {\n    if (!waitingDelay) {\n      callback.apply(this, args);\n      waitingDelay = true;\n      globalThis.setTimeout(() => (waitingDelay = false), limit);\n    }\n  };\n}\n\n/**\n * Gathers and normalizes keywords from a potential submit button element. Used\n * to verify if the element submits a login or change password form.\n *\n * @param element - The element to gather keywords from.\n */\nexport function getSubmitButtonKeywordsSet(element: HTMLElement): Set<string> {\n  const keywords = [\n    element.textContent,\n    element.getAttribute(\"type\"),\n    element.getAttribute(\"value\"),\n    element.getAttribute(\"aria-label\"),\n    element.getAttribute(\"aria-labelledby\"),\n    element.getAttribute(\"aria-describedby\"),\n    element.getAttribute(\"title\"),\n    element.getAttribute(\"id\"),\n    element.getAttribute(\"name\"),\n    element.getAttribute(\"class\"),\n  ];\n\n  const keywordsSet = new Set<string>();\n  for (let i = 0; i < keywords.length; i++) {\n    if (typeof keywords[i] === \"string\") {\n      // Iterate over all keywords metadata and split them by non-letter characters.\n      // This ensures we check against individual words and not the entire string.\n      keywords[i]\n        .toLowerCase()\n        .replace(/[-\\s]/g, \"\")\n        .split(/[^\\p{L}]+/gu)\n        .forEach((keyword) => {\n          if (keyword) {\n            keywordsSet.add(keyword);\n          }\n        });\n    }\n  }\n\n  return keywordsSet;\n}\n","import {\n  firstValueFrom,\n  merge,\n  ReplaySubject,\n  Subject,\n  throttleTime,\n  switchMap,\n  debounceTime,\n  Observable,\n  map,\n} from \"rxjs\";\nimport { parse } from \"tldts\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport {\n  AutofillOverlayVisibility,\n  SHOW_AUTOFILL_BUTTON,\n} from \"@bitwarden/common/autofill/constants\";\nimport { AutofillSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport { DomainSettingsService } from \"@bitwarden/common/autofill/services/domain-settings.service\";\nimport { InlineMenuVisibilitySetting } from \"@bitwarden/common/autofill/types\";\nimport { NeverDomains } from \"@bitwarden/common/models/domain/domain-service\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport {\n  Fido2ActiveRequestEvents,\n  Fido2ActiveRequestManager,\n} from \"@bitwarden/common/platform/abstractions/fido2/fido2-active-request-manager.abstraction\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ThemeStateService } from \"@bitwarden/common/platform/theming/theme-state.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { VaultSettingsService } from \"@bitwarden/common/vault/abstractions/vault-settings/vault-settings.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { buildCipherIcon } from \"@bitwarden/common/vault/icon/build-cipher-icon\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { Fido2CredentialView } from \"@bitwarden/common/vault/models/view/fido2-credential.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { openUnlockPopout } from \"../../auth/popup/utils/auth-popout-window\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport {\n  openAddEditVaultItemPopout,\n  openViewVaultItemPopout,\n} from \"../../vault/popup/utils/vault-popout-window\";\nimport {\n  AutofillOverlayElement,\n  AutofillOverlayPort,\n  MAX_SUB_FRAME_DEPTH,\n} from \"../enums/autofill-overlay.enum\";\nimport { AutofillService } from \"../services/abstractions/autofill.service\";\nimport { generateRandomChars } from \"../utils\";\n\nimport { LockedVaultPendingNotificationsData } from \"./abstractions/notification.background\";\nimport {\n  BuildCipherDataParams,\n  CloseInlineMenuMessage,\n  CurrentAddNewItemData,\n  FocusedFieldData,\n  InlineMenuButtonPortMessageHandlers,\n  InlineMenuCipherData,\n  InlineMenuListPortMessageHandlers,\n  InlineMenuPosition,\n  NewCardCipherData,\n  NewIdentityCipherData,\n  NewLoginCipherData,\n  OverlayAddNewItemMessage,\n  OverlayBackground as OverlayBackgroundInterface,\n  OverlayBackgroundExtensionMessage,\n  OverlayBackgroundExtensionMessageHandlers,\n  OverlayPortMessage,\n  PageDetailsForTab,\n  SubFrameOffsetData,\n  SubFrameOffsetsForTab,\n  ToggleInlineMenuHiddenMessage,\n} from \"./abstractions/overlay.background\";\n\nexport class OverlayBackground implements OverlayBackgroundInterface {\n  private readonly openUnlockPopout = openUnlockPopout;\n  private readonly openViewVaultItemPopout = openViewVaultItemPopout;\n  private readonly openAddEditVaultItemPopout = openAddEditVaultItemPopout;\n  private readonly storeInlineMenuFido2CredentialsSubject = new ReplaySubject<number>(1);\n  private pageDetailsForTab: PageDetailsForTab = {};\n  private subFrameOffsetsForTab: SubFrameOffsetsForTab = {};\n  private portKeyForTab: Record<number, string> = {};\n  private expiredPorts: chrome.runtime.Port[] = [];\n  private inlineMenuButtonPort: chrome.runtime.Port;\n  private inlineMenuListPort: chrome.runtime.Port;\n  private inlineMenuCiphers: Map<string, CipherView> = new Map();\n  private inlineMenuFido2Credentials: Set<string> = new Set();\n  private inlineMenuPageTranslations: Record<string, string>;\n  private inlineMenuPosition: InlineMenuPosition = {};\n  private cardAndIdentityCiphers: Set<CipherView> | null = null;\n  private currentInlineMenuCiphersCount: number = 0;\n  private delayedCloseTimeout: number | NodeJS.Timeout;\n  private startInlineMenuFadeInSubject = new Subject<void>();\n  private cancelInlineMenuFadeInSubject = new Subject<boolean>();\n  private startUpdateInlineMenuPositionSubject = new Subject<chrome.runtime.MessageSender>();\n  private cancelUpdateInlineMenuPositionSubject = new Subject<void>();\n  private repositionInlineMenuSubject = new Subject<chrome.runtime.MessageSender>();\n  private rebuildSubFrameOffsetsSubject = new Subject<chrome.runtime.MessageSender>();\n  private addNewVaultItemSubject = new Subject<CurrentAddNewItemData>();\n  private currentAddNewItemData: CurrentAddNewItemData;\n  private focusedFieldData: FocusedFieldData;\n  private isFieldCurrentlyFocused: boolean = false;\n  private isFieldCurrentlyFilling: boolean = false;\n  private isInlineMenuButtonVisible: boolean = false;\n  private isInlineMenuListVisible: boolean = false;\n  private showPasskeysLabelsWithinInlineMenu: boolean = false;\n  private iconsServerUrl: string;\n  private readonly extensionMessageHandlers: OverlayBackgroundExtensionMessageHandlers = {\n    autofillOverlayElementClosed: ({ message, sender }) =>\n      this.overlayElementClosed(message, sender),\n    autofillOverlayAddNewVaultItem: ({ message, sender }) => this.addNewVaultItem(message, sender),\n    triggerAutofillOverlayReposition: ({ sender }) => this.triggerOverlayReposition(sender),\n    checkIsInlineMenuCiphersPopulated: ({ sender }) =>\n      this.checkIsInlineMenuCiphersPopulated(sender),\n    updateFocusedFieldData: ({ message, sender }) => this.setFocusedFieldData(message, sender),\n    updateIsFieldCurrentlyFocused: ({ message, sender }) =>\n      this.updateIsFieldCurrentlyFocused(message, sender),\n    checkIsFieldCurrentlyFocused: () => this.checkIsFieldCurrentlyFocused(),\n    updateIsFieldCurrentlyFilling: ({ message }) => this.updateIsFieldCurrentlyFilling(message),\n    checkIsFieldCurrentlyFilling: () => this.checkIsFieldCurrentlyFilling(),\n    getAutofillInlineMenuVisibility: () => this.getInlineMenuVisibility(),\n    openAutofillInlineMenu: () => this.openInlineMenu(false),\n    closeAutofillInlineMenu: ({ message, sender }) => this.closeInlineMenu(sender, message),\n    checkAutofillInlineMenuFocused: ({ sender }) => this.checkInlineMenuFocused(sender),\n    focusAutofillInlineMenuList: () => this.focusInlineMenuList(),\n    updateAutofillInlineMenuPosition: ({ message, sender }) =>\n      this.updateInlineMenuPosition(message, sender),\n    getAutofillInlineMenuPosition: () => this.getInlineMenuPosition(),\n    updateAutofillInlineMenuElementIsVisibleStatus: ({ message, sender }) =>\n      this.updateInlineMenuElementIsVisibleStatus(message, sender),\n    checkIsAutofillInlineMenuButtonVisible: () => this.checkIsInlineMenuButtonVisible(),\n    checkIsAutofillInlineMenuListVisible: () => this.checkIsInlineMenuListVisible(),\n    getCurrentTabFrameId: ({ sender }) => this.getSenderFrameId(sender),\n    updateSubFrameData: ({ message, sender }) => this.updateSubFrameData(message, sender),\n    triggerSubFrameFocusInRebuild: ({ sender }) => this.triggerSubFrameFocusInRebuild(sender),\n    destroyAutofillInlineMenuListeners: ({ message, sender }) =>\n      this.triggerDestroyInlineMenuListeners(sender.tab, message.subFrameData.frameId),\n    collectPageDetailsResponse: ({ message, sender }) => this.storePageDetails(message, sender),\n    unlockCompleted: ({ message }) => this.unlockCompleted(message),\n    doFullSync: () => this.updateOverlayCiphers(),\n    addedCipher: () => this.updateOverlayCiphers(),\n    addEditCipherSubmitted: () => this.updateOverlayCiphers(),\n    editedCipher: () => this.updateOverlayCiphers(),\n    deletedCipher: () => this.updateOverlayCiphers(),\n    fido2AbortRequest: ({ sender }) => this.abortFido2ActiveRequest(sender),\n  };\n  private readonly inlineMenuButtonPortMessageHandlers: InlineMenuButtonPortMessageHandlers = {\n    triggerDelayedAutofillInlineMenuClosure: () => this.triggerDelayedInlineMenuClosure(),\n    autofillInlineMenuButtonClicked: ({ port }) => this.handleInlineMenuButtonClicked(port),\n    autofillInlineMenuBlurred: () => this.checkInlineMenuListFocused(),\n    redirectAutofillInlineMenuFocusOut: ({ message, port }) =>\n      this.redirectInlineMenuFocusOut(message, port),\n    updateAutofillInlineMenuColorScheme: () => this.updateInlineMenuButtonColorScheme(),\n  };\n  private readonly inlineMenuListPortMessageHandlers: InlineMenuListPortMessageHandlers = {\n    checkAutofillInlineMenuButtonFocused: () => this.checkInlineMenuButtonFocused(),\n    autofillInlineMenuBlurred: () => this.checkInlineMenuButtonFocused(),\n    unlockVault: ({ port }) => this.unlockVault(port),\n    fillAutofillInlineMenuCipher: ({ message, port }) => this.fillInlineMenuCipher(message, port),\n    addNewVaultItem: ({ message, port }) => this.getNewVaultItemDetails(message, port),\n    viewSelectedCipher: ({ message, port }) => this.viewSelectedCipher(message, port),\n    redirectAutofillInlineMenuFocusOut: ({ message, port }) =>\n      this.redirectInlineMenuFocusOut(message, port),\n    updateAutofillInlineMenuListHeight: ({ message }) => this.updateInlineMenuListHeight(message),\n  };\n\n  constructor(\n    private logService: LogService,\n    private cipherService: CipherService,\n    private autofillService: AutofillService,\n    private authService: AuthService,\n    private environmentService: EnvironmentService,\n    private domainSettingsService: DomainSettingsService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private vaultSettingsService: VaultSettingsService,\n    private fido2ActiveRequestManager: Fido2ActiveRequestManager,\n    private themeStateService: ThemeStateService,\n  ) {\n    this.initOverlayEventObservables();\n  }\n\n  /**\n   * Sets up the extension message listeners and gets the settings for the\n   * overlay's visibility and the user's authentication status.\n   */\n  async init() {\n    this.setupExtensionListeners();\n    const env = await firstValueFrom(this.environmentService.environment$);\n    this.iconsServerUrl = env.getIconsUrl();\n  }\n\n  /**\n   * Initializes event observables that handle events which affect the overlay's behavior.\n   */\n  private initOverlayEventObservables() {\n    this.storeInlineMenuFido2CredentialsSubject\n      .pipe(switchMap((tabId) => this.availablePasskeyAuthCredentials$(tabId)))\n      .subscribe((credentials) => this.storeInlineMenuFido2Credentials(credentials));\n    this.repositionInlineMenuSubject\n      .pipe(\n        debounceTime(1000),\n        switchMap((sender) => this.repositionInlineMenu(sender)),\n      )\n      .subscribe();\n    this.rebuildSubFrameOffsetsSubject\n      .pipe(\n        throttleTime(100),\n        switchMap((sender) => this.rebuildSubFrameOffsets(sender)),\n      )\n      .subscribe();\n    this.addNewVaultItemSubject\n      .pipe(\n        debounceTime(100),\n        switchMap((addNewItemData) =>\n          this.buildCipherAndOpenAddEditVaultItemPopout(addNewItemData),\n        ),\n      )\n      .subscribe();\n\n    // Debounce used to update inline menu position\n    merge(\n      this.startUpdateInlineMenuPositionSubject.pipe(debounceTime(150)),\n      this.cancelUpdateInlineMenuPositionSubject,\n    )\n      .pipe(switchMap((sender) => this.updateInlineMenuPositionAfterRepositionEvent(sender)))\n      .subscribe();\n\n    // FadeIn Observable behavior\n    merge(\n      this.startInlineMenuFadeInSubject.pipe(debounceTime(150)),\n      this.cancelInlineMenuFadeInSubject,\n    )\n      .pipe(switchMap((cancelSignal) => this.triggerInlineMenuFadeIn(!!cancelSignal)))\n      .subscribe();\n  }\n\n  /**\n   * Removes cached page details for a tab\n   * based on the passed tabId.\n   *\n   * @param tabId - Used to reference the page details of a specific tab\n   */\n  removePageDetails(tabId: number) {\n    if (this.pageDetailsForTab[tabId]) {\n      this.pageDetailsForTab[tabId].clear();\n      delete this.pageDetailsForTab[tabId];\n    }\n\n    if (this.portKeyForTab[tabId]) {\n      delete this.portKeyForTab[tabId];\n    }\n  }\n\n  /**\n   * Updates the inline menu list's ciphers and sends the updated list to the inline menu list iframe.\n   * Queries all ciphers for the given url, and sorts them by last used. Will not update the\n   * list of ciphers if the extension is not unlocked.\n   */\n  async updateOverlayCiphers(updateAllCipherTypes = true) {\n    const authStatus = await firstValueFrom(this.authService.activeAccountStatus$);\n    if (authStatus !== AuthenticationStatus.Unlocked) {\n      if (this.focusedFieldData) {\n        this.closeInlineMenuAfterCiphersUpdate().catch((error) => this.logService.error(error));\n      }\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindowId();\n    if (this.focusedFieldData && currentTab?.id !== this.focusedFieldData.tabId) {\n      this.closeInlineMenuAfterCiphersUpdate().catch((error) => this.logService.error(error));\n    }\n\n    if (!currentTab || !currentTab.url?.startsWith(\"http\")) {\n      if (updateAllCipherTypes) {\n        this.cardAndIdentityCiphers = null;\n      }\n      return;\n    }\n\n    const request = this.fido2ActiveRequestManager.getActiveRequest(currentTab.id);\n    if (request) {\n      request.subject.next({ type: Fido2ActiveRequestEvents.Refresh });\n    }\n\n    this.inlineMenuFido2Credentials.clear();\n    this.storeInlineMenuFido2CredentialsSubject.next(currentTab.id);\n\n    this.inlineMenuCiphers = new Map();\n    const ciphersViews = await this.getCipherViews(currentTab, updateAllCipherTypes);\n    for (let cipherIndex = 0; cipherIndex < ciphersViews.length; cipherIndex++) {\n      this.inlineMenuCiphers.set(`inline-menu-cipher-${cipherIndex}`, ciphersViews[cipherIndex]);\n    }\n\n    const ciphers = await this.getInlineMenuCipherData();\n    this.inlineMenuListPort?.postMessage({\n      command: \"updateAutofillInlineMenuListCiphers\",\n      ciphers,\n      showInlineMenuAccountCreation: this.showInlineMenuAccountCreation(),\n      showPasskeysLabels: this.showPasskeysLabelsWithinInlineMenu,\n    });\n  }\n\n  /**\n   * Gets the decrypted ciphers within a user's vault based on the current tab's URL.\n   *\n   * @param currentTab - The current tab\n   * @param updateAllCipherTypes - Identifies credit card and identity cipher types should also be updated\n   */\n  private async getCipherViews(\n    currentTab: chrome.tabs.Tab,\n    updateAllCipherTypes: boolean,\n  ): Promise<CipherView[]> {\n    if (updateAllCipherTypes || !this.cardAndIdentityCiphers) {\n      return this.getAllCipherTypeViews(currentTab);\n    }\n\n    const cipherViews = (await this.cipherService.getAllDecryptedForUrl(currentTab.url || \"\")).sort(\n      (a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b),\n    );\n\n    return this.cardAndIdentityCiphers\n      ? cipherViews.concat(...this.cardAndIdentityCiphers)\n      : cipherViews;\n  }\n\n  /**\n   * Queries all cipher types from the user's vault returns them sorted by last used.\n   *\n   * @param currentTab - The current tab\n   */\n  private async getAllCipherTypeViews(currentTab: chrome.tabs.Tab): Promise<CipherView[]> {\n    if (!this.cardAndIdentityCiphers) {\n      this.cardAndIdentityCiphers = new Set([]);\n    }\n\n    this.cardAndIdentityCiphers.clear();\n    const cipherViews = (\n      await this.cipherService.getAllDecryptedForUrl(currentTab.url || \"\", [\n        CipherType.Card,\n        CipherType.Identity,\n      ])\n    ).sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));\n    for (let cipherIndex = 0; cipherIndex < cipherViews.length; cipherIndex++) {\n      const cipherView = cipherViews[cipherIndex];\n      if (\n        !this.cardAndIdentityCiphers.has(cipherView) &&\n        [CipherType.Card, CipherType.Identity].includes(cipherView.type)\n      ) {\n        this.cardAndIdentityCiphers.add(cipherView);\n      }\n    }\n\n    if (!this.cardAndIdentityCiphers.size) {\n      this.cardAndIdentityCiphers = null;\n    }\n\n    return cipherViews;\n  }\n\n  /**\n   * Strips out unnecessary data from the ciphers and returns an array of\n   * objects that contain the cipher data needed for the inline menu list.\n   */\n  private async getInlineMenuCipherData(): Promise<InlineMenuCipherData[]> {\n    const showFavicons = await firstValueFrom(this.domainSettingsService.showFavicons$);\n    const inlineMenuCiphersArray = Array.from(this.inlineMenuCiphers);\n    let inlineMenuCipherData: InlineMenuCipherData[];\n    this.showPasskeysLabelsWithinInlineMenu = false;\n\n    if (this.showInlineMenuAccountCreation()) {\n      inlineMenuCipherData = this.buildInlineMenuAccountCreationCiphers(\n        inlineMenuCiphersArray,\n        true,\n      );\n    } else {\n      inlineMenuCipherData = await this.buildInlineMenuCiphers(\n        inlineMenuCiphersArray,\n        showFavicons,\n      );\n    }\n\n    this.currentInlineMenuCiphersCount = inlineMenuCipherData.length;\n    return inlineMenuCipherData;\n  }\n\n  /**\n   * Builds the inline menu ciphers for a form field that is meant for account creation.\n   *\n   * @param inlineMenuCiphersArray - Array of inline menu ciphers\n   * @param showFavicons - Identifies whether favicons should be shown\n   */\n  private buildInlineMenuAccountCreationCiphers(\n    inlineMenuCiphersArray: [string, CipherView][],\n    showFavicons: boolean,\n  ) {\n    const inlineMenuCipherData: InlineMenuCipherData[] = [];\n    const accountCreationLoginCiphers: InlineMenuCipherData[] = [];\n\n    for (let cipherIndex = 0; cipherIndex < inlineMenuCiphersArray.length; cipherIndex++) {\n      const [inlineMenuCipherId, cipher] = inlineMenuCiphersArray[cipherIndex];\n\n      if (cipher.type === CipherType.Login) {\n        accountCreationLoginCiphers.push(\n          this.buildCipherData({\n            inlineMenuCipherId,\n            cipher,\n            showFavicons,\n            showInlineMenuAccountCreation: true,\n          }),\n        );\n        continue;\n      }\n\n      if (cipher.type !== CipherType.Identity || !this.focusedFieldData?.accountCreationFieldType) {\n        continue;\n      }\n\n      const identity = this.getIdentityCipherData(cipher, true);\n      if (!identity?.username) {\n        continue;\n      }\n\n      inlineMenuCipherData.push(\n        this.buildCipherData({\n          inlineMenuCipherId,\n          cipher,\n          showFavicons,\n          showInlineMenuAccountCreation: true,\n          identityData: identity,\n        }),\n      );\n    }\n\n    if (accountCreationLoginCiphers.length) {\n      return inlineMenuCipherData.concat(accountCreationLoginCiphers);\n    }\n\n    return inlineMenuCipherData;\n  }\n\n  /**\n   * Builds the inline menu ciphers for a form field that is not meant for account creation.\n   *\n   * @param inlineMenuCiphersArray - Array of inline menu ciphers\n   * @param showFavicons - Identifies whether favicons should be shown\n   */\n  private async buildInlineMenuCiphers(\n    inlineMenuCiphersArray: [string, CipherView][],\n    showFavicons: boolean,\n  ) {\n    const inlineMenuCipherData: InlineMenuCipherData[] = [];\n    const passkeyCipherData: InlineMenuCipherData[] = [];\n    const domainExclusions = await this.getExcludedDomains();\n    let domainExclusionsSet: Set<string> | null = null;\n    if (domainExclusions) {\n      domainExclusionsSet = new Set(Object.keys(await this.getExcludedDomains()));\n    }\n    const passkeysEnabled = await firstValueFrom(this.vaultSettingsService.enablePasskeys$);\n\n    for (let cipherIndex = 0; cipherIndex < inlineMenuCiphersArray.length; cipherIndex++) {\n      const [inlineMenuCipherId, cipher] = inlineMenuCiphersArray[cipherIndex];\n      if (this.focusedFieldData?.filledByCipherType !== cipher.type) {\n        continue;\n      }\n\n      if (!passkeysEnabled || !(await this.showCipherAsPasskey(cipher, domainExclusionsSet))) {\n        inlineMenuCipherData.push(\n          this.buildCipherData({ inlineMenuCipherId, cipher, showFavicons }),\n        );\n        continue;\n      }\n\n      passkeyCipherData.push(\n        this.buildCipherData({\n          inlineMenuCipherId,\n          cipher,\n          showFavicons,\n          hasPasskey: true,\n        }),\n      );\n\n      if (cipher.login?.password && cipher.login.username) {\n        inlineMenuCipherData.push(\n          this.buildCipherData({ inlineMenuCipherId, cipher, showFavicons }),\n        );\n      }\n    }\n\n    if (passkeyCipherData.length) {\n      this.showPasskeysLabelsWithinInlineMenu =\n        passkeyCipherData.length > 0 && inlineMenuCipherData.length > 0;\n      return passkeyCipherData.concat(inlineMenuCipherData);\n    }\n\n    return inlineMenuCipherData;\n  }\n\n  /**\n   * Identifies whether we should show the cipher as a passkey in the inline menu list.\n   *\n   * @param cipher - The cipher to check\n   * @param domainExclusions - The domain exclusions to check against\n   */\n  private async showCipherAsPasskey(\n    cipher: CipherView,\n    domainExclusions: Set<string> | null,\n  ): Promise<boolean> {\n    if (cipher.type !== CipherType.Login || !this.focusedFieldData?.showPasskeys) {\n      return false;\n    }\n\n    const fido2Credentials = cipher.login.fido2Credentials;\n    if (!fido2Credentials?.length) {\n      return false;\n    }\n\n    const credentialId = fido2Credentials[0].credentialId;\n    const rpId = fido2Credentials[0].rpId;\n    const parsedRpId = parse(rpId, { allowPrivateDomains: true });\n    if (domainExclusions?.has(parsedRpId.domain)) {\n      return false;\n    }\n\n    return this.inlineMenuFido2Credentials.has(credentialId);\n  }\n\n  /**\n   * Builds the cipher data for the inline menu list.\n   *\n   * @param inlineMenuCipherId - The ID of the inline menu cipher\n   * @param cipher - The cipher to build data for\n   * @param showFavicons - Identifies whether favicons should be shown\n   * @param showInlineMenuAccountCreation - Identifies whether the inline menu is for account creation\n   * @param hasPasskey - Identifies whether the cipher has a FIDO2 credential\n   * @param identityData - Pre-created identity data\n   */\n  private buildCipherData({\n    inlineMenuCipherId,\n    cipher,\n    showFavicons,\n    showInlineMenuAccountCreation,\n    hasPasskey,\n    identityData,\n  }: BuildCipherDataParams): InlineMenuCipherData {\n    const inlineMenuData: InlineMenuCipherData = {\n      id: inlineMenuCipherId,\n      name: cipher.name,\n      type: cipher.type,\n      reprompt: cipher.reprompt,\n      favorite: cipher.favorite,\n      icon: buildCipherIcon(this.iconsServerUrl, cipher, showFavicons),\n      accountCreationFieldType: this.focusedFieldData?.accountCreationFieldType,\n    };\n\n    if (cipher.type === CipherType.Login) {\n      inlineMenuData.login = {\n        username: cipher.login.username,\n        passkey: hasPasskey\n          ? {\n              rpName: cipher.login.fido2Credentials[0].rpName,\n              userName: cipher.login.fido2Credentials[0].userName,\n            }\n          : null,\n      };\n      return inlineMenuData;\n    }\n\n    if (cipher.type === CipherType.Card) {\n      inlineMenuData.card = cipher.card.subTitle;\n      return inlineMenuData;\n    }\n\n    inlineMenuData.identity =\n      identityData || this.getIdentityCipherData(cipher, showInlineMenuAccountCreation);\n    return inlineMenuData;\n  }\n\n  /**\n   * Gets the identity data for a cipher based on whether the inline menu is for account creation.\n   *\n   * @param cipher - The cipher to get the identity data for\n   * @param showInlineMenuAccountCreation - Identifies whether the inline menu is for account creation\n   */\n  private getIdentityCipherData(\n    cipher: CipherView,\n    showInlineMenuAccountCreation: boolean = false,\n  ): { fullName: string; username?: string } {\n    const { firstName, lastName } = cipher.identity;\n\n    let fullName = \"\";\n    if (firstName) {\n      fullName += firstName;\n    }\n\n    if (lastName) {\n      fullName += ` ${lastName}`;\n      fullName = fullName.trim();\n    }\n\n    if (\n      !showInlineMenuAccountCreation ||\n      !this.focusedFieldData?.accountCreationFieldType ||\n      this.focusedFieldData.accountCreationFieldType === \"password\"\n    ) {\n      return { fullName };\n    }\n\n    return {\n      fullName,\n      username:\n        this.focusedFieldData.accountCreationFieldType === \"email\"\n          ? cipher.identity.email\n          : cipher.identity.username,\n    };\n  }\n\n  /**\n   * Identifies whether the inline menu is being shown on an account creation field.\n   */\n  private showInlineMenuAccountCreation(): boolean {\n    if (typeof this.focusedFieldData?.showInlineMenuAccountCreation !== \"undefined\") {\n      return this.focusedFieldData?.showInlineMenuAccountCreation;\n    }\n\n    if (this.focusedFieldData?.filledByCipherType !== CipherType.Login) {\n      return false;\n    }\n\n    if (this.cardAndIdentityCiphers) {\n      return this.inlineMenuCiphers.size === this.cardAndIdentityCiphers.size;\n    }\n\n    return this.inlineMenuCiphers.size === 0;\n  }\n\n  /**\n   * Stores the credential ids associated with a FIDO2 conditional mediated ui request.\n   *\n   * @param credentials - The FIDO2 credentials to store\n   */\n  private storeInlineMenuFido2Credentials(credentials: Fido2CredentialView[]) {\n    this.inlineMenuFido2Credentials.clear();\n\n    credentials.forEach(\n      (credential) =>\n        credential?.credentialId && this.inlineMenuFido2Credentials.add(credential.credentialId),\n    );\n  }\n\n  /**\n   * Gets the passkey credentials available from an active FIDO2 request for a given tab.\n   *\n   * @param tabId - The tab id to get the active request for.\n   */\n  private availablePasskeyAuthCredentials$(tabId: number): Observable<Fido2CredentialView[]> {\n    return this.fido2ActiveRequestManager\n      .getActiveRequest$(tabId)\n      .pipe(map((request) => request?.credentials ?? []));\n  }\n\n  /**\n   * Aborts an active FIDO2 request for a given tab and updates the inline menu ciphers.\n   *\n   * @param sender - The sender of the message\n   */\n  private async abortFido2ActiveRequest(sender: chrome.runtime.MessageSender) {\n    this.fido2ActiveRequestManager.removeActiveRequest(sender.tab.id);\n    await this.updateOverlayCiphers(false);\n  }\n\n  /**\n   * Gets the neverDomains setting from the domain settings service.\n   */\n  async getExcludedDomains(): Promise<NeverDomains> {\n    return await firstValueFrom(this.domainSettingsService.neverDomains$);\n  }\n\n  /**\n   * Gets the currently focused field and closes the inline menu on that tab.\n   */\n  private async closeInlineMenuAfterCiphersUpdate() {\n    const focusedFieldTab = await BrowserApi.getTab(this.focusedFieldData.tabId);\n    this.closeInlineMenu({ tab: focusedFieldTab }, { forceCloseInlineMenu: true });\n  }\n\n  /**\n   * Handles aggregation of page details for a tab. Stores the page details\n   * in association with the tabId of the tab that sent the message.\n   *\n   * @param message - Message received from the `collectPageDetailsResponse` command\n   * @param sender - The sender of the message\n   */\n  private storePageDetails(\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    const pageDetails = {\n      frameId: sender.frameId,\n      tab: sender.tab,\n      details: message.details,\n    };\n\n    if (pageDetails.frameId !== 0 && pageDetails.details.fields.length) {\n      this.buildSubFrameOffsets(\n        pageDetails.tab,\n        pageDetails.frameId,\n        pageDetails.details.url,\n      ).catch((error) => this.logService.error(error));\n      BrowserApi.tabSendMessage(pageDetails.tab, {\n        command: \"setupRebuildSubFrameOffsetsListeners\",\n      }).catch((error) => this.logService.error(error));\n    }\n\n    const pageDetailsMap = this.pageDetailsForTab[sender.tab.id];\n    if (!pageDetailsMap) {\n      this.pageDetailsForTab[sender.tab.id] = new Map([[sender.frameId, pageDetails]]);\n      return;\n    }\n\n    pageDetailsMap.set(sender.frameId, pageDetails);\n  }\n\n  /**\n   * Returns the frameId, called when calculating sub frame offsets within the tab.\n   * Is used to determine if we should reposition the inline menu when a resize event\n   * occurs within a frame.\n   *\n   * @param sender - The sender of the message\n   */\n  private getSenderFrameId(sender: chrome.runtime.MessageSender) {\n    return sender.frameId;\n  }\n\n  /**\n   * Handles sub frame offset calculations for the given tab and frame id.\n   * Is used in setting the position of the inline menu list and button.\n   *\n   * @param message - The message received from the `updateSubFrameData` command\n   * @param sender - The sender of the message\n   */\n  private updateSubFrameData(\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    const subFrameOffsetsForTab = this.subFrameOffsetsForTab[sender.tab.id];\n    if (subFrameOffsetsForTab) {\n      subFrameOffsetsForTab.set(message.subFrameData.frameId, message.subFrameData);\n    }\n  }\n\n  /**\n   * Builds the offset data for a sub frame of a tab. The offset data is used\n   * to calculate the position of the inline menu list and button.\n   *\n   * @param tab - The tab that the sub frame is associated with\n   * @param frameId - The frame ID of the sub frame\n   * @param url - The URL of the sub frame\n   * @param forceRebuild - Identifies whether the sub frame offsets should be rebuilt\n   */\n  private async buildSubFrameOffsets(\n    tab: chrome.tabs.Tab,\n    frameId: number,\n    url: string,\n    forceRebuild: boolean = false,\n  ) {\n    let subFrameDepth = 0;\n    const tabId = tab.id;\n    let subFrameOffsetsForTab = this.subFrameOffsetsForTab[tabId];\n    if (!subFrameOffsetsForTab) {\n      this.subFrameOffsetsForTab[tabId] = new Map();\n      subFrameOffsetsForTab = this.subFrameOffsetsForTab[tabId];\n    }\n\n    if (!forceRebuild && subFrameOffsetsForTab.get(frameId)) {\n      return;\n    }\n\n    const subFrameData: SubFrameOffsetData = { url, top: 0, left: 0, parentFrameIds: [0] };\n    let frameDetails = await BrowserApi.getFrameDetails({ tabId, frameId });\n\n    while (frameDetails && frameDetails.parentFrameId > -1) {\n      subFrameDepth++;\n      if (subFrameDepth >= MAX_SUB_FRAME_DEPTH) {\n        subFrameOffsetsForTab.set(frameId, null);\n        this.triggerDestroyInlineMenuListeners(tab, frameId);\n        return;\n      }\n\n      const subFrameOffset: SubFrameOffsetData = await BrowserApi.tabSendMessage(\n        tab,\n        {\n          command: \"getSubFrameOffsets\",\n          subFrameUrl: frameDetails.url,\n          subFrameId: frameDetails.documentId,\n        },\n        { frameId: frameDetails.parentFrameId },\n      );\n\n      if (!subFrameOffset) {\n        subFrameOffsetsForTab.set(frameId, null);\n        BrowserApi.tabSendMessage(\n          tab,\n          { command: \"getSubFrameOffsetsFromWindowMessage\", subFrameId: frameId },\n          { frameId },\n        ).catch((error) => this.logService.error(error));\n        return;\n      }\n\n      subFrameData.top += subFrameOffset.top;\n      subFrameData.left += subFrameOffset.left;\n      if (!subFrameData.parentFrameIds.includes(frameDetails.parentFrameId)) {\n        subFrameData.parentFrameIds.push(frameDetails.parentFrameId);\n      }\n\n      frameDetails = await BrowserApi.getFrameDetails({\n        tabId,\n        frameId: frameDetails.parentFrameId,\n      });\n    }\n\n    subFrameOffsetsForTab.set(frameId, subFrameData);\n  }\n\n  /**\n   * Triggers a removal and destruction of all\n   *\n   * @param tab - The tab that the sub frame is associated with\n   * @param frameId - The frame ID of the sub frame\n   */\n  private triggerDestroyInlineMenuListeners(tab: chrome.tabs.Tab, frameId: number) {\n    this.logService.error(\n      \"Excessive frame depth encountered, destroying inline menu on field within frame\",\n      tab,\n      frameId,\n    );\n\n    BrowserApi.tabSendMessage(\n      tab,\n      { command: \"destroyAutofillInlineMenuListeners\" },\n      { frameId },\n    ).catch((error) => this.logService.error(error));\n  }\n\n  /**\n   * Rebuilds the sub frame offsets for the tab associated with the sender.\n   *\n   * @param sender - The sender of the message\n   */\n  private async rebuildSubFrameOffsets(sender: chrome.runtime.MessageSender) {\n    this.cancelUpdateInlineMenuPositionSubject.next();\n    this.clearDelayedInlineMenuClosure();\n\n    const subFrameOffsetsForTab = this.subFrameOffsetsForTab[sender.tab.id];\n    if (subFrameOffsetsForTab) {\n      const tabFrameIds = Array.from(subFrameOffsetsForTab.keys());\n      for (const frameId of tabFrameIds) {\n        await this.buildSubFrameOffsets(sender.tab, frameId, sender.url, true);\n      }\n    }\n  }\n\n  /**\n   * Handles updating the inline menu's position after rebuilding the sub frames\n   * for the provided tab. Will skip repositioning the inline menu if the field\n   * is not currently focused, or if the focused field has a value.\n   *\n   * @param sender - The sender of the message\n   */\n  private async updateInlineMenuPositionAfterRepositionEvent(\n    sender: chrome.runtime.MessageSender | void,\n  ) {\n    if (!sender || !this.isFieldCurrentlyFocused) {\n      return;\n    }\n\n    if (!this.checkIsInlineMenuButtonVisible()) {\n      this.toggleInlineMenuHidden(\n        { isInlineMenuHidden: false, setTransparentInlineMenu: true },\n        sender,\n      ).catch((error) => this.logService.error(error));\n    }\n\n    this.updateInlineMenuPosition({ overlayElement: AutofillOverlayElement.Button }, sender).catch(\n      (error) => this.logService.error(error),\n    );\n\n    const mostRecentlyFocusedFieldHasValue = await BrowserApi.tabSendMessage(\n      sender.tab,\n      { command: \"checkMostRecentlyFocusedFieldHasValue\" },\n      { frameId: this.focusedFieldData?.frameId },\n    );\n\n    if ((await this.getInlineMenuVisibility()) === AutofillOverlayVisibility.OnButtonClick) {\n      return;\n    }\n\n    if (\n      mostRecentlyFocusedFieldHasValue &&\n      (this.checkIsInlineMenuCiphersPopulated(sender) ||\n        (await this.getAuthStatus()) !== AuthenticationStatus.Unlocked)\n    ) {\n      return;\n    }\n\n    this.updateInlineMenuPosition({ overlayElement: AutofillOverlayElement.List }, sender).catch(\n      (error) => this.logService.error(error),\n    );\n  }\n\n  /**\n   * Triggers autofill for the selected cipher in the inline menu list. Also places\n   * the selected cipher at the top of the list of ciphers.\n   *\n   * @param inlineMenuCipherId - Cipher ID corresponding to the inlineMenuCiphers map. Does not correspond to the actual cipher's ID.\n   * @param usePasskey - Identifies whether the cipher has a FIDO2 credential\n   * @param sender - The sender of the port message\n   */\n  private async fillInlineMenuCipher(\n    { inlineMenuCipherId, usePasskey }: OverlayPortMessage,\n    { sender }: chrome.runtime.Port,\n  ) {\n    const pageDetails = this.pageDetailsForTab[sender.tab.id];\n    if (!inlineMenuCipherId || !pageDetails?.size) {\n      return;\n    }\n\n    const cipher = this.inlineMenuCiphers.get(inlineMenuCipherId);\n\n    if (usePasskey && cipher.login?.hasFido2Credentials) {\n      await this.authenticatePasskeyCredential(\n        sender.tab.id,\n        cipher.login.fido2Credentials[0].credentialId,\n      );\n      this.updateLastUsedInlineMenuCipher(inlineMenuCipherId, cipher);\n      this.closeInlineMenu(sender, { forceCloseInlineMenu: true });\n\n      return;\n    }\n\n    if (await this.autofillService.isPasswordRepromptRequired(cipher, sender.tab)) {\n      return;\n    }\n    const totpCode = await this.autofillService.doAutoFill({\n      tab: sender.tab,\n      cipher: cipher,\n      pageDetails: Array.from(pageDetails.values()),\n      fillNewPassword: true,\n      allowTotpAutofill: true,\n    });\n\n    if (totpCode) {\n      this.platformUtilsService.copyToClipboard(totpCode);\n    }\n\n    this.updateLastUsedInlineMenuCipher(inlineMenuCipherId, cipher);\n  }\n\n  /**\n   * Triggers a FIDO2 authentication from the inline menu using the passed credential ID.\n   *\n   * @param tabId - The tab ID to trigger the authentication for\n   * @param credentialId - The credential ID to authenticate\n   */\n  async authenticatePasskeyCredential(tabId: number, credentialId: string) {\n    const request = this.fido2ActiveRequestManager.getActiveRequest(tabId);\n    if (!request) {\n      this.logService.error(\n        \"Could not complete passkey autofill due to missing active Fido2 request\",\n      );\n      return;\n    }\n\n    request.subject.next({ type: Fido2ActiveRequestEvents.Continue, credentialId });\n  }\n\n  /**\n   * Sets the most recently used cipher at the top of the list of ciphers.\n   *\n   * @param inlineMenuCipherId - The ID of the inline menu cipher\n   * @param cipher - The cipher to set as the most recently used\n   */\n  private updateLastUsedInlineMenuCipher(inlineMenuCipherId: string, cipher: CipherView) {\n    this.inlineMenuCiphers = new Map([[inlineMenuCipherId, cipher], ...this.inlineMenuCiphers]);\n  }\n\n  /**\n   * Checks if the inline menu is focused. Will check the inline menu list\n   * if it is open, otherwise it will check the inline menu button.\n   */\n  private checkInlineMenuFocused(sender: chrome.runtime.MessageSender) {\n    if (!this.senderTabHasFocusedField(sender)) {\n      return;\n    }\n\n    if (this.inlineMenuListPort) {\n      this.checkInlineMenuListFocused();\n\n      return;\n    }\n\n    this.checkInlineMenuButtonFocused();\n  }\n\n  /**\n   * Posts a message to the inline menu button iframe to check if it is focused.\n   */\n  private checkInlineMenuButtonFocused() {\n    this.inlineMenuButtonPort?.postMessage({ command: \"checkAutofillInlineMenuButtonFocused\" });\n  }\n\n  /**\n   * Posts a message to the inline menu list iframe to check if it is focused.\n   */\n  private checkInlineMenuListFocused() {\n    this.inlineMenuListPort?.postMessage({ command: \"checkAutofillInlineMenuListFocused\" });\n  }\n\n  /**\n   * Sends a message to the sender tab to close the autofill inline menu.\n   *\n   * @param sender - The sender of the port message\n   * @param forceCloseInlineMenu - Identifies whether the inline menu should be forced closed\n   * @param overlayElement - The overlay element to close, either the list or button\n   */\n  private closeInlineMenu(\n    sender: chrome.runtime.MessageSender,\n    { forceCloseInlineMenu, overlayElement }: CloseInlineMenuMessage = {},\n  ) {\n    const command = \"closeAutofillInlineMenu\";\n    const sendOptions = { frameId: 0 };\n    if (forceCloseInlineMenu) {\n      BrowserApi.tabSendMessage(sender.tab, { command, overlayElement }, sendOptions).catch(\n        (error) => this.logService.error(error),\n      );\n      this.isInlineMenuButtonVisible = false;\n      this.isInlineMenuListVisible = false;\n      return;\n    }\n\n    if (this.isFieldCurrentlyFocused) {\n      return;\n    }\n\n    if (this.isFieldCurrentlyFilling) {\n      BrowserApi.tabSendMessage(\n        sender.tab,\n        { command, overlayElement: AutofillOverlayElement.List },\n        sendOptions,\n      ).catch((error) => this.logService.error(error));\n      this.isInlineMenuListVisible = false;\n      return;\n    }\n\n    if (overlayElement === AutofillOverlayElement.Button) {\n      this.isInlineMenuButtonVisible = false;\n    }\n\n    if (overlayElement === AutofillOverlayElement.List) {\n      this.isInlineMenuListVisible = false;\n    }\n\n    if (!overlayElement) {\n      this.isInlineMenuButtonVisible = false;\n      this.isInlineMenuListVisible = false;\n    }\n\n    BrowserApi.tabSendMessage(sender.tab, { command, overlayElement }, sendOptions).catch((error) =>\n      this.logService.error(error),\n    );\n  }\n\n  /**\n   * Sends a message to the sender tab to trigger a delayed closure of the inline menu.\n   * This is used to ensure that we capture click events on the inline menu in the case\n   * that some on page programmatic method attempts to force focus redirection.\n   */\n  private triggerDelayedInlineMenuClosure() {\n    if (this.isFieldCurrentlyFocused) {\n      return;\n    }\n\n    this.clearDelayedInlineMenuClosure();\n    this.delayedCloseTimeout = globalThis.setTimeout(() => {\n      const message = { command: \"triggerDelayedAutofillInlineMenuClosure\" };\n      this.inlineMenuButtonPort?.postMessage(message);\n      this.inlineMenuListPort?.postMessage(message);\n    }, 100);\n  }\n\n  /**\n   * Clears the delayed closure timeout for the inline menu, effectively\n   * cancelling the event from occurring.\n   */\n  private clearDelayedInlineMenuClosure() {\n    if (this.delayedCloseTimeout) {\n      clearTimeout(this.delayedCloseTimeout);\n    }\n  }\n\n  /**\n   * Handles cleanup when an overlay element is closed. Disconnects\n   * the list and button ports and sets them to null.\n   *\n   * @param overlayElement - The overlay element that was closed, either the list or button\n   * @param sender - The sender of the port message\n   */\n  private overlayElementClosed(\n    { overlayElement }: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (!this.senderTabHasFocusedField(sender)) {\n      this.expiredPorts.forEach((port) => port.disconnect());\n      this.expiredPorts = [];\n\n      return;\n    }\n\n    if (overlayElement === AutofillOverlayElement.Button) {\n      this.inlineMenuButtonPort?.disconnect();\n      this.inlineMenuButtonPort = null;\n      this.isInlineMenuButtonVisible = false;\n\n      return;\n    }\n\n    this.inlineMenuListPort?.disconnect();\n    this.inlineMenuListPort = null;\n    this.isInlineMenuListVisible = false;\n  }\n\n  /**\n   * Updates the position of either the inline menu list or button. The position\n   * is based on the focused field's position and dimensions.\n   *\n   * @param overlayElement - The overlay element to update, either the list or button\n   * @param sender - The sender of the port message\n   */\n  private async updateInlineMenuPosition(\n    { overlayElement }: { overlayElement?: string },\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (!overlayElement || !this.senderTabHasFocusedField(sender)) {\n      return;\n    }\n\n    this.cancelInlineMenuFadeInAndPositionUpdate();\n\n    await BrowserApi.tabSendMessage(\n      sender.tab,\n      { command: \"appendAutofillInlineMenuToDom\", overlayElement },\n      { frameId: 0 },\n    );\n\n    const subFrameOffsetsForTab = this.subFrameOffsetsForTab[this.focusedFieldData.tabId];\n    let subFrameOffsets: SubFrameOffsetData;\n    if (subFrameOffsetsForTab) {\n      subFrameOffsets = subFrameOffsetsForTab.get(this.focusedFieldData.frameId);\n      if (subFrameOffsets === null) {\n        this.rebuildSubFrameOffsetsSubject.next(sender);\n        this.startUpdateInlineMenuPositionSubject.next(sender);\n        return;\n      }\n    }\n\n    if (overlayElement === AutofillOverlayElement.Button) {\n      this.inlineMenuButtonPort?.postMessage({\n        command: \"updateAutofillInlineMenuPosition\",\n        styles: this.getInlineMenuButtonPosition(subFrameOffsets),\n      });\n      this.startInlineMenuFadeIn();\n\n      return;\n    }\n\n    this.inlineMenuListPort?.postMessage({\n      command: \"updateAutofillInlineMenuPosition\",\n      styles: this.getInlineMenuListPosition(subFrameOffsets),\n    });\n    this.startInlineMenuFadeIn();\n  }\n\n  /**\n   * Triggers an update of the inline menu's visibility after the top level frame\n   * appends the element to the DOM.\n   *\n   * @param message - The message received from the content script\n   * @param sender - The sender of the port message\n   */\n  private updateInlineMenuElementIsVisibleStatus(\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (!this.senderTabHasFocusedField(sender)) {\n      return;\n    }\n\n    const { overlayElement, isVisible } = message;\n    if (overlayElement === AutofillOverlayElement.Button) {\n      this.isInlineMenuButtonVisible = isVisible;\n      return;\n    }\n\n    if (overlayElement === AutofillOverlayElement.List) {\n      this.isInlineMenuListVisible = isVisible;\n    }\n  }\n\n  /**\n   * Returns the position of the currently open inline menu.\n   */\n  private getInlineMenuPosition(): InlineMenuPosition {\n    return this.inlineMenuPosition;\n  }\n\n  /**\n   * Handles updating the opacity of both the inline menu button and list.\n   * This is used to simultaneously fade in the inline menu elements.\n   */\n  private startInlineMenuFadeIn() {\n    this.cancelInlineMenuFadeIn();\n    this.startInlineMenuFadeInSubject.next();\n  }\n\n  /**\n   * Clears the timeout used to fade in the inline menu elements.\n   */\n  private cancelInlineMenuFadeIn() {\n    this.cancelInlineMenuFadeInSubject.next(true);\n  }\n\n  /**\n   * Posts a message to the inline menu elements to trigger a fade in of the inline menu.\n   *\n   * @param cancelFadeIn - Signal passed to debounced observable to cancel the fade in\n   */\n  private async triggerInlineMenuFadeIn(cancelFadeIn: boolean = false) {\n    if (cancelFadeIn) {\n      return;\n    }\n\n    const message = { command: \"fadeInAutofillInlineMenuIframe\" };\n    this.inlineMenuButtonPort?.postMessage(message);\n    this.inlineMenuListPort?.postMessage(message);\n  }\n\n  /**\n   * Gets the position of the focused field and calculates the position\n   * of the inline menu button based on the focused field's position and dimensions.\n   */\n  private getInlineMenuButtonPosition(subFrameOffsets: SubFrameOffsetData) {\n    const subFrameTopOffset = subFrameOffsets?.top || 0;\n    const subFrameLeftOffset = subFrameOffsets?.left || 0;\n\n    const { top, left, width, height } = this.focusedFieldData.focusedFieldRects;\n    const { paddingRight, paddingLeft } = this.focusedFieldData.focusedFieldStyles;\n    let elementOffset = height * 0.37;\n    if (height >= 35) {\n      elementOffset = height >= 50 ? height * 0.47 : height * 0.42;\n    }\n\n    const fieldPaddingRight = parseInt(paddingRight, 10);\n    const fieldPaddingLeft = parseInt(paddingLeft, 10);\n    const elementHeight = height - elementOffset;\n\n    const elementTopPosition = subFrameTopOffset + top + elementOffset / 2;\n    const elementLeftPosition =\n      fieldPaddingRight > fieldPaddingLeft\n        ? subFrameLeftOffset + left + width - height - (fieldPaddingRight - elementOffset + 2)\n        : subFrameLeftOffset + left + width - height + elementOffset / 2;\n\n    this.inlineMenuPosition.button = {\n      top: Math.round(elementTopPosition),\n      left: Math.round(elementLeftPosition),\n      height: Math.round(elementHeight),\n      width: Math.round(elementHeight),\n    };\n\n    return {\n      top: `${this.inlineMenuPosition.button.top}px`,\n      left: `${this.inlineMenuPosition.button.left}px`,\n      height: `${this.inlineMenuPosition.button.height}px`,\n      width: `${this.inlineMenuPosition.button.width}px`,\n    };\n  }\n\n  /**\n   * Gets the position of the focused field and calculates the position\n   * of the inline menu list based on the focused field's position and dimensions.\n   */\n  private getInlineMenuListPosition(subFrameOffsets: SubFrameOffsetData) {\n    const subFrameTopOffset = subFrameOffsets?.top || 0;\n    const subFrameLeftOffset = subFrameOffsets?.left || 0;\n\n    const { top, left, width, height } = this.focusedFieldData.focusedFieldRects;\n\n    this.inlineMenuPosition.list = {\n      top: Math.round(top + height + subFrameTopOffset),\n      left: Math.round(left + subFrameLeftOffset),\n      height: 0,\n      width: Math.round(width),\n    };\n\n    return {\n      width: `${this.inlineMenuPosition.list.width}px`,\n      top: `${this.inlineMenuPosition.list.top}px`,\n      left: `${this.inlineMenuPosition.list.left}px`,\n    };\n  }\n\n  /**\n   * Sets the focused field data to the data passed in the extension message.\n   *\n   * @param focusedFieldData - Contains the rects and styles of the focused field.\n   * @param sender - The sender of the extension message\n   */\n  private setFocusedFieldData(\n    { focusedFieldData }: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (this.focusedFieldData && !this.senderFrameHasFocusedField(sender)) {\n      BrowserApi.tabSendMessage(\n        sender.tab,\n        { command: \"unsetMostRecentlyFocusedField\" },\n        { frameId: this.focusedFieldData.frameId },\n      ).catch((error) => this.logService.error(error));\n    }\n\n    const previousFocusedFieldData = this.focusedFieldData;\n    this.focusedFieldData = { ...focusedFieldData, tabId: sender.tab.id, frameId: sender.frameId };\n    this.isFieldCurrentlyFocused = true;\n\n    const accountCreationFieldBlurred =\n      previousFocusedFieldData?.showInlineMenuAccountCreation &&\n      !this.focusedFieldData.showInlineMenuAccountCreation;\n\n    if (accountCreationFieldBlurred || this.showInlineMenuAccountCreation()) {\n      this.updateIdentityCiphersOnLoginField(previousFocusedFieldData).catch((error) =>\n        this.logService.error(error),\n      );\n      return;\n    }\n\n    if (previousFocusedFieldData?.filledByCipherType !== focusedFieldData?.filledByCipherType) {\n      const updateAllCipherTypes = focusedFieldData.filledByCipherType !== CipherType.Login;\n      this.updateOverlayCiphers(updateAllCipherTypes).catch((error) =>\n        this.logService.error(error),\n      );\n    }\n  }\n\n  /**\n   * Triggers an update of populated identity ciphers when a login field is focused.\n   *\n   * @param previousFocusedFieldData - The data set of the previously focused field\n   */\n  private async updateIdentityCiphersOnLoginField(previousFocusedFieldData: FocusedFieldData) {\n    if (\n      !previousFocusedFieldData ||\n      !this.isInlineMenuButtonVisible ||\n      (await this.getAuthStatus()) !== AuthenticationStatus.Unlocked\n    ) {\n      return;\n    }\n\n    this.inlineMenuListPort?.postMessage({\n      command: \"updateAutofillInlineMenuListCiphers\",\n      ciphers: await this.getInlineMenuCipherData(),\n      showInlineMenuAccountCreation: this.showInlineMenuAccountCreation(),\n      showPasskeysLabels: this.showPasskeysLabelsWithinInlineMenu,\n    });\n  }\n\n  /**\n   * Updates the inline menu's visibility based on the display property passed in the extension message.\n   *\n   * @param display - The display property of the inline menu, either \"block\" or \"none\"\n   * @param sender - The sender of the extension message\n   */\n  private async toggleInlineMenuHidden(\n    { isInlineMenuHidden, setTransparentInlineMenu }: ToggleInlineMenuHiddenMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (!this.senderTabHasFocusedField(sender)) {\n      return;\n    }\n\n    this.cancelInlineMenuFadeIn();\n    const display = isInlineMenuHidden ? \"none\" : \"block\";\n    let styles: { display: string; opacity?: string } = { display };\n\n    if (typeof setTransparentInlineMenu !== \"undefined\") {\n      const opacity = setTransparentInlineMenu ? \"0\" : \"1\";\n      styles = { ...styles, opacity };\n    }\n\n    const portMessage = { command: \"toggleAutofillInlineMenuHidden\", styles };\n    if (this.inlineMenuButtonPort) {\n      this.isInlineMenuButtonVisible = !isInlineMenuHidden;\n      this.inlineMenuButtonPort.postMessage(portMessage);\n    }\n\n    if (this.inlineMenuListPort) {\n      this.isInlineMenuListVisible = !isInlineMenuHidden;\n      this.inlineMenuListPort.postMessage(portMessage);\n    }\n\n    if (setTransparentInlineMenu) {\n      this.startInlineMenuFadeIn();\n    }\n  }\n\n  /**\n   * Sends a message to the currently active tab to open the autofill inline menu.\n   *\n   * @param isFocusingFieldElement - Identifies whether the field element should be focused when the inline menu is opened\n   * @param isOpeningFullInlineMenu - Identifies whether the full inline menu should be forced open regardless of other states\n   */\n  private async openInlineMenu(isFocusingFieldElement = false, isOpeningFullInlineMenu = false) {\n    this.clearDelayedInlineMenuClosure();\n    const currentTab = await BrowserApi.getTabFromCurrentWindowId();\n    if (!currentTab) {\n      return;\n    }\n\n    await BrowserApi.tabSendMessage(\n      currentTab,\n      {\n        command: \"openAutofillInlineMenu\",\n        isFocusingFieldElement,\n        isOpeningFullInlineMenu,\n        authStatus: await this.getAuthStatus(),\n      },\n      {\n        frameId: this.focusedFieldData?.tabId === currentTab.id ? this.focusedFieldData.frameId : 0,\n      },\n    );\n  }\n\n  /**\n   * Gets the inline menu's visibility setting from the settings service.\n   */\n  private async getInlineMenuVisibility(): Promise<InlineMenuVisibilitySetting> {\n    return await firstValueFrom(this.autofillSettingsService.inlineMenuVisibility$);\n  }\n\n  /**\n   * Gets the user's authentication status from the auth service. If the user's authentication\n   * status has changed, the inline menu button's authentication status will be updated\n   * and the inline menu list's ciphers will be updated.\n   */\n  private async getAuthStatus() {\n    return await firstValueFrom(this.authService.activeAccountStatus$);\n  }\n\n  /**\n   * Sends a message to the inline menu button to update its authentication status.\n   */\n  private async updateInlineMenuButtonAuthStatus() {\n    this.inlineMenuButtonPort?.postMessage({\n      command: \"updateInlineMenuButtonAuthStatus\",\n      authStatus: await this.getAuthStatus(),\n    });\n  }\n\n  /**\n   * Handles the inline menu button being clicked. If the user is not authenticated,\n   * the vault will be unlocked. If the user is authenticated, the inline menu will\n   * be opened.\n   *\n   * @param port - The port of the inline menu button\n   */\n  private async handleInlineMenuButtonClicked(port: chrome.runtime.Port) {\n    this.clearDelayedInlineMenuClosure();\n    this.cancelInlineMenuFadeInAndPositionUpdate();\n\n    if ((await this.getAuthStatus()) !== AuthenticationStatus.Unlocked) {\n      await this.unlockVault(port);\n      return;\n    }\n\n    await this.openInlineMenu(false, true);\n  }\n\n  /**\n   * Facilitates opening the unlock popout window.\n   *\n   * @param port - The port of the inline menu list\n   */\n  private async unlockVault(port: chrome.runtime.Port) {\n    const { sender } = port;\n\n    this.closeInlineMenu(port.sender);\n    const retryMessage: LockedVaultPendingNotificationsData = {\n      commandToRetry: { message: { command: \"openAutofillInlineMenu\" }, sender },\n      target: \"overlay.background\",\n    };\n    await BrowserApi.tabSendMessageData(\n      sender.tab,\n      \"addToLockedVaultPendingNotifications\",\n      retryMessage,\n    );\n    await this.openUnlockPopout(sender.tab, true);\n  }\n\n  /**\n   * Triggers the opening of a vault item popout window associated\n   * with the passed cipher ID.\n   * @param inlineMenuCipherId - Cipher ID corresponding to the inlineMenuCiphers map. Does not correspond to the actual cipher's ID.\n   * @param sender - The sender of the port message\n   */\n  private async viewSelectedCipher(\n    { inlineMenuCipherId }: OverlayPortMessage,\n    { sender }: chrome.runtime.Port,\n  ) {\n    const cipher = this.inlineMenuCiphers.get(inlineMenuCipherId);\n    if (!cipher) {\n      return;\n    }\n\n    this.closeInlineMenu(sender);\n    await this.openViewVaultItemPopout(sender.tab, {\n      cipherId: cipher.id,\n      action: SHOW_AUTOFILL_BUTTON,\n    });\n  }\n\n  /**\n   * Facilitates redirecting focus to the inline menu list.\n   */\n  private focusInlineMenuList() {\n    this.inlineMenuListPort?.postMessage({ command: \"focusAutofillInlineMenuList\" });\n  }\n\n  /**\n   * Updates the authentication status for the user and opens the inline menu if\n   * a followup command is present in the message.\n   *\n   * @param message - Extension message received from the `unlockCompleted` command\n   */\n  private async unlockCompleted(message: OverlayBackgroundExtensionMessage) {\n    await this.updateInlineMenuButtonAuthStatus();\n    await this.updateOverlayCiphers();\n\n    if (message.data?.commandToRetry?.message?.command === \"openAutofillInlineMenu\") {\n      await this.openInlineMenu(true);\n    }\n  }\n\n  /**\n   * Gets the translations for the inline menu page.\n   */\n  private getInlineMenuTranslations() {\n    if (!this.inlineMenuPageTranslations) {\n      this.inlineMenuPageTranslations = {\n        locale: BrowserApi.getUILanguage(),\n        opensInANewWindow: this.i18nService.translate(\"opensInANewWindow\"),\n        buttonPageTitle: this.i18nService.translate(\"bitwardenOverlayButton\"),\n        toggleBitwardenVaultOverlay: this.i18nService.translate(\"toggleBitwardenVaultOverlay\"),\n        listPageTitle: this.i18nService.translate(\"bitwardenVault\"),\n        unlockYourAccount: this.i18nService.translate(\"unlockYourAccountToViewAutofillSuggestions\"),\n        unlockAccount: this.i18nService.translate(\"unlockAccount\"),\n        unlockAccountAria: this.i18nService.translate(\"unlockAccountAria\"),\n        fillCredentialsFor: this.i18nService.translate(\"fillCredentialsFor\"),\n        username: this.i18nService.translate(\"username\")?.toLowerCase(),\n        view: this.i18nService.translate(\"view\"),\n        noItemsToShow: this.i18nService.translate(\"noItemsToShow\"),\n        newItem: this.i18nService.translate(\"newItem\"),\n        addNewVaultItem: this.i18nService.translate(\"addNewVaultItem\"),\n        newLogin: this.i18nService.translate(\"newLogin\"),\n        addNewLoginItem: this.i18nService.translate(\"addNewLoginItemAria\"),\n        newCard: this.i18nService.translate(\"newCard\"),\n        addNewCardItem: this.i18nService.translate(\"addNewCardItemAria\"),\n        newIdentity: this.i18nService.translate(\"newIdentity\"),\n        addNewIdentityItem: this.i18nService.translate(\"addNewIdentityItemAria\"),\n        cardNumberEndsWith: this.i18nService.translate(\"cardNumberEndsWith\"),\n        passkeys: this.i18nService.translate(\"passkeys\"),\n        passwords: this.i18nService.translate(\"passwords\"),\n        logInWithPasskey: this.i18nService.translate(\"logInWithPasskeyAriaLabel\"),\n      };\n    }\n\n    return this.inlineMenuPageTranslations;\n  }\n\n  /**\n   * Facilitates redirecting focus out of one of the\n   * inline menu elements to elements on the page.\n   *\n   * @param direction - The direction to redirect focus to (either \"next\", \"previous\" or \"current)\n   * @param sender - The sender of the port message\n   */\n  private redirectInlineMenuFocusOut(\n    { direction }: OverlayPortMessage,\n    { sender }: chrome.runtime.Port,\n  ) {\n    if (!direction) {\n      return;\n    }\n\n    BrowserApi.tabSendMessageData(sender.tab, \"redirectAutofillInlineMenuFocusOut\", {\n      direction,\n    }).catch((error) => this.logService.error(error));\n  }\n\n  /**\n   * Triggers adding a new vault item from the overlay. Gathers data\n   * input by the user before calling to open the add/edit window.\n   *\n   * @param addNewCipherType - The type of cipher to add\n   * @param sender - The sender of the port message\n   */\n  private getNewVaultItemDetails(\n    { addNewCipherType }: OverlayPortMessage,\n    { sender }: chrome.runtime.Port,\n  ) {\n    if (!addNewCipherType || !this.senderTabHasFocusedField(sender)) {\n      return;\n    }\n\n    this.currentAddNewItemData = { addNewCipherType, sender };\n    BrowserApi.tabSendMessage(sender.tab, {\n      command: \"addNewVaultItemFromOverlay\",\n      addNewCipherType,\n    }).catch((error) => this.logService.error(error));\n  }\n\n  /**\n   * Handles adding a new vault item from the overlay. Gathers data login\n   * data captured in the extension message.\n   *\n   * @param addNewCipherType - The type of cipher to add\n   * @param login - The login data captured from the extension message\n   * @param card - The card data captured from the extension message\n   * @param identity - The identity data captured from the extension message\n   * @param sender - The sender of the extension message\n   */\n  private async addNewVaultItem(\n    { addNewCipherType, login, card, identity }: OverlayAddNewItemMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (\n      !this.currentAddNewItemData ||\n      sender.tab.id !== this.currentAddNewItemData.sender.tab.id ||\n      !addNewCipherType ||\n      this.currentAddNewItemData.addNewCipherType !== addNewCipherType\n    ) {\n      return;\n    }\n\n    if (login && this.isAddingNewLogin()) {\n      this.updateCurrentAddNewItemLogin(login, sender);\n    }\n\n    if (card && this.isAddingNewCard()) {\n      this.updateCurrentAddNewItemCard(card);\n    }\n\n    if (identity && this.isAddingNewIdentity()) {\n      this.updateCurrentAddNewItemIdentity(identity);\n    }\n\n    this.addNewVaultItemSubject.next(this.currentAddNewItemData);\n  }\n\n  /**\n   * Identifies if the current add new item data is for adding a new login.\n   */\n  private isAddingNewLogin() {\n    return this.currentAddNewItemData.addNewCipherType === CipherType.Login;\n  }\n\n  /**\n   * Identifies if the current add new item data is for adding a new card.\n   */\n  private isAddingNewCard() {\n    return this.currentAddNewItemData.addNewCipherType === CipherType.Card;\n  }\n\n  /**\n   * Identifies if the current add new item data is for adding a new identity.\n   */\n  private isAddingNewIdentity() {\n    return this.currentAddNewItemData.addNewCipherType === CipherType.Identity;\n  }\n\n  /**\n   * Updates the current add new item data with the provided login data. If the\n   * login data is already present, the data will be merged with the existing data.\n   *\n   * @param login - The login data captured from the extension message\n   * @param sender - The sender of the extension message\n   */\n  private updateCurrentAddNewItemLogin(\n    login: NewLoginCipherData,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    const { username, password } = login;\n\n    if (this.partialLoginDataFoundInSubFrame(sender, login)) {\n      login.uri = \"\";\n      login.hostname = \"\";\n    }\n\n    if (!this.currentAddNewItemData.login) {\n      this.currentAddNewItemData.login = login;\n      return;\n    }\n\n    const currentLoginData = this.currentAddNewItemData.login;\n    if (sender.frameId === 0 && currentLoginData.hostname && !username && !password) {\n      login.uri = \"\";\n      login.hostname = \"\";\n    }\n\n    this.currentAddNewItemData.login = {\n      uri: login.uri || currentLoginData.uri,\n      hostname: login.hostname || currentLoginData.hostname,\n      username: username || currentLoginData.username,\n      password: password || currentLoginData.password,\n    };\n  }\n\n  /**\n   * Handles verifying if the login data for a tab is separated between various\n   * iframe elements. If that is the case, we want to ignore the login uri and\n   * domain to ensure the top frame is treated as the primary source of login data.\n   *\n   * @param sender - The sender of the extension message\n   * @param login - The login data captured from the extension message\n   */\n  private partialLoginDataFoundInSubFrame(\n    sender: chrome.runtime.MessageSender,\n    login: NewLoginCipherData,\n  ) {\n    const { frameId } = sender;\n    const { username, password } = login;\n\n    return frameId !== 0 && (!username || !password);\n  }\n\n  /**\n   * Updates the current add new item data with the provided card data. If the\n   * card data is already present, the data will be merged with the existing data.\n   *\n   * @param card - The card data captured from the extension message\n   */\n  private updateCurrentAddNewItemCard(card: NewCardCipherData) {\n    if (!this.currentAddNewItemData.card) {\n      this.currentAddNewItemData.card = card;\n      return;\n    }\n\n    const currentCardData = this.currentAddNewItemData.card;\n    this.currentAddNewItemData.card = {\n      cardholderName: card.cardholderName || currentCardData.cardholderName,\n      number: card.number || currentCardData.number,\n      expirationMonth: card.expirationMonth || currentCardData.expirationMonth,\n      expirationYear: card.expirationYear || currentCardData.expirationYear,\n      expirationDate: card.expirationDate || currentCardData.expirationDate,\n      cvv: card.cvv || currentCardData.cvv,\n    };\n  }\n\n  /**\n   * Updates the current add new item data with the provided identity data. If the\n   * identity data is already present, the data will be merged with the existing data.\n   *\n   * @param identity - The identity data captured from the extension message\n   */\n  private updateCurrentAddNewItemIdentity(identity: NewIdentityCipherData) {\n    if (!this.currentAddNewItemData.identity) {\n      this.currentAddNewItemData.identity = identity;\n      return;\n    }\n\n    const currentIdentityData = this.currentAddNewItemData.identity;\n    this.currentAddNewItemData.identity = {\n      title: identity.title || currentIdentityData.title,\n      firstName: identity.firstName || currentIdentityData.firstName,\n      middleName: identity.middleName || currentIdentityData.middleName,\n      lastName: identity.lastName || currentIdentityData.lastName,\n      fullName: identity.fullName || currentIdentityData.fullName,\n      address1: identity.address1 || currentIdentityData.address1,\n      address2: identity.address2 || currentIdentityData.address2,\n      address3: identity.address3 || currentIdentityData.address3,\n      city: identity.city || currentIdentityData.city,\n      state: identity.state || currentIdentityData.state,\n      postalCode: identity.postalCode || currentIdentityData.postalCode,\n      country: identity.country || currentIdentityData.country,\n      company: identity.company || currentIdentityData.company,\n      phone: identity.phone || currentIdentityData.phone,\n      email: identity.email || currentIdentityData.email,\n      username: identity.username || currentIdentityData.username,\n    };\n  }\n\n  /**\n   * Handles building a new cipher and opening the add/edit vault item popout.\n   *\n   * @param login - The login data captured from the extension message\n   * @param card - The card data captured from the extension message\n   * @param identity - The identity data captured from the extension message\n   * @param sender - The sender of the extension message\n   */\n  private async buildCipherAndOpenAddEditVaultItemPopout({\n    login,\n    card,\n    identity,\n    sender,\n  }: CurrentAddNewItemData) {\n    const cipherView: CipherView = this.buildNewVaultItemCipherView({\n      login,\n      card,\n      identity,\n    });\n\n    if (!cipherView) {\n      this.currentAddNewItemData = null;\n      return;\n    }\n\n    try {\n      this.closeInlineMenu(sender);\n      await this.cipherService.setAddEditCipherInfo({\n        cipher: cipherView,\n        collectionIds: cipherView.collectionIds,\n      });\n\n      await this.openAddEditVaultItemPopout(sender.tab, { cipherId: cipherView.id });\n      await BrowserApi.sendMessage(\"inlineAutofillMenuRefreshAddEditCipher\");\n    } catch (error) {\n      this.logService.error(\"Error building cipher and opening add/edit vault item popout\", error);\n    }\n\n    this.currentAddNewItemData = null;\n  }\n\n  /**\n   * Builds and returns a new cipher view with the provided vault item data.\n   *\n   * @param login - The login data captured from the extension message\n   * @param card - The card data captured from the extension message\n   * @param identity - The identity data captured from the extension message\n   */\n  private buildNewVaultItemCipherView({ login, card, identity }: OverlayAddNewItemMessage) {\n    if (login && this.isAddingNewLogin()) {\n      return this.buildLoginCipherView(login);\n    }\n\n    if (card && this.isAddingNewCard()) {\n      return this.buildCardCipherView(card);\n    }\n\n    if (identity && this.isAddingNewIdentity()) {\n      return this.buildIdentityCipherView(identity);\n    }\n  }\n\n  /**\n   * Builds a new login cipher view with the provided login data.\n   *\n   * @param login - The login data captured from the extension message\n   */\n  private buildLoginCipherView(login: NewLoginCipherData) {\n    const uriView = new LoginUriView();\n    uriView.uri = login.uri;\n\n    const loginView = new LoginView();\n    loginView.uris = [uriView];\n    loginView.username = login.username || \"\";\n    loginView.password = login.password || \"\";\n\n    const cipherView = new CipherView();\n    cipherView.name = (Utils.getHostname(login.uri) || login.hostname).replace(/^www\\./, \"\");\n    cipherView.folderId = null;\n    cipherView.type = CipherType.Login;\n    cipherView.login = loginView;\n\n    return cipherView;\n  }\n\n  /**\n   * Builds a new card cipher view with the provided card data.\n   *\n   * @param card - The card data captured from the extension message\n   */\n  private buildCardCipherView(card: NewCardCipherData) {\n    const cardView = new CardView();\n    cardView.cardholderName = card.cardholderName || \"\";\n    cardView.number = card.number || \"\";\n    cardView.expMonth = card.expirationMonth || \"\";\n    cardView.expYear = card.expirationYear || \"\";\n    cardView.code = card.cvv || \"\";\n    cardView.brand = card.number ? CardView.getCardBrandByPatterns(card.number) : \"\";\n\n    const cipherView = new CipherView();\n    cipherView.name = \"\";\n    cipherView.folderId = null;\n    cipherView.type = CipherType.Card;\n    cipherView.card = cardView;\n\n    return cipherView;\n  }\n\n  /**\n   * Builds a new identity cipher view with the provided identity data.\n   *\n   * @param identity - The identity data captured from the extension message\n   */\n  private buildIdentityCipherView(identity: NewIdentityCipherData) {\n    const identityView = new IdentityView();\n    identityView.title = identity.title || \"\";\n    identityView.firstName = identity.firstName || \"\";\n    identityView.middleName = identity.middleName || \"\";\n    identityView.lastName = identity.lastName || \"\";\n    identityView.address1 = identity.address1 || \"\";\n    identityView.address2 = identity.address2 || \"\";\n    identityView.address3 = identity.address3 || \"\";\n    identityView.city = identity.city || \"\";\n    identityView.state = identity.state || \"\";\n    identityView.postalCode = identity.postalCode || \"\";\n    identityView.country = identity.country || \"\";\n    identityView.company = identity.company || \"\";\n    identityView.phone = identity.phone || \"\";\n    identityView.email = identity.email || \"\";\n    identityView.username = identity.username || \"\";\n\n    if (identity.fullName && !identityView.firstName && !identityView.lastName) {\n      this.buildIdentityNameParts(identity, identityView);\n    }\n\n    const cipherView = new CipherView();\n    cipherView.name = \"\";\n    cipherView.folderId = null;\n    cipherView.type = CipherType.Identity;\n    cipherView.identity = identityView;\n\n    return cipherView;\n  }\n\n  /**\n   * Splits the identity full name into first, middle, and last name parts.\n   *\n   * @param identity - The identity data captured from the extension message\n   * @param identityView - The identity view to update\n   */\n  private buildIdentityNameParts(identity: NewIdentityCipherData, identityView: IdentityView) {\n    const fullNameParts = identity.fullName.split(\" \");\n    if (fullNameParts.length === 1) {\n      identityView.firstName = fullNameParts[0] || \"\";\n\n      return;\n    }\n\n    if (fullNameParts.length === 2) {\n      identityView.firstName = fullNameParts[0] || \"\";\n      identityView.lastName = fullNameParts[1] || \"\";\n\n      return;\n    }\n\n    identityView.firstName = fullNameParts[0] || \"\";\n    identityView.middleName = fullNameParts[1] || \"\";\n    identityView.lastName = fullNameParts[2] || \"\";\n  }\n\n  /**\n   * Updates the property that identifies if a form field set up for the inline menu is currently focused.\n   *\n   * @param message - The message received from the web page\n   * @param sender - The sender of the port message\n   */\n  private updateIsFieldCurrentlyFocused(\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (this.focusedFieldData && !this.senderFrameHasFocusedField(sender)) {\n      return;\n    }\n\n    this.isFieldCurrentlyFocused = message.isFieldCurrentlyFocused;\n  }\n\n  /**\n   * Allows a content script to check if a form field setup for the inline menu is currently focused.\n   */\n  private checkIsFieldCurrentlyFocused() {\n    return this.isFieldCurrentlyFocused;\n  }\n\n  /**\n   * Updates the property that identifies if a form field is currently being autofilled.\n   *\n   * @param message - The message received from the web page\n   */\n  private updateIsFieldCurrentlyFilling(message: OverlayBackgroundExtensionMessage) {\n    this.isFieldCurrentlyFilling = message.isFieldCurrentlyFilling;\n  }\n\n  /**\n   * Allows a content script to check if a form field is currently being autofilled.\n   */\n  private checkIsFieldCurrentlyFilling() {\n    return this.isFieldCurrentlyFilling;\n  }\n\n  /**\n   * Returns the visibility status of the inline menu button.\n   */\n  private checkIsInlineMenuButtonVisible(): boolean {\n    return this.isInlineMenuButtonVisible;\n  }\n\n  /**\n   * Returns the visibility status of the inline menu list.\n   */\n  private checkIsInlineMenuListVisible(): boolean {\n    return this.isInlineMenuListVisible;\n  }\n\n  /**\n   * Responds to the content script's request to check if the inline menu ciphers are populated.\n   * This will return true only if the sender is the focused field's tab and the inline menu\n   * ciphers are populated.\n   *\n   * @param sender - The sender of the message\n   */\n  private checkIsInlineMenuCiphersPopulated(sender: chrome.runtime.MessageSender) {\n    return this.senderTabHasFocusedField(sender) && this.currentInlineMenuCiphersCount > 0;\n  }\n\n  /**\n   * Triggers an update in the meta \"color-scheme\" value within the inline menu button.\n   * This is done to ensure that the button element has a transparent background, which\n   * is accomplished by setting the \"color-scheme\" meta value of the button iframe to\n   * the same value as the page's meta \"color-scheme\" value.\n   */\n  private updateInlineMenuButtonColorScheme() {\n    this.inlineMenuButtonPort?.postMessage({\n      command: \"updateAutofillInlineMenuColorScheme\",\n    });\n  }\n\n  /**\n   * Triggers an update in the inline menu list's height.\n   *\n   * @param message - Contains the dimensions of the inline menu list\n   */\n  private updateInlineMenuListHeight(message: OverlayBackgroundExtensionMessage) {\n    const parsedHeight = parseInt(message.styles?.height);\n    if (this.inlineMenuPosition.list && parsedHeight > 0) {\n      this.inlineMenuPosition.list.height = parsedHeight;\n    }\n\n    this.inlineMenuListPort?.postMessage({\n      command: \"updateAutofillInlineMenuPosition\",\n      styles: message.styles,\n    });\n  }\n\n  /**\n   * Handles verifying whether the inline menu should be repositioned. This is used to\n   * guard against removing the inline menu when other frames trigger a resize event.\n   *\n   * @param sender - The sender of the message\n   */\n  private checkShouldRepositionInlineMenu(sender: chrome.runtime.MessageSender): boolean {\n    if (!this.focusedFieldData || !this.senderTabHasFocusedField(sender)) {\n      return false;\n    }\n\n    if (this.senderFrameHasFocusedField(sender)) {\n      return true;\n    }\n\n    const subFrameOffsetsForTab = this.subFrameOffsetsForTab[sender.tab.id];\n    if (subFrameOffsetsForTab) {\n      for (const value of subFrameOffsetsForTab.values()) {\n        if (value?.parentFrameIds.includes(sender.frameId)) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Identifies if the sender tab is the same as the focused field's tab.\n   *\n   * @param sender - The sender of the message\n   */\n  private senderTabHasFocusedField(sender: chrome.runtime.MessageSender) {\n    return sender.tab.id === this.focusedFieldData?.tabId;\n  }\n\n  /**\n   * Identifies if the sender frame is the same as the focused field's frame.\n   *\n   * @param sender - The sender of the message\n   */\n  private senderFrameHasFocusedField(sender: chrome.runtime.MessageSender) {\n    return sender.frameId === this.focusedFieldData?.frameId;\n  }\n\n  /**\n   * Triggers when a scroll or resize event occurs within a tab. Will reposition the inline menu\n   * if the focused field is within the viewport.\n   *\n   * @param sender - The sender of the message\n   */\n  private async triggerOverlayReposition(sender: chrome.runtime.MessageSender) {\n    if (!this.checkShouldRepositionInlineMenu(sender)) {\n      return;\n    }\n\n    this.resetFocusedFieldSubFrameOffsets(sender);\n    this.cancelInlineMenuFadeInAndPositionUpdate();\n    this.toggleInlineMenuHidden({ isInlineMenuHidden: true }, sender).catch((error) =>\n      this.logService.error(error),\n    );\n    this.repositionInlineMenuSubject.next(sender);\n  }\n\n  /**\n   * Sets the sub frame offsets for the currently focused field's frame to a null value .\n   * This ensures that we can delay presentation of the inline menu after a reposition\n   * event if the user clicks on a field before the sub frames can be rebuilt.\n   *\n   * @param sender\n   */\n  private resetFocusedFieldSubFrameOffsets(sender: chrome.runtime.MessageSender) {\n    if (this.focusedFieldData.frameId > 0 && this.subFrameOffsetsForTab[sender.tab.id]) {\n      this.subFrameOffsetsForTab[sender.tab.id].set(this.focusedFieldData.frameId, null);\n    }\n  }\n\n  /**\n   * Triggers when a focus event occurs within a tab. Will reposition the inline menu\n   * if the focused field is within the viewport.\n   *\n   * @param sender - The sender of the message\n   */\n  private async triggerSubFrameFocusInRebuild(sender: chrome.runtime.MessageSender) {\n    this.cancelInlineMenuFadeInAndPositionUpdate();\n    this.rebuildSubFrameOffsetsSubject.next(sender);\n    this.repositionInlineMenuSubject.next(sender);\n  }\n\n  /**\n   * Handles determining if the inline menu should be repositioned or closed, and initiates\n   * the process of calculating the new position of the inline menu.\n   *\n   * @param sender - The sender of the message\n   */\n  private repositionInlineMenu = async (sender: chrome.runtime.MessageSender) => {\n    this.cancelInlineMenuFadeInAndPositionUpdate();\n    if (!this.isFieldCurrentlyFocused && !this.isInlineMenuButtonVisible) {\n      await this.closeInlineMenuAfterReposition(sender);\n      return;\n    }\n\n    const isFieldWithinViewport = await BrowserApi.tabSendMessage(\n      sender.tab,\n      { command: \"checkIsMostRecentlyFocusedFieldWithinViewport\" },\n      { frameId: this.focusedFieldData.frameId },\n    );\n    if (!isFieldWithinViewport) {\n      await this.closeInlineMenuAfterReposition(sender);\n      return;\n    }\n\n    if (this.focusedFieldData.frameId > 0) {\n      this.rebuildSubFrameOffsetsSubject.next(sender);\n    }\n\n    this.startUpdateInlineMenuPositionSubject.next(sender);\n  };\n\n  /**\n   * Triggers a closure of the inline menu during a reposition event.\n   *\n   * @param sender - The sender of the message\n|   */\n  private async closeInlineMenuAfterReposition(sender: chrome.runtime.MessageSender) {\n    await this.toggleInlineMenuHidden(\n      { isInlineMenuHidden: false, setTransparentInlineMenu: true },\n      sender,\n    );\n    this.closeInlineMenu(sender, { forceCloseInlineMenu: true });\n  }\n\n  /**\n   * Cancels the observables that update the position and fade in of the inline menu.\n   */\n  private cancelInlineMenuFadeInAndPositionUpdate() {\n    this.cancelInlineMenuFadeIn();\n    this.cancelUpdateInlineMenuPositionSubject.next();\n  }\n\n  /**\n   * Sets up the extension message listeners for the overlay.\n   */\n  private setupExtensionListeners() {\n    BrowserApi.messageListener(\"overlay.background\", this.handleExtensionMessage);\n    BrowserApi.addListener(chrome.webNavigation.onCommitted, this.handleWebNavigationOnCommitted);\n    BrowserApi.addListener(chrome.runtime.onConnect, this.handlePortOnConnect);\n  }\n\n  /**\n   * Handles extension messages sent to the extension background.\n   *\n   * @param message - The message received from the extension\n   * @param sender - The sender of the message\n   * @param sendResponse - The response to send back to the sender\n   */\n  private handleExtensionMessage = (\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response?: any) => void,\n  ) => {\n    const handler: CallableFunction | undefined = this.extensionMessageHandlers[message?.command];\n    if (!handler) {\n      return null;\n    }\n\n    const messageResponse = handler({ message, sender });\n    if (typeof messageResponse === \"undefined\") {\n      return null;\n    }\n\n    Promise.resolve(messageResponse)\n      .then((response) => sendResponse(response))\n      .catch((error) => this.logService.error(error));\n    return true;\n  };\n\n  /**\n   * Handles clearing page details and sub frame offsets when a frame or tab navigation event occurs.\n   *\n   * @param details - The details of the web navigation event\n   */\n  private handleWebNavigationOnCommitted = (\n    details: chrome.webNavigation.WebNavigationTransitionCallbackDetails,\n  ) => {\n    const { frameId, tabId } = details;\n    const subFrames = this.subFrameOffsetsForTab[tabId];\n    if (frameId === 0) {\n      this.removePageDetails(tabId);\n      if (subFrames) {\n        subFrames.clear();\n        delete this.subFrameOffsetsForTab[tabId];\n      }\n      return;\n    }\n\n    if (subFrames && subFrames.has(frameId)) {\n      subFrames.delete(frameId);\n    }\n  };\n\n  /**\n   * Handles the connection of a port to the extension background.\n   *\n   * @param port - The port that connected to the extension background\n   */\n  private handlePortOnConnect = async (port: chrome.runtime.Port) => {\n    const isInlineMenuListMessageConnector = port.name === AutofillOverlayPort.ListMessageConnector;\n    const isInlineMenuButtonMessageConnector =\n      port.name === AutofillOverlayPort.ButtonMessageConnector;\n    if (isInlineMenuListMessageConnector || isInlineMenuButtonMessageConnector) {\n      port.onMessage.addListener(this.handleOverlayElementPortMessage);\n      return;\n    }\n\n    const isInlineMenuListPort = port.name === AutofillOverlayPort.List;\n    const isInlineMenuButtonPort = port.name === AutofillOverlayPort.Button;\n    if (!isInlineMenuListPort && !isInlineMenuButtonPort) {\n      return;\n    }\n\n    if (!this.portKeyForTab[port.sender.tab.id]) {\n      this.portKeyForTab[port.sender.tab.id] = generateRandomChars(12);\n    }\n\n    this.storeOverlayPort(port);\n    port.onDisconnect.addListener(this.handlePortOnDisconnect);\n    port.onMessage.addListener(this.handleOverlayElementPortMessage);\n    port.postMessage({\n      command: `initAutofillInlineMenu${isInlineMenuListPort ? \"List\" : \"Button\"}`,\n      iframeUrl: chrome.runtime.getURL(\n        `overlay/menu-${isInlineMenuListPort ? \"list\" : \"button\"}.html`,\n      ),\n      pageTitle: chrome.i18n.getMessage(\n        isInlineMenuListPort ? \"bitwardenVault\" : \"bitwardenOverlayButton\",\n      ),\n      authStatus: await this.getAuthStatus(),\n      styleSheetUrl: chrome.runtime.getURL(\n        `overlay/menu-${isInlineMenuListPort ? \"list\" : \"button\"}.css`,\n      ),\n      theme: await firstValueFrom(this.themeStateService.selectedTheme$),\n      translations: this.getInlineMenuTranslations(),\n      ciphers: isInlineMenuListPort ? await this.getInlineMenuCipherData() : null,\n      portKey: this.portKeyForTab[port.sender.tab.id],\n      portName: isInlineMenuListPort\n        ? AutofillOverlayPort.ListMessageConnector\n        : AutofillOverlayPort.ButtonMessageConnector,\n      filledByCipherType: this.focusedFieldData?.filledByCipherType,\n      showInlineMenuAccountCreation: this.showInlineMenuAccountCreation(),\n      showPasskeysLabels: this.showPasskeysLabelsWithinInlineMenu,\n    });\n    this.updateInlineMenuPosition(\n      {\n        overlayElement: isInlineMenuListPort\n          ? AutofillOverlayElement.List\n          : AutofillOverlayElement.Button,\n      },\n      port.sender,\n    ).catch((error) => this.logService.error(error));\n  };\n\n  /**\n   * Stores the connected overlay port and sets up any existing ports to be disconnected.\n   *\n   * @param port - The port to store\n|   */\n  private storeOverlayPort(port: chrome.runtime.Port) {\n    if (port.name === AutofillOverlayPort.List) {\n      this.storeExpiredOverlayPort(this.inlineMenuListPort);\n      this.inlineMenuListPort = port;\n      return;\n    }\n\n    if (port.name === AutofillOverlayPort.Button) {\n      this.storeExpiredOverlayPort(this.inlineMenuButtonPort);\n      this.inlineMenuButtonPort = port;\n    }\n  }\n\n  /**\n   * When registering a new connection, we want to ensure that the port is disconnected.\n   * This method places an existing port in the expiredPorts array to be disconnected\n   * at a later time.\n   *\n   * @param port - The port to store in the expiredPorts array\n   */\n  private storeExpiredOverlayPort(port: chrome.runtime.Port | null) {\n    if (port) {\n      this.expiredPorts.push(port);\n    }\n  }\n\n  /**\n   * Handles messages sent to the overlay list or button ports.\n   *\n   * @param message - The message received from the port\n   * @param port - The port that sent the message\n   */\n  private handleOverlayElementPortMessage = (\n    message: OverlayBackgroundExtensionMessage,\n    port: chrome.runtime.Port,\n  ) => {\n    const tabPortKey = this.portKeyForTab[port.sender.tab.id];\n    if (!tabPortKey || tabPortKey !== message?.portKey) {\n      return;\n    }\n\n    const command = message.command;\n    let handler: CallableFunction | undefined;\n\n    if (port.name === AutofillOverlayPort.ButtonMessageConnector) {\n      handler = this.inlineMenuButtonPortMessageHandlers[command];\n    }\n\n    if (port.name === AutofillOverlayPort.ListMessageConnector) {\n      handler = this.inlineMenuListPortMessageHandlers[command];\n    }\n\n    if (!handler) {\n      return;\n    }\n\n    handler({ message, port });\n  };\n\n  /**\n   * Ensures that the inline menu list and button port\n   * references are reset when they are disconnected.\n   *\n   * @param port - The port that was disconnected\n   */\n  private handlePortOnDisconnect = (port: chrome.runtime.Port) => {\n    if (port.name === AutofillOverlayPort.List) {\n      this.inlineMenuListPort = null;\n      this.isInlineMenuListVisible = false;\n      this.inlineMenuPosition.list = null;\n    }\n\n    if (port.name === AutofillOverlayPort.Button) {\n      this.inlineMenuButtonPort = null;\n      this.isInlineMenuButtonVisible = false;\n      this.inlineMenuPosition.button = null;\n    }\n  };\n}\n","import { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\n\nimport MainBackground from \"../../background/main.background\";\n\nimport { OverlayBackground } from \"./abstractions/overlay.background\";\nimport NotificationBackground from \"./notification.background\";\n\nexport default class TabsBackground {\n  constructor(\n    private main: MainBackground,\n    private notificationBackground: NotificationBackground,\n    private overlayBackground: OverlayBackground,\n  ) {}\n\n  private focusedWindowId: number;\n\n  /**\n   * Initializes the window and tab listeners.\n   */\n  async init() {\n    if (!chrome.tabs || !chrome.windows) {\n      return;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.updateCurrentTabData();\n    this.setupTabEventListeners();\n  }\n\n  /**\n   * Sets up the tab and window event listeners.\n   */\n  private setupTabEventListeners() {\n    chrome.windows.onFocusChanged.addListener(this.handleWindowOnFocusChanged);\n    chrome.tabs.onActivated.addListener(this.handleTabOnActivated);\n    chrome.tabs.onReplaced.addListener(this.handleTabOnReplaced);\n    chrome.tabs.onUpdated.addListener(this.handleTabOnUpdated);\n    chrome.tabs.onRemoved.addListener(this.handleTabOnRemoved);\n  }\n\n  /**\n   * Handles the window onFocusChanged event.\n   *\n   * @param windowId - The ID of the window that was focused.\n   */\n  private handleWindowOnFocusChanged = async (windowId: number) => {\n    if (windowId == null || windowId < 0) {\n      return;\n    }\n\n    this.focusedWindowId = windowId;\n    await this.updateCurrentTabData();\n    this.main.messagingService.send(\"windowChanged\");\n  };\n\n  /**\n   * Handles the tab onActivated event.\n   */\n  private handleTabOnActivated = async () => {\n    await this.updateCurrentTabData();\n    this.main.messagingService.send(\"tabChanged\");\n  };\n\n  /**\n   * Handles the tab onReplaced event.\n   */\n  private handleTabOnReplaced = async () => {\n    if (this.main.onReplacedRan) {\n      return;\n    }\n    this.main.onReplacedRan = true;\n\n    await this.notificationBackground.checkNotificationQueue();\n    await this.updateCurrentTabData();\n    this.main.messagingService.send(\"tabChanged\");\n  };\n\n  /**\n   * Handles the tab onUpdated event.\n   *\n   * @param tabId - The ID of the tab that was updated.\n   * @param changeInfo - The change information.\n   * @param tab - The updated tab.\n   */\n  private handleTabOnUpdated = async (\n    tabId: number,\n    changeInfo: chrome.tabs.TabChangeInfo,\n    tab: chrome.tabs.Tab,\n  ) => {\n    const overlayImprovementsFlag = await this.main.configService.getFeatureFlag(\n      FeatureFlag.InlineMenuPositioningImprovements,\n    );\n    const removePageDetailsStatus = new Set([\"loading\", \"unloaded\"]);\n    if (!!overlayImprovementsFlag && removePageDetailsStatus.has(changeInfo.status)) {\n      this.overlayBackground.removePageDetails(tabId);\n    }\n\n    if (this.focusedWindowId > 0 && tab.windowId !== this.focusedWindowId) {\n      return;\n    }\n\n    if (!tab.active) {\n      return;\n    }\n\n    await this.overlayBackground.updateOverlayCiphers(false);\n\n    if (this.main.onUpdatedRan) {\n      return;\n    }\n    this.main.onUpdatedRan = true;\n\n    await this.notificationBackground.checkNotificationQueue(tab);\n    await this.main.refreshBadge();\n    await this.main.refreshMenu();\n    this.main.messagingService.send(\"tabChanged\");\n  };\n\n  /**\n   * Handles the tab onRemoved event.\n   *\n   * @param tabId - The ID of the tab that was removed.\n   */\n  private handleTabOnRemoved = async (tabId: number) => {\n    this.overlayBackground.removePageDetails(tabId);\n  };\n\n  /**\n   * Updates the current tab data, refreshing the badge and context menu\n   * for the current tab. Also updates the overlay ciphers.\n   */\n  private updateCurrentTabData = async () => {\n    await Promise.all([\n      this.main.refreshBadge(),\n      this.main.refreshMenu(),\n      this.overlayBackground.updateOverlayCiphers(false),\n    ]);\n  };\n}\n","import { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { UriMatchStrategy } from \"@bitwarden/common/models/domain/domain-service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\n\nexport default class WebRequestBackground {\n  private pendingAuthRequests: Set<string> = new Set<string>([]);\n  private isFirefox: boolean;\n\n  constructor(\n    platformUtilsService: PlatformUtilsService,\n    private cipherService: CipherService,\n    private authService: AuthService,\n    private readonly webRequest: typeof chrome.webRequest,\n  ) {\n    this.isFirefox = platformUtilsService.isFirefox();\n  }\n\n  startListening() {\n    this.webRequest.onAuthRequired.addListener(\n      async (details, callback) => {\n        if (!details.url || this.pendingAuthRequests.has(details.requestId)) {\n          if (callback) {\n            callback(null);\n          }\n          return;\n        }\n        this.pendingAuthRequests.add(details.requestId);\n        if (this.isFirefox) {\n          // eslint-disable-next-line\n          return new Promise(async (resolve, reject) => {\n            await this.resolveAuthCredentials(details.url, resolve, reject);\n          });\n        } else {\n          await this.resolveAuthCredentials(details.url, callback, callback);\n        }\n      },\n      { urls: [\"http://*/*\", \"https://*/*\"] },\n      [this.isFirefox ? \"blocking\" : \"asyncBlocking\"],\n    );\n\n    this.webRequest.onCompleted.addListener((details) => this.completeAuthRequest(details), {\n      urls: [\"http://*/*\"],\n    });\n    this.webRequest.onErrorOccurred.addListener(\n      (details: any) => this.completeAuthRequest(details),\n      {\n        urls: [\"http://*/*\"],\n      },\n    );\n  }\n\n  // eslint-disable-next-line\n  private async resolveAuthCredentials(domain: string, success: Function, error: Function) {\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      error();\n      return;\n    }\n\n    try {\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        domain,\n        null,\n        UriMatchStrategy.Host,\n      );\n      if (ciphers == null || ciphers.length !== 1) {\n        error();\n        return;\n      }\n\n      success({\n        authCredentials: {\n          username: ciphers[0].login.username,\n          password: ciphers[0].login.password,\n        },\n      });\n    } catch {\n      error();\n    }\n  }\n\n  private completeAuthRequest(details: chrome.webRequest.WebResponseCacheDetails) {\n    this.pendingAuthRequests.delete(details.requestId);\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport {\n  AUTOFILL_CARD_ID,\n  AUTOFILL_ID,\n  AUTOFILL_IDENTITY_ID,\n  COPY_IDENTIFIER_ID,\n  COPY_PASSWORD_ID,\n  COPY_USERNAME_ID,\n  COPY_VERIFICATION_CODE_ID,\n  CREATE_CARD_ID,\n  CREATE_IDENTITY_ID,\n  CREATE_LOGIN_ID,\n  GENERATE_PASSWORD_ID,\n  NOOP_COMMAND_SUFFIX,\n  ROOT_ID,\n  SEPARATOR_ID,\n} from \"@bitwarden/common/autofill/constants\";\nimport { AutofillSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { InitContextMenuItems } from \"./abstractions/main-context-menu-handler\";\n\nexport class MainContextMenuHandler {\n  initRunning = false;\n  private initContextMenuItems: InitContextMenuItems[] = [\n    {\n      id: ROOT_ID,\n      title: \"Bitwarden\",\n    },\n    {\n      id: AUTOFILL_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"autoFillLogin\"),\n    },\n    {\n      id: COPY_USERNAME_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"copyUsername\"),\n    },\n    {\n      id: COPY_PASSWORD_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"copyPassword\"),\n    },\n    {\n      id: COPY_VERIFICATION_CODE_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"copyVerificationCode\"),\n      checkPremiumAccess: true,\n    },\n    {\n      id: SEPARATOR_ID + 1,\n      type: \"separator\",\n      parentId: ROOT_ID,\n    },\n    {\n      id: AUTOFILL_IDENTITY_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"autoFillIdentity\"),\n    },\n    {\n      id: AUTOFILL_CARD_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"autoFillCard\"),\n    },\n    {\n      id: SEPARATOR_ID + 2,\n      type: \"separator\",\n      parentId: ROOT_ID,\n    },\n    {\n      id: GENERATE_PASSWORD_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"generatePasswordCopied\"),\n    },\n    {\n      id: COPY_IDENTIFIER_ID,\n      parentId: ROOT_ID,\n      title: this.i18nService.t(\"copyElementIdentifier\"),\n    },\n  ];\n  private noCardsContextMenuItems: chrome.contextMenus.CreateProperties[] = [\n    {\n      id: `${AUTOFILL_CARD_ID}_NOTICE`,\n      enabled: false,\n      parentId: AUTOFILL_CARD_ID,\n      title: this.i18nService.t(\"noCards\"),\n      type: \"normal\",\n    },\n    {\n      id: `${AUTOFILL_CARD_ID}_${SEPARATOR_ID}`,\n      parentId: AUTOFILL_CARD_ID,\n      type: \"separator\",\n    },\n    {\n      id: `${AUTOFILL_CARD_ID}_${CREATE_CARD_ID}`,\n      parentId: AUTOFILL_CARD_ID,\n      title: this.i18nService.t(\"addCardMenu\"),\n      type: \"normal\",\n    },\n  ];\n  private noIdentitiesContextMenuItems: chrome.contextMenus.CreateProperties[] = [\n    {\n      id: `${AUTOFILL_IDENTITY_ID}_NOTICE`,\n      enabled: false,\n      parentId: AUTOFILL_IDENTITY_ID,\n      title: this.i18nService.t(\"noIdentities\"),\n      type: \"normal\",\n    },\n    {\n      id: `${AUTOFILL_IDENTITY_ID}_${SEPARATOR_ID}`,\n      parentId: AUTOFILL_IDENTITY_ID,\n      type: \"separator\",\n    },\n    {\n      id: `${AUTOFILL_IDENTITY_ID}_${CREATE_IDENTITY_ID}`,\n      parentId: AUTOFILL_IDENTITY_ID,\n      title: this.i18nService.t(\"addIdentityMenu\"),\n      type: \"normal\",\n    },\n  ];\n  private noLoginsContextMenuItems: chrome.contextMenus.CreateProperties[] = [\n    {\n      id: `${AUTOFILL_ID}_NOTICE`,\n      enabled: false,\n      parentId: AUTOFILL_ID,\n      title: this.i18nService.t(\"noMatchingLogins\"),\n      type: \"normal\",\n    },\n    {\n      id: `${AUTOFILL_ID}_${SEPARATOR_ID}1`,\n      parentId: AUTOFILL_ID,\n      type: \"separator\",\n    },\n  ];\n\n  constructor(\n    private stateService: StateService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private i18nService: I18nService,\n    private logService: LogService,\n    private billingAccountProfileStateService: BillingAccountProfileStateService,\n  ) {}\n\n  /**\n   *\n   * @returns a boolean showing whether or not items were created\n   */\n  async init(): Promise<boolean> {\n    const menuEnabled = await firstValueFrom(this.autofillSettingsService.enableContextMenu$);\n    if (!menuEnabled) {\n      await MainContextMenuHandler.removeAll();\n      return false;\n    }\n\n    if (this.initRunning) {\n      return true;\n    }\n    this.initRunning = true;\n\n    try {\n      for (const options of this.initContextMenuItems) {\n        if (\n          options.checkPremiumAccess &&\n          !(await firstValueFrom(this.billingAccountProfileStateService.hasPremiumFromAnySource$))\n        ) {\n          continue;\n        }\n\n        delete options.checkPremiumAccess;\n        await MainContextMenuHandler.create({ ...options, contexts: [\"all\"] });\n      }\n    } catch (error) {\n      this.logService.warning(error.message);\n    } finally {\n      this.initRunning = false;\n    }\n    return true;\n  }\n\n  /**\n   * Creates a context menu item\n   *\n   * @param options - the options for the context menu item\n   */\n  private static create = async (options: chrome.contextMenus.CreateProperties) => {\n    if (!chrome.contextMenus) {\n      return;\n    }\n\n    return new Promise<void>((resolve, reject) => {\n      chrome.contextMenus.create(options, () => {\n        if (chrome.runtime.lastError) {\n          return reject(chrome.runtime.lastError);\n        }\n        resolve();\n      });\n    });\n  };\n\n  static async removeAll() {\n    return new Promise<void>((resolve, reject) => {\n      chrome.contextMenus.removeAll(() => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n          return;\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  static remove(menuItemId: string) {\n    return new Promise<void>((resolve, reject) => {\n      chrome.contextMenus.remove(menuItemId, () => {\n        if (chrome.runtime.lastError) {\n          reject(chrome.runtime.lastError);\n          return;\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  async loadOptions(title: string, optionId: string, cipher?: CipherView) {\n    try {\n      const sanitizedTitle = MainContextMenuHandler.sanitizeContextMenuTitle(title);\n\n      const createChildItem = async (parentId: string) => {\n        const menuItemId = `${parentId}_${optionId}`;\n\n        return await MainContextMenuHandler.create({\n          type: \"normal\",\n          id: menuItemId,\n          parentId,\n          title: sanitizedTitle,\n          contexts: [\"all\"],\n        });\n      };\n\n      if (\n        !cipher ||\n        (cipher.type === CipherType.Login && !Utils.isNullOrEmpty(cipher.login?.password))\n      ) {\n        await createChildItem(AUTOFILL_ID);\n\n        if (cipher?.viewPassword ?? true) {\n          await createChildItem(COPY_PASSWORD_ID);\n        }\n      }\n\n      if (\n        !cipher ||\n        (cipher.type === CipherType.Login && !Utils.isNullOrEmpty(cipher.login?.username))\n      ) {\n        await createChildItem(COPY_USERNAME_ID);\n      }\n\n      const canAccessPremium = await firstValueFrom(\n        this.billingAccountProfileStateService.hasPremiumFromAnySource$,\n      );\n      if (canAccessPremium && (!cipher || !Utils.isNullOrEmpty(cipher.login?.totp))) {\n        await createChildItem(COPY_VERIFICATION_CODE_ID);\n      }\n\n      if ((!cipher || cipher.type === CipherType.Card) && optionId !== CREATE_LOGIN_ID) {\n        await createChildItem(AUTOFILL_CARD_ID);\n      }\n\n      if ((!cipher || cipher.type === CipherType.Identity) && optionId !== CREATE_LOGIN_ID) {\n        await createChildItem(AUTOFILL_IDENTITY_ID);\n      }\n    } catch (error) {\n      this.logService.warning(error.message);\n    }\n  }\n\n  static sanitizeContextMenuTitle(title: string): string {\n    return title.replace(/&/g, \"&&\");\n  }\n\n  async noAccess() {\n    if (await this.init()) {\n      const authed = await this.stateService.getIsAuthenticated();\n      this.loadOptions(\n        this.i18nService.t(authed ? \"unlockVaultMenu\" : \"loginToVaultMenu\"),\n        NOOP_COMMAND_SUFFIX,\n      ).catch((error) => this.logService.warning(error.message));\n    }\n  }\n\n  async noCards() {\n    try {\n      for (const option of this.noCardsContextMenuItems) {\n        await MainContextMenuHandler.create(option);\n      }\n    } catch (error) {\n      this.logService.warning(error.message);\n    }\n  }\n\n  async noIdentities() {\n    try {\n      for (const option of this.noIdentitiesContextMenuItems) {\n        await MainContextMenuHandler.create(option);\n      }\n    } catch (error) {\n      this.logService.warning(error.message);\n    }\n  }\n\n  async noLogins() {\n    try {\n      for (const option of this.noLoginsContextMenuItems) {\n        await MainContextMenuHandler.create(option);\n      }\n\n      await this.loadOptions(this.i18nService.t(\"addLoginMenu\"), CREATE_LOGIN_ID);\n    } catch (error) {\n      this.logService.warning(error.message);\n    }\n  }\n}\n","import { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { AutofillCipherTypeId } from \"../types\";\n\nimport { MainContextMenuHandler } from \"./main-context-menu-handler\";\n\nexport class CipherContextMenuHandler {\n  constructor(\n    private mainContextMenuHandler: MainContextMenuHandler,\n    private authService: AuthService,\n    private cipherService: CipherService,\n  ) {}\n\n  async update(url: string) {\n    if (this.mainContextMenuHandler.initRunning) {\n      return;\n    }\n\n    const authStatus = await this.authService.getAuthStatus();\n    await MainContextMenuHandler.removeAll();\n    if (authStatus !== AuthenticationStatus.Unlocked) {\n      // Should I pass in the auth status or even have two separate methods for this\n      // on MainContextMenuHandler\n      await this.mainContextMenuHandler.noAccess();\n      return;\n    }\n\n    const menuEnabled = await this.mainContextMenuHandler.init();\n    if (!menuEnabled) {\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(url, [\n      CipherType.Card,\n      CipherType.Identity,\n    ]);\n    ciphers.sort((a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b));\n\n    const groupedCiphers: Record<AutofillCipherTypeId, CipherView[]> = ciphers.reduce(\n      (ciphersByType, cipher) => {\n        if (!cipher?.type) {\n          return ciphersByType;\n        }\n\n        const existingCiphersOfType = ciphersByType[cipher.type as AutofillCipherTypeId] || [];\n\n        return {\n          ...ciphersByType,\n          [cipher.type]: [...existingCiphersOfType, cipher],\n        };\n      },\n      {\n        [CipherType.Login]: [],\n        [CipherType.Card]: [],\n        [CipherType.Identity]: [],\n      },\n    );\n\n    if (groupedCiphers[CipherType.Login].length === 0) {\n      await this.mainContextMenuHandler.noLogins();\n    }\n\n    if (groupedCiphers[CipherType.Identity].length === 0) {\n      await this.mainContextMenuHandler.noIdentities();\n    }\n\n    if (groupedCiphers[CipherType.Card].length === 0) {\n      await this.mainContextMenuHandler.noCards();\n    }\n\n    for (const cipher of ciphers) {\n      await this.updateForCipher(cipher);\n    }\n  }\n\n  private async updateForCipher(cipher: CipherView) {\n    if (\n      cipher == null ||\n      !new Set([CipherType.Login, CipherType.Card, CipherType.Identity]).has(cipher.type)\n    ) {\n      return;\n    }\n\n    let title = cipher.name;\n\n    if (cipher.type === CipherType.Login && !Utils.isNullOrEmpty(title) && cipher.login?.username) {\n      title += ` (${cipher.login.username})`;\n    }\n\n    if (cipher.type === CipherType.Card && cipher.card?.subTitle) {\n      title += ` ${cipher.card.subTitle}`;\n    }\n\n    await this.mainContextMenuHandler.loadOptions(title, cipher.id, cipher);\n  }\n}\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport {\n  AUTOFILL_CARD_ID,\n  AUTOFILL_ID,\n  AUTOFILL_IDENTITY_ID,\n  COPY_IDENTIFIER_ID,\n  COPY_PASSWORD_ID,\n  COPY_USERNAME_ID,\n  COPY_VERIFICATION_CODE_ID,\n  CREATE_CARD_ID,\n  CREATE_IDENTITY_ID,\n  CREATE_LOGIN_ID,\n  ExtensionCommand,\n  GENERATE_PASSWORD_ID,\n  NOOP_COMMAND_SUFFIX,\n} from \"@bitwarden/common/autofill/constants\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { TotpService } from \"@bitwarden/common/vault/abstractions/totp.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { openUnlockPopout } from \"../../auth/popup/utils/auth-popout-window\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport {\n  openAddEditVaultItemPopout,\n  openVaultItemPasswordRepromptPopout,\n} from \"../../vault/popup/utils/vault-popout-window\";\nimport { LockedVaultPendingNotificationsData } from \"../background/abstractions/notification.background\";\nimport { AutofillCipherTypeId } from \"../types\";\n\nexport type CopyToClipboardOptions = { text: string; tab: chrome.tabs.Tab };\nexport type CopyToClipboardAction = (options: CopyToClipboardOptions) => void;\nexport type AutofillAction = (tab: chrome.tabs.Tab, cipher: CipherView) => Promise<void>;\n\nexport type GeneratePasswordToClipboardAction = (tab: chrome.tabs.Tab) => Promise<void>;\n\nexport class ContextMenuClickedHandler {\n  constructor(\n    private copyToClipboard: CopyToClipboardAction,\n    private generatePasswordToClipboard: GeneratePasswordToClipboardAction,\n    private autofillAction: AutofillAction,\n    private authService: AuthService,\n    private cipherService: CipherService,\n    private totpService: TotpService,\n    private eventCollectionService: EventCollectionService,\n    private userVerificationService: UserVerificationService,\n    private accountService: AccountService,\n  ) {}\n\n  async run(info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) {\n    if (!tab) {\n      return;\n    }\n\n    switch (info.menuItemId) {\n      case GENERATE_PASSWORD_ID:\n        await this.generatePasswordToClipboard(tab);\n        break;\n      case COPY_IDENTIFIER_ID:\n        this.copyToClipboard({ text: await this.getIdentifier(tab, info), tab: tab });\n        break;\n      default:\n        await this.cipherAction(info, tab);\n    }\n  }\n\n  async cipherAction(info: chrome.contextMenus.OnClickData, tab: chrome.tabs.Tab) {\n    if (!tab) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsData = {\n        commandToRetry: {\n          message: { command: ExtensionCommand.NoopCommand, contextMenuOnClickData: info },\n          sender: { tab: tab },\n        },\n        target: \"contextmenus.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage,\n      );\n\n      await openUnlockPopout(tab);\n      return;\n    }\n\n    // NOTE: We don't actually use the first part of this ID, we further switch based on the parentMenuItemId\n    // I would really love to not add it but that is a departure from how it currently works.\n    const menuItemId = (info.menuItemId as string).split(\"_\")[1]; // We create all the ids, we can guarantee they are strings\n    let cipher: CipherView | undefined;\n    const isCreateCipherAction = [CREATE_LOGIN_ID, CREATE_IDENTITY_ID, CREATE_CARD_ID].includes(\n      menuItemId as string,\n    );\n\n    if (isCreateCipherAction) {\n      // pass; defer to logic below\n    } else if (menuItemId === NOOP_COMMAND_SUFFIX) {\n      const additionalCiphersToGet =\n        info.parentMenuItemId === AUTOFILL_IDENTITY_ID\n          ? [CipherType.Identity]\n          : info.parentMenuItemId === AUTOFILL_CARD_ID\n            ? [CipherType.Card]\n            : [];\n\n      // This NOOP item has come through which is generally only for no access state but since we got here\n      // we are actually unlocked we will do our best to find a good match of an item to autofill this is useful\n      // in scenarios like unlock on autofill\n      const ciphers = await this.cipherService.getAllDecryptedForUrl(\n        tab.url,\n        additionalCiphersToGet,\n      );\n\n      cipher = ciphers[0];\n    } else {\n      const ciphers = await this.cipherService.getAllDecrypted();\n      cipher = ciphers.find(({ id }) => id === menuItemId);\n    }\n\n    if (!cipher && !isCreateCipherAction) {\n      return;\n    }\n\n    const activeUserId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n    );\n    await this.accountService.setAccountActivity(activeUserId, new Date());\n    switch (info.parentMenuItemId) {\n      case AUTOFILL_ID:\n      case AUTOFILL_IDENTITY_ID:\n      case AUTOFILL_CARD_ID: {\n        const cipherType = this.getCipherCreationType(menuItemId);\n\n        if (cipherType) {\n          await openAddEditVaultItemPopout(tab, { cipherType });\n          break;\n        }\n\n        if (await this.isPasswordRepromptRequired(cipher)) {\n          await openVaultItemPasswordRepromptPopout(tab, {\n            cipherId: cipher.id,\n            // The action here is passed on to the single-use reprompt window and doesn't change based on cipher type\n            action: AUTOFILL_ID,\n          });\n        } else {\n          await this.autofillAction(tab, cipher);\n        }\n\n        break;\n      }\n      case COPY_USERNAME_ID:\n        if (menuItemId === CREATE_LOGIN_ID) {\n          await openAddEditVaultItemPopout(tab, { cipherType: CipherType.Login });\n          break;\n        }\n\n        this.copyToClipboard({ text: cipher.login.username, tab: tab });\n        break;\n      case COPY_PASSWORD_ID:\n        if (menuItemId === CREATE_LOGIN_ID) {\n          await openAddEditVaultItemPopout(tab, { cipherType: CipherType.Login });\n          break;\n        }\n\n        if (await this.isPasswordRepromptRequired(cipher)) {\n          await openVaultItemPasswordRepromptPopout(tab, {\n            cipherId: cipher.id,\n            action: COPY_PASSWORD_ID,\n          });\n        } else {\n          this.copyToClipboard({ text: cipher.login.password, tab: tab });\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.eventCollectionService.collect(EventType.Cipher_ClientCopiedPassword, cipher.id);\n        }\n\n        break;\n      case COPY_VERIFICATION_CODE_ID:\n        if (menuItemId === CREATE_LOGIN_ID) {\n          await openAddEditVaultItemPopout(tab, { cipherType: CipherType.Login });\n          break;\n        }\n\n        if (await this.isPasswordRepromptRequired(cipher)) {\n          await openVaultItemPasswordRepromptPopout(tab, {\n            cipherId: cipher.id,\n            action: COPY_VERIFICATION_CODE_ID,\n          });\n        } else {\n          this.copyToClipboard({\n            text: await this.totpService.getCode(cipher.login.totp),\n            tab: tab,\n          });\n        }\n\n        break;\n    }\n  }\n\n  private async isPasswordRepromptRequired(cipher: CipherView): Promise<boolean> {\n    return (\n      cipher.reprompt === CipherRepromptType.Password &&\n      (await this.userVerificationService.hasMasterPasswordAndMasterKeyHash())\n    );\n  }\n\n  private getCipherCreationType(menuItemId?: string): AutofillCipherTypeId | null {\n    return menuItemId === CREATE_IDENTITY_ID\n      ? CipherType.Identity\n      : menuItemId === CREATE_CARD_ID\n        ? CipherType.Card\n        : menuItemId === CREATE_LOGIN_ID\n          ? CipherType.Login\n          : null;\n  }\n\n  private async getIdentifier(tab: chrome.tabs.Tab, info: chrome.contextMenus.OnClickData) {\n    return new Promise<string>((resolve, reject) => {\n      BrowserApi.sendTabsMessage(\n        tab.id,\n        { command: \"getClickedElement\" },\n        { frameId: info.frameId },\n        (identifier: string) => {\n          if (chrome.runtime.lastError) {\n            reject(chrome.runtime.lastError);\n            return;\n          }\n\n          resolve(identifier);\n        },\n      );\n    });\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { SHOW_AUTOFILL_BUTTON } from \"@bitwarden/common/autofill/constants\";\nimport { AutofillSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport { DomainSettingsService } from \"@bitwarden/common/autofill/services/domain-settings.service\";\nimport { InlineMenuVisibilitySetting } from \"@bitwarden/common/autofill/types\";\nimport { EnvironmentService } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { I18nService } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { ThemeStateService } from \"@bitwarden/common/platform/theming/theme-state.service\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { buildCipherIcon } from \"@bitwarden/common/vault/icon/build-cipher-icon\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { LoginUriView } from \"@bitwarden/common/vault/models/view/login-uri.view\";\nimport { LoginView } from \"@bitwarden/common/vault/models/view/login.view\";\n\nimport { openUnlockPopout } from \"../../../auth/popup/utils/auth-popout-window\";\nimport { BrowserApi } from \"../../../platform/browser/browser-api\";\nimport {\n  openViewVaultItemPopout,\n  openAddEditVaultItemPopout,\n} from \"../../../vault/popup/utils/vault-popout-window\";\nimport { LockedVaultPendingNotificationsData } from \"../../background/abstractions/notification.background\";\nimport { OverlayBackground as OverlayBackgroundInterface } from \"../../background/abstractions/overlay.background\";\nimport { AutofillOverlayElement, AutofillOverlayPort } from \"../../enums/autofill-overlay.enum\";\nimport { AutofillService, PageDetail } from \"../../services/abstractions/autofill.service\";\n\nimport {\n  FocusedFieldData,\n  OverlayBackgroundExtensionMessageHandlers,\n  OverlayButtonPortMessageHandlers,\n  OverlayCipherData,\n  OverlayListPortMessageHandlers,\n  OverlayBackgroundExtensionMessage,\n  OverlayAddNewItemMessage,\n  OverlayPortMessage,\n  WebsiteIconData,\n} from \"./abstractions/overlay.background.deprecated\";\n\nclass LegacyOverlayBackground implements OverlayBackgroundInterface {\n  private readonly openUnlockPopout = openUnlockPopout;\n  private readonly openViewVaultItemPopout = openViewVaultItemPopout;\n  private readonly openAddEditVaultItemPopout = openAddEditVaultItemPopout;\n  private overlayLoginCiphers: Map<string, CipherView> = new Map();\n  private pageDetailsForTab: Record<\n    chrome.runtime.MessageSender[\"tab\"][\"id\"],\n    Map<chrome.runtime.MessageSender[\"frameId\"], PageDetail>\n  > = {};\n  private userAuthStatus: AuthenticationStatus = AuthenticationStatus.LoggedOut;\n  private overlayButtonPort: chrome.runtime.Port;\n  private overlayListPort: chrome.runtime.Port;\n  private expiredPorts: chrome.runtime.Port[] = [];\n  private focusedFieldData: FocusedFieldData;\n  private overlayPageTranslations: Record<string, string>;\n  private iconsServerUrl: string;\n  private readonly extensionMessageHandlers: OverlayBackgroundExtensionMessageHandlers = {\n    openAutofillOverlay: () => this.openOverlay(false),\n    autofillOverlayElementClosed: ({ message, sender }) =>\n      this.overlayElementClosed(message, sender),\n    autofillOverlayAddNewVaultItem: ({ message, sender }) => this.addNewVaultItem(message, sender),\n    getAutofillOverlayVisibility: () => this.getOverlayVisibility(),\n    checkAutofillOverlayFocused: () => this.checkOverlayFocused(),\n    focusAutofillOverlayList: () => this.focusOverlayList(),\n    updateAutofillOverlayPosition: ({ message, sender }) =>\n      this.updateOverlayPosition(message, sender),\n    updateAutofillOverlayHidden: ({ message }) => this.updateOverlayHidden(message),\n    updateFocusedFieldData: ({ message, sender }) => this.setFocusedFieldData(message, sender),\n    collectPageDetailsResponse: ({ message, sender }) => this.storePageDetails(message, sender),\n    unlockCompleted: ({ message }) => this.unlockCompleted(message),\n    addedCipher: () => this.updateOverlayCiphers(),\n    addEditCipherSubmitted: () => this.updateOverlayCiphers(),\n    editedCipher: () => this.updateOverlayCiphers(),\n    deletedCipher: () => this.updateOverlayCiphers(),\n  };\n  private readonly overlayButtonPortMessageHandlers: OverlayButtonPortMessageHandlers = {\n    overlayButtonClicked: ({ port }) => this.handleOverlayButtonClicked(port),\n    closeAutofillOverlay: ({ port }) => this.closeOverlay(port),\n    forceCloseAutofillOverlay: ({ port }) => this.closeOverlay(port, true),\n    overlayPageBlurred: () => this.checkOverlayListFocused(),\n    redirectOverlayFocusOut: ({ message, port }) => this.redirectOverlayFocusOut(message, port),\n  };\n  private readonly overlayListPortMessageHandlers: OverlayListPortMessageHandlers = {\n    checkAutofillOverlayButtonFocused: () => this.checkOverlayButtonFocused(),\n    forceCloseAutofillOverlay: ({ port }) => this.closeOverlay(port, true),\n    overlayPageBlurred: () => this.checkOverlayButtonFocused(),\n    unlockVault: ({ port }) => this.unlockVault(port),\n    fillSelectedListItem: ({ message, port }) => this.fillSelectedOverlayListItem(message, port),\n    addNewVaultItem: ({ port }) => this.getNewVaultItemDetails(port),\n    viewSelectedCipher: ({ message, port }) => this.viewSelectedCipher(message, port),\n    redirectOverlayFocusOut: ({ message, port }) => this.redirectOverlayFocusOut(message, port),\n  };\n\n  constructor(\n    private cipherService: CipherService,\n    private autofillService: AutofillService,\n    private authService: AuthService,\n    private environmentService: EnvironmentService,\n    private domainSettingsService: DomainSettingsService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private i18nService: I18nService,\n    private platformUtilsService: PlatformUtilsService,\n    private themeStateService: ThemeStateService,\n  ) {}\n\n  /**\n   * Removes cached page details for a tab\n   * based on the passed tabId.\n   *\n   * @param tabId - Used to reference the page details of a specific tab\n   */\n  removePageDetails(tabId: number) {\n    if (!this.pageDetailsForTab[tabId]) {\n      return;\n    }\n\n    this.pageDetailsForTab[tabId].clear();\n    delete this.pageDetailsForTab[tabId];\n  }\n\n  /**\n   * Sets up the extension message listeners and gets the settings for the\n   * overlay's visibility and the user's authentication status.\n   */\n  async init() {\n    this.setupExtensionMessageListeners();\n    const env = await firstValueFrom(this.environmentService.environment$);\n    this.iconsServerUrl = env.getIconsUrl();\n    await this.getOverlayVisibility();\n    await this.getAuthStatus();\n  }\n\n  /**\n   * Updates the overlay list's ciphers and sends the updated list to the overlay list iframe.\n   * Queries all ciphers for the given url, and sorts them by last used. Will not update the\n   * list of ciphers if the extension is not unlocked.\n   */\n  async updateOverlayCiphers() {\n    const authStatus = await firstValueFrom(this.authService.activeAccountStatus$);\n    if (authStatus !== AuthenticationStatus.Unlocked) {\n      return;\n    }\n\n    const currentTab = await BrowserApi.getTabFromCurrentWindowId();\n    if (!currentTab?.url) {\n      return;\n    }\n\n    this.overlayLoginCiphers = new Map();\n    const ciphersViews = (await this.cipherService.getAllDecryptedForUrl(currentTab.url)).sort(\n      (a, b) => this.cipherService.sortCiphersByLastUsedThenName(a, b),\n    );\n    for (let cipherIndex = 0; cipherIndex < ciphersViews.length; cipherIndex++) {\n      this.overlayLoginCiphers.set(`overlay-cipher-${cipherIndex}`, ciphersViews[cipherIndex]);\n    }\n\n    const ciphers = await this.getOverlayCipherData();\n    this.overlayListPort?.postMessage({ command: \"updateOverlayListCiphers\", ciphers });\n    await BrowserApi.tabSendMessageData(currentTab, \"updateIsOverlayCiphersPopulated\", {\n      isOverlayCiphersPopulated: Boolean(ciphers.length),\n    });\n  }\n\n  /**\n   * Strips out unnecessary data from the ciphers and returns an array of\n   * objects that contain the cipher data needed for the overlay list.\n   */\n  private async getOverlayCipherData(): Promise<OverlayCipherData[]> {\n    const showFavicons = await firstValueFrom(this.domainSettingsService.showFavicons$);\n    const overlayCiphersArray = Array.from(this.overlayLoginCiphers);\n    const overlayCipherData: OverlayCipherData[] = [];\n    let loginCipherIcon: WebsiteIconData;\n\n    for (let cipherIndex = 0; cipherIndex < overlayCiphersArray.length; cipherIndex++) {\n      const [overlayCipherId, cipher] = overlayCiphersArray[cipherIndex];\n      if (!loginCipherIcon && cipher.type === CipherType.Login) {\n        loginCipherIcon = buildCipherIcon(this.iconsServerUrl, cipher, showFavicons);\n      }\n\n      overlayCipherData.push({\n        id: overlayCipherId,\n        name: cipher.name,\n        type: cipher.type,\n        reprompt: cipher.reprompt,\n        favorite: cipher.favorite,\n        icon:\n          cipher.type === CipherType.Login\n            ? loginCipherIcon\n            : buildCipherIcon(this.iconsServerUrl, cipher, showFavicons),\n        login: cipher.type === CipherType.Login ? { username: cipher.login.username } : null,\n        card: cipher.type === CipherType.Card ? cipher.card.subTitle : null,\n      });\n    }\n\n    return overlayCipherData;\n  }\n\n  /**\n   * Handles aggregation of page details for a tab. Stores the page details\n   * in association with the tabId of the tab that sent the message.\n   *\n   * @param message - Message received from the `collectPageDetailsResponse` command\n   * @param sender - The sender of the message\n   */\n  private storePageDetails(\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    const pageDetails = {\n      frameId: sender.frameId,\n      tab: sender.tab,\n      details: message.details,\n    };\n\n    const pageDetailsMap = this.pageDetailsForTab[sender.tab.id];\n    if (!pageDetailsMap) {\n      this.pageDetailsForTab[sender.tab.id] = new Map([[sender.frameId, pageDetails]]);\n      return;\n    }\n\n    pageDetailsMap.set(sender.frameId, pageDetails);\n  }\n\n  /**\n   * Triggers autofill for the selected cipher in the overlay list. Also places\n   * the selected cipher at the top of the list of ciphers.\n   *\n   * @param overlayCipherId - Cipher ID corresponding to the overlayLoginCiphers map. Does not correspond to the actual cipher's ID.\n   * @param sender - The sender of the port message\n   */\n  private async fillSelectedOverlayListItem(\n    { overlayCipherId }: OverlayPortMessage,\n    { sender }: chrome.runtime.Port,\n  ) {\n    const pageDetails = this.pageDetailsForTab[sender.tab.id];\n    if (!overlayCipherId || !pageDetails?.size) {\n      return;\n    }\n\n    const cipher = this.overlayLoginCiphers.get(overlayCipherId);\n\n    if (await this.autofillService.isPasswordRepromptRequired(cipher, sender.tab)) {\n      return;\n    }\n    const totpCode = await this.autofillService.doAutoFill({\n      tab: sender.tab,\n      cipher: cipher,\n      pageDetails: Array.from(pageDetails.values()),\n      fillNewPassword: true,\n      allowTotpAutofill: true,\n    });\n\n    if (totpCode) {\n      this.platformUtilsService.copyToClipboard(totpCode);\n    }\n\n    this.overlayLoginCiphers = new Map([[overlayCipherId, cipher], ...this.overlayLoginCiphers]);\n  }\n\n  /**\n   * Checks if the overlay is focused. Will check the overlay list\n   * if it is open, otherwise it will check the overlay button.\n   */\n  private checkOverlayFocused() {\n    if (this.overlayListPort) {\n      this.checkOverlayListFocused();\n\n      return;\n    }\n\n    this.checkOverlayButtonFocused();\n  }\n\n  /**\n   * Posts a message to the overlay button iframe to check if it is focused.\n   */\n  private checkOverlayButtonFocused() {\n    this.overlayButtonPort?.postMessage({ command: \"checkAutofillOverlayButtonFocused\" });\n  }\n\n  /**\n   * Posts a message to the overlay list iframe to check if it is focused.\n   */\n  private checkOverlayListFocused() {\n    this.overlayListPort?.postMessage({ command: \"checkAutofillOverlayListFocused\" });\n  }\n\n  /**\n   * Sends a message to the sender tab to close the autofill overlay.\n   *\n   * @param sender - The sender of the port message\n   * @param forceCloseOverlay - Identifies whether the overlay should be force closed\n   */\n  private closeOverlay({ sender }: chrome.runtime.Port, forceCloseOverlay = false) {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.tabSendMessageData(sender.tab, \"closeAutofillOverlay\", { forceCloseOverlay });\n  }\n\n  /**\n   * Handles cleanup when an overlay element is closed. Disconnects\n   * the list and button ports and sets them to null.\n   *\n   * @param overlayElement - The overlay element that was closed, either the list or button\n   * @param sender - The sender of the port message\n   */\n  private overlayElementClosed(\n    { overlayElement }: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (sender.tab.id !== this.focusedFieldData?.tabId) {\n      this.expiredPorts.forEach((port) => port.disconnect());\n      this.expiredPorts = [];\n      return;\n    }\n\n    if (overlayElement === AutofillOverlayElement.Button) {\n      this.overlayButtonPort?.disconnect();\n      this.overlayButtonPort = null;\n\n      return;\n    }\n\n    this.overlayListPort?.disconnect();\n    this.overlayListPort = null;\n  }\n\n  /**\n   * Updates the position of either the overlay list or button. The position\n   * is based on the focused field's position and dimensions.\n   *\n   * @param overlayElement - The overlay element to update, either the list or button\n   * @param sender - The sender of the port message\n   */\n  private updateOverlayPosition(\n    { overlayElement }: { overlayElement?: string },\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (!overlayElement || sender.tab.id !== this.focusedFieldData?.tabId) {\n      return;\n    }\n\n    if (overlayElement === AutofillOverlayElement.Button) {\n      this.overlayButtonPort?.postMessage({\n        command: \"updateIframePosition\",\n        styles: this.getOverlayButtonPosition(),\n      });\n\n      return;\n    }\n\n    this.overlayListPort?.postMessage({\n      command: \"updateIframePosition\",\n      styles: this.getOverlayListPosition(),\n    });\n  }\n\n  /**\n   * Gets the position of the focused field and calculates the position\n   * of the overlay button based on the focused field's position and dimensions.\n   */\n  private getOverlayButtonPosition() {\n    if (!this.focusedFieldData) {\n      return;\n    }\n\n    const { top, left, width, height } = this.focusedFieldData.focusedFieldRects;\n    const { paddingRight, paddingLeft } = this.focusedFieldData.focusedFieldStyles;\n    let elementOffset = height * 0.37;\n    if (height >= 35) {\n      elementOffset = height >= 50 ? height * 0.47 : height * 0.42;\n    }\n\n    const elementHeight = height - elementOffset;\n    const elementTopPosition = top + elementOffset / 2;\n    let elementLeftPosition = left + width - height + elementOffset / 2;\n\n    const fieldPaddingRight = parseInt(paddingRight, 10);\n    const fieldPaddingLeft = parseInt(paddingLeft, 10);\n    if (fieldPaddingRight > fieldPaddingLeft) {\n      elementLeftPosition = left + width - height - (fieldPaddingRight - elementOffset + 2);\n    }\n\n    return {\n      top: `${Math.round(elementTopPosition)}px`,\n      left: `${Math.round(elementLeftPosition)}px`,\n      height: `${Math.round(elementHeight)}px`,\n      width: `${Math.round(elementHeight)}px`,\n    };\n  }\n\n  /**\n   * Gets the position of the focused field and calculates the position\n   * of the overlay list based on the focused field's position and dimensions.\n   */\n  private getOverlayListPosition() {\n    if (!this.focusedFieldData) {\n      return;\n    }\n\n    const { top, left, width, height } = this.focusedFieldData.focusedFieldRects;\n    return {\n      width: `${Math.round(width)}px`,\n      top: `${Math.round(top + height)}px`,\n      left: `${Math.round(left)}px`,\n    };\n  }\n\n  /**\n   * Sets the focused field data to the data passed in the extension message.\n   *\n   * @param focusedFieldData - Contains the rects and styles of the focused field.\n   * @param sender - The sender of the extension message\n   */\n  private setFocusedFieldData(\n    { focusedFieldData }: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    this.focusedFieldData = { ...focusedFieldData, tabId: sender.tab.id };\n  }\n\n  /**\n   * Updates the overlay's visibility based on the display property passed in the extension message.\n   *\n   * @param display - The display property of the overlay, either \"block\" or \"none\"\n   */\n  private updateOverlayHidden({ display }: OverlayBackgroundExtensionMessage) {\n    if (!display) {\n      return;\n    }\n\n    const portMessage = { command: \"updateOverlayHidden\", styles: { display } };\n\n    this.overlayButtonPort?.postMessage(portMessage);\n    this.overlayListPort?.postMessage(portMessage);\n  }\n\n  /**\n   * Sends a message to the currently active tab to open the autofill overlay.\n   *\n   * @param isFocusingFieldElement - Identifies whether the field element should be focused when the overlay is opened\n   * @param isOpeningFullOverlay - Identifies whether the full overlay should be forced open regardless of other states\n   */\n  private async openOverlay(isFocusingFieldElement = false, isOpeningFullOverlay = false) {\n    const currentTab = await BrowserApi.getTabFromCurrentWindowId();\n\n    await BrowserApi.tabSendMessageData(currentTab, \"openAutofillOverlay\", {\n      isFocusingFieldElement,\n      isOpeningFullOverlay,\n      authStatus: await this.getAuthStatus(),\n    });\n  }\n\n  /**\n   * Gets the overlay's visibility setting from the settings service.\n   */\n  private async getOverlayVisibility(): Promise<InlineMenuVisibilitySetting> {\n    return await firstValueFrom(this.autofillSettingsService.inlineMenuVisibility$);\n  }\n\n  /**\n   * Gets the user's authentication status from the auth service. If the user's\n   * authentication status has changed, the overlay button's authentication status\n   * will be updated and the overlay list's ciphers will be updated.\n   */\n  private async getAuthStatus() {\n    const formerAuthStatus = this.userAuthStatus;\n    this.userAuthStatus = await this.authService.getAuthStatus();\n\n    if (\n      this.userAuthStatus !== formerAuthStatus &&\n      this.userAuthStatus === AuthenticationStatus.Unlocked\n    ) {\n      this.updateOverlayButtonAuthStatus();\n      await this.updateOverlayCiphers();\n    }\n\n    return this.userAuthStatus;\n  }\n\n  /**\n   * Sends a message to the overlay button to update its authentication status.\n   */\n  private updateOverlayButtonAuthStatus() {\n    this.overlayButtonPort?.postMessage({\n      command: \"updateOverlayButtonAuthStatus\",\n      authStatus: this.userAuthStatus,\n    });\n  }\n\n  /**\n   * Handles the overlay button being clicked. If the user is not authenticated,\n   * the vault will be unlocked. If the user is authenticated, the overlay will\n   * be opened.\n   *\n   * @param port - The port of the overlay button\n   */\n  private handleOverlayButtonClicked(port: chrome.runtime.Port) {\n    if (this.userAuthStatus !== AuthenticationStatus.Unlocked) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.unlockVault(port);\n      return;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.openOverlay(false, true);\n  }\n\n  /**\n   * Facilitates opening the unlock popout window.\n   *\n   * @param port - The port of the overlay list\n   */\n  private async unlockVault(port: chrome.runtime.Port) {\n    const { sender } = port;\n\n    this.closeOverlay(port);\n    const retryMessage: LockedVaultPendingNotificationsData = {\n      commandToRetry: { message: { command: \"openAutofillOverlay\" }, sender },\n      target: \"overlay.background\",\n    };\n    await BrowserApi.tabSendMessageData(\n      sender.tab,\n      \"addToLockedVaultPendingNotifications\",\n      retryMessage,\n    );\n    await this.openUnlockPopout(sender.tab, true);\n  }\n\n  /**\n   * Triggers the opening of a vault item popout window associated\n   * with the passed cipher ID.\n   * @param overlayCipherId - Cipher ID corresponding to the overlayLoginCiphers map. Does not correspond to the actual cipher's ID.\n   * @param sender - The sender of the port message\n   */\n  private async viewSelectedCipher(\n    { overlayCipherId }: OverlayPortMessage,\n    { sender }: chrome.runtime.Port,\n  ) {\n    const cipher = this.overlayLoginCiphers.get(overlayCipherId);\n    if (!cipher) {\n      return;\n    }\n\n    await this.openViewVaultItemPopout(sender.tab, {\n      cipherId: cipher.id,\n      action: SHOW_AUTOFILL_BUTTON,\n    });\n  }\n\n  /**\n   * Facilitates redirecting focus to the overlay list.\n   */\n  private focusOverlayList() {\n    this.overlayListPort?.postMessage({ command: \"focusOverlayList\" });\n  }\n\n  /**\n   * Updates the authentication status for the user and opens the overlay if\n   * a followup command is present in the message.\n   *\n   * @param message - Extension message received from the `unlockCompleted` command\n   */\n  private async unlockCompleted(message: OverlayBackgroundExtensionMessage) {\n    await this.getAuthStatus();\n\n    if (message.data?.commandToRetry?.message?.command === \"openAutofillOverlay\") {\n      await this.openOverlay(true);\n    }\n  }\n\n  /**\n   * Gets the translations for the overlay page.\n   */\n  private getTranslations() {\n    if (!this.overlayPageTranslations) {\n      this.overlayPageTranslations = {\n        locale: BrowserApi.getUILanguage(),\n        opensInANewWindow: this.i18nService.translate(\"opensInANewWindow\"),\n        buttonPageTitle: this.i18nService.translate(\"bitwardenOverlayButton\"),\n        toggleBitwardenVaultOverlay: this.i18nService.translate(\"toggleBitwardenVaultOverlay\"),\n        listPageTitle: this.i18nService.translate(\"bitwardenVault\"),\n        unlockYourAccount: this.i18nService.translate(\"unlockYourAccountToViewMatchingLogins\"),\n        unlockAccount: this.i18nService.translate(\"unlockAccount\"),\n        fillCredentialsFor: this.i18nService.translate(\"fillCredentialsFor\"),\n        partialUsername: this.i18nService.translate(\"partialUsername\"),\n        view: this.i18nService.translate(\"view\"),\n        noItemsToShow: this.i18nService.translate(\"noItemsToShow\"),\n        newItem: this.i18nService.translate(\"newItem\"),\n        addNewVaultItem: this.i18nService.translate(\"addNewVaultItem\"),\n      };\n    }\n\n    return this.overlayPageTranslations;\n  }\n\n  /**\n   * Facilitates redirecting focus out of one of the\n   *  overlay elements to elements on the page.\n   *\n   * @param direction - The direction to redirect focus to (either \"next\", \"previous\" or \"current)\n   * @param sender - The sender of the port message\n   */\n  private redirectOverlayFocusOut(\n    { direction }: OverlayPortMessage,\n    { sender }: chrome.runtime.Port,\n  ) {\n    if (!direction) {\n      return;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.tabSendMessageData(sender.tab, \"redirectOverlayFocusOut\", { direction });\n  }\n\n  /**\n   * Triggers adding a new vault item from the overlay. Gathers data\n   * input by the user before calling to open the add/edit window.\n   *\n   * @param sender - The sender of the port message\n   */\n  private getNewVaultItemDetails({ sender }: chrome.runtime.Port) {\n    void BrowserApi.tabSendMessage(sender.tab, { command: \"addNewVaultItemFromOverlay\" });\n  }\n\n  /**\n   * Handles adding a new vault item from the overlay. Gathers data login\n   * data captured in the extension message.\n   *\n   * @param login - The login data captured from the extension message\n   * @param sender - The sender of the extension message\n   */\n  private async addNewVaultItem(\n    { login }: OverlayAddNewItemMessage,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (!login) {\n      return;\n    }\n\n    const uriView = new LoginUriView();\n    uriView.uri = login.uri;\n\n    const loginView = new LoginView();\n    loginView.uris = [uriView];\n    loginView.username = login.username || \"\";\n    loginView.password = login.password || \"\";\n\n    const cipherView = new CipherView();\n    cipherView.name = (Utils.getHostname(login.uri) || login.hostname).replace(/^www\\./, \"\");\n    cipherView.folderId = null;\n    cipherView.type = CipherType.Login;\n    cipherView.login = loginView;\n\n    await this.cipherService.setAddEditCipherInfo({\n      cipher: cipherView,\n      collectionIds: cipherView.collectionIds,\n    });\n\n    await this.openAddEditVaultItemPopout(sender.tab, { cipherId: cipherView.id });\n    await BrowserApi.sendMessage(\"inlineAutofillMenuRefreshAddEditCipher\");\n  }\n\n  /**\n   * Sets up the extension message listeners for the overlay.\n   */\n  private setupExtensionMessageListeners() {\n    BrowserApi.messageListener(\"overlay.background\", this.handleExtensionMessage);\n    BrowserApi.addListener(chrome.runtime.onConnect, this.handlePortOnConnect);\n  }\n\n  /**\n   * Handles extension messages sent to the extension background.\n   *\n   * @param message - The message received from the extension\n   * @param sender - The sender of the message\n   * @param sendResponse - The response to send back to the sender\n   */\n  private handleExtensionMessage = (\n    message: OverlayBackgroundExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response?: any) => void,\n  ) => {\n    const handler: CallableFunction | undefined = this.extensionMessageHandlers[message?.command];\n    if (!handler) {\n      return null;\n    }\n\n    const messageResponse = handler({ message, sender });\n    if (typeof messageResponse === \"undefined\") {\n      return null;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    Promise.resolve(messageResponse).then((response) => sendResponse(response));\n    return true;\n  };\n\n  /**\n   * Handles the connection of a port to the extension background.\n   *\n   * @param port - The port that connected to the extension background\n   */\n  private handlePortOnConnect = async (port: chrome.runtime.Port) => {\n    const isOverlayListPort = port.name === AutofillOverlayPort.List;\n    const isOverlayButtonPort = port.name === AutofillOverlayPort.Button;\n    if (!isOverlayListPort && !isOverlayButtonPort) {\n      return;\n    }\n\n    this.storeOverlayPort(port);\n    port.onMessage.addListener(this.handleOverlayElementPortMessage);\n    port.postMessage({\n      command: `initAutofillOverlay${isOverlayListPort ? \"List\" : \"Button\"}`,\n      authStatus: await this.getAuthStatus(),\n      styleSheetUrl: chrome.runtime.getURL(`overlay/${isOverlayListPort ? \"list\" : \"button\"}.css`),\n      theme: await firstValueFrom(this.themeStateService.selectedTheme$),\n      translations: this.getTranslations(),\n      ciphers: isOverlayListPort ? await this.getOverlayCipherData() : null,\n    });\n    this.updateOverlayPosition(\n      {\n        overlayElement: isOverlayListPort\n          ? AutofillOverlayElement.List\n          : AutofillOverlayElement.Button,\n      },\n      port.sender,\n    );\n  };\n\n  /**\n   * Stores the connected overlay port and sets up any existing ports to be disconnected.\n   *\n   * @param port - The port to store\n|   */\n  private storeOverlayPort(port: chrome.runtime.Port) {\n    if (port.name === AutofillOverlayPort.List) {\n      this.storeExpiredOverlayPort(this.overlayListPort);\n      this.overlayListPort = port;\n      return;\n    }\n\n    if (port.name === AutofillOverlayPort.Button) {\n      this.storeExpiredOverlayPort(this.overlayButtonPort);\n      this.overlayButtonPort = port;\n    }\n  }\n\n  /**\n   * When registering a new connection, we want to ensure that the port is disconnected.\n   * This method places an existing port in the expiredPorts array to be disconnected\n   * at a later time.\n   *\n   * @param port - The port to store in the expiredPorts array\n   */\n  private storeExpiredOverlayPort(port: chrome.runtime.Port | null) {\n    if (port) {\n      this.expiredPorts.push(port);\n    }\n  }\n\n  /**\n   * Handles messages sent to the overlay list or button ports.\n   *\n   * @param message - The message received from the port\n   * @param port - The port that sent the message\n   */\n  private handleOverlayElementPortMessage = (\n    message: OverlayBackgroundExtensionMessage,\n    port: chrome.runtime.Port,\n  ) => {\n    const command = message?.command;\n    let handler: CallableFunction | undefined;\n\n    if (port.name === AutofillOverlayPort.Button) {\n      handler = this.overlayButtonPortMessageHandlers[command];\n    }\n\n    if (port.name === AutofillOverlayPort.List) {\n      handler = this.overlayListPortMessageHandlers[command];\n    }\n\n    if (!handler) {\n      return;\n    }\n\n    handler({ message, port });\n  };\n}\n\nexport default LegacyOverlayBackground;\n","type Runner<T> = (abortController: AbortController) => Promise<T>;\n\n/**\n * Manages abort controllers for long running tasks and allow separate\n * execution contexts to abort each other by using ids.\n */\nexport class AbortManager {\n  private abortControllers = new Map<string, AbortController>();\n\n  runWithAbortController<T>(id: string, runner: Runner<T>): Promise<T> {\n    const abortController = new AbortController();\n    this.abortControllers.set(id, abortController);\n    return runner(abortController).finally(() => {\n      this.abortControllers.delete(id);\n    });\n  }\n\n  abort(id: string) {\n    this.abortControllers.get(id)?.abort();\n  }\n}\n","export const Fido2ContentScript = {\n  PageScript: \"content/fido2-page-script.js\",\n  PageScriptAppend: \"content/fido2-page-script-append-mv2.js\",\n  PageScriptDelayAppend: \"content/fido2-page-script-delay-append-mv2.js\",\n  ContentScript: \"content/fido2-content-script.js\",\n} as const;\n\nexport const Fido2ContentScriptId = {\n  PageScript: \"fido2-page-script-registration\",\n  ContentScript: \"fido2-content-script-registration\",\n} as const;\n","export const Fido2PortName = {\n  InjectedScript: \"fido2-injected-content-script-port\",\n} as const;\n","import { firstValueFrom, startWith } from \"rxjs\";\nimport { pairwise } from \"rxjs/operators\";\n\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { Fido2ActiveRequestManager } from \"@bitwarden/common/platform/abstractions/fido2/fido2-active-request-manager.abstraction\";\nimport {\n  AssertCredentialParams,\n  AssertCredentialResult,\n  CreateCredentialParams,\n  CreateCredentialResult,\n  Fido2ClientService,\n} from \"@bitwarden/common/platform/abstractions/fido2/fido2-client.service.abstraction\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { VaultSettingsService } from \"@bitwarden/common/vault/abstractions/vault-settings/vault-settings.service\";\n\nimport { BrowserApi } from \"../../../platform/browser/browser-api\";\nimport { ScriptInjectorService } from \"../../../platform/services/abstractions/script-injector.service\";\nimport { AbortManager } from \"../../../vault/background/abort-manager\";\nimport { Fido2ContentScript, Fido2ContentScriptId } from \"../enums/fido2-content-script.enum\";\nimport { Fido2PortName } from \"../enums/fido2-port-name.enum\";\n\nimport {\n  Fido2Background as Fido2BackgroundInterface,\n  Fido2BackgroundExtensionMessageHandlers,\n  Fido2ExtensionMessage,\n  SharedFido2ScriptInjectionDetails,\n  SharedFido2ScriptRegistrationOptions,\n} from \"./abstractions/fido2.background\";\n\nexport class Fido2Background implements Fido2BackgroundInterface {\n  private abortManager = new AbortManager();\n  private fido2ContentScriptPortsSet = new Set<chrome.runtime.Port>();\n  private registeredContentScripts: browser.contentScripts.RegisteredContentScript;\n  private readonly sharedInjectionDetails: SharedFido2ScriptInjectionDetails = {\n    runAt: \"document_start\",\n  };\n  private readonly sharedRegistrationOptions: SharedFido2ScriptRegistrationOptions = {\n    matches: [\"https://*/*\", \"http://localhost/*\"],\n    excludeMatches: [\"https://*/*.xml*\"],\n    allFrames: true,\n    ...this.sharedInjectionDetails,\n  };\n  private readonly extensionMessageHandlers: Fido2BackgroundExtensionMessageHandlers = {\n    fido2AbortRequest: ({ message }) => this.abortRequest(message),\n    fido2RegisterCredentialRequest: ({ message, sender }) =>\n      this.registerCredentialRequest(message, sender),\n    fido2GetCredentialRequest: ({ message, sender }) => this.getCredentialRequest(message, sender),\n  };\n\n  constructor(\n    private logService: LogService,\n    private fido2ActiveRequestManager: Fido2ActiveRequestManager,\n    private fido2ClientService: Fido2ClientService,\n    private vaultSettingsService: VaultSettingsService,\n    private scriptInjectorService: ScriptInjectorService,\n    private configService: ConfigService,\n  ) {}\n\n  /**\n   * Initializes the FIDO2 background service. Sets up the extension message\n   * and port listeners. Subscribes to the enablePasskeys$ observable to\n   * handle passkey enable/disable events.\n   */\n  init() {\n    BrowserApi.messageListener(\"fido2.background\", this.handleExtensionMessage);\n    BrowserApi.addListener(chrome.runtime.onConnect, this.handleInjectedScriptPortConnection);\n    this.vaultSettingsService.enablePasskeys$\n      .pipe(startWith(undefined), pairwise())\n      .subscribe(([previous, current]) => this.handleEnablePasskeysUpdate(previous, current));\n  }\n\n  /**\n   * Injects the FIDO2 content and page script into all existing browser tabs.\n   */\n  async injectFido2ContentScriptsInAllTabs() {\n    const tabs = await BrowserApi.tabsQuery({});\n\n    for (let index = 0; index < tabs.length; index++) {\n      const tab = tabs[index];\n\n      if (tab.url?.startsWith(\"https\")) {\n        void this.injectFido2ContentScripts(tab);\n      }\n    }\n  }\n\n  /**\n   * Handles reacting to the enablePasskeys setting being updated. If the setting\n   * is enabled, the FIDO2 content scripts are injected into all tabs. If the setting\n   * is disabled, the FIDO2 content scripts will be from all tabs. This logic will\n   * not trigger until after the first setting update.\n   *\n   * @param previousEnablePasskeysSetting - The previous value of the enablePasskeys setting.\n   * @param enablePasskeys - The new value of the enablePasskeys setting.\n   */\n  private async handleEnablePasskeysUpdate(\n    previousEnablePasskeysSetting: boolean,\n    enablePasskeys: boolean,\n  ) {\n    this.fido2ActiveRequestManager.removeAllActiveRequests();\n    await this.updateContentScriptRegistration();\n\n    if (previousEnablePasskeysSetting === undefined) {\n      return;\n    }\n\n    this.destroyLoadedFido2ContentScripts();\n    if (enablePasskeys) {\n      void this.injectFido2ContentScriptsInAllTabs();\n    }\n  }\n\n  /**\n   * Updates the registration status of static FIDO2 content\n   * scripts based on the enablePasskeys setting.\n   */\n  private async updateContentScriptRegistration() {\n    if (BrowserApi.isManifestVersion(2)) {\n      await this.updateMv2ContentScriptsRegistration();\n\n      return;\n    }\n\n    await this.updateMv3ContentScriptsRegistration();\n  }\n\n  /**\n   * Updates the registration status of static FIDO2 content\n   * scripts based on the enablePasskeys setting for manifest v2.\n   */\n  private async updateMv2ContentScriptsRegistration() {\n    if (!(await this.isPasskeySettingEnabled())) {\n      await this.registeredContentScripts?.unregister();\n\n      return;\n    }\n\n    this.registeredContentScripts = await BrowserApi.registerContentScriptsMv2({\n      js: [\n        { file: await this.getFido2PageScriptAppendFileName() },\n        { file: Fido2ContentScript.ContentScript },\n      ],\n      ...this.sharedRegistrationOptions,\n    });\n  }\n\n  /**\n   * Updates the registration status of static FIDO2 content\n   * scripts based on the enablePasskeys setting for manifest v3.\n   */\n  private async updateMv3ContentScriptsRegistration() {\n    if (await this.isPasskeySettingEnabled()) {\n      void BrowserApi.registerContentScriptsMv3([\n        {\n          id: Fido2ContentScriptId.PageScript,\n          js: [Fido2ContentScript.PageScript],\n          world: \"MAIN\",\n          ...this.sharedRegistrationOptions,\n        },\n        {\n          id: Fido2ContentScriptId.ContentScript,\n          js: [Fido2ContentScript.ContentScript],\n          ...this.sharedRegistrationOptions,\n        },\n      ]);\n\n      return;\n    }\n\n    void BrowserApi.unregisterContentScriptsMv3({\n      ids: [Fido2ContentScriptId.PageScript, Fido2ContentScriptId.ContentScript],\n    });\n  }\n\n  /**\n   * Injects the FIDO2 content and page script into the current tab.\n   *\n   * @param tab - The current tab to inject the scripts into.\n   */\n  private async injectFido2ContentScripts(tab: chrome.tabs.Tab): Promise<void> {\n    void this.scriptInjectorService.inject({\n      tabId: tab.id,\n      injectDetails: { frame: \"all_frames\", ...this.sharedInjectionDetails },\n      mv2Details: { file: await this.getFido2PageScriptAppendFileName() },\n      mv3Details: { file: Fido2ContentScript.PageScript, world: \"MAIN\" },\n    });\n\n    void this.scriptInjectorService.inject({\n      tabId: tab.id,\n      injectDetails: {\n        file: Fido2ContentScript.ContentScript,\n        frame: \"all_frames\",\n        ...this.sharedInjectionDetails,\n      },\n    });\n  }\n\n  /**\n   * Iterates over the set of injected FIDO2 content script ports\n   * and disconnects them, destroying the content scripts.\n   */\n  private destroyLoadedFido2ContentScripts() {\n    this.fido2ContentScriptPortsSet.forEach((port) => {\n      port.disconnect();\n      this.fido2ContentScriptPortsSet.delete(port);\n    });\n  }\n\n  /**\n   * Aborts the FIDO2 request with the provided requestId.\n   *\n   * @param message - The FIDO2 extension message containing the requestId to abort.\n   */\n  private abortRequest(message: Fido2ExtensionMessage) {\n    this.abortManager.abort(message.abortedRequestId);\n  }\n\n  /**\n   * Registers a new FIDO2 credential with the provided request data.\n   *\n   * @param message - The FIDO2 extension message containing the request data.\n   * @param sender - The sender of the message.\n   */\n  private async registerCredentialRequest(\n    message: Fido2ExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ): Promise<CreateCredentialResult> {\n    return await this.handleCredentialRequest<CreateCredentialResult>(\n      message,\n      sender.tab,\n      this.fido2ClientService.createCredential.bind(this.fido2ClientService),\n    );\n  }\n\n  /**\n   * Gets a FIDO2 credential with the provided request data.\n   *\n   * @param message - The FIDO2 extension message containing the request data.\n   * @param sender - The sender of the message.\n   */\n  private async getCredentialRequest(\n    message: Fido2ExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n  ): Promise<AssertCredentialResult> {\n    return await this.handleCredentialRequest<AssertCredentialResult>(\n      message,\n      sender.tab,\n      this.fido2ClientService.assertCredential.bind(this.fido2ClientService),\n    );\n  }\n\n  /**\n   * Handles Fido2 credential requests by calling the provided callback with the\n   * request data, tab, and abort controller. The callback is expected to return\n   * a promise that resolves with the result of the credential request.\n   *\n   * @param requestId - The request ID associated with the request.\n   * @param data - The request data to handle.\n   * @param tab - The tab associated with the request.\n   * @param callback - The callback to call with the request data, tab, and abort controller.\n   */\n  private handleCredentialRequest = async <T>(\n    { requestId, data }: Fido2ExtensionMessage,\n    tab: chrome.tabs.Tab,\n    callback: (\n      data: AssertCredentialParams | CreateCredentialParams,\n      tab: chrome.tabs.Tab,\n      abortController: AbortController,\n    ) => Promise<T>,\n  ) => {\n    return await this.abortManager.runWithAbortController(requestId, async (abortController) => {\n      try {\n        return await callback(data, tab, abortController);\n      } finally {\n        await BrowserApi.focusTab(tab.id);\n        await BrowserApi.focusWindow(tab.windowId);\n      }\n    });\n  };\n\n  /**\n   * Checks if the enablePasskeys setting is enabled.\n   */\n  private async isPasskeySettingEnabled() {\n    return await firstValueFrom(this.vaultSettingsService.enablePasskeys$);\n  }\n\n  /**\n   * Handles the FIDO2 extension message by calling the\n   * appropriate handler based on the message command.\n   *\n   * @param message - The FIDO2 extension message to handle.\n   * @param sender - The sender of the message.\n   * @param sendResponse - The function to call with the response.\n   */\n  private handleExtensionMessage = (\n    message: Fido2ExtensionMessage,\n    sender: chrome.runtime.MessageSender,\n    sendResponse: (response?: any) => void,\n  ) => {\n    const handler: CallableFunction | undefined = this.extensionMessageHandlers[message?.command];\n    if (!handler) {\n      return null;\n    }\n\n    const messageResponse = handler({ message, sender });\n    if (typeof messageResponse === \"undefined\") {\n      return null;\n    }\n\n    Promise.resolve(messageResponse)\n      .then(\n        (response) => sendResponse(response),\n        (error) => sendResponse({ error: { ...error, message: error.message } }),\n      )\n      .catch(this.logService.error);\n\n    return true;\n  };\n\n  /**\n   * Handles the connection of a FIDO2 content script port by checking if the\n   * FIDO2 feature is enabled for the sender's hostname and origin. If the feature\n   * is not enabled, the port is disconnected.\n   *\n   * @param port - The port which is connecting\n   */\n  private handleInjectedScriptPortConnection = async (port: chrome.runtime.Port) => {\n    if (port.name !== Fido2PortName.InjectedScript || !port.sender?.url) {\n      return;\n    }\n\n    try {\n      const { hostname, origin } = new URL(port.sender.url);\n      if (!(await this.fido2ClientService.isFido2FeatureEnabled(hostname, origin))) {\n        port.disconnect();\n        return;\n      }\n\n      this.fido2ContentScriptPortsSet.add(port);\n      port.onDisconnect.addListener(this.handleInjectScriptPortOnDisconnect);\n    } catch (error) {\n      this.logService.error(error);\n      port.disconnect();\n    }\n  };\n\n  /**\n   * Handles the disconnection of a FIDO2 content script port\n   * by removing it from the set of connected ports.\n   *\n   * @param port - The port which is disconnecting\n   */\n  private handleInjectScriptPortOnDisconnect = (port: chrome.runtime.Port) => {\n    if (port.name !== Fido2PortName.InjectedScript) {\n      return;\n    }\n\n    this.fido2ContentScriptPortsSet.delete(port);\n  };\n\n  /**\n   * Gets the file name of the page-script used within mv2. Will return the\n   * delayed append script if the associated feature flag is enabled.\n   */\n  private async getFido2PageScriptAppendFileName() {\n    const shouldDelayInit = await this.configService.getFeatureFlag(\n      FeatureFlag.DelayFido2PageScriptInitWithinMv2,\n    );\n\n    if (shouldDelayInit) {\n      return Fido2ContentScript.PageScriptDelayAppend;\n    }\n\n    return Fido2ContentScript.PageScriptAppend;\n  }\n}\n","import {\n  BehaviorSubject,\n  EmptyError,\n  filter,\n  firstValueFrom,\n  fromEvent,\n  fromEventPattern,\n  merge,\n  Observable,\n  Subject,\n  switchMap,\n  take,\n  takeUntil,\n  throwError,\n} from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { UserRequestedFallbackAbortReason } from \"@bitwarden/common/platform/abstractions/fido2/fido2-client.service.abstraction\";\nimport {\n  Fido2UserInterfaceService as Fido2UserInterfaceServiceAbstraction,\n  Fido2UserInterfaceSession,\n  NewCredentialParams,\n  PickCredentialParams,\n} from \"@bitwarden/common/platform/abstractions/fido2/fido2-user-interface.service.abstraction\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { BrowserApi } from \"../../../platform/browser/browser-api\";\nimport { closeFido2Popout, openFido2Popout } from \"../../../vault/popup/utils/vault-popout-window\";\n\nconst BrowserFido2MessageName = \"BrowserFido2UserInterfaceServiceMessage\";\n\nexport const BrowserFido2MessageTypes = {\n  ConnectResponse: \"ConnectResponse\",\n  NewSessionCreatedRequest: \"NewSessionCreatedRequest\",\n  PickCredentialRequest: \"PickCredentialRequest\",\n  PickCredentialResponse: \"PickCredentialResponse\",\n  ConfirmNewCredentialRequest: \"ConfirmNewCredentialRequest\",\n  ConfirmNewCredentialResponse: \"ConfirmNewCredentialResponse\",\n  InformExcludedCredentialRequest: \"InformExcludedCredentialRequest\",\n  InformCredentialNotFoundRequest: \"InformCredentialNotFoundRequest\",\n  AbortRequest: \"AbortRequest\",\n  AbortResponse: \"AbortResponse\",\n} as const;\n\nexport type BrowserFido2MessageTypeValue =\n  (typeof BrowserFido2MessageTypes)[keyof typeof BrowserFido2MessageTypes];\n\nexport class SessionClosedError extends Error {\n  constructor() {\n    super(\"Fido2UserInterfaceSession was closed\");\n  }\n}\n\nexport type BrowserFido2Message = { sessionId: string } & (\n  | /**\n   * This message is used by popouts to announce that they are ready\n   * to receive messages.\n   **/ {\n      type: typeof BrowserFido2MessageTypes.ConnectResponse;\n    }\n  /**\n   * This message is used to announce the creation of a new session.\n   * It is used by popouts to know when to close.\n   **/\n  | {\n      type: typeof BrowserFido2MessageTypes.NewSessionCreatedRequest;\n    }\n  | {\n      type: typeof BrowserFido2MessageTypes.PickCredentialRequest;\n      cipherIds: string[];\n      userVerification: boolean;\n      fallbackSupported: boolean;\n    }\n  | {\n      type: typeof BrowserFido2MessageTypes.PickCredentialResponse;\n      cipherId?: string;\n      userVerified: boolean;\n    }\n  | {\n      type: typeof BrowserFido2MessageTypes.ConfirmNewCredentialRequest;\n      credentialName: string;\n      userName: string;\n      userHandle: string;\n      userVerification: boolean;\n      fallbackSupported: boolean;\n      rpId: string;\n    }\n  | {\n      type: typeof BrowserFido2MessageTypes.ConfirmNewCredentialResponse;\n      cipherId: string;\n      userVerified: boolean;\n    }\n  | {\n      type: typeof BrowserFido2MessageTypes.InformExcludedCredentialRequest;\n      existingCipherIds: string[];\n      fallbackSupported: boolean;\n    }\n  | {\n      type: typeof BrowserFido2MessageTypes.InformCredentialNotFoundRequest;\n      fallbackSupported: boolean;\n    }\n  | {\n      type: typeof BrowserFido2MessageTypes.AbortRequest;\n    }\n  | {\n      type: typeof BrowserFido2MessageTypes.AbortResponse;\n      fallbackRequested: boolean;\n    }\n);\n\n/**\n * Browser implementation of the {@link Fido2UserInterfaceService}.\n * The user interface is implemented as a popout and the service uses the browser's messaging API to communicate with it.\n */\nexport class BrowserFido2UserInterfaceService implements Fido2UserInterfaceServiceAbstraction {\n  constructor(private authService: AuthService) {}\n\n  async newSession(\n    fallbackSupported: boolean,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ): Promise<Fido2UserInterfaceSession> {\n    return await BrowserFido2UserInterfaceSession.create(\n      this.authService,\n      fallbackSupported,\n      tab,\n      abortController,\n    );\n  }\n}\n\nexport class BrowserFido2UserInterfaceSession implements Fido2UserInterfaceSession {\n  static async create(\n    authService: AuthService,\n    fallbackSupported: boolean,\n    tab: chrome.tabs.Tab,\n    abortController?: AbortController,\n  ): Promise<BrowserFido2UserInterfaceSession> {\n    return new BrowserFido2UserInterfaceSession(\n      authService,\n      fallbackSupported,\n      tab,\n      abortController,\n    );\n  }\n\n  static sendMessage(msg: BrowserFido2Message) {\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.sendMessage(BrowserFido2MessageName, msg);\n  }\n\n  static abortPopout(sessionId: string, fallbackRequested = false) {\n    this.sendMessage({\n      sessionId: sessionId,\n      type: BrowserFido2MessageTypes.AbortResponse,\n      fallbackRequested: fallbackRequested,\n    });\n  }\n\n  static confirmNewCredentialResponse(sessionId: string, cipherId: string, userVerified: boolean) {\n    this.sendMessage({\n      sessionId: sessionId,\n      type: BrowserFido2MessageTypes.ConfirmNewCredentialResponse,\n      cipherId,\n      userVerified,\n    });\n  }\n\n  private closed = false;\n  private messages$ = (BrowserApi.messageListener$() as Observable<BrowserFido2Message>).pipe(\n    filter((msg) => msg.sessionId === this.sessionId),\n  );\n  private connected$ = new BehaviorSubject(false);\n  private windowClosed$: Observable<number>;\n  private destroy$ = new Subject<void>();\n\n  private constructor(\n    private readonly authService: AuthService,\n    private readonly fallbackSupported: boolean,\n    private readonly tab: chrome.tabs.Tab,\n    readonly abortController = new AbortController(),\n    readonly sessionId = Utils.newGuid(),\n  ) {\n    this.messages$\n      .pipe(\n        filter((msg) => msg.type === BrowserFido2MessageTypes.ConnectResponse),\n        take(1),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(() => {\n        this.connected$.next(true);\n      });\n\n    // Handle session aborted by RP\n    fromEvent(abortController.signal, \"abort\")\n      .pipe(takeUntil(this.destroy$))\n      .subscribe(() => {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.close();\n        BrowserFido2UserInterfaceSession.sendMessage({\n          type: BrowserFido2MessageTypes.AbortRequest,\n          sessionId: this.sessionId,\n        });\n      });\n\n    // Handle session aborted by user\n    this.messages$\n      .pipe(\n        filter((msg) => msg.type === BrowserFido2MessageTypes.AbortResponse),\n        take(1),\n        takeUntil(this.destroy$),\n      )\n      .subscribe((msg) => {\n        if (msg.type === BrowserFido2MessageTypes.AbortResponse) {\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.close();\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.abort(msg.fallbackRequested);\n        }\n      });\n\n    this.windowClosed$ = fromEventPattern(\n      // FIXME: Make sure that is does not cause a memory leak in Safari or use BrowserApi.AddListener\n      // and test that it doesn't break. Tracking Ticket: https://bitwarden.atlassian.net/browse/PM-4735\n      // eslint-disable-next-line no-restricted-syntax\n      (handler: any) => chrome.windows.onRemoved.addListener(handler),\n      (handler: any) => chrome.windows.onRemoved.removeListener(handler),\n    );\n\n    BrowserFido2UserInterfaceSession.sendMessage({\n      type: BrowserFido2MessageTypes.NewSessionCreatedRequest,\n      sessionId,\n    });\n  }\n\n  async pickCredential({\n    cipherIds,\n    userVerification,\n    assumeUserPresence,\n    masterPasswordRepromptRequired,\n  }: PickCredentialParams): Promise<{ cipherId: string; userVerified: boolean }> {\n    // NOTE: For now, we are defaulting to a userVerified status of `true` when the request\n    // is for a conditionally mediated authentication. This will allow for mediated conditional\n    // authentication to function without requiring user interaction. This is a product\n    // decision, rather than a decision based on the expected technical specifications.\n    if (assumeUserPresence && cipherIds.length === 1 && !masterPasswordRepromptRequired) {\n      return { cipherId: cipherIds[0], userVerified: userVerification };\n    }\n\n    const data: BrowserFido2Message = {\n      type: BrowserFido2MessageTypes.PickCredentialRequest,\n      cipherIds,\n      sessionId: this.sessionId,\n      userVerification,\n      fallbackSupported: this.fallbackSupported,\n    };\n\n    await this.send(data);\n    const response = await this.receive(BrowserFido2MessageTypes.PickCredentialResponse);\n\n    return { cipherId: response.cipherId, userVerified: response.userVerified };\n  }\n\n  async confirmNewCredential({\n    credentialName,\n    userName,\n    userHandle,\n    userVerification,\n    rpId,\n  }: NewCredentialParams): Promise<{ cipherId: string; userVerified: boolean }> {\n    const data: BrowserFido2Message = {\n      type: BrowserFido2MessageTypes.ConfirmNewCredentialRequest,\n      sessionId: this.sessionId,\n      credentialName,\n      userName,\n      userHandle,\n      userVerification,\n      fallbackSupported: this.fallbackSupported,\n      rpId,\n    };\n\n    await this.send(data);\n    const response = await this.receive(BrowserFido2MessageTypes.ConfirmNewCredentialResponse);\n\n    return { cipherId: response.cipherId, userVerified: response.userVerified };\n  }\n\n  async informExcludedCredential(existingCipherIds: string[]): Promise<void> {\n    const data: BrowserFido2Message = {\n      type: BrowserFido2MessageTypes.InformExcludedCredentialRequest,\n      sessionId: this.sessionId,\n      existingCipherIds,\n      fallbackSupported: this.fallbackSupported,\n    };\n\n    await this.send(data);\n    await this.receive(BrowserFido2MessageTypes.AbortResponse);\n  }\n\n  async ensureUnlockedVault(): Promise<void> {\n    if ((await this.authService.getAuthStatus()) !== AuthenticationStatus.Unlocked) {\n      await this.connect();\n    }\n  }\n\n  async informCredentialNotFound(): Promise<void> {\n    const data: BrowserFido2Message = {\n      type: BrowserFido2MessageTypes.InformCredentialNotFoundRequest,\n      sessionId: this.sessionId,\n      fallbackSupported: this.fallbackSupported,\n    };\n\n    await this.send(data);\n    await this.receive(BrowserFido2MessageTypes.AbortResponse);\n  }\n\n  async close() {\n    await closeFido2Popout(this.sessionId);\n    this.closed = true;\n    this.destroy$.next();\n    this.destroy$.complete();\n  }\n\n  private async abort(fallback = false) {\n    this.abortController.abort(fallback ? UserRequestedFallbackAbortReason : undefined);\n  }\n\n  private async send(msg: BrowserFido2Message): Promise<void> {\n    if (!this.connected$.value) {\n      await this.connect();\n    }\n    BrowserFido2UserInterfaceSession.sendMessage(msg);\n  }\n\n  private async receive<T extends BrowserFido2Message[\"type\"]>(\n    type: T,\n  ): Promise<BrowserFido2Message & { type: T }> {\n    try {\n      const response = await firstValueFrom(\n        this.messages$.pipe(\n          filter((msg) => msg.sessionId === this.sessionId && msg.type === type),\n          takeUntil(this.destroy$),\n        ),\n      );\n      return response as BrowserFido2Message & { type: T };\n    } catch (error) {\n      if (error instanceof EmptyError) {\n        throw new SessionClosedError();\n      }\n      throw error;\n    }\n  }\n\n  private async connect(): Promise<void> {\n    if (this.closed) {\n      throw new Error(\"Cannot re-open closed session\");\n    }\n\n    const connectPromise = firstValueFrom(\n      merge(\n        this.connected$.pipe(filter((connected) => connected === true)),\n        fromEvent(this.abortController.signal, \"abort\").pipe(\n          switchMap(() => throwError(() => new SessionClosedError())),\n        ),\n      ),\n    );\n\n    const popoutId = await openFido2Popout(this.tab, {\n      sessionId: this.sessionId,\n      fallbackSupported: this.fallbackSupported,\n    });\n\n    this.windowClosed$\n      .pipe(\n        filter((windowId) => {\n          return popoutId === windowId;\n        }),\n        takeUntil(this.destroy$),\n      )\n      .subscribe(() => {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.close();\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.abort(true);\n      });\n\n    await connectPromise;\n  }\n}\n","export const AutofillMessageCommand = {\n  collectPageDetails: \"collectPageDetails\",\n  collectPageDetailsResponse: \"collectPageDetailsResponse\",\n} as const;\n\nexport type AutofillMessageCommandType =\n  (typeof AutofillMessageCommand)[keyof typeof AutofillMessageCommand];\n\nexport const AutofillMessageSender = {\n  collectPageDetailsFromTabObservable: \"collectPageDetailsFromTabObservable\",\n} as const;\n\nexport type AutofillMessageSenderType =\n  (typeof AutofillMessageSender)[keyof typeof AutofillMessageSender];\n","// String values affect code flow in autofill.ts and must not be changed\nexport type FillScriptActions = \"click_on_opid\" | \"focus_by_opid\" | \"fill_by_opid\";\n\nexport type FillScript = [action: FillScriptActions, opid: string, value?: string];\n\nexport type AutofillScriptProperties = {\n  delay_between_operations?: number;\n};\n\nexport type AutofillInsertActions = {\n  fill_by_opid: ({ opid, value }: { opid: string; value: string }) => void;\n  click_on_opid: ({ opid }: { opid: string }) => void;\n  focus_by_opid: ({ opid }: { opid: string }) => void;\n};\n\nexport default class AutofillScript {\n  script: FillScript[] = [];\n  properties: AutofillScriptProperties = {};\n  metadata: any = {}; // Unused, not written or read\n  autosubmit: string[]; // Appears to be unused, read but not written\n  savedUrls: string[];\n  untrustedIframe: boolean;\n  itemType: string; // Appears to be unused, read but not written\n}\n","import { Observable } from \"rxjs\";\n\nimport { UriMatchStrategySetting } from \"@bitwarden/common/models/domain/domain-service\";\nimport { CommandDefinition } from \"@bitwarden/common/platform/messaging\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { AutofillMessageCommand } from \"../../enums/autofill-message.enums\";\nimport AutofillField from \"../../models/autofill-field\";\nimport AutofillForm from \"../../models/autofill-form\";\nimport AutofillPageDetails from \"../../models/autofill-page-details\";\n\nexport interface PageDetail {\n  frameId: number;\n  tab: chrome.tabs.Tab;\n  details: AutofillPageDetails;\n}\n\nexport interface AutoFillOptions {\n  cipher: CipherView;\n  pageDetails: PageDetail[];\n  doc?: typeof self.document;\n  tab: chrome.tabs.Tab;\n  skipUsernameOnlyFill?: boolean;\n  onlyEmptyFields?: boolean;\n  onlyVisibleFields?: boolean;\n  fillNewPassword?: boolean;\n  skipLastUsed?: boolean;\n  allowUntrustedIframe?: boolean;\n  allowTotpAutofill?: boolean;\n  autoSubmitLogin?: boolean;\n}\n\nexport interface FormData {\n  form: AutofillForm;\n  password: AutofillField;\n  username: AutofillField;\n  passwords: AutofillField[];\n}\n\nexport interface GenerateFillScriptOptions {\n  skipUsernameOnlyFill: boolean;\n  onlyEmptyFields: boolean;\n  onlyVisibleFields: boolean;\n  fillNewPassword: boolean;\n  allowTotpAutofill: boolean;\n  autoSubmitLogin: boolean;\n  cipher: CipherView;\n  tabUrl: string;\n  defaultUriMatch: UriMatchStrategySetting;\n}\n\nexport type CollectPageDetailsResponseMessage = {\n  tab: chrome.tabs.Tab;\n  details: AutofillPageDetails;\n  sender?: string;\n  webExtSender: chrome.runtime.MessageSender;\n};\n\nexport const COLLECT_PAGE_DETAILS_RESPONSE_COMMAND =\n  new CommandDefinition<CollectPageDetailsResponseMessage>(\n    AutofillMessageCommand.collectPageDetailsResponse,\n  );\n\nexport abstract class AutofillService {\n  collectPageDetailsFromTab$: (tab: chrome.tabs.Tab) => Observable<PageDetail[]>;\n  loadAutofillScriptsOnInstall: () => Promise<void>;\n  reloadAutofillScripts: () => Promise<void>;\n  injectAutofillScripts: (\n    tab: chrome.tabs.Tab,\n    frameId?: number,\n    triggeringOnPageLoad?: boolean,\n  ) => Promise<void>;\n  getFormsWithPasswordFields: (pageDetails: AutofillPageDetails) => FormData[];\n  doAutoFill: (options: AutoFillOptions) => Promise<string | null>;\n  doAutoFillOnTab: (\n    pageDetails: PageDetail[],\n    tab: chrome.tabs.Tab,\n    fromCommand: boolean,\n    autoSubmitLogin?: boolean,\n  ) => Promise<string | null>;\n  doAutoFillActiveTab: (\n    pageDetails: PageDetail[],\n    fromCommand: boolean,\n    cipherType?: CipherType,\n  ) => Promise<string | null>;\n  setAutoFillOnPageLoadOrgPolicy: () => Promise<void>;\n  isPasswordRepromptRequired: (cipher: CipherView, tab: chrome.tabs.Tab) => Promise<boolean>;\n}\n","export class AutoFillConstants {\n  static readonly EmailFieldNames: string[] = [\n    // English\n    \"email\",\n    \"email address\",\n    \"e-mail\",\n    \"e-mail address\",\n    // German\n    \"email adresse\",\n    \"e-mail adresse\",\n  ];\n\n  static readonly UsernameFieldNames: string[] = [\n    // English\n    \"username\",\n    \"user name\",\n    \"userid\",\n    \"user id\",\n    \"customer id\",\n    \"login id\",\n    \"login\",\n    // German\n    \"benutzername\",\n    \"benutzer name\",\n    \"benutzerid\",\n    \"benutzer id\",\n    ...AutoFillConstants.EmailFieldNames,\n  ];\n\n  static readonly TotpFieldNames: string[] = [\n    \"totp\",\n    \"2fa\",\n    \"mfa\",\n    \"totpcode\",\n    \"2facode\",\n    \"approvals_code\",\n    \"code\",\n    \"mfacode\",\n    \"otc\",\n    \"otc-code\",\n    \"otp\",\n    \"otp-code\",\n    \"otpcode\",\n    \"pin\",\n    \"security_code\",\n    \"twofactor\",\n    \"twofa\",\n    \"twofactorcode\",\n    \"verificationCode\",\n  ];\n\n  static readonly SearchFieldNames: string[] = [\"search\", \"query\", \"find\", \"go\"];\n\n  static readonly FieldIgnoreList: string[] = [\"captcha\", \"findanything\", \"forgot\"];\n\n  static readonly PasswordFieldExcludeList: string[] = [\n    ...AutoFillConstants.FieldIgnoreList,\n    \"onetimepassword\",\n  ];\n\n  static readonly ExcludedAutofillLoginTypes: string[] = [\n    \"hidden\",\n    \"file\",\n    \"button\",\n    \"image\",\n    \"reset\",\n    \"search\",\n  ];\n\n  static readonly ExcludedAutofillTypes: string[] = [\n    \"radio\",\n    \"checkbox\",\n    ...AutoFillConstants.ExcludedAutofillLoginTypes,\n  ];\n\n  static readonly ExcludedInlineMenuTypes: string[] = [\n    \"textarea\",\n    ...AutoFillConstants.ExcludedAutofillTypes,\n  ];\n\n  static readonly ExcludedIdentityAutocompleteTypes: Set<string> = new Set([\n    \"current-password\",\n    \"new-password\",\n  ]);\n}\n\nexport class CreditCardAutoFillConstants {\n  static readonly CardAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"title\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly CardAttributesExtended: string[] = [\n    ...CreditCardAutoFillConstants.CardAttributes,\n    \"label-right\",\n  ];\n\n  static readonly CardHolderFieldNames: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"name\",\n    \"nom\",\n  ];\n\n  static readonly CardHolderFieldNameValues: string[] = [\n    \"cc-name\",\n    \"card-name\",\n    \"cardholder-name\",\n    \"cardholder\",\n    \"tbName\",\n  ];\n\n  static readonly CardNumberFieldNames: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"number\",\n    \"cc\",\n    \"cc-no\",\n    \"card-no\",\n    \"credit-card\",\n    \"numero-carte\",\n    \"carte\",\n    \"carte-credit\",\n    \"num-carte\",\n    \"cb-num\",\n    \"card-pan\",\n  ];\n\n  static readonly CardNumberFieldNameValues: string[] = [\n    \"cc-number\",\n    \"cc-num\",\n    \"card-number\",\n    \"card-num\",\n    \"cc-no\",\n    \"card-no\",\n    \"numero-carte\",\n    \"num-carte\",\n    \"cb-num\",\n  ];\n\n  static readonly CardExpiryFieldNames: string[] = [\n    \"cc-exp\",\n    \"card-exp\",\n    \"cc-expiration\",\n    \"card-expiration\",\n    \"cc-ex\",\n    \"card-ex\",\n    \"card-expire\",\n    \"card-expiry\",\n    \"validite\",\n    \"expiration\",\n    \"expiry\",\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n    \"payment-cc-date\",\n  ];\n\n  static readonly CardExpiryFieldNameValues: string[] = [\n    \"mm-yy\",\n    \"mm-yyyy\",\n    \"yy-mm\",\n    \"yyyy-mm\",\n    \"expiration-date\",\n    \"payment-card-expiration\",\n  ];\n\n  static readonly ExpiryMonthFieldNames: string[] = [\n    \"exp-month\",\n    \"cc-exp-month\",\n    \"cc-month\",\n    \"card-month\",\n    \"cc-mo\",\n    \"card-mo\",\n    \"exp-mo\",\n    \"card-exp-mo\",\n    \"cc-exp-mo\",\n    \"card-expiration-month\",\n    \"expiration-month\",\n    \"cc-mm\",\n    \"cc-m\",\n    \"card-mm\",\n    \"card-m\",\n    \"card-exp-mm\",\n    \"cc-exp-mm\",\n    \"exp-mm\",\n    \"exp-m\",\n    \"expire-month\",\n    \"expire-mo\",\n    \"expiry-month\",\n    \"expiry-mo\",\n    \"card-expire-month\",\n    \"card-expire-mo\",\n    \"card-expiry-month\",\n    \"card-expiry-mo\",\n    \"mois-validite\",\n    \"mois-expiration\",\n    \"m-validite\",\n    \"m-expiration\",\n    \"expiry-date-field-month\",\n    \"expiration-date-month\",\n    \"expiration-date-mm\",\n    \"exp-mon\",\n    \"validity-mo\",\n    \"exp-date-mo\",\n    \"cb-date-mois\",\n    \"date-m\",\n  ];\n\n  static readonly ExpiryYearFieldNames: string[] = [\n    \"exp-year\",\n    \"cc-exp-year\",\n    \"cc-year\",\n    \"card-year\",\n    \"cc-yr\",\n    \"card-yr\",\n    \"exp-yr\",\n    \"card-exp-yr\",\n    \"cc-exp-yr\",\n    \"card-expiration-year\",\n    \"expiration-year\",\n    \"cc-yy\",\n    \"cc-y\",\n    \"card-yy\",\n    \"card-y\",\n    \"card-exp-yy\",\n    \"cc-exp-yy\",\n    \"exp-yy\",\n    \"exp-y\",\n    \"cc-yyyy\",\n    \"card-yyyy\",\n    \"card-exp-yyyy\",\n    \"cc-exp-yyyy\",\n    \"expire-year\",\n    \"expire-yr\",\n    \"expiry-year\",\n    \"expiry-yr\",\n    \"card-expire-year\",\n    \"card-expire-yr\",\n    \"card-expiry-year\",\n    \"card-expiry-yr\",\n    \"an-validite\",\n    \"an-expiration\",\n    \"annee-validite\",\n    \"annee-expiration\",\n    \"expiry-date-field-year\",\n    \"expiration-date-year\",\n    \"cb-date-ann\",\n    \"expiration-date-yy\",\n    \"expiration-date-yyyy\",\n    \"validity-year\",\n    \"exp-date-year\",\n    \"date-y\",\n  ];\n\n  static readonly CVVFieldNames: string[] = [\n    \"cvv\",\n    \"cvc\",\n    \"cvv2\",\n    \"cc-csc\",\n    \"cc-cvv\",\n    \"card-csc\",\n    \"card-cvv\",\n    \"cvd\",\n    \"cid\",\n    \"cvc2\",\n    \"cnv\",\n    \"cvn2\",\n    \"cc-code\",\n    \"card-code\",\n    \"code-securite\",\n    \"security-code\",\n    \"crypto\",\n    \"card-verif\",\n    \"verification-code\",\n    \"csc\",\n    \"ccv\",\n  ];\n\n  static readonly CardBrandFieldNames: string[] = [\n    \"cc-type\",\n    \"card-type\",\n    \"card-brand\",\n    \"cc-brand\",\n    \"cb-type\",\n  ];\n\n  static readonly CardExpiryDateDelimiters: string[] = [\"/\", \"-\", \".\", \" \"];\n\n  // Note, these are expressions of user-guidance for the expected expiry date format to be used\n  static readonly CardExpiryDateFormats: CardExpiryDateFormat[] = [\n    // English\n    {\n      Month: \"mm\",\n      MonthShort: \"m\",\n      Year: \"yyyy\",\n      YearShort: \"yy\",\n    },\n    // Danish\n    {\n      Month: \"mm\",\n      MonthShort: \"m\",\n      Year: \"åååå\",\n      YearShort: \"åå\",\n    },\n    // German/Dutch\n    {\n      Month: \"mm\",\n      MonthShort: \"m\",\n      Year: \"jjjj\",\n      YearShort: \"jj\",\n    },\n    // French/Spanish/Italian\n    {\n      Month: \"mm\",\n      MonthShort: \"m\",\n      Year: \"aa\",\n      YearShort: \"aa\",\n    },\n    // Russian\n    {\n      Month: \"мм\",\n      MonthShort: \"м\",\n      Year: \"гггг\",\n      YearShort: \"гг\",\n    },\n    // Portuguese\n    {\n      Month: \"mm\",\n      MonthShort: \"m\",\n      Year: \"rrrr\",\n      YearShort: \"rr\",\n    },\n  ];\n\n  // Each index represents a language. These three arrays should all be the same length.\n  // 0: English, 1: Danish, 2: German/Dutch, 3: French/Spanish/Italian, 4: Russian, 5: Portuguese\n  static readonly MonthAbbr = [\"mm\", \"mm\", \"mm\", \"mm\", \"мм\", \"mm\"];\n  static readonly YearAbbrShort = [\"yy\", \"åå\", \"jj\", \"aa\", \"гг\", \"rr\"];\n  static readonly YearAbbrLong = [\"yyyy\", \"åååå\", \"jjjj\", \"aa\", \"гггг\", \"rrrr\"];\n}\n\nexport type CardExpiryDateFormat = {\n  Month: string;\n  MonthShort: string;\n  Year: string;\n  YearShort: string;\n};\n\nexport class IdentityAutoFillConstants {\n  static readonly IdentityAttributes: string[] = [\n    \"autoCompleteType\",\n    \"data-stripe\",\n    \"htmlName\",\n    \"htmlID\",\n    \"label-tag\",\n    \"placeholder\",\n    \"label-left\",\n    \"label-top\",\n    \"data-recurly\",\n  ];\n\n  static readonly FullNameFieldNames: string[] = [\"name\", \"full-name\", \"your-name\"];\n\n  static readonly FullNameFieldNameValues: string[] = [\"full-name\", \"your-name\"];\n\n  static readonly TitleFieldNames: string[] = [\n    \"honorific-prefix\",\n    \"prefix\",\n    \"title\",\n    // German\n    \"anrede\",\n  ];\n\n  static readonly FirstnameFieldNames: string[] = [\n    // English\n    \"f-name\",\n    \"first-name\",\n    \"given-name\",\n    \"first-n\",\n    // German\n    \"vorname\",\n  ];\n\n  static readonly MiddlenameFieldNames: string[] = [\n    \"m-name\",\n    \"middle-name\",\n    \"additional-name\",\n    \"middle-initial\",\n    \"middle-n\",\n    \"middle-i\",\n  ];\n\n  static readonly LastnameFieldNames: string[] = [\n    // English\n    \"l-name\",\n    \"last-name\",\n    \"s-name\",\n    \"surname\",\n    \"family-name\",\n    \"family-n\",\n    \"last-n\",\n    // German\n    \"nachname\",\n    \"familienname\",\n  ];\n\n  static readonly EmailFieldNames: string[] = [\"e-mail\", \"email-address\"];\n\n  static readonly AddressFieldNames: string[] = [\n    \"address\",\n    \"street-address\",\n    \"addr\",\n    \"street\",\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n    // German\n    \"strasse\",\n    \"adresse\",\n  ];\n\n  static readonly AddressFieldNameValues: string[] = [\n    \"mailing-addr\",\n    \"billing-addr\",\n    \"mail-addr\",\n    \"bill-addr\",\n  ];\n\n  static readonly Address1FieldNames: string[] = [\n    \"address-1\",\n    \"address-line-1\",\n    \"addr-1\",\n    \"street-1\",\n  ];\n\n  static readonly Address2FieldNames: string[] = [\n    \"address-2\",\n    \"address-line-2\",\n    \"addr-2\",\n    \"street-2\",\n    \"address-ext\",\n  ];\n\n  static readonly Address3FieldNames: string[] = [\n    \"address-3\",\n    \"address-line-3\",\n    \"addr-3\",\n    \"street-3\",\n  ];\n\n  static readonly PostalCodeFieldNames: string[] = [\n    \"postal\",\n    \"zip\",\n    \"zip2\",\n    \"zip-code\",\n    \"postal-code\",\n    \"post-code\",\n    \"postcode\",\n    \"address-zip\",\n    \"address-postal\",\n    \"address-code\",\n    \"address-postal-code\",\n    \"address-zip-code\",\n    // German\n    \"plz\",\n    \"postleitzahl\",\n  ];\n\n  static readonly CityFieldNames: string[] = [\n    \"city\",\n    \"town\",\n    \"address-level-2\",\n    \"address-city\",\n    \"address-town\",\n    // German\n    \"ort\",\n    \"stadt\",\n    \"wohnort\",\n  ];\n\n  static readonly StateFieldNames: string[] = [\n    \"state\",\n    \"province\",\n    \"provence\",\n    \"address-level-1\",\n    \"address-state\",\n    \"address-province\",\n    // German\n    \"bundesland\",\n  ];\n\n  static readonly CountryFieldNames: string[] = [\n    \"country\",\n    \"country-code\",\n    \"country-name\",\n    \"address-country\",\n    \"address-country-name\",\n    \"address-country-code\",\n    // German\n    \"land\",\n  ];\n\n  static readonly PhoneFieldNames: string[] = [\n    \"phone\",\n    \"mobile\",\n    \"mobile-phone\",\n    \"tel\",\n    \"telephone\",\n    \"phone-number\",\n    // German\n    \"telefon\",\n    \"telefonnummer\",\n    \"mobil\",\n    \"handy\",\n  ];\n\n  static readonly UserNameFieldNames: string[] = [\"user-name\", \"user-id\", \"screen-name\"];\n\n  static readonly CompanyFieldNames: string[] = [\n    \"company\",\n    \"company-name\",\n    \"organization\",\n    \"organization-name\",\n    // German\n    \"firma\",\n  ];\n\n  static readonly IsoCountries: { [id: string]: string } = {\n    afghanistan: \"AF\",\n    \"aland islands\": \"AX\",\n    albania: \"AL\",\n    algeria: \"DZ\",\n    \"american samoa\": \"AS\",\n    andorra: \"AD\",\n    angola: \"AO\",\n    anguilla: \"AI\",\n    antarctica: \"AQ\",\n    \"antigua and barbuda\": \"AG\",\n    argentina: \"AR\",\n    armenia: \"AM\",\n    aruba: \"AW\",\n    australia: \"AU\",\n    austria: \"AT\",\n    azerbaijan: \"AZ\",\n    bahamas: \"BS\",\n    bahrain: \"BH\",\n    bangladesh: \"BD\",\n    barbados: \"BB\",\n    belarus: \"BY\",\n    belgium: \"BE\",\n    belize: \"BZ\",\n    benin: \"BJ\",\n    bermuda: \"BM\",\n    bhutan: \"BT\",\n    bolivia: \"BO\",\n    \"bosnia and herzegovina\": \"BA\",\n    botswana: \"BW\",\n    \"bouvet island\": \"BV\",\n    brazil: \"BR\",\n    \"british indian ocean territory\": \"IO\",\n    \"brunei darussalam\": \"BN\",\n    bulgaria: \"BG\",\n    \"burkina faso\": \"BF\",\n    burundi: \"BI\",\n    cambodia: \"KH\",\n    cameroon: \"CM\",\n    canada: \"CA\",\n    \"cape verde\": \"CV\",\n    \"cayman islands\": \"KY\",\n    \"central african republic\": \"CF\",\n    chad: \"TD\",\n    chile: \"CL\",\n    china: \"CN\",\n    \"christmas island\": \"CX\",\n    \"cocos (keeling) islands\": \"CC\",\n    colombia: \"CO\",\n    comoros: \"KM\",\n    congo: \"CG\",\n    \"congo, democratic republic\": \"CD\",\n    \"cook islands\": \"CK\",\n    \"costa rica\": \"CR\",\n    \"cote d'ivoire\": \"CI\",\n    croatia: \"HR\",\n    cuba: \"CU\",\n    cyprus: \"CY\",\n    \"czech republic\": \"CZ\",\n    denmark: \"DK\",\n    djibouti: \"DJ\",\n    dominica: \"DM\",\n    \"dominican republic\": \"DO\",\n    ecuador: \"EC\",\n    egypt: \"EG\",\n    \"el salvador\": \"SV\",\n    \"equatorial guinea\": \"GQ\",\n    eritrea: \"ER\",\n    estonia: \"EE\",\n    ethiopia: \"ET\",\n    \"falkland islands\": \"FK\",\n    \"faroe islands\": \"FO\",\n    fiji: \"FJ\",\n    finland: \"FI\",\n    france: \"FR\",\n    \"french guiana\": \"GF\",\n    \"french polynesia\": \"PF\",\n    \"french southern territories\": \"TF\",\n    gabon: \"GA\",\n    gambia: \"GM\",\n    georgia: \"GE\",\n    germany: \"DE\",\n    ghana: \"GH\",\n    gibraltar: \"GI\",\n    greece: \"GR\",\n    greenland: \"GL\",\n    grenada: \"GD\",\n    guadeloupe: \"GP\",\n    guam: \"GU\",\n    guatemala: \"GT\",\n    guernsey: \"GG\",\n    guinea: \"GN\",\n    \"guinea-bissau\": \"GW\",\n    guyana: \"GY\",\n    haiti: \"HT\",\n    \"heard island & mcdonald islands\": \"HM\",\n    \"holy see (vatican city state)\": \"VA\",\n    honduras: \"HN\",\n    \"hong kong\": \"HK\",\n    hungary: \"HU\",\n    iceland: \"IS\",\n    india: \"IN\",\n    indonesia: \"ID\",\n    \"iran, islamic republic of\": \"IR\",\n    iraq: \"IQ\",\n    ireland: \"IE\",\n    \"isle of man\": \"IM\",\n    israel: \"IL\",\n    italy: \"IT\",\n    jamaica: \"JM\",\n    japan: \"JP\",\n    jersey: \"JE\",\n    jordan: \"JO\",\n    kazakhstan: \"KZ\",\n    kenya: \"KE\",\n    kiribati: \"KI\",\n    \"republic of korea\": \"KR\",\n    \"south korea\": \"KR\",\n    \"democratic people's republic of korea\": \"KP\",\n    \"north korea\": \"KP\",\n    kuwait: \"KW\",\n    kyrgyzstan: \"KG\",\n    \"lao people's democratic republic\": \"LA\",\n    latvia: \"LV\",\n    lebanon: \"LB\",\n    lesotho: \"LS\",\n    liberia: \"LR\",\n    \"libyan arab jamahiriya\": \"LY\",\n    liechtenstein: \"LI\",\n    lithuania: \"LT\",\n    luxembourg: \"LU\",\n    macao: \"MO\",\n    macedonia: \"MK\",\n    madagascar: \"MG\",\n    malawi: \"MW\",\n    malaysia: \"MY\",\n    maldives: \"MV\",\n    mali: \"ML\",\n    malta: \"MT\",\n    \"marshall islands\": \"MH\",\n    martinique: \"MQ\",\n    mauritania: \"MR\",\n    mauritius: \"MU\",\n    mayotte: \"YT\",\n    mexico: \"MX\",\n    \"micronesia, federated states of\": \"FM\",\n    moldova: \"MD\",\n    monaco: \"MC\",\n    mongolia: \"MN\",\n    montenegro: \"ME\",\n    montserrat: \"MS\",\n    morocco: \"MA\",\n    mozambique: \"MZ\",\n    myanmar: \"MM\",\n    namibia: \"NA\",\n    nauru: \"NR\",\n    nepal: \"NP\",\n    netherlands: \"NL\",\n    \"netherlands antilles\": \"AN\",\n    \"new caledonia\": \"NC\",\n    \"new zealand\": \"NZ\",\n    nicaragua: \"NI\",\n    niger: \"NE\",\n    nigeria: \"NG\",\n    niue: \"NU\",\n    \"norfolk island\": \"NF\",\n    \"northern mariana islands\": \"MP\",\n    norway: \"NO\",\n    oman: \"OM\",\n    pakistan: \"PK\",\n    palau: \"PW\",\n    \"palestinian territory, occupied\": \"PS\",\n    panama: \"PA\",\n    \"papua new guinea\": \"PG\",\n    paraguay: \"PY\",\n    peru: \"PE\",\n    philippines: \"PH\",\n    pitcairn: \"PN\",\n    poland: \"PL\",\n    portugal: \"PT\",\n    \"puerto rico\": \"PR\",\n    qatar: \"QA\",\n    reunion: \"RE\",\n    romania: \"RO\",\n    \"russian federation\": \"RU\",\n    rwanda: \"RW\",\n    \"saint barthelemy\": \"BL\",\n    \"saint helena\": \"SH\",\n    \"saint kitts and nevis\": \"KN\",\n    \"saint lucia\": \"LC\",\n    \"saint martin\": \"MF\",\n    \"saint pierre and miquelon\": \"PM\",\n    \"saint vincent and grenadines\": \"VC\",\n    samoa: \"WS\",\n    \"san marino\": \"SM\",\n    \"sao tome and principe\": \"ST\",\n    \"saudi arabia\": \"SA\",\n    senegal: \"SN\",\n    serbia: \"RS\",\n    seychelles: \"SC\",\n    \"sierra leone\": \"SL\",\n    singapore: \"SG\",\n    slovakia: \"SK\",\n    slovenia: \"SI\",\n    \"solomon islands\": \"SB\",\n    somalia: \"SO\",\n    \"south africa\": \"ZA\",\n    \"south georgia and sandwich isl.\": \"GS\",\n    spain: \"ES\",\n    \"sri lanka\": \"LK\",\n    sudan: \"SD\",\n    suriname: \"SR\",\n    \"svalbard and jan mayen\": \"SJ\",\n    swaziland: \"SZ\",\n    sweden: \"SE\",\n    switzerland: \"CH\",\n    \"syrian arab republic\": \"SY\",\n    taiwan: \"TW\",\n    tajikistan: \"TJ\",\n    tanzania: \"TZ\",\n    thailand: \"TH\",\n    \"timor-leste\": \"TL\",\n    togo: \"TG\",\n    tokelau: \"TK\",\n    tonga: \"TO\",\n    \"trinidad and tobago\": \"TT\",\n    tunisia: \"TN\",\n    turkey: \"TR\",\n    turkmenistan: \"TM\",\n    \"turks and caicos islands\": \"TC\",\n    tuvalu: \"TV\",\n    uganda: \"UG\",\n    ukraine: \"UA\",\n    \"united arab emirates\": \"AE\",\n    \"united kingdom\": \"GB\",\n    \"united states\": \"US\",\n    \"united states outlying islands\": \"UM\",\n    uruguay: \"UY\",\n    uzbekistan: \"UZ\",\n    vanuatu: \"VU\",\n    venezuela: \"VE\",\n    vietnam: \"VN\",\n    \"virgin islands, british\": \"VG\",\n    \"virgin islands, u.s.\": \"VI\",\n    \"wallis and futuna\": \"WF\",\n    \"western sahara\": \"EH\",\n    yemen: \"YE\",\n    zambia: \"ZM\",\n    zimbabwe: \"ZW\",\n  };\n\n  static readonly IsoStates: { [id: string]: string } = {\n    alabama: \"AL\",\n    alaska: \"AK\",\n    \"american samoa\": \"AS\",\n    arizona: \"AZ\",\n    arkansas: \"AR\",\n    california: \"CA\",\n    colorado: \"CO\",\n    connecticut: \"CT\",\n    delaware: \"DE\",\n    \"district of columbia\": \"DC\",\n    \"federated states of micronesia\": \"FM\",\n    florida: \"FL\",\n    georgia: \"GA\",\n    guam: \"GU\",\n    hawaii: \"HI\",\n    idaho: \"ID\",\n    illinois: \"IL\",\n    indiana: \"IN\",\n    iowa: \"IA\",\n    kansas: \"KS\",\n    kentucky: \"KY\",\n    louisiana: \"LA\",\n    maine: \"ME\",\n    \"marshall islands\": \"MH\",\n    maryland: \"MD\",\n    massachusetts: \"MA\",\n    michigan: \"MI\",\n    minnesota: \"MN\",\n    mississippi: \"MS\",\n    missouri: \"MO\",\n    montana: \"MT\",\n    nebraska: \"NE\",\n    nevada: \"NV\",\n    \"new hampshire\": \"NH\",\n    \"new jersey\": \"NJ\",\n    \"new mexico\": \"NM\",\n    \"new york\": \"NY\",\n    \"north carolina\": \"NC\",\n    \"north dakota\": \"ND\",\n    \"northern mariana islands\": \"MP\",\n    ohio: \"OH\",\n    oklahoma: \"OK\",\n    oregon: \"OR\",\n    palau: \"PW\",\n    pennsylvania: \"PA\",\n    \"puerto rico\": \"PR\",\n    \"rhode island\": \"RI\",\n    \"south carolina\": \"SC\",\n    \"south dakota\": \"SD\",\n    tennessee: \"TN\",\n    texas: \"TX\",\n    utah: \"UT\",\n    vermont: \"VT\",\n    \"virgin islands\": \"VI\",\n    virginia: \"VA\",\n    washington: \"WA\",\n    \"west virginia\": \"WV\",\n    wisconsin: \"WI\",\n    wyoming: \"WY\",\n  };\n\n  static readonly IsoProvinces: { [id: string]: string } = {\n    alberta: \"AB\",\n    \"british columbia\": \"BC\",\n    manitoba: \"MB\",\n    \"new brunswick\": \"NB\",\n    \"newfoundland and labrador\": \"NL\",\n    \"nova scotia\": \"NS\",\n    ontario: \"ON\",\n    \"prince edward island\": \"PE\",\n    quebec: \"QC\",\n    saskatchewan: \"SK\",\n  };\n}\n\nexport const SubmitLoginButtonNames: string[] = [\n  \"login\",\n  \"signin\",\n  \"submit\",\n  \"continue\",\n  \"next\",\n  \"go\",\n];\n\nexport const SubmitChangePasswordButtonNames: string[] = [\n  \"change\",\n  \"save\",\n  \"savepassword\",\n  \"updatepassword\",\n  \"changepassword\",\n  \"resetpassword\",\n];\n","import { filter, firstValueFrom, Observable, scan, startWith } from \"rxjs\";\nimport { pairwise } from \"rxjs/operators\";\n\nimport { EventCollectionService } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { AccountInfo, AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { AutofillOverlayVisibility } from \"@bitwarden/common/autofill/constants\";\nimport { AutofillSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport { DomainSettingsService } from \"@bitwarden/common/autofill/services/domain-settings.service\";\nimport { UserNotificationSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/user-notification-settings.service\";\nimport { InlineMenuVisibilitySetting } from \"@bitwarden/common/autofill/types\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { EventType } from \"@bitwarden/common/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport {\n  UriMatchStrategySetting,\n  UriMatchStrategy,\n} from \"@bitwarden/common/models/domain/domain-service\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessageListener } from \"@bitwarden/common/platform/messaging\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { TotpService } from \"@bitwarden/common/vault/abstractions/totp.service\";\nimport { FieldType, CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherRepromptType } from \"@bitwarden/common/vault/enums/cipher-reprompt-type\";\nimport { CardView } from \"@bitwarden/common/vault/models/view/card.view\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { FieldView } from \"@bitwarden/common/vault/models/view/field.view\";\nimport { IdentityView } from \"@bitwarden/common/vault/models/view/identity.view\";\nimport { normalizeExpiryYearFormat } from \"@bitwarden/common/vault/utils\";\n\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { ScriptInjectorService } from \"../../platform/services/abstractions/script-injector.service\";\nimport { openVaultItemPasswordRepromptPopout } from \"../../vault/popup/utils/vault-popout-window\";\nimport { AutofillMessageCommand, AutofillMessageSender } from \"../enums/autofill-message.enums\";\nimport { AutofillPort } from \"../enums/autofill-port.enum\";\nimport AutofillField from \"../models/autofill-field\";\nimport AutofillPageDetails from \"../models/autofill-page-details\";\nimport AutofillScript from \"../models/autofill-script\";\n\nimport {\n  AutoFillOptions,\n  AutofillService as AutofillServiceInterface,\n  COLLECT_PAGE_DETAILS_RESPONSE_COMMAND,\n  FormData,\n  GenerateFillScriptOptions,\n  PageDetail,\n} from \"./abstractions/autofill.service\";\nimport {\n  AutoFillConstants,\n  CardExpiryDateFormat,\n  CreditCardAutoFillConstants,\n  IdentityAutoFillConstants,\n} from \"./autofill-constants\";\n\nexport default class AutofillService implements AutofillServiceInterface {\n  private openVaultItemPasswordRepromptPopout = openVaultItemPasswordRepromptPopout;\n  private openPasswordRepromptPopoutDebounce: number | NodeJS.Timeout;\n  private currentlyOpeningPasswordRepromptPopout = false;\n  private autofillScriptPortsSet = new Set<chrome.runtime.Port>();\n  static searchFieldNamesSet = new Set(AutoFillConstants.SearchFieldNames);\n\n  constructor(\n    private cipherService: CipherService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private totpService: TotpService,\n    private eventCollectionService: EventCollectionService,\n    private logService: LogService,\n    private domainSettingsService: DomainSettingsService,\n    private userVerificationService: UserVerificationService,\n    private billingAccountProfileStateService: BillingAccountProfileStateService,\n    private scriptInjectorService: ScriptInjectorService,\n    private accountService: AccountService,\n    private authService: AuthService,\n    private configService: ConfigService,\n    private userNotificationSettingsService: UserNotificationSettingsServiceAbstraction,\n    private messageListener: MessageListener,\n  ) {}\n\n  /**\n   * Collects page details from the specific tab. This method returns an observable that can\n   * be subscribed to in order to build the results from all collectPageDetailsResponse\n   * messages from the given tab.\n   *\n   * @param tab The tab to collect page details from\n   */\n  collectPageDetailsFromTab$(tab: chrome.tabs.Tab): Observable<PageDetail[]> {\n    const pageDetailsFromTab$ = this.messageListener\n      .messages$(COLLECT_PAGE_DETAILS_RESPONSE_COMMAND)\n      .pipe(\n        filter(\n          (message) =>\n            message.tab.id === tab.id &&\n            message.sender === AutofillMessageSender.collectPageDetailsFromTabObservable,\n        ),\n        scan(\n          (acc, message) => [\n            ...acc,\n            {\n              frameId: message.webExtSender.frameId,\n              tab: message.tab,\n              details: message.details,\n            },\n          ],\n          [] as PageDetail[],\n        ),\n      );\n\n    void BrowserApi.tabSendMessage(tab, {\n      tab: tab,\n      command: AutofillMessageCommand.collectPageDetails,\n      sender: AutofillMessageSender.collectPageDetailsFromTabObservable,\n    });\n\n    return pageDetailsFromTab$;\n  }\n\n  /**\n   * Triggers on installation of the extension Handles injecting\n   * content scripts into all tabs that are currently open, and\n   * sets up a listener to ensure content scripts can identify\n   * if the extension context has been disconnected.\n   */\n  async loadAutofillScriptsOnInstall() {\n    BrowserApi.addListener(chrome.runtime.onConnect, this.handleInjectedScriptPortConnection);\n    void this.injectAutofillScriptsInAllTabs();\n    this.autofillSettingsService.inlineMenuVisibility$\n      .pipe(startWith(undefined), pairwise())\n      .subscribe(([previousSetting, currentSetting]) =>\n        this.handleInlineMenuVisibilityChange(previousSetting, currentSetting),\n      );\n  }\n\n  /**\n   * Triggers a complete reload of all autofill scripts on tabs open within\n   * the user's browsing session. This is done by first disconnecting all\n   * existing autofill content script ports, which cleans up existing object\n   * instances, and then re-injecting the autofill scripts into all tabs.\n   */\n  async reloadAutofillScripts() {\n    this.autofillScriptPortsSet.forEach((port) => {\n      port.disconnect();\n      this.autofillScriptPortsSet.delete(port);\n    });\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.injectAutofillScriptsInAllTabs();\n  }\n\n  /**\n   * Injects the autofill scripts into the current tab and all frames\n   * found within the tab. Temporarily, will conditionally inject\n   * the refactor of the core autofill script if the feature flag\n   * is enabled.\n   * @param {chrome.tabs.Tab} tab\n   * @param {number} frameId\n   * @param {boolean} triggeringOnPageLoad\n   */\n  async injectAutofillScripts(\n    tab: chrome.tabs.Tab,\n    frameId = 0,\n    triggeringOnPageLoad = true,\n  ): Promise<void> {\n    // Autofill user settings loaded from state can await the active account state indefinitely\n    // if not guarded by an active account check (e.g. the user is logged in)\n    const activeAccount = await firstValueFrom(this.accountService.activeAccount$);\n    const authStatus = await firstValueFrom(this.authService.activeAccountStatus$);\n    const accountIsUnlocked = authStatus === AuthenticationStatus.Unlocked;\n    let autoFillOnPageLoadIsEnabled = false;\n    const addLoginImprovementsFlagActive = await this.configService.getFeatureFlag(\n      FeatureFlag.NotificationBarAddLoginImprovements,\n    );\n\n    const injectedScripts = [\n      await this.getBootstrapAutofillContentScript(activeAccount, addLoginImprovementsFlagActive),\n    ];\n\n    if (activeAccount && accountIsUnlocked) {\n      autoFillOnPageLoadIsEnabled = await this.getAutofillOnPageLoad();\n    }\n\n    if (triggeringOnPageLoad && autoFillOnPageLoadIsEnabled) {\n      injectedScripts.push(\"autofiller.js\");\n    }\n\n    if (!triggeringOnPageLoad) {\n      await this.scriptInjectorService.inject({\n        tabId: tab.id,\n        injectDetails: { file: \"content/content-message-handler.js\", runAt: \"document_start\" },\n      });\n    }\n\n    if (!addLoginImprovementsFlagActive) {\n      injectedScripts.push(\"notificationBar.js\");\n    }\n\n    injectedScripts.push(\"contextMenuHandler.js\");\n\n    for (const injectedScript of injectedScripts) {\n      await this.scriptInjectorService.inject({\n        tabId: tab.id,\n        injectDetails: {\n          file: `content/${injectedScript}`,\n          runAt: \"document_start\",\n          frame: frameId,\n        },\n      });\n    }\n  }\n\n  /**\n   * Identifies the correct autofill script to inject based on whether the\n   * inline menu is enabled, and whether the user has the notification bar\n   * enabled.\n   *\n   * @param activeAccount - The active account\n   * @param addLoginImprovementsFlagActive - Whether the add login improvements feature flag is active\n   */\n  private async getBootstrapAutofillContentScript(\n    activeAccount: { id: UserId | undefined } & AccountInfo,\n    addLoginImprovementsFlagActive = false,\n  ): Promise<string> {\n    let inlineMenuVisibility: InlineMenuVisibilitySetting = AutofillOverlayVisibility.Off;\n\n    if (activeAccount) {\n      inlineMenuVisibility = await this.getInlineMenuVisibility();\n    }\n\n    const inlineMenuPositioningImprovements = await this.configService.getFeatureFlag(\n      FeatureFlag.InlineMenuPositioningImprovements,\n    );\n    if (!inlineMenuPositioningImprovements) {\n      return !inlineMenuVisibility\n        ? \"bootstrap-autofill.js\"\n        : \"bootstrap-legacy-autofill-overlay.js\";\n    }\n\n    const enableChangedPasswordPrompt = await firstValueFrom(\n      this.userNotificationSettingsService.enableChangedPasswordPrompt$,\n    );\n    const enableAddedLoginPrompt = await firstValueFrom(\n      this.userNotificationSettingsService.enableAddedLoginPrompt$,\n    );\n    const isNotificationBarEnabled =\n      addLoginImprovementsFlagActive && (enableChangedPasswordPrompt || enableAddedLoginPrompt);\n\n    if (!inlineMenuVisibility && !isNotificationBarEnabled) {\n      return \"bootstrap-autofill.js\";\n    }\n\n    if (!inlineMenuVisibility && isNotificationBarEnabled) {\n      return \"bootstrap-autofill-overlay-notifications.js\";\n    }\n\n    if (inlineMenuVisibility && !isNotificationBarEnabled) {\n      return \"bootstrap-autofill-overlay-menu.js\";\n    }\n\n    return \"bootstrap-autofill-overlay.js\";\n  }\n\n  /**\n   * Gets all forms with password fields and formats the data\n   * for both forms and password input elements.\n   * @param {AutofillPageDetails} pageDetails\n   * @returns {FormData[]}\n   */\n  getFormsWithPasswordFields(pageDetails: AutofillPageDetails): FormData[] {\n    const formData: FormData[] = [];\n\n    const passwordFields = AutofillService.loadPasswordFields(pageDetails, true, true, false, true);\n\n    // TODO: this logic prevents multi-step account creation forms (that just start with email)\n    // from being passed on to the notification bar content script - even if autofill-init.js found the form and email field.\n    // ex: https://signup.live.com/\n    if (passwordFields.length === 0) {\n      return formData;\n    }\n\n    // Back up check for cases where there are several password fields detected,\n    // but they are not all part of the form b/c of bad HTML\n\n    // gather password fields that don't have an enclosing form\n    const passwordFieldsWithoutForm = passwordFields.filter((pf) => pf.form === undefined);\n    const formKeys = Object.keys(pageDetails.forms);\n    const formCount = formKeys.length;\n\n    // if we have 3 password fields and only 1 form, and there are password fields that are not within a form\n    // but there is at least one password field within the form, then most likely this is a poorly built password change form\n    if (passwordFields.length === 3 && formCount == 1 && passwordFieldsWithoutForm.length > 0) {\n      // Only one form so get the singular form key\n      const soloFormKey = formKeys[0];\n\n      const atLeastOnePasswordFieldWithinSoloForm =\n        passwordFields.filter((pf) => pf.form !== null && pf.form === soloFormKey).length > 0;\n\n      if (atLeastOnePasswordFieldWithinSoloForm) {\n        // We have a form with at least one password field,\n        // so let's make an assumption that the password fields without a form are actually part of this form\n        passwordFieldsWithoutForm.forEach((pf) => {\n          pf.form = soloFormKey;\n        });\n      }\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      const formPasswordFields = passwordFields.filter((pf) => formKey === pf.form);\n      if (formPasswordFields.length > 0) {\n        let uf = this.findUsernameField(pageDetails, formPasswordFields[0], false, false, false);\n        if (uf == null) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          uf = this.findUsernameField(pageDetails, formPasswordFields[0], true, true, false);\n        }\n        formData.push({\n          form: pageDetails.forms[formKey],\n          password: formPasswordFields[0],\n          username: uf,\n          passwords: formPasswordFields,\n        });\n      }\n    }\n\n    return formData;\n  }\n\n  /**\n   * Gets the overlay's visibility setting from the autofill settings service.\n   */\n  async getInlineMenuVisibility(): Promise<InlineMenuVisibilitySetting> {\n    return await firstValueFrom(this.autofillSettingsService.inlineMenuVisibility$);\n  }\n\n  /**\n   * Gets the setting for automatically copying TOTP upon autofill from the autofill settings service.\n   */\n  async getShouldAutoCopyTotp(): Promise<boolean> {\n    return await firstValueFrom(this.autofillSettingsService.autoCopyTotp$);\n  }\n\n  /**\n   * Gets the autofill on page load setting from the autofill settings service.\n   */\n  async getAutofillOnPageLoad(): Promise<boolean> {\n    return await firstValueFrom(this.autofillSettingsService.autofillOnPageLoad$);\n  }\n\n  /**\n   * Gets the default URI match strategy setting from the domain settings service.\n   */\n  async getDefaultUriMatchStrategy(): Promise<UriMatchStrategySetting> {\n    return await firstValueFrom(this.domainSettingsService.defaultUriMatchStrategy$);\n  }\n\n  /**\n   * Autofill a given tab with a given login item\n   * @param {AutoFillOptions} options Instructions about the autofill operation, including tab and login item\n   * @returns {Promise<string | null>} The TOTP code of the successfully autofilled login, if any\n   */\n  async doAutoFill(options: AutoFillOptions): Promise<string | null> {\n    const tab = options.tab;\n    if (!tab || !options.cipher || !options.pageDetails || !options.pageDetails.length) {\n      throw new Error(\"Nothing to autofill.\");\n    }\n\n    let totp: string | null = null;\n\n    const canAccessPremium = await firstValueFrom(\n      this.billingAccountProfileStateService.hasPremiumFromAnySource$,\n    );\n    const defaultUriMatch = await this.getDefaultUriMatchStrategy();\n\n    if (!canAccessPremium) {\n      options.cipher.login.totp = null;\n    }\n\n    let didAutofill = false;\n    await Promise.all(\n      options.pageDetails.map(async (pd) => {\n        // make sure we're still on correct tab\n        if (pd.tab.id !== tab.id || pd.tab.url !== tab.url) {\n          return;\n        }\n\n        const fillScript = await this.generateFillScript(pd.details, {\n          skipUsernameOnlyFill: options.skipUsernameOnlyFill || false,\n          onlyEmptyFields: options.onlyEmptyFields || false,\n          onlyVisibleFields: options.onlyVisibleFields || false,\n          fillNewPassword: options.fillNewPassword || false,\n          allowTotpAutofill: options.allowTotpAutofill || false,\n          autoSubmitLogin: options.autoSubmitLogin || false,\n          cipher: options.cipher,\n          tabUrl: tab.url,\n          defaultUriMatch: defaultUriMatch,\n        });\n\n        if (!fillScript || !fillScript.script || !fillScript.script.length) {\n          return;\n        }\n\n        if (\n          fillScript.untrustedIframe &&\n          options.allowUntrustedIframe != undefined &&\n          !options.allowUntrustedIframe\n        ) {\n          this.logService.info(\"Autofill on page load was blocked due to an untrusted iframe.\");\n          return;\n        }\n\n        // Add a small delay between operations\n        fillScript.properties.delay_between_operations = 20;\n\n        didAutofill = true;\n        if (!options.skipLastUsed) {\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.cipherService.updateLastUsedDate(options.cipher.id);\n        }\n\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        BrowserApi.tabSendMessage(\n          tab,\n          {\n            command: options.autoSubmitLogin ? \"triggerAutoSubmitLogin\" : \"fillForm\",\n            fillScript: fillScript,\n            url: tab.url,\n            pageDetailsUrl: pd.details.url,\n          },\n          { frameId: pd.frameId },\n        );\n\n        // Skip getting the TOTP code for clipboard in these cases\n        if (\n          options.cipher.type !== CipherType.Login ||\n          totp !== null ||\n          !options.cipher.login.totp ||\n          (!canAccessPremium && !options.cipher.organizationUseTotp)\n        ) {\n          return;\n        }\n\n        const shouldAutoCopyTotp = await this.getShouldAutoCopyTotp();\n\n        totp = shouldAutoCopyTotp\n          ? await this.totpService.getCode(options.cipher.login.totp)\n          : null;\n      }),\n    );\n\n    if (didAutofill) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.eventCollectionService.collect(EventType.Cipher_ClientAutofilled, options.cipher.id);\n      if (totp !== null) {\n        return totp;\n      } else {\n        return null;\n      }\n    } else {\n      throw new Error(\"Did not autofill.\");\n    }\n  }\n\n  /**\n   * Autofill the specified tab with the next login item from the cache\n   * @param {PageDetail[]} pageDetails The data scraped from the page\n   * @param {chrome.tabs.Tab} tab The tab to be autofilled\n   * @param {boolean} fromCommand Whether the autofill is triggered by a keyboard shortcut (`true`) or autofill on page load (`false`)\n   * @param {boolean} autoSubmitLogin Whether the autofill is for an auto-submit login\n   * @returns {Promise<string | null>} The TOTP code of the successfully autofilled login, if any\n   */\n  async doAutoFillOnTab(\n    pageDetails: PageDetail[],\n    tab: chrome.tabs.Tab,\n    fromCommand: boolean,\n    autoSubmitLogin = false,\n  ): Promise<string | null> {\n    let cipher: CipherView;\n    if (fromCommand) {\n      cipher = await this.cipherService.getNextCipherForUrl(tab.url);\n    } else {\n      const lastLaunchedCipher = await this.cipherService.getLastLaunchedForUrl(tab.url, true);\n      if (\n        lastLaunchedCipher &&\n        Date.now().valueOf() - lastLaunchedCipher.localData?.lastLaunched?.valueOf() < 30000\n      ) {\n        cipher = lastLaunchedCipher;\n      } else {\n        cipher = await this.cipherService.getLastUsedForUrl(tab.url, true);\n      }\n    }\n\n    if (cipher == null || (cipher.reprompt === CipherRepromptType.Password && !fromCommand)) {\n      return null;\n    }\n\n    if (await this.isPasswordRepromptRequired(cipher, tab)) {\n      if (fromCommand) {\n        this.cipherService.updateLastUsedIndexForUrl(tab.url);\n      }\n\n      return null;\n    }\n\n    const totpCode = await this.doAutoFill({\n      tab: tab,\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: fromCommand,\n      allowUntrustedIframe: fromCommand,\n      allowTotpAutofill: fromCommand,\n      autoSubmitLogin,\n    });\n\n    // Update last used index as autofill has succeeded\n    if (fromCommand) {\n      this.cipherService.updateLastUsedIndexForUrl(tab.url);\n    }\n\n    return totpCode;\n  }\n\n  /**\n   * Checks if the cipher requires password reprompt and opens the password reprompt popout if necessary.\n   *\n   * @param cipher - The cipher to autofill\n   * @param tab - The tab to autofill\n   */\n  async isPasswordRepromptRequired(cipher: CipherView, tab: chrome.tabs.Tab): Promise<boolean> {\n    const userHasMasterPasswordAndKeyHash =\n      await this.userVerificationService.hasMasterPasswordAndMasterKeyHash();\n    if (cipher.reprompt === CipherRepromptType.Password && userHasMasterPasswordAndKeyHash) {\n      if (!this.isDebouncingPasswordRepromptPopout()) {\n        await this.openVaultItemPasswordRepromptPopout(tab, {\n          cipherId: cipher.id,\n          action: \"autofill\",\n        });\n      }\n\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Autofill the active tab with the next cipher from the cache\n   * @param {PageDetail[]} pageDetails The data scraped from the page\n   * @param {boolean} fromCommand Whether the autofill is triggered by a keyboard shortcut (`true`) or autofill on page load (`false`)\n   * @returns {Promise<string | null>} The TOTP code of the successfully autofilled login, if any\n   */\n  async doAutoFillActiveTab(\n    pageDetails: PageDetail[],\n    fromCommand: boolean,\n    cipherType?: CipherType,\n  ): Promise<string | null> {\n    if (!pageDetails[0]?.details?.fields?.length) {\n      return null;\n    }\n\n    const tab = await this.getActiveTab();\n\n    if (!tab || !tab.url) {\n      return null;\n    }\n\n    if (!cipherType || cipherType === CipherType.Login) {\n      return await this.doAutoFillOnTab(pageDetails, tab, fromCommand);\n    }\n\n    let cipher: CipherView;\n    let cacheKey = \"\";\n\n    if (cipherType === CipherType.Card) {\n      cacheKey = \"cardCiphers\";\n      cipher = await this.cipherService.getNextCardCipher();\n    } else {\n      cacheKey = \"identityCiphers\";\n      cipher = await this.cipherService.getNextIdentityCipher();\n    }\n\n    if (!cipher || !cacheKey || (cipher.reprompt === CipherRepromptType.Password && !fromCommand)) {\n      return null;\n    }\n\n    if (await this.isPasswordRepromptRequired(cipher, tab)) {\n      if (fromCommand) {\n        this.cipherService.updateLastUsedIndexForUrl(cacheKey);\n      }\n\n      return null;\n    }\n\n    const totpCode = await this.doAutoFill({\n      tab: tab,\n      cipher: cipher,\n      pageDetails: pageDetails,\n      skipLastUsed: !fromCommand,\n      skipUsernameOnlyFill: !fromCommand,\n      onlyEmptyFields: !fromCommand,\n      onlyVisibleFields: !fromCommand,\n      fillNewPassword: false,\n      allowUntrustedIframe: fromCommand,\n      allowTotpAutofill: false,\n    });\n\n    if (fromCommand) {\n      this.cipherService.updateLastUsedIndexForUrl(cacheKey);\n    }\n\n    return totpCode;\n  }\n\n  /**\n   * Activates the autofill on page load org policy.\n   */\n  async setAutoFillOnPageLoadOrgPolicy(): Promise<void> {\n    const autofillOnPageLoadOrgPolicy = await firstValueFrom(\n      this.autofillSettingsService.activateAutofillOnPageLoadFromPolicy$,\n    );\n\n    if (autofillOnPageLoadOrgPolicy) {\n      await this.autofillSettingsService.setAutofillOnPageLoad(true);\n    }\n  }\n\n  /**\n   * Gets the active tab from the current window.\n   * Throws an error if no tab is found.\n   * @returns {Promise<chrome.tabs.Tab>}\n   * @private\n   */\n  private async getActiveTab(): Promise<chrome.tabs.Tab> {\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (!tab) {\n      throw new Error(\"No tab found.\");\n    }\n\n    return tab;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and cipher.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {GenerateFillScriptOptions} options\n   * @returns {Promise<AutofillScript | null>}\n   * @private\n   */\n  private async generateFillScript(\n    pageDetails: AutofillPageDetails,\n    options: GenerateFillScriptOptions,\n  ): Promise<AutofillScript | null> {\n    if (!pageDetails || !options.cipher) {\n      return null;\n    }\n\n    let fillScript = new AutofillScript();\n    const filledFields: { [id: string]: AutofillField } = {};\n    const fields = options.cipher.fields;\n\n    if (fields && fields.length) {\n      const fieldNames: string[] = [];\n\n      fields.forEach((f) => {\n        if (AutofillService.hasValue(f.name)) {\n          fieldNames.push(f.name.toLowerCase());\n        }\n      });\n\n      pageDetails.fields.forEach((field) => {\n        // eslint-disable-next-line\n        if (filledFields.hasOwnProperty(field.opid)) {\n          return;\n        }\n\n        if (!field.viewable && field.tagName !== \"span\") {\n          return;\n        }\n\n        // Check if the input is an untyped/mistyped search input\n        if (AutofillService.isSearchField(field)) {\n          return;\n        }\n\n        const matchingIndex = this.findMatchingFieldIndex(field, fieldNames);\n        if (matchingIndex > -1) {\n          const matchingField: FieldView = fields[matchingIndex];\n          let val: string;\n          if (matchingField.type === FieldType.Linked) {\n            // Assumption: Linked Field is not being used to autofill a boolean value\n            val = options.cipher.linkedFieldValue(matchingField.linkedId) as string;\n          } else {\n            val = matchingField.value;\n            if (val == null && matchingField.type === FieldType.Boolean) {\n              val = \"false\";\n            }\n          }\n\n          filledFields[field.opid] = field;\n          AutofillService.fillByOpid(fillScript, field, val);\n        }\n      });\n    }\n\n    switch (options.cipher.type) {\n      case CipherType.Login:\n        fillScript = await this.generateLoginFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options,\n        );\n        break;\n      case CipherType.Card:\n        fillScript = await this.generateCardFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options,\n        );\n        break;\n      case CipherType.Identity:\n        fillScript = await this.generateIdentityFillScript(\n          fillScript,\n          pageDetails,\n          filledFields,\n          options,\n        );\n        break;\n      default:\n        return null;\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and login cipher item.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillPageDetails} pageDetails\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {GenerateFillScriptOptions} options\n   * @returns {Promise<AutofillScript | null>}\n   * @private\n   */\n  private async generateLoginFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions,\n  ): Promise<AutofillScript | null> {\n    if (!options.cipher.login) {\n      return null;\n    }\n\n    const passwords: AutofillField[] = [];\n    const usernames: AutofillField[] = [];\n    const totps: AutofillField[] = [];\n    let pf: AutofillField = null;\n    let username: AutofillField = null;\n    let totp: AutofillField = null;\n    const login = options.cipher.login;\n    fillScript.savedUrls =\n      login?.uris?.filter((u) => u.match != UriMatchStrategy.Never).map((u) => u.uri) ?? [];\n\n    fillScript.untrustedIframe = await this.inUntrustedIframe(pageDetails.url, options);\n\n    let passwordFields = AutofillService.loadPasswordFields(\n      pageDetails,\n      false,\n      false,\n      options.onlyEmptyFields,\n      options.fillNewPassword,\n    );\n    if (!passwordFields.length && !options.onlyVisibleFields) {\n      // not able to find any viewable password fields. maybe there are some \"hidden\" ones?\n      passwordFields = AutofillService.loadPasswordFields(\n        pageDetails,\n        true,\n        true,\n        options.onlyEmptyFields,\n        options.fillNewPassword,\n      );\n    }\n\n    for (const formKey in pageDetails.forms) {\n      // eslint-disable-next-line\n      if (!pageDetails.forms.hasOwnProperty(formKey)) {\n        continue;\n      }\n\n      passwordFields.forEach((passField) => {\n        pf = passField;\n        passwords.push(pf);\n\n        if (login.username) {\n          username = this.findUsernameField(pageDetails, pf, false, false, false);\n\n          if (!username && !options.onlyVisibleFields) {\n            // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n            username = this.findUsernameField(pageDetails, pf, true, true, false);\n          }\n\n          if (username) {\n            usernames.push(username);\n          }\n        }\n\n        if (options.allowTotpAutofill && login.totp) {\n          totp = this.findTotpField(pageDetails, pf, false, false, false);\n\n          if (!totp && !options.onlyVisibleFields) {\n            // not able to find any viewable totp fields. maybe there are some \"hidden\" ones?\n            totp = this.findTotpField(pageDetails, pf, true, true, false);\n          }\n\n          if (totp) {\n            totps.push(totp);\n          }\n        }\n      });\n    }\n\n    if (passwordFields.length && !passwords.length) {\n      // The page does not have any forms with password fields. Use the first password field on the page and the\n      // input field just before it as the username.\n\n      pf = passwordFields[0];\n      passwords.push(pf);\n\n      if (login.username && pf.elementNumber > 0) {\n        username = this.findUsernameField(pageDetails, pf, false, false, true);\n\n        if (!username && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          username = this.findUsernameField(pageDetails, pf, true, true, true);\n        }\n\n        if (username) {\n          usernames.push(username);\n        }\n      }\n\n      if (options.allowTotpAutofill && login.totp && pf.elementNumber > 0) {\n        totp = this.findTotpField(pageDetails, pf, false, false, true);\n\n        if (!totp && !options.onlyVisibleFields) {\n          // not able to find any viewable username fields. maybe there are some \"hidden\" ones?\n          totp = this.findTotpField(pageDetails, pf, true, true, true);\n        }\n\n        if (totp) {\n          totps.push(totp);\n        }\n      }\n    }\n\n    if (!passwordFields.length) {\n      // No password fields on this page. Let's try to just fuzzy fill the username.\n      pageDetails.fields.forEach((f) => {\n        if (\n          !options.skipUsernameOnlyFill &&\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\") &&\n          AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.UsernameFieldNames)\n        ) {\n          usernames.push(f);\n        }\n\n        if (\n          options.allowTotpAutofill &&\n          f.viewable &&\n          (f.type === \"text\" || f.type === \"number\") &&\n          (AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.TotpFieldNames) ||\n            f.autoCompleteType === \"one-time-code\")\n        ) {\n          totps.push(f);\n        }\n      });\n    }\n\n    const formElementsSet = new Set<string>();\n    usernames.forEach((u) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(u.opid)) {\n        return;\n      }\n\n      filledFields[u.opid] = u;\n      AutofillService.fillByOpid(fillScript, u, login.username);\n      formElementsSet.add(u.form);\n    });\n\n    passwords.forEach((p) => {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(p.opid)) {\n        return;\n      }\n\n      filledFields[p.opid] = p;\n      AutofillService.fillByOpid(fillScript, p, login.password);\n      formElementsSet.add(p.form);\n    });\n\n    if (options.autoSubmitLogin && formElementsSet.size) {\n      fillScript.autosubmit = Array.from(formElementsSet);\n    }\n\n    if (options.allowTotpAutofill) {\n      await Promise.all(\n        totps.map(async (t) => {\n          if (Object.prototype.hasOwnProperty.call(filledFields, t.opid)) {\n            return;\n          }\n\n          filledFields[t.opid] = t;\n          const totpValue = await this.totpService.getCode(login.totp);\n          AutofillService.fillByOpid(fillScript, t, totpValue);\n        }),\n      );\n    }\n\n    fillScript = AutofillService.setFillScriptForFocus(filledFields, fillScript);\n    return fillScript;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and credit card cipher item.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillPageDetails} pageDetails\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {GenerateFillScriptOptions} options\n   * @returns {AutofillScript|null}\n   * @private\n   */\n  private async generateCardFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions,\n  ): Promise<AutofillScript | null> {\n    if (!options.cipher.card) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f) => {\n      if (AutofillService.isExcludedFieldType(f, AutoFillConstants.ExcludedAutofillTypes)) {\n        return;\n      }\n\n      for (let i = 0; i < CreditCardAutoFillConstants.CardAttributes.length; i++) {\n        const attr = CreditCardAutoFillConstants.CardAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.cardholderName &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardHolderFieldNames,\n            CreditCardAutoFillConstants.CardHolderFieldNameValues,\n          )\n        ) {\n          fillFields.cardholderName = f;\n          break;\n        } else if (\n          !fillFields.number &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardNumberFieldNames,\n            CreditCardAutoFillConstants.CardNumberFieldNameValues,\n          )\n        ) {\n          fillFields.number = f;\n          break;\n        } else if (\n          !fillFields.exp &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            CreditCardAutoFillConstants.CardExpiryFieldNames,\n            CreditCardAutoFillConstants.CardExpiryFieldNameValues,\n          )\n        ) {\n          fillFields.exp = f;\n          break;\n        } else if (\n          !fillFields.expMonth &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryMonthFieldNames)\n        ) {\n          fillFields.expMonth = f;\n          break;\n        } else if (\n          !fillFields.expYear &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.ExpiryYearFieldNames)\n        ) {\n          fillFields.expYear = f;\n          break;\n        } else if (\n          !fillFields.code &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.CVVFieldNames)\n        ) {\n          fillFields.code = f;\n          break;\n        } else if (\n          !fillFields.brand &&\n          AutofillService.isFieldMatch(f[attr], CreditCardAutoFillConstants.CardBrandFieldNames)\n        ) {\n          fillFields.brand = f;\n          break;\n        }\n      }\n    });\n\n    const card = options.cipher.card;\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"cardholderName\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"number\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"code\");\n    this.makeScriptAction(fillScript, card, fillFields, filledFields, \"brand\");\n\n    // There is an expiration month field and the cipher has an expiration month value\n    if (fillFields.expMonth && AutofillService.hasValue(card.expMonth)) {\n      let expMonth: string = card.expMonth;\n\n      if (fillFields.expMonth.selectInfo && fillFields.expMonth.selectInfo.options) {\n        let index: number = null;\n        const siOptions = fillFields.expMonth.selectInfo.options;\n        if (siOptions.length === 12) {\n          index = parseInt(card.expMonth, null) - 1;\n        } else if (siOptions.length === 13) {\n          if (\n            siOptions[0][0] != null &&\n            siOptions[0][0] !== \"\" &&\n            (siOptions[12][0] == null || siOptions[12][0] === \"\")\n          ) {\n            index = parseInt(card.expMonth, null) - 1;\n          } else {\n            index = parseInt(card.expMonth, null);\n          }\n        }\n\n        if (index != null) {\n          const option = siOptions[index];\n          if (option.length > 1) {\n            expMonth = option[1];\n          }\n        }\n      } else if (\n        (this.fieldAttrsContain(fillFields.expMonth, \"mm\") ||\n          fillFields.expMonth.maxLength === 2) &&\n        expMonth.length === 1\n      ) {\n        expMonth = \"0\" + expMonth;\n      }\n\n      filledFields[fillFields.expMonth.opid] = fillFields.expMonth;\n      AutofillService.fillByOpid(fillScript, fillFields.expMonth, expMonth);\n    }\n\n    // There is an expiration year field and the cipher has an expiration year value\n    if (fillFields.expYear && AutofillService.hasValue(card.expYear)) {\n      let expYear: string = card.expYear;\n      if (fillFields.expYear.selectInfo && fillFields.expYear.selectInfo.options) {\n        for (let i = 0; i < fillFields.expYear.selectInfo.options.length; i++) {\n          const o: [string, string] = fillFields.expYear.selectInfo.options[i];\n          if (o[0] === card.expYear || o[1] === card.expYear) {\n            expYear = o[1];\n            break;\n          }\n          if (\n            o[1].length === 2 &&\n            card.expYear.length === 4 &&\n            o[1] === card.expYear.substring(2)\n          ) {\n            expYear = o[1];\n            break;\n          }\n          const colonIndex = o[1].indexOf(\":\");\n          if (colonIndex > -1 && o[1].length > colonIndex + 1) {\n            const val = o[1].substring(colonIndex + 2);\n            if (val != null && val.trim() !== \"\" && val === card.expYear) {\n              expYear = o[1];\n              break;\n            }\n          }\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yyyy\") ||\n        fillFields.expYear.maxLength === 4\n      ) {\n        if (expYear.length === 2) {\n          expYear = normalizeExpiryYearFormat(expYear);\n        }\n      } else if (\n        this.fieldAttrsContain(fillFields.expYear, \"yy\") ||\n        fillFields.expYear.maxLength === 2\n      ) {\n        if (expYear.length === 4) {\n          expYear = expYear.substr(2);\n        }\n      }\n\n      filledFields[fillFields.expYear.opid] = fillFields.expYear;\n      AutofillService.fillByOpid(fillScript, fillFields.expYear, expYear);\n    }\n\n    // There is a single expiry date field (combined values) and the cipher has both expiration month and year\n    if (\n      fillFields.exp &&\n      AutofillService.hasValue(card.expMonth) &&\n      AutofillService.hasValue(card.expYear)\n    ) {\n      let combinedExpiryFillValue = null;\n\n      const enableNewCardCombinedExpiryAutofill = await this.configService.getFeatureFlag(\n        FeatureFlag.EnableNewCardCombinedExpiryAutofill,\n      );\n\n      if (enableNewCardCombinedExpiryAutofill) {\n        combinedExpiryFillValue = this.generateCombinedExpiryValue(card, fillFields.exp);\n      } else {\n        const fullMonth = (\"0\" + card.expMonth).slice(-2);\n\n        let fullYear: string = card.expYear;\n        let partYear: string = null;\n        if (fullYear.length === 2) {\n          partYear = fullYear;\n          fullYear = normalizeExpiryYearFormat(fullYear);\n        } else if (fullYear.length === 4) {\n          partYear = fullYear.substr(2, 2);\n        }\n\n        for (let i = 0; i < CreditCardAutoFillConstants.MonthAbbr.length; i++) {\n          if (\n            // mm/yyyy\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.MonthAbbr[i] +\n                \"/\" +\n                CreditCardAutoFillConstants.YearAbbrLong[i],\n            )\n          ) {\n            combinedExpiryFillValue = fullMonth + \"/\" + fullYear;\n          } else if (\n            // mm/yy\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.MonthAbbr[i] +\n                \"/\" +\n                CreditCardAutoFillConstants.YearAbbrShort[i],\n            ) &&\n            partYear != null\n          ) {\n            combinedExpiryFillValue = fullMonth + \"/\" + partYear;\n          } else if (\n            // yyyy/mm\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.YearAbbrLong[i] +\n                \"/\" +\n                CreditCardAutoFillConstants.MonthAbbr[i],\n            )\n          ) {\n            combinedExpiryFillValue = fullYear + \"/\" + fullMonth;\n          } else if (\n            // yy/mm\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.YearAbbrShort[i] +\n                \"/\" +\n                CreditCardAutoFillConstants.MonthAbbr[i],\n            ) &&\n            partYear != null\n          ) {\n            combinedExpiryFillValue = partYear + \"/\" + fullMonth;\n          } else if (\n            // mm-yyyy\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.MonthAbbr[i] +\n                \"-\" +\n                CreditCardAutoFillConstants.YearAbbrLong[i],\n            )\n          ) {\n            combinedExpiryFillValue = fullMonth + \"-\" + fullYear;\n          } else if (\n            // mm-yy\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.MonthAbbr[i] +\n                \"-\" +\n                CreditCardAutoFillConstants.YearAbbrShort[i],\n            ) &&\n            partYear != null\n          ) {\n            combinedExpiryFillValue = fullMonth + \"-\" + partYear;\n          } else if (\n            // yyyy-mm\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.YearAbbrLong[i] +\n                \"-\" +\n                CreditCardAutoFillConstants.MonthAbbr[i],\n            )\n          ) {\n            combinedExpiryFillValue = fullYear + \"-\" + fullMonth;\n          } else if (\n            // yy-mm\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.YearAbbrShort[i] +\n                \"-\" +\n                CreditCardAutoFillConstants.MonthAbbr[i],\n            ) &&\n            partYear != null\n          ) {\n            combinedExpiryFillValue = partYear + \"-\" + fullMonth;\n          } else if (\n            // yyyymm\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.YearAbbrLong[i] +\n                CreditCardAutoFillConstants.MonthAbbr[i],\n            )\n          ) {\n            combinedExpiryFillValue = fullYear + fullMonth;\n          } else if (\n            // yymm\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.YearAbbrShort[i] +\n                CreditCardAutoFillConstants.MonthAbbr[i],\n            ) &&\n            partYear != null\n          ) {\n            combinedExpiryFillValue = partYear + fullMonth;\n          } else if (\n            // mmyyyy\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.MonthAbbr[i] +\n                CreditCardAutoFillConstants.YearAbbrLong[i],\n            )\n          ) {\n            combinedExpiryFillValue = fullMonth + fullYear;\n          } else if (\n            // mmyy\n            this.fieldAttrsContain(\n              fillFields.exp,\n              CreditCardAutoFillConstants.MonthAbbr[i] +\n                CreditCardAutoFillConstants.YearAbbrShort[i],\n            ) &&\n            partYear != null\n          ) {\n            combinedExpiryFillValue = fullMonth + partYear;\n          }\n\n          if (combinedExpiryFillValue != null) {\n            break;\n          }\n        }\n\n        // If none of the previous cases applied, set as default\n        if (combinedExpiryFillValue == null) {\n          combinedExpiryFillValue = fullYear + \"-\" + fullMonth;\n        }\n      }\n\n      this.makeScriptActionWithValue(\n        fillScript,\n        combinedExpiryFillValue,\n        fillFields.exp,\n        filledFields,\n      );\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Determines whether an iframe is potentially dangerous (\"untrusted\") to autofill\n   * @param {string} pageUrl The url of the page/iframe, usually from AutofillPageDetails\n   * @param {GenerateFillScriptOptions} options The GenerateFillScript options\n   * @returns {boolean} `true` if the iframe is untrusted and a warning should be shown, `false` otherwise\n   * @private\n   */\n  private async inUntrustedIframe(\n    pageUrl: string,\n    options: GenerateFillScriptOptions,\n  ): Promise<boolean> {\n    // If the pageUrl (from the content script) matches the tabUrl (from the sender tab), we are not in an iframe\n    // This also avoids a false positive if no URI is saved and the user triggers autofill anyway\n    if (pageUrl === options.tabUrl) {\n      return false;\n    }\n\n    // Check the pageUrl against cipher URIs using the configured match detection.\n    // Remember: if we are in this function, the tabUrl already matches a saved URI for the login.\n    // We need to verify the pageUrl also matches.\n    const equivalentDomains = await firstValueFrom(\n      this.domainSettingsService.getUrlEquivalentDomains(pageUrl),\n    );\n    const matchesUri = options.cipher.login.matchesUri(\n      pageUrl,\n      equivalentDomains,\n      options.defaultUriMatch,\n    );\n    return !matchesUri;\n  }\n\n  /**\n   * Used when handling autofill on credit card fields. Determines whether\n   * the field has an attribute that matches the given value.\n   * @param {AutofillField} field\n   * @param {string} containsValue\n   * @returns {boolean}\n   * @private\n   */\n  private fieldAttrsContain(field: AutofillField, containsValue: string): boolean {\n    if (!field) {\n      return false;\n    }\n\n    let doesContainValue = false;\n    CreditCardAutoFillConstants.CardAttributesExtended.forEach((attributeName) => {\n      // eslint-disable-next-line no-prototype-builtins\n      if (doesContainValue || !field[attributeName]) {\n        return;\n      }\n\n      let fieldValue = field[attributeName];\n      fieldValue = fieldValue.replace(/ /g, \"\").toLowerCase();\n      doesContainValue = fieldValue.indexOf(containsValue) > -1;\n    });\n\n    return doesContainValue;\n  }\n\n  /**\n   * Returns a string value representation of the combined card expiration month and year values\n   * in a format matching discovered guidance within the field attributes (typically provided for users).\n   *\n   * @param {CardView} cardCipher\n   * @param {AutofillField} field\n   */\n  private generateCombinedExpiryValue(cardCipher: CardView, field: AutofillField): string {\n    /*\n      Some expectations of the passed stored card cipher view:\n\n      - At the time of writing, the stored card expiry year value (`expYear`)\n        can be any arbitrary string (no format validation). We may attempt some format\n        normalization here, but expect the user to have entered a string of integers\n        with a length of 2 or 4\n\n      - the `expiration` property cannot be used for autofill as it is an opinionated\n        format\n\n      - `expMonth` a stringified integer stored with no zero-padding and is not\n        zero-indexed (e.g. January is \"1\", not \"01\" or 0)\n    */\n\n    // Expiry format options\n    let useMonthPadding = true;\n    let useYearFull = false;\n    let delimiter = \"/\";\n    let orderByYear = false;\n\n    // Because users are allowed to store truncated years, we need to make assumptions\n    // about the full year format when called for\n    const currentCentury = `${new Date().getFullYear()}`.slice(0, 2);\n\n    // Note, we construct the output rather than doing string replacement against the\n    // format guidance pattern to avoid edge cases that would output invalid values\n    const [\n      // The guidance parsed from the field properties regarding expiry format\n      expectedExpiryDateFormat,\n      // The (localized) date pattern set that was used to parse the expiry format guidance\n      expiryDateFormatPatterns,\n    ] = this.getExpectedExpiryDateFormat(field);\n\n    if (expectedExpiryDateFormat) {\n      const { Month, MonthShort, Year } = expiryDateFormatPatterns;\n\n      const expiryDateDelimitersPattern =\n        \"\\\\\" + CreditCardAutoFillConstants.CardExpiryDateDelimiters.join(\"\\\\\");\n\n      // assign the delimiter from the expected format string\n      delimiter =\n        expectedExpiryDateFormat.match(new RegExp(`[${expiryDateDelimitersPattern}]`, \"g\"))?.[0] ||\n        \"\";\n\n      // check if the expected format starts with a month form\n      // order matters here; check long form first, since short form will match against long\n      if (expectedExpiryDateFormat.indexOf(Month + delimiter) === 0) {\n        useMonthPadding = true;\n        orderByYear = false;\n      } else if (expectedExpiryDateFormat.indexOf(MonthShort + delimiter) === 0) {\n        useMonthPadding = false;\n        orderByYear = false;\n      } else {\n        orderByYear = true;\n\n        // short form can match against long form, but long won't match against short\n        const containsLongMonthPattern = new RegExp(`${Month}`, \"i\");\n        useMonthPadding = containsLongMonthPattern.test(expectedExpiryDateFormat);\n      }\n\n      const containsLongYearPattern = new RegExp(`${Year}`, \"i\");\n\n      useYearFull = containsLongYearPattern.test(expectedExpiryDateFormat);\n    }\n\n    const month = useMonthPadding\n      ? // Ensure zero-padding\n        (\"0\" + cardCipher.expMonth).slice(-2)\n      : // Handle zero-padded stored month values, even though they are not _expected_ to be as such\n        cardCipher.expMonth.replaceAll(\"0\", \"\");\n    // Note: assumes the user entered an `expYear` value with a length of either 2 or 4\n    const year = (currentCentury + cardCipher.expYear).slice(useYearFull ? -4 : -2);\n\n    const combinedExpiryFillValue = (orderByYear ? [year, month] : [month, year]).join(delimiter);\n\n    return combinedExpiryFillValue;\n  }\n\n  /**\n   * Returns a string value representation of discovered guidance for a combined month and year expiration value from the field attributes\n   *\n   * @param {AutofillField} field\n   */\n  private getExpectedExpiryDateFormat(\n    field: AutofillField,\n  ): [string | null, CardExpiryDateFormat | null] {\n    let expectedDateFormat = null;\n    let dateFormatPatterns = null;\n\n    const expiryDateDelimitersPattern =\n      \"\\\\\" + CreditCardAutoFillConstants.CardExpiryDateDelimiters.join(\"\\\\\");\n\n    CreditCardAutoFillConstants.CardExpiryDateFormats.find((dateFormat) => {\n      dateFormatPatterns = dateFormat;\n\n      const { Month, MonthShort, YearShort, Year } = dateFormat;\n\n      // Non-exhaustive coverage of field guidances. Some uncovered edge cases: \". \" delimiter, space-delimited delimiters (\"mm / yyyy\").\n      // We should consider if added whitespace is for improved readability of user-guidance or actually desired in the filled value.\n      // e.g. \"/((mm|m)[\\/\\-\\.\\ ]{0,1}(yyyy|yy))|((yyyy|yy)[\\/\\-\\.\\ ]{0,1}(mm|m))/gi\"\n      const dateFormatPattern = new RegExp(\n        `((${Month}|${MonthShort})[${expiryDateDelimitersPattern}]{0,1}(${Year}|${YearShort}))|((${Year}|${YearShort})[${expiryDateDelimitersPattern}]{0,1}(${Month}|${MonthShort}))`,\n        \"gi\",\n      );\n\n      return CreditCardAutoFillConstants.CardAttributesExtended.find((attributeName) => {\n        const fieldAttributeValue = field[attributeName];\n\n        const fieldAttributeMatch = fieldAttributeValue?.match(dateFormatPattern);\n        // break find as soon as a match is found\n\n        if (fieldAttributeMatch?.length) {\n          expectedDateFormat = fieldAttributeMatch[0];\n\n          // remove any irrelevant characters\n          const irrelevantExpiryCharactersPattern = new RegExp(\n            // \"or digits\" to ensure numbers are removed from guidance pattern, which aren't covered by ^\\w\n            `[^\\\\w${expiryDateDelimitersPattern}]|[\\\\d]`,\n            \"gi\",\n          );\n          expectedDateFormat.replaceAll(irrelevantExpiryCharactersPattern, \"\");\n\n          return true;\n        }\n\n        return false;\n      });\n    });\n\n    return [expectedDateFormat, dateFormatPatterns];\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and identify cipher item.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillPageDetails} pageDetails\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {GenerateFillScriptOptions} options\n   * @returns {AutofillScript}\n   * @private\n   */\n  private async generateIdentityFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions,\n  ): Promise<AutofillScript> {\n    if (await this.configService.getFeatureFlag(FeatureFlag.GenerateIdentityFillScriptRefactor)) {\n      return this._generateIdentityFillScript(fillScript, pageDetails, filledFields, options);\n    }\n\n    if (!options.cipher.identity) {\n      return null;\n    }\n\n    const fillFields: { [id: string]: AutofillField } = {};\n\n    pageDetails.fields.forEach((f) => {\n      if (\n        AutofillService.isExcludedFieldType(f, AutoFillConstants.ExcludedAutofillTypes) ||\n        [\"current-password\", \"new-password\"].includes(f.autoCompleteType)\n      ) {\n        return;\n      }\n\n      for (let i = 0; i < IdentityAutoFillConstants.IdentityAttributes.length; i++) {\n        const attr = IdentityAutoFillConstants.IdentityAttributes[i];\n        // eslint-disable-next-line\n        if (!f.hasOwnProperty(attr) || !f[attr] || !f.viewable) {\n          continue;\n        }\n\n        // ref https://html.spec.whatwg.org/multipage/form-control-infrastructure.html#autofill\n        // ref https://developers.google.com/web/fundamentals/design-and-ux/input/forms/\n        if (\n          !fillFields.name &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.FullNameFieldNames,\n            IdentityAutoFillConstants.FullNameFieldNameValues,\n          )\n        ) {\n          fillFields.name = f;\n          break;\n        } else if (\n          !fillFields.firstName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.FirstnameFieldNames)\n        ) {\n          fillFields.firstName = f;\n          break;\n        } else if (\n          !fillFields.middleName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.MiddlenameFieldNames)\n        ) {\n          fillFields.middleName = f;\n          break;\n        } else if (\n          !fillFields.lastName &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.LastnameFieldNames)\n        ) {\n          fillFields.lastName = f;\n          break;\n        } else if (\n          !fillFields.title &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.TitleFieldNames)\n        ) {\n          fillFields.title = f;\n          break;\n        } else if (\n          !fillFields.email &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.EmailFieldNames)\n        ) {\n          fillFields.email = f;\n          break;\n        } else if (\n          !fillFields.address &&\n          AutofillService.isFieldMatch(\n            f[attr],\n            IdentityAutoFillConstants.AddressFieldNames,\n            IdentityAutoFillConstants.AddressFieldNameValues,\n          )\n        ) {\n          fillFields.address = f;\n          break;\n        } else if (\n          !fillFields.address1 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address1FieldNames)\n        ) {\n          fillFields.address1 = f;\n          break;\n        } else if (\n          !fillFields.address2 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address2FieldNames)\n        ) {\n          fillFields.address2 = f;\n          break;\n        } else if (\n          !fillFields.address3 &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.Address3FieldNames)\n        ) {\n          fillFields.address3 = f;\n          break;\n        } else if (\n          !fillFields.postalCode &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.PostalCodeFieldNames)\n        ) {\n          fillFields.postalCode = f;\n          break;\n        } else if (\n          !fillFields.city &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CityFieldNames)\n        ) {\n          fillFields.city = f;\n          break;\n        } else if (\n          !fillFields.state &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.StateFieldNames)\n        ) {\n          fillFields.state = f;\n          break;\n        } else if (\n          !fillFields.country &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CountryFieldNames)\n        ) {\n          fillFields.country = f;\n          break;\n        } else if (\n          !fillFields.phone &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.PhoneFieldNames)\n        ) {\n          fillFields.phone = f;\n          break;\n        } else if (\n          !fillFields.username &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.UserNameFieldNames)\n        ) {\n          fillFields.username = f;\n          break;\n        } else if (\n          !fillFields.company &&\n          AutofillService.isFieldMatch(f[attr], IdentityAutoFillConstants.CompanyFieldNames)\n        ) {\n          fillFields.company = f;\n          break;\n        }\n      }\n    });\n\n    const identity = options.cipher.identity;\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"title\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"firstName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"middleName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"lastName\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address1\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address2\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"address3\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"city\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"postalCode\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"company\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"email\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"phone\");\n    this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"username\");\n\n    let filledState = false;\n    if (fillFields.state && identity.state && identity.state.length > 2) {\n      const stateLower = identity.state.toLowerCase();\n      const isoState =\n        IdentityAutoFillConstants.IsoStates[stateLower] ||\n        IdentityAutoFillConstants.IsoProvinces[stateLower];\n      if (isoState) {\n        filledState = true;\n        this.makeScriptActionWithValue(fillScript, isoState, fillFields.state, filledFields);\n      }\n    }\n\n    if (!filledState) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"state\");\n    }\n\n    let filledCountry = false;\n    if (fillFields.country && identity.country && identity.country.length > 2) {\n      const countryLower = identity.country.toLowerCase();\n      const isoCountry = IdentityAutoFillConstants.IsoCountries[countryLower];\n      if (isoCountry) {\n        filledCountry = true;\n        this.makeScriptActionWithValue(fillScript, isoCountry, fillFields.country, filledFields);\n      }\n    }\n\n    if (!filledCountry) {\n      this.makeScriptAction(fillScript, identity, fillFields, filledFields, \"country\");\n    }\n\n    if (fillFields.name && (identity.firstName || identity.lastName)) {\n      let fullName = \"\";\n      if (AutofillService.hasValue(identity.firstName)) {\n        fullName = identity.firstName;\n      }\n      if (AutofillService.hasValue(identity.middleName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.middleName;\n      }\n      if (AutofillService.hasValue(identity.lastName)) {\n        if (fullName !== \"\") {\n          fullName += \" \";\n        }\n        fullName += identity.lastName;\n      }\n\n      this.makeScriptActionWithValue(fillScript, fullName, fillFields.name, filledFields);\n    }\n\n    if (fillFields.address && AutofillService.hasValue(identity.address1)) {\n      let address = \"\";\n      if (AutofillService.hasValue(identity.address1)) {\n        address = identity.address1;\n      }\n      if (AutofillService.hasValue(identity.address2)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address2;\n      }\n      if (AutofillService.hasValue(identity.address3)) {\n        if (address !== \"\") {\n          address += \", \";\n        }\n        address += identity.address3;\n      }\n\n      this.makeScriptActionWithValue(fillScript, address, fillFields.address, filledFields);\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Generates the autofill script for the specified page details and identity cipher item.\n   *\n   * @param fillScript - Object to store autofill script, passed between method references\n   * @param pageDetails - The details of the page to autofill\n   * @param filledFields - The fields that have already been filled, passed between method references\n   * @param options - Contains data used to fill cipher items\n   */\n  private _generateIdentityFillScript(\n    fillScript: AutofillScript,\n    pageDetails: AutofillPageDetails,\n    filledFields: { [id: string]: AutofillField },\n    options: GenerateFillScriptOptions,\n  ): AutofillScript {\n    const identity = options.cipher.identity;\n    if (!identity) {\n      return null;\n    }\n\n    for (let fieldsIndex = 0; fieldsIndex < pageDetails.fields.length; fieldsIndex++) {\n      const field = pageDetails.fields[fieldsIndex];\n      if (this.excludeFieldFromIdentityFill(field)) {\n        continue;\n      }\n\n      const keywordsList = this.getIdentityAutofillFieldKeywords(field);\n      const keywordsCombined = keywordsList.join(\",\");\n      if (this.shouldMakeIdentityTitleFillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.title, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityNameFillScript(filledFields, keywordsList)) {\n        this.makeIdentityNameFillScript(fillScript, filledFields, field, identity);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityFirstNameFillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.firstName, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityMiddleNameFillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.middleName, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityLastNameFillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.lastName, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityEmailFillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.email, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityAddressFillScript(filledFields, keywordsList)) {\n        this.makeIdentityAddressFillScript(fillScript, filledFields, field, identity);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityAddress1FillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.address1, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityAddress2FillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.address2, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityAddress3FillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.address3, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityPostalCodeFillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.postalCode, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityCityFillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.city, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityStateFillScript(filledFields, keywordsCombined)) {\n        this.makeIdentityStateFillScript(fillScript, filledFields, field, identity);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityCountryFillScript(filledFields, keywordsCombined)) {\n        this.makeIdentityCountryFillScript(fillScript, filledFields, field, identity);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityPhoneFillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.phone, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityUserNameFillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.username, field, filledFields);\n        continue;\n      }\n\n      if (this.shouldMakeIdentityCompanyFillScript(filledFields, keywordsCombined)) {\n        this.makeScriptActionWithValue(fillScript, identity.company, field, filledFields);\n      }\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Identifies if the current field should be excluded from triggering autofill of the identity cipher.\n   *\n   * @param field - The field to check\n   */\n  private excludeFieldFromIdentityFill(field: AutofillField): boolean {\n    return (\n      AutofillService.isExcludedFieldType(field, AutoFillConstants.ExcludedAutofillTypes) ||\n      AutoFillConstants.ExcludedIdentityAutocompleteTypes.has(field.autoCompleteType) ||\n      !field.viewable\n    );\n  }\n\n  /**\n   * Gathers all unique keyword identifiers from a field that can be used to determine what\n   * identity value should be filled.\n   *\n   * @param field - The field to gather keywords from\n   */\n  private getIdentityAutofillFieldKeywords(field: AutofillField): string[] {\n    const keywords: Set<string> = new Set();\n    for (let index = 0; index < IdentityAutoFillConstants.IdentityAttributes.length; index++) {\n      const attribute = IdentityAutoFillConstants.IdentityAttributes[index];\n      if (field[attribute]) {\n        keywords.add(\n          field[attribute]\n            .trim()\n            .toLowerCase()\n            .replace(/[^a-zA-Z0-9]+/g, \"\"),\n        );\n      }\n    }\n\n    return Array.from(keywords);\n  }\n\n  /**\n   * Identifies if a fill script action for the identity title\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityTitleFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.title &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.TitleFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity name\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityNameFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string[],\n  ): boolean {\n    return (\n      !filledFields.name &&\n      keywords.some((keyword) =>\n        AutofillService.isFieldMatch(\n          keyword,\n          IdentityAutoFillConstants.FullNameFieldNames,\n          IdentityAutoFillConstants.FullNameFieldNameValues,\n        ),\n      )\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity first name\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityFirstNameFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.firstName &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.FirstnameFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity middle name\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityMiddleNameFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.middleName &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.MiddlenameFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity last name\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityLastNameFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.lastName &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.LastnameFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity email\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityEmailFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.email &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.EmailFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity address\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityAddressFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string[],\n  ): boolean {\n    return (\n      !filledFields.address &&\n      keywords.some((keyword) =>\n        AutofillService.isFieldMatch(\n          keyword,\n          IdentityAutoFillConstants.AddressFieldNames,\n          IdentityAutoFillConstants.AddressFieldNameValues,\n        ),\n      )\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity address1\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityAddress1FillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.address1 &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.Address1FieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity address2\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityAddress2FillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.address2 &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.Address2FieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity address3\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityAddress3FillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.address3 &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.Address3FieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity postal code\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityPostalCodeFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.postalCode &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.PostalCodeFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity city\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityCityFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.city &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.CityFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity state\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityStateFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.state &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.StateFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity country\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityCountryFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.country &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.CountryFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity phone\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityPhoneFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.phone &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.PhoneFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity username\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityUserNameFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.username &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.UserNameFieldNames)\n    );\n  }\n\n  /**\n   * Identifies if a fill script action for the identity company\n   * field should be created for the provided field.\n   *\n   * @param filledFields - The fields that have already been filled\n   * @param keywords - The keywords from the field\n   */\n  private shouldMakeIdentityCompanyFillScript(\n    filledFields: Record<string, AutofillField>,\n    keywords: string,\n  ): boolean {\n    return (\n      !filledFields.company &&\n      AutofillService.isFieldMatch(keywords, IdentityAutoFillConstants.CompanyFieldNames)\n    );\n  }\n\n  /**\n   * Creates an identity name fill script action for the provided field. This is used\n   * when filling a `full name` field, using the first, middle, and last name from the\n   * identity cipher item.\n   *\n   * @param fillScript - The autofill script to add the action to\n   * @param filledFields - The fields that have already been filled\n   * @param field - The field to fill\n   * @param identity - The identity cipher item\n   */\n  private makeIdentityNameFillScript(\n    fillScript: AutofillScript,\n    filledFields: Record<string, AutofillField>,\n    field: AutofillField,\n    identity: IdentityView,\n  ) {\n    let name = \"\";\n    if (identity.firstName) {\n      name += identity.firstName;\n    }\n\n    if (identity.middleName) {\n      name += !name ? identity.middleName : ` ${identity.middleName}`;\n    }\n\n    if (identity.lastName) {\n      name += !name ? identity.lastName : ` ${identity.lastName}`;\n    }\n\n    this.makeScriptActionWithValue(fillScript, name, field, filledFields);\n  }\n\n  /**\n   * Creates an identity address fill script action for the provided field. This is used\n   * when filling a generic `address` field, using the address1, address2, and address3\n   * from the identity cipher item.\n   *\n   * @param fillScript - The autofill script to add the action to\n   * @param filledFields - The fields that have already been filled\n   * @param field - The field to fill\n   * @param identity - The identity cipher item\n   */\n  private makeIdentityAddressFillScript(\n    fillScript: AutofillScript,\n    filledFields: Record<string, AutofillField>,\n    field: AutofillField,\n    identity: IdentityView,\n  ) {\n    if (!identity.address1) {\n      return;\n    }\n\n    let address = identity.address1;\n\n    if (identity.address2) {\n      address += `, ${identity.address2}`;\n    }\n\n    if (identity.address3) {\n      address += `, ${identity.address3}`;\n    }\n\n    this.makeScriptActionWithValue(fillScript, address, field, filledFields);\n  }\n\n  /**\n   * Creates an identity state fill script action for the provided field. This is used\n   * when filling a `state` field, using the state value from the identity cipher item.\n   * If the state value is a full name, it will be converted to an ISO code.\n   *\n   * @param fillScript - The autofill script to add the action to\n   * @param filledFields - The fields that have already been filled\n   * @param field - The field to fill\n   * @param identity - The identity cipher item\n   */\n  private makeIdentityStateFillScript(\n    fillScript: AutofillScript,\n    filledFields: Record<string, AutofillField>,\n    field: AutofillField,\n    identity: IdentityView,\n  ) {\n    if (!identity.state) {\n      return;\n    }\n\n    if (identity.state.length <= 2) {\n      this.makeScriptActionWithValue(fillScript, identity.state, field, filledFields);\n      return;\n    }\n\n    const stateLower = identity.state.toLowerCase();\n    const isoState =\n      IdentityAutoFillConstants.IsoStates[stateLower] ||\n      IdentityAutoFillConstants.IsoProvinces[stateLower];\n    if (isoState) {\n      this.makeScriptActionWithValue(fillScript, isoState, field, filledFields);\n    }\n  }\n\n  /**\n   * Creates an identity country fill script action for the provided field. This is used\n   * when filling a `country` field, using the country value from the identity cipher item.\n   * If the country value is a full name, it will be converted to an ISO code.\n   *\n   * @param fillScript - The autofill script to add the action to\n   * @param filledFields - The fields that have already been filled\n   * @param field - The field to fill\n   * @param identity - The identity cipher item\n   */\n  private makeIdentityCountryFillScript(\n    fillScript: AutofillScript,\n    filledFields: Record<string, AutofillField>,\n    field: AutofillField,\n    identity: IdentityView,\n  ) {\n    if (!identity.country) {\n      return;\n    }\n\n    if (identity.country.length <= 2) {\n      this.makeScriptActionWithValue(fillScript, identity.country, field, filledFields);\n      return;\n    }\n\n    const countryLower = identity.country.toLowerCase();\n    const isoCountry = IdentityAutoFillConstants.IsoCountries[countryLower];\n    if (isoCountry) {\n      this.makeScriptActionWithValue(fillScript, isoCountry, field, filledFields);\n    }\n  }\n\n  /**\n   * Accepts an HTMLInputElement type value and a list of\n   * excluded types and returns true if the type is excluded.\n   * @param {string} type\n   * @param {string[]} excludedTypes\n   * @returns {boolean}\n   * @private\n   */\n  private static isExcludedType(type: string, excludedTypes: string[]) {\n    return excludedTypes.indexOf(type) > -1;\n  }\n\n  /**\n   * Identifies if a passed field contains text artifacts that identify it as a search field.\n   *\n   * @param field - The autofill field that we are validating as a search field\n   */\n  private static isSearchField(field: AutofillField) {\n    const matchFieldAttributeValues = [field.type, field.htmlName, field.htmlID, field.placeholder];\n    for (let attrIndex = 0; attrIndex < matchFieldAttributeValues.length; attrIndex++) {\n      if (!matchFieldAttributeValues[attrIndex]) {\n        continue;\n      }\n\n      // Separate camel case words and case them to lower case values\n      const camelCaseSeparatedFieldAttribute = matchFieldAttributeValues[attrIndex]\n        .replace(/([a-z])([A-Z])/g, \"$1 $2\")\n        .toLowerCase();\n      // Split the attribute by non-alphabetical characters to get the keywords\n      const attributeKeywords = camelCaseSeparatedFieldAttribute.split(/[^a-z]/gi);\n\n      for (let keywordIndex = 0; keywordIndex < attributeKeywords.length; keywordIndex++) {\n        if (AutofillService.searchFieldNamesSet.has(attributeKeywords[keywordIndex])) {\n          return true;\n        }\n      }\n    }\n\n    return false;\n  }\n\n  static isExcludedFieldType(field: AutofillField, excludedTypes: string[]) {\n    if (AutofillService.forCustomFieldsOnly(field)) {\n      return true;\n    }\n\n    if (this.isExcludedType(field.type, excludedTypes)) {\n      return true;\n    }\n\n    // Check if the input is an untyped/mistyped search input\n    return this.isSearchField(field);\n  }\n\n  /**\n   * Accepts the value of a field, a list of possible options that define if\n   * a field can be matched to a vault cipher, and a secondary optional list\n   * of options that define if a field can be matched to a vault cipher. Returns\n   * true if the field value matches one of the options.\n   * @param {string} value\n   * @param {string[]} options\n   * @param {string[]} containsOptions\n   * @returns {boolean}\n   * @private\n   */\n  private static isFieldMatch(\n    value: string,\n    options: string[],\n    containsOptions?: string[],\n  ): boolean {\n    value = value\n      .trim()\n      .toLowerCase()\n      .replace(/[^a-zA-Z0-9]+/g, \"\");\n    for (let i = 0; i < options.length; i++) {\n      let option = options[i];\n      const checkValueContains = containsOptions == null || containsOptions.indexOf(option) > -1;\n      option = option.toLowerCase().replace(/-/g, \"\");\n      if (value === option || (checkValueContains && value.indexOf(option) > -1)) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Helper method used to create a script action for a field. Conditionally\n   * accepts a fieldProp value that will be used in place of the dataProp value.\n   * @param {AutofillScript} fillScript\n   * @param cipherData\n   * @param {{[p: string]: AutofillField}} fillFields\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {string} dataProp\n   * @param {string} fieldProp\n   * @private\n   */\n  private makeScriptAction(\n    fillScript: AutofillScript,\n    cipherData: any,\n    fillFields: { [id: string]: AutofillField },\n    filledFields: { [id: string]: AutofillField },\n    dataProp: string,\n    fieldProp?: string,\n  ) {\n    fieldProp = fieldProp || dataProp;\n    this.makeScriptActionWithValue(\n      fillScript,\n      cipherData[dataProp],\n      fillFields[fieldProp],\n      filledFields,\n    );\n  }\n\n  /**\n   * Handles updating the list of filled fields and adding a script action\n   * to the fill script. If a select field is passed as part of the fill options,\n   * we iterate over the options to check if the passed value matches one of the\n   * options. If it does, we add a script action to select the option.\n   * @param {AutofillScript} fillScript\n   * @param dataValue\n   * @param {AutofillField} field\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @private\n   */\n  private makeScriptActionWithValue(\n    fillScript: AutofillScript,\n    dataValue: any,\n    field: AutofillField,\n    filledFields: { [id: string]: AutofillField },\n  ) {\n    let doFill = false;\n    if (AutofillService.hasValue(dataValue) && field) {\n      if (field.type === \"select-one\" && field.selectInfo && field.selectInfo.options) {\n        for (let i = 0; i < field.selectInfo.options.length; i++) {\n          const option = field.selectInfo.options[i];\n          for (let j = 0; j < option.length; j++) {\n            if (\n              AutofillService.hasValue(option[j]) &&\n              option[j].toLowerCase() === dataValue.toLowerCase()\n            ) {\n              doFill = true;\n              if (option.length > 1) {\n                dataValue = option[1];\n              }\n              break;\n            }\n          }\n\n          if (doFill) {\n            break;\n          }\n        }\n      } else {\n        doFill = true;\n      }\n    }\n\n    if (doFill) {\n      filledFields[field.opid] = field;\n      AutofillService.fillByOpid(fillScript, field, dataValue);\n    }\n  }\n\n  static valueIsLikePassword(value: string) {\n    if (value == null) {\n      return false;\n    }\n    // Removes all whitespace, _ and - characters\n    const cleanedValue = value.toLowerCase().replace(/[\\s_-]/g, \"\");\n\n    if (cleanedValue.indexOf(\"password\") < 0) {\n      return false;\n    }\n\n    return !AutoFillConstants.PasswordFieldExcludeList.some((i) => cleanedValue.indexOf(i) > -1);\n  }\n\n  static fieldHasDisqualifyingAttributeValue(field: AutofillField) {\n    const checkedAttributeValues = [field.htmlID, field.htmlName, field.placeholder];\n    let valueIsOnExclusionList = false;\n\n    for (let i = 0; i < checkedAttributeValues.length; i++) {\n      const checkedAttributeValue = checkedAttributeValues[i];\n      const cleanedValue = checkedAttributeValue?.toLowerCase().replace(/[\\s_-]/g, \"\");\n\n      valueIsOnExclusionList = Boolean(\n        cleanedValue && AutoFillConstants.FieldIgnoreList.some((i) => cleanedValue.indexOf(i) > -1),\n      );\n\n      if (valueIsOnExclusionList) {\n        break;\n      }\n    }\n\n    return valueIsOnExclusionList;\n  }\n\n  /**\n   * Accepts a pageDetails object with a list of fields and returns a list of\n   * fields that are likely to be password fields.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {boolean} canBeHidden\n   * @param {boolean} canBeReadOnly\n   * @param {boolean} mustBeEmpty\n   * @param {boolean} fillNewPassword\n   * @returns {AutofillField[]}\n   */\n  static loadPasswordFields(\n    pageDetails: AutofillPageDetails,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    mustBeEmpty: boolean,\n    fillNewPassword: boolean,\n  ) {\n    const arr: AutofillField[] = [];\n\n    pageDetails.fields.forEach((f) => {\n      const isPassword = f.type === \"password\";\n      if (\n        !isPassword &&\n        AutofillService.isExcludedFieldType(f, AutoFillConstants.ExcludedAutofillLoginTypes)\n      ) {\n        return;\n      }\n\n      // If any attribute values match disqualifying values, the entire field should not be used\n      if (AutofillService.fieldHasDisqualifyingAttributeValue(f)) {\n        return;\n      }\n\n      const isLikePassword = () => {\n        if (f.type !== \"text\") {\n          return false;\n        }\n\n        const testedValues = [f.htmlID, f.htmlName, f.placeholder];\n        for (let i = 0; i < testedValues.length; i++) {\n          if (AutofillService.valueIsLikePassword(testedValues[i])) {\n            return true;\n          }\n        }\n\n        return false;\n      };\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (isPassword || isLikePassword()) &&\n        (canBeHidden || f.viewable) &&\n        (!mustBeEmpty || f.value == null || f.value.trim() === \"\") &&\n        (fillNewPassword || f.autoCompleteType !== \"new-password\")\n      ) {\n        arr.push(f);\n      }\n    });\n\n    return arr;\n  }\n\n  /**\n   * Accepts a pageDetails object with a list of fields and returns a list of\n   * fields that are likely to be username fields.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {AutofillField} passwordField\n   * @param {boolean} canBeHidden\n   * @param {boolean} canBeReadOnly\n   * @param {boolean} withoutForm\n   * @returns {AutofillField}\n   * @private\n   */\n  private findUsernameField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean,\n  ): AutofillField | null {\n    let usernameField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      if (f.elementNumber >= passwordField.elementNumber) {\n        break;\n      }\n\n      if (\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"email\" || f.type === \"tel\")\n      ) {\n        usernameField = f;\n\n        if (this.findMatchingFieldIndex(f, AutoFillConstants.UsernameFieldNames) > -1) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return usernameField;\n  }\n\n  /**\n   * Accepts a pageDetails object with a list of fields and returns a list of\n   * fields that are likely to be TOTP fields.\n   * @param {AutofillPageDetails} pageDetails\n   * @param {AutofillField} passwordField\n   * @param {boolean} canBeHidden\n   * @param {boolean} canBeReadOnly\n   * @param {boolean} withoutForm\n   * @returns {AutofillField}\n   * @private\n   */\n  private findTotpField(\n    pageDetails: AutofillPageDetails,\n    passwordField: AutofillField,\n    canBeHidden: boolean,\n    canBeReadOnly: boolean,\n    withoutForm: boolean,\n  ): AutofillField | null {\n    let totpField: AutofillField = null;\n    for (let i = 0; i < pageDetails.fields.length; i++) {\n      const f = pageDetails.fields[i];\n      if (AutofillService.forCustomFieldsOnly(f)) {\n        continue;\n      }\n\n      const fieldIsDisqualified = AutofillService.fieldHasDisqualifyingAttributeValue(f);\n\n      if (\n        !fieldIsDisqualified &&\n        !f.disabled &&\n        (canBeReadOnly || !f.readonly) &&\n        (withoutForm || f.form === passwordField.form) &&\n        (canBeHidden || f.viewable) &&\n        (f.type === \"text\" || f.type === \"number\") &&\n        AutofillService.fieldIsFuzzyMatch(f, AutoFillConstants.TotpFieldNames)\n      ) {\n        totpField = f;\n\n        if (\n          this.findMatchingFieldIndex(f, AutoFillConstants.TotpFieldNames) > -1 ||\n          f.autoCompleteType === \"one-time-code\"\n        ) {\n          // We found an exact match. No need to keep looking.\n          break;\n        }\n      }\n    }\n\n    return totpField;\n  }\n\n  /**\n   * Accepts a field and returns the index of the first matching property\n   * present in a list of attribute names.\n   * @param {AutofillField} field\n   * @param {string[]} names\n   * @returns {number}\n   * @private\n   */\n  private findMatchingFieldIndex(field: AutofillField, names: string[]): number {\n    for (let i = 0; i < names.length; i++) {\n      if (names[i].indexOf(\"=\") > -1) {\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlID\", names[i], \"id\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"htmlName\", names[i], \"name\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-left\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-right\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-tag\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"label-aria\", names[i], \"label\")) {\n          return i;\n        }\n        if (this.fieldPropertyIsPrefixMatch(field, \"placeholder\", names[i], \"placeholder\")) {\n          return i;\n        }\n      }\n\n      if (this.fieldPropertyIsMatch(field, \"htmlID\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"htmlName\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-left\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-right\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-tag\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"label-aria\", names[i])) {\n        return i;\n      }\n      if (this.fieldPropertyIsMatch(field, \"placeholder\", names[i])) {\n        return i;\n      }\n    }\n\n    return -1;\n  }\n\n  /**\n   * Accepts a field, property, name, and prefix and returns true if the field\n   * contains a value that matches the given prefixed property.\n   * @param field\n   * @param {string} property\n   * @param {string} name\n   * @param {string} prefix\n   * @param {string} separator\n   * @returns {boolean}\n   * @private\n   */\n  private fieldPropertyIsPrefixMatch(\n    field: any,\n    property: string,\n    name: string,\n    prefix: string,\n    separator = \"=\",\n  ): boolean {\n    if (name.indexOf(prefix + separator) === 0) {\n      const sepIndex = name.indexOf(separator);\n      const val = name.substring(sepIndex + 1);\n      return val != null && this.fieldPropertyIsMatch(field, property, val);\n    }\n    return false;\n  }\n\n  /**\n   * Identifies if a given property within a field matches the value\n   * of the passed \"name\" parameter. If the name starts with \"regex=\",\n   * the value is tested against a case-insensitive regular expression.\n   * If the name starts with \"csv=\", the value is treated as a\n   * comma-separated list of values to match.\n   * @param field\n   * @param {string} property\n   * @param {string} name\n   * @returns {boolean}\n   * @private\n   */\n  private fieldPropertyIsMatch(field: any, property: string, name: string): boolean {\n    let fieldVal = field[property] as string;\n    if (!AutofillService.hasValue(fieldVal)) {\n      return false;\n    }\n\n    fieldVal = fieldVal.trim().replace(/(?:\\r\\n|\\r|\\n)/g, \"\");\n    if (name.startsWith(\"regex=\")) {\n      try {\n        const regexParts = name.split(\"=\", 2);\n        if (regexParts.length === 2) {\n          const regex = new RegExp(regexParts[1], \"i\");\n          return regex.test(fieldVal);\n        }\n      } catch (e) {\n        this.logService.error(e);\n      }\n    } else if (name.startsWith(\"csv=\")) {\n      const csvParts = name.split(\"=\", 2);\n      if (csvParts.length === 2) {\n        const csvVals = csvParts[1].split(\",\");\n        for (let i = 0; i < csvVals.length; i++) {\n          const val = csvVals[i];\n          if (val != null && val.trim().toLowerCase() === fieldVal.toLowerCase()) {\n            return true;\n          }\n        }\n        return false;\n      }\n    }\n\n    return fieldVal.toLowerCase() === name;\n  }\n\n  /**\n   * Accepts a field and returns true if the field contains a\n   * value that matches any of the names in the provided list.\n   * @param {AutofillField} field\n   * @param {string[]} names\n   * @returns {boolean}\n   */\n  static fieldIsFuzzyMatch(field: AutofillField, names: string[]): boolean {\n    if (AutofillService.hasValue(field.htmlID) && this.fuzzyMatch(names, field.htmlID)) {\n      return true;\n    }\n    if (AutofillService.hasValue(field.htmlName) && this.fuzzyMatch(names, field.htmlName)) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-tag\"]) &&\n      this.fuzzyMatch(names, field[\"label-tag\"])\n    ) {\n      return true;\n    }\n    if (AutofillService.hasValue(field.placeholder) && this.fuzzyMatch(names, field.placeholder)) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-left\"]) &&\n      this.fuzzyMatch(names, field[\"label-left\"])\n    ) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-top\"]) &&\n      this.fuzzyMatch(names, field[\"label-top\"])\n    ) {\n      return true;\n    }\n    if (\n      AutofillService.hasValue(field[\"label-aria\"]) &&\n      this.fuzzyMatch(names, field[\"label-aria\"])\n    ) {\n      return true;\n    }\n\n    return false;\n  }\n\n  /**\n   * Accepts a list of options and a value and returns\n   * true if the value matches any of the options.\n   * @param {string[]} options\n   * @param {string} value\n   * @returns {boolean}\n   * @private\n   */\n  private static fuzzyMatch(options: string[], value: string): boolean {\n    if (options == null || options.length === 0 || value == null || value === \"\") {\n      return false;\n    }\n\n    value = value\n      .replace(/(?:\\r\\n|\\r|\\n)/g, \"\")\n      .trim()\n      .toLowerCase();\n\n    for (let i = 0; i < options.length; i++) {\n      if (value.indexOf(options[i]) > -1) {\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  /**\n   * Accepts a string and returns true if the\n   * string is not falsy and not empty.\n   * @param {string} str\n   * @returns {boolean}\n   */\n  static hasValue(str: string): boolean {\n    return Boolean(str && str !== \"\");\n  }\n\n  /**\n   * Sets the `focus_by_opid` autofill script\n   * action to the last field that was filled.\n   * @param {{[p: string]: AutofillField}} filledFields\n   * @param {AutofillScript} fillScript\n   * @returns {AutofillScript}\n   */\n  static setFillScriptForFocus(\n    filledFields: { [id: string]: AutofillField },\n    fillScript: AutofillScript,\n  ): AutofillScript {\n    let lastField: AutofillField = null;\n    let lastPasswordField: AutofillField = null;\n\n    for (const opid in filledFields) {\n      // eslint-disable-next-line\n      if (filledFields.hasOwnProperty(opid) && filledFields[opid].viewable) {\n        lastField = filledFields[opid];\n\n        if (filledFields[opid].type === \"password\") {\n          lastPasswordField = filledFields[opid];\n        }\n      }\n    }\n\n    // Prioritize password field over others.\n    if (lastPasswordField) {\n      fillScript.script.push([\"focus_by_opid\", lastPasswordField.opid]);\n    } else if (lastField) {\n      fillScript.script.push([\"focus_by_opid\", lastField.opid]);\n    }\n\n    return fillScript;\n  }\n\n  /**\n   * Updates a fill script to place the `cilck_on_opid`, `focus_on_opid`, and `fill_by_opid`\n   * fill script actions associated with the provided field.\n   * @param {AutofillScript} fillScript\n   * @param {AutofillField} field\n   * @param {string} value\n   */\n  static fillByOpid(fillScript: AutofillScript, field: AutofillField, value: string): void {\n    if (field.maxLength && value && value.length > field.maxLength) {\n      value = value.substr(0, value.length);\n    }\n    if (field.tagName !== \"span\") {\n      fillScript.script.push([\"click_on_opid\", field.opid]);\n      fillScript.script.push([\"focus_by_opid\", field.opid]);\n    }\n    fillScript.script.push([\"fill_by_opid\", field.opid, value]);\n  }\n\n  /**\n   * Identifies if the field is a custom field, a custom\n   * field is defined as a field that is a `span` element.\n   * @param {AutofillField} field\n   * @returns {boolean}\n   */\n  static forCustomFieldsOnly(field: AutofillField): boolean {\n    return field.tagName === \"span\";\n  }\n\n  /**\n   * Handles debouncing the opening of the master password reprompt popout.\n   */\n  private isDebouncingPasswordRepromptPopout() {\n    if (this.currentlyOpeningPasswordRepromptPopout) {\n      return true;\n    }\n\n    this.currentlyOpeningPasswordRepromptPopout = true;\n    clearTimeout(this.openPasswordRepromptPopoutDebounce);\n\n    this.openPasswordRepromptPopoutDebounce = setTimeout(() => {\n      this.currentlyOpeningPasswordRepromptPopout = false;\n    }, 100);\n\n    return false;\n  }\n\n  /**\n   * Handles incoming long-lived connections from injected autofill scripts.\n   * Stores the port in a set to facilitate disconnecting ports if the extension\n   * needs to re-inject the autofill scripts.\n   *\n   * @param port - The port that was connected\n   */\n  private handleInjectedScriptPortConnection = (port: chrome.runtime.Port) => {\n    if (port.name !== AutofillPort.InjectedScript) {\n      return;\n    }\n\n    this.autofillScriptPortsSet.add(port);\n    port.onDisconnect.addListener(this.handleInjectScriptPortOnDisconnect);\n  };\n\n  /**\n   * Handles disconnecting ports that relate to injected autofill scripts.\n\n   * @param port - The port that was disconnected\n   */\n  private handleInjectScriptPortOnDisconnect = (port: chrome.runtime.Port) => {\n    if (port.name !== AutofillPort.InjectedScript) {\n      return;\n    }\n\n    this.autofillScriptPortsSet.delete(port);\n  };\n\n  /**\n   * Queries all open tabs in the user's browsing session\n   * and injects the autofill scripts into the page.\n   */\n  private async injectAutofillScriptsInAllTabs() {\n    const tabs = await BrowserApi.tabsQuery({});\n    for (let index = 0; index < tabs.length; index++) {\n      const tab = tabs[index];\n      if (tab.url?.startsWith(\"http\")) {\n        const frames = await BrowserApi.getAllFrameDetails(tab.id);\n        frames.forEach((frame) => this.injectAutofillScripts(tab, frame.frameId, false));\n      }\n    }\n  }\n\n  /**\n   * Updates the autofill inline menu visibility setting in all active tabs\n   * when the InlineMenuVisibilitySetting observable is updated.\n   *\n   * @param previousSetting - The previous setting value\n   * @param currentSetting - The current setting value\n   */\n  private async handleInlineMenuVisibilityChange(\n    previousSetting: InlineMenuVisibilitySetting,\n    currentSetting: InlineMenuVisibilitySetting,\n  ) {\n    if (previousSetting === undefined || previousSetting === currentSetting) {\n      return;\n    }\n\n    const inlineMenuPreviouslyDisabled = previousSetting === AutofillOverlayVisibility.Off;\n    const inlineMenuCurrentlyDisabled = currentSetting === AutofillOverlayVisibility.Off;\n    if (!inlineMenuPreviouslyDisabled && !inlineMenuCurrentlyDisabled) {\n      const tabs = await BrowserApi.tabsQuery({});\n      tabs.forEach((tab) =>\n        BrowserApi.tabSendMessageData(tab, \"updateAutofillInlineMenuVisibility\", {\n          inlineMenuVisibility: currentSetting,\n        }),\n      );\n      return;\n    }\n\n    await this.reloadAutofillScripts();\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { BadgeSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/badge-settings.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\n\nimport MainBackground from \"../../background/main.background\";\nimport IconDetails from \"../../vault/background/models/icon-details\";\nimport { BrowserApi } from \"../browser/browser-api\";\nimport { BrowserPlatformUtilsService } from \"../services/platform-utils/browser-platform-utils.service\";\n\nexport type BadgeOptions = {\n  tab?: chrome.tabs.Tab;\n  windowId?: number;\n};\n\nexport class UpdateBadge {\n  private authService: AuthService;\n  private badgeSettingsService: BadgeSettingsServiceAbstraction;\n  private cipherService: CipherService;\n  private badgeAction: typeof chrome.action | typeof chrome.browserAction;\n  private sidebarAction: OperaSidebarAction | FirefoxSidebarAction;\n  private win: Window & typeof globalThis;\n\n  constructor(win: Window & typeof globalThis, services: MainBackground) {\n    this.badgeAction = BrowserApi.getBrowserAction();\n    this.sidebarAction = BrowserApi.getSidebarAction(self);\n    this.win = win;\n\n    this.badgeSettingsService = services.badgeSettingsService;\n    this.authService = services.authService;\n    this.cipherService = services.cipherService;\n  }\n\n  async run(opts?: { tabId?: number; windowId?: number }): Promise<void> {\n    const authStatus = await this.authService.getAuthStatus();\n\n    await this.setBadgeBackgroundColor();\n\n    switch (authStatus) {\n      case AuthenticationStatus.LoggedOut: {\n        await this.setLoggedOut();\n        break;\n      }\n      case AuthenticationStatus.Locked: {\n        await this.setLocked();\n        break;\n      }\n      case AuthenticationStatus.Unlocked: {\n        const tab = await this.getTab(opts?.tabId, opts?.windowId);\n        await this.setUnlocked({ tab, windowId: tab?.windowId });\n        break;\n      }\n    }\n  }\n\n  async setLoggedOut(): Promise<void> {\n    await this.setBadgeIcon(\"_gray\");\n    await this.clearBadgeText();\n  }\n\n  async setLocked() {\n    await this.setBadgeIcon(\"_locked\");\n    await this.clearBadgeText();\n  }\n\n  private async clearBadgeText() {\n    const tabs = await BrowserApi.getActiveTabs();\n    if (tabs != null) {\n      tabs.forEach(async (tab) => {\n        if (tab.id != null) {\n          await this.setBadgeText(\"\", tab.id);\n        }\n      });\n    }\n  }\n\n  async setUnlocked(opts: BadgeOptions) {\n    await this.setBadgeIcon(\"\");\n\n    const enableBadgeCounter = await firstValueFrom(this.badgeSettingsService.enableBadgeCounter$);\n    if (!enableBadgeCounter) {\n      return;\n    }\n\n    const ciphers = await this.cipherService.getAllDecryptedForUrl(opts?.tab?.url);\n    let countText = ciphers.length == 0 ? \"\" : ciphers.length.toString();\n    if (ciphers.length > 9) {\n      countText = \"9+\";\n    }\n    await this.setBadgeText(countText, opts?.tab?.id);\n  }\n\n  setBadgeBackgroundColor(color = \"#294e5f\") {\n    if (this.badgeAction?.setBadgeBackgroundColor) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.badgeAction.setBadgeBackgroundColor({ color });\n    }\n    if (this.isOperaSidebar(this.sidebarAction)) {\n      this.sidebarAction.setBadgeBackgroundColor({ color });\n    }\n  }\n\n  setBadgeText(text: string, tabId?: number) {\n    this.setActionText(text, tabId);\n    this.setSideBarText(text, tabId);\n  }\n\n  async setBadgeIcon(iconSuffix: string, windowId?: number) {\n    const options: IconDetails = {\n      path: {\n        19: \"/images/icon19\" + iconSuffix + \".png\",\n        38: \"/images/icon38\" + iconSuffix + \".png\",\n      },\n    };\n    if (windowId && BrowserPlatformUtilsService.isFirefox()) {\n      options.windowId = windowId;\n    }\n\n    await this.setActionIcon(options);\n    await this.setSidebarActionIcon(options);\n  }\n\n  private setActionText(text: string, tabId?: number) {\n    if (this.badgeAction?.setBadgeText) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.badgeAction.setBadgeText({ text, tabId });\n    }\n  }\n\n  private setSideBarText(text: string, tabId?: number) {\n    if (this.isOperaSidebar(this.sidebarAction)) {\n      this.sidebarAction.setBadgeText({ text, tabId });\n    } else if (this.sidebarAction) {\n      // Firefox\n      const title = `Bitwarden${Utils.isNullOrEmpty(text) ? \"\" : ` [${text}]`}`;\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.sidebarAction.setTitle({ title, tabId });\n    }\n  }\n\n  private async setActionIcon(options: IconDetails) {\n    if (!this.badgeAction?.setIcon) {\n      return;\n    }\n\n    if (this.useSyncApiCalls) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.badgeAction.setIcon(options);\n    } else {\n      await new Promise<void>((resolve) => this.badgeAction.setIcon(options, () => resolve()));\n    }\n  }\n\n  private async setSidebarActionIcon(options: IconDetails) {\n    if (!this.sidebarAction?.setIcon) {\n      return;\n    }\n\n    if (this.isOperaSidebar(this.sidebarAction)) {\n      await new Promise<void>((resolve) =>\n        (this.sidebarAction as OperaSidebarAction).setIcon(options, () => resolve()),\n      );\n    } else {\n      await this.sidebarAction.setIcon(options);\n    }\n  }\n\n  private async getTab(tabId?: number, windowId?: number) {\n    return (\n      (await BrowserApi.getTab(tabId)) ??\n      (windowId\n        ? await BrowserApi.tabsQueryFirst({ active: true, windowId })\n        : await BrowserApi.tabsQueryFirst({ active: true, currentWindow: true })) ??\n      (await BrowserApi.tabsQueryFirst({ active: true, lastFocusedWindow: true })) ??\n      (await BrowserApi.tabsQueryFirst({ active: true }))\n    );\n  }\n\n  private get useSyncApiCalls() {\n    return (\n      BrowserPlatformUtilsService.isFirefox() || BrowserPlatformUtilsService.isSafari(this.win)\n    );\n  }\n\n  private isOperaSidebar(\n    action: OperaSidebarAction | FirefoxSidebarAction,\n  ): action is OperaSidebarAction {\n    return action != null && (action as OperaSidebarAction).setBadgeText != null;\n  }\n}\n","import { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { CommandDefinition, MessageSender } from \"@bitwarden/common/platform/messaging\";\nimport { getCommand } from \"@bitwarden/common/platform/messaging/internal\";\n\ntype ErrorHandler = (logger: LogService, command: string) => void;\n\nconst HANDLED_ERRORS: Record<string, ErrorHandler> = {\n  \"Could not establish connection. Receiving end does not exist.\": (logger, command) =>\n    logger.debug(`Receiving end didn't exist for command '${command}'`),\n\n  \"The message port closed before a response was received.\": (logger, command) =>\n    logger.debug(`Port was closed for command '${command}'`),\n};\n\nexport class ChromeMessageSender implements MessageSender {\n  constructor(private readonly logService: LogService) {}\n\n  send<T extends Record<string, unknown>>(\n    commandDefinition: string | CommandDefinition<T>,\n    payload: Record<string, unknown> | T = {},\n  ): void {\n    const command = getCommand(commandDefinition);\n    chrome.runtime.sendMessage(Object.assign(payload, { command: command }), () => {\n      if (chrome.runtime.lastError) {\n        const errorHandler = HANDLED_ERRORS[chrome.runtime.lastError.message];\n        if (errorHandler != null) {\n          errorHandler(this.logService, command);\n          return;\n        }\n\n        this.logService.warning(\n          `Unhandled error while sending message with command '${command}': ${chrome.runtime.lastError.message}`,\n        );\n      }\n    });\n  }\n}\n","import { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\n\nimport { OffscreenDocumentService } from \"./abstractions/offscreen-document\";\n\nexport class DefaultOffscreenDocumentService implements OffscreenDocumentService {\n  private workerCount = 0;\n\n  constructor(private logService: LogService) {}\n\n  offscreenApiSupported(): boolean {\n    return typeof chrome.offscreen !== \"undefined\";\n  }\n\n  async withDocument<T>(\n    reasons: chrome.offscreen.Reason[],\n    justification: string,\n    callback: () => Promise<T> | T,\n  ): Promise<T> {\n    this.workerCount++;\n    try {\n      if (!(await this.documentExists())) {\n        await this.create(reasons, justification);\n      }\n\n      return await callback();\n    } finally {\n      this.workerCount--;\n      if (this.workerCount === 0) {\n        await this.close();\n      }\n    }\n  }\n\n  private async create(reasons: chrome.offscreen.Reason[], justification: string): Promise<void> {\n    try {\n      await chrome.offscreen.createDocument({\n        url: \"offscreen-document/index.html\",\n        reasons,\n        justification,\n      });\n    } catch (e) {\n      // gobble multiple offscreen document creation errors\n      // TODO: remove this when the offscreen document service is fixed PM-8014\n      if (e.message === \"Only a single offscreen document may be created.\") {\n        this.logService.info(\"Ignoring offscreen document creation error.\");\n        return;\n      }\n      throw e;\n    }\n  }\n\n  private async close(): Promise<void> {\n    await chrome.offscreen.closeDocument();\n  }\n\n  private async documentExists(): Promise<boolean> {\n    return await chrome.offscreen.hasDocument();\n  }\n}\n","/**\n * The biometrics service is used to provide access to the status of and access to biometric functionality on the platforms.\n */\nexport abstract class BiometricsService {\n  /**\n   * Check if the platform supports biometric authentication.\n   */\n  abstract supportsBiometric(): Promise<boolean>;\n\n  /**\n   * Checks whether biometric unlock is currently available at the moment (e.g. if the laptop lid is shut, biometric unlock may not be available)\n   */\n  abstract isBiometricUnlockAvailable(): Promise<boolean>;\n\n  /**\n   * Performs biometric authentication\n   */\n  abstract authenticateBiometric(): Promise<boolean>;\n  /**\n   * Determine whether biometrics support requires going through a setup process.\n   * This is currently only needed on Linux.\n   *\n   * @returns true if biometrics support requires setup, false if it does not (is already setup, or did not require it in the first place)\n   */\n  abstract biometricsNeedsSetup(): Promise<boolean>;\n  /**\n   * Determine whether biometrics support can be automatically setup, or requires user interaction.\n   * Auto-setup is prevented by sandboxed environments, such as Snap and Flatpak.\n   *\n   * @returns true if biometrics support can be automatically setup, false if it requires user interaction.\n   */\n  abstract biometricsSupportsAutoSetup(): Promise<boolean>;\n  /**\n   * Start automatic biometric setup, which places the required configuration files / changes the required settings.\n   */\n  abstract biometricsSetup(): Promise<void>;\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { BiometricsService } from \"@bitwarden/common/platform/biometrics/biometric.service\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\n\n@Injectable()\nexport abstract class BrowserBiometricsService extends BiometricsService {\n  async supportsBiometric() {\n    const platformInfo = await BrowserApi.getPlatformInfo();\n    if (platformInfo.os === \"mac\" || platformInfo.os === \"win\" || platformInfo.os === \"linux\") {\n      return true;\n    }\n    return false;\n  }\n\n  abstract authenticateBiometric(): Promise<boolean>;\n  abstract isBiometricUnlockAvailable(): Promise<boolean>;\n}\n","import { Injectable } from \"@angular/core\";\n\nimport { NativeMessagingBackground } from \"../../background/nativeMessaging.background\";\n\nimport { BrowserBiometricsService } from \"./browser-biometrics.service\";\n\n@Injectable()\nexport class BackgroundBrowserBiometricsService extends BrowserBiometricsService {\n  constructor(private nativeMessagingBackground: () => NativeMessagingBackground) {\n    super();\n  }\n\n  async authenticateBiometric(): Promise<boolean> {\n    const responsePromise = this.nativeMessagingBackground().getResponse();\n    await this.nativeMessagingBackground().send({ command: \"biometricUnlock\" });\n    const response = await responsePromise;\n    return response.response === \"unlocked\";\n  }\n\n  async isBiometricUnlockAvailable(): Promise<boolean> {\n    const responsePromise = this.nativeMessagingBackground().getResponse();\n    await this.nativeMessagingBackground().send({ command: \"biometricUnlockAvailable\" });\n    const response = await responsePromise;\n    return response.response === \"available\";\n  }\n\n  async biometricsNeedsSetup(): Promise<boolean> {\n    return false;\n  }\n\n  async biometricsSupportsAutoSetup(): Promise<boolean> {\n    return false;\n  }\n\n  async biometricsSetup(): Promise<void> {}\n}\n","import { EncryptService } from \"../../../platform/abstractions/encrypt.service\";\nimport { EncString } from \"../../../platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { OrgKey, UserPrivateKey } from \"../../../types/key\";\nimport { EncryptedOrganizationKeyData } from \"../data/encrypted-organization-key.data\";\n\nexport abstract class BaseEncryptedOrganizationKey {\n  abstract get encryptedOrganizationKey(): EncString;\n\n  static fromData(data: EncryptedOrganizationKeyData) {\n    switch (data.type) {\n      case \"organization\":\n        return new EncryptedOrganizationKey(data.key);\n\n      case \"provider\":\n        return new ProviderEncryptedOrganizationKey(data.key, data.providerId);\n\n      default:\n        return null;\n    }\n  }\n\n  static isProviderEncrypted(\n    key: EncryptedOrganizationKey | ProviderEncryptedOrganizationKey,\n  ): key is ProviderEncryptedOrganizationKey {\n    return key.toData().type === \"provider\";\n  }\n}\n\nexport class EncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(private key: string) {}\n\n  async decrypt(encryptService: EncryptService, privateKey: UserPrivateKey) {\n    const decValue = await encryptService.rsaDecrypt(this.encryptedOrganizationKey, privateKey);\n    return new SymmetricCryptoKey(decValue) as OrgKey;\n  }\n\n  get encryptedOrganizationKey() {\n    return new EncString(this.key);\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"organization\",\n      key: this.key,\n    };\n  }\n}\n\nexport class ProviderEncryptedOrganizationKey implements BaseEncryptedOrganizationKey {\n  constructor(\n    private key: string,\n    private providerId: string,\n  ) {}\n\n  async decrypt(encryptService: EncryptService, providerKeys: Record<string, SymmetricCryptoKey>) {\n    const decValue = await encryptService.decryptToBytes(\n      new EncString(this.key),\n      providerKeys[this.providerId],\n    );\n    return new SymmetricCryptoKey(decValue) as OrgKey;\n  }\n\n  get encryptedOrganizationKey() {\n    return new EncString(this.key);\n  }\n\n  toData(): EncryptedOrganizationKeyData {\n    return {\n      type: \"provider\",\n      key: this.key,\n      providerId: this.providerId,\n    };\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { ProfileOrganizationResponse } from \"../../admin-console/models/response/profile-organization.response\";\nimport { ProfileProviderOrganizationResponse } from \"../../admin-console/models/response/profile-provider-organization.response\";\nimport { ProfileProviderResponse } from \"../../admin-console/models/response/profile-provider.response\";\nimport { KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport { OrganizationId, UserId } from \"../../types/guid\";\nimport {\n  UserKey,\n  MasterKey,\n  OrgKey,\n  ProviderKey,\n  CipherKey,\n  UserPrivateKey,\n  UserPublicKey,\n} from \"../../types/key\";\nimport { KeySuffixOptions, HashPurpose } from \"../enums\";\nimport { EncArrayBuffer } from \"../models/domain/enc-array-buffer\";\nimport { EncString } from \"../models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\n\nexport class UserPrivateKeyDecryptionFailedError extends Error {\n  constructor() {\n    super(\"Failed to decrypt the user's private key.\");\n  }\n}\n\n/**\n * An object containing all the users key needed to decrypt a users personal and organization vaults.\n */\nexport type CipherDecryptionKeys = {\n  /**\n   * A users {@link UserKey} that is useful for decrypted ciphers in the users personal vault.\n   */\n  userKey: UserKey;\n\n  /**\n   * A users decrypted organization keys.\n   */\n  orgKeys: Record<OrganizationId, OrgKey>;\n};\n\nexport abstract class CryptoService {\n  /**\n   * Retrieves a stream of the given users {@see UserKey} values. Can emit null if the user does not have a user key, e.g. the user\n   * is in a locked or logged out state.\n   * @param userId The user id of the user to get the {@see UserKey} for.\n   */\n  abstract userKey$(userId: UserId): Observable<UserKey>;\n  /**\n   * Returns the an observable key for the given user id.\n   *\n   * @note this observable represents only user keys stored in memory. A null value does not indicate that we cannot load a user key from storage.\n   * @param userId The desired user\n   */\n  abstract getInMemoryUserKeyFor$(userId: UserId): Observable<UserKey>;\n  /**\n   * Sets the provided user key and stores\n   * any other necessary versions (such as auto, biometrics,\n   * or pin)\n   *\n   * @throws when key is null. Lock the account to clear a key\n   * @param key The user key to set\n   * @param userId The desired user\n   */\n  abstract setUserKey(key: UserKey, userId?: string): Promise<void>;\n  /**\n   * Sets the provided user keys and stores any other necessary versions\n   * (such as auto, biometrics, or pin).\n   * Also sets the user's encrypted private key in storage and\n   * clears the decrypted private key from memory\n   * Note: does not clear the private key if null is provided\n   *\n   * @throws Error when userKey, encPrivateKey or userId is null\n   * @throws UserPrivateKeyDecryptionFailedError when the userKey cannot decrypt encPrivateKey\n   * @param userKey The user key to set\n   * @param encPrivateKey An encrypted private key\n   * @param userId The desired user\n   */\n  abstract setUserKeys(userKey: UserKey, encPrivateKey: string, userId: UserId): Promise<void>;\n  /**\n   * Gets the user key from memory and sets it again,\n   * kicking off a refresh of any additional keys\n   * (such as auto, biometrics, or pin)\n   */\n  abstract refreshAdditionalKeys(): Promise<void>;\n  /**\n   * Observable value that returns whether or not the currently active user has ever had auser key,\n   * i.e. has ever been unlocked/decrypted. This is key for differentiating between TDE locked and standard locked states.\n   */\n  abstract everHadUserKey$: Observable<boolean>;\n  /**\n   * Retrieves the user key\n   * @param userId The desired user\n   * @returns The user key\n   *\n   * @deprecated Use {@link userKey$} with a required {@link UserId} instead.\n   */\n  abstract getUserKey(userId?: string): Promise<UserKey>;\n\n  /**\n   * Checks if the user is using an old encryption scheme that used the master key\n   * for encryption of data instead of the user key.\n   */\n  abstract isLegacyUser(masterKey?: MasterKey, userId?: string): Promise<boolean>;\n\n  /**\n   * Use for encryption/decryption of data in order to support legacy\n   * encryption models. It will return the user key if available,\n   * if not it will return the master key.\n   *\n   * @deprecated Please provide the userId of the user you want the user key for.\n   */\n  abstract getUserKeyWithLegacySupport(): Promise<UserKey>;\n\n  /**\n   * Use for encryption/decryption of data in order to support legacy\n   * encryption models. It will return the user key if available,\n   * if not it will return the master key.\n   * @param userId The desired user\n   */\n  abstract getUserKeyWithLegacySupport(userId: UserId): Promise<UserKey>;\n  /**\n   * Retrieves the user key from storage\n   * @param keySuffix The desired version of the user's key to retrieve\n   * @param userId The desired user\n   * @returns The user key\n   */\n  abstract getUserKeyFromStorage(keySuffix: KeySuffixOptions, userId?: string): Promise<UserKey>;\n\n  /**\n   * Determines whether the user key is available for the given user.\n   * @param userId The desired user. If not provided, the active user will be used. If no active user exists, the method will return false.\n   * @returns True if the user key is available\n   */\n  abstract hasUserKey(userId?: UserId): Promise<boolean>;\n  /**\n   * Determines whether the user key is available for the given user in memory.\n   * @param userId The desired user. If not provided, the active user will be used. If no active user exists, the method will return false.\n   * @returns True if the user key is available\n   */\n  abstract hasUserKeyInMemory(userId?: string): Promise<boolean>;\n  /**\n   * @param keySuffix The desired version of the user's key to check\n   * @param userId The desired user\n   * @returns True if the provided version of the user key is stored\n   */\n  abstract hasUserKeyStored(keySuffix: KeySuffixOptions, userId?: string): Promise<boolean>;\n  /**\n   * Generates a new user key\n   * @param masterKey The user's master key\n   * @returns A new user key and the master key protected version of it\n   */\n  abstract makeUserKey(key: MasterKey): Promise<[UserKey, EncString]>;\n  /**\n   * Clears the user's stored version of the user key\n   * @param keySuffix The desired version of the key to clear\n   * @param userId The desired user\n   */\n  abstract clearStoredUserKey(keySuffix: KeySuffixOptions, userId?: string): Promise<void>;\n  /**\n   * Stores the master key encrypted user key\n   * @param userKeyMasterKey The master key encrypted user key to set\n   * @param userId The desired user\n   */\n  abstract setMasterKeyEncryptedUserKey(UserKeyMasterKey: string, userId: string): Promise<void>;\n  /**\n   * @param password The user's master password that will be used to derive a master key if one isn't found\n   * @param userId The desired user\n   */\n  abstract getOrDeriveMasterKey(password: string, userId?: string): Promise<MasterKey>;\n  /**\n   * Generates a master key from the provided password\n   * @param password The user's master password\n   * @param email The user's email\n   * @param KdfConfig The user's key derivation function configuration\n   * @returns A master key derived from the provided password\n   */\n  abstract makeMasterKey(password: string, email: string, KdfConfig: KdfConfig): Promise<MasterKey>;\n  /**\n   * Encrypts the existing (or provided) user key with the\n   * provided master key\n   * @param masterKey The user's master key\n   * @param userKey The user key\n   * @returns The user key and the master key protected version of it\n   */\n  abstract encryptUserKeyWithMasterKey(\n    masterKey: MasterKey,\n    userKey?: UserKey,\n  ): Promise<[UserKey, EncString]>;\n  /**\n   * Creates a master password hash from the user's master password. Can\n   * be used for local authentication or for server authentication depending\n   * on the hashPurpose provided.\n   * @param password The user's master password\n   * @param key The user's master key\n   * @param hashPurpose The iterations to use for the hash\n   * @returns The user's master password hash\n   */\n  abstract hashMasterKey(\n    password: string,\n    key: MasterKey,\n    hashPurpose?: HashPurpose,\n  ): Promise<string>;\n  /**\n   * Compares the provided master password to the stored password hash and server password hash.\n   * Updates the stored hash if outdated.\n   * @param masterPassword The user's master password\n   * @param key The user's master key\n   * @returns True if the provided master password matches either the stored\n   * key hash or the server key hash\n   */\n  abstract compareAndUpdateKeyHash(masterPassword: string, masterKey: MasterKey): Promise<boolean>;\n  /**\n   * Stores the encrypted organization keys and clears any decrypted\n   * organization keys currently in memory\n   * @param orgs The organizations to set keys for\n   * @param providerOrgs The provider organizations to set keys for\n   * @param userId The user id of the user to set the org keys for\n   */\n  abstract setOrgKeys(\n    orgs: ProfileOrganizationResponse[],\n    providerOrgs: ProfileProviderOrganizationResponse[],\n    userId: UserId,\n  ): Promise<void>;\n  /**\n   * Retrieves a stream of the active users organization keys,\n   * will NOT emit any value if there is no active user.\n   *\n   * @deprecated Use {@link orgKeys$} with a required {@link UserId} instead.\n   */\n  abstract activeUserOrgKeys$: Observable<Record<OrganizationId, OrgKey>>;\n  /**\n   * Returns the organization's symmetric key\n   * @deprecated Use the observable userOrgKeys$ and `map` to the desired {@link OrgKey} instead\n   * @param orgId The desired organization\n   * @returns The organization's symmetric key\n   */\n  abstract getOrgKey(orgId: string): Promise<OrgKey>;\n  /**\n   * Uses the org key to derive a new symmetric key for encrypting data\n   * @param orgKey The organization's symmetric key\n   */\n  abstract makeDataEncKey<T extends UserKey | OrgKey>(\n    key: T,\n  ): Promise<[SymmetricCryptoKey, EncString]>;\n\n  /**\n   * Stores the provider keys for a given user.\n   * @param orgs The provider orgs for which to save the keys from.\n   * @param userId The user id of the user for which to store the keys for.\n   */\n  abstract setProviderKeys(orgs: ProfileProviderResponse[], userId: UserId): Promise<void>;\n  /**\n   * @param providerId The desired provider\n   * @returns The provider's symmetric key\n   */\n  abstract getProviderKey(providerId: string): Promise<ProviderKey>;\n  /**\n   * Creates a new organization key and encrypts it with the user's public key.\n   * This method can also return Provider keys for creating new Provider users.\n   * @returns The new encrypted org key and the decrypted key itself\n   */\n  abstract makeOrgKey<T extends OrgKey | ProviderKey>(): Promise<[EncString, T]>;\n  /**\n   * Sets the user's encrypted private key in storage and\n   * clears the decrypted private key from memory\n   * Note: does not clear the private key if null is provided\n   * @param encPrivateKey An encrypted private key\n   */\n  abstract setPrivateKey(encPrivateKey: string, userId: UserId): Promise<void>;\n  /**\n   * Returns the private key from memory. If not available, decrypts it\n   * from storage and stores it in memory\n   * @returns The user's private key\n   *\n   * @throws An error if there is no user currently active.\n   *\n   * @deprecated Use {@link userPrivateKey$} instead.\n   */\n  abstract getPrivateKey(): Promise<Uint8Array>;\n\n  /**\n   * Gets an observable stream of the given users decrypted private key, will emit null if the user\n   * doesn't have a UserKey to decrypt the encrypted private key or null if the user doesn't have an\n   * encrypted private key at all.\n   *\n   * @param userId The user id of the user to get the data for.\n   */\n  abstract userPrivateKey$(userId: UserId): Observable<UserPrivateKey>;\n\n  /**\n   * Gets an observable stream of the given users decrypted private key with legacy support,\n   * will emit null if the user doesn't have a UserKey to decrypt the encrypted private key\n   * or null if the user doesn't have an encrypted private key at all.\n   *\n   * @param userId The user id of the user to get the data for.\n   */\n  abstract userPrivateKeyWithLegacySupport$(userId: UserId): Observable<UserPrivateKey>;\n\n  /**\n   * Generates a fingerprint phrase for the user based on their public key\n   * @param fingerprintMaterial Fingerprint material\n   * @param publicKey The user's public key\n   * @returns The user's fingerprint phrase\n   */\n  abstract getFingerprint(fingerprintMaterial: string, publicKey?: Uint8Array): Promise<string[]>;\n  /**\n   * Generates a new keypair\n   * @param key A key to encrypt the private key with. If not provided,\n   * defaults to the user key\n   * @returns A new keypair: [publicKey in Base64, encrypted privateKey]\n   * @throws If the provided key is a null-ish value.\n   */\n  abstract makeKeyPair(key: SymmetricCryptoKey): Promise<[string, EncString]>;\n  /**\n   * Clears the user's pin keys from storage\n   * Note: This will remove the stored pin and as a result,\n   * disable pin protection for the user\n   * @param userId The desired user\n   */\n  abstract clearPinKeys(userId?: string): Promise<void>;\n  /**\n   * @param keyMaterial The key material to derive the send key from\n   * @returns A new send key\n   */\n  abstract makeSendKey(keyMaterial: Uint8Array): Promise<SymmetricCryptoKey>;\n  /**\n   * Clears all of the user's keys from storage\n   * @param userId The user's Id\n   */\n  abstract clearKeys(userId?: string): Promise<any>;\n  /**\n   * RSA encrypts a value.\n   * @param data The data to encrypt\n   * @param publicKey The public key to use for encryption, if not provided, the user's public key will be used\n   * @returns The encrypted data\n   * @throws If the given publicKey is a null-ish value.\n   */\n  abstract rsaEncrypt(data: Uint8Array, publicKey: Uint8Array): Promise<EncString>;\n  /**\n   * Decrypts a value using RSA.\n   * @param encValue The encrypted value to decrypt\n   * @param privateKey The private key to use for decryption\n   * @returns The decrypted value\n   * @throws If the given privateKey is a null-ish value.\n   */\n  abstract rsaDecrypt(encValue: string, privateKey: Uint8Array): Promise<Uint8Array>;\n  abstract randomNumber(min: number, max: number): Promise<number>;\n  /**\n   * Generates a new cipher key\n   * @returns A new cipher key\n   */\n  abstract makeCipherKey(): Promise<CipherKey>;\n\n  /**\n   * Initialize all necessary crypto keys needed for a new account.\n   * Warning! This completely replaces any existing keys!\n   * @returns The user's newly created  public key, private key, and encrypted private key\n   *\n   * @throws An error if there is no user currently active.\n   */\n  abstract initAccount(): Promise<{\n    userKey: UserKey;\n    publicKey: string;\n    privateKey: EncString;\n  }>;\n  /**\n   * Previously, the master key was used for any additional key like the biometrics or pin key.\n   * We have switched to using the user key for these purposes. This method is for clearing the state\n   * of the older keys on logout or post migration.\n   * @param keySuffix The desired type of key to clear\n   * @param userId The desired user\n   */\n  abstract clearDeprecatedKeys(keySuffix: KeySuffixOptions, userId?: string): Promise<void>;\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encrypt\n   */\n  abstract encrypt(plainValue: string | Uint8Array, key?: SymmetricCryptoKey): Promise<EncString>;\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encryptToBytes\n   */\n  abstract encryptToBytes(\n    plainValue: Uint8Array,\n    key?: SymmetricCryptoKey,\n  ): Promise<EncArrayBuffer>;\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  abstract decryptToBytes(encString: EncString, key?: SymmetricCryptoKey): Promise<Uint8Array>;\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToUtf8\n   */\n  abstract decryptToUtf8(encString: EncString, key?: SymmetricCryptoKey): Promise<string>;\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  abstract decryptFromBytes(\n    encBuffer: EncArrayBuffer,\n    key: SymmetricCryptoKey,\n  ): Promise<Uint8Array>;\n\n  /**\n   * Retrieves all the keys needed for decrypting Ciphers\n   * @param userId The user id of the keys to retrieve or null if the user is not Unlocked\n   * @param legacySupport `true` if you need to support retrieving the legacy version of the users key, `false` if\n   * you do not need legacy support. Use `true` by necessity only. Defaults to `false`. Legacy support is for users\n   * that may not have updated to use the new {@link UserKey} yet.\n   *\n   * @throws If an invalid user id is passed in.\n   */\n  abstract cipherDecryptionKeys$(\n    userId: UserId,\n    legacySupport?: boolean,\n  ): Observable<CipherDecryptionKeys | null>;\n\n  /**\n   * Gets an observable of org keys for the given user.\n   * @param userId The user id of the user of which to get the keys for.\n   * @return An observable stream of the users organization keys if they are unlocked, or null if the user is not unlocked.\n   * The observable will stay alive through locks/unlocks.\n   *\n   * @throws If an invalid user id is passed in.\n   */\n  abstract orgKeys$(userId: UserId): Observable<Record<OrganizationId, OrgKey> | null>;\n\n  /**\n   * Gets an observable stream of the users public key. If the user is does not have\n   * a {@link UserKey} or {@link UserPrivateKey} that is decryptable, this will emit null.\n   *\n   * @param userId The user id of the user of which to get the public key for.\n   *\n   * @throws If an invalid user id is passed in.\n   */\n  abstract userPublicKey$(userId: UserId): Observable<UserPublicKey>;\n\n  /**\n   * Validates that a userkey is correct for a given user\n   * @param key The key to validate\n   * @param userId The user id for the key\n   */\n  abstract validateUserKey(key: UserKey, userId: UserId): Promise<boolean>;\n}\n","import { EncryptedOrganizationKeyData } from \"../../../admin-console/models/data/encrypted-organization-key.data\";\nimport { OrganizationId } from \"../../../types/guid\";\nimport { CRYPTO_DISK, UserKeyDefinition } from \"../../state\";\n\nexport const USER_ENCRYPTED_ORGANIZATION_KEYS = UserKeyDefinition.record<\n  EncryptedOrganizationKeyData,\n  OrganizationId\n>(CRYPTO_DISK, \"organizationKeys\", {\n  deserializer: (obj) => obj,\n  clearOn: [\"logout\"],\n});\n","import { ProviderId } from \"../../../types/guid\";\nimport { EncryptedString } from \"../../models/domain/enc-string\";\nimport { CRYPTO_DISK, UserKeyDefinition } from \"../../state\";\n\nexport const USER_ENCRYPTED_PROVIDER_KEYS = UserKeyDefinition.record<EncryptedString, ProviderId>(\n  CRYPTO_DISK,\n  \"providerKeys\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [\"logout\"],\n  },\n);\n","import { UserKey } from \"../../../types/key\";\nimport { EncryptedString } from \"../../models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../../models/domain/symmetric-crypto-key\";\nimport { CRYPTO_DISK, CRYPTO_MEMORY, UserKeyDefinition } from \"../../state\";\n\nexport const USER_EVER_HAD_USER_KEY = new UserKeyDefinition<boolean>(\n  CRYPTO_DISK,\n  \"everHadUserKey\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [\"logout\"],\n  },\n);\n\nexport const USER_ENCRYPTED_PRIVATE_KEY = new UserKeyDefinition<EncryptedString>(\n  CRYPTO_DISK,\n  \"privateKey\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [\"logout\"],\n  },\n);\n\nexport const USER_KEY = new UserKeyDefinition<UserKey>(CRYPTO_MEMORY, \"userKey\", {\n  deserializer: (obj) => SymmetricCryptoKey.fromJSON(obj) as UserKey,\n  clearOn: [\"logout\", \"lock\"],\n});\n","import * as bigInt from \"big-integer\";\nimport {\n  NEVER,\n  Observable,\n  combineLatest,\n  firstValueFrom,\n  forkJoin,\n  map,\n  of,\n  switchMap,\n} from \"rxjs\";\n\nimport { PinServiceAbstraction } from \"../../../../auth/src/common/abstractions\";\nimport { EncryptedOrganizationKeyData } from \"../../admin-console/models/data/encrypted-organization-key.data\";\nimport { BaseEncryptedOrganizationKey } from \"../../admin-console/models/domain/encrypted-organization-key\";\nimport { ProfileOrganizationResponse } from \"../../admin-console/models/response/profile-organization.response\";\nimport { ProfileProviderOrganizationResponse } from \"../../admin-console/models/response/profile-provider-organization.response\";\nimport { ProfileProviderResponse } from \"../../admin-console/models/response/profile-provider.response\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { KdfConfigService } from \"../../auth/abstractions/kdf-config.service\";\nimport { InternalMasterPasswordServiceAbstraction } from \"../../auth/abstractions/master-password.service.abstraction\";\nimport { KdfConfig } from \"../../auth/models/domain/kdf-config\";\nimport { Utils } from \"../../platform/misc/utils\";\nimport { VAULT_TIMEOUT } from \"../../services/vault-timeout/vault-timeout-settings.state\";\nimport { CsprngArray } from \"../../types/csprng\";\nimport { OrganizationId, ProviderId, UserId } from \"../../types/guid\";\nimport {\n  OrgKey,\n  UserKey,\n  MasterKey,\n  ProviderKey,\n  CipherKey,\n  UserPrivateKey,\n  UserPublicKey,\n} from \"../../types/key\";\nimport { VaultTimeoutStringType } from \"../../types/vault-timeout.type\";\nimport { CryptoFunctionService } from \"../abstractions/crypto-function.service\";\nimport {\n  CipherDecryptionKeys,\n  CryptoService as CryptoServiceAbstraction,\n  UserPrivateKeyDecryptionFailedError,\n} from \"../abstractions/crypto.service\";\nimport { EncryptService } from \"../abstractions/encrypt.service\";\nimport { KeyGenerationService } from \"../abstractions/key-generation.service\";\nimport { LogService } from \"../abstractions/log.service\";\nimport { PlatformUtilsService } from \"../abstractions/platform-utils.service\";\nimport { StateService } from \"../abstractions/state.service\";\nimport { KeySuffixOptions, HashPurpose, EncryptionType } from \"../enums\";\nimport { convertValues } from \"../misc/convert-values\";\nimport { EFFLongWordList } from \"../misc/wordlist\";\nimport { EncArrayBuffer } from \"../models/domain/enc-array-buffer\";\nimport { EncString, EncryptedString } from \"../models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"../models/domain/symmetric-crypto-key\";\nimport { ActiveUserState, StateProvider } from \"../state\";\n\nimport { USER_ENCRYPTED_ORGANIZATION_KEYS } from \"./key-state/org-keys.state\";\nimport { USER_ENCRYPTED_PROVIDER_KEYS } from \"./key-state/provider-keys.state\";\nimport {\n  USER_ENCRYPTED_PRIVATE_KEY,\n  USER_EVER_HAD_USER_KEY,\n  USER_KEY,\n} from \"./key-state/user-key.state\";\n\nexport class CryptoService implements CryptoServiceAbstraction {\n  private readonly activeUserEverHadUserKey: ActiveUserState<boolean>;\n\n  readonly everHadUserKey$: Observable<boolean>;\n\n  readonly activeUserOrgKeys$: Observable<Record<OrganizationId, OrgKey>>;\n\n  constructor(\n    protected pinService: PinServiceAbstraction,\n    protected masterPasswordService: InternalMasterPasswordServiceAbstraction,\n    protected keyGenerationService: KeyGenerationService,\n    protected cryptoFunctionService: CryptoFunctionService,\n    protected encryptService: EncryptService,\n    protected platformUtilService: PlatformUtilsService,\n    protected logService: LogService,\n    protected stateService: StateService,\n    protected accountService: AccountService,\n    protected stateProvider: StateProvider,\n    protected kdfConfigService: KdfConfigService,\n  ) {\n    // User Key\n    this.activeUserEverHadUserKey = stateProvider.getActive(USER_EVER_HAD_USER_KEY);\n    this.everHadUserKey$ = this.activeUserEverHadUserKey.state$.pipe(map((x) => x ?? false));\n\n    this.activeUserOrgKeys$ = this.stateProvider.activeUserId$.pipe(\n      switchMap((userId) => (userId != null ? this.orgKeys$(userId) : NEVER)),\n    );\n  }\n\n  async setUserKey(key: UserKey, userId: UserId): Promise<void> {\n    if (key == null) {\n      throw new Error(\"No key provided. Lock the user to clear the key\");\n    }\n    if (userId == null) {\n      throw new Error(\"No userId provided.\");\n    }\n\n    // Set userId to ensure we have one for the account status update\n    await this.stateProvider.setUserState(USER_KEY, key, userId);\n    await this.stateProvider.setUserState(USER_EVER_HAD_USER_KEY, true, userId);\n\n    await this.storeAdditionalKeys(key, userId);\n  }\n\n  async setUserKeys(\n    userKey: UserKey,\n    encPrivateKey: EncryptedString,\n    userId: UserId,\n  ): Promise<void> {\n    if (userKey == null) {\n      throw new Error(\"No userKey provided. Lock the user to clear the key\");\n    }\n    if (encPrivateKey == null) {\n      throw new Error(\"No encPrivateKey provided.\");\n    }\n    if (userId == null) {\n      throw new Error(\"No userId provided.\");\n    }\n\n    const decryptedPrivateKey = await this.decryptPrivateKey(encPrivateKey, userKey);\n    if (decryptedPrivateKey == null) {\n      throw new UserPrivateKeyDecryptionFailedError();\n    }\n\n    await this.setUserKey(userKey, userId);\n    await this.setPrivateKey(encPrivateKey, userId);\n  }\n\n  async refreshAdditionalKeys(): Promise<void> {\n    const activeUserId = await firstValueFrom(this.stateProvider.activeUserId$);\n\n    if (activeUserId == null) {\n      throw new Error(\"Can only refresh keys while there is an active user.\");\n    }\n\n    const key = await this.getUserKey(activeUserId);\n    await this.setUserKey(key, activeUserId);\n  }\n\n  getInMemoryUserKeyFor$(userId: UserId): Observable<UserKey> {\n    return this.stateProvider.getUserState$(USER_KEY, userId);\n  }\n\n  async getUserKey(userId?: UserId): Promise<UserKey> {\n    const userKey = await firstValueFrom(this.stateProvider.getUserState$(USER_KEY, userId));\n    return userKey;\n  }\n\n  async isLegacyUser(masterKey?: MasterKey, userId?: UserId): Promise<boolean> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    masterKey ??= await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n\n    return await this.validateUserKey(masterKey as unknown as UserKey, userId);\n  }\n\n  // TODO: legacy support for user key is no longer needed since we require users to migrate on login\n  async getUserKeyWithLegacySupport(userId?: UserId): Promise<UserKey> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n\n    const userKey = await this.getUserKey(userId);\n    if (userKey) {\n      return userKey;\n    }\n\n    // Legacy support: encryption used to be done with the master key (derived from master password).\n    // Users who have not migrated will have a null user key and must use the master key instead.\n    const masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n    return masterKey as unknown as UserKey;\n  }\n\n  async getUserKeyFromStorage(keySuffix: KeySuffixOptions, userId?: UserId): Promise<UserKey> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    const userKey = await this.getKeyFromStorage(keySuffix, userId);\n    if (userKey) {\n      if (!(await this.validateUserKey(userKey, userId))) {\n        this.logService.warning(\"Invalid key, throwing away stored keys\");\n        await this.clearAllStoredUserKeys(userId);\n      }\n      return userKey;\n    }\n  }\n\n  async hasUserKey(userId?: UserId): Promise<boolean> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    if (userId == null) {\n      return false;\n    }\n    return await this.hasUserKeyInMemory(userId);\n  }\n\n  async hasUserKeyInMemory(userId?: UserId): Promise<boolean> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    if (userId == null) {\n      return false;\n    }\n\n    return (await firstValueFrom(this.stateProvider.getUserState$(USER_KEY, userId))) != null;\n  }\n\n  async hasUserKeyStored(keySuffix: KeySuffixOptions, userId?: UserId): Promise<boolean> {\n    return (await this.getKeyFromStorage(keySuffix, userId)) != null;\n  }\n\n  async makeUserKey(masterKey: MasterKey): Promise<[UserKey, EncString]> {\n    if (!masterKey) {\n      const userId = await firstValueFrom(this.stateProvider.activeUserId$);\n      masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n    }\n    if (masterKey == null) {\n      throw new Error(\"No Master Key found.\");\n    }\n\n    const newUserKey = await this.keyGenerationService.createKey(512);\n    return this.buildProtectedSymmetricKey(masterKey, newUserKey.key);\n  }\n\n  /**\n   * Clears the user key. Clears all stored versions of the user keys as well, such as the biometrics key\n   * @param userId The desired user\n   */\n  private async clearUserKey(userId: UserId): Promise<void> {\n    if (userId == null) {\n      // nothing to do\n      return;\n    }\n    // Set userId to ensure we have one for the account status update\n    await this.stateProvider.setUserState(USER_KEY, null, userId);\n    await this.clearAllStoredUserKeys(userId);\n  }\n\n  async clearStoredUserKey(keySuffix: KeySuffixOptions, userId?: UserId): Promise<void> {\n    if (keySuffix === KeySuffixOptions.Auto) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.clearDeprecatedKeys(KeySuffixOptions.Auto, userId);\n    }\n    if (keySuffix === KeySuffixOptions.Pin) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.pinService.clearPinKeyEncryptedUserKeyEphemeral(userId);\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      this.clearDeprecatedKeys(KeySuffixOptions.Pin, userId);\n    }\n  }\n\n  async setMasterKeyEncryptedUserKey(userKeyMasterKey: string, userId: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    await this.masterPasswordService.setMasterKeyEncryptedUserKey(\n      new EncString(userKeyMasterKey),\n      userId,\n    );\n  }\n\n  // TODO: Move to MasterPasswordService\n  async getOrDeriveMasterKey(password: string, userId?: UserId) {\n    const [resolvedUserId, email] = await firstValueFrom(\n      combineLatest([this.accountService.activeAccount$, this.accountService.accounts$]).pipe(\n        map(([activeAccount, accounts]) => {\n          userId ??= activeAccount?.id;\n          return [userId, accounts[userId]?.email];\n        }),\n      ),\n    );\n    let masterKey = await firstValueFrom(this.masterPasswordService.masterKey$(resolvedUserId));\n    return (masterKey ||= await this.makeMasterKey(\n      password,\n      email,\n      await this.kdfConfigService.getKdfConfig(),\n    ));\n  }\n\n  /**\n   * Derive a master key from a password and email.\n   *\n   * @remarks\n   * Does not validate the kdf config to ensure it satisfies the minimum requirements for the given kdf type.\n   * TODO: Move to MasterPasswordService\n   */\n  async makeMasterKey(password: string, email: string, KdfConfig: KdfConfig): Promise<MasterKey> {\n    return (await this.keyGenerationService.deriveKeyFromPassword(\n      password,\n      email,\n      KdfConfig,\n    )) as MasterKey;\n  }\n\n  async encryptUserKeyWithMasterKey(\n    masterKey: MasterKey,\n    userKey?: UserKey,\n  ): Promise<[UserKey, EncString]> {\n    userKey ||= await this.getUserKey();\n    return await this.buildProtectedSymmetricKey(masterKey, userKey.key);\n  }\n\n  // TODO: move to MasterPasswordService\n  async hashMasterKey(\n    password: string,\n    key: MasterKey,\n    hashPurpose?: HashPurpose,\n  ): Promise<string> {\n    if (!key) {\n      const userId = await firstValueFrom(this.stateProvider.activeUserId$);\n      key = await firstValueFrom(this.masterPasswordService.masterKey$(userId));\n    }\n\n    if (password == null || key == null) {\n      throw new Error(\"Invalid parameters.\");\n    }\n\n    const iterations = hashPurpose === HashPurpose.LocalAuthorization ? 2 : 1;\n    const hash = await this.cryptoFunctionService.pbkdf2(key.key, password, \"sha256\", iterations);\n    return Utils.fromBufferToB64(hash);\n  }\n\n  // TODO: move to MasterPasswordService\n  async compareAndUpdateKeyHash(masterPassword: string, masterKey: MasterKey): Promise<boolean> {\n    const userId = await firstValueFrom(this.stateProvider.activeUserId$);\n    const storedPasswordHash = await firstValueFrom(\n      this.masterPasswordService.masterKeyHash$(userId),\n    );\n    if (masterPassword != null && storedPasswordHash != null) {\n      const localKeyHash = await this.hashMasterKey(\n        masterPassword,\n        masterKey,\n        HashPurpose.LocalAuthorization,\n      );\n      if (localKeyHash != null && storedPasswordHash === localKeyHash) {\n        return true;\n      }\n\n      // TODO: remove serverKeyHash check in 1-2 releases after everyone's keyHash has been updated\n      const serverKeyHash = await this.hashMasterKey(\n        masterPassword,\n        masterKey,\n        HashPurpose.ServerAuthorization,\n      );\n      if (serverKeyHash != null && storedPasswordHash === serverKeyHash) {\n        await this.masterPasswordService.setMasterKeyHash(localKeyHash, userId);\n        return true;\n      }\n    }\n\n    return false;\n  }\n\n  async setOrgKeys(\n    orgs: ProfileOrganizationResponse[],\n    providerOrgs: ProfileProviderOrganizationResponse[],\n    userId: UserId,\n  ): Promise<void> {\n    await this.stateProvider.getUser(userId, USER_ENCRYPTED_ORGANIZATION_KEYS).update(() => {\n      const encOrgKeyData: { [orgId: string]: EncryptedOrganizationKeyData } = {};\n\n      orgs.forEach((org) => {\n        encOrgKeyData[org.id] = {\n          type: \"organization\",\n          key: org.key,\n        };\n      });\n\n      providerOrgs.forEach((org) => {\n        encOrgKeyData[org.id] = {\n          type: \"provider\",\n          providerId: org.providerId,\n          key: org.key,\n        };\n      });\n\n      return encOrgKeyData;\n    });\n  }\n\n  async getOrgKey(orgId: OrganizationId): Promise<OrgKey> {\n    const activeUserId = await firstValueFrom(this.stateProvider.activeUserId$);\n    if (activeUserId == null) {\n      throw new Error(\"A user must be active to retrieve an org key\");\n    }\n    const orgKeys = await firstValueFrom(this.orgKeys$(activeUserId));\n    return orgKeys[orgId];\n  }\n\n  async makeDataEncKey<T extends OrgKey | UserKey>(\n    key: T,\n  ): Promise<[SymmetricCryptoKey, EncString]> {\n    if (key == null) {\n      throw new Error(\"No key provided\");\n    }\n\n    const newSymKey = await this.keyGenerationService.createKey(512);\n    return this.buildProtectedSymmetricKey(key, newSymKey.key);\n  }\n\n  private async clearOrgKeys(userId: UserId): Promise<void> {\n    if (userId == null) {\n      // nothing to do\n      return;\n    }\n    await this.stateProvider.setUserState(USER_ENCRYPTED_ORGANIZATION_KEYS, null, userId);\n  }\n\n  async setProviderKeys(providers: ProfileProviderResponse[], userId: UserId): Promise<void> {\n    await this.stateProvider.getUser(userId, USER_ENCRYPTED_PROVIDER_KEYS).update(() => {\n      const encProviderKeys: { [providerId: ProviderId]: EncryptedString } = {};\n\n      providers.forEach((provider) => {\n        encProviderKeys[provider.id as ProviderId] = provider.key as EncryptedString;\n      });\n\n      return encProviderKeys;\n    });\n  }\n\n  // TODO: Deprecate in favor of observable\n  async getProviderKey(providerId: ProviderId): Promise<ProviderKey> {\n    if (providerId == null) {\n      return null;\n    }\n\n    const activeUserId = await firstValueFrom(this.stateProvider.activeUserId$);\n    const providerKeys = await firstValueFrom(this.providerKeys$(activeUserId));\n\n    return providerKeys[providerId] ?? null;\n  }\n\n  private async clearProviderKeys(userId: UserId): Promise<void> {\n    if (userId == null) {\n      // nothing to do\n      return;\n    }\n    await this.stateProvider.setUserState(USER_ENCRYPTED_PROVIDER_KEYS, null, userId);\n  }\n\n  // TODO: Make userId required\n  async makeOrgKey<T extends OrgKey | ProviderKey>(userId?: UserId): Promise<[EncString, T]> {\n    const shareKey = await this.keyGenerationService.createKey(512);\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n    const publicKey = await firstValueFrom(this.userPublicKey$(userId));\n    const encShareKey = await this.rsaEncrypt(shareKey.key, publicKey);\n    return [encShareKey, shareKey as T];\n  }\n\n  async setPrivateKey(encPrivateKey: EncryptedString, userId: UserId): Promise<void> {\n    if (encPrivateKey == null) {\n      return;\n    }\n\n    await this.stateProvider\n      .getUser(userId, USER_ENCRYPTED_PRIVATE_KEY)\n      .update(() => encPrivateKey);\n  }\n\n  async getPrivateKey(): Promise<Uint8Array> {\n    const activeUserId = await firstValueFrom(this.stateProvider.activeUserId$);\n\n    if (activeUserId == null) {\n      throw new Error(\"User must be active while attempting to retrieve private key.\");\n    }\n\n    return await firstValueFrom(this.userPrivateKey$(activeUserId));\n  }\n\n  // TODO: Make public key required\n  async getFingerprint(fingerprintMaterial: string, publicKey?: Uint8Array): Promise<string[]> {\n    if (publicKey == null) {\n      const activeUserId = await firstValueFrom(this.stateProvider.activeUserId$);\n      publicKey = await firstValueFrom(this.userPublicKey$(activeUserId));\n    }\n\n    if (publicKey === null) {\n      throw new Error(\"No public key available.\");\n    }\n    const keyFingerprint = await this.cryptoFunctionService.hash(publicKey, \"sha256\");\n    const userFingerprint = await this.cryptoFunctionService.hkdfExpand(\n      keyFingerprint,\n      fingerprintMaterial,\n      32,\n      \"sha256\",\n    );\n    return this.hashPhrase(userFingerprint);\n  }\n\n  async makeKeyPair(key: SymmetricCryptoKey): Promise<[string, EncString]> {\n    if (key == null) {\n      throw new Error(\"'key' is a required parameter and must be non-null.\");\n    }\n\n    const keyPair = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    const publicB64 = Utils.fromBufferToB64(keyPair[0]);\n    const privateEnc = await this.encryptService.encrypt(keyPair[1], key);\n    return [publicB64, privateEnc];\n  }\n\n  /**\n   * Clears the user's key pair\n   * @param userId The desired user\n   */\n  private async clearKeyPair(userId: UserId): Promise<void[]> {\n    if (userId == null) {\n      // nothing to do\n      return;\n    }\n\n    await this.stateProvider.setUserState(USER_ENCRYPTED_PRIVATE_KEY, null, userId);\n  }\n\n  async clearPinKeys(userId?: UserId): Promise<void> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n\n    if (userId == null) {\n      throw new Error(\"Cannot clear PIN keys, no user Id resolved.\");\n    }\n\n    await this.pinService.clearPinKeyEncryptedUserKeyPersistent(userId);\n    await this.pinService.clearPinKeyEncryptedUserKeyEphemeral(userId);\n    await this.pinService.clearUserKeyEncryptedPin(userId);\n    await this.clearDeprecatedKeys(KeySuffixOptions.Pin, userId);\n  }\n\n  async makeSendKey(keyMaterial: CsprngArray): Promise<SymmetricCryptoKey> {\n    return await this.keyGenerationService.deriveKeyFromMaterial(\n      keyMaterial,\n      \"bitwarden-send\",\n      \"send\",\n    );\n  }\n\n  async makeCipherKey(): Promise<CipherKey> {\n    return (await this.keyGenerationService.createKey(512)) as CipherKey;\n  }\n\n  async clearKeys(userId?: UserId): Promise<any> {\n    userId ??= await firstValueFrom(this.stateProvider.activeUserId$);\n\n    if (userId == null) {\n      throw new Error(\"Cannot clear keys, no user Id resolved.\");\n    }\n\n    await this.masterPasswordService.clearMasterKeyHash(userId);\n    await this.clearUserKey(userId);\n    await this.clearOrgKeys(userId);\n    await this.clearProviderKeys(userId);\n    await this.clearKeyPair(userId);\n    await this.clearPinKeys(userId);\n    await this.stateProvider.setUserState(USER_EVER_HAD_USER_KEY, null, userId);\n  }\n\n  async rsaEncrypt(data: Uint8Array, publicKey: Uint8Array): Promise<EncString> {\n    if (publicKey == null) {\n      throw new Error(\"'publicKey' is a required parameter and must be non-null\");\n    }\n\n    const encBytes = await this.cryptoFunctionService.rsaEncrypt(data, publicKey, \"sha1\");\n    return new EncString(EncryptionType.Rsa2048_OaepSha1_B64, Utils.fromBufferToB64(encBytes));\n  }\n\n  async rsaDecrypt(encValue: string, privateKey: Uint8Array): Promise<Uint8Array> {\n    if (privateKey == null) {\n      throw new Error(\"'privateKey' is a required parameter and must be non-null\");\n    }\n\n    const headerPieces = encValue.split(\".\");\n    let encType: EncryptionType = null;\n    let encPieces: string[];\n\n    if (headerPieces.length === 1) {\n      encType = EncryptionType.Rsa2048_OaepSha256_B64;\n      encPieces = [headerPieces[0]];\n    } else if (headerPieces.length === 2) {\n      try {\n        encType = parseInt(headerPieces[0], null);\n        encPieces = headerPieces[1].split(\"|\");\n      } catch (e) {\n        this.logService.error(e);\n      }\n    }\n\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64: // HmacSha256 types are deprecated\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    if (encPieces == null || encPieces.length <= 0) {\n      throw new Error(\"encPieces unavailable.\");\n    }\n\n    const data = Utils.fromB64ToArray(encPieces[0]);\n\n    let alg: \"sha1\" | \"sha256\" = \"sha1\";\n    switch (encType) {\n      case EncryptionType.Rsa2048_OaepSha256_B64:\n      case EncryptionType.Rsa2048_OaepSha256_HmacSha256_B64:\n        alg = \"sha256\";\n        break;\n      case EncryptionType.Rsa2048_OaepSha1_B64:\n      case EncryptionType.Rsa2048_OaepSha1_HmacSha256_B64:\n        break;\n      default:\n        throw new Error(\"encType unavailable.\");\n    }\n\n    return this.cryptoFunctionService.rsaDecrypt(data, privateKey, alg);\n  }\n\n  // EFForg/OpenWireless\n  // ref https://github.com/EFForg/OpenWireless/blob/master/app/js/diceware.js\n  async randomNumber(min: number, max: number): Promise<number> {\n    let rval = 0;\n    const range = max - min + 1;\n    const bitsNeeded = Math.ceil(Math.log2(range));\n    if (bitsNeeded > 53) {\n      throw new Error(\"We cannot generate numbers larger than 53 bits.\");\n    }\n\n    const bytesNeeded = Math.ceil(bitsNeeded / 8);\n    const mask = Math.pow(2, bitsNeeded) - 1;\n    // 7776 -> (2^13 = 8192) -1 == 8191 or 0x00001111 11111111\n\n    // Fill a byte array with N random numbers\n    const byteArray = new Uint8Array(await this.cryptoFunctionService.randomBytes(bytesNeeded));\n\n    let p = (bytesNeeded - 1) * 8;\n    for (let i = 0; i < bytesNeeded; i++) {\n      rval += byteArray[i] * Math.pow(2, p);\n      p -= 8;\n    }\n\n    // Use & to apply the mask and reduce the number of recursive lookups\n    rval = rval & mask;\n\n    if (rval >= range) {\n      // Integer out of acceptable range\n      return this.randomNumber(min, max);\n    }\n\n    // Return an integer that falls within the range\n    return min + rval;\n  }\n\n  // ---HELPERS---\n  async validateUserKey(key: UserKey, userId: UserId): Promise<boolean> {\n    if (!key) {\n      return false;\n    }\n\n    try {\n      const encPrivateKey = await firstValueFrom(\n        this.stateProvider.getUser(userId, USER_ENCRYPTED_PRIVATE_KEY).state$,\n      );\n\n      if (encPrivateKey == null) {\n        return false;\n      }\n\n      // Can decrypt private key\n      const privateKey = await this.decryptPrivateKey(encPrivateKey, key);\n\n      if (privateKey == null) {\n        // failed to decrypt\n        return false;\n      }\n\n      // Can successfully derive public key\n      const publicKey = await this.derivePublicKey(privateKey);\n\n      if (publicKey == null) {\n        // failed to decrypt\n        return false;\n      }\n    } catch (e) {\n      return false;\n    }\n\n    return true;\n  }\n\n  /**\n   * Initialize all necessary crypto keys needed for a new account.\n   * Warning! This completely replaces any existing keys!\n   */\n  async initAccount(): Promise<{\n    userKey: UserKey;\n    publicKey: string;\n    privateKey: EncString;\n  }> {\n    const activeUserId = await firstValueFrom(this.stateProvider.activeUserId$);\n\n    if (activeUserId == null) {\n      throw new Error(\"Cannot initilize an account if one is not active.\");\n    }\n\n    // Verify user key doesn't exist\n    const existingUserKey = await this.getUserKey(activeUserId);\n\n    if (existingUserKey != null) {\n      this.logService.error(\"Tried to initialize account with existing user key.\");\n      throw new Error(\"Cannot initialize account, keys already exist.\");\n    }\n\n    const userKey = (await this.keyGenerationService.createKey(512)) as UserKey;\n    const [publicKey, privateKey] = await this.makeKeyPair(userKey);\n    await this.setUserKey(userKey, activeUserId);\n    await this.stateProvider\n      .getUser(activeUserId, USER_ENCRYPTED_PRIVATE_KEY)\n      .update(() => privateKey.encryptedString);\n\n    return {\n      userKey,\n      publicKey,\n      privateKey,\n    };\n  }\n\n  /**\n   * Generates any additional keys if needed. Additional keys are\n   * keys such as biometrics, auto, and pin keys.\n   * Useful to make sure other keys stay in sync when the user key\n   * has been rotated.\n   * @param key The user key\n   * @param userId The desired user\n   */\n  protected async storeAdditionalKeys(key: UserKey, userId: UserId) {\n    const storeAuto = await this.shouldStoreKey(KeySuffixOptions.Auto, userId);\n    if (storeAuto) {\n      await this.stateService.setUserKeyAutoUnlock(key.keyB64, { userId: userId });\n    } else {\n      await this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n    }\n    await this.clearDeprecatedKeys(KeySuffixOptions.Auto, userId);\n\n    const storePin = await this.shouldStoreKey(KeySuffixOptions.Pin, userId);\n    if (storePin) {\n      // Decrypt userKeyEncryptedPin with user key\n      const pin = await this.encryptService.decryptToUtf8(\n        await this.pinService.getUserKeyEncryptedPin(userId),\n        key,\n      );\n\n      const pinKeyEncryptedUserKey = await this.pinService.createPinKeyEncryptedUserKey(\n        pin,\n        key,\n        userId,\n      );\n      const noPreExistingPersistentKey =\n        (await this.pinService.getPinKeyEncryptedUserKeyPersistent(userId)) == null;\n\n      await this.pinService.storePinKeyEncryptedUserKey(\n        pinKeyEncryptedUserKey,\n        noPreExistingPersistentKey,\n        userId,\n      );\n      // We can't always clear deprecated keys because the pin is only\n      // migrated once used to unlock\n      await this.clearDeprecatedKeys(KeySuffixOptions.Pin, userId);\n    } else {\n      await this.pinService.clearPinKeyEncryptedUserKeyPersistent(userId);\n      await this.pinService.clearPinKeyEncryptedUserKeyEphemeral(userId);\n    }\n  }\n\n  protected async shouldStoreKey(keySuffix: KeySuffixOptions, userId?: UserId) {\n    let shouldStoreKey = false;\n    switch (keySuffix) {\n      case KeySuffixOptions.Auto: {\n        // TODO: Sharing the UserKeyDefinition is temporary to get around a circ dep issue between\n        // the VaultTimeoutSettingsSvc and this service.\n        // This should be fixed as part of the PM-7082 - Auto Key Service work.\n        const vaultTimeout = await firstValueFrom(\n          this.stateProvider.getUserState$(VAULT_TIMEOUT, userId),\n        );\n\n        shouldStoreKey = vaultTimeout == VaultTimeoutStringType.Never;\n        break;\n      }\n      case KeySuffixOptions.Pin: {\n        const userKeyEncryptedPin = await this.pinService.getUserKeyEncryptedPin(userId);\n        shouldStoreKey = !!userKeyEncryptedPin;\n        break;\n      }\n    }\n    return shouldStoreKey;\n  }\n\n  protected async getKeyFromStorage(\n    keySuffix: KeySuffixOptions,\n    userId?: UserId,\n  ): Promise<UserKey> {\n    if (keySuffix === KeySuffixOptions.Auto) {\n      const userKey = await this.stateService.getUserKeyAutoUnlock({ userId: userId });\n      if (userKey) {\n        return new SymmetricCryptoKey(Utils.fromB64ToArray(userKey)) as UserKey;\n      }\n    }\n    return null;\n  }\n\n  protected async clearAllStoredUserKeys(userId?: UserId): Promise<void> {\n    await this.stateService.setUserKeyAutoUnlock(null, { userId: userId });\n    await this.pinService.clearPinKeyEncryptedUserKeyEphemeral(userId);\n  }\n\n  private async hashPhrase(hash: Uint8Array, minimumEntropy = 64) {\n    const entropyPerWord = Math.log(EFFLongWordList.length) / Math.log(2);\n    let numWords = Math.ceil(minimumEntropy / entropyPerWord);\n\n    const hashArr = Array.from(new Uint8Array(hash));\n    const entropyAvailable = hashArr.length * 4;\n    if (numWords * entropyPerWord > entropyAvailable) {\n      throw new Error(\"Output entropy of hash function is too small\");\n    }\n\n    const phrase: string[] = [];\n    let hashNumber = bigInt.fromArray(hashArr, 256);\n    while (numWords--) {\n      const remainder = hashNumber.mod(EFFLongWordList.length);\n      hashNumber = hashNumber.divide(EFFLongWordList.length);\n      phrase.push(EFFLongWordList[remainder as any]);\n    }\n    return phrase;\n  }\n\n  private async buildProtectedSymmetricKey<T extends SymmetricCryptoKey>(\n    encryptionKey: SymmetricCryptoKey,\n    newSymKey: Uint8Array,\n  ): Promise<[T, EncString]> {\n    let protectedSymKey: EncString = null;\n    if (encryptionKey.key.byteLength === 32) {\n      const stretchedEncryptionKey = await this.keyGenerationService.stretchKey(encryptionKey);\n      protectedSymKey = await this.encryptService.encrypt(newSymKey, stretchedEncryptionKey);\n    } else if (encryptionKey.key.byteLength === 64) {\n      protectedSymKey = await this.encryptService.encrypt(newSymKey, encryptionKey);\n    } else {\n      throw new Error(\"Invalid key size.\");\n    }\n    return [new SymmetricCryptoKey(newSymKey) as T, protectedSymKey];\n  }\n\n  // --LEGACY METHODS--\n  // We previously used the master key for additional keys, but now we use the user key.\n  // These methods support migrating the old keys to the new ones.\n  // TODO: Remove after 2023.10 release (https://bitwarden.atlassian.net/browse/PM-3475)\n\n  async clearDeprecatedKeys(keySuffix: KeySuffixOptions, userId?: UserId) {\n    if (keySuffix === KeySuffixOptions.Auto) {\n      await this.stateService.setCryptoMasterKeyAuto(null, { userId: userId });\n    } else if (keySuffix === KeySuffixOptions.Pin) {\n      await this.pinService.clearOldPinKeyEncryptedMasterKey(userId);\n    }\n  }\n\n  // --DEPRECATED METHODS--\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encrypt\n   */\n  async encrypt(plainValue: string | Uint8Array, key?: SymmetricCryptoKey): Promise<EncString> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return await this.encryptService.encrypt(plainValue, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.encryptToBytes\n   */\n  async encryptToBytes(plainValue: Uint8Array, key?: SymmetricCryptoKey): Promise<EncArrayBuffer> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return this.encryptService.encryptToBytes(plainValue, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  async decryptToBytes(encString: EncString, key?: SymmetricCryptoKey): Promise<Uint8Array> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return this.encryptService.decryptToBytes(encString, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToUtf8\n   */\n  async decryptToUtf8(encString: EncString, key?: SymmetricCryptoKey): Promise<string> {\n    key ||= await this.getUserKeyWithLegacySupport();\n    return await this.encryptService.decryptToUtf8(encString, key);\n  }\n\n  /**\n   * @deprecated July 25 2022: Get the key you need from CryptoService (getKeyForUserEncryption or getOrgKey)\n   * and then call encryptService.decryptToBytes\n   */\n  async decryptFromBytes(encBuffer: EncArrayBuffer, key: SymmetricCryptoKey): Promise<Uint8Array> {\n    if (encBuffer == null) {\n      throw new Error(\"No buffer provided for decryption.\");\n    }\n\n    key ||= await this.getUserKeyWithLegacySupport();\n\n    return this.encryptService.decryptToBytes(encBuffer, key);\n  }\n\n  userKey$(userId: UserId): Observable<UserKey> {\n    return this.stateProvider.getUser(userId, USER_KEY).state$;\n  }\n\n  private userKeyWithLegacySupport$(userId: UserId) {\n    return this.userKey$(userId).pipe(\n      switchMap((userKey) => {\n        if (userKey != null) {\n          return of(userKey);\n        }\n\n        // Legacy path\n        return this.masterPasswordService.masterKey$(userId).pipe(\n          switchMap(async (masterKey) => {\n            if (!(await this.validateUserKey(masterKey as unknown as UserKey, userId))) {\n              // We don't have a UserKey or a valid MasterKey\n              return null;\n            }\n\n            // The master key is valid meaning, the org keys and such are encrypted with this key\n            return masterKey as unknown as UserKey;\n          }),\n        );\n      }),\n    );\n  }\n\n  userPublicKey$(userId: UserId) {\n    return this.userPrivateKey$(userId).pipe(\n      switchMap(async (pk) => await this.derivePublicKey(pk)),\n    );\n  }\n\n  private async derivePublicKey(privateKey: UserPrivateKey) {\n    if (privateKey == null) {\n      return null;\n    }\n\n    return (await this.cryptoFunctionService.rsaExtractPublicKey(privateKey)) as UserPublicKey;\n  }\n\n  userPrivateKey$(userId: UserId): Observable<UserPrivateKey> {\n    return this.userPrivateKeyHelper$(userId, false).pipe(map((keys) => keys?.userPrivateKey));\n  }\n\n  userPrivateKeyWithLegacySupport$(userId: UserId): Observable<UserPrivateKey> {\n    return this.userPrivateKeyHelper$(userId, true).pipe(map((keys) => keys?.userPrivateKey));\n  }\n\n  private userPrivateKeyHelper$(userId: UserId, legacySupport: boolean) {\n    const userKey$ = legacySupport ? this.userKeyWithLegacySupport$(userId) : this.userKey$(userId);\n    return userKey$.pipe(\n      switchMap((userKey) => {\n        if (userKey == null) {\n          return of(null);\n        }\n\n        return this.stateProvider.getUser(userId, USER_ENCRYPTED_PRIVATE_KEY).state$.pipe(\n          switchMap(\n            async (encryptedPrivateKey) =>\n              await this.decryptPrivateKey(encryptedPrivateKey, userKey),\n          ),\n          // Combine outerscope info with user private key\n          map((userPrivateKey) => ({\n            userKey,\n            userPrivateKey,\n          })),\n        );\n      }),\n    );\n  }\n\n  private async decryptPrivateKey(encryptedPrivateKey: EncryptedString, key: SymmetricCryptoKey) {\n    if (encryptedPrivateKey == null) {\n      return null;\n    }\n\n    return (await this.encryptService.decryptToBytes(\n      new EncString(encryptedPrivateKey),\n      key,\n    )) as UserPrivateKey;\n  }\n\n  providerKeys$(userId: UserId) {\n    return this.userPrivateKey$(userId).pipe(\n      switchMap((userPrivateKey) => {\n        if (userPrivateKey == null) {\n          return of(null);\n        }\n\n        return this.providerKeysHelper$(userId, userPrivateKey);\n      }),\n    );\n  }\n\n  /**\n   * A helper for decrypting provider keys that requires a user id and that users decrypted private key\n   * this is helpful for when you may have already grabbed the user private key and don't want to redo\n   * that work to get the provider keys.\n   */\n  private providerKeysHelper$(\n    userId: UserId,\n    userPrivateKey: UserPrivateKey,\n  ): Observable<Record<ProviderId, ProviderKey>> {\n    return this.stateProvider.getUser(userId, USER_ENCRYPTED_PROVIDER_KEYS).state$.pipe(\n      // Convert each value in the record to it's own decryption observable\n      convertValues(async (_, value) => {\n        const decrypted = await this.encryptService.rsaDecrypt(\n          new EncString(value),\n          userPrivateKey,\n        );\n        return new SymmetricCryptoKey(decrypted) as ProviderKey;\n      }),\n      // switchMap since there are no side effects\n      switchMap((encryptedProviderKeys) => {\n        if (encryptedProviderKeys == null) {\n          return of(null);\n        }\n\n        // Can't give an empty record to forkJoin\n        if (Object.keys(encryptedProviderKeys).length === 0) {\n          return of({});\n        }\n\n        return forkJoin(encryptedProviderKeys);\n      }),\n    );\n  }\n\n  orgKeys$(userId: UserId): Observable<Record<OrganizationId, OrgKey> | null> {\n    return this.cipherDecryptionKeys$(userId, true).pipe(map((keys) => keys?.orgKeys));\n  }\n\n  cipherDecryptionKeys$(\n    userId: UserId,\n    legacySupport: boolean = false,\n  ): Observable<CipherDecryptionKeys | null> {\n    return this.userPrivateKeyHelper$(userId, legacySupport).pipe(\n      switchMap((userKeys) => {\n        if (userKeys == null) {\n          return of(null);\n        }\n\n        const userPrivateKey = userKeys.userPrivateKey;\n\n        if (userPrivateKey == null) {\n          // We can't do any org based decryption\n          return of({ userKey: userKeys.userKey, orgKeys: null });\n        }\n\n        return combineLatest([\n          this.stateProvider.getUser(userId, USER_ENCRYPTED_ORGANIZATION_KEYS).state$,\n          this.providerKeysHelper$(userId, userPrivateKey),\n        ]).pipe(\n          switchMap(async ([encryptedOrgKeys, providerKeys]) => {\n            const result: Record<OrganizationId, OrgKey> = {};\n            for (const orgId of Object.keys(encryptedOrgKeys ?? {}) as OrganizationId[]) {\n              if (result[orgId] != null) {\n                continue;\n              }\n              const encrypted = BaseEncryptedOrganizationKey.fromData(encryptedOrgKeys[orgId]);\n\n              let decrypted: OrgKey;\n\n              if (BaseEncryptedOrganizationKey.isProviderEncrypted(encrypted)) {\n                decrypted = await encrypted.decrypt(this.encryptService, providerKeys);\n              } else {\n                decrypted = await encrypted.decrypt(this.encryptService, userPrivateKey);\n              }\n\n              result[orgId] = decrypted;\n            }\n\n            return result;\n          }),\n          // Combine them back together\n          map((orgKeys) => ({ userKey: userKeys.userKey, orgKeys: orgKeys })),\n        );\n      }),\n    );\n  }\n}\n","import { ObservableInput, OperatorFunction, map } from \"rxjs\";\n\n/**\n * Converts a record of keys and values into a record preserving the original key and converting each value into an {@link ObservableInput}.\n * @param project A function to project a given key and value pair into an {@link ObservableInput}\n */\nexport function convertValues<TKey extends PropertyKey, TInput, TOutput>(\n  project: (key: TKey, value: TInput) => ObservableInput<TOutput>,\n): OperatorFunction<Record<TKey, TInput>, Record<TKey, ObservableInput<TOutput>>> {\n  return map((inputRecord) => {\n    if (inputRecord == null) {\n      return null;\n    }\n\n    // Can't use TKey in here, have to use `PropertyKey`\n    const result: Record<PropertyKey, ObservableInput<TOutput>> = {};\n    for (const [key, value] of Object.entries(inputRecord) as [TKey, TInput][]) {\n      result[key] = project(key, value);\n    }\n\n    return result;\n  });\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { PinServiceAbstraction } from \"@bitwarden/auth/common\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { KdfConfigService } from \"@bitwarden/common/auth/abstractions/kdf-config.service\";\nimport { InternalMasterPasswordServiceAbstraction } from \"@bitwarden/common/auth/abstractions/master-password.service.abstraction\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { KeyGenerationService } from \"@bitwarden/common/platform/abstractions/key-generation.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport { BiometricStateService } from \"@bitwarden/common/platform/biometrics/biometric-state.service\";\nimport { BiometricsService } from \"@bitwarden/common/platform/biometrics/biometric.service\";\nimport { KeySuffixOptions } from \"@bitwarden/common/platform/enums\";\nimport { CryptoService } from \"@bitwarden/common/platform/services/crypto.service\";\nimport { USER_KEY } from \"@bitwarden/common/platform/services/key-state/user-key.state\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { UserKey } from \"@bitwarden/common/types/key\";\n\nexport class BrowserCryptoService extends CryptoService {\n  constructor(\n    pinService: PinServiceAbstraction,\n    masterPasswordService: InternalMasterPasswordServiceAbstraction,\n    keyGenerationService: KeyGenerationService,\n    cryptoFunctionService: CryptoFunctionService,\n    encryptService: EncryptService,\n    platformUtilService: PlatformUtilsService,\n    logService: LogService,\n    stateService: StateService,\n    accountService: AccountService,\n    stateProvider: StateProvider,\n    private biometricStateService: BiometricStateService,\n    private biometricsService: BiometricsService,\n    kdfConfigService: KdfConfigService,\n  ) {\n    super(\n      pinService,\n      masterPasswordService,\n      keyGenerationService,\n      cryptoFunctionService,\n      encryptService,\n      platformUtilService,\n      logService,\n      stateService,\n      accountService,\n      stateProvider,\n      kdfConfigService,\n    );\n  }\n  override async hasUserKeyStored(keySuffix: KeySuffixOptions, userId?: UserId): Promise<boolean> {\n    if (keySuffix === KeySuffixOptions.Biometric) {\n      const biometricUnlockPromise =\n        userId == null\n          ? firstValueFrom(this.biometricStateService.biometricUnlockEnabled$)\n          : this.biometricStateService.getBiometricUnlockEnabled(userId);\n      return await biometricUnlockPromise;\n    }\n    return super.hasUserKeyStored(keySuffix, userId);\n  }\n\n  /**\n   * Browser doesn't store biometric keys, so we retrieve them from the desktop and return\n   * if we successfully saved it into memory as the User Key\n   * @returns the `UserKey` if the user passes a biometrics prompt, otherwise return `null`.\n   */\n  protected override async getKeyFromStorage(\n    keySuffix: KeySuffixOptions,\n    userId?: UserId,\n  ): Promise<UserKey> {\n    if (keySuffix === KeySuffixOptions.Biometric) {\n      const biometricsResult = await this.biometricsService.authenticateBiometric();\n\n      if (!biometricsResult) {\n        return null;\n      }\n\n      const userKey = await firstValueFrom(this.stateProvider.getUserState$(USER_KEY, userId));\n      if (userKey) {\n        return userKey;\n      }\n    }\n\n    return await super.getKeyFromStorage(keySuffix, userId);\n  }\n}\n","import { distinctUntilChanged, firstValueFrom, map, Observable, switchMap } from \"rxjs\";\nimport { Jsonify } from \"type-fest\";\n\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { UserId } from \"../../types/guid\";\nimport {\n  EnvironmentService,\n  Environment,\n  Region,\n  RegionConfig,\n  Urls,\n  CloudRegion,\n} from \"../abstractions/environment.service\";\nimport { Utils } from \"../misc/utils\";\nimport {\n  ENVIRONMENT_DISK,\n  ENVIRONMENT_MEMORY,\n  GlobalState,\n  KeyDefinition,\n  StateProvider,\n  UserKeyDefinition,\n} from \"../state\";\n\nexport class EnvironmentUrls {\n  base: string = null;\n  api: string = null;\n  identity: string = null;\n  icons: string = null;\n  notifications: string = null;\n  events: string = null;\n  webVault: string = null;\n  keyConnector: string = null;\n}\n\nclass EnvironmentState {\n  region: Region;\n  urls: EnvironmentUrls;\n\n  static fromJSON(obj: Jsonify<EnvironmentState>): EnvironmentState {\n    return Object.assign(new EnvironmentState(), obj);\n  }\n}\n\nexport const GLOBAL_ENVIRONMENT_KEY = new KeyDefinition<EnvironmentState>(\n  ENVIRONMENT_DISK,\n  \"environment\",\n  {\n    deserializer: EnvironmentState.fromJSON,\n  },\n);\n\nexport const USER_ENVIRONMENT_KEY = new UserKeyDefinition<EnvironmentState>(\n  ENVIRONMENT_DISK,\n  \"environment\",\n  {\n    deserializer: EnvironmentState.fromJSON,\n    clearOn: [\"logout\"],\n  },\n);\n\nexport const GLOBAL_CLOUD_REGION_KEY = new KeyDefinition<CloudRegion>(\n  ENVIRONMENT_MEMORY,\n  \"cloudRegion\",\n  {\n    deserializer: (b) => b,\n  },\n);\n\nexport const USER_CLOUD_REGION_KEY = new UserKeyDefinition<CloudRegion>(\n  ENVIRONMENT_MEMORY,\n  \"cloudRegion\",\n  {\n    deserializer: (b) => b,\n    clearOn: [\"logout\"],\n  },\n);\n\n/**\n * The production regions available for selection.\n *\n * In the future we desire to load these urls from the config endpoint.\n */\nexport const PRODUCTION_REGIONS: RegionConfig[] = [\n  {\n    key: Region.US,\n    domain: \"bitwarden.com\",\n    urls: {\n      base: null,\n      api: \"https://api.bitwarden.com\",\n      identity: \"https://identity.bitwarden.com\",\n      icons: \"https://icons.bitwarden.net\",\n      webVault: \"https://vault.bitwarden.com\",\n      notifications: \"https://notifications.bitwarden.com\",\n      events: \"https://events.bitwarden.com\",\n      scim: \"https://scim.bitwarden.com\",\n    },\n  },\n  {\n    key: Region.EU,\n    domain: \"bitwarden.eu\",\n    urls: {\n      base: null,\n      api: \"https://api.bitwarden.eu\",\n      identity: \"https://identity.bitwarden.eu\",\n      icons: \"https://icons.bitwarden.eu\",\n      webVault: \"https://vault.bitwarden.eu\",\n      notifications: \"https://notifications.bitwarden.eu\",\n      events: \"https://events.bitwarden.eu\",\n      scim: \"https://scim.bitwarden.eu\",\n    },\n  },\n];\n\n/**\n * The default region when starting the app.\n */\nconst DEFAULT_REGION = Region.US;\n\n/**\n * The default region configuration.\n */\nconst DEFAULT_REGION_CONFIG = PRODUCTION_REGIONS.find((r) => r.key === DEFAULT_REGION);\n\nexport class DefaultEnvironmentService implements EnvironmentService {\n  private globalState: GlobalState<EnvironmentState | null>;\n  private globalCloudRegionState: GlobalState<CloudRegion | null>;\n\n  // We intentionally don't want the helper on account service, we want the null back if there is no active user\n  private activeAccountId$: Observable<UserId | null> = this.accountService.activeAccount$.pipe(\n    map((a) => a?.id),\n  );\n\n  environment$: Observable<Environment>;\n  cloudWebVaultUrl$: Observable<string>;\n\n  constructor(\n    private stateProvider: StateProvider,\n    private accountService: AccountService,\n  ) {\n    this.globalState = this.stateProvider.getGlobal(GLOBAL_ENVIRONMENT_KEY);\n    this.globalCloudRegionState = this.stateProvider.getGlobal(GLOBAL_CLOUD_REGION_KEY);\n\n    const account$ = this.activeAccountId$.pipe(\n      // Use == here to not trigger on undefined -> null transition\n      distinctUntilChanged((oldUserId: UserId, newUserId: UserId) => oldUserId == newUserId),\n    );\n\n    this.environment$ = account$.pipe(\n      switchMap((userId) => {\n        const t = userId\n          ? this.stateProvider.getUser(userId, USER_ENVIRONMENT_KEY).state$\n          : this.stateProvider.getGlobal(GLOBAL_ENVIRONMENT_KEY).state$;\n        return t;\n      }),\n      map((state) => {\n        return this.buildEnvironment(state?.region, state?.urls);\n      }),\n    );\n    this.cloudWebVaultUrl$ = account$.pipe(\n      switchMap((userId) => {\n        const t = userId\n          ? this.stateProvider.getUser(userId, USER_CLOUD_REGION_KEY).state$\n          : this.stateProvider.getGlobal(GLOBAL_CLOUD_REGION_KEY).state$;\n        return t;\n      }),\n      map((region) => {\n        if (region != null) {\n          const config = this.getRegionConfig(region);\n\n          if (config != null) {\n            return config.urls.webVault;\n          }\n        }\n        return DEFAULT_REGION_CONFIG.urls.webVault;\n      }),\n    );\n  }\n\n  availableRegions(): RegionConfig[] {\n    const additionalRegions = (process.env.ADDITIONAL_REGIONS as unknown as RegionConfig[]) ?? [];\n    return PRODUCTION_REGIONS.concat(additionalRegions);\n  }\n\n  /**\n   * Get the region configuration for the given region.\n   */\n  private getRegionConfig(region: Region): RegionConfig | undefined {\n    return this.availableRegions().find((r) => r.key === region);\n  }\n\n  async setEnvironment(region: Region, urls?: Urls): Promise<Urls> {\n    // Unknown regions are treated as self-hosted\n    if (this.getRegionConfig(region) == null) {\n      region = Region.SelfHosted;\n    }\n\n    // If self-hosted ensure urls are valid else fallback to default region\n    if (region == Region.SelfHosted && isEmpty(urls)) {\n      region = DEFAULT_REGION;\n    }\n\n    if (region != Region.SelfHosted) {\n      await this.globalState.update(() => ({\n        region: region,\n        urls: null,\n      }));\n\n      return null;\n    } else {\n      // Clean the urls\n      urls.base = formatUrl(urls.base);\n      urls.webVault = formatUrl(urls.webVault);\n      urls.api = formatUrl(urls.api);\n      urls.identity = formatUrl(urls.identity);\n      urls.icons = formatUrl(urls.icons);\n      urls.notifications = formatUrl(urls.notifications);\n      urls.events = formatUrl(urls.events);\n      urls.keyConnector = formatUrl(urls.keyConnector);\n      urls.scim = null;\n\n      await this.globalState.update(() => ({\n        region: region,\n        urls: {\n          base: urls.base,\n          api: urls.api,\n          identity: urls.identity,\n          webVault: urls.webVault,\n          icons: urls.icons,\n          notifications: urls.notifications,\n          events: urls.events,\n          keyConnector: urls.keyConnector,\n        },\n      }));\n\n      return urls;\n    }\n  }\n\n  /**\n   * Helper for building the environment from state. Performs some general sanitization to avoid invalid regions and urls.\n   */\n  protected buildEnvironment(region: Region, urls: Urls) {\n    // Unknown regions are treated as self-hosted\n    if (this.getRegionConfig(region) == null) {\n      region = Region.SelfHosted;\n    }\n\n    // If self-hosted ensure urls are valid else fallback to default region\n    if (region == Region.SelfHosted && isEmpty(urls)) {\n      region = DEFAULT_REGION;\n    }\n\n    // Load urls from region config\n    if (region != Region.SelfHosted) {\n      const regionConfig = this.getRegionConfig(region);\n      if (regionConfig != null) {\n        return new CloudEnvironment(regionConfig);\n      }\n    }\n\n    return new SelfHostedEnvironment(urls);\n  }\n\n  async setCloudRegion(userId: UserId, region: CloudRegion) {\n    if (userId == null) {\n      await this.globalCloudRegionState.update(() => region);\n    } else {\n      await this.stateProvider.getUser(userId, USER_CLOUD_REGION_KEY).update(() => region);\n    }\n  }\n\n  async getEnvironment(userId?: UserId): Promise<Environment | undefined> {\n    if (userId == null) {\n      return await firstValueFrom(this.environment$);\n    }\n\n    const state = await this.getEnvironmentState(userId);\n    return this.buildEnvironment(state.region, state.urls);\n  }\n\n  private async getEnvironmentState(userId: UserId | null) {\n    // Previous rules dictated that we only get from user scoped state if there is an active user.\n    const activeUserId = await firstValueFrom(this.activeAccountId$);\n    return activeUserId == null\n      ? await firstValueFrom(this.globalState.state$)\n      : await firstValueFrom(\n          this.stateProvider.getUser(userId ?? activeUserId, USER_ENVIRONMENT_KEY).state$,\n        );\n  }\n\n  async seedUserEnvironment(userId: UserId) {\n    const global = await firstValueFrom(this.globalState.state$);\n    await this.stateProvider.getUser(userId, USER_ENVIRONMENT_KEY).update(() => global);\n  }\n}\n\nfunction formatUrl(url: string): string {\n  if (url == null || url === \"\") {\n    return null;\n  }\n\n  url = url.replace(/\\/+$/g, \"\");\n  if (!url.startsWith(\"http://\") && !url.startsWith(\"https://\")) {\n    url = \"https://\" + url;\n  }\n\n  return url.trim();\n}\n\nfunction isEmpty(u?: Urls): boolean {\n  if (u == null) {\n    return true;\n  }\n\n  return (\n    u.base == null &&\n    u.webVault == null &&\n    u.api == null &&\n    u.identity == null &&\n    u.icons == null &&\n    u.notifications == null &&\n    u.events == null\n  );\n}\n\nabstract class UrlEnvironment implements Environment {\n  constructor(\n    protected region: Region,\n    protected urls: Urls,\n  ) {\n    // Scim is always null for self-hosted\n    if (region == Region.SelfHosted) {\n      this.urls.scim = null;\n    }\n  }\n\n  abstract getHostname(): string;\n\n  getRegion() {\n    return this.region;\n  }\n\n  getUrls() {\n    return {\n      base: this.urls.base,\n      webVault: this.urls.webVault,\n      api: this.urls.api,\n      identity: this.urls.identity,\n      icons: this.urls.icons,\n      notifications: this.urls.notifications,\n      events: this.urls.events,\n      keyConnector: this.urls.keyConnector,\n      scim: this.urls.scim,\n    };\n  }\n\n  hasBaseUrl() {\n    return this.urls.base != null;\n  }\n\n  getWebVaultUrl() {\n    return this.getUrl(\"webVault\", \"\");\n  }\n\n  getApiUrl() {\n    return this.getUrl(\"api\", \"/api\");\n  }\n\n  getEventsUrl() {\n    return this.getUrl(\"events\", \"/events\");\n  }\n\n  getIconsUrl() {\n    return this.getUrl(\"icons\", \"/icons\");\n  }\n\n  getIdentityUrl() {\n    return this.getUrl(\"identity\", \"/identity\");\n  }\n\n  getKeyConnectorUrl() {\n    return this.urls.keyConnector;\n  }\n\n  getNotificationsUrl() {\n    return this.getUrl(\"notifications\", \"/notifications\");\n  }\n\n  getScimUrl() {\n    if (this.urls.scim != null) {\n      return this.urls.scim + \"/v2\";\n    }\n\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://scim.bitwarden.com/v2\"\n      : this.getWebVaultUrl() + \"/scim/v2\";\n  }\n\n  getSendUrl() {\n    return this.getWebVaultUrl() === \"https://vault.bitwarden.com\"\n      ? \"https://send.bitwarden.com/#\"\n      : this.getWebVaultUrl() + \"/#/send/\";\n  }\n\n  /**\n   * Presume that if the region is not self-hosted, it is cloud.\n   */\n  isCloud(): boolean {\n    return this.region !== Region.SelfHosted;\n  }\n\n  /**\n   * Helper for getting an URL.\n   *\n   * @param key Key of the URL to get from URLs\n   * @param baseSuffix Suffix to append to the base URL if the url is not set\n   * @returns\n   */\n  private getUrl(key: keyof Urls, baseSuffix: string) {\n    if (this.urls[key] != null) {\n      return this.urls[key];\n    }\n\n    if (this.urls.base) {\n      return this.urls.base + baseSuffix;\n    }\n\n    return DEFAULT_REGION_CONFIG.urls[key];\n  }\n}\n\n/**\n * Denote a cloud environment.\n */\nexport class CloudEnvironment extends UrlEnvironment {\n  constructor(private config: RegionConfig) {\n    super(config.key, config.urls);\n  }\n\n  /**\n   * Cloud always returns nice urls, i.e. bitwarden.com instead of vault.bitwarden.com.\n   */\n  getHostname() {\n    return this.config.domain;\n  }\n}\n\nexport class SelfHostedEnvironment extends UrlEnvironment {\n  constructor(urls: Urls) {\n    super(Region.SelfHosted, urls);\n  }\n\n  getHostname() {\n    return Utils.getHost(this.getWebVaultUrl());\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { Region } from \"@bitwarden/common/platform/abstractions/environment.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { DefaultEnvironmentService } from \"@bitwarden/common/platform/services/default-environment.service\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\n\nimport { GroupPolicyEnvironment } from \"../../admin-console/types/group-policy-environment\";\nimport { devFlagEnabled, devFlagValue } from \"../flags\";\n\nexport class BrowserEnvironmentService extends DefaultEnvironmentService {\n  constructor(\n    private logService: LogService,\n    stateProvider: StateProvider,\n    accountService: AccountService,\n  ) {\n    super(stateProvider, accountService);\n  }\n\n  async hasManagedEnvironment(): Promise<boolean> {\n    try {\n      return (await this.getManagedEnvironment()) != null;\n    } catch (e) {\n      this.logService.error(e);\n      return false;\n    }\n  }\n\n  async settingsHaveChanged() {\n    if (!(await this.hasManagedEnvironment())) {\n      return false;\n    }\n\n    const managedEnv = await this.getManagedEnvironment();\n    const env = await firstValueFrom(this.environment$);\n    const urls = env.getUrls();\n\n    return (\n      managedEnv.base != urls.base ||\n      managedEnv.webVault != urls.webVault ||\n      managedEnv.api != urls.api ||\n      managedEnv.identity != urls.identity ||\n      managedEnv.icons != urls.icons ||\n      managedEnv.notifications != urls.notifications ||\n      managedEnv.events != urls.events\n    );\n  }\n\n  getManagedEnvironment(): Promise<GroupPolicyEnvironment> {\n    return devFlagEnabled(\"managedEnvironment\")\n      ? new Promise((resolve) => resolve(devFlagValue(\"managedEnvironment\")))\n      : new Promise((resolve, reject) => {\n          if (chrome.storage.managed == null) {\n            return resolve(null);\n          }\n\n          chrome.storage.managed.get(\"environment\", (result) => {\n            if (chrome.runtime.lastError) {\n              return reject(chrome.runtime.lastError);\n            }\n\n            resolve(result.environment);\n          });\n        });\n  }\n\n  async setUrlsToManagedEnvironment() {\n    const env = await this.getManagedEnvironment();\n    await this.setEnvironment(Region.SelfHosted, {\n      base: env.base,\n      webVault: env.webVault,\n      api: env.api,\n      identity: env.identity,\n      icons: env.icons,\n      notifications: env.notifications,\n      events: env.events,\n    });\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { BrowserApi } from \"./browser-api\";\n\n/**\n * Converts a Chrome event to an Observable stream.\n *\n * @typeParam T - The type of the event arguments.\n * @param event - The Chrome event to convert.\n * @returns An Observable stream of the event arguments.\n *\n * @remarks\n * This function creates an Observable stream that listens to a Chrome event and emits its arguments\n * whenever the event is triggered. If the event throws an error, the Observable will emit an error\n * notification with the error message.\n *\n * @example\n * ```typescript\n * const onMessage = fromChromeEvent(chrome.runtime.onMessage);\n * onMessage.subscribe((message) => console.log('Received message:', message));\n * ```\n */\nexport function fromChromeEvent<T extends unknown[]>(\n  event: chrome.events.Event<(...args: T) => void>,\n): Observable<T> {\n  return new Observable<T>((subscriber) => {\n    const handler = (...args: T) => {\n      if (chrome.runtime.lastError) {\n        subscriber.error(chrome.runtime.lastError);\n        return;\n      }\n\n      subscriber.next(args);\n    };\n\n    BrowserApi.addListener(event, handler);\n    return () => BrowserApi.removeListener(event, handler);\n  });\n}\n","import { filter, mergeMap } from \"rxjs\";\n\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n  StorageUpdateType,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\n\nimport { fromChromeEvent } from \"../../browser/from-chrome-event\";\n\nexport const serializationIndicator = \"__json__\";\n\nexport type SerializedValue = { [serializationIndicator]: true; value: string };\n\n/**\n * Serializes the given object and decorates it to indicate it is serialized.\n *\n * We have the problem that it is difficult to tell when a value has been serialized, by always\n * storing objects decorated with this method, we can easily tell when a value has been serialized and\n * deserialize it appropriately.\n * @param obj object to decorate and serialize\n * @returns a serialized version of the object, decorated to indicate that it is serialized\n */\nexport const objToStore = (obj: any) => {\n  if (obj == null) {\n    return null;\n  }\n\n  if (obj instanceof Set) {\n    obj = Array.from(obj);\n  }\n\n  return {\n    [serializationIndicator]: true as const,\n    value: JSON.stringify(obj),\n  };\n};\n\nexport default abstract class AbstractChromeStorageService\n  implements AbstractStorageService, ObservableStorageService\n{\n  updates$;\n\n  constructor(protected chromeStorageApi: chrome.storage.StorageArea) {\n    this.updates$ = fromChromeEvent(this.chromeStorageApi.onChanged).pipe(\n      filter(([changes]) => {\n        // Our storage services support changing only one key at a time. If more are changed, it's due to\n        // reseeding storage and we should ignore the changes.\n        return Object.keys(changes).length === 1;\n      }),\n      mergeMap(([changes]) => {\n        return Object.entries(changes).map(([key, change]) => {\n          // The `newValue` property isn't on the StorageChange object\n          // when the change was from a remove. Similarly a check of the `oldValue`\n          // could be used to tell if the operation was the first creation of this key\n          // but we currently do not differentiate that.\n          // Ref: https://developer.chrome.com/docs/extensions/reference/storage/#type-StorageChange\n          // Ref: https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/storage/StorageChange\n          const updateType: StorageUpdateType = \"newValue\" in change ? \"save\" : \"remove\";\n\n          return {\n            key: key,\n            // For removes this property will not exist but then it will just be\n            // undefined which is fine.\n            updateType: updateType,\n          };\n        });\n      }),\n    );\n  }\n\n  get valuesRequireDeserialization(): boolean {\n    return true;\n  }\n\n  async get<T>(key: string): Promise<T> {\n    return new Promise((resolve, reject) => {\n      this.chromeStorageApi.get(key, (obj) => {\n        if (chrome.runtime.lastError) {\n          return reject(chrome.runtime.lastError);\n        }\n\n        if (obj != null && obj[key] != null) {\n          resolve(this.processGetObject(obj[key]));\n          return;\n        }\n        resolve(null);\n      });\n    });\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save(key: string, obj: any): Promise<void> {\n    obj = objToStore(obj);\n\n    if (obj == null) {\n      // Safari does not support set of null values\n      return this.remove(key);\n    }\n\n    const keyedObj = { [key]: obj };\n    return new Promise<void>((resolve, reject) => {\n      this.chromeStorageApi.set(keyedObj, () => {\n        if (chrome.runtime.lastError) {\n          return reject(chrome.runtime.lastError);\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  async remove(key: string): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      this.chromeStorageApi.remove(key, () => {\n        if (chrome.runtime.lastError) {\n          return reject(chrome.runtime.lastError);\n        }\n\n        resolve();\n      });\n    });\n  }\n\n  /** Backwards compatible resolution of retrieved object with new serialized storage */\n  protected processGetObject<T>(obj: T | SerializedValue): T | null {\n    if (this.isSerialized(obj)) {\n      obj = JSON.parse(obj.value);\n    }\n    return obj as T;\n  }\n\n  /** Type guard for whether an object is tagged as serialized */\n  protected isSerialized<T>(value: T | SerializedValue): value is SerializedValue {\n    const asSerialized = value as SerializedValue;\n    return (\n      asSerialized != null &&\n      asSerialized[serializationIndicator] &&\n      typeof asSerialized.value === \"string\"\n    );\n  }\n}\n","import AbstractChromeStorageService from \"./abstractions/abstract-chrome-storage-api.service\";\n\nexport default class BrowserLocalStorageService extends AbstractChromeStorageService {\n  constructor() {\n    super(chrome.storage.local);\n  }\n\n  async fillBuffer() {\n    // Write 4MB of data in chrome.storage.local, log files will hold 4MB of data (by default)\n    // before forcing a compaction. To force a compaction and have it remove previously saved data,\n    // we want to fill it's buffer so that anything newly marked for deletion is gone.\n    // https://github.com/google/leveldb/blob/main/doc/impl.md#log-files\n    // It's important that if Google uses a different buffer length that we match that, as far as I can tell\n    // Google uses the default value in Chromium:\n    // https://github.com/chromium/chromium/blob/148774efa6b3a047369af6179a4248566b39d68f/components/value_store/lazy_leveldb.cc#L65-L66\n    const fakeData = \"0\".repeat(1024 * 1024); // 1MB of data\n    await new Promise<void>((resolve, reject) => {\n      this.chromeStorageApi.set(\n        {\n          fake_data_1: fakeData,\n          fake_data_2: fakeData,\n          fake_data_3: fakeData,\n          fake_data_4: fakeData,\n        },\n        () => {\n          if (chrome.runtime.lastError) {\n            return reject(chrome.runtime.lastError);\n          }\n\n          resolve();\n        },\n      );\n    });\n    await new Promise<void>((resolve, reject) => {\n      this.chromeStorageApi.remove(\n        [\"fake_data_1\", \"fake_data_2\", \"fake_data_3\", \"fake_data_4\"],\n        () => {\n          if (chrome.runtime.lastError) {\n            return reject(chrome.runtime.lastError);\n          }\n\n          resolve();\n        },\n      );\n    });\n  }\n}\n","import AbstractChromeStorageService from \"./abstractions/abstract-chrome-storage-api.service\";\n\nexport default class BrowserMemoryStorageService extends AbstractChromeStorageService {\n  constructor() {\n    super(chrome.storage.session);\n  }\n}\n","export type CommonScriptInjectionDetails = {\n  /**\n   * Script injected into the document.\n   * Overridden by `mv2Details` and `mv3Details`.\n   */\n  file?: string;\n  /**\n   * Identifies the frame targeted for script injection. Defaults to the top level frame (0).\n   * Can also be set to \"all_frames\" to inject into all frames in a tab.\n   */\n  frame?: \"all_frames\" | number;\n  /**\n   * When the script executes. Defaults to \"document_start\".\n   * @see https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/manifest.json/content_scripts\n   */\n  runAt?: \"document_start\" | \"document_end\" | \"document_idle\";\n};\n\nexport type Mv2ScriptInjectionDetails = {\n  file: string;\n};\n\nexport type Mv3ScriptInjectionDetails = {\n  file: string;\n  /**\n   * The world in which the script should be executed. Defaults to \"ISOLATED\".\n   * @see https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/scripting/ExecutionWorld\n   */\n  world?: chrome.scripting.ExecutionWorld;\n};\n\n/**\n * Configuration for injecting a script into a tab. The `file` property should present as a\n * path that is relative to the root directory of the extension build, ie \"content/script.js\".\n */\nexport type ScriptInjectionConfig = {\n  tabId: number;\n  injectDetails: CommonScriptInjectionDetails;\n  mv2Details?: Mv2ScriptInjectionDetails;\n  mv3Details?: Mv3ScriptInjectionDetails;\n};\n\nexport abstract class ScriptInjectorService {\n  abstract inject(config: ScriptInjectionConfig): Promise<void>;\n}\n","import { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\n\nimport {\n  CommonScriptInjectionDetails,\n  ScriptInjectionConfig,\n  ScriptInjectorService,\n} from \"./abstractions/script-injector.service\";\n\nexport class BrowserScriptInjectorService extends ScriptInjectorService {\n  constructor(\n    private readonly platformUtilsService: PlatformUtilsService,\n    private readonly logService: LogService,\n  ) {\n    super();\n  }\n\n  /**\n   * Facilitates the injection of a script into a tab context. Will adjust\n   * behavior between manifest v2 and v3 based on the passed configuration.\n   *\n   * @param config - The configuration for the script injection.\n   */\n  async inject(config: ScriptInjectionConfig): Promise<void> {\n    const { tabId, injectDetails, mv3Details } = config;\n    const file = this.getScriptFile(config);\n    if (!file) {\n      throw new Error(\"No file specified for script injection\");\n    }\n\n    const injectionDetails = this.buildInjectionDetails(injectDetails, file);\n\n    if (BrowserApi.isManifestVersion(3)) {\n      try {\n        await BrowserApi.executeScriptInTab(tabId, injectionDetails, {\n          world: mv3Details?.world ?? \"ISOLATED\",\n        });\n      } catch (error) {\n        // Swallow errors for host permissions, since this is believed to be a Manifest V3 Chrome bug\n        // @TODO remove when the bugged behaviour is resolved\n        if (\n          error.message !==\n          \"Cannot access contents of the page. Extension manifest must request permission to access the respective host.\"\n        ) {\n          throw error;\n        }\n\n        if (this.platformUtilsService.isDev()) {\n          this.logService.warning(\n            `BrowserApi.executeScriptInTab exception for ${injectDetails.file} in tab ${tabId}: ${error.message}`,\n          );\n        }\n      }\n\n      return;\n    }\n\n    await BrowserApi.executeScriptInTab(tabId, injectionDetails);\n  }\n\n  /**\n   * Retrieves the script file to inject based on the configuration.\n   *\n   * @param config - The configuration for the script injection.\n   */\n  private getScriptFile(config: ScriptInjectionConfig): string {\n    const { injectDetails, mv2Details, mv3Details } = config;\n\n    if (BrowserApi.isManifestVersion(3)) {\n      return mv3Details?.file ?? injectDetails?.file;\n    }\n\n    return mv2Details?.file ?? injectDetails?.file;\n  }\n\n  /**\n   * Builds the injection details for the script injection.\n   *\n   * @param injectDetails - The details for the script injection.\n   * @param file - The file to inject.\n   */\n  private buildInjectionDetails(\n    injectDetails: CommonScriptInjectionDetails,\n    file: string,\n  ): chrome.tabs.InjectDetails {\n    const { frame, runAt } = injectDetails;\n    const injectionDetails: chrome.tabs.InjectDetails = { file };\n\n    if (runAt) {\n      injectionDetails.runAt = runAt;\n    }\n\n    if (!frame) {\n      return { ...injectionDetails, frameId: 0 };\n    }\n\n    if (frame !== \"all_frames\") {\n      return { ...injectionDetails, frameId: frame };\n    }\n\n    return { ...injectionDetails, allFrames: true };\n  }\n}\n","import { TranslationService as TranslationServiceAbstraction } from \"../abstractions/translation.service\";\n\nexport abstract class TranslationService implements TranslationServiceAbstraction {\n  // First locale is the default (English)\n  supportedTranslationLocales: string[] = [\"en\"];\n  defaultLocale = \"en\";\n  abstract translationLocale: string;\n  collator: Intl.Collator;\n  localeNames = new Map<string, string>([\n    [\"af\", \"Afrikaans\"],\n    [\"ar\", \"العربية الفصحى\"],\n    [\"az\", \"Azərbaycanca\"],\n    [\"be\", \"Беларуская\"],\n    [\"bg\", \"български\"],\n    [\"bn\", \"বাংলা\"],\n    [\"bs\", \"bosanski jezik\"],\n    [\"ca\", \"català\"],\n    [\"cs\", \"čeština\"],\n    [\"cy\", \"Cymraeg, y Gymraeg\"],\n    [\"da\", \"dansk\"],\n    [\"de\", \"Deutsch\"],\n    [\"el\", \"Ελληνικά\"],\n    [\"en\", \"English\"],\n    [\"en-GB\", \"English (British)\"],\n    [\"en-IN\", \"English (India)\"],\n    [\"eo\", \"Esperanto\"],\n    [\"es\", \"español\"],\n    [\"et\", \"eesti\"],\n    [\"eu\", \"euskara\"],\n    [\"fa\", \"فارسی\"],\n    [\"fi\", \"suomi\"],\n    [\"fil\", \"Wikang Filipino\"],\n    [\"fr\", \"français\"],\n    [\"gl\", \"galego\"],\n    [\"he\", \"עברית\"],\n    [\"hi\", \"हिन्दी\"],\n    [\"hr\", \"hrvatski\"],\n    [\"hu\", \"magyar\"],\n    [\"id\", \"Bahasa Indonesia\"],\n    [\"it\", \"italiano\"],\n    [\"ja\", \"日本語\"],\n    [\"ka\", \"ქართული\"],\n    [\"km\", \"ខ្មែរ, ខេមរភាសា, ភាសាខ្មែរ\"],\n    [\"kn\", \"ಕನ್ನಡ\"],\n    [\"ko\", \"한국어\"],\n    [\"lt\", \"lietuvių kalba\"],\n    [\"lv\", \"Latvietis\"],\n    [\"me\", \"црногорски\"],\n    [\"ml\", \"മലയാളം\"],\n    [\"mr\", \"मराठी\"],\n    [\"my\", \"ဗမာစကား\"],\n    [\"nb\", \"norsk (bokmål)\"],\n    [\"ne\", \"नेपाली\"],\n    [\"nl\", \"Nederlands\"],\n    [\"nn\", \"Norsk Nynorsk\"],\n    [\"or\", \"ଓଡ଼ିଆ\"],\n    [\"pl\", \"polski\"],\n    [\"pt-BR\", \"português do Brasil\"],\n    [\"pt-PT\", \"português\"],\n    [\"ro\", \"română\"],\n    [\"ru\", \"русский\"],\n    [\"si\", \"සිංහල\"],\n    [\"sk\", \"slovenčina\"],\n    [\"sl\", \"Slovenski jezik, Slovenščina\"],\n    [\"sr\", \"Српски\"],\n    [\"sv\", \"svenska\"],\n    [\"te\", \"తెలుగు\"],\n    [\"th\", \"ไทย\"],\n    [\"tr\", \"Türkçe\"],\n    [\"uk\", \"українська\"],\n    [\"vi\", \"Tiếng Việt\"],\n    [\"zh-CN\", \"中文（中国大陆）\"],\n    [\"zh-TW\", \"中文（台灣）\"],\n  ]);\n\n  protected inited: boolean;\n  protected defaultMessages: any = {};\n  protected localeMessages: any = {};\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>,\n  ) {\n    this.systemLanguage = systemLanguage.replace(\"_\", \"-\");\n  }\n\n  async init(locale?: string) {\n    if (this.inited) {\n      throw new Error(\"i18n already initialized.\");\n    }\n    if (this.supportedTranslationLocales == null || this.supportedTranslationLocales.length === 0) {\n      throw new Error(\"supportedTranslationLocales not set.\");\n    }\n\n    this.inited = true;\n    this.translationLocale = locale != null ? locale : this.systemLanguage;\n\n    try {\n      this.collator = new Intl.Collator(this.translationLocale, {\n        numeric: true,\n        sensitivity: \"base\",\n      });\n    } catch {\n      this.collator = null;\n    }\n\n    if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n      this.translationLocale = this.translationLocale.slice(0, 2);\n\n      if (this.supportedTranslationLocales.indexOf(this.translationLocale) === -1) {\n        this.translationLocale = this.defaultLocale;\n      }\n    }\n\n    if (this.localesDirectory != null) {\n      await this.loadMessages(this.translationLocale, this.localeMessages);\n      if (this.translationLocale !== this.defaultLocale) {\n        await this.loadMessages(this.defaultLocale, this.defaultMessages);\n      }\n    }\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string | number, p2?: string | number, p3?: string | number): string {\n    let result: string;\n    // eslint-disable-next-line\n    if (this.localeMessages.hasOwnProperty(id) && this.localeMessages[id]) {\n      result = this.localeMessages[id];\n      // eslint-disable-next-line\n    } else if (this.defaultMessages.hasOwnProperty(id) && this.defaultMessages[id]) {\n      result = this.defaultMessages[id];\n    } else {\n      result = \"\";\n    }\n\n    if (result !== \"\") {\n      if (p1 != null) {\n        result = result.split(\"__$1__\").join(p1.toString());\n      }\n      if (p2 != null) {\n        result = result.split(\"__$2__\").join(p2.toString());\n      }\n      if (p3 != null) {\n        result = result.split(\"__$3__\").join(p3.toString());\n      }\n    }\n\n    return result;\n  }\n\n  protected async loadMessages(locale: string, messagesObj: any): Promise<any> {\n    const formattedLocale = locale.replace(\"-\", \"_\");\n    const locales = await this.getLocalesJson(formattedLocale);\n    for (const prop in locales) {\n      // eslint-disable-next-line\n      if (!locales.hasOwnProperty(prop)) {\n        continue;\n      }\n      messagesObj[prop] = locales[prop].message;\n\n      if (locales[prop].placeholders) {\n        for (const placeProp in locales[prop].placeholders) {\n          if (\n            !locales[prop].placeholders.hasOwnProperty(placeProp) || // eslint-disable-line\n            !locales[prop].placeholders[placeProp].content\n          ) {\n            continue;\n          }\n\n          const replaceToken = \"\\\\$\" + placeProp.toUpperCase() + \"\\\\$\";\n          let replaceContent = locales[prop].placeholders[placeProp].content;\n          if (replaceContent === \"$1\" || replaceContent === \"$2\" || replaceContent === \"$3\") {\n            replaceContent = \"__$\" + replaceContent + \"__\";\n          }\n          messagesObj[prop] = messagesObj[prop].replace(\n            new RegExp(replaceToken, \"g\"),\n            replaceContent,\n          );\n        }\n      }\n    }\n  }\n}\n","import { Observable, firstValueFrom, map } from \"rxjs\";\n\nimport { I18nService as I18nServiceAbstraction } from \"../abstractions/i18n.service\";\nimport { GlobalState, GlobalStateProvider, KeyDefinition, TRANSLATION_DISK } from \"../state\";\n\nimport { TranslationService } from \"./translation.service\";\n\nconst LOCALE_KEY = new KeyDefinition<string>(TRANSLATION_DISK, \"locale\", {\n  deserializer: (value) => value,\n});\n\nexport class I18nService extends TranslationService implements I18nServiceAbstraction {\n  translationLocale: string;\n  protected translationLocaleState: GlobalState<string>;\n  userSetLocale$: Observable<string | undefined>;\n  locale$: Observable<string>;\n\n  constructor(\n    protected systemLanguage: string,\n    protected localesDirectory: string,\n    protected getLocalesJson: (formattedLocale: string) => Promise<any>,\n    globalStateProvider: GlobalStateProvider,\n  ) {\n    super(systemLanguage, localesDirectory, getLocalesJson);\n    this.translationLocaleState = globalStateProvider.get(LOCALE_KEY);\n    this.userSetLocale$ = this.translationLocaleState.state$;\n    this.locale$ = this.userSetLocale$.pipe(map((locale) => locale ?? this.translationLocale));\n  }\n\n  async setLocale(locale: string): Promise<void> {\n    await this.translationLocaleState.update(() => locale);\n  }\n\n  override async init() {\n    const storedLocale = await firstValueFrom(this.translationLocaleState.state$);\n    await super.init(storedLocale);\n  }\n}\n","import { I18nService as BaseI18nService } from \"@bitwarden/common/platform/services/i18n.service\";\nimport { GlobalStateProvider } from \"@bitwarden/common/platform/state\";\n\nexport default class I18nService extends BaseI18nService {\n  constructor(systemLanguage: string, globalStateProvider: GlobalStateProvider) {\n    super(\n      systemLanguage,\n      null,\n      async (formattedLocale: string) => {\n        // Deprecated\n        const file = await fetch(this.localesDirectory + formattedLocale + \"/messages.json\");\n        return await file.json();\n      },\n      globalStateProvider,\n    );\n\n    // Please leave 'en' where it is, as it's our fallback language in case no translation can be found\n    this.supportedTranslationLocales = [\n      \"en\",\n      \"ar\",\n      \"az\",\n      \"be\",\n      \"bg\",\n      \"bn\",\n      \"bs\",\n      \"ca\",\n      \"cs\",\n      \"cy\",\n      \"da\",\n      \"de\",\n      \"el\",\n      \"en-GB\",\n      \"en-IN\",\n      \"es\",\n      \"et\",\n      \"eu\",\n      \"fa\",\n      \"fi\",\n      \"fil\",\n      \"fr\",\n      \"gl\",\n      \"he\",\n      \"hi\",\n      \"hr\",\n      \"hu\",\n      \"id\",\n      \"it\",\n      \"ja\",\n      \"ka\",\n      \"km\",\n      \"kn\",\n      \"ko\",\n      \"lt\",\n      \"lv\",\n      \"ml\",\n      \"mr\",\n      \"my\",\n      \"nb\",\n      \"ne\",\n      \"nl\",\n      \"nn\",\n      \"or\",\n      \"pl\",\n      \"pt-BR\",\n      \"pt-PT\",\n      \"ro\",\n      \"ru\",\n      \"si\",\n      \"sk\",\n      \"sl\",\n      \"sr\",\n      \"sv\",\n      \"te\",\n      \"th\",\n      \"tr\",\n      \"uk\",\n      \"vi\",\n      \"zh-CN\",\n      \"zh-TW\",\n    ];\n  }\n\n  t(id: string, p1?: string, p2?: string, p3?: string): string {\n    return this.translate(id, p1, p2, p3);\n  }\n\n  translate(id: string, p1?: string, p2?: string, p3?: string): string {\n    if (this.localesDirectory == null) {\n      const placeholders: string[] = [];\n      if (p1 != null) {\n        placeholders.push(p1);\n      }\n      if (p2 != null) {\n        placeholders.push(p2);\n      }\n      if (p3 != null) {\n        placeholders.push(p3);\n      }\n\n      if (placeholders.length) {\n        return chrome.i18n.getMessage(id, placeholders);\n      } else {\n        return chrome.i18n.getMessage(id);\n      }\n    }\n\n    return super.translate(id, p1, p2, p3);\n  }\n}\n","import { Observable } from \"rxjs\";\n\nimport { StorageOptions } from \"../models/domain/storage-options\";\n\nexport type StorageUpdateType = \"save\" | \"remove\";\nexport type StorageUpdate = {\n  key: string;\n  updateType: StorageUpdateType;\n};\n\nexport interface ObservableStorageService {\n  /**\n   * Provides an {@link Observable} that represents a stream of updates that\n   * have happened in this storage service or in the storage this service provides\n   * an interface to.\n   */\n  get updates$(): Observable<StorageUpdate>;\n}\n\nexport abstract class AbstractStorageService {\n  abstract get valuesRequireDeserialization(): boolean;\n  abstract get<T>(key: string, options?: StorageOptions): Promise<T>;\n  abstract has(key: string, options?: StorageOptions): Promise<boolean>;\n  abstract save<T>(key: string, obj: T, options?: StorageOptions): Promise<void>;\n  abstract remove(key: string, options?: StorageOptions): Promise<void>;\n}\n","export function portName(storageLocation: chrome.storage.StorageArea) {\n  switch (storageLocation) {\n    case chrome.storage.local:\n      return \"local\";\n    case chrome.storage.sync:\n      return \"sync\";\n    case chrome.storage.session:\n      return \"session\";\n    default:\n      throw new Error(\"Unknown storage location\");\n  }\n}\n","import { Subject } from \"rxjs\";\n\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n  StorageUpdate,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { compareValues } from \"@bitwarden/common/platform/misc/compare-values\";\nimport { Lazy } from \"@bitwarden/common/platform/misc/lazy\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { StorageOptions } from \"@bitwarden/common/platform/models/domain/storage-options\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\nimport { MemoryStoragePortMessage } from \"../storage/port-messages\";\nimport { portName } from \"../storage/port-name\";\n\nexport class LocalBackedSessionStorageService\n  extends AbstractStorageService\n  implements ObservableStorageService\n{\n  private ports: Set<chrome.runtime.Port> = new Set([]);\n  private cache: Record<string, unknown> = {};\n  private updatesSubject = new Subject<StorageUpdate>();\n  readonly valuesRequireDeserialization = true;\n  updates$ = this.updatesSubject.asObservable();\n\n  constructor(\n    private readonly sessionKey: Lazy<Promise<SymmetricCryptoKey>>,\n    private readonly localStorage: AbstractStorageService,\n    private readonly encryptService: EncryptService,\n    private readonly platformUtilsService: PlatformUtilsService,\n    private readonly logService: LogService,\n  ) {\n    super();\n\n    BrowserApi.addListener(chrome.runtime.onConnect, (port) => {\n      if (port.name !== portName(chrome.storage.session)) {\n        return;\n      }\n\n      this.ports.add(port);\n\n      const listenerCallback = this.onMessageFromForeground.bind(this);\n      port.onDisconnect.addListener(() => {\n        this.ports.delete(port);\n        port.onMessage.removeListener(listenerCallback);\n      });\n      port.onMessage.addListener(listenerCallback);\n      // Initialize the new memory storage service with existing data\n      this.sendMessageTo(port, {\n        action: \"initialization\",\n        data: Array.from(Object.keys(this.cache)),\n      });\n      this.updates$.subscribe((update) => {\n        this.broadcastMessage({\n          action: \"subject_update\",\n          data: update,\n        });\n      });\n    });\n  }\n\n  async get<T>(key: string, options?: StorageOptions): Promise<T> {\n    if (this.cache[key] !== undefined) {\n      return this.cache[key] as T;\n    }\n\n    const value = await this.getLocalSessionValue(await this.sessionKey.get(), key);\n\n    this.cache[key] = value;\n    return value as T;\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  async save<T>(key: string, obj: T): Promise<void> {\n    // This is for observation purposes only. At some point, we don't want to write to local session storage if the value is the same.\n    if (this.platformUtilsService.isDev()) {\n      const existingValue = this.cache[key] as T;\n      try {\n        if (this.compareValues<T>(existingValue, obj)) {\n          this.logService.warning(\n            `Possible unnecessary write to local session storage. Key: ${key}`,\n          );\n          this.logService.warning(obj as any);\n        }\n      } catch (err) {\n        this.logService.warning(`Error while comparing values for key: ${key}`);\n        this.logService.warning(err);\n      }\n    }\n\n    if (obj == null) {\n      return await this.remove(key);\n    }\n\n    this.cache[key] = obj;\n    await this.updateLocalSessionValue(key, obj);\n    this.updatesSubject.next({ key, updateType: \"save\" });\n  }\n\n  async remove(key: string): Promise<void> {\n    this.cache[key] = null;\n    await this.updateLocalSessionValue(key, null);\n    this.updatesSubject.next({ key, updateType: \"remove\" });\n  }\n\n  private async getLocalSessionValue(encKey: SymmetricCryptoKey, key: string): Promise<unknown> {\n    const local = await this.localStorage.get<string>(this.sessionStorageKey(key));\n    if (local == null) {\n      return null;\n    }\n\n    const valueJson = await this.encryptService.decryptToUtf8(new EncString(local), encKey);\n    if (valueJson == null) {\n      // error with decryption, value is lost, delete state and start over\n      await this.localStorage.remove(this.sessionStorageKey(key));\n      return null;\n    }\n\n    return JSON.parse(valueJson);\n  }\n\n  private async updateLocalSessionValue(key: string, value: unknown): Promise<void> {\n    if (value == null) {\n      await this.localStorage.remove(this.sessionStorageKey(key));\n      return;\n    }\n\n    const valueJson = JSON.stringify(value);\n    const encValue = await this.encryptService.encrypt(valueJson, await this.sessionKey.get());\n    await this.localStorage.save(this.sessionStorageKey(key), encValue.encryptedString);\n  }\n\n  private async onMessageFromForeground(\n    message: MemoryStoragePortMessage,\n    port: chrome.runtime.Port,\n  ) {\n    if (message.originator === \"background\") {\n      return;\n    }\n\n    let result: unknown = null;\n\n    switch (message.action) {\n      case \"get\":\n      case \"has\": {\n        result = await this[message.action](message.key);\n        break;\n      }\n      case \"save\":\n        await this.save(message.key, JSON.parse((message.data as string) ?? null) as unknown);\n        break;\n      case \"remove\":\n        await this.remove(message.key);\n        break;\n    }\n\n    this.sendMessageTo(port, {\n      id: message.id,\n      key: message.key,\n      data: JSON.stringify(result),\n    });\n  }\n\n  protected broadcastMessage(data: Omit<MemoryStoragePortMessage, \"originator\">) {\n    this.ports.forEach((port) => {\n      this.sendMessageTo(port, data);\n    });\n  }\n\n  private sendMessageTo(\n    port: chrome.runtime.Port,\n    data: Omit<MemoryStoragePortMessage, \"originator\">,\n  ) {\n    port.postMessage({\n      ...data,\n      originator: \"background\",\n    });\n  }\n\n  private sessionStorageKey(key: string) {\n    return `session_${key}`;\n  }\n\n  private compareValues<T>(value1: T, value2: T): boolean {\n    try {\n      return compareValues(value1, value2);\n    } catch (e) {\n      this.logService.error(\n        `error comparing values\\n${JSON.stringify(value1)}\\n${JSON.stringify(value2)}`,\n      );\n      return true;\n    }\n  }\n}\n","/**\n * Performs deep equality check between two values\n *\n * NOTE: This method uses JSON.stringify to compare objects, which may return false\n * for objects with the same properties but in different order. If order-insensitive\n * comparison becomes necessary in future, consider updating this method to use a comparison\n * that checks for property existence and value equality without regard to order.\n */\nexport function compareValues<T>(value1: T, value2: T): boolean {\n  if (value1 == null && value2 == null) {\n    return true;\n  }\n\n  if (value1 && value2 == null) {\n    return false;\n  }\n\n  if (value1 == null && value2) {\n    return false;\n  }\n\n  if (typeof value1 !== \"object\" || typeof value2 !== \"object\") {\n    return value1 === value2;\n  }\n\n  return JSON.stringify(value1) === JSON.stringify(value2);\n}\n","import { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\n\nimport { OffscreenDocumentService } from \"../../offscreen-document/abstractions/offscreen-document\";\n\nimport { BrowserPlatformUtilsService } from \"./browser-platform-utils.service\";\n\nexport class BackgroundPlatformUtilsService extends BrowserPlatformUtilsService {\n  constructor(\n    private messagingService: MessagingService,\n    clipboardWriteCallback: (clipboardValue: string, clearMs: number) => void,\n    win: Window & typeof globalThis,\n    offscreenDocumentService: OffscreenDocumentService,\n  ) {\n    super(clipboardWriteCallback, win, offscreenDocumentService);\n  }\n\n  override showToast(\n    type: \"error\" | \"success\" | \"warning\" | \"info\",\n    title: string,\n    text: string | string[],\n    options?: any,\n  ): void {\n    this.messagingService.send(\"showToast\", {\n      text: text,\n      title: title,\n      type: type,\n      options: options,\n    });\n  }\n}\n","import { switchMap, merge, delay, filter, concatMap, map } from \"rxjs\";\n\nimport { CommandDefinition, MessageListener } from \"@bitwarden/common/platform/messaging\";\nimport {\n  POPUP_VIEW_MEMORY,\n  KeyDefinition,\n  GlobalStateProvider,\n} from \"@bitwarden/common/platform/state\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\nimport { fromChromeEvent } from \"../browser/from-chrome-event\";\n\nconst popupClosedPortName = \"new_popup\";\n\n/** We cannot use `UserKeyDefinition` because we must be able to store state when there is no active user. */\nexport const POPUP_VIEW_CACHE_KEY = KeyDefinition.record<string>(\n  POPUP_VIEW_MEMORY,\n  \"popup-view-cache\",\n  {\n    deserializer: (jsonValue) => jsonValue,\n  },\n);\n\nexport const POPUP_ROUTE_HISTORY_KEY = new KeyDefinition<string[]>(\n  POPUP_VIEW_MEMORY,\n  \"popup-route-history\",\n  {\n    deserializer: (jsonValue) => jsonValue,\n  },\n);\n\nexport const SAVE_VIEW_CACHE_COMMAND = new CommandDefinition<{\n  key: string;\n  value: string;\n}>(\"save-view-cache\");\n\nexport const ClEAR_VIEW_CACHE_COMMAND = new CommandDefinition(\"clear-view-cache\");\n\nexport class PopupViewCacheBackgroundService {\n  private popupViewCacheState = this.globalStateProvider.get(POPUP_VIEW_CACHE_KEY);\n  private popupRouteHistoryState = this.globalStateProvider.get(POPUP_ROUTE_HISTORY_KEY);\n\n  constructor(\n    private messageListener: MessageListener,\n    private globalStateProvider: GlobalStateProvider,\n  ) {}\n\n  startObservingTabChanges() {\n    this.messageListener\n      .messages$(SAVE_VIEW_CACHE_COMMAND)\n      .pipe(\n        concatMap(async ({ key, value }) =>\n          this.popupViewCacheState.update((state) => ({\n            ...state,\n            [key]: value,\n          })),\n        ),\n      )\n      .subscribe();\n\n    merge(\n      // on tab changed, excluding extension tabs\n      fromChromeEvent(chrome.tabs.onActivated).pipe(\n        switchMap(([tabInfo]) => BrowserApi.getTab(tabInfo.tabId)),\n        map((tab) => tab.url || tab.pendingUrl),\n        filter((url) => !url.startsWith(chrome.runtime.getURL(\"\"))),\n      ),\n\n      // on popup closed, with 2 minute delay that is cancelled by re-opening the popup\n      fromChromeEvent(chrome.runtime.onConnect).pipe(\n        filter(([port]) => port.name === popupClosedPortName),\n        switchMap(([port]) => fromChromeEvent(port.onDisconnect).pipe(delay(1000 * 60 * 2))),\n      ),\n    )\n      .pipe(switchMap(() => this.clearState()))\n      .subscribe();\n  }\n\n  async clearState() {\n    return Promise.all([\n      this.popupViewCacheState.update(() => ({}), { shouldUpdate: this.objNotEmpty }),\n      this.popupRouteHistoryState.update(() => [], { shouldUpdate: this.objNotEmpty }),\n    ]);\n  }\n\n  private objNotEmpty(obj: object): boolean {\n    return Object.keys(obj ?? {}).length !== 0;\n  }\n}\n\n/**\n * Communicates to {@link PopupViewCacheBackgroundService} that the extension popup has been closed.\n *\n * Call in the foreground.\n **/\nexport const initPopupClosedListener = () => {\n  chrome.runtime.connect({ name: popupClosedPortName });\n};\n","import { Observable } from \"rxjs\";\n\nimport { TaskSchedulerService, ScheduledTaskName } from \"@bitwarden/common/platform/scheduling\";\n\nexport const BrowserTaskSchedulerPortName = \"browser-task-scheduler-port\";\n\nexport const BrowserTaskSchedulerPortActions = {\n  setTimeout: \"setTimeout\",\n  setInterval: \"setInterval\",\n  clearAlarm: \"clearAlarm\",\n} as const;\nexport type BrowserTaskSchedulerPortAction = keyof typeof BrowserTaskSchedulerPortActions;\n\nexport type BrowserTaskSchedulerPortMessage = {\n  action: BrowserTaskSchedulerPortAction;\n  taskName: ScheduledTaskName;\n  alarmName?: string;\n  delayInMs?: number;\n  intervalInMs?: number;\n};\n\nexport type ActiveAlarm = {\n  alarmName: string;\n  startTime: number;\n  createInfo: chrome.alarms.AlarmCreateInfo;\n};\n\nexport abstract class BrowserTaskSchedulerService extends TaskSchedulerService {\n  activeAlarms$: Observable<ActiveAlarm[]>;\n  abstract clearAllScheduledTasks(): Promise<void>;\n  abstract verifyAlarmsState(): Promise<void>;\n  abstract clearScheduledAlarm(alarmName: string): Promise<void>;\n}\n","import { firstValueFrom, map, Observable, Subscription } from \"rxjs\";\n\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport {\n  DefaultTaskSchedulerService,\n  ScheduledTaskName,\n} from \"@bitwarden/common/platform/scheduling\";\nimport {\n  TASK_SCHEDULER_DISK,\n  GlobalState,\n  KeyDefinition,\n  StateProvider,\n} from \"@bitwarden/common/platform/state\";\n\nimport { BrowserApi } from \"../../browser/browser-api\";\nimport {\n  ActiveAlarm,\n  BrowserTaskSchedulerService,\n} from \"../abstractions/browser-task-scheduler.service\";\n\nconst ACTIVE_ALARMS = new KeyDefinition(TASK_SCHEDULER_DISK, \"activeAlarms\", {\n  deserializer: (value: ActiveAlarm[]) => value ?? [],\n});\n\nexport class BrowserTaskSchedulerServiceImplementation\n  extends DefaultTaskSchedulerService\n  implements BrowserTaskSchedulerService\n{\n  private activeAlarmsState: GlobalState<ActiveAlarm[]>;\n  readonly activeAlarms$: Observable<ActiveAlarm[]>;\n\n  constructor(\n    logService: LogService,\n    private stateProvider: StateProvider,\n  ) {\n    super(logService);\n\n    this.activeAlarmsState = this.stateProvider.getGlobal(ACTIVE_ALARMS);\n    this.activeAlarms$ = this.activeAlarmsState.state$.pipe(\n      map((activeAlarms) => activeAlarms ?? []),\n    );\n\n    this.setupOnAlarmListener();\n  }\n\n  /**\n   * Sets a timeout to execute a callback after a delay. If the delay is less\n   * than 1 minute, it will use the global setTimeout. Otherwise, it will\n   * create a browser extension alarm to handle the delay.\n   *\n   * @param taskName - The name of the task, used in defining the alarm.\n   * @param delayInMs - The delay in milliseconds.\n   */\n  setTimeout(taskName: ScheduledTaskName, delayInMs: number): Subscription {\n    let timeoutHandle: number | NodeJS.Timeout;\n    this.validateRegisteredTask(taskName);\n\n    const delayInMinutes = delayInMs / 1000 / 60;\n    this.scheduleAlarm(taskName, {\n      delayInMinutes: this.getUpperBoundDelayInMinutes(delayInMinutes),\n    }).catch((error) => this.logService.error(\"Failed to schedule alarm\", error));\n\n    // If the delay is less than a minute, we want to attempt to trigger the task through a setTimeout.\n    // The alarm previously scheduled will be used as a backup in case the setTimeout fails.\n    if (delayInMinutes < this.getUpperBoundDelayInMinutes(delayInMinutes)) {\n      timeoutHandle = globalThis.setTimeout(async () => {\n        await this.clearScheduledAlarm(taskName);\n        await this.triggerTask(taskName);\n      }, delayInMs);\n    }\n\n    return new Subscription(() => {\n      if (timeoutHandle) {\n        globalThis.clearTimeout(timeoutHandle);\n      }\n      this.clearScheduledAlarm(taskName).catch((error) =>\n        this.logService.error(\"Failed to clear alarm\", error),\n      );\n    });\n  }\n\n  /**\n   * Sets an interval to execute a callback at each interval. If the interval is\n   * less than 1 minute, it will use the global setInterval. Otherwise, it will\n   * create a browser extension alarm to handle the interval.\n   *\n   * @param taskName - The name of the task, used in defining the alarm.\n   * @param intervalInMs - The interval in milliseconds.\n   * @param initialDelayInMs - The initial delay in milliseconds.\n   */\n  setInterval(\n    taskName: ScheduledTaskName,\n    intervalInMs: number,\n    initialDelayInMs?: number,\n  ): Subscription {\n    this.validateRegisteredTask(taskName);\n\n    const intervalInMinutes = intervalInMs / 1000 / 60;\n    const initialDelayInMinutes = initialDelayInMs\n      ? initialDelayInMs / 1000 / 60\n      : intervalInMinutes;\n\n    if (intervalInMinutes < this.getUpperBoundDelayInMinutes(intervalInMinutes)) {\n      return this.setupSteppedIntervalAlarms(taskName, intervalInMs);\n    }\n\n    this.scheduleAlarm(taskName, {\n      periodInMinutes: this.getUpperBoundDelayInMinutes(intervalInMinutes),\n      delayInMinutes: this.getUpperBoundDelayInMinutes(initialDelayInMinutes),\n    }).catch((error) => this.logService.error(\"Failed to schedule alarm\", error));\n\n    return new Subscription(() =>\n      this.clearScheduledAlarm(taskName).catch((error) =>\n        this.logService.error(\"Failed to clear alarm\", error),\n      ),\n    );\n  }\n\n  /**\n   * Used in cases where the interval is less than 1 minute. This method will set up a setInterval\n   * to initialize expected recurring behavior, then create a series of alarms to handle the\n   * expected scheduled task through the alarms api. This is necessary because the alarms\n   * api does not support intervals less than 1 minute.\n   *\n   * @param taskName - The name of the task\n   * @param intervalInMs - The interval in milliseconds.\n   */\n  private setupSteppedIntervalAlarms(\n    taskName: ScheduledTaskName,\n    intervalInMs: number,\n  ): Subscription {\n    const alarmMinDelayInMinutes = this.getAlarmMinDelayInMinutes();\n    const intervalInMinutes = intervalInMs / 1000 / 60;\n    const numberOfAlarmsToCreate = Math.ceil(Math.ceil(1 / intervalInMinutes) / 2) + 1;\n    const steppedAlarmPeriodInMinutes = alarmMinDelayInMinutes + intervalInMinutes;\n    const steppedAlarmNames: string[] = [];\n    for (let alarmIndex = 0; alarmIndex < numberOfAlarmsToCreate; alarmIndex++) {\n      const steppedAlarmName = `${taskName}__${alarmIndex}`;\n      steppedAlarmNames.push(steppedAlarmName);\n\n      const delayInMinutes = this.getUpperBoundDelayInMinutes(\n        alarmMinDelayInMinutes + intervalInMinutes * alarmIndex,\n      );\n\n      this.clearScheduledAlarm(steppedAlarmName)\n        .then(() =>\n          this.scheduleAlarm(steppedAlarmName, {\n            periodInMinutes: steppedAlarmPeriodInMinutes,\n            delayInMinutes,\n          }).catch((error) => this.logService.error(\"Failed to schedule alarm\", error)),\n        )\n        .catch((error) => this.logService.error(\"Failed to clear alarm\", error));\n    }\n\n    let elapsedMs = 0;\n    const intervalHandle: number | NodeJS.Timeout = globalThis.setInterval(async () => {\n      elapsedMs += intervalInMs;\n      const elapsedMinutes = elapsedMs / 1000 / 60;\n\n      if (elapsedMinutes >= alarmMinDelayInMinutes) {\n        globalThis.clearInterval(intervalHandle);\n        return;\n      }\n\n      await this.triggerTask(taskName, intervalInMinutes);\n    }, intervalInMs);\n\n    return new Subscription(() => {\n      if (intervalHandle) {\n        globalThis.clearInterval(intervalHandle);\n      }\n      steppedAlarmNames.forEach((alarmName) =>\n        this.clearScheduledAlarm(alarmName).catch((error) =>\n          this.logService.error(\"Failed to clear alarm\", error),\n        ),\n      );\n    });\n  }\n\n  /**\n   * Clears all scheduled tasks by clearing all browser extension\n   * alarms and resetting the active alarms state.\n   */\n  async clearAllScheduledTasks(): Promise<void> {\n    await this.clearAllAlarms();\n    await this.updateActiveAlarms([]);\n  }\n\n  /**\n   * Verifies the state of the active alarms by checking if\n   * any alarms have been missed or need to be created.\n   */\n  async verifyAlarmsState(): Promise<void> {\n    const currentTime = Date.now();\n    const activeAlarms = await this.getActiveAlarms();\n\n    for (const alarm of activeAlarms) {\n      const { alarmName, startTime, createInfo } = alarm;\n      const existingAlarm = await this.getAlarm(alarmName);\n      if (existingAlarm) {\n        continue;\n      }\n\n      const shouldAlarmHaveBeenTriggered = createInfo.when && createInfo.when < currentTime;\n      const hasSetTimeoutAlarmExceededDelay =\n        !createInfo.periodInMinutes &&\n        createInfo.delayInMinutes &&\n        startTime + createInfo.delayInMinutes * 60 * 1000 < currentTime;\n      if (shouldAlarmHaveBeenTriggered || hasSetTimeoutAlarmExceededDelay) {\n        await this.triggerTask(alarmName);\n        continue;\n      }\n\n      this.scheduleAlarm(alarmName, createInfo).catch((error) =>\n        this.logService.error(\"Failed to schedule alarm\", error),\n      );\n    }\n  }\n\n  /**\n   * Creates a browser extension alarm with the given name and create info.\n   *\n   * @param alarmName - The name of the alarm.\n   * @param createInfo - The alarm create info.\n   */\n  private async scheduleAlarm(\n    alarmName: string,\n    createInfo: chrome.alarms.AlarmCreateInfo,\n  ): Promise<void> {\n    const existingAlarm = await this.getAlarm(alarmName);\n    if (existingAlarm) {\n      this.logService.debug(`Alarm ${alarmName} already exists. Skipping creation.`);\n      return;\n    }\n\n    await this.createAlarm(alarmName, createInfo);\n    await this.setActiveAlarm(alarmName, createInfo);\n  }\n\n  /**\n   * Gets the active alarms from state.\n   */\n  private async getActiveAlarms(): Promise<ActiveAlarm[]> {\n    return await firstValueFrom(this.activeAlarms$);\n  }\n\n  /**\n   * Sets an active alarm in state.\n   *\n   * @param alarmName - The name of the active alarm to set.\n   * @param createInfo - The creation info of the active alarm.\n   */\n  private async setActiveAlarm(\n    alarmName: string,\n    createInfo: chrome.alarms.AlarmCreateInfo,\n  ): Promise<void> {\n    const activeAlarms = await this.getActiveAlarms();\n    const filteredAlarms = activeAlarms.filter((alarm) => alarm.alarmName !== alarmName);\n    filteredAlarms.push({\n      alarmName,\n      startTime: Date.now(),\n      createInfo,\n    });\n    await this.updateActiveAlarms(filteredAlarms);\n  }\n\n  /**\n   * Deletes an active alarm from state.\n   *\n   * @param alarmName - The name of the active alarm to delete.\n   */\n  private async deleteActiveAlarm(alarmName: string): Promise<void> {\n    const activeAlarms = await this.getActiveAlarms();\n    const filteredAlarms = activeAlarms.filter((alarm) => alarm.alarmName !== alarmName);\n    await this.updateActiveAlarms(filteredAlarms || []);\n  }\n\n  /**\n   * Clears a scheduled alarm by its name and deletes it from the active alarms state.\n   *\n   * @param alarmName - The name of the alarm to clear.\n   */\n  async clearScheduledAlarm(alarmName: string): Promise<void> {\n    const wasCleared = await this.clearAlarm(alarmName);\n    if (wasCleared) {\n      await this.deleteActiveAlarm(alarmName);\n    }\n  }\n\n  /**\n   * Updates the active alarms state with the given alarms.\n   *\n   * @param alarms - The alarms to update the state with.\n   */\n  private async updateActiveAlarms(alarms: ActiveAlarm[]): Promise<void> {\n    await this.activeAlarmsState.update(() => alarms);\n  }\n\n  /**\n   * Sets up the on alarm listener to handle alarms.\n   */\n  private setupOnAlarmListener(): void {\n    BrowserApi.addListener(chrome.alarms.onAlarm, this.handleOnAlarm);\n  }\n\n  /**\n   * Handles on alarm events, triggering the alarm if a handler exists.\n   *\n   * @param alarm - The alarm to handle.\n   */\n  private handleOnAlarm = async (alarm: chrome.alarms.Alarm): Promise<void> => {\n    const { name, periodInMinutes } = alarm;\n    await this.triggerTask(name, periodInMinutes);\n  };\n\n  /**\n   * Triggers an alarm by calling its handler and\n   * deleting it if it is a one-time alarm.\n   *\n   * @param alarmName - The name of the alarm to trigger.\n   * @param periodInMinutes - The period in minutes of an interval alarm.\n   */\n  protected async triggerTask(alarmName: string, periodInMinutes?: number): Promise<void> {\n    const taskName = this.getTaskFromAlarmName(alarmName);\n    const handler = this.taskHandlers.get(taskName);\n    if (!periodInMinutes) {\n      await this.deleteActiveAlarm(alarmName);\n    }\n\n    if (handler) {\n      handler();\n    }\n  }\n\n  /**\n   * Parses and returns the task name from an alarm name.\n   *\n   * @param alarmName - The alarm name to parse.\n   */\n  protected getTaskFromAlarmName(alarmName: string): ScheduledTaskName {\n    return alarmName.split(\"__\")[0] as ScheduledTaskName;\n  }\n\n  /**\n   * Clears a new alarm with the given name and create info. Returns a promise\n   * that indicates when the alarm has been cleared successfully.\n   *\n   * @param alarmName - The name of the alarm to create.\n   */\n  private async clearAlarm(alarmName: string): Promise<boolean> {\n    if (this.isNonChromeEnvironment()) {\n      return browser.alarms.clear(alarmName);\n    }\n\n    return new Promise((resolve) => chrome.alarms.clear(alarmName, resolve));\n  }\n\n  /**\n   * Clears all alarms that have been set by the extension. Returns a promise\n   * that indicates when all alarms have been cleared successfully.\n   */\n  private clearAllAlarms(): Promise<boolean> {\n    if (this.isNonChromeEnvironment()) {\n      return browser.alarms.clearAll();\n    }\n\n    return new Promise((resolve) => chrome.alarms.clearAll(resolve));\n  }\n\n  /**\n   * Creates a new alarm with the given name and create info.\n   *\n   * @param alarmName - The name of the alarm to create.\n   * @param createInfo - The creation info for the alarm.\n   */\n  private async createAlarm(\n    alarmName: string,\n    createInfo: chrome.alarms.AlarmCreateInfo,\n  ): Promise<void> {\n    if (this.isNonChromeEnvironment()) {\n      return browser.alarms.create(alarmName, createInfo);\n    }\n\n    return new Promise((resolve) => chrome.alarms.create(alarmName, createInfo, resolve));\n  }\n\n  /**\n   * Gets the alarm with the given name.\n   *\n   * @param alarmName - The name of the alarm to get.\n   */\n  private getAlarm(alarmName: string): Promise<chrome.alarms.Alarm> {\n    if (this.isNonChromeEnvironment()) {\n      return browser.alarms.get(alarmName);\n    }\n\n    return new Promise((resolve) => chrome.alarms.get(alarmName, resolve));\n  }\n\n  /**\n   * Checks if the environment is a non-Chrome environment. This is used to determine\n   * if the browser alarms API should be used in place of the chrome alarms API. This\n   * is necessary because the `chrome` polyfill that Mozilla implements does not allow\n   * passing the callback parameter in the same way most `chrome.alarm` api calls allow.\n   */\n  private isNonChromeEnvironment(): boolean {\n    return typeof browser !== \"undefined\" && !!browser.alarms;\n  }\n\n  /**\n   * Gets the minimum delay in minutes for an alarm. This is used to ensure that the\n   * delay is at least 1 minute in non-Chrome environments. In Chrome environments, the\n   * delay can be as low as 0.5 minutes.\n   */\n  private getAlarmMinDelayInMinutes(): number {\n    return this.isNonChromeEnvironment() ? 1 : 0.5;\n  }\n\n  /**\n   * Gets the upper bound delay in minutes for a given delay in minutes.\n   *\n   * @param delayInMinutes - The delay in minutes.\n   */\n  private getUpperBoundDelayInMinutes(delayInMinutes: number): number {\n    return Math.max(this.getAlarmMinDelayInMinutes(), delayInMinutes);\n  }\n}\n","import { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\n\nimport { BrowserApi } from \"../../browser/browser-api\";\nimport {\n  BrowserTaskSchedulerPortActions,\n  BrowserTaskSchedulerPortMessage,\n  BrowserTaskSchedulerPortName,\n} from \"../abstractions/browser-task-scheduler.service\";\n\nimport { BrowserTaskSchedulerServiceImplementation } from \"./browser-task-scheduler.service\";\n\nexport class BackgroundTaskSchedulerService extends BrowserTaskSchedulerServiceImplementation {\n  private ports: Set<chrome.runtime.Port> = new Set();\n\n  constructor(logService: LogService, stateProvider: StateProvider) {\n    super(logService, stateProvider);\n\n    BrowserApi.addListener(chrome.runtime.onConnect, this.handlePortOnConnect);\n  }\n\n  /**\n   * Handles a port connection made from the foreground task scheduler.\n   *\n   * @param port - The port that was connected.\n   */\n  private handlePortOnConnect = (port: chrome.runtime.Port) => {\n    if (port.name !== BrowserTaskSchedulerPortName) {\n      return;\n    }\n\n    this.ports.add(port);\n    port.onMessage.addListener(this.handlePortMessage);\n    port.onDisconnect.addListener(this.handlePortOnDisconnect);\n  };\n\n  /**\n   * Handles a port disconnection.\n   *\n   * @param port - The port that was disconnected.\n   */\n  private handlePortOnDisconnect = (port: chrome.runtime.Port) => {\n    port.onMessage.removeListener(this.handlePortMessage);\n    port.onDisconnect.removeListener(this.handlePortOnDisconnect);\n    this.ports.delete(port);\n  };\n\n  /**\n   * Handles a message from a port.\n   *\n   * @param message - The message that was received.\n   * @param port - The port that sent the message.\n   */\n  private handlePortMessage = (\n    message: BrowserTaskSchedulerPortMessage,\n    port: chrome.runtime.Port,\n  ) => {\n    const isTaskSchedulerPort = port.name === BrowserTaskSchedulerPortName;\n    const { action, taskName, alarmName, delayInMs, intervalInMs } = message;\n\n    if (isTaskSchedulerPort && action === BrowserTaskSchedulerPortActions.setTimeout) {\n      super.setTimeout(taskName, delayInMs);\n      return;\n    }\n\n    if (isTaskSchedulerPort && action === BrowserTaskSchedulerPortActions.setInterval) {\n      super.setInterval(taskName, intervalInMs);\n      return;\n    }\n\n    if (isTaskSchedulerPort && action === BrowserTaskSchedulerPortActions.clearAlarm) {\n      super.clearScheduledAlarm(alarmName).catch((error) => this.logService.error(error));\n    }\n  };\n}\n","import { Subscription } from \"rxjs\";\n\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { ScheduledTaskName } from \"@bitwarden/common/platform/scheduling\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\n\nimport {\n  BrowserTaskSchedulerPortActions,\n  BrowserTaskSchedulerPortMessage,\n  BrowserTaskSchedulerPortName,\n} from \"../abstractions/browser-task-scheduler.service\";\n\nimport { BrowserTaskSchedulerServiceImplementation } from \"./browser-task-scheduler.service\";\n\nexport class ForegroundTaskSchedulerService extends BrowserTaskSchedulerServiceImplementation {\n  private port: chrome.runtime.Port;\n\n  constructor(logService: LogService, stateProvider: StateProvider) {\n    super(logService, stateProvider);\n\n    this.port = chrome.runtime.connect({ name: BrowserTaskSchedulerPortName });\n  }\n\n  /**\n   * Sends a port message to the background to set up a fallback timeout. Also sets a timeout locally.\n   * This is done to ensure that the timeout triggers even if the popup is closed.\n   *\n   * @param taskName - The name of the task.\n   * @param delayInMs - The delay in milliseconds.\n   */\n  setTimeout(taskName: ScheduledTaskName, delayInMs: number): Subscription {\n    this.sendPortMessage({\n      action: BrowserTaskSchedulerPortActions.setTimeout,\n      taskName,\n      delayInMs,\n    });\n\n    return super.setTimeout(taskName, delayInMs);\n  }\n\n  /**\n   * Sends a port message to the background to set up a fallback interval. Also sets an interval locally.\n   * This is done to ensure that the interval triggers even if the popup is closed.\n   *\n   * @param taskName - The name of the task.\n   * @param intervalInMs - The interval in milliseconds.\n   * @param initialDelayInMs - The initial delay in milliseconds.\n   */\n  setInterval(\n    taskName: ScheduledTaskName,\n    intervalInMs: number,\n    initialDelayInMs?: number,\n  ): Subscription {\n    this.sendPortMessage({\n      action: BrowserTaskSchedulerPortActions.setInterval,\n      taskName,\n      intervalInMs,\n    });\n\n    return super.setInterval(taskName, intervalInMs, initialDelayInMs);\n  }\n\n  /**\n   * Sends a message to the background task scheduler.\n   *\n   * @param message - The message to send.\n   */\n  private sendPortMessage(message: BrowserTaskSchedulerPortMessage) {\n    this.port.postMessage(message);\n  }\n}\n","import { Subject } from \"rxjs\";\n\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n  StorageUpdate,\n} from \"../../abstractions/storage.service\";\n\nexport class MemoryStorageService\n  extends AbstractStorageService\n  implements ObservableStorageService\n{\n  protected store: Record<string, string> = {};\n  private updatesSubject = new Subject<StorageUpdate>();\n\n  get valuesRequireDeserialization(): boolean {\n    return true;\n  }\n  get updates$() {\n    return this.updatesSubject.asObservable();\n  }\n\n  get<T>(key: string): Promise<T> {\n    const json = this.store[key];\n    if (json) {\n      const obj = JSON.parse(json as string);\n      return Promise.resolve(obj as T);\n    }\n    return Promise.resolve(null);\n  }\n\n  async has(key: string): Promise<boolean> {\n    return (await this.get(key)) != null;\n  }\n\n  save<T>(key: string, obj: T): Promise<void> {\n    if (obj == null) {\n      return this.remove(key);\n    }\n    // TODO: Remove once foreground/background contexts are separated in browser\n    // Needed to ensure ownership of all memory by the context running the storage service\n    this.store[key] = JSON.stringify(obj);\n    this.updatesSubject.next({ key, updateType: \"save\" });\n    return Promise.resolve();\n  }\n\n  remove(key: string): Promise<void> {\n    delete this.store[key];\n    this.updatesSubject.next({ key, updateType: \"remove\" });\n    return Promise.resolve();\n  }\n}\n","// eslint-disable-next-line import/no-restricted-paths -- Implementation for memory storage specifically for browser backgrounds\nimport { MemoryStorageService } from \"@bitwarden/common/platform/state/storage/memory-storage.service\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\n\nimport { MemoryStoragePortMessage } from \"./port-messages\";\nimport { portName } from \"./port-name\";\n\nexport class BackgroundMemoryStorageService extends MemoryStorageService {\n  private _ports: chrome.runtime.Port[] = [];\n\n  constructor() {\n    super();\n\n    BrowserApi.addListener(chrome.runtime.onConnect, (port) => {\n      if (port.name !== portName(chrome.storage.session)) {\n        return;\n      }\n\n      this._ports.push(port);\n\n      const listenerCallback = this.onMessageFromForeground.bind(this);\n      port.onDisconnect.addListener(() => {\n        this._ports.splice(this._ports.indexOf(port), 1);\n        port.onMessage.removeListener(listenerCallback);\n      });\n      port.onMessage.addListener(listenerCallback);\n      // Initialize the new memory storage service with existing data\n      this.sendMessageTo(port, {\n        action: \"initialization\",\n        data: Array.from(Object.keys(this.store)),\n      });\n    });\n    this.updates$.subscribe((update) => {\n      this.broadcastMessage({\n        action: \"subject_update\",\n        data: update,\n      });\n    });\n  }\n\n  private async onMessageFromForeground(\n    message: MemoryStoragePortMessage,\n    port: chrome.runtime.Port,\n  ) {\n    if (message.originator === \"background\") {\n      return;\n    }\n\n    let result: unknown = null;\n\n    switch (message.action) {\n      case \"get\":\n      case \"has\": {\n        result = await this[message.action](message.key);\n        break;\n      }\n      case \"save\":\n        await this.save(message.key, JSON.parse((message.data as string) ?? null) as unknown);\n        break;\n      case \"remove\":\n        await this.remove(message.key);\n        break;\n    }\n\n    this.sendMessageTo(port, {\n      id: message.id,\n      key: message.key,\n      data: JSON.stringify(result),\n    });\n  }\n\n  private broadcastMessage(data: Omit<MemoryStoragePortMessage, \"originator\">) {\n    this._ports.forEach((port) => {\n      this.sendMessageTo(port, data);\n    });\n  }\n\n  private sendMessageTo(\n    port: chrome.runtime.Port,\n    data: Omit<MemoryStoragePortMessage, \"originator\">,\n  ) {\n    port.postMessage({\n      ...data,\n      originator: \"background\",\n    });\n  }\n}\n","import { AbstractStorageService, ObservableStorageService } from \"../abstractions/storage.service\";\n// eslint-disable-next-line import/no-restricted-paths\nimport { ClientLocations, StorageLocation } from \"../state/state-definition\";\n\nexport type PossibleLocation = StorageLocation | ClientLocations[keyof ClientLocations];\n\n/**\n * A provider for getting client specific computed storage locations and services.\n */\nexport class StorageServiceProvider {\n  constructor(\n    protected readonly diskStorageService: AbstractStorageService & ObservableStorageService,\n    protected readonly memoryStorageService: AbstractStorageService & ObservableStorageService,\n  ) {}\n\n  /**\n   * Computes the location and corresponding service for a given client.\n   *\n   * **NOTE** The default implementation does not respect client overrides and if clients\n   * have special overrides they are responsible for implementing this service.\n   * @param defaultLocation The default location to use if no client specific override is preferred.\n   * @param overrides Client specific overrides\n   * @returns The computed storage location and corresponding storage service to use to get/store state.\n   * @throws If there is no configured storage service for the given inputs.\n   */\n  get(\n    defaultLocation: PossibleLocation,\n    overrides: Partial<ClientLocations>,\n  ): [location: PossibleLocation, service: AbstractStorageService & ObservableStorageService] {\n    switch (defaultLocation) {\n      case \"disk\":\n        return [defaultLocation, this.diskStorageService];\n      case \"memory\":\n        return [defaultLocation, this.memoryStorageService];\n      default:\n        throw new Error(`Unexpected location: ${defaultLocation}`);\n    }\n  }\n}\n","import {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport {\n  PossibleLocation,\n  StorageServiceProvider,\n} from \"@bitwarden/common/platform/services/storage-service.provider\";\n// eslint-disable-next-line import/no-restricted-paths\nimport { ClientLocations } from \"@bitwarden/common/platform/state/state-definition\";\n\nexport class BrowserStorageServiceProvider extends StorageServiceProvider {\n  constructor(\n    diskStorageService: AbstractStorageService & ObservableStorageService,\n    limitedMemoryStorageService: AbstractStorageService & ObservableStorageService,\n    private largeObjectMemoryStorageService: AbstractStorageService & ObservableStorageService,\n    private readonly diskBackupLocalStorage: AbstractStorageService & ObservableStorageService,\n  ) {\n    super(diskStorageService, limitedMemoryStorageService);\n  }\n\n  override get(\n    defaultLocation: PossibleLocation,\n    overrides: Partial<ClientLocations>,\n  ): [location: PossibleLocation, service: AbstractStorageService & ObservableStorageService] {\n    const location = overrides[\"browser\"] ?? defaultLocation;\n    switch (location) {\n      case \"memory-large-object\":\n        return [\"memory-large-object\", this.largeObjectMemoryStorageService];\n      case \"disk-backup-local-storage\":\n        return [\"disk-backup-local-storage\", this.diskBackupLocalStorage];\n      default:\n        // Pass in computed location to super because they could have\n        // override default \"disk\" with web \"memory\".\n        return super.get(location, overrides);\n    }\n  }\n}\n","import { Observable, Subject, filter, firstValueFrom, map } from \"rxjs\";\n\nimport {\n  AbstractStorageService,\n  StorageUpdate,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\n\nimport { fromChromeEvent } from \"../browser/from-chrome-event\";\n\nimport { MemoryStoragePortMessage } from \"./port-messages\";\nimport { portName } from \"./port-name\";\n\nexport class ForegroundMemoryStorageService extends AbstractStorageService {\n  private _port: chrome.runtime.Port;\n  private _backgroundResponses$: Observable<MemoryStoragePortMessage>;\n  private updatesSubject = new Subject<StorageUpdate>();\n\n  get valuesRequireDeserialization(): boolean {\n    return true;\n  }\n  updates$;\n\n  constructor(private partitionName?: string) {\n    super();\n\n    this.updates$ = this.updatesSubject.asObservable();\n\n    let name = portName(chrome.storage.session);\n    if (this.partitionName) {\n      name = `${name}_${this.partitionName}`;\n    }\n    this._port = chrome.runtime.connect({ name });\n    this._backgroundResponses$ = fromChromeEvent(this._port.onMessage).pipe(\n      map(([message]) => message),\n      filter((message) => message.originator === \"background\"),\n    );\n\n    this._backgroundResponses$\n      .pipe(\n        filter(\n          (message) => message.action === \"subject_update\" || message.action === \"initialization\",\n        ),\n      )\n      .subscribe((message) => {\n        switch (message.action) {\n          case \"initialization\":\n            this.handleInitialize(message.data as string[]); // Map entries as array\n            break;\n          case \"subject_update\":\n            this.handleSubjectUpdate(message.data as StorageUpdate);\n            break;\n          default:\n            throw new Error(`Unknown action: ${message.action}`);\n        }\n      });\n  }\n\n  async get<T>(key: string): Promise<T> {\n    return await this.delegateToBackground<T>(\"get\", key);\n  }\n  async has(key: string): Promise<boolean> {\n    return await this.delegateToBackground<boolean>(\"has\", key);\n  }\n  async save<T>(key: string, obj: T): Promise<void> {\n    await this.delegateToBackground<T>(\"save\", key, obj);\n  }\n  async remove(key: string): Promise<void> {\n    await this.delegateToBackground<void>(\"remove\", key);\n  }\n\n  private async delegateToBackground<T>(\n    action: MemoryStoragePortMessage[\"action\"],\n    key: string,\n    data?: T,\n  ): Promise<T> {\n    const id = Utils.newGuid();\n    // listen for response before request\n    const response = firstValueFrom(\n      this._backgroundResponses$.pipe(\n        filter((message) => message.id === id),\n        map((message) => JSON.parse((message.data as string) ?? null) as T),\n      ),\n    );\n\n    this.sendMessage({\n      id: id,\n      key: key,\n      action: action,\n      data: JSON.stringify(data),\n    });\n\n    const result = await response;\n    return result;\n  }\n\n  private sendMessage(data: Omit<MemoryStoragePortMessage, \"originator\">) {\n    this._port.postMessage({\n      ...data,\n      originator: \"foreground\",\n    });\n  }\n\n  private handleInitialize(data: string[]) {\n    // TODO: this isn't a save, but we don't have a better indicator for this\n    data.forEach((key) => {\n      this.updatesSubject.next({ key, updateType: \"save\" });\n    });\n  }\n\n  private handleSubjectUpdate(data: StorageUpdate) {\n    this.updatesSubject.next(data);\n  }\n}\n","import { AbstractStorageService } from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { StorageOptions } from \"@bitwarden/common/platform/models/domain/storage-options\";\n\nimport { BrowserApi } from \"../browser/browser-api\";\nimport { OffscreenDocumentService } from \"../offscreen-document/abstractions/offscreen-document\";\n\nexport class OffscreenStorageService implements AbstractStorageService {\n  constructor(private readonly offscreenDocumentService: OffscreenDocumentService) {}\n\n  get valuesRequireDeserialization(): boolean {\n    return true;\n  }\n\n  async get<T>(key: string, options?: StorageOptions): Promise<T> {\n    return await this.offscreenDocumentService.withDocument<T>(\n      [chrome.offscreen.Reason.LOCAL_STORAGE],\n      \"backup storage of user data\",\n      async () => {\n        const response = await BrowserApi.sendMessageWithResponse<string>(\"localStorageGet\", {\n          key,\n        });\n        if (response != null) {\n          return JSON.parse(response);\n        }\n\n        return response;\n      },\n    );\n  }\n  async has(key: string, options?: StorageOptions): Promise<boolean> {\n    return (await this.get(key, options)) != null;\n  }\n\n  async save<T>(key: string, obj: T, options?: StorageOptions): Promise<void> {\n    await this.offscreenDocumentService.withDocument(\n      [chrome.offscreen.Reason.LOCAL_STORAGE],\n      \"backup storage of user data\",\n      async () =>\n        await BrowserApi.sendMessageWithResponse<void>(\"localStorageSave\", {\n          key,\n          value: JSON.stringify(obj),\n        }),\n    );\n  }\n  async remove(key: string, options?: StorageOptions): Promise<void> {\n    await this.offscreenDocumentService.withDocument(\n      [chrome.offscreen.Reason.LOCAL_STORAGE],\n      \"backup storage of user data\",\n      async () =>\n        await BrowserApi.sendMessageWithResponse<void>(\"localStorageRemove\", {\n          key,\n        }),\n    );\n  }\n}\n","import { Observable, concatMap, filter } from \"rxjs\";\n\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport {\n  CommandDefinition,\n  MessageListener,\n  MessageSender,\n  isExternalMessage,\n} from \"@bitwarden/common/platform/messaging\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\n\nimport { DO_FULL_SYNC } from \"./foreground-sync.service\";\n\nexport type FullSyncFinishedMessage = {\n  successfully: boolean;\n  errorMessage: string;\n  requestId: string;\n};\n\nexport const FULL_SYNC_FINISHED = new CommandDefinition<FullSyncFinishedMessage>(\n  \"fullSyncFinished\",\n);\n\nexport class SyncServiceListener {\n  constructor(\n    private readonly syncService: SyncService,\n    private readonly messageListener: MessageListener,\n    private readonly messageSender: MessageSender,\n    private readonly logService: LogService,\n  ) {}\n\n  listener$(): Observable<void> {\n    return this.messageListener.messages$(DO_FULL_SYNC).pipe(\n      filter((message) => isExternalMessage(message)),\n      concatMap(async ({ forceSync, allowThrowOnError, requestId }) => {\n        await this.doFullSync(forceSync, allowThrowOnError, requestId);\n      }),\n    );\n  }\n\n  private async doFullSync(forceSync: boolean, allowThrowOnError: boolean, requestId: string) {\n    try {\n      const result = await this.syncService.fullSync(forceSync, allowThrowOnError);\n      this.messageSender.send(FULL_SYNC_FINISHED, {\n        successfully: result,\n        errorMessage: null,\n        requestId,\n      });\n    } catch (err) {\n      this.logService.warning(\"Error while doing full sync in SyncServiceListener\", err);\n      this.messageSender.send(FULL_SYNC_FINISHED, {\n        successfully: false,\n        errorMessage: err?.message ?? \"Unknown Sync Error\",\n        requestId,\n      });\n    }\n  }\n}\n","import { filter, firstValueFrom, of, timeout } from \"rxjs\";\n\nimport { ApiService } from \"@bitwarden/common/abstractions/api.service\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { StateService } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport {\n  CommandDefinition,\n  MessageListener,\n  MessageSender,\n} from \"@bitwarden/common/platform/messaging\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { CoreSyncService } from \"@bitwarden/common/platform/sync/internal\";\nimport { SendApiService } from \"@bitwarden/common/tools/send/services/send-api.service.abstraction\";\nimport { InternalSendService } from \"@bitwarden/common/tools/send/services/send.service.abstraction\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\n\nimport { FULL_SYNC_FINISHED } from \"./sync-service.listener\";\n\nexport type FullSyncMessage = { forceSync: boolean; allowThrowOnError: boolean; requestId: string };\n\nexport const DO_FULL_SYNC = new CommandDefinition<FullSyncMessage>(\"doFullSync\");\n\nexport class ForegroundSyncService extends CoreSyncService {\n  constructor(\n    stateService: StateService,\n    folderService: InternalFolderService,\n    folderApiService: FolderApiServiceAbstraction,\n    messageSender: MessageSender,\n    logService: LogService,\n    cipherService: CipherService,\n    collectionService: CollectionService,\n    apiService: ApiService,\n    accountService: AccountService,\n    authService: AuthService,\n    sendService: InternalSendService,\n    sendApiService: SendApiService,\n    private readonly messageListener: MessageListener,\n    stateProvider: StateProvider,\n  ) {\n    super(\n      stateService,\n      folderService,\n      folderApiService,\n      messageSender,\n      logService,\n      cipherService,\n      collectionService,\n      apiService,\n      accountService,\n      authService,\n      sendService,\n      sendApiService,\n      stateProvider,\n    );\n  }\n\n  async fullSync(forceSync: boolean, allowThrowOnError: boolean = false): Promise<boolean> {\n    this.syncInProgress = true;\n    try {\n      const requestId = Utils.newGuid();\n      const syncCompletedPromise = firstValueFrom(\n        this.messageListener.messages$(FULL_SYNC_FINISHED).pipe(\n          filter((m) => m.requestId === requestId),\n          timeout({\n            first: 30_000,\n            // If we haven't heard back in 30 seconds, just pretend we heard back about an unsuccesful sync.\n            with: () => {\n              this.logService.warning(\n                \"ForegroundSyncService did not receive a message back in a reasonable time.\",\n              );\n              return of({ successfully: false, errorMessage: \"Sync timed out.\" });\n            },\n          }),\n        ),\n      );\n      this.messageSender.send(DO_FULL_SYNC, { forceSync, allowThrowOnError, requestId });\n      const result = await syncCompletedPromise;\n\n      if (allowThrowOnError && result.errorMessage != null) {\n        throw new Error(result.errorMessage);\n      }\n\n      return result.successfully;\n    } finally {\n      this.syncInProgress = false;\n    }\n  }\n}\n","import { map, share } from \"rxjs\";\n\nimport { Message } from \"@bitwarden/common/platform/messaging\";\nimport { tagAsExternal } from \"@bitwarden/common/platform/messaging/internal\";\n\nimport { fromChromeEvent } from \"../browser/from-chrome-event\";\n\n/**\n * Creates an observable that listens to messages through `chrome.runtime.onMessage`.\n * @returns An observable stream of messages.\n */\nexport const fromChromeRuntimeMessaging = () => {\n  return fromChromeEvent(chrome.runtime.onMessage).pipe(\n    map(([message, sender]) => {\n      message ??= {};\n\n      // Force the sender onto the message as long as we won't overwrite anything\n      if (!(\"webExtSender\" in message)) {\n        message.webExtSender = sender;\n      }\n\n      return message;\n    }),\n    tagAsExternal<Message<Record<string, unknown>>>(),\n    share(),\n  );\n};\n","import { combineLatest, concatMap, filter, firstValueFrom, map, timeout } from \"rxjs\";\n\nimport { LogoutReason } from \"@bitwarden/auth/common\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { TaskSchedulerService, ScheduledTaskNames } from \"@bitwarden/common/platform/scheduling\";\n\nimport { SearchService } from \"../../abstractions/search.service\";\nimport { VaultTimeoutSettingsService } from \"../../abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { VaultTimeoutService as VaultTimeoutServiceAbstraction } from \"../../abstractions/vault-timeout/vault-timeout.service\";\nimport { AccountService } from \"../../auth/abstractions/account.service\";\nimport { AuthService } from \"../../auth/abstractions/auth.service\";\nimport { InternalMasterPasswordServiceAbstraction } from \"../../auth/abstractions/master-password.service.abstraction\";\nimport { AuthenticationStatus } from \"../../auth/enums/authentication-status\";\nimport { VaultTimeoutAction } from \"../../enums/vault-timeout-action.enum\";\nimport { MessagingService } from \"../../platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"../../platform/abstractions/platform-utils.service\";\nimport { StateService } from \"../../platform/abstractions/state.service\";\nimport { StateEventRunnerService } from \"../../platform/state\";\nimport { UserId } from \"../../types/guid\";\nimport { CipherService } from \"../../vault/abstractions/cipher.service\";\nimport { CollectionService } from \"../../vault/abstractions/collection.service\";\nimport { FolderService } from \"../../vault/abstractions/folder/folder.service.abstraction\";\n\nexport class VaultTimeoutService implements VaultTimeoutServiceAbstraction {\n  private inited = false;\n\n  constructor(\n    private accountService: AccountService,\n    private masterPasswordService: InternalMasterPasswordServiceAbstraction,\n    private cipherService: CipherService,\n    private folderService: FolderService,\n    private collectionService: CollectionService,\n    protected platformUtilsService: PlatformUtilsService,\n    private messagingService: MessagingService,\n    private searchService: SearchService,\n    private stateService: StateService,\n    private authService: AuthService,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsService,\n    private stateEventRunnerService: StateEventRunnerService,\n    private taskSchedulerService: TaskSchedulerService,\n    protected logService: LogService,\n    private lockedCallback: (userId?: string) => Promise<void> = null,\n    private loggedOutCallback: (\n      logoutReason: LogoutReason,\n      userId?: string,\n    ) => Promise<void> = null,\n  ) {\n    this.taskSchedulerService.registerTaskHandler(\n      ScheduledTaskNames.vaultTimeoutCheckInterval,\n      () => this.checkVaultTimeout(),\n    );\n  }\n\n  async init(checkOnInterval: boolean) {\n    if (this.inited) {\n      return;\n    }\n\n    this.inited = true;\n    if (checkOnInterval) {\n      this.startCheck();\n    }\n  }\n\n  startCheck() {\n    this.checkVaultTimeout().catch((error) => this.logService.error(error));\n    this.taskSchedulerService.setInterval(\n      ScheduledTaskNames.vaultTimeoutCheckInterval,\n      10 * 1000, // check every 10 seconds\n    );\n  }\n\n  async checkVaultTimeout(): Promise<void> {\n    // Get whether or not the view is open a single time so it can be compared for each user\n    const isViewOpen = await this.platformUtilsService.isViewOpen();\n\n    await firstValueFrom(\n      combineLatest([\n        this.accountService.activeAccount$,\n        this.accountService.accountActivity$,\n      ]).pipe(\n        concatMap(async ([activeAccount, accountActivity]) => {\n          const activeUserId = activeAccount?.id;\n          for (const userIdString in accountActivity) {\n            const userId = userIdString as UserId;\n            if (\n              userId != null &&\n              (await this.shouldLock(userId, accountActivity[userId], activeUserId, isViewOpen))\n            ) {\n              await this.executeTimeoutAction(userId);\n            }\n          }\n        }),\n      ),\n    );\n  }\n\n  async lock(userId?: UserId): Promise<void> {\n    const authed = await this.stateService.getIsAuthenticated({ userId: userId });\n    if (!authed) {\n      return;\n    }\n\n    const availableActions = await firstValueFrom(\n      this.vaultTimeoutSettingsService.availableVaultTimeoutActions$(userId),\n    );\n    const supportsLock = availableActions.includes(VaultTimeoutAction.Lock);\n    if (!supportsLock) {\n      await this.logOut(userId);\n    }\n\n    const currentUserId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n    );\n\n    const lockingUserId = userId ?? currentUserId;\n\n    // HACK: Start listening for the transition of the locking user from something to the locked state.\n    // This is very much a hack to ensure that the authentication status to retrievable right after\n    // it does its work. Particularly the `lockedCallback` and `\"locked\"` message. Instead\n    // lockedCallback should be deprecated and people should subscribe and react to `authStatusFor$` themselves.\n    const lockPromise = firstValueFrom(\n      this.authService.authStatusFor$(lockingUserId).pipe(\n        filter((authStatus) => authStatus === AuthenticationStatus.Locked),\n        timeout({\n          first: 5_000,\n          with: () => {\n            throw new Error(\"The lock process did not complete in a reasonable amount of time.\");\n          },\n        }),\n      ),\n    );\n\n    if (userId == null || userId === currentUserId) {\n      await this.searchService.clearIndex();\n      await this.folderService.clearCache();\n      await this.collectionService.clearActiveUserCache();\n    }\n\n    await this.masterPasswordService.clearMasterKey(lockingUserId);\n\n    await this.stateService.setUserKeyAutoUnlock(null, { userId: lockingUserId });\n    await this.stateService.setCryptoMasterKeyAuto(null, { userId: lockingUserId });\n\n    await this.cipherService.clearCache(lockingUserId);\n\n    await this.stateEventRunnerService.handleEvent(\"lock\", lockingUserId);\n\n    // HACK: Sit here and wait for the the auth status to transition to `Locked`\n    // to ensure the message and lockedCallback will get the correct status\n    // if/when they call it.\n    await lockPromise;\n\n    this.messagingService.send(\"locked\", { userId: lockingUserId });\n\n    if (this.lockedCallback != null) {\n      await this.lockedCallback(userId);\n    }\n  }\n\n  async logOut(userId?: string): Promise<void> {\n    if (this.loggedOutCallback != null) {\n      await this.loggedOutCallback(\"vaultTimeout\", userId);\n    }\n  }\n\n  private async shouldLock(\n    userId: string,\n    lastActive: Date,\n    activeUserId: string,\n    isViewOpen: boolean,\n  ): Promise<boolean> {\n    if (isViewOpen && userId === activeUserId) {\n      // We know a view is open and this is the currently active user\n      // which means they are likely looking at their vault\n      // and they should not lock.\n      return false;\n    }\n\n    const authStatus = await this.authService.getAuthStatus(userId);\n    if (\n      authStatus === AuthenticationStatus.Locked ||\n      authStatus === AuthenticationStatus.LoggedOut\n    ) {\n      return false;\n    }\n\n    const vaultTimeout = await firstValueFrom(\n      this.vaultTimeoutSettingsService.getVaultTimeoutByUserId$(userId),\n    );\n\n    if (typeof vaultTimeout === \"string\") {\n      return false;\n    }\n\n    if (lastActive == null) {\n      return false;\n    }\n\n    const vaultTimeoutSeconds = vaultTimeout * 60;\n    const diffSeconds = (new Date().getTime() - lastActive.getTime()) / 1000;\n    return diffSeconds >= vaultTimeoutSeconds;\n  }\n\n  private async executeTimeoutAction(userId: UserId): Promise<void> {\n    const timeoutAction = await firstValueFrom(\n      this.vaultTimeoutSettingsService.getVaultTimeoutActionByUserId$(userId),\n    );\n    timeoutAction === VaultTimeoutAction.LogOut\n      ? await this.logOut(userId)\n      : await this.lock(userId);\n  }\n}\n","import { VaultTimeoutService as BaseVaultTimeoutService } from \"@bitwarden/common/services/vault-timeout/vault-timeout.service\";\n\nimport { SafariApp } from \"../../browser/safariApp\";\n\nexport default class VaultTimeoutService extends BaseVaultTimeoutService {\n  startCheck() {\n    if (this.platformUtilsService.isSafari()) {\n      this.checkVaultTimeout().catch((error) => this.logService.error(error));\n      this.checkSafari().catch((error) => this.logService.error(error));\n      return;\n    }\n\n    super.startCheck();\n  }\n\n  // This is a work-around to safari adding an arbitrary delay to setTimeout and\n  //  setIntervals. It works by calling the native extension which sleeps for 10s,\n  //  efficiently replicating setInterval.\n  async checkSafari() {\n    // eslint-disable-next-line\n    while (true) {\n      try {\n        await SafariApp.sendMessageToApp(\"sleep\");\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.checkVaultTimeout();\n      } catch (e) {\n        // eslint-disable-next-line\n        console.log(\"Exception Safari VaultTimeout\", e);\n      }\n    }\n  }\n}\n","import {\n  Mv2ScriptInjectionDetails,\n  Mv3ScriptInjectionDetails,\n} from \"../../platform/services/abstractions/script-injector.service\";\n\ntype FilelessImporterInjectedScriptsConfigurations = {\n  LpSuppressImportDownload: {\n    mv2: Mv2ScriptInjectionDetails;\n    mv3: Mv3ScriptInjectionDetails;\n  };\n};\n\nconst FilelessImporterInjectedScriptsConfig: FilelessImporterInjectedScriptsConfigurations = {\n  LpSuppressImportDownload: {\n    mv2: {\n      file: \"content/lp-suppress-import-download-script-append-mv2.js\",\n    },\n    mv3: {\n      file: \"content/lp-suppress-import-download.js\",\n      world: \"MAIN\",\n    },\n  },\n} as const;\n\nexport { FilelessImporterInjectedScriptsConfig };\n","const FilelessImportType = {\n  LP: \"LP\",\n} as const;\n\ntype FilelessImportTypeKeys = (typeof FilelessImportType)[keyof typeof FilelessImportType];\n\nconst FilelessImportPort = {\n  NotificationBar: \"fileless-importer-notification-bar\",\n  LpImporter: \"lp-fileless-importer\",\n} as const;\n\nexport { FilelessImportType, FilelessImportTypeKeys, FilelessImportPort };\n","import { firstValueFrom } from \"rxjs\";\n\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { SyncService } from \"@bitwarden/common/vault/abstractions/sync/sync.service.abstraction\";\nimport { ImportServiceAbstraction } from \"@bitwarden/importer/core\";\n\nimport NotificationBackground from \"../../autofill/background/notification.background\";\nimport { BrowserApi } from \"../../platform/browser/browser-api\";\nimport { ScriptInjectorService } from \"../../platform/services/abstractions/script-injector.service\";\nimport { FilelessImporterInjectedScriptsConfig } from \"../config/fileless-importer-injected-scripts\";\nimport {\n  FilelessImportPort,\n  FilelessImportType,\n  FilelessImportTypeKeys,\n} from \"../enums/fileless-import.enums\";\n\nimport {\n  ImportNotificationMessageHandlers,\n  LpImporterMessageHandlers,\n  FilelessImporterBackground as FilelessImporterBackgroundInterface,\n  FilelessImportPortMessage,\n} from \"./abstractions/fileless-importer.background\";\n\nclass FilelessImporterBackground implements FilelessImporterBackgroundInterface {\n  private static readonly filelessImporterPortNames: Set<string> = new Set([\n    FilelessImportPort.LpImporter,\n    FilelessImportPort.NotificationBar,\n  ]);\n  private importNotificationsPort: chrome.runtime.Port;\n  private lpImporterPort: chrome.runtime.Port;\n  private readonly importNotificationsPortMessageHandlers: ImportNotificationMessageHandlers = {\n    startFilelessImport: ({ message }) => this.startFilelessImport(message.importType),\n    cancelFilelessImport: ({ message, port }) =>\n      this.cancelFilelessImport(message.importType, port.sender),\n  };\n  private readonly lpImporterPortMessageHandlers: LpImporterMessageHandlers = {\n    displayLpImportNotification: ({ port }) =>\n      this.displayFilelessImportNotification(port.sender.tab, FilelessImportType.LP),\n    startLpImport: ({ message }) => this.triggerLpImport(message.data),\n  };\n\n  /**\n   * Creates a new instance of the fileless importer background logic.\n   *\n   * @param configService - Identifies if the feature flag is enabled.\n   * @param authService - Verifies if the auth status of the user.\n   * @param policyService - Identifies if the user account has a policy that disables personal ownership.\n   * @param notificationBackground - Used to inject the notification bar into the tab.\n   * @param importService - Used to import the export data into the vault.\n   * @param syncService - Used to trigger a full sync after the import is completed.\n   * @param scriptInjectorService - Used to inject content scripts that initialize the import process\n   */\n  constructor(\n    private configService: ConfigService,\n    private authService: AuthService,\n    private policyService: PolicyService,\n    private notificationBackground: NotificationBackground,\n    private importService: ImportServiceAbstraction,\n    private syncService: SyncService,\n    private scriptInjectorService: ScriptInjectorService,\n  ) {}\n\n  /**\n   * Initializes the fileless importer background logic.\n   */\n  init() {\n    this.setupPortMessageListeners();\n  }\n\n  /**\n   * Starts an import of the export data pulled from the tab.\n   *\n   * @param importType - The type of import to start. Identifies the used content script.\n   */\n  private startFilelessImport(importType: FilelessImportTypeKeys) {\n    if (importType === FilelessImportType.LP) {\n      this.lpImporterPort?.postMessage({ command: \"startLpFilelessImport\" });\n    }\n  }\n\n  /**\n   * Cancels an import of the export data pulled from the tab. This closes any\n   * existing notifications that are present in the tab, and triggers importer\n   * specific behavior based on the import type.\n   *\n   * @param importType - The type of import to cancel. Identifies the used content script.\n   * @param sender - The sender of the message.\n   */\n  private async cancelFilelessImport(\n    importType: FilelessImportTypeKeys,\n    sender: chrome.runtime.MessageSender,\n  ) {\n    if (importType === FilelessImportType.LP) {\n      this.triggerLpImporterCsvDownload();\n    }\n\n    await BrowserApi.tabSendMessage(sender.tab, { command: \"closeNotificationBar\" });\n  }\n\n  /**\n   * Injects the notification bar into the passed tab.\n   *\n   * @param tab\n   * @param importType\n   */\n  private async displayFilelessImportNotification(tab: chrome.tabs.Tab, importType: string) {\n    await this.notificationBackground.requestFilelessImport(tab, importType);\n  }\n\n  /**\n   * Triggers the download of the CSV file from the LP importer. This is triggered\n   * when the user opts to not save the export to Bitwarden within the notification bar.\n   */\n  private triggerLpImporterCsvDownload() {\n    this.lpImporterPort?.postMessage({ command: \"triggerCsvDownload\" });\n    this.lpImporterPort?.disconnect();\n  }\n\n  /**\n   * Completes the import process for the LP importer. This is triggered when the\n   * user opts to save the export to Bitwarden within the notification bar.\n   *\n   * @param data - The export data to import.\n   * @param sender - The sender of the message.\n   */\n  private async triggerLpImport(data: string) {\n    if (!data) {\n      return;\n    }\n\n    const promptForPassword_callback = async () => \"\";\n    const importer = this.importService.getImporter(\n      \"lastpasscsv\",\n      promptForPassword_callback,\n      null,\n    );\n\n    try {\n      const result = await this.importService.import(importer, data, null, null, false);\n      if (result.success) {\n        this.importNotificationsPort?.postMessage({ command: \"filelessImportCompleted\" });\n        await this.syncService.fullSync(true);\n      }\n    } catch (error) {\n      this.importNotificationsPort?.postMessage({\n        command: \"filelessImportFailed\",\n        importErrorMessage: Object.values(error).length\n          ? error\n          : chrome.i18n.getMessage(\"importNetworkError\"),\n      });\n    }\n  }\n\n  /**\n   * Identifies if the user account has a policy that disables personal ownership.\n   */\n  private async removeIndividualVault(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n    );\n  }\n\n  /**\n   * Sets up onConnect listeners for the extension.\n   */\n  private setupPortMessageListeners() {\n    chrome.runtime.onConnect.addListener(this.handlePortOnConnect);\n  }\n\n  /**\n   * Handles connections from content scripts that affect the fileless importer behavior.\n   * Is used to facilitate the passing of data and user actions to enact the import\n   * of web content to the Bitwarden vault. Along with this, a check is made to ensure\n   * that the feature flag is enabled and the user is authenticated.\n   */\n  private handlePortOnConnect = async (port: chrome.runtime.Port) => {\n    if (!FilelessImporterBackground.filelessImporterPortNames.has(port.name)) {\n      return;\n    }\n\n    const filelessImportFeatureFlagEnabled = await this.configService.getFeatureFlag(\n      FeatureFlag.BrowserFilelessImport,\n    );\n    const userAuthStatus = await this.authService.getAuthStatus();\n    const removeIndividualVault = await this.removeIndividualVault();\n    const filelessImportEnabled =\n      filelessImportFeatureFlagEnabled &&\n      userAuthStatus === AuthenticationStatus.Unlocked &&\n      !removeIndividualVault;\n    port.postMessage({ command: \"verifyFeatureFlag\", filelessImportEnabled });\n\n    if (!filelessImportEnabled) {\n      return;\n    }\n\n    port.onMessage.addListener(this.handleImporterPortMessage);\n    port.onDisconnect.addListener(this.handleImporterPortDisconnect);\n\n    switch (port.name) {\n      case FilelessImportPort.LpImporter:\n        this.lpImporterPort = port;\n        await this.scriptInjectorService.inject({\n          tabId: port.sender.tab.id,\n          injectDetails: { runAt: \"document_start\" },\n          mv2Details: FilelessImporterInjectedScriptsConfig.LpSuppressImportDownload.mv2,\n          mv3Details: FilelessImporterInjectedScriptsConfig.LpSuppressImportDownload.mv3,\n        });\n        break;\n      case FilelessImportPort.NotificationBar:\n        this.importNotificationsPort = port;\n        break;\n    }\n  };\n\n  /**\n   * Handles messages that are sent from fileless importer content scripts.\n   * @param message - The message that was sent.\n   * @param port - The port that the message was sent from.\n   */\n  private handleImporterPortMessage = (\n    message: FilelessImportPortMessage,\n    port: chrome.runtime.Port,\n  ) => {\n    let handler: CallableFunction | undefined;\n\n    switch (port.name) {\n      case FilelessImportPort.LpImporter:\n        handler = this.lpImporterPortMessageHandlers[message.command];\n        break;\n      case FilelessImportPort.NotificationBar:\n        handler = this.importNotificationsPortMessageHandlers[message.command];\n        break;\n    }\n\n    if (!handler) {\n      return;\n    }\n\n    handler({ message, port });\n  };\n\n  /**\n   * Handles disconnections from fileless importer content scripts.\n   * @param port - The port that was disconnected.\n   */\n  private handleImporterPortDisconnect = (port: chrome.runtime.Port) => {\n    switch (port.name) {\n      case FilelessImportPort.LpImporter:\n        this.lpImporterPort = null;\n        break;\n      case FilelessImportPort.NotificationBar:\n        this.importNotificationsPort = null;\n        break;\n    }\n  };\n}\n\nexport default FilelessImporterBackground;\n","import { CipherType } from \"@bitwarden/common/vault/enums\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nimport { CipherStatus } from \"./cipher-status.model\";\n\nexport type VaultFilterFunction = (cipher: CipherView) => boolean;\n\nexport class VaultFilter {\n  cipherType?: CipherType;\n  selectedCollection = false; // This is needed because of how the \"Unassigned\" collection works. It has a null id.\n  selectedCollectionId?: string;\n  status?: CipherStatus;\n  selectedFolder = false; // This is needed because of how the \"No Folder\" folder works. It has a null id.\n  selectedFolderId?: string;\n  selectedOrganizationId?: string;\n  myVaultOnly = false;\n  refreshCollectionsAndFolders = false;\n\n  constructor(init?: Partial<VaultFilter>) {\n    Object.assign(this, init);\n  }\n\n  resetFilter() {\n    this.cipherType = null;\n    this.status = null;\n    this.selectedCollection = false;\n    this.selectedCollectionId = null;\n    this.selectedFolder = false;\n    this.selectedFolderId = null;\n  }\n\n  resetOrganization() {\n    this.myVaultOnly = false;\n    this.selectedOrganizationId = null;\n    this.resetFilter();\n  }\n\n  buildFilter(): VaultFilterFunction {\n    return (cipher) => {\n      let cipherPassesFilter = true;\n      if (this.status === \"favorites\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.favorite;\n      }\n      if (this.status === \"trash\" && cipherPassesFilter) {\n        cipherPassesFilter = cipher.isDeleted;\n      }\n      if (this.cipherType != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.type === this.cipherType;\n      }\n      if (this.selectedFolder && this.selectedFolderId == null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId == null;\n      }\n      if (this.selectedFolder && this.selectedFolderId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.folderId === this.selectedFolderId;\n      }\n      if (this.selectedCollection && this.selectedCollectionId == null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.organizationId != null &&\n          (cipher.collectionIds == null || cipher.collectionIds.length === 0);\n      }\n      if (this.selectedCollection && this.selectedCollectionId != null && cipherPassesFilter) {\n        cipherPassesFilter =\n          cipher.collectionIds != null && cipher.collectionIds.includes(this.selectedCollectionId);\n      }\n      if (this.selectedOrganizationId != null && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === this.selectedOrganizationId;\n      }\n      if (this.myVaultOnly && cipherPassesFilter) {\n        cipherPassesFilter = cipher.organizationId === null;\n      }\n      return cipherPassesFilter;\n    };\n  }\n}\n","import { map, Observable } from \"rxjs\";\n\nimport { I18nService } from \"../../../platform/abstractions/i18n.service\";\nimport { Utils } from \"../../../platform/misc/utils\";\nimport { UserId } from \"../../../types/guid\";\nimport { OrganizationData } from \"../../models/data/organization.data\";\nimport { Organization } from \"../../models/domain/organization\";\n\nexport function canAccessVaultTab(org: Organization): boolean {\n  return org.canViewAllCollections;\n}\n\nexport function canAccessSettingsTab(org: Organization): boolean {\n  return (\n    org.isOwner ||\n    org.canManagePolicies ||\n    org.canManageSso ||\n    org.canManageScim ||\n    org.canAccessImportExport ||\n    org.canManageDeviceApprovals\n  );\n}\n\nexport function canAccessMembersTab(org: Organization): boolean {\n  return org.canManageUsers || org.canManageUsersPassword;\n}\n\nexport function canAccessGroupsTab(org: Organization): boolean {\n  return org.canManageGroups;\n}\n\nexport function canAccessReportingTab(org: Organization): boolean {\n  return org.canAccessReports || org.canAccessEventLogs;\n}\n\nexport function canAccessBillingTab(org: Organization): boolean {\n  return org.isOwner;\n}\n\nexport function canAccessOrgAdmin(org: Organization): boolean {\n  // Admin console can only be accessed by Owners for disabled organizations\n  if (!org.enabled && !org.isOwner) {\n    return false;\n  }\n  return (\n    canAccessMembersTab(org) ||\n    canAccessGroupsTab(org) ||\n    canAccessReportingTab(org) ||\n    canAccessBillingTab(org) ||\n    canAccessSettingsTab(org) ||\n    canAccessVaultTab(org)\n  );\n}\n\nexport function getOrganizationById(id: string) {\n  return map<Organization[], Organization | undefined>((orgs) => orgs.find((o) => o.id === id));\n}\n\nexport function canAccessAdmin(i18nService: I18nService) {\n  return map<Organization[], Organization[]>((orgs) =>\n    orgs.filter(canAccessOrgAdmin).sort(Utils.getSortFunction(i18nService, \"name\")),\n  );\n}\n\n/**\n * @deprecated\n * To be removed after Flexible Collections.\n **/\nexport function canAccessImportExport(i18nService: I18nService) {\n  return map<Organization[], Organization[]>((orgs) =>\n    orgs\n      .filter((org) => org.canAccessImportExport)\n      .sort(Utils.getSortFunction(i18nService, \"name\")),\n  );\n}\n\nexport function canAccessImport(i18nService: I18nService) {\n  return map<Organization[], Organization[]>((orgs) =>\n    orgs\n      .filter((org) => org.canAccessImportExport || org.canCreateNewCollections)\n      .sort(Utils.getSortFunction(i18nService, \"name\")),\n  );\n}\n\n/**\n * Returns `true` if a user is a member of an organization (rather than only being a ProviderUser)\n * @deprecated Use organizationService.organizations$ with a filter instead\n */\nexport function isMember(org: Organization): boolean {\n  return org.isMember;\n}\n\n/**\n * Publishes an observable stream of organizations. This service is meant to\n * be used widely across Bitwarden as the primary way of fetching organizations.\n * Risky operations like updates are isolated to the\n * internal extension `InternalOrganizationServiceAbstraction`.\n */\nexport abstract class OrganizationService {\n  /**\n   * Publishes state for all organizations under the active user.\n   * @returns An observable list of organizations\n   */\n  organizations$: Observable<Organization[]>;\n\n  // @todo Clean these up. Continuing to expand them is not recommended.\n  // @see https://bitwarden.atlassian.net/browse/AC-2252\n  memberOrganizations$: Observable<Organization[]>;\n  /**\n   * @deprecated This is currently only used in the CLI, and should not be\n   * used in any new calls. Use get$ instead for the time being, and we'll be\n   * removing this method soon. See Jira for details:\n   * https://bitwarden.atlassian.net/browse/AC-2252.\n   */\n  getFromState: (id: string) => Promise<Organization>;\n  canManageSponsorships$: Observable<boolean>;\n  hasOrganizations: () => Promise<boolean>;\n  get$: (id: string) => Observable<Organization | undefined>;\n  get: (id: string) => Promise<Organization>;\n  /**\n   * @deprecated This method is only used in key connector and will be removed soon as part of https://bitwarden.atlassian.net/browse/AC-2252.\n   */\n  getAll: (userId?: string) => Promise<Organization[]>;\n\n  /**\n   * Publishes state for all organizations for the given user id or the active user.\n   */\n  getAll$: (userId?: UserId) => Observable<Organization[]>;\n}\n\n/**\n * Big scary buttons that **update** organization state. These should only be\n * called from within admin-console scoped code. Extends the base\n * `OrganizationService` for easy access to `get` calls.\n * @internal\n */\nexport abstract class InternalOrganizationServiceAbstraction extends OrganizationService {\n  /**\n   * Replaces state for the provided organization, or creates it if not found.\n   * @param organization The organization state being saved.\n   * @param userId The userId to replace state for. Defaults to the active\n   * user.\n   */\n  upsert: (OrganizationData: OrganizationData) => Promise<void>;\n\n  /**\n   * Replaces state for the entire registered organization list for the active user.\n   * You probably don't want this unless you're calling from a full sync\n   * operation or a logout. See `upsert` for creating & updating a single\n   * organization in the state.\n   * @param organizations A complete list of all organization state for the active\n   * user.\n   * @param userId The userId to replace state for. Defaults to the active\n   * user.\n   */\n  replace: (organizations: { [id: string]: OrganizationData }, userId?: UserId) => Promise<void>;\n}\n","import { ITreeNodeObject, TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\n\nexport class DynamicTreeNode<T extends ITreeNodeObject> {\n  fullList: T[];\n  nestedList: TreeNode<T>[];\n\n  hasId(id: string): boolean {\n    return this.fullList != null && this.fullList.filter((i: T) => i.id === id).length > 0;\n  }\n\n  constructor(init?: Partial<DynamicTreeNode<T>>) {\n    Object.assign(this, init);\n  }\n}\n","import { UserKeyDefinition, VAULT_FILTER_DISK } from \"../../../platform/state\";\n\nexport const COLLAPSED_GROUPINGS = UserKeyDefinition.array<string>(\n  VAULT_FILTER_DISK,\n  \"collapsedGroupings\",\n  {\n    deserializer: (obj) => obj,\n    clearOn: [\"logout\", \"lock\"],\n  },\n);\n","import { Observable } from \"rxjs\";\n\nimport { UserKeyRotationDataProvider } from \"@bitwarden/auth/common\";\n\nimport { SymmetricCryptoKey } from \"../../../platform/models/domain/symmetric-crypto-key\";\nimport { UserId } from \"../../../types/guid\";\nimport { UserKey } from \"../../../types/key\";\nimport { FolderData } from \"../../models/data/folder.data\";\nimport { Folder } from \"../../models/domain/folder\";\nimport { FolderWithIdRequest } from \"../../models/request/folder-with-id.request\";\nimport { FolderView } from \"../../models/view/folder.view\";\n\nexport abstract class FolderService implements UserKeyRotationDataProvider<FolderWithIdRequest> {\n  folders$: Observable<Folder[]>;\n  folderViews$: Observable<FolderView[]>;\n\n  clearCache: () => Promise<void>;\n  encrypt: (model: FolderView, key?: SymmetricCryptoKey) => Promise<Folder>;\n  get: (id: string) => Promise<Folder>;\n  getDecrypted$: (id: string) => Observable<FolderView | undefined>;\n  getAllFromState: () => Promise<Folder[]>;\n  /**\n   * @deprecated Only use in CLI!\n   */\n  getFromState: (id: string) => Promise<Folder>;\n  /**\n   * @deprecated Only use in CLI!\n   */\n  getAllDecryptedFromState: () => Promise<FolderView[]>;\n  decryptFolders: (folders: Folder[]) => Promise<FolderView[]>;\n  /**\n   * Returns user folders re-encrypted with the new user key.\n   * @param originalUserKey the original user key\n   * @param newUserKey the new user key\n   * @param userId the user id\n   * @throws Error if new user key is null\n   * @returns a list of user folders that have been re-encrypted with the new user key\n   */\n  getRotatedData: (\n    originalUserKey: UserKey,\n    newUserKey: UserKey,\n    userId: UserId,\n  ) => Promise<FolderWithIdRequest[]>;\n}\n\nexport abstract class InternalFolderService extends FolderService {\n  upsert: (folder: FolderData | FolderData[]) => Promise<void>;\n  replace: (folders: { [id: string]: FolderData }, userId: UserId) => Promise<void>;\n  clear: (userId?: string) => Promise<void>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserKeyRotationDataProvider } from \"@bitwarden/auth/common\";\nimport { LocalData } from \"@bitwarden/common/vault/models/data/local.data\";\n\nimport { UriMatchStrategySetting } from \"../../models/domain/domain-service\";\nimport { SymmetricCryptoKey } from \"../../platform/models/domain/symmetric-crypto-key\";\nimport { CipherId, CollectionId, OrganizationId, UserId } from \"../../types/guid\";\nimport { UserKey } from \"../../types/key\";\nimport { CipherType } from \"../enums/cipher-type\";\nimport { CipherData } from \"../models/data/cipher.data\";\nimport { Cipher } from \"../models/domain/cipher\";\nimport { Field } from \"../models/domain/field\";\nimport { CipherWithIdRequest } from \"../models/request/cipher-with-id.request\";\nimport { CipherView } from \"../models/view/cipher.view\";\nimport { FieldView } from \"../models/view/field.view\";\nimport { AddEditCipherInfo } from \"../types/add-edit-cipher-info\";\n\nexport abstract class CipherService implements UserKeyRotationDataProvider<CipherWithIdRequest> {\n  cipherViews$: Observable<Record<CipherId, CipherView>>;\n  ciphers$: Observable<Record<CipherId, CipherData>>;\n  localData$: Observable<Record<CipherId, LocalData>>;\n  /**\n   *  An observable monitoring the add/edit cipher info saved to memory.\n   */\n  addEditCipherInfo$: Observable<AddEditCipherInfo>;\n  clearCache: (userId?: string) => Promise<void>;\n  encrypt: (\n    model: CipherView,\n    userId: UserId,\n    keyForEncryption?: SymmetricCryptoKey,\n    keyForCipherKeyDecryption?: SymmetricCryptoKey,\n    originalCipher?: Cipher,\n  ) => Promise<Cipher>;\n  encryptFields: (fieldsModel: FieldView[], key: SymmetricCryptoKey) => Promise<Field[]>;\n  encryptField: (fieldModel: FieldView, key: SymmetricCryptoKey) => Promise<Field>;\n  get: (id: string) => Promise<Cipher>;\n  getAll: () => Promise<Cipher[]>;\n  getAllDecrypted: () => Promise<CipherView[]>;\n  getAllDecryptedForGrouping: (groupingId: string, folder?: boolean) => Promise<CipherView[]>;\n  getAllDecryptedForUrl: (\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch?: UriMatchStrategySetting,\n  ) => Promise<CipherView[]>;\n  filterCiphersForUrl: (\n    ciphers: CipherView[],\n    url: string,\n    includeOtherTypes?: CipherType[],\n    defaultMatch?: UriMatchStrategySetting,\n  ) => Promise<CipherView[]>;\n  getAllFromApiForOrganization: (organizationId: string) => Promise<CipherView[]>;\n  /**\n   * Gets ciphers belonging to the specified organization that the user has explicit collection level access to.\n   * Ciphers that are not assigned to any collections are only included for users with admin access.\n   */\n  getManyFromApiForOrganization: (organizationId: string) => Promise<CipherView[]>;\n  getLastUsedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getLastLaunchedForUrl: (url: string, autofillOnPageLoad: boolean) => Promise<CipherView>;\n  getNextCipherForUrl: (url: string) => Promise<CipherView>;\n  updateLastUsedIndexForUrl: (url: string) => void;\n  updateLastUsedDate: (id: string) => Promise<void>;\n  updateLastLaunchedDate: (id: string) => Promise<void>;\n  saveNeverDomain: (domain: string) => Promise<void>;\n  /**\n   * Create a cipher with the server\n   *\n   * @param cipher The cipher to create\n   * @param orgAdmin If true, the request is submitted as an organization admin request\n   *\n   * @returns A promise that resolves to the created cipher\n   */\n  createWithServer: (cipher: Cipher, orgAdmin?: boolean) => Promise<Cipher>;\n  /**\n   * Update a cipher with the server\n   * @param cipher The cipher to update\n   * @param orgAdmin If true, the request is submitted as an organization admin request\n   * @param isNotClone If true, the cipher is not a clone and should be treated as a new cipher\n   *\n   * @returns A promise that resolves to the updated cipher\n   */\n  updateWithServer: (cipher: Cipher, orgAdmin?: boolean, isNotClone?: boolean) => Promise<Cipher>;\n  shareWithServer: (\n    cipher: CipherView,\n    organizationId: string,\n    collectionIds: string[],\n    userId: UserId,\n  ) => Promise<any>;\n  shareManyWithServer: (\n    ciphers: CipherView[],\n    organizationId: string,\n    collectionIds: string[],\n    userId: UserId,\n  ) => Promise<any>;\n  saveAttachmentWithServer: (\n    cipher: Cipher,\n    unencryptedFile: any,\n    userId: UserId,\n    admin?: boolean,\n  ) => Promise<Cipher>;\n  saveAttachmentRawWithServer: (\n    cipher: Cipher,\n    filename: string,\n    data: ArrayBuffer,\n    userId: UserId,\n    admin?: boolean,\n  ) => Promise<Cipher>;\n  /**\n   * Save the collections for a cipher with the server\n   *\n   * @param cipher The cipher to save collections for\n   *\n   * @returns A promise that resolves when the collections have been saved\n   */\n  saveCollectionsWithServer: (cipher: Cipher) => Promise<Cipher>;\n  /**\n   * Bulk update collections for many ciphers with the server\n   * @param orgId\n   * @param cipherIds\n   * @param collectionIds\n   * @param removeCollections - If true, the collections will be removed from the ciphers, otherwise they will be added\n   */\n  bulkUpdateCollectionsWithServer: (\n    orgId: OrganizationId,\n    cipherIds: CipherId[],\n    collectionIds: CollectionId[],\n    removeCollections: boolean,\n  ) => Promise<void>;\n  /**\n   * Update the local store of CipherData with the provided data. Values are upserted into the existing store.\n   *\n   * @param cipher The cipher data to upsert. Can be a single CipherData object or an array of CipherData objects.\n   * @returns A promise that resolves to a record of updated cipher store, keyed by their cipher ID. Returns all ciphers, not just those updated\n   */\n  upsert: (cipher: CipherData | CipherData[]) => Promise<Record<CipherId, CipherData>>;\n  replace: (ciphers: { [id: string]: CipherData }, userId: UserId) => Promise<any>;\n  clear: (userId?: string) => Promise<void>;\n  moveManyWithServer: (ids: string[], folderId: string) => Promise<any>;\n  delete: (id: string | string[]) => Promise<any>;\n  deleteWithServer: (id: string, asAdmin?: boolean) => Promise<any>;\n  deleteManyWithServer: (ids: string[], asAdmin?: boolean) => Promise<any>;\n  deleteAttachment: (id: string, attachmentId: string) => Promise<void>;\n  deleteAttachmentWithServer: (id: string, attachmentId: string) => Promise<void>;\n  sortCiphersByLastUsed: (a: CipherView, b: CipherView) => number;\n  sortCiphersByLastUsedThenName: (a: CipherView, b: CipherView) => number;\n  getLocaleSortingFunction: () => (a: CipherView, b: CipherView) => number;\n  softDelete: (id: string | string[]) => Promise<any>;\n  softDeleteWithServer: (id: string, asAdmin?: boolean) => Promise<any>;\n  softDeleteManyWithServer: (ids: string[], asAdmin?: boolean) => Promise<any>;\n  restore: (\n    cipher: { id: string; revisionDate: string } | { id: string; revisionDate: string }[],\n  ) => Promise<any>;\n  restoreWithServer: (id: string, asAdmin?: boolean) => Promise<any>;\n  restoreManyWithServer: (ids: string[], orgId?: string) => Promise<void>;\n  getKeyForCipherKeyDecryption: (cipher: Cipher, userId: UserId) => Promise<any>;\n  setAddEditCipherInfo: (value: AddEditCipherInfo) => Promise<void>;\n  /**\n   * Returns user ciphers re-encrypted with the new user key.\n   * @param originalUserKey the original user key\n   * @param newUserKey the new user key\n   * @param userId the user id\n   * @throws Error if new user key is null\n   * @returns a list of user ciphers that have been re-encrypted with the new user key\n   */\n  getRotatedData: (\n    originalUserKey: UserKey,\n    newUserKey: UserKey,\n    userId: UserId,\n  ) => Promise<CipherWithIdRequest[]>;\n  getNextCardCipher: () => Promise<CipherView>;\n  getNextIdentityCipher: () => Promise<CipherView>;\n}\n","import { Observable } from \"rxjs\";\n\nimport { CollectionId, UserId } from \"../../types/guid\";\nimport { CollectionData } from \"../models/data/collection.data\";\nimport { Collection } from \"../models/domain/collection\";\nimport { TreeNode } from \"../models/domain/tree-node\";\nimport { CollectionView } from \"../models/view/collection.view\";\n\nexport abstract class CollectionService {\n  decryptedCollections$: Observable<CollectionView[]>;\n\n  clearActiveUserCache: () => Promise<void>;\n  encrypt: (model: CollectionView) => Promise<Collection>;\n  decryptedCollectionViews$: (ids: CollectionId[]) => Observable<CollectionView[]>;\n  /**\n   * @deprecated This method will soon be made private, use `decryptedCollectionViews$` instead.\n   */\n  decryptMany: (collections: Collection[]) => Promise<CollectionView[]>;\n  get: (id: string) => Promise<Collection>;\n  getAll: () => Promise<Collection[]>;\n  getAllDecrypted: () => Promise<CollectionView[]>;\n  getAllNested: (collections?: CollectionView[]) => Promise<TreeNode<CollectionView>[]>;\n  getNested: (id: string) => Promise<TreeNode<CollectionView>>;\n  upsert: (collection: CollectionData | CollectionData[]) => Promise<any>;\n  replace: (collections: { [id: string]: CollectionData }, userId: UserId) => Promise<any>;\n  clear: (userId?: string) => Promise<void>;\n  delete: (id: string | string[]) => Promise<any>;\n}\n","import { Observable } from \"rxjs\";\n\nimport { UserId } from \"../../../types/guid\";\nimport { PolicyType } from \"../../enums\";\nimport { PolicyData } from \"../../models/data/policy.data\";\nimport { MasterPasswordPolicyOptions } from \"../../models/domain/master-password-policy-options\";\nimport { Policy } from \"../../models/domain/policy\";\nimport { ResetPasswordPolicyOptions } from \"../../models/domain/reset-password-policy-options\";\n\nexport abstract class PolicyService {\n  /**\n   * All policies for the active user from sync data.\n   * May include policies that are disabled or otherwise do not apply to the user. Be careful using this!\n   * Consider using {@link get$} or {@link getAll$} instead, which will only return policies that should be enforced against the user.\n   */\n  policies$: Observable<Policy[]>;\n\n  /**\n   * @returns the first {@link Policy} found that applies to the active user.\n   * A policy \"applies\" if it is enabled and the user is not exempt (e.g. because they are an Owner).\n   * @param policyType the {@link PolicyType} to search for\n   * @see {@link getAll$} if you need all policies of a given type\n   */\n  get$: (policyType: PolicyType) => Observable<Policy>;\n\n  /**\n   * @returns all {@link Policy} objects of a given type that apply to the specified user (or the active user if not specified).\n   * A policy \"applies\" if it is enabled and the user is not exempt (e.g. because they are an Owner).\n   * @param policyType the {@link PolicyType} to search for\n   */\n  getAll$: (policyType: PolicyType, userId?: UserId) => Observable<Policy[]>;\n\n  /**\n   * All {@link Policy} objects for the specified user (from sync data).\n   * May include policies that are disabled or otherwise do not apply to the user.\n   * Consider using {@link getAll$} instead, which will only return policies that should be enforced against the user.\n   */\n  getAll: (policyType: PolicyType) => Promise<Policy[]>;\n\n  /**\n   * @returns true if a policy of the specified type applies to the active user, otherwise false.\n   * A policy \"applies\" if it is enabled and the user is not exempt (e.g. because they are an Owner).\n   * This does not take into account the policy's configuration - if that is important, use {@link getAll$} to get the\n   * {@link Policy} objects and then filter by Policy.data.\n   */\n  policyAppliesToActiveUser$: (policyType: PolicyType) => Observable<boolean>;\n\n  policyAppliesToUser: (policyType: PolicyType) => Promise<boolean>;\n\n  // Policy specific interfaces\n\n  /**\n   * Combines all Master Password policies that apply to the user.\n   * @returns a set of options which represent the minimum Master Password settings that the user must\n   * comply with in order to comply with **all** Master Password policies.\n   */\n  masterPasswordPolicyOptions$: (policies?: Policy[]) => Observable<MasterPasswordPolicyOptions>;\n\n  /**\n   * Evaluates whether a proposed Master Password complies with all Master Password policies that apply to the user.\n   */\n  evaluateMasterPassword: (\n    passwordStrength: number,\n    newPassword: string,\n    enforcedPolicyOptions?: MasterPasswordPolicyOptions,\n  ) => boolean;\n\n  /**\n   * @returns Reset Password policy options for the specified organization and a boolean indicating whether the policy\n   * is enabled\n   */\n  getResetPasswordPolicyOptions: (\n    policies: Policy[],\n    orgId: string,\n  ) => [ResetPasswordPolicyOptions, boolean];\n}\n\nexport abstract class InternalPolicyService extends PolicyService {\n  upsert: (policy: PolicyData) => Promise<void>;\n  replace: (policies: { [id: string]: PolicyData }, userId: UserId) => Promise<void>;\n}\n","import { Injectable } from \"@angular/core\";\nimport { firstValueFrom, from, map, mergeMap, Observable } from \"rxjs\";\n\nimport {\n  isMember,\n  OrganizationService,\n} from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { PolicyType } from \"@bitwarden/common/admin-console/enums\";\nimport { Organization } from \"@bitwarden/common/admin-console/models/domain/organization\";\nimport { ActiveUserState, StateProvider } from \"@bitwarden/common/platform/state\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { TreeNode } from \"@bitwarden/common/vault/models/domain/tree-node\";\nimport { CollectionView } from \"@bitwarden/common/vault/models/view/collection.view\";\nimport { FolderView } from \"@bitwarden/common/vault/models/view/folder.view\";\nimport { ServiceUtils } from \"@bitwarden/common/vault/service-utils\";\n\nimport { DeprecatedVaultFilterService as DeprecatedVaultFilterServiceAbstraction } from \"../../abstractions/deprecated-vault-filter.service\";\nimport { DynamicTreeNode } from \"../models/dynamic-tree-node.model\";\n\nimport { COLLAPSED_GROUPINGS } from \"./../../../../../common/src/vault/services/key-state/collapsed-groupings.state\";\n\nconst NestingDelimiter = \"/\";\n\n@Injectable()\nexport class VaultFilterService implements DeprecatedVaultFilterServiceAbstraction {\n  private collapsedGroupingsState: ActiveUserState<string[]> =\n    this.stateProvider.getActive(COLLAPSED_GROUPINGS);\n  private readonly collapsedGroupings$: Observable<Set<string>> =\n    this.collapsedGroupingsState.state$.pipe(map((c) => new Set(c)));\n\n  constructor(\n    protected organizationService: OrganizationService,\n    protected folderService: FolderService,\n    protected cipherService: CipherService,\n    protected collectionService: CollectionService,\n    protected policyService: PolicyService,\n    protected stateProvider: StateProvider,\n  ) {}\n\n  async storeCollapsedFilterNodes(collapsedFilterNodes: Set<string>): Promise<void> {\n    await this.collapsedGroupingsState.update(() => Array.from(collapsedFilterNodes));\n  }\n\n  async buildCollapsedFilterNodes(): Promise<Set<string>> {\n    return await firstValueFrom(this.collapsedGroupings$);\n  }\n\n  async buildOrganizations(): Promise<Organization[]> {\n    let organizations = await this.organizationService.getAll();\n    if (organizations != null) {\n      organizations = organizations.filter(isMember).sort((a, b) => a.name.localeCompare(b.name));\n    }\n\n    return organizations;\n  }\n\n  buildNestedFolders(organizationId?: string): Observable<DynamicTreeNode<FolderView>> {\n    const transformation = async (storedFolders: FolderView[]) => {\n      let folders: FolderView[];\n\n      // If no org or \"My Vault\" is selected, show all folders\n      if (organizationId == null || organizationId == \"MyVault\") {\n        folders = storedFolders;\n      } else {\n        // Otherwise, show only folders that have ciphers from the selected org and the \"no folder\" folder\n        const ciphers = await this.cipherService.getAllDecrypted();\n        const orgCiphers = ciphers.filter((c) => c.organizationId == organizationId);\n        folders = storedFolders.filter(\n          (f) => orgCiphers.some((oc) => oc.folderId == f.id) || f.id == null,\n        );\n      }\n\n      const nestedFolders = await this.getAllFoldersNested(folders);\n      return new DynamicTreeNode<FolderView>({\n        fullList: folders,\n        nestedList: nestedFolders,\n      });\n    };\n\n    return this.folderService.folderViews$.pipe(\n      mergeMap((folders) => from(transformation(folders))),\n    );\n  }\n\n  async buildCollections(organizationId?: string): Promise<DynamicTreeNode<CollectionView>> {\n    const storedCollections = await this.collectionService.getAllDecrypted();\n    let collections: CollectionView[];\n    if (organizationId != null) {\n      collections = storedCollections.filter((c) => c.organizationId === organizationId);\n    } else {\n      collections = storedCollections;\n    }\n    const nestedCollections = await this.collectionService.getAllNested(collections);\n    return new DynamicTreeNode<CollectionView>({\n      fullList: collections,\n      nestedList: nestedCollections,\n    });\n  }\n\n  async checkForSingleOrganizationPolicy(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.SingleOrg),\n    );\n  }\n\n  async checkForPersonalOwnershipPolicy(): Promise<boolean> {\n    return await firstValueFrom(\n      this.policyService.policyAppliesToActiveUser$(PolicyType.PersonalOwnership),\n    );\n  }\n\n  protected async getAllFoldersNested(folders: FolderView[]): Promise<TreeNode<FolderView>[]> {\n    const nodes: TreeNode<FolderView>[] = [];\n    folders.forEach((f) => {\n      const folderCopy = new FolderView();\n      folderCopy.id = f.id;\n      folderCopy.revisionDate = f.revisionDate;\n      const parts = f.name != null ? f.name.replace(/^\\/+|\\/+$/g, \"\").split(NestingDelimiter) : [];\n      ServiceUtils.nestedTraverse(nodes, 0, parts, folderCopy, null, NestingDelimiter);\n    });\n    return nodes;\n  }\n\n  async getFolderNested(id: string): Promise<TreeNode<FolderView>> {\n    const folders = await this.getAllFoldersNested(\n      await firstValueFrom(this.folderService.folderViews$),\n    );\n    return ServiceUtils.getTreeNodeObjectFromList(folders, id) as TreeNode<FolderView>;\n  }\n}\n","import { VaultFilter } from \"@bitwarden/angular/vault/vault-filter/models/vault-filter.model\";\nimport { VaultFilterService as BaseVaultFilterService } from \"@bitwarden/angular/vault/vault-filter/services/vault-filter.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { StateProvider } from \"@bitwarden/common/platform/state\";\nimport { CipherService } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { FolderService } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\n\nexport class VaultFilterService extends BaseVaultFilterService {\n  vaultFilter: VaultFilter = new VaultFilter();\n\n  allVaults = \"allVaults\";\n  myVault = \"myVault\";\n\n  constructor(\n    organizationService: OrganizationService,\n    folderService: FolderService,\n    cipherService: CipherService,\n    collectionService: CollectionService,\n    policyService: PolicyService,\n    stateProvider: StateProvider,\n    private accountService: AccountService,\n  ) {\n    super(\n      organizationService,\n      folderService,\n      cipherService,\n      collectionService,\n      policyService,\n      stateProvider,\n    );\n    this.vaultFilter.myVaultOnly = false;\n    this.vaultFilter.selectedOrganizationId = null;\n\n    this.accountService.activeAccount$.subscribe((account) => {\n      this.setVaultFilter(this.allVaults);\n    });\n  }\n\n  getVaultFilter() {\n    return this.vaultFilter;\n  }\n\n  setVaultFilter(filter: string) {\n    if (filter === this.allVaults) {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else if (filter === this.myVault) {\n      this.vaultFilter.myVaultOnly = true;\n      this.vaultFilter.selectedOrganizationId = null;\n    } else {\n      this.vaultFilter.myVaultOnly = false;\n      this.vaultFilter.selectedOrganizationId = filter;\n    }\n  }\n\n  clear() {\n    this.setVaultFilter(this.allVaults);\n  }\n\n  filterCipherForSelectedVault(cipher: CipherView) {\n    if (!this.vaultFilter.selectedOrganizationId && !this.vaultFilter.myVaultOnly) {\n      return false;\n    }\n    if (this.vaultFilter.selectedOrganizationId) {\n      if (cipher.organizationId === this.vaultFilter.selectedOrganizationId) {\n        return false;\n      }\n    } else if (this.vaultFilter.myVaultOnly) {\n      if (!cipher.organizationId) {\n        return false;\n      }\n    }\n    return true;\n  }\n}\n","import { VaultTimeoutService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { ExtensionCommand, ExtensionCommandType } from \"@bitwarden/common/autofill/constants\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { PasswordGenerationServiceAbstraction } from \"@bitwarden/generator-legacy\";\n\nimport { openUnlockPopout } from \"../auth/popup/utils/auth-popout-window\";\nimport { LockedVaultPendingNotificationsData } from \"../autofill/background/abstractions/notification.background\";\nimport { BrowserApi } from \"../platform/browser/browser-api\";\n\nimport MainBackground from \"./main.background\";\n\nexport default class CommandsBackground {\n  private isSafari: boolean;\n  private isVivaldi: boolean;\n\n  constructor(\n    private main: MainBackground,\n    private passwordGenerationService: PasswordGenerationServiceAbstraction,\n    private platformUtilsService: PlatformUtilsService,\n    private vaultTimeoutService: VaultTimeoutService,\n    private authService: AuthService,\n  ) {\n    this.isSafari = this.platformUtilsService.isSafari();\n    this.isVivaldi = this.platformUtilsService.isVivaldi();\n  }\n\n  init() {\n    BrowserApi.messageListener(\"commands.background\", (msg: any) => {\n      if (msg.command === \"unlockCompleted\" && msg.data.target === \"commands.background\") {\n        this.processCommand(\n          msg.data.commandToRetry.message.command,\n          msg.data.commandToRetry.sender,\n        ).catch((error) => this.main.logService.error(error));\n      }\n    });\n\n    if (chrome && chrome.commands) {\n      chrome.commands.onCommand.addListener(async (command: string) => {\n        await this.processCommand(command);\n      });\n    }\n  }\n\n  private async processCommand(command: string, sender?: chrome.runtime.MessageSender) {\n    switch (command) {\n      case \"generate_password\":\n        await this.generatePasswordToClipboard();\n        break;\n      case ExtensionCommand.AutofillLogin:\n        await this.triggerAutofillCommand(\n          sender ? sender.tab : null,\n          ExtensionCommand.AutofillCommand,\n        );\n        break;\n      case ExtensionCommand.AutofillCard:\n        await this.triggerAutofillCommand(\n          sender ? sender.tab : null,\n          ExtensionCommand.AutofillCard,\n        );\n        break;\n      case ExtensionCommand.AutofillIdentity:\n        await this.triggerAutofillCommand(\n          sender ? sender.tab : null,\n          ExtensionCommand.AutofillIdentity,\n        );\n        break;\n      case \"open_popup\":\n        await this.openPopup();\n        break;\n      case \"lock_vault\":\n        await this.vaultTimeoutService.lock();\n        break;\n      default:\n        break;\n    }\n  }\n\n  private async generatePasswordToClipboard() {\n    const options = (await this.passwordGenerationService.getOptions())?.[0] ?? {};\n    const password = await this.passwordGenerationService.generatePassword(options);\n    this.platformUtilsService.copyToClipboard(password);\n    await this.passwordGenerationService.addHistory(password);\n  }\n\n  private async triggerAutofillCommand(\n    tab?: chrome.tabs.Tab,\n    commandSender?: ExtensionCommandType,\n  ) {\n    if (!tab) {\n      tab = await BrowserApi.getTabFromCurrentWindowId();\n    }\n\n    if (tab == null || !commandSender) {\n      return;\n    }\n\n    if ((await this.authService.getAuthStatus()) < AuthenticationStatus.Unlocked) {\n      const retryMessage: LockedVaultPendingNotificationsData = {\n        commandToRetry: {\n          message: {\n            command:\n              commandSender === ExtensionCommand.AutofillCommand\n                ? ExtensionCommand.AutofillLogin\n                : commandSender,\n          },\n          sender: { tab: tab },\n        },\n        target: \"commands.background\",\n      };\n      await BrowserApi.tabSendMessageData(\n        tab,\n        \"addToLockedVaultPendingNotifications\",\n        retryMessage,\n      );\n\n      await openUnlockPopout(tab);\n      return;\n    }\n\n    await this.main.collectPageDetailsForContentScript(tab, commandSender);\n  }\n\n  private async openPopup() {\n    // Chrome APIs cannot open popup\n    if (!this.isSafari) {\n      return;\n    }\n\n    await this.main.openPopup();\n  }\n}\n","import { firstValueFrom } from \"rxjs\";\n\nimport { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { VaultTimeoutSettingsService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { VaultTimeoutService } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout.service\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { VaultTimeoutAction } from \"@bitwarden/common/enums/vault-timeout-action.enum\";\nimport { VaultTimeoutStringType } from \"@bitwarden/common/types/vault-timeout.type\";\n\nconst IdleInterval = 60 * 5; // 5 minutes\n\nexport default class IdleBackground {\n  private idle: typeof chrome.idle | typeof browser.idle | null;\n  private idleTimer: number | NodeJS.Timeout = null;\n  private idleState = \"active\";\n\n  constructor(\n    private vaultTimeoutService: VaultTimeoutService,\n    private notificationsService: NotificationsService,\n    private accountService: AccountService,\n    private vaultTimeoutSettingsService: VaultTimeoutSettingsService,\n  ) {\n    this.idle = chrome.idle || (browser != null ? browser.idle : null);\n  }\n\n  init() {\n    if (!this.idle) {\n      return;\n    }\n\n    const idleHandler = (newState: string) => {\n      if (newState === \"active\") {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.notificationsService.reconnectFromActivity();\n      } else {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.notificationsService.disconnectFromInactivity();\n      }\n    };\n    if (this.idle.onStateChanged && this.idle.setDetectionInterval) {\n      this.idle.setDetectionInterval(IdleInterval);\n      this.idle.onStateChanged.addListener(idleHandler);\n    } else {\n      this.pollIdle(idleHandler);\n    }\n\n    if (this.idle.onStateChanged) {\n      this.idle.onStateChanged.addListener(\n        async (newState: chrome.idle.IdleState | browser.idle.IdleState) => {\n          if (newState === \"locked\") {\n            // Need to check if any of the current users have their timeout set to `onLocked`\n            const allUsers = await firstValueFrom(this.accountService.accounts$);\n            for (const userId in allUsers) {\n              // If the screen is locked or the screensaver activates\n              const timeout = await firstValueFrom(\n                this.vaultTimeoutSettingsService.getVaultTimeoutByUserId$(userId),\n              );\n              if (timeout === VaultTimeoutStringType.OnLocked) {\n                // On System Lock vault timeout option\n                const action = await firstValueFrom(\n                  this.vaultTimeoutSettingsService.getVaultTimeoutActionByUserId$(userId),\n                );\n                if (action === VaultTimeoutAction.LogOut) {\n                  await this.vaultTimeoutService.logOut(userId);\n                } else {\n                  await this.vaultTimeoutService.lock(userId);\n                }\n              }\n            }\n          }\n        },\n      );\n    }\n  }\n\n  private pollIdle(handler: (newState: string) => void) {\n    if (this.idleTimer != null) {\n      globalThis.clearTimeout(this.idleTimer);\n      this.idleTimer = null;\n    }\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.idle.queryState(IdleInterval, (state: string) => {\n      if (state !== this.idleState) {\n        this.idleState = state;\n        handler(state);\n      }\n      this.idleTimer = globalThis.setTimeout(() => this.pollIdle(handler), 5000);\n    });\n  }\n}\n","import { firstValueFrom, map } from \"rxjs\";\n\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AuthService } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { AppIdService } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { CryptoFunctionService } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { PlatformUtilsService } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { BiometricStateService } from \"@bitwarden/common/platform/biometrics/biometric-state.service\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { EncString } from \"@bitwarden/common/platform/models/domain/enc-string\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { UserKey } from \"@bitwarden/common/types/key\";\n\nimport { BrowserApi } from \"../platform/browser/browser-api\";\n\nimport RuntimeBackground from \"./runtime.background\";\n\nconst MessageValidTimeout = 10 * 1000;\nconst HashAlgorithmForEncryption = \"sha1\";\n\ntype Message = {\n  command: string;\n\n  // Filled in by this service\n  userId?: string;\n  timestamp?: number;\n\n  // Used for sharing secret\n  publicKey?: string;\n};\n\ntype OuterMessage = {\n  message: Message | EncString;\n  appId: string;\n};\n\ntype ReceiveMessage = {\n  timestamp: number;\n  command: string;\n  response?: any;\n\n  // Unlock key\n  keyB64?: string;\n  userKeyB64?: string;\n};\n\ntype ReceiveMessageOuter = {\n  command: string;\n  appId: string;\n\n  // Should only have one of these.\n  message?: EncString;\n  sharedSecret?: string;\n};\n\nexport class NativeMessagingBackground {\n  private connected = false;\n  private connecting: boolean;\n  private port: browser.runtime.Port | chrome.runtime.Port;\n\n  private resolver: any = null;\n  private rejecter: any = null;\n  private privateKey: Uint8Array = null;\n  private publicKey: Uint8Array = null;\n  private secureSetupResolve: any = null;\n  private sharedSecret: SymmetricCryptoKey;\n  private appId: string;\n  private validatingFingerprint: boolean;\n\n  constructor(\n    private cryptoService: CryptoService,\n    private cryptoFunctionService: CryptoFunctionService,\n    private runtimeBackground: RuntimeBackground,\n    private messagingService: MessagingService,\n    private appIdService: AppIdService,\n    private platformUtilsService: PlatformUtilsService,\n    private logService: LogService,\n    private authService: AuthService,\n    private biometricStateService: BiometricStateService,\n    private accountService: AccountService,\n  ) {\n    if (chrome?.permissions?.onAdded) {\n      // Reload extension to activate nativeMessaging\n      chrome.permissions.onAdded.addListener((permissions) => {\n        if (permissions.permissions?.includes(\"nativeMessaging\")) {\n          BrowserApi.reloadExtension();\n        }\n      });\n    }\n  }\n\n  async connect() {\n    this.appId = await this.appIdService.getAppId();\n    await this.biometricStateService.setFingerprintValidated(false);\n\n    return new Promise<void>((resolve, reject) => {\n      this.port = BrowserApi.connectNative(\"com.8bit.bitwarden\");\n\n      this.connecting = true;\n\n      const connectedCallback = () => {\n        this.connected = true;\n        this.connecting = false;\n        resolve();\n      };\n\n      // Safari has a bundled native component which is always available, no need to\n      // check if the desktop app is running.\n      if (this.platformUtilsService.isSafari()) {\n        connectedCallback();\n      }\n\n      this.port.onMessage.addListener(async (message: ReceiveMessageOuter) => {\n        switch (message.command) {\n          case \"connected\":\n            connectedCallback();\n            break;\n          case \"disconnected\":\n            if (this.connecting) {\n              reject(new Error(\"startDesktop\"));\n            }\n            this.connected = false;\n            this.port.disconnect();\n            break;\n          case \"setupEncryption\": {\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            const encrypted = Utils.fromB64ToArray(message.sharedSecret);\n            const decrypted = await this.cryptoFunctionService.rsaDecrypt(\n              encrypted,\n              this.privateKey,\n              HashAlgorithmForEncryption,\n            );\n\n            if (this.validatingFingerprint) {\n              this.validatingFingerprint = false;\n              await this.biometricStateService.setFingerprintValidated(true);\n            }\n            this.sharedSecret = new SymmetricCryptoKey(decrypted);\n            this.secureSetupResolve();\n            break;\n          }\n          case \"invalidateEncryption\":\n            // Ignore since it belongs to another device\n            if (message.appId !== this.appId) {\n              return;\n            }\n\n            this.sharedSecret = null;\n            this.privateKey = null;\n            this.connected = false;\n\n            this.rejecter({\n              message: \"invalidateEncryption\",\n            });\n            return;\n          case \"verifyFingerprint\": {\n            if (this.sharedSecret == null) {\n              this.validatingFingerprint = true;\n              // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n              // eslint-disable-next-line @typescript-eslint/no-floating-promises\n              this.showFingerprintDialog();\n            }\n            break;\n          }\n          case \"wrongUserId\":\n            this.rejecter({\n              message: \"wrongUserId\",\n            });\n            return;\n          default:\n            // Ignore since it belongs to another device\n            if (!this.platformUtilsService.isSafari() && message.appId !== this.appId) {\n              return;\n            }\n\n            // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n            // eslint-disable-next-line @typescript-eslint/no-floating-promises\n            this.onMessage(message.message);\n        }\n      });\n\n      this.port.onDisconnect.addListener((p: any) => {\n        let error;\n        if (BrowserApi.isWebExtensionsApi) {\n          error = p.error.message;\n        } else {\n          error = chrome.runtime.lastError.message;\n        }\n\n        this.sharedSecret = null;\n        this.privateKey = null;\n        this.connected = false;\n\n        this.logService.error(\"NativeMessaging port disconnected because of error: \" + error);\n\n        const reason = error != null ? \"desktopIntegrationDisabled\" : null;\n        reject(new Error(reason));\n      });\n    });\n  }\n\n  async send(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.userId = (await firstValueFrom(this.accountService.activeAccount$))?.id;\n    message.timestamp = Date.now();\n\n    if (this.platformUtilsService.isSafari()) {\n      this.postMessage(message as any);\n    } else {\n      this.postMessage({ appId: this.appId, message: await this.encryptMessage(message) });\n    }\n  }\n\n  async encryptMessage(message: Message) {\n    if (this.sharedSecret == null) {\n      await this.secureCommunication();\n    }\n\n    return await this.cryptoService.encrypt(JSON.stringify(message), this.sharedSecret);\n  }\n\n  getResponse(): Promise<any> {\n    return new Promise((resolve, reject) => {\n      this.resolver = function (response: any) {\n        resolve(response);\n      };\n      this.rejecter = function (resp: any) {\n        reject({\n          message: resp,\n        });\n      };\n    });\n  }\n\n  private postMessage(message: OuterMessage) {\n    // Wrap in try-catch to when the port disconnected without triggering `onDisconnect`.\n    try {\n      const msg: any = message;\n      if (message.message instanceof EncString) {\n        // Alternative, backwards-compatible serialization of EncString\n        msg.message = {\n          encryptedString: message.message.encryptedString,\n          encryptionType: message.message.encryptionType,\n          data: message.message.data,\n          iv: message.message.iv,\n          mac: message.message.mac,\n        };\n      }\n      this.port.postMessage(msg);\n    } catch (e) {\n      this.logService.error(\"NativeMessaging port disconnected, disconnecting.\");\n\n      this.sharedSecret = null;\n      this.privateKey = null;\n      this.connected = false;\n\n      this.rejecter(\"invalidateEncryption\");\n    }\n  }\n\n  private async onMessage(rawMessage: ReceiveMessage | EncString) {\n    let message = rawMessage as ReceiveMessage;\n    if (!this.platformUtilsService.isSafari()) {\n      message = JSON.parse(\n        await this.cryptoService.decryptToUtf8(rawMessage as EncString, this.sharedSecret),\n      );\n    }\n\n    if (Math.abs(message.timestamp - Date.now()) > MessageValidTimeout) {\n      this.logService.error(\"NativeMessage is to old, ignoring.\");\n      return;\n    }\n\n    switch (message.command) {\n      case \"biometricUnlock\": {\n        if (\n          [\"not available\", \"not enabled\", \"not supported\", \"not unlocked\", \"canceled\"].includes(\n            message.response,\n          )\n        ) {\n          this.rejecter(message.response);\n          return;\n        }\n\n        // Check for initial setup of biometric unlock\n        const enabled = await firstValueFrom(this.biometricStateService.biometricUnlockEnabled$);\n        if (enabled === null || enabled === false) {\n          if (message.response === \"unlocked\") {\n            await this.biometricStateService.setBiometricUnlockEnabled(true);\n          }\n          break;\n        }\n\n        // Ignore unlock if already unlocked\n        if ((await this.authService.getAuthStatus()) === AuthenticationStatus.Unlocked) {\n          break;\n        }\n\n        if (message.response === \"unlocked\") {\n          try {\n            if (message.userKeyB64) {\n              const userKey = new SymmetricCryptoKey(\n                Utils.fromB64ToArray(message.userKeyB64),\n              ) as UserKey;\n              const activeUserId = await firstValueFrom(\n                this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n              );\n              const isUserKeyValid = await this.cryptoService.validateUserKey(\n                userKey,\n                activeUserId,\n              );\n              if (isUserKeyValid) {\n                await this.cryptoService.setUserKey(userKey, activeUserId);\n              } else {\n                this.logService.error(\"Unable to verify biometric unlocked userkey\");\n                await this.cryptoService.clearKeys(activeUserId);\n                this.rejecter(\"userkey wrong\");\n                return;\n              }\n            } else {\n              throw new Error(\"No key received\");\n            }\n          } catch (e) {\n            this.logService.error(\"Unable to set key: \" + e);\n            this.rejecter(\"userkey wrong\");\n            return;\n          }\n\n          // Verify key is correct by attempting to decrypt a secret\n          try {\n            const userId = (await firstValueFrom(this.accountService.activeAccount$))?.id;\n            await this.cryptoService.getFingerprint(userId);\n          } catch (e) {\n            this.logService.error(\"Unable to verify key: \" + e);\n            await this.cryptoService.clearKeys();\n            this.rejecter(\"userkey wrong\");\n            return;\n          }\n\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.runtimeBackground.processMessage({ command: \"unlocked\" });\n        }\n        break;\n      }\n      case \"biometricUnlockAvailable\": {\n        this.resolver(message);\n        break;\n      }\n      default:\n        this.logService.error(\"NativeMessage, got unknown command: \" + message.command);\n        break;\n    }\n\n    if (this.resolver) {\n      this.resolver(message);\n    }\n  }\n\n  private async secureCommunication() {\n    const [publicKey, privateKey] = await this.cryptoFunctionService.rsaGenerateKeyPair(2048);\n    this.publicKey = publicKey;\n    this.privateKey = privateKey;\n    const userId = (await firstValueFrom(this.accountService.activeAccount$))?.id;\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    this.sendUnencrypted({\n      command: \"setupEncryption\",\n      publicKey: Utils.fromBufferToB64(publicKey),\n      userId: userId,\n    });\n\n    return new Promise((resolve, reject) => (this.secureSetupResolve = resolve));\n  }\n\n  private async sendUnencrypted(message: Message) {\n    if (!this.connected) {\n      await this.connect();\n    }\n\n    message.timestamp = Date.now();\n\n    this.postMessage({ appId: this.appId, message: message });\n  }\n\n  private async showFingerprintDialog() {\n    const fingerprint = await this.cryptoService.getFingerprint(\n      (await firstValueFrom(this.accountService.activeAccount$))?.id,\n      this.publicKey,\n    );\n\n    this.messagingService.send(\"showNativeMessagingFinterprintDialog\", {\n      fingerprint: fingerprint,\n    });\n  }\n}\n","import { firstValueFrom, map, mergeMap } from \"rxjs\";\n\nimport { LockService } from \"@bitwarden/auth/common\";\nimport { NotificationsService } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { AccountService } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AutofillOverlayVisibility, ExtensionCommand } from \"@bitwarden/common/autofill/constants\";\nimport { AutofillSettingsServiceAbstraction } from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { LogService } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { MessagingService } from \"@bitwarden/common/platform/abstractions/messaging.service\";\nimport { SystemService } from \"@bitwarden/common/platform/abstractions/system.service\";\nimport { devFlagEnabled } from \"@bitwarden/common/platform/misc/flags\";\nimport { Utils } from \"@bitwarden/common/platform/misc/utils\";\nimport { CipherType } from \"@bitwarden/common/vault/enums\";\n\nimport { MessageListener, isExternalMessage } from \"../../../../libs/common/src/platform/messaging\";\nimport {\n  closeUnlockPopout,\n  openSsoAuthResultPopout,\n  openTwoFactorAuthPopout,\n} from \"../auth/popup/utils/auth-popout-window\";\nimport { LockedVaultPendingNotificationsData } from \"../autofill/background/abstractions/notification.background\";\nimport { Fido2Background } from \"../autofill/fido2/background/abstractions/fido2.background\";\nimport { AutofillService } from \"../autofill/services/abstractions/autofill.service\";\nimport { BrowserApi } from \"../platform/browser/browser-api\";\nimport { BrowserEnvironmentService } from \"../platform/services/browser-environment.service\";\nimport { BrowserPlatformUtilsService } from \"../platform/services/platform-utils/browser-platform-utils.service\";\n\nimport MainBackground from \"./main.background\";\n\nexport default class RuntimeBackground {\n  private autofillTimeout: any;\n  private pageDetailsToAutoFill: any[] = [];\n  private onInstalledReason: string = null;\n  private lockedVaultPendingNotifications: LockedVaultPendingNotificationsData[] = [];\n\n  constructor(\n    private main: MainBackground,\n    private autofillService: AutofillService,\n    private platformUtilsService: BrowserPlatformUtilsService,\n    private notificationsService: NotificationsService,\n    private autofillSettingsService: AutofillSettingsServiceAbstraction,\n    private systemService: SystemService,\n    private environmentService: BrowserEnvironmentService,\n    private messagingService: MessagingService,\n    private logService: LogService,\n    private configService: ConfigService,\n    private fido2Background: Fido2Background,\n    private messageListener: MessageListener,\n    private accountService: AccountService,\n    private readonly lockService: LockService,\n  ) {\n    // onInstalled listener must be wired up before anything else, so we do it in the ctor\n    chrome.runtime.onInstalled.addListener((details: any) => {\n      this.onInstalledReason = details.reason;\n    });\n  }\n\n  async init() {\n    if (!chrome.runtime) {\n      return;\n    }\n\n    await this.checkOnInstalled();\n    const backgroundMessageListener = (\n      msg: any,\n      sender: chrome.runtime.MessageSender,\n      sendResponse: (response: any) => void,\n    ) => {\n      const messagesWithResponse = [\n        \"biometricUnlock\",\n        \"biometricUnlockAvailable\",\n        \"getUseTreeWalkerApiForPageDetailsCollectionFeatureFlag\",\n        \"getInlineMenuFieldQualificationFeatureFlag\",\n      ];\n\n      if (messagesWithResponse.includes(msg.command)) {\n        this.processMessageWithSender(msg, sender).then(\n          (value) => sendResponse({ result: value }),\n          (error) => sendResponse({ error: { ...error, message: error.message } }),\n        );\n        return true;\n      }\n\n      void this.processMessageWithSender(msg, sender).catch((err) =>\n        this.logService.error(\n          `Error while processing message in RuntimeBackground '${msg?.command}'.`,\n          err,\n        ),\n      );\n      return false;\n    };\n\n    this.messageListener.allMessages$\n      .pipe(\n        mergeMap(async (message: any) => {\n          try {\n            await this.processMessage(message);\n          } catch (err) {\n            this.logService.error(err);\n          }\n        }),\n      )\n      .subscribe();\n\n    // For messages that require the full on message interface\n    BrowserApi.messageListener(\"runtime.background\", backgroundMessageListener);\n  }\n\n  // Messages that need the chrome sender and send back a response need to be registered in this method.\n  async processMessageWithSender(msg: any, sender: chrome.runtime.MessageSender) {\n    switch (msg.command) {\n      case \"triggerAutofillScriptInjection\":\n        await this.autofillService.injectAutofillScripts(sender.tab, sender.frameId);\n        break;\n      case \"bgCollectPageDetails\":\n        await this.main.collectPageDetailsForContentScript(sender.tab, msg.sender, sender.frameId);\n        break;\n      case \"collectPageDetailsResponse\":\n        switch (msg.sender) {\n          case \"autofiller\":\n          case ExtensionCommand.AutofillCommand: {\n            const activeUserId = await firstValueFrom(\n              this.accountService.activeAccount$.pipe(map((a) => a?.id)),\n            );\n            await this.accountService.setAccountActivity(activeUserId, new Date());\n            const totpCode = await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              msg.sender === ExtensionCommand.AutofillCommand,\n            );\n            if (totpCode != null) {\n              this.platformUtilsService.copyToClipboard(totpCode);\n            }\n            break;\n          }\n          case ExtensionCommand.AutofillCard: {\n            await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              msg.sender === ExtensionCommand.AutofillCard,\n              CipherType.Card,\n            );\n            break;\n          }\n          case ExtensionCommand.AutofillIdentity: {\n            await this.autofillService.doAutoFillActiveTab(\n              [\n                {\n                  frameId: sender.frameId,\n                  tab: msg.tab,\n                  details: msg.details,\n                },\n              ],\n              msg.sender === ExtensionCommand.AutofillIdentity,\n              CipherType.Identity,\n            );\n            break;\n          }\n          case \"contextMenu\":\n            clearTimeout(this.autofillTimeout);\n            this.pageDetailsToAutoFill.push({\n              frameId: sender.frameId,\n              tab: msg.tab,\n              details: msg.details,\n            });\n            this.autofillTimeout = setTimeout(async () => await this.autofillPage(msg.tab), 300);\n            break;\n          default:\n            break;\n        }\n        break;\n      case \"biometricUnlock\": {\n        const result = await this.main.biometricsService.authenticateBiometric();\n        return result;\n      }\n      case \"biometricUnlockAvailable\": {\n        const result = await this.main.biometricsService.isBiometricUnlockAvailable();\n        return result;\n      }\n      case \"getUseTreeWalkerApiForPageDetailsCollectionFeatureFlag\": {\n        return await this.configService.getFeatureFlag(\n          FeatureFlag.UseTreeWalkerApiForPageDetailsCollection,\n        );\n      }\n      case \"getInlineMenuFieldQualificationFeatureFlag\": {\n        return await this.configService.getFeatureFlag(FeatureFlag.InlineMenuFieldQualification);\n      }\n    }\n  }\n\n  async processMessage(msg: any) {\n    switch (msg.command) {\n      case \"loggedIn\":\n      case \"unlocked\": {\n        let item: LockedVaultPendingNotificationsData;\n\n        if (msg.command === \"loggedIn\") {\n          await this.main.initOverlayAndTabsBackground();\n          await this.sendBwInstalledMessageToVault();\n          await this.autofillService.reloadAutofillScripts();\n        }\n\n        if (this.lockedVaultPendingNotifications?.length > 0) {\n          item = this.lockedVaultPendingNotifications.pop();\n          await closeUnlockPopout();\n        }\n\n        await this.notificationsService.updateConnection(msg.command === \"loggedIn\");\n        this.systemService.cancelProcessReload();\n\n        if (item) {\n          await BrowserApi.focusWindow(item.commandToRetry.sender.tab.windowId);\n          await BrowserApi.focusTab(item.commandToRetry.sender.tab.id);\n          await BrowserApi.tabSendMessageData(\n            item.commandToRetry.sender.tab,\n            \"unlockCompleted\",\n            item,\n          );\n        }\n\n        // @TODO these need to happen last to avoid blocking `tabSendMessageData` above\n        // The underlying cause exists within `cipherService.getAllDecrypted` via\n        // `getAllDecryptedForUrl` and is anticipated to be refactored\n        await this.main.refreshBadge();\n        await this.main.refreshMenu(false);\n\n        if (await this.configService.getFeatureFlag(FeatureFlag.ExtensionRefresh)) {\n          await this.autofillService.setAutoFillOnPageLoadOrgPolicy();\n        }\n        break;\n      }\n      case \"addToLockedVaultPendingNotifications\":\n        this.lockedVaultPendingNotifications.push(msg.data);\n        break;\n      case \"lockVault\":\n        await this.main.vaultTimeoutService.lock(msg.userId);\n        break;\n      case \"lockAll\":\n        {\n          await this.lockService.lockAll();\n          this.messagingService.send(\"lockAllFinished\", { requestId: msg.requestId });\n        }\n        break;\n      case \"logout\":\n        await this.main.logout(msg.expired, msg.userId);\n        break;\n      case \"syncCompleted\":\n        if (msg.successfully) {\n          setTimeout(async () => {\n            await this.main.refreshBadge();\n            await this.main.refreshMenu();\n          }, 2000);\n          await this.configService.ensureConfigFetched();\n          await this.main.updateOverlayCiphers();\n\n          if (await this.configService.getFeatureFlag(FeatureFlag.ExtensionRefresh)) {\n            await this.autofillService.setAutoFillOnPageLoadOrgPolicy();\n          }\n        }\n        break;\n      case \"openPopup\":\n        await this.main.openPopup();\n        break;\n      case \"bgUpdateContextMenu\":\n      case \"editedCipher\":\n      case \"addedCipher\":\n      case \"deletedCipher\":\n        await this.main.refreshBadge();\n        await this.main.refreshMenu();\n        break;\n      case \"bgReseedStorage\": {\n        await this.main.reseedStorage();\n        break;\n      }\n      case \"authResult\": {\n        const env = await firstValueFrom(this.environmentService.environment$);\n        const vaultUrl = env.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        if (msg.lastpass) {\n          this.messagingService.send(\"importCallbackLastPass\", {\n            code: msg.code,\n            state: msg.state,\n          });\n        } else {\n          try {\n            await openSsoAuthResultPopout(msg);\n          } catch {\n            this.logService.error(\"Unable to open sso popout tab\");\n          }\n        }\n        break;\n      }\n      case \"webAuthnResult\": {\n        const env = await firstValueFrom(this.environmentService.environment$);\n        const vaultUrl = env.getWebVaultUrl();\n\n        if (msg.referrer == null || Utils.getHostname(vaultUrl) !== msg.referrer) {\n          return;\n        }\n\n        await openTwoFactorAuthPopout(msg);\n        break;\n      }\n      case \"reloadPopup\":\n        if (isExternalMessage(msg)) {\n          this.messagingService.send(\"reloadPopup\");\n        }\n        break;\n      case \"emailVerificationRequired\":\n        this.messagingService.send(\"showDialog\", {\n          title: { key: \"emailVerificationRequired\" },\n          content: { key: \"emailVerificationRequiredDesc\" },\n          acceptButtonText: { key: \"ok\" },\n          cancelButtonText: null,\n          type: \"info\",\n        });\n        break;\n      case \"getClickedElementResponse\":\n        this.platformUtilsService.copyToClipboard(msg.identifier);\n        break;\n      case \"switchAccount\": {\n        await this.main.switchAccount(msg.userId);\n        break;\n      }\n      case \"clearClipboard\": {\n        await this.main.clearClipboard(msg.clipboardValue, msg.timeoutMs);\n        break;\n      }\n    }\n  }\n\n  private async autofillPage(tabToAutoFill: chrome.tabs.Tab) {\n    const totpCode = await this.autofillService.doAutoFill({\n      tab: tabToAutoFill,\n      cipher: this.main.loginToAutoFill,\n      pageDetails: this.pageDetailsToAutoFill,\n      fillNewPassword: true,\n      allowTotpAutofill: true,\n    });\n\n    if (totpCode != null) {\n      this.platformUtilsService.copyToClipboard(totpCode);\n    }\n\n    // reset\n    this.main.loginToAutoFill = null;\n    this.pageDetailsToAutoFill = [];\n  }\n\n  private async checkOnInstalled() {\n    setTimeout(async () => {\n      void this.fido2Background.injectFido2ContentScriptsInAllTabs();\n      void this.autofillService.loadAutofillScriptsOnInstall();\n\n      if (this.onInstalledReason != null) {\n        if (this.onInstalledReason === \"install\") {\n          if (!devFlagEnabled(\"skipWelcomeOnInstall\")) {\n            void BrowserApi.createNewTab(\"https://bitwarden.com/browser-start/\");\n          }\n\n          await this.autofillSettingsService.setInlineMenuVisibility(\n            AutofillOverlayVisibility.OnFieldFocus,\n          );\n\n          if (await this.environmentService.hasManagedEnvironment()) {\n            await this.environmentService.setUrlsToManagedEnvironment();\n          }\n        }\n\n        this.onInstalledReason = null;\n      }\n    }, 100);\n  }\n\n  async sendBwInstalledMessageToVault() {\n    try {\n      const env = await firstValueFrom(this.environmentService.environment$);\n      const vaultUrl = env.getWebVaultUrl();\n      const urlObj = new URL(vaultUrl);\n\n      const tabs = await BrowserApi.tabsQuery({ url: `${urlObj.href}*` });\n\n      if (!tabs?.length) {\n        return;\n      }\n\n      for (const tab of tabs) {\n        await BrowserApi.executeScriptInTab(tab.id, {\n          file: \"content/send-on-installed-message.js\",\n          runAt: \"document_end\",\n        });\n      }\n    } catch (e) {\n      this.logService.error(`Error sending on installed message to vault: ${e}`);\n    }\n  }\n}\n","import { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\n\nimport MainBackground from \"../background/main.background\";\n\nimport { BrowserApi } from \"./browser/browser-api\";\n\nconst logService = new ConsoleLogService(false);\nif (BrowserApi.isManifestVersion(3)) {\n  startHeartbeat().catch((error) => logService.error(error));\n}\nconst bitwardenMain = ((self as any).bitwardenMain = new MainBackground());\nbitwardenMain.bootstrap().catch((error) => logService.error(error));\n\n/**\n * Tracks when a service worker was last alive and extends the service worker\n * lifetime by writing the current time to extension storage every 20 seconds.\n */\nasync function runHeartbeat() {\n  await chrome.storage.local.set({ \"last-heartbeat\": new Date().getTime() });\n}\n\n/**\n * Starts the heartbeat interval which keeps the service worker alive.\n */\nasync function startHeartbeat() {\n  // Run the heartbeat once at service worker startup, then again every 20 seconds.\n  runHeartbeat()\n    .then(() => setInterval(runHeartbeat, 20 * 1000))\n    .catch((error) => logService.error(error));\n}\n","import { Subject, filter, firstValueFrom, map, merge, timeout } from \"rxjs\";\n\nimport {\n  PinServiceAbstraction,\n  PinService,\n  InternalUserDecryptionOptionsServiceAbstraction,\n  UserDecryptionOptionsService,\n  AuthRequestServiceAbstraction,\n  AuthRequestService,\n  LoginEmailServiceAbstraction,\n  LogoutReason,\n  DefaultLockService,\n} from \"@bitwarden/auth/common\";\nimport { ApiService as ApiServiceAbstraction } from \"@bitwarden/common/abstractions/api.service\";\nimport { AuditService as AuditServiceAbstraction } from \"@bitwarden/common/abstractions/audit.service\";\nimport { EventCollectionService as EventCollectionServiceAbstraction } from \"@bitwarden/common/abstractions/event/event-collection.service\";\nimport { EventUploadService as EventUploadServiceAbstraction } from \"@bitwarden/common/abstractions/event/event-upload.service\";\nimport { NotificationsService as NotificationsServiceAbstraction } from \"@bitwarden/common/abstractions/notifications.service\";\nimport { SearchService as SearchServiceAbstraction } from \"@bitwarden/common/abstractions/search.service\";\nimport { VaultTimeoutSettingsService as VaultTimeoutSettingsServiceAbstraction } from \"@bitwarden/common/abstractions/vault-timeout/vault-timeout-settings.service\";\nimport { InternalOrganizationServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/organization/organization.service.abstraction\";\nimport { PolicyApiServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/policy/policy-api.service.abstraction\";\nimport { InternalPolicyService as InternalPolicyServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/policy/policy.service.abstraction\";\nimport { ProviderService as ProviderServiceAbstraction } from \"@bitwarden/common/admin-console/abstractions/provider.service\";\nimport { OrganizationService } from \"@bitwarden/common/admin-console/services/organization/organization.service\";\nimport { PolicyApiService } from \"@bitwarden/common/admin-console/services/policy/policy-api.service\";\nimport { PolicyService } from \"@bitwarden/common/admin-console/services/policy/policy.service\";\nimport { ProviderService } from \"@bitwarden/common/admin-console/services/provider.service\";\nimport { AccountService as AccountServiceAbstraction } from \"@bitwarden/common/auth/abstractions/account.service\";\nimport { AuthService as AuthServiceAbstraction } from \"@bitwarden/common/auth/abstractions/auth.service\";\nimport { AvatarService as AvatarServiceAbstraction } from \"@bitwarden/common/auth/abstractions/avatar.service\";\nimport { DeviceTrustServiceAbstraction } from \"@bitwarden/common/auth/abstractions/device-trust.service.abstraction\";\nimport { DevicesServiceAbstraction } from \"@bitwarden/common/auth/abstractions/devices/devices.service.abstraction\";\nimport { DevicesApiServiceAbstraction } from \"@bitwarden/common/auth/abstractions/devices-api.service.abstraction\";\nimport { KdfConfigService as kdfConfigServiceAbstraction } from \"@bitwarden/common/auth/abstractions/kdf-config.service\";\nimport { KeyConnectorService as KeyConnectorServiceAbstraction } from \"@bitwarden/common/auth/abstractions/key-connector.service\";\nimport { InternalMasterPasswordServiceAbstraction } from \"@bitwarden/common/auth/abstractions/master-password.service.abstraction\";\nimport { SsoLoginServiceAbstraction } from \"@bitwarden/common/auth/abstractions/sso-login.service.abstraction\";\nimport { TokenService as TokenServiceAbstraction } from \"@bitwarden/common/auth/abstractions/token.service\";\nimport { UserVerificationApiServiceAbstraction } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification-api.service.abstraction\";\nimport { UserVerificationService as UserVerificationServiceAbstraction } from \"@bitwarden/common/auth/abstractions/user-verification/user-verification.service.abstraction\";\nimport { AuthenticationStatus } from \"@bitwarden/common/auth/enums/authentication-status\";\nimport { ForceSetPasswordReason } from \"@bitwarden/common/auth/models/domain/force-set-password-reason\";\nimport { AccountServiceImplementation } from \"@bitwarden/common/auth/services/account.service\";\nimport { AuthService } from \"@bitwarden/common/auth/services/auth.service\";\nimport { AvatarService } from \"@bitwarden/common/auth/services/avatar.service\";\nimport { DeviceTrustService } from \"@bitwarden/common/auth/services/device-trust.service.implementation\";\nimport { DevicesServiceImplementation } from \"@bitwarden/common/auth/services/devices/devices.service.implementation\";\nimport { DevicesApiServiceImplementation } from \"@bitwarden/common/auth/services/devices-api.service.implementation\";\nimport { KdfConfigService } from \"@bitwarden/common/auth/services/kdf-config.service\";\nimport { KeyConnectorService } from \"@bitwarden/common/auth/services/key-connector.service\";\nimport { MasterPasswordService } from \"@bitwarden/common/auth/services/master-password/master-password.service\";\nimport { SsoLoginService } from \"@bitwarden/common/auth/services/sso-login.service\";\nimport { TokenService } from \"@bitwarden/common/auth/services/token.service\";\nimport { UserVerificationApiService } from \"@bitwarden/common/auth/services/user-verification/user-verification-api.service\";\nimport { UserVerificationService } from \"@bitwarden/common/auth/services/user-verification/user-verification.service\";\nimport {\n  AutofillSettingsServiceAbstraction,\n  AutofillSettingsService,\n} from \"@bitwarden/common/autofill/services/autofill-settings.service\";\nimport {\n  BadgeSettingsServiceAbstraction,\n  BadgeSettingsService,\n} from \"@bitwarden/common/autofill/services/badge-settings.service\";\nimport {\n  DomainSettingsService,\n  DefaultDomainSettingsService,\n} from \"@bitwarden/common/autofill/services/domain-settings.service\";\nimport {\n  UserNotificationSettingsService,\n  UserNotificationSettingsServiceAbstraction,\n} from \"@bitwarden/common/autofill/services/user-notification-settings.service\";\nimport { BillingAccountProfileStateService } from \"@bitwarden/common/billing/abstractions/account/billing-account-profile-state.service\";\nimport { DefaultBillingAccountProfileStateService } from \"@bitwarden/common/billing/services/account/billing-account-profile-state.service\";\nimport { ClientType } from \"@bitwarden/common/enums\";\nimport { FeatureFlag } from \"@bitwarden/common/enums/feature-flag.enum\";\nimport { AppIdService as AppIdServiceAbstraction } from \"@bitwarden/common/platform/abstractions/app-id.service\";\nimport { ConfigApiServiceAbstraction } from \"@bitwarden/common/platform/abstractions/config/config-api.service.abstraction\";\nimport { ConfigService } from \"@bitwarden/common/platform/abstractions/config/config.service\";\nimport { CryptoFunctionService as CryptoFunctionServiceAbstraction } from \"@bitwarden/common/platform/abstractions/crypto-function.service\";\nimport { CryptoService as CryptoServiceAbstraction } from \"@bitwarden/common/platform/abstractions/crypto.service\";\nimport { EncryptService } from \"@bitwarden/common/platform/abstractions/encrypt.service\";\nimport { Fido2ActiveRequestManager as Fido2ActiveRequestManagerAbstraction } from \"@bitwarden/common/platform/abstractions/fido2/fido2-active-request-manager.abstraction\";\nimport { Fido2AuthenticatorService as Fido2AuthenticatorServiceAbstraction } from \"@bitwarden/common/platform/abstractions/fido2/fido2-authenticator.service.abstraction\";\nimport { Fido2ClientService as Fido2ClientServiceAbstraction } from \"@bitwarden/common/platform/abstractions/fido2/fido2-client.service.abstraction\";\nimport { Fido2UserInterfaceService as Fido2UserInterfaceServiceAbstraction } from \"@bitwarden/common/platform/abstractions/fido2/fido2-user-interface.service.abstraction\";\nimport { FileUploadService as FileUploadServiceAbstraction } from \"@bitwarden/common/platform/abstractions/file-upload/file-upload.service\";\nimport { I18nService as I18nServiceAbstraction } from \"@bitwarden/common/platform/abstractions/i18n.service\";\nimport { KeyGenerationService as KeyGenerationServiceAbstraction } from \"@bitwarden/common/platform/abstractions/key-generation.service\";\nimport { LogService as LogServiceAbstraction } from \"@bitwarden/common/platform/abstractions/log.service\";\nimport { PlatformUtilsService as PlatformUtilsServiceAbstraction } from \"@bitwarden/common/platform/abstractions/platform-utils.service\";\nimport { StateService as StateServiceAbstraction } from \"@bitwarden/common/platform/abstractions/state.service\";\nimport {\n  AbstractStorageService,\n  ObservableStorageService,\n} from \"@bitwarden/common/platform/abstractions/storage.service\";\nimport { SystemService as SystemServiceAbstraction } from \"@bitwarden/common/platform/abstractions/system.service\";\nimport {\n  BiometricStateService,\n  DefaultBiometricStateService,\n} from \"@bitwarden/common/platform/biometrics/biometric-state.service\";\nimport { BiometricsService } from \"@bitwarden/common/platform/biometrics/biometric.service\";\nimport { StateFactory } from \"@bitwarden/common/platform/factories/state-factory\";\nimport { Message, MessageListener, MessageSender } from \"@bitwarden/common/platform/messaging\";\n// eslint-disable-next-line no-restricted-imports -- Used for dependency creation\nimport { SubjectMessageSender } from \"@bitwarden/common/platform/messaging/internal\";\nimport { Lazy } from \"@bitwarden/common/platform/misc/lazy\";\nimport { clearCaches } from \"@bitwarden/common/platform/misc/sequentialize\";\nimport { Account } from \"@bitwarden/common/platform/models/domain/account\";\nimport { GlobalState } from \"@bitwarden/common/platform/models/domain/global-state\";\nimport { SymmetricCryptoKey } from \"@bitwarden/common/platform/models/domain/symmetric-crypto-key\";\nimport { ScheduledTaskNames } from \"@bitwarden/common/platform/scheduling\";\nimport { AppIdService } from \"@bitwarden/common/platform/services/app-id.service\";\nimport { ConfigApiService } from \"@bitwarden/common/platform/services/config/config-api.service\";\nimport { DefaultConfigService } from \"@bitwarden/common/platform/services/config/default-config.service\";\nimport { ConsoleLogService } from \"@bitwarden/common/platform/services/console-log.service\";\nimport { ContainerService } from \"@bitwarden/common/platform/services/container.service\";\nimport { BulkEncryptServiceImplementation } from \"@bitwarden/common/platform/services/cryptography/bulk-encrypt.service.implementation\";\nimport { EncryptServiceImplementation } from \"@bitwarden/common/platform/services/cryptography/encrypt.service.implementation\";\nimport { FallbackBulkEncryptService } from \"@bitwarden/common/platform/services/cryptography/fallback-bulk-encrypt.service\";\nimport { MultithreadEncryptServiceImplementation } from \"@bitwarden/common/platform/services/cryptography/multithread-encrypt.service.implementation\";\nimport { Fido2ActiveRequestManager } from \"@bitwarden/common/platform/services/fido2/fido2-active-request-manager\";\nimport { Fido2AuthenticatorService } from \"@bitwarden/common/platform/services/fido2/fido2-authenticator.service\";\nimport { Fido2ClientService } from \"@bitwarden/common/platform/services/fido2/fido2-client.service\";\nimport { FileUploadService } from \"@bitwarden/common/platform/services/file-upload/file-upload.service\";\nimport { KeyGenerationService } from \"@bitwarden/common/platform/services/key-generation.service\";\nimport { MigrationBuilderService } from \"@bitwarden/common/platform/services/migration-builder.service\";\nimport { MigrationRunner } from \"@bitwarden/common/platform/services/migration-runner\";\nimport { StateService } from \"@bitwarden/common/platform/services/state.service\";\nimport { SystemService } from \"@bitwarden/common/platform/services/system.service\";\nimport { UserAutoUnlockKeyService } from \"@bitwarden/common/platform/services/user-auto-unlock-key.service\";\nimport { WebCryptoFunctionService } from \"@bitwarden/common/platform/services/web-crypto-function.service\";\nimport {\n  ActiveUserStateProvider,\n  DerivedStateProvider,\n  GlobalStateProvider,\n  SingleUserStateProvider,\n  StateEventRunnerService,\n  StateProvider,\n} from \"@bitwarden/common/platform/state\";\n/* eslint-disable import/no-restricted-paths -- We need the implementation to inject, but generally these should not be accessed */\nimport { DefaultActiveUserStateProvider } from \"@bitwarden/common/platform/state/implementations/default-active-user-state.provider\";\nimport { DefaultGlobalStateProvider } from \"@bitwarden/common/platform/state/implementations/default-global-state.provider\";\nimport { DefaultSingleUserStateProvider } from \"@bitwarden/common/platform/state/implementations/default-single-user-state.provider\";\nimport { DefaultStateProvider } from \"@bitwarden/common/platform/state/implementations/default-state.provider\";\nimport { InlineDerivedStateProvider } from \"@bitwarden/common/platform/state/implementations/inline-derived-state\";\nimport { StateEventRegistrarService } from \"@bitwarden/common/platform/state/state-event-registrar.service\";\n/* eslint-enable import/no-restricted-paths */\nimport { PrimarySecondaryStorageService } from \"@bitwarden/common/platform/storage/primary-secondary-storage.service\";\nimport { WindowStorageService } from \"@bitwarden/common/platform/storage/window-storage.service\";\nimport { SyncService } from \"@bitwarden/common/platform/sync\";\n// eslint-disable-next-line no-restricted-imports -- Needed for service creation\nimport { DefaultSyncService } from \"@bitwarden/common/platform/sync/internal\";\nimport { DefaultThemeStateService } from \"@bitwarden/common/platform/theming/theme-state.service\";\nimport { ApiService } from \"@bitwarden/common/services/api.service\";\nimport { AuditService } from \"@bitwarden/common/services/audit.service\";\nimport { EventCollectionService } from \"@bitwarden/common/services/event/event-collection.service\";\nimport { EventUploadService } from \"@bitwarden/common/services/event/event-upload.service\";\nimport { NotificationsService } from \"@bitwarden/common/services/notifications.service\";\nimport { SearchService } from \"@bitwarden/common/services/search.service\";\nimport { VaultTimeoutSettingsService } from \"@bitwarden/common/services/vault-timeout/vault-timeout-settings.service\";\nimport {\n  PasswordStrengthService,\n  PasswordStrengthServiceAbstraction,\n} from \"@bitwarden/common/tools/password-strength\";\nimport { SendApiService } from \"@bitwarden/common/tools/send/services/send-api.service\";\nimport { SendApiService as SendApiServiceAbstraction } from \"@bitwarden/common/tools/send/services/send-api.service.abstraction\";\nimport { SendStateProvider } from \"@bitwarden/common/tools/send/services/send-state.provider\";\nimport { SendService } from \"@bitwarden/common/tools/send/services/send.service\";\nimport { InternalSendService as InternalSendServiceAbstraction } from \"@bitwarden/common/tools/send/services/send.service.abstraction\";\nimport { UserId } from \"@bitwarden/common/types/guid\";\nimport { VaultTimeoutStringType } from \"@bitwarden/common/types/vault-timeout.type\";\nimport { CipherService as CipherServiceAbstraction } from \"@bitwarden/common/vault/abstractions/cipher.service\";\nimport { CollectionService as CollectionServiceAbstraction } from \"@bitwarden/common/vault/abstractions/collection.service\";\nimport { CipherFileUploadService as CipherFileUploadServiceAbstraction } from \"@bitwarden/common/vault/abstractions/file-upload/cipher-file-upload.service\";\nimport { FolderApiServiceAbstraction } from \"@bitwarden/common/vault/abstractions/folder/folder-api.service.abstraction\";\nimport { InternalFolderService as InternalFolderServiceAbstraction } from \"@bitwarden/common/vault/abstractions/folder/folder.service.abstraction\";\nimport { TotpService as TotpServiceAbstraction } from \"@bitwarden/common/vault/abstractions/totp.service\";\nimport { VaultSettingsService as VaultSettingsServiceAbstraction } from \"@bitwarden/common/vault/abstractions/vault-settings/vault-settings.service\";\nimport { CipherView } from \"@bitwarden/common/vault/models/view/cipher.view\";\nimport { CipherService } from \"@bitwarden/common/vault/services/cipher.service\";\nimport { CollectionService } from \"@bitwarden/common/vault/services/collection.service\";\nimport { CipherFileUploadService } from \"@bitwarden/common/vault/services/file-upload/cipher-file-upload.service\";\nimport { FolderApiService } from \"@bitwarden/common/vault/services/folder/folder-api.service\";\nimport { FolderService } from \"@bitwarden/common/vault/services/folder/folder.service\";\nimport { TotpService } from \"@bitwarden/common/vault/services/totp.service\";\nimport { VaultSettingsService } from \"@bitwarden/common/vault/services/vault-settings/vault-settings.service\";\nimport {\n  legacyPasswordGenerationServiceFactory,\n  PasswordGenerationServiceAbstraction,\n  legacyUsernameGenerationServiceFactory,\n  UsernameGenerationServiceAbstraction,\n} from \"@bitwarden/generator-legacy\";\nimport {\n  ImportApiService,\n  ImportApiServiceAbstraction,\n  ImportService,\n  ImportServiceAbstraction,\n} from \"@bitwarden/importer/core\";\nimport {\n  IndividualVaultExportService,\n  IndividualVaultExportServiceAbstraction,\n  OrganizationVaultExportService,\n  OrganizationVaultExportServiceAbstraction,\n  VaultExportService,\n  VaultExportServiceAbstraction,\n} from \"@bitwarden/vault-export-core\";\n\nimport { OverlayNotificationsBackground as OverlayNotificationsBackgroundInterface } from \"../autofill/background/abstractions/overlay-notifications.background\";\nimport { OverlayBackground as OverlayBackgroundInterface } from \"../autofill/background/abstractions/overlay.background\";\nimport { AutoSubmitLoginBackground } from \"../autofill/background/auto-submit-login.background\";\nimport ContextMenusBackground from \"../autofill/background/context-menus.background\";\nimport NotificationBackground from \"../autofill/background/notification.background\";\nimport { OverlayNotificationsBackground } from \"../autofill/background/overlay-notifications.background\";\nimport { OverlayBackground } from \"../autofill/background/overlay.background\";\nimport TabsBackground from \"../autofill/background/tabs.background\";\nimport WebRequestBackground from \"../autofill/background/web-request.background\";\nimport { CipherContextMenuHandler } from \"../autofill/browser/cipher-context-menu-handler\";\nimport { ContextMenuClickedHandler } from \"../autofill/browser/context-menu-clicked-handler\";\nimport { MainContextMenuHandler } from \"../autofill/browser/main-context-menu-handler\";\nimport LegacyOverlayBackground from \"../autofill/deprecated/background/overlay.background.deprecated\";\nimport { Fido2Background as Fido2BackgroundAbstraction } from \"../autofill/fido2/background/abstractions/fido2.background\";\nimport { Fido2Background } from \"../autofill/fido2/background/fido2.background\";\nimport { BrowserFido2UserInterfaceService } from \"../autofill/fido2/services/browser-fido2-user-interface.service\";\nimport { AutofillService as AutofillServiceAbstraction } from \"../autofill/services/abstractions/autofill.service\";\nimport AutofillService from \"../autofill/services/autofill.service\";\nimport { SafariApp } from \"../browser/safariApp\";\nimport { BrowserApi } from \"../platform/browser/browser-api\";\nimport { UpdateBadge } from \"../platform/listeners/update-badge\";\n/* eslint-disable no-restricted-imports */\nimport { ChromeMessageSender } from \"../platform/messaging/chrome-message.sender\";\n/* eslint-enable no-restricted-imports */\nimport { OffscreenDocumentService } from \"../platform/offscreen-document/abstractions/offscreen-document\";\nimport { DefaultOffscreenDocumentService } from \"../platform/offscreen-document/offscreen-document.service\";\nimport { BrowserTaskSchedulerService } from \"../platform/services/abstractions/browser-task-scheduler.service\";\nimport { BackgroundBrowserBiometricsService } from \"../platform/services/background-browser-biometrics.service\";\nimport { BrowserCryptoService } from \"../platform/services/browser-crypto.service\";\nimport { BrowserEnvironmentService } from \"../platform/services/browser-environment.service\";\nimport BrowserLocalStorageService from \"../platform/services/browser-local-storage.service\";\nimport BrowserMemoryStorageService from \"../platform/services/browser-memory-storage.service\";\nimport { BrowserScriptInjectorService } from \"../platform/services/browser-script-injector.service\";\nimport I18nService from \"../platform/services/i18n.service\";\nimport { LocalBackedSessionStorageService } from \"../platform/services/local-backed-session-storage.service\";\nimport { BackgroundPlatformUtilsService } from \"../platform/services/platform-utils/background-platform-utils.service\";\nimport { BrowserPlatformUtilsService } from \"../platform/services/platform-utils/browser-platform-utils.service\";\nimport { PopupViewCacheBackgroundService } from \"../platform/services/popup-view-cache-background.service\";\nimport { BackgroundTaskSchedulerService } from \"../platform/services/task-scheduler/background-task-scheduler.service\";\nimport { ForegroundTaskSchedulerService } from \"../platform/services/task-scheduler/foreground-task-scheduler.service\";\nimport { BackgroundMemoryStorageService } from \"../platform/storage/background-memory-storage.service\";\nimport { BrowserStorageServiceProvider } from \"../platform/storage/browser-storage-service.provider\";\nimport { ForegroundMemoryStorageService } from \"../platform/storage/foreground-memory-storage.service\";\nimport { OffscreenStorageService } from \"../platform/storage/offscreen-storage.service\";\nimport { ForegroundSyncService } from \"../platform/sync/foreground-sync.service\";\nimport { SyncServiceListener } from \"../platform/sync/sync-service.listener\";\nimport { fromChromeRuntimeMessaging } from \"../platform/utils/from-chrome-runtime-messaging\";\nimport VaultTimeoutService from \"../services/vault-timeout/vault-timeout.service\";\nimport FilelessImporterBackground from \"../tools/background/fileless-importer.background\";\nimport { VaultFilterService } from \"../vault/services/vault-filter.service\";\n\nimport CommandsBackground from \"./commands.background\";\nimport IdleBackground from \"./idle.background\";\nimport { NativeMessagingBackground } from \"./nativeMessaging.background\";\nimport RuntimeBackground from \"./runtime.background\";\nexport default class MainBackground {\n  messagingService: MessageSender;\n  storageService: BrowserLocalStorageService;\n  secureStorageService: AbstractStorageService;\n  memoryStorageService: AbstractStorageService;\n  memoryStorageForStateProviders: AbstractStorageService & ObservableStorageService;\n  largeObjectMemoryStorageForStateProviders: AbstractStorageService & ObservableStorageService;\n  i18nService: I18nServiceAbstraction;\n  platformUtilsService: PlatformUtilsServiceAbstraction;\n  logService: LogServiceAbstraction;\n  keyGenerationService: KeyGenerationServiceAbstraction;\n  cryptoService: CryptoServiceAbstraction;\n  cryptoFunctionService: CryptoFunctionServiceAbstraction;\n  masterPasswordService: InternalMasterPasswordServiceAbstraction;\n  tokenService: TokenServiceAbstraction;\n  appIdService: AppIdServiceAbstraction;\n  apiService: ApiServiceAbstraction;\n  environmentService: BrowserEnvironmentService;\n  cipherService: CipherServiceAbstraction;\n  folderService: InternalFolderServiceAbstraction;\n  userDecryptionOptionsService: InternalUserDecryptionOptionsServiceAbstraction;\n  collectionService: CollectionServiceAbstraction;\n  vaultTimeoutService: VaultTimeoutService;\n  vaultTimeoutSettingsService: VaultTimeoutSettingsServiceAbstraction;\n  passwordGenerationService: PasswordGenerationServiceAbstraction;\n  syncService: SyncService;\n  passwordStrengthService: PasswordStrengthServiceAbstraction;\n  totpService: TotpServiceAbstraction;\n  autofillService: AutofillServiceAbstraction;\n  containerService: ContainerService;\n  auditService: AuditServiceAbstraction;\n  authService: AuthServiceAbstraction;\n  loginEmailService: LoginEmailServiceAbstraction;\n  importApiService: ImportApiServiceAbstraction;\n  importService: ImportServiceAbstraction;\n  exportService: VaultExportServiceAbstraction;\n  searchService: SearchServiceAbstraction;\n  notificationsService: NotificationsServiceAbstraction;\n  stateService: StateServiceAbstraction;\n  userNotificationSettingsService: UserNotificationSettingsServiceAbstraction;\n  autofillSettingsService: AutofillSettingsServiceAbstraction;\n  badgeSettingsService: BadgeSettingsServiceAbstraction;\n  domainSettingsService: DomainSettingsService;\n  systemService: SystemServiceAbstraction;\n  eventCollectionService: EventCollectionServiceAbstraction;\n  eventUploadService: EventUploadServiceAbstraction;\n  policyService: InternalPolicyServiceAbstraction;\n  sendService: InternalSendServiceAbstraction;\n  sendStateProvider: SendStateProvider;\n  fileUploadService: FileUploadServiceAbstraction;\n  cipherFileUploadService: CipherFileUploadServiceAbstraction;\n  organizationService: InternalOrganizationServiceAbstraction;\n  providerService: ProviderServiceAbstraction;\n  keyConnectorService: KeyConnectorServiceAbstraction;\n  userVerificationService: UserVerificationServiceAbstraction;\n  vaultFilterService: VaultFilterService;\n  usernameGenerationService: UsernameGenerationServiceAbstraction;\n  encryptService: EncryptService;\n  bulkEncryptService: FallbackBulkEncryptService;\n  folderApiService: FolderApiServiceAbstraction;\n  policyApiService: PolicyApiServiceAbstraction;\n  sendApiService: SendApiServiceAbstraction;\n  userVerificationApiService: UserVerificationApiServiceAbstraction;\n  fido2UserInterfaceService: Fido2UserInterfaceServiceAbstraction;\n  fido2AuthenticatorService: Fido2AuthenticatorServiceAbstraction;\n  fido2ActiveRequestManager: Fido2ActiveRequestManagerAbstraction;\n  fido2ClientService: Fido2ClientServiceAbstraction;\n  avatarService: AvatarServiceAbstraction;\n  mainContextMenuHandler: MainContextMenuHandler;\n  cipherContextMenuHandler: CipherContextMenuHandler;\n  configService: ConfigService;\n  configApiService: ConfigApiServiceAbstraction;\n  devicesApiService: DevicesApiServiceAbstraction;\n  devicesService: DevicesServiceAbstraction;\n  deviceTrustService: DeviceTrustServiceAbstraction;\n  authRequestService: AuthRequestServiceAbstraction;\n  accountService: AccountServiceAbstraction;\n  globalStateProvider: GlobalStateProvider;\n  pinService: PinServiceAbstraction;\n  singleUserStateProvider: SingleUserStateProvider;\n  activeUserStateProvider: ActiveUserStateProvider;\n  derivedStateProvider: DerivedStateProvider;\n  stateProvider: StateProvider;\n  taskSchedulerService: BrowserTaskSchedulerService;\n  fido2Background: Fido2BackgroundAbstraction;\n  individualVaultExportService: IndividualVaultExportServiceAbstraction;\n  organizationVaultExportService: OrganizationVaultExportServiceAbstraction;\n  vaultSettingsService: VaultSettingsServiceAbstraction;\n  biometricStateService: BiometricStateService;\n  biometricsService: BiometricsService;\n  stateEventRunnerService: StateEventRunnerService;\n  ssoLoginService: SsoLoginServiceAbstraction;\n  billingAccountProfileStateService: BillingAccountProfileStateService;\n  // eslint-disable-next-line rxjs/no-exposed-subjects -- Needed to give access to services module\n  intraprocessMessagingSubject: Subject<Message<Record<string, unknown>>>;\n  userAutoUnlockKeyService: UserAutoUnlockKeyService;\n  scriptInjectorService: BrowserScriptInjectorService;\n  kdfConfigService: kdfConfigServiceAbstraction;\n  offscreenDocumentService: OffscreenDocumentService;\n  syncServiceListener: SyncServiceListener;\n  themeStateService: DefaultThemeStateService;\n  autoSubmitLoginBackground: AutoSubmitLoginBackground;\n\n  onUpdatedRan: boolean;\n  onReplacedRan: boolean;\n  loginToAutoFill: CipherView = null;\n\n  private commandsBackground: CommandsBackground;\n  private contextMenusBackground: ContextMenusBackground;\n  private idleBackground: IdleBackground;\n  private notificationBackground: NotificationBackground;\n  private overlayBackground: OverlayBackgroundInterface;\n  private overlayNotificationsBackground: OverlayNotificationsBackgroundInterface;\n  private filelessImporterBackground: FilelessImporterBackground;\n  private runtimeBackground: RuntimeBackground;\n  private tabsBackground: TabsBackground;\n  private webRequestBackground: WebRequestBackground;\n\n  private syncTimeout: any;\n  private isSafari: boolean;\n  private nativeMessagingBackground: NativeMessagingBackground;\n\n  private popupViewCacheBackgroundService: PopupViewCacheBackgroundService;\n\n  constructor(public popupOnlyContext: boolean = false) {\n    // Services\n    const lockedCallback = async (userId?: string) => {\n      if (this.notificationsService != null) {\n        // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n        // eslint-disable-next-line @typescript-eslint/no-floating-promises\n        this.notificationsService.updateConnection(false);\n      }\n      await this.refreshBadge();\n      await this.refreshMenu(true);\n      if (this.systemService != null) {\n        await this.systemService.clearPendingClipboard();\n        await this.systemService.startProcessReload(this.authService);\n      }\n    };\n\n    const logoutCallback = async (logoutReason: LogoutReason, userId?: UserId) =>\n      await this.logout(logoutReason, userId);\n\n    const runtimeNativeMessagingBackground = () => this.nativeMessagingBackground;\n\n    const refreshAccessTokenErrorCallback = () => {\n      // Send toast to popup\n      this.messagingService.send(\"showToast\", {\n        type: \"error\",\n        title: this.i18nService.t(\"errorRefreshingAccessToken\"),\n        message: this.i18nService.t(\"errorRefreshingAccessTokenDesc\"),\n      });\n    };\n\n    const isDev = process.env.ENV === \"development\";\n    this.logService = new ConsoleLogService(isDev);\n    this.cryptoFunctionService = new WebCryptoFunctionService(self);\n    this.keyGenerationService = new KeyGenerationService(this.cryptoFunctionService);\n    this.storageService = new BrowserLocalStorageService();\n\n    this.intraprocessMessagingSubject = new Subject<Message<Record<string, unknown>>>();\n\n    this.messagingService = MessageSender.combine(\n      new SubjectMessageSender(this.intraprocessMessagingSubject),\n      new ChromeMessageSender(this.logService),\n    );\n\n    const messageListener = new MessageListener(\n      merge(\n        this.intraprocessMessagingSubject.asObservable(), // For messages from the same context\n        fromChromeRuntimeMessaging(), // For messages from other contexts\n      ),\n    );\n\n    this.offscreenDocumentService = new DefaultOffscreenDocumentService(this.logService);\n\n    this.platformUtilsService = new BackgroundPlatformUtilsService(\n      this.messagingService,\n      (clipboardValue, clearMs) => this.clearClipboard(clipboardValue, clearMs),\n      self,\n      this.offscreenDocumentService,\n    );\n\n    // Creates a session key for mv3 storage of large memory items\n    const sessionKey = new Lazy(async () => {\n      // Key already in session storage\n      const sessionStorage = new BrowserMemoryStorageService();\n      const existingKey = await sessionStorage.get<SymmetricCryptoKey>(\"session-key\");\n      if (existingKey) {\n        if (sessionStorage.valuesRequireDeserialization) {\n          return SymmetricCryptoKey.fromJSON(existingKey);\n        }\n        return existingKey;\n      }\n\n      // New key\n      const { derivedKey } = await this.keyGenerationService.createKeyWithPurpose(\n        128,\n        \"ephemeral\",\n        \"bitwarden-ephemeral\",\n      );\n      await sessionStorage.save(\"session-key\", derivedKey);\n      return derivedKey;\n    });\n\n    const mv3MemoryStorageCreator = () => {\n      if (this.popupOnlyContext) {\n        return new ForegroundMemoryStorageService();\n      }\n\n      // For local backed session storage, we expect that the encrypted data on disk will persist longer than the encryption key in memory\n      // and failures to decrypt because of that are completely expected. For this reason, we pass in `false` to the `EncryptServiceImplementation`\n      // so that MAC failures are not logged.\n      return new LocalBackedSessionStorageService(\n        sessionKey,\n        this.storageService,\n        new EncryptServiceImplementation(this.cryptoFunctionService, this.logService, false),\n        this.platformUtilsService,\n        this.logService,\n      );\n    };\n\n    this.secureStorageService = this.storageService; // secure storage is not supported in browsers, so we use local storage and warn users when it is used\n\n    if (BrowserApi.isManifestVersion(3)) {\n      // manifest v3 can reuse the same storage. They are split for v2 due to lacking a good sync mechanism, which isn't true for v3\n      this.memoryStorageForStateProviders = new BrowserMemoryStorageService(); // mv3 stores to storage.session\n      this.memoryStorageService = this.memoryStorageForStateProviders;\n    } else {\n      if (popupOnlyContext) {\n        this.memoryStorageForStateProviders = new ForegroundMemoryStorageService();\n        this.memoryStorageService = new ForegroundMemoryStorageService();\n      } else {\n        this.memoryStorageForStateProviders = new BackgroundMemoryStorageService(); // mv2 stores to memory\n        this.memoryStorageService = this.memoryStorageForStateProviders;\n      }\n    }\n\n    this.largeObjectMemoryStorageForStateProviders = BrowserApi.isManifestVersion(3)\n      ? mv3MemoryStorageCreator() // mv3 stores to local-backed session storage\n      : this.memoryStorageForStateProviders; // mv2 stores to the same location\n\n    const localStorageStorageService = BrowserApi.isManifestVersion(3)\n      ? new OffscreenStorageService(this.offscreenDocumentService)\n      : new WindowStorageService(self.localStorage);\n\n    const storageServiceProvider = new BrowserStorageServiceProvider(\n      this.storageService,\n      this.memoryStorageForStateProviders,\n      this.largeObjectMemoryStorageForStateProviders,\n      new PrimarySecondaryStorageService(this.storageService, localStorageStorageService),\n    );\n\n    this.globalStateProvider = new DefaultGlobalStateProvider(\n      storageServiceProvider,\n      this.logService,\n    );\n\n    const stateEventRegistrarService = new StateEventRegistrarService(\n      this.globalStateProvider,\n      storageServiceProvider,\n    );\n\n    this.stateEventRunnerService = new StateEventRunnerService(\n      this.globalStateProvider,\n      storageServiceProvider,\n    );\n\n    this.encryptService = BrowserApi.isManifestVersion(2)\n      ? new MultithreadEncryptServiceImplementation(\n          this.cryptoFunctionService,\n          this.logService,\n          true,\n        )\n      : new EncryptServiceImplementation(this.cryptoFunctionService, this.logService, true);\n\n    this.singleUserStateProvider = new DefaultSingleUserStateProvider(\n      storageServiceProvider,\n      stateEventRegistrarService,\n      this.logService,\n    );\n    this.accountService = new AccountServiceImplementation(\n      this.messagingService,\n      this.logService,\n      this.globalStateProvider,\n    );\n    this.activeUserStateProvider = new DefaultActiveUserStateProvider(\n      this.accountService,\n      this.singleUserStateProvider,\n    );\n    this.derivedStateProvider = new InlineDerivedStateProvider();\n    this.stateProvider = new DefaultStateProvider(\n      this.activeUserStateProvider,\n      this.singleUserStateProvider,\n      this.globalStateProvider,\n      this.derivedStateProvider,\n    );\n\n    this.taskSchedulerService = this.popupOnlyContext\n      ? new ForegroundTaskSchedulerService(this.logService, this.stateProvider)\n      : new BackgroundTaskSchedulerService(this.logService, this.stateProvider);\n    this.taskSchedulerService.registerTaskHandler(ScheduledTaskNames.scheduleNextSyncInterval, () =>\n      this.fullSync(),\n    );\n\n    this.environmentService = new BrowserEnvironmentService(\n      this.logService,\n      this.stateProvider,\n      this.accountService,\n    );\n    this.biometricStateService = new DefaultBiometricStateService(this.stateProvider);\n\n    this.userNotificationSettingsService = new UserNotificationSettingsService(this.stateProvider);\n\n    this.tokenService = new TokenService(\n      this.singleUserStateProvider,\n      this.globalStateProvider,\n      this.platformUtilsService.supportsSecureStorage(),\n      this.secureStorageService,\n      this.keyGenerationService,\n      this.encryptService,\n      this.logService,\n      logoutCallback,\n    );\n\n    this.popupViewCacheBackgroundService = new PopupViewCacheBackgroundService(\n      messageListener,\n      this.globalStateProvider,\n    );\n\n    const migrationRunner = new MigrationRunner(\n      this.storageService,\n      this.logService,\n      new MigrationBuilderService(),\n      ClientType.Browser,\n    );\n\n    this.stateService = new StateService(\n      this.storageService,\n      this.secureStorageService,\n      this.memoryStorageService,\n      this.logService,\n      new StateFactory(GlobalState, Account),\n      this.accountService,\n      this.environmentService,\n      this.tokenService,\n      migrationRunner,\n    );\n\n    this.themeStateService = new DefaultThemeStateService(this.globalStateProvider);\n\n    this.masterPasswordService = new MasterPasswordService(\n      this.stateProvider,\n      this.stateService,\n      this.keyGenerationService,\n      this.encryptService,\n    );\n\n    this.i18nService = new I18nService(BrowserApi.getUILanguage(), this.globalStateProvider);\n\n    this.biometricsService = new BackgroundBrowserBiometricsService(\n      runtimeNativeMessagingBackground,\n    );\n\n    this.kdfConfigService = new KdfConfigService(this.stateProvider);\n\n    this.pinService = new PinService(\n      this.accountService,\n      this.cryptoFunctionService,\n      this.encryptService,\n      this.kdfConfigService,\n      this.keyGenerationService,\n      this.logService,\n      this.masterPasswordService,\n      this.stateProvider,\n      this.stateService,\n    );\n\n    this.cryptoService = new BrowserCryptoService(\n      this.pinService,\n      this.masterPasswordService,\n      this.keyGenerationService,\n      this.cryptoFunctionService,\n      this.encryptService,\n      this.platformUtilsService,\n      this.logService,\n      this.stateService,\n      this.accountService,\n      this.stateProvider,\n      this.biometricStateService,\n      this.biometricsService,\n      this.kdfConfigService,\n    );\n\n    this.appIdService = new AppIdService(this.storageService, this.logService);\n\n    this.userDecryptionOptionsService = new UserDecryptionOptionsService(this.stateProvider);\n    this.organizationService = new OrganizationService(this.stateProvider);\n    this.policyService = new PolicyService(this.stateProvider, this.organizationService);\n\n    this.vaultTimeoutSettingsService = new VaultTimeoutSettingsService(\n      this.accountService,\n      this.pinService,\n      this.userDecryptionOptionsService,\n      this.cryptoService,\n      this.tokenService,\n      this.policyService,\n      this.biometricStateService,\n      this.stateProvider,\n      this.logService,\n      VaultTimeoutStringType.OnRestart, // default vault timeout\n    );\n\n    this.apiService = new ApiService(\n      this.tokenService,\n      this.platformUtilsService,\n      this.environmentService,\n      this.appIdService,\n      refreshAccessTokenErrorCallback,\n      this.logService,\n      (logoutReason: LogoutReason, userId?: UserId) => this.logout(logoutReason, userId),\n      this.vaultTimeoutSettingsService,\n    );\n\n    this.domainSettingsService = new DefaultDomainSettingsService(this.stateProvider);\n    this.fileUploadService = new FileUploadService(this.logService);\n    this.cipherFileUploadService = new CipherFileUploadService(\n      this.apiService,\n      this.fileUploadService,\n    );\n    this.searchService = new SearchService(this.logService, this.i18nService, this.stateProvider);\n\n    this.collectionService = new CollectionService(\n      this.cryptoService,\n      this.i18nService,\n      this.stateProvider,\n    );\n\n    this.autofillSettingsService = new AutofillSettingsService(\n      this.stateProvider,\n      this.policyService,\n    );\n    this.badgeSettingsService = new BadgeSettingsService(this.stateProvider);\n    this.policyApiService = new PolicyApiService(this.policyService, this.apiService);\n    this.keyConnectorService = new KeyConnectorService(\n      this.accountService,\n      this.masterPasswordService,\n      this.cryptoService,\n      this.apiService,\n      this.tokenService,\n      this.logService,\n      this.organizationService,\n      this.keyGenerationService,\n      logoutCallback,\n      this.stateProvider,\n    );\n\n    this.passwordStrengthService = new PasswordStrengthService();\n\n    this.passwordGenerationService = legacyPasswordGenerationServiceFactory(\n      this.encryptService,\n      this.cryptoService,\n      this.policyService,\n      this.accountService,\n      this.stateProvider,\n    );\n\n    this.userDecryptionOptionsService = new UserDecryptionOptionsService(this.stateProvider);\n\n    this.devicesApiService = new DevicesApiServiceImplementation(this.apiService);\n    this.deviceTrustService = new DeviceTrustService(\n      this.keyGenerationService,\n      this.cryptoFunctionService,\n      this.cryptoService,\n      this.encryptService,\n      this.appIdService,\n      this.devicesApiService,\n      this.i18nService,\n      this.platformUtilsService,\n      this.stateProvider,\n      this.secureStorageService,\n      this.userDecryptionOptionsService,\n      this.logService,\n      this.configService,\n    );\n\n    this.devicesService = new DevicesServiceImplementation(this.devicesApiService);\n\n    this.authRequestService = new AuthRequestService(\n      this.appIdService,\n      this.accountService,\n      this.masterPasswordService,\n      this.cryptoService,\n      this.apiService,\n      this.stateProvider,\n    );\n\n    this.authService = new AuthService(\n      this.accountService,\n      this.messagingService,\n      this.cryptoService,\n      this.apiService,\n      this.stateService,\n      this.tokenService,\n    );\n\n    this.billingAccountProfileStateService = new DefaultBillingAccountProfileStateService(\n      this.stateProvider,\n    );\n\n    this.ssoLoginService = new SsoLoginService(this.stateProvider);\n\n    this.userVerificationApiService = new UserVerificationApiService(this.apiService);\n\n    this.configApiService = new ConfigApiService(this.apiService, this.tokenService);\n\n    this.configService = new DefaultConfigService(\n      this.configApiService,\n      this.environmentService,\n      this.logService,\n      this.stateProvider,\n      this.authService,\n    );\n\n    this.bulkEncryptService = new FallbackBulkEncryptService(this.encryptService);\n\n    this.cipherService = new CipherService(\n      this.cryptoService,\n      this.domainSettingsService,\n      this.apiService,\n      this.i18nService,\n      this.searchService,\n      this.stateService,\n      this.autofillSettingsService,\n      this.encryptService,\n      this.bulkEncryptService,\n      this.cipherFileUploadService,\n      this.configService,\n      this.stateProvider,\n    );\n    this.folderService = new FolderService(\n      this.cryptoService,\n      this.i18nService,\n      this.cipherService,\n      this.stateProvider,\n    );\n    this.folderApiService = new FolderApiService(this.folderService, this.apiService);\n\n    this.userVerificationService = new UserVerificationService(\n      this.cryptoService,\n      this.accountService,\n      this.masterPasswordService,\n      this.i18nService,\n      this.userVerificationApiService,\n      this.userDecryptionOptionsService,\n      this.pinService,\n      this.logService,\n      this.vaultTimeoutSettingsService,\n      this.platformUtilsService,\n      this.kdfConfigService,\n    );\n\n    this.vaultFilterService = new VaultFilterService(\n      this.organizationService,\n      this.folderService,\n      this.cipherService,\n      this.collectionService,\n      this.policyService,\n      this.stateProvider,\n      this.accountService,\n    );\n\n    this.vaultSettingsService = new VaultSettingsService(this.stateProvider);\n\n    this.vaultTimeoutService = new VaultTimeoutService(\n      this.accountService,\n      this.masterPasswordService,\n      this.cipherService,\n      this.folderService,\n      this.collectionService,\n      this.platformUtilsService,\n      this.messagingService,\n      this.searchService,\n      this.stateService,\n      this.authService,\n      this.vaultTimeoutSettingsService,\n      this.stateEventRunnerService,\n      this.taskSchedulerService,\n      this.logService,\n      lockedCallback,\n      logoutCallback,\n    );\n    this.containerService = new ContainerService(this.cryptoService, this.encryptService);\n\n    this.sendStateProvider = new SendStateProvider(this.stateProvider);\n    this.sendService = new SendService(\n      this.cryptoService,\n      this.i18nService,\n      this.keyGenerationService,\n      this.sendStateProvider,\n      this.encryptService,\n    );\n    this.sendApiService = new SendApiService(\n      this.apiService,\n      this.fileUploadService,\n      this.sendService,\n    );\n\n    this.avatarService = new AvatarService(this.apiService, this.stateProvider);\n\n    this.providerService = new ProviderService(this.stateProvider);\n\n    if (this.popupOnlyContext) {\n      this.syncService = new ForegroundSyncService(\n        this.stateService,\n        this.folderService,\n        this.folderApiService,\n        this.messagingService,\n        this.logService,\n        this.cipherService,\n        this.collectionService,\n        this.apiService,\n        this.accountService,\n        this.authService,\n        this.sendService,\n        this.sendApiService,\n        messageListener,\n        this.stateProvider,\n      );\n    } else {\n      this.syncService = new DefaultSyncService(\n        this.masterPasswordService,\n        this.accountService,\n        this.apiService,\n        this.domainSettingsService,\n        this.folderService,\n        this.cipherService,\n        this.cryptoService,\n        this.collectionService,\n        this.messagingService,\n        this.policyService,\n        this.sendService,\n        this.logService,\n        this.keyConnectorService,\n        this.stateService,\n        this.providerService,\n        this.folderApiService,\n        this.organizationService,\n        this.sendApiService,\n        this.userDecryptionOptionsService,\n        this.avatarService,\n        logoutCallback,\n        this.billingAccountProfileStateService,\n        this.tokenService,\n        this.authService,\n        this.stateProvider,\n      );\n\n      this.syncServiceListener = new SyncServiceListener(\n        this.syncService,\n        messageListener,\n        this.messagingService,\n        this.logService,\n      );\n    }\n    this.eventUploadService = new EventUploadService(\n      this.apiService,\n      this.stateProvider,\n      this.logService,\n      this.authService,\n      this.taskSchedulerService,\n    );\n    this.eventCollectionService = new EventCollectionService(\n      this.cipherService,\n      this.stateProvider,\n      this.organizationService,\n      this.eventUploadService,\n      this.authService,\n      this.accountService,\n    );\n    this.totpService = new TotpService(this.cryptoFunctionService, this.logService);\n\n    this.scriptInjectorService = new BrowserScriptInjectorService(\n      this.platformUtilsService,\n      this.logService,\n    );\n    this.autofillService = new AutofillService(\n      this.cipherService,\n      this.autofillSettingsService,\n      this.totpService,\n      this.eventCollectionService,\n      this.logService,\n      this.domainSettingsService,\n      this.userVerificationService,\n      this.billingAccountProfileStateService,\n      this.scriptInjectorService,\n      this.accountService,\n      this.authService,\n      this.configService,\n      this.userNotificationSettingsService,\n      messageListener,\n    );\n    this.auditService = new AuditService(this.cryptoFunctionService, this.apiService);\n\n    this.importApiService = new ImportApiService(this.apiService);\n\n    this.importService = new ImportService(\n      this.cipherService,\n      this.folderService,\n      this.importApiService,\n      this.i18nService,\n      this.collectionService,\n      this.cryptoService,\n      this.pinService,\n      this.accountService,\n    );\n\n    this.individualVaultExportService = new IndividualVaultExportService(\n      this.folderService,\n      this.cipherService,\n      this.pinService,\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.kdfConfigService,\n    );\n\n    this.organizationVaultExportService = new OrganizationVaultExportService(\n      this.cipherService,\n      this.apiService,\n      this.pinService,\n      this.cryptoService,\n      this.cryptoFunctionService,\n      this.collectionService,\n      this.kdfConfigService,\n      this.accountService,\n    );\n\n    this.exportService = new VaultExportService(\n      this.individualVaultExportService,\n      this.organizationVaultExportService,\n    );\n\n    this.notificationsService = new NotificationsService(\n      this.logService,\n      this.syncService,\n      this.appIdService,\n      this.apiService,\n      this.environmentService,\n      logoutCallback,\n      this.stateService,\n      this.authService,\n      this.messagingService,\n      this.taskSchedulerService,\n    );\n\n    this.fido2UserInterfaceService = new BrowserFido2UserInterfaceService(this.authService);\n    this.fido2AuthenticatorService = new Fido2AuthenticatorService(\n      this.cipherService,\n      this.fido2UserInterfaceService,\n      this.syncService,\n      this.accountService,\n      this.logService,\n    );\n    this.fido2ActiveRequestManager = new Fido2ActiveRequestManager();\n    this.fido2ClientService = new Fido2ClientService(\n      this.fido2AuthenticatorService,\n      this.configService,\n      this.authService,\n      this.vaultSettingsService,\n      this.domainSettingsService,\n      this.taskSchedulerService,\n      this.fido2ActiveRequestManager,\n      this.logService,\n    );\n\n    const systemUtilsServiceReloadCallback = async () => {\n      await this.taskSchedulerService.clearAllScheduledTasks();\n      if (this.platformUtilsService.isSafari()) {\n        // If we do `chrome.runtime.reload` on safari they will send an onInstalled reason of install\n        // and that prompts us to show a new tab, this apparently doesn't happen on sideloaded\n        // extensions and only shows itself production scenarios. See: https://bitwarden.atlassian.net/browse/PM-12298\n        self.location.reload();\n        return;\n      }\n\n      BrowserApi.reloadExtension();\n    };\n\n    this.systemService = new SystemService(\n      this.pinService,\n      this.messagingService,\n      this.platformUtilsService,\n      systemUtilsServiceReloadCallback,\n      this.autofillSettingsService,\n      this.vaultTimeoutSettingsService,\n      this.biometricStateService,\n      this.accountService,\n      this.taskSchedulerService,\n    );\n\n    // Other fields\n    this.isSafari = this.platformUtilsService.isSafari();\n\n    // Background\n    if (!this.popupOnlyContext) {\n      this.fido2Background = new Fido2Background(\n        this.logService,\n        this.fido2ActiveRequestManager,\n        this.fido2ClientService,\n        this.vaultSettingsService,\n        this.scriptInjectorService,\n        this.configService,\n      );\n\n      const lockService = new DefaultLockService(this.accountService, this.vaultTimeoutService);\n\n      this.runtimeBackground = new RuntimeBackground(\n        this,\n        this.autofillService,\n        this.platformUtilsService as BrowserPlatformUtilsService,\n        this.notificationsService,\n        this.autofillSettingsService,\n        this.systemService,\n        this.environmentService,\n        this.messagingService,\n        this.logService,\n        this.configService,\n        this.fido2Background,\n        messageListener,\n        this.accountService,\n        lockService,\n      );\n      this.nativeMessagingBackground = new NativeMessagingBackground(\n        this.cryptoService,\n        this.cryptoFunctionService,\n        this.runtimeBackground,\n        this.messagingService,\n        this.appIdService,\n        this.platformUtilsService,\n        this.logService,\n        this.authService,\n        this.biometricStateService,\n        this.accountService,\n      );\n      this.commandsBackground = new CommandsBackground(\n        this,\n        this.passwordGenerationService,\n        this.platformUtilsService,\n        this.vaultTimeoutService,\n        this.authService,\n      );\n      this.notificationBackground = new NotificationBackground(\n        this.autofillService,\n        this.cipherService,\n        this.authService,\n        this.policyService,\n        this.folderService,\n        this.userNotificationSettingsService,\n        this.domainSettingsService,\n        this.environmentService,\n        this.logService,\n        this.themeStateService,\n        this.configService,\n        this.accountService,\n      );\n\n      this.overlayNotificationsBackground = new OverlayNotificationsBackground(\n        this.logService,\n        this.configService,\n        this.notificationBackground,\n      );\n\n      this.filelessImporterBackground = new FilelessImporterBackground(\n        this.configService,\n        this.authService,\n        this.policyService,\n        this.notificationBackground,\n        this.importService,\n        this.syncService,\n        this.scriptInjectorService,\n      );\n\n      this.autoSubmitLoginBackground = new AutoSubmitLoginBackground(\n        this.logService,\n        this.autofillService,\n        this.scriptInjectorService,\n        this.authService,\n        this.configService,\n        this.platformUtilsService,\n        this.policyService,\n      );\n\n      const contextMenuClickedHandler = new ContextMenuClickedHandler(\n        (options) => this.platformUtilsService.copyToClipboard(options.text),\n        async (_tab) => {\n          const options = (await this.passwordGenerationService.getOptions())?.[0] ?? {};\n          const password = await this.passwordGenerationService.generatePassword(options);\n          this.platformUtilsService.copyToClipboard(password);\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          this.passwordGenerationService.addHistory(password);\n        },\n        async (tab, cipher) => {\n          this.loginToAutoFill = cipher;\n          if (tab == null) {\n            return;\n          }\n\n          // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n          // eslint-disable-next-line @typescript-eslint/no-floating-promises\n          BrowserApi.tabSendMessage(tab, {\n            command: \"collectPageDetails\",\n            tab: tab,\n            sender: \"contextMenu\",\n          });\n        },\n        this.authService,\n        this.cipherService,\n        this.totpService,\n        this.eventCollectionService,\n        this.userVerificationService,\n        this.accountService,\n      );\n\n      this.contextMenusBackground = new ContextMenusBackground(contextMenuClickedHandler);\n    }\n\n    this.idleBackground = new IdleBackground(\n      this.vaultTimeoutService,\n      this.notificationsService,\n      this.accountService,\n      this.vaultTimeoutSettingsService,\n    );\n\n    this.usernameGenerationService = legacyUsernameGenerationServiceFactory(\n      this.apiService,\n      this.i18nService,\n      this.cryptoService,\n      this.encryptService,\n      this.policyService,\n      this.accountService,\n      this.stateProvider,\n    );\n\n    if (!this.popupOnlyContext) {\n      this.mainContextMenuHandler = new MainContextMenuHandler(\n        this.stateService,\n        this.autofillSettingsService,\n        this.i18nService,\n        this.logService,\n        this.billingAccountProfileStateService,\n      );\n\n      this.cipherContextMenuHandler = new CipherContextMenuHandler(\n        this.mainContextMenuHandler,\n        this.authService,\n        this.cipherService,\n      );\n\n      if (chrome.webRequest != null && chrome.webRequest.onAuthRequired != null) {\n        this.webRequestBackground = new WebRequestBackground(\n          this.platformUtilsService,\n          this.cipherService,\n          this.authService,\n          chrome.webRequest,\n        );\n      }\n    }\n\n    this.userAutoUnlockKeyService = new UserAutoUnlockKeyService(this.cryptoService);\n  }\n\n  async bootstrap() {\n    this.containerService.attachToGlobal(self);\n\n    // Only the \"true\" background should run migrations\n    await this.stateService.init({ runMigrations: !this.popupOnlyContext });\n\n    // This is here instead of in in the InitService b/c we don't plan for\n    // side effects to run in the Browser InitService.\n    const accounts = await firstValueFrom(this.accountService.accounts$);\n\n    const setUserKeyInMemoryPromises = [];\n    for (const userId of Object.keys(accounts) as UserId[]) {\n      // For each acct, we must await the process of setting the user key in memory\n      // if the auto user key is set to avoid race conditions of any code trying to access\n      // the user key from mem.\n      setUserKeyInMemoryPromises.push(\n        this.userAutoUnlockKeyService.setUserKeyInMemoryIfAutoUserKeySet(userId),\n      );\n    }\n    await Promise.all(setUserKeyInMemoryPromises);\n\n    await (this.i18nService as I18nService).init();\n    (this.eventUploadService as EventUploadService).init(true);\n\n    this.popupViewCacheBackgroundService.startObservingTabChanges();\n\n    if (this.popupOnlyContext) {\n      return;\n    }\n\n    await this.vaultTimeoutService.init(true);\n    this.fido2Background.init();\n    await this.runtimeBackground.init();\n    await this.notificationBackground.init();\n    this.overlayNotificationsBackground.init();\n    this.filelessImporterBackground.init();\n    this.commandsBackground.init();\n    this.contextMenusBackground?.init();\n    this.idleBackground.init();\n    this.webRequestBackground?.startListening();\n    this.syncServiceListener?.listener$().subscribe();\n    await this.autoSubmitLoginBackground.init();\n\n    if (\n      BrowserApi.isManifestVersion(2) &&\n      (await this.configService.getFeatureFlag(FeatureFlag.PM4154_BulkEncryptionService))\n    ) {\n      await this.bulkEncryptService.setFeatureFlagEncryptService(\n        new BulkEncryptServiceImplementation(this.cryptoFunctionService, this.logService),\n      );\n    }\n\n    // If the user is logged out, switch to the next account\n    const active = await firstValueFrom(this.accountService.activeAccount$);\n    if (active != null) {\n      const authStatus = await firstValueFrom(\n        this.authService.authStatuses$.pipe(map((statuses) => statuses[active.id])),\n      );\n      if (authStatus === AuthenticationStatus.LoggedOut) {\n        const nextUpAccount = await firstValueFrom(this.accountService.nextUpAccount$);\n        await this.switchAccount(nextUpAccount?.id);\n      }\n    }\n\n    await this.initOverlayAndTabsBackground();\n\n    return new Promise<void>((resolve) => {\n      setTimeout(async () => {\n        await this.refreshBadge();\n        await this.fullSync(true);\n        this.taskSchedulerService.setInterval(\n          ScheduledTaskNames.scheduleNextSyncInterval,\n          5 * 60 * 1000, // check every 5 minutes\n        );\n        setTimeout(() => this.notificationsService.init(), 2500);\n        await this.taskSchedulerService.verifyAlarmsState();\n        resolve();\n      }, 500);\n    });\n  }\n\n  async refreshBadge() {\n    await new UpdateBadge(self, this).run();\n  }\n\n  async refreshMenu(forLocked = false) {\n    if (!chrome.windows || !chrome.contextMenus) {\n      return;\n    }\n\n    await MainContextMenuHandler.removeAll();\n\n    if (forLocked) {\n      await this.mainContextMenuHandler?.noAccess();\n      this.onUpdatedRan = this.onReplacedRan = false;\n      return;\n    }\n\n    await this.mainContextMenuHandler?.init();\n\n    const tab = await BrowserApi.getTabFromCurrentWindow();\n    if (tab) {\n      await this.cipherContextMenuHandler?.update(tab.url);\n      this.onUpdatedRan = this.onReplacedRan = false;\n    }\n  }\n\n  async updateOverlayCiphers() {\n    // overlayBackground null in popup only contexts\n    if (this.overlayBackground) {\n      await this.overlayBackground.updateOverlayCiphers();\n    }\n  }\n\n  /**\n   * Switch accounts to indicated userId -- null is no active user\n   */\n  async switchAccount(userId: UserId) {\n    let nextAccountStatus: AuthenticationStatus;\n    try {\n      // HACK to ensure account is switched before proceeding\n      const switchPromise = firstValueFrom(\n        this.accountService.activeAccount$.pipe(\n          filter((account) => (account?.id ?? null) === (userId ?? null)),\n          timeout({\n            first: 1_000,\n            with: () => {\n              throw new Error(\n                \"The account switch process did not complete in a reasonable amount of time.\",\n              );\n            },\n          }),\n        ),\n      );\n      await this.popupViewCacheBackgroundService.clearState();\n      await this.accountService.switchAccount(userId);\n      await switchPromise;\n      // Clear sequentialized caches\n      clearCaches();\n\n      if (userId == null) {\n        await this.refreshBadge();\n        await this.refreshMenu();\n        await this.updateOverlayCiphers();\n        this.messagingService.send(\"goHome\");\n        return;\n      }\n\n      nextAccountStatus = await this.authService.getAuthStatus(userId);\n      const forcePasswordReset =\n        (await firstValueFrom(this.masterPasswordService.forceSetPasswordReason$(userId))) !=\n        ForceSetPasswordReason.None;\n\n      await this.systemService.clearPendingClipboard();\n      await this.notificationsService.updateConnection(false);\n\n      if (nextAccountStatus === AuthenticationStatus.LoggedOut) {\n        this.messagingService.send(\"goHome\");\n      } else if (nextAccountStatus === AuthenticationStatus.Locked) {\n        this.messagingService.send(\"locked\", { userId: userId });\n      } else if (forcePasswordReset) {\n        this.messagingService.send(\"update-temp-password\", { userId: userId });\n      } else {\n        this.messagingService.send(\"unlocked\", { userId: userId });\n        await this.refreshBadge();\n        await this.refreshMenu();\n        await this.updateOverlayCiphers();\n        await this.syncService.fullSync(false);\n      }\n    } finally {\n      this.messagingService.send(\"switchAccountFinish\", {\n        userId: userId,\n        status: nextAccountStatus,\n      });\n    }\n  }\n\n  async logout(logoutReason: LogoutReason, userId?: UserId) {\n    const activeUserId = await firstValueFrom(\n      this.accountService.activeAccount$.pipe(\n        map((a) => a?.id),\n        timeout({\n          first: 2000,\n          with: () => {\n            throw new Error(\"No active account found to logout\");\n          },\n        }),\n      ),\n    );\n\n    const userBeingLoggedOut = userId ?? activeUserId;\n\n    await this.eventUploadService.uploadEvents(userBeingLoggedOut);\n\n    const newActiveUser =\n      userBeingLoggedOut === activeUserId\n        ? await firstValueFrom(this.accountService.nextUpAccount$.pipe(map((a) => a?.id)))\n        : null;\n\n    await this.switchAccount(newActiveUser);\n\n    // HACK: We shouldn't wait for the authentication status to change but instead subscribe to the\n    // authentication status to do various actions.\n    const logoutPromise = firstValueFrom(\n      this.authService.authStatusFor$(userBeingLoggedOut).pipe(\n        filter((authenticationStatus) => authenticationStatus === AuthenticationStatus.LoggedOut),\n        timeout({\n          first: 5_000,\n          with: () => {\n            throw new Error(\"The logout process did not complete in a reasonable amount of time.\");\n          },\n        }),\n      ),\n    );\n\n    await Promise.all([\n      this.cryptoService.clearKeys(userBeingLoggedOut),\n      this.cipherService.clear(userBeingLoggedOut),\n      this.folderService.clear(userBeingLoggedOut),\n      this.collectionService.clear(userBeingLoggedOut),\n      this.vaultTimeoutSettingsService.clear(userBeingLoggedOut),\n      this.vaultFilterService.clear(),\n      this.biometricStateService.logout(userBeingLoggedOut),\n      this.popupViewCacheBackgroundService.clearState(),\n      /* We intentionally do not clear:\n       *  - autofillSettingsService\n       *  - badgeSettingsService\n       *  - userNotificationSettingsService\n       */\n    ]);\n\n    //Needs to be checked before state is cleaned\n    const needStorageReseed = await this.needsStorageReseed(userBeingLoggedOut);\n\n    await this.stateService.clean({ userId: userBeingLoggedOut });\n    await this.accountService.clean(userBeingLoggedOut);\n\n    await this.stateEventRunnerService.handleEvent(\"logout\", userBeingLoggedOut);\n\n    // HACK: Wait for the user logging outs authentication status to transition to LoggedOut\n    await logoutPromise;\n\n    this.messagingService.send(\"doneLoggingOut\", {\n      logoutReason: logoutReason,\n      userId: userBeingLoggedOut,\n    });\n\n    if (needStorageReseed) {\n      await this.reseedStorage();\n    }\n\n    if (BrowserApi.isManifestVersion(3)) {\n      // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      BrowserApi.sendMessage(\"updateBadge\");\n    }\n    await this.refreshBadge();\n    await this.mainContextMenuHandler?.noAccess();\n    await this.notificationsService.updateConnection(false);\n    await this.systemService.clearPendingClipboard();\n    await this.systemService.startProcessReload(this.authService);\n  }\n\n  private async needsStorageReseed(userId: UserId): Promise<boolean> {\n    const currentVaultTimeout = await firstValueFrom(\n      this.vaultTimeoutSettingsService.getVaultTimeoutByUserId$(userId),\n    );\n    return currentVaultTimeout == VaultTimeoutStringType.Never ? false : true;\n  }\n\n  async collectPageDetailsForContentScript(tab: any, sender: string, frameId: number = null) {\n    if (tab == null || !tab.id) {\n      return;\n    }\n\n    const options: any = {};\n    if (frameId != null) {\n      options.frameId = frameId;\n    }\n\n    // FIXME: Verify that this floating promise is intentional. If it is, add an explanatory comment and ensure there is proper error handling.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    BrowserApi.tabSendMessage(\n      tab,\n      {\n        command: \"collectPageDetails\",\n        tab: tab,\n        sender: sender,\n      },\n      options,\n    );\n  }\n\n  async openPopup() {\n    // Chrome APIs cannot open popup\n\n    // TODO: Do we need to open this popup?\n    if (!this.isSafari) {\n      return;\n    }\n    await SafariApp.sendMessageToApp(\"showPopover\", null, true);\n  }\n\n  async reseedStorage() {\n    if (\n      !this.platformUtilsService.isChrome() &&\n      !this.platformUtilsService.isVivaldi() &&\n      !this.platformUtilsService.isOpera()\n    ) {\n      return;\n    }\n\n    await this.storageService.fillBuffer();\n  }\n\n  async clearClipboard(clipboardValue: string, clearMs: number) {\n    if (this.systemService != null) {\n      await this.systemService.clearClipboard(clipboardValue, clearMs);\n    }\n  }\n\n  private async fullSync(override = false) {\n    const syncInternal = 6 * 60 * 60 * 1000; // 6 hours\n    const lastSync = await this.syncService.getLastSync();\n\n    let lastSyncAgo = syncInternal + 1;\n    if (lastSync != null) {\n      lastSyncAgo = new Date().getTime() - lastSync.getTime();\n    }\n\n    if (override || lastSyncAgo >= syncInternal) {\n      await this.syncService.fullSync(override);\n    }\n  }\n\n  /**\n   * Temporary solution to handle initialization of the overlay background behind a feature flag.\n   * Will be reverted to instantiation within the constructor once the feature flag is removed.\n   */\n  async initOverlayAndTabsBackground() {\n    if (\n      this.popupOnlyContext ||\n      this.overlayBackground ||\n      this.tabsBackground ||\n      (await firstValueFrom(this.authService.activeAccountStatus$)) ===\n        AuthenticationStatus.LoggedOut\n    ) {\n      return;\n    }\n\n    const inlineMenuPositioningImprovementsEnabled = await this.configService.getFeatureFlag(\n      FeatureFlag.InlineMenuPositioningImprovements,\n    );\n\n    if (!inlineMenuPositioningImprovementsEnabled) {\n      this.overlayBackground = new LegacyOverlayBackground(\n        this.cipherService,\n        this.autofillService,\n        this.authService,\n        this.environmentService,\n        this.domainSettingsService,\n        this.autofillSettingsService,\n        this.i18nService,\n        this.platformUtilsService,\n        this.themeStateService,\n      );\n    } else {\n      this.overlayBackground = new OverlayBackground(\n        this.logService,\n        this.cipherService,\n        this.autofillService,\n        this.authService,\n        this.environmentService,\n        this.domainSettingsService,\n        this.autofillSettingsService,\n        this.i18nService,\n        this.platformUtilsService,\n        this.vaultSettingsService,\n        this.fido2ActiveRequestManager,\n        this.themeStateService,\n      );\n    }\n\n    this.tabsBackground = new TabsBackground(\n      this,\n      this.notificationBackground,\n      this.overlayBackground,\n    );\n\n    await this.overlayBackground.init();\n    await this.tabsBackground.init();\n  }\n}\n","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\tid: moduleId,\n\t\tloaded: false,\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Flag the module as loaded\n\tmodule.loaded = true;\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n// expose the modules object (__webpack_modules__)\n__webpack_require__.m = __webpack_modules__;\n\n// expose the module cache\n__webpack_require__.c = __webpack_module_cache__;\n\n","// define getter functions for harmony exports\n__webpack_require__.d = function(exports, definition) {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","// This function allow to reference async chunks\n__webpack_require__.u = function(chunkId) {\n\t// return url for filenames based on template\n\treturn \"\" + \"encrypt-worker\" + \".js\";\n};","__webpack_require__.g = (function() {\n\tif (typeof globalThis === 'object') return globalThis;\n\ttry {\n\t\treturn this || new Function('return this')();\n\t} catch (e) {\n\t\tif (typeof window === 'object') return window;\n\t}\n})();","__webpack_require__.o = function(obj, prop) { return Object.prototype.hasOwnProperty.call(obj, prop); }","// define __esModule on exports\n__webpack_require__.r = function(exports) {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","__webpack_require__.nmd = function(module) {\n\tmodule.paths = [];\n\tif (!module.children) module.children = [];\n\treturn module;\n};","var scriptUrl;\nif (__webpack_require__.g.importScripts) scriptUrl = __webpack_require__.g.location + \"\";\nvar document = __webpack_require__.g.document;\nif (!scriptUrl && document) {\n\tif (document.currentScript && document.currentScript.tagName.toUpperCase() === 'SCRIPT')\n\t\tscriptUrl = document.currentScript.src;\n\tif (!scriptUrl) {\n\t\tvar scripts = document.getElementsByTagName(\"script\");\n\t\tif(scripts.length) {\n\t\t\tvar i = scripts.length - 1;\n\t\t\twhile (i > -1 && (!scriptUrl || !/^http(s?):/.test(scriptUrl))) scriptUrl = scripts[i--].src;\n\t\t}\n\t}\n}\n// When supporting browsers where an automatic publicPath is not supported you must specify an output.publicPath manually via configuration\n// or pass an empty string (\"\") and set the __webpack_public_path__ variable from your code to use your own logic.\nif (!scriptUrl) throw new Error(\"Automatic publicPath is not supported in this browser\");\nscriptUrl = scriptUrl.replace(/#.*$/, \"\").replace(/\\?.*$/, \"\").replace(/\\/[^\\/]+$/, \"/\");\n__webpack_require__.p = scriptUrl;","__webpack_require__.b = document.baseURI || self.location.href;\n\n// object to store loaded and loading chunks\n// undefined = chunk not loaded, null = chunk preloaded/prefetched\n// [resolve, reject, Promise] = chunk loading, 0 = chunk loaded\nvar installedChunks = {\n\t471: 0\n};\n\n// no chunk on demand loading\n\n// no prefetching\n\n// no preloaded\n\n// no HMR\n\n// no HMR manifest\n\n__webpack_require__.O.j = function(chunkId) { return installedChunks[chunkId] === 0; };\n\n// install a JSONP callback for chunk loading\nvar webpackJsonpCallback = function(parentChunkLoadingFunction, data) {\n\tvar chunkIds = data[0];\n\tvar moreModules = data[1];\n\tvar runtime = data[2];\n\t// add \"moreModules\" to the modules object,\n\t// then flag all \"chunkIds\" as loaded and fire callback\n\tvar moduleId, chunkId, i = 0;\n\tif(chunkIds.some(function(id) { return installedChunks[id] !== 0; })) {\n\t\tfor(moduleId in moreModules) {\n\t\t\tif(__webpack_require__.o(moreModules, moduleId)) {\n\t\t\t\t__webpack_require__.m[moduleId] = moreModules[moduleId];\n\t\t\t}\n\t\t}\n\t\tif(runtime) var result = runtime(__webpack_require__);\n\t}\n\tif(parentChunkLoadingFunction) parentChunkLoadingFunction(data);\n\tfor(;i < chunkIds.length; i++) {\n\t\tchunkId = chunkIds[i];\n\t\tif(__webpack_require__.o(installedChunks, chunkId) && installedChunks[chunkId]) {\n\t\t\tinstalledChunks[chunkId][0]();\n\t\t}\n\t\tinstalledChunks[chunkId] = 0;\n\t}\n\treturn __webpack_require__.O(result);\n}\n\nvar chunkLoadingGlobal = self[\"webpackChunk_bitwarden_browser\"] = self[\"webpackChunk_bitwarden_browser\"] || [];\nchunkLoadingGlobal.forEach(webpackJsonpCallback.bind(null, 0));\nchunkLoadingGlobal.push = webpackJsonpCallback.bind(null, chunkLoadingGlobal.push.bind(chunkLoadingGlobal));","// module cache are used so entry inlining is disabled\n// startup\n// Load entry module and return exports\nvar __webpack_exports__ = __webpack_require__.O(undefined, [121], function() { return __webpack_require__(61743); })\n__webpack_exports__ = __webpack_require__.O(__webpack_exports__);\n"],"names":["deferred","leafPrototypes","getProto","LogLevelType","ConsoleLogService","constructor","isDev","filter","timersMap","Map","debug","message","optionalParams","this","write","Debug","info","Info","warning","Warning","error","Error","level","console","log","warn","AuthenticationType","TokenTwoFactorRequest","provider","token","remember","nodeURL","self","init","inited","isNode","process","release","name","isBrowser","window","isMobileBrowser","isMobile","isAppleMobileBrowser","isAppleMobile","global","g","fromB64ToArray","str","Uint8Array","Buffer","from","binaryString","atob","bytes","length","i","charCodeAt","fromUrlB64ToArray","fromUrlB64ToB64","fromHexToArray","parseInt","substr","fromUtf8ToArray","strUtf8","unescape","encodeURIComponent","arr","fromByteStringToArray","fromBufferToB64","buffer","toString","binary","byteLength","String","fromCharCode","btoa","fromBufferToUrlB64","fromB64toUrlB64","b64Str","replace","fromBufferToUtf8","fromBufferToByteString","apply","fromBufferToHex","Array","prototype","map","call","x","slice","join","hexStringToArrayBuffer","hexString","arrayBuffer","ArrayBuffer","uint8Array","hexByte","byteValue","urlB64Str","output","fromUrlB64ToUtf8","fromB64ToUtf8","fromUtf8ToB64","utfStr","decodeURIComponent","escape","fromUtf8ToUrlB64","newGuid","c","r","Math","random","isGuid","id","RegExp","guidRegex","test","getHostname","uriString","isNullOrWhitespace","trim","startsWith","indexOf","hostname","validHosts","getHost","url","getUrl","host","getDomain","parseResult","allowPrivateDomains","isIp","domain","getQueryParams","search","split","forEach","pair","parts","set","toLowerCase","getSortFunction","i18nService","prop","a","b","collator","compare","localeCompare","isNullOrEmpty","isPromise","obj","undefined","nameOf","assign","target","source","Object","iterateEnum","keys","k","Number","isNaN","getUrlObject","camelToPascalCase","s","charAt","toUpperCase","pickTextColorBasedOnBgColor","bgColor","threshold","svgTextFill","bgColorHexNums","substring","stringToColor","hash","color","getContainerService","bitwardenContainerService","validateHexColor","mapToRecord","fromEntries","recordToMap","record","entries","e","merge","destination","encodeRFC3986URIComponent","normalizePath","denormalizedPath","win","mobile","navigator","userAgent","vendor","opera","match","delay","ms","Promise","resolve","setTimeout","asyncToObservable","generator","of","pipe","daysRemaining","targetDate","diffTime","getTime","Date","now","max","floor","hasProtocol","URL","regexpEmojiPresentation","originalMinimumPasswordLength","minimumPasswordLength","DomainMatchBlacklist","Set","WebAuthnLoginResponseRequest","credential","rawId","type","extensions","WebAuthnLoginAssertionResponseRequest","super","response","AuthenticatorAssertionResponse","authenticatorData","signature","clientDataJSON","userHandle","fromJSON","json","create","EncryptionType","EXPECTED_NUM_PARTS_BY_ENCRYPTION_TYPE","AesCbc256_B64","AesCbc128_HmacSha256_B64","AesCbc256_HmacSha256_B64","Rsa2048_OaepSha256_B64","Rsa2048_OaepSha1_B64","Rsa2048_OaepSha256_HmacSha256_B64","Rsa2048_OaepSha1_HmacSha256_B64","FileUploadType","HashPurpose","HtmlStorageLocation","KeySuffixOptions","StorageLocation","ThemeType","KdfType","SymmetricCryptoKey","key","encType","encKey","macKey","keyB64","encKeyB64","macKeyB64","toJSON","fromString","AuthRequestLoginCredentials","email","accessCode","authRequestId","decryptedUserKey","decryptedMasterKey","decryptedMasterKeyHash","twoFactor","AuthRequest","WebAuthnLoginCredentials","deviceResponse","prfKey","WebAuthn","KeyConnectorUserDecryptionOption","fromResponse","options","keyConnectorUrl","TrustedDeviceUserDecryptionOption","hasAdminApproval","hasLoginApprovingDevice","hasManageResetPasswordPermission","isTdeOffboarding","UserDecryptionOptions","decryptionOptions","userDecryptionOptions","responseOptions","hasMasterPassword","trustedDeviceOption","keyConnectorOption","usingKeyConnector","EncString","encryptedStringOrType","data","iv","mac","initFromData","initFromEncryptedString","ivBytes","macBytes","dataBytes","encryptedString","encryptionType","encPieces","parseEncryptedString","headerPieces","NaN","isSerializedEncString","decrypt","orgId","decryptedValue","getKeyForDecryption","encryptService","getEncryptService","decryptToUtf8","cryptoService","getCryptoService","getOrgKey","getUserKeyWithLegacySupport","DeriveDefinition","stateDefinition","uniqueDerivationName","definition","isFromDeriveDefinition","fromWithUserId","derive","deserialize","serialized","deserializer","cleanupDelayMs","clearOnCleanup","buildCacheKey","storageKey","isArray","StateProvider","array","elementDeserializer","element","valueDeserializer","jsonValue","value","KeyDefinition","errorKeyName","enableUpdateLogging","enableRetrievalLogging","v","fullName","USER_KEY_DEFINITION_MARKER","Symbol","UserKeyDefinition","clearOn","buildKey","userId","StateDefinition","defaultStorageLocation","storageLocationOverrides","ORGANIZATIONS_DISK","POLICIES_DISK","PROVIDERS_DISK","BILLING_DISK","web","ACCOUNT_DISK","AUTH_REQUEST_DISK_LOCAL","AVATAR_DISK","DEVICE_TRUST_DISK_LOCAL","browser","KDF_CONFIG_DISK","KEY_CONNECTOR_DISK","LOGIN_EMAIL_DISK","LOGIN_EMAIL_MEMORY","LOGIN_STRATEGY_MEMORY","MASTER_PASSWORD_DISK","MASTER_PASSWORD_MEMORY","PIN_DISK","PIN_MEMORY","SSO_DISK","TOKEN_DISK","TOKEN_DISK_LOCAL","TOKEN_MEMORY","USER_DECRYPTION_OPTIONS_DISK","VAULT_TIMEOUT_SETTINGS_DISK_LOCAL","BADGE_SETTINGS_DISK","USER_NOTIFICATION_SETTINGS_DISK","DOMAIN_SETTINGS_DISK","AUTOFILL_SETTINGS_DISK","AUTOFILL_SETTINGS_DISK_LOCAL","BIOMETRIC_SETTINGS_DISK","CLEAR_EVENT_DISK","CONFIG_DISK","CRYPTO_DISK","CRYPTO_MEMORY","ENVIRONMENT_DISK","ENVIRONMENT_MEMORY","POPUP_VIEW_MEMORY","SYNC_DISK","THEMING_DISK","TRANSLATION_DISK","TASK_SCHEDULER_DISK","GENERATOR_DISK","EVENT_COLLECTION_DISK","SEND_DISK","SEND_MEMORY","COLLECTION_DATA","FOLDER_DISK","VAULT_FILTER_DISK","VAULT_SETTINGS_DISK","VAULT_SEARCH_MEMORY","CIPHERS_DISK","CIPHERS_DISK_LOCAL","CIPHERS_MEMORY","STATE_LOCK_EVENT","STATE_LOGOUT_EVENT","StateEventRegistrarService","globalStateProvider","storageServiceProvider","stateEventStateMap","lock","get","logout","registerEvents","keyDefinition","clearEvent","eventState","storageLocation","newEvent","state","location","update","existingTickets","push","shouldUpdate","currentTickets","findIndex","StateEventRunnerService","stateEventMap","handleEvent","event","tickets","state$","failures","ticket","service","ticketStorageKey","storageKeyFor","remove","err","errorMessage","PIN_KEY_ENCRYPTED_USER_KEY_PERSISTENT","PIN_KEY_ENCRYPTED_USER_KEY_EPHEMERAL","USER_KEY_ENCRYPTED_PIN","OLD_PIN_KEY_ENCRYPTED_MASTER_KEY","PinService","accountService","cryptoFunctionService","kdfConfigService","keyGenerationService","logService","masterPasswordService","stateProvider","stateService","getPinKeyEncryptedUserKeyPersistent","validateUserId","getUserState$","setPinKeyEncryptedUserKeyPersistent","pinKeyEncryptedUserKey","setUserState","clearPinKeyEncryptedUserKeyPersistent","getPinKeyEncryptedUserKeyEphemeral","setPinKeyEncryptedUserKeyEphemeral","clearPinKeyEncryptedUserKeyEphemeral","createPinKeyEncryptedUserKey","pin","userKey","accounts$","accounts","kdfConfig","getKdfConfig","pinKey","makePinKey","encrypt","storePinKeyEncryptedUserKey","storeAsEphemeral","getUserKeyEncryptedPin","setUserKeyEncryptedPin","userKeyEncryptedPin","clearUserKeyEncryptedPin","createUserKeyEncryptedPin","getOldPinKeyEncryptedMasterKey","clearOldPinKeyEncryptedMasterKey","salt","deriveKeyFromPassword","stretchKey","getPinLockType","aUserKeyEncryptedPinIsSet","aPinKeyEncryptedUserKeyPersistentIsSet","anOldPinKeyEncryptedMasterKeyIsSet","isPinSet","isPinDecryptionAvailable","pinLockType","pinKeyEncryptedUserKeyEphemeral","Boolean","decryptUserKeyWithPin","requireMasterPasswordOnClientRestart","oldPinKeyEncryptedMasterKey","getPinKeyEncryptedKeys","decryptAndMigrateOldPinKeyEncryptedMasterKey","decryptUserKey","validatePin","decryptToBytes","masterKey","decryptMasterKeyWithPin","encUserKey","getEncryptedCryptoSymmetricKey","decryptUserKeyWithMasterKey","oldPinKeyEncryptedMasterKeyString","decryptedPin","compareFast","AuthenticationStatus","RangeWithDefault","min","defaultValue","inRange","iterations","kdfType","PBKDF2_SHA256","ITERATIONS","validateKdfConfig","memory","parallelism","Argon2id","MEMORY","PARALLELISM","BaseResponse","getResponseProperty","propertyName","exactName","otherCasePropertyName","status","identityResponse","errorModel","responseErrorModel","validationErrors","captchaSiteKey","HCaptcha_SiteKey","captchaRequired","statusCode","getSingleMessage","hasOwnProperty","getAllMessages","messages","item","prefix","lastSep","lastIndexOf","DefaultTaskSchedulerService","taskHandlers","taskName","delayInMs","validateRegisteredTask","timeoutHandle","globalThis","triggerTask","Subscription","clearTimeout","setInterval","intervalInMs","_initialDelayInMs","intervalHandle","clearInterval","registerTaskHandler","handler","unregisterTaskHandler","delete","_periodInMinutes","has","TwoFactorProviderType","ForceSetPasswordReason","ClientType","DeviceType","DeviceRequest","appId","platformUtilsService","getDevice","getDeviceString","identifier","pushToken","TokenRequest","device","alterIdentityTokenHeaders","headers","setTwoFactor","setAuthRequestAccessCode","authRequest","toIdentityToken","clientId","scope","client_id","deviceType","deviceIdentifier","deviceName","twoFactorToken","twoFactorProvider","twoFactorRemember","PasswordTokenRequest","masterPasswordHash","captchaResponse","grant_type","username","password","IdentityCaptchaResponse","siteKey","MasterPasswordPolicyResponse","minComplexity","minLength","requireUpper","requireLower","requireNumbers","requireSpecial","enforceOnLogin","KeyConnectorUserDecryptionOptionResponse","TrustedDeviceUserDecryptionOptionResponse","EncryptedPrivateKey","encryptedPrivateKey","EncryptedUserKey","encryptedUserKey","WebAuthnPrfDecryptionOptionResponse","UserDecryptionOptionsResponse","TrustedDeviceOption","KeyConnectorOption","WebAuthnPrfOption","webAuthnPrfOption","IdentityTokenResponse","accessToken","access_token","expiresIn","expires_in","refreshToken","refresh_token","tokenType","token_type","resetMasterPassword","privateKey","kdf","kdfIterations","kdfMemory","kdfParallelism","forcePasswordReset","apiUseKeyConnector","masterPasswordPolicy","IdentityTwoFactorResponse","captchaToken","twoFactorProviders","twoFactorProviders2","ssoEmail2faSessionToken","Android","iOS","AndroidAmazon","WindowsDesktop","MacOsDesktop","LinuxDesktop","UWP","WindowsCLI","MacOsCLI","LinuxCLI","EventSystemUser","EventType","HttpStatusCode","IntegrationType","NativeMessagingVersion","NotificationType","KeysRequest","publicKey","EncryptionPair","encrypted","decrypted","decryptedFromJson","encryptedFromJson","AccountKeys","cryptoSymmetricKey","initRecordEncryptionPairsFromJSON","decObj","AccountProfile","Account","profile","AuthRequestLoginStrategyData","tokenRequest","authRequestCredentials","Domain","buildDomainModel","dataObj","notEncList","objProp","buildDataModel","notEncStringList","decryptObj","viewModel","promises","theProp","p","then","mapProp","val","all","MasterPasswordPolicyOptions","policy","PasswordLoginStrategyData","forcePasswordResetReason","None","SsoTokenRequest","code","codeVerifier","redirectUri","code_verifier","redirect_uri","SsoLoginStrategyData","UserApiTokenRequest","clientSecret","client_secret","UserApiLoginStrategyData","WebAuthnLoginTokenRequest","JSON","stringify","WebAuthnLoginStrategyData","credentials","sso","userApiKey","webAuthn","USER_DECRYPTION_OPTIONS","UserDecryptionOptionsService","userDecryptionOptionsState","getActive","userDecryptionOptions$","hasMasterPassword$","userDecryptionOptionsById$","getUser","setUserDecryptionOptions","_","AdminAuthRequestStorable","privateKeyBuffer","PasswordlessAuthRequest","requestApproved","ADMIN_AUTH_REQUEST_KEY","AuthRequestService","appIdService","apiService","authRequestPushNotificationSubject","Subject","authRequestPushNotification$","asObservable","getAdminAuthRequest","authRequestSerialized","setAdminAuthRequest","clearAdminAuthRequest","approveOrDenyAuthRequest","approve","pubKey","activeAccount$","masterKey$","masterKeyHash","masterKeyHash$","encryptedMasterKeyHash","keyToEncrypt","rsaEncrypt","getUserKey","encryptedKey","getAppId","putAuthRequest","setUserKeyAfterDecryptingSharedUserKey","authReqResponse","authReqPrivateKey","decryptPubKeyEncryptedUserKey","setUserKey","setKeysAfterDecryptingSharedMasterKeyAndHash","decryptPubKeyEncryptedMasterKeyAndHash","setMasterKey","setMasterKeyHash","pubKeyEncryptedUserKey","decryptedUserKeyBytes","rsaDecrypt","pubKeyEncryptedMasterKey","pubKeyEncryptedMasterKeyHash","decryptedMasterKeyArrayBuffer","decryptedMasterKeyHashArrayBuffer","sendAuthRequestPushNotification","notification","next","getFingerprintPhrase","getFingerprint","FeatureFlag","FALSE","DefaultFeatureFlagValue","BrowserFilelessImport","ItemShare","GeneratorToolsModernization","EnableConsolidatedBilling","AC1795_UpdatedSubscriptionStatusSection","EnableDeleteProvider","ExtensionRefresh","PersistPopupView","RestrictProviderAccess","PM4154_BulkEncryptionService","UseTreeWalkerApiForPageDetailsCollection","EmailVerification","InlineMenuFieldQualification","MemberAccessReport","TwoFactorComponentRefactor","EnableTimeThreshold","InlineMenuPositioningImprovements","ProviderClientVaultPrivacyBanner","VaultBulkManagementAction","AC2828_ProviderPortalMembersPage","IdpAutoSubmitLogin","DeviceTrustLogging","AuthenticatorTwoFactorToken","UnauthenticatedExtensionUIRefresh","EnableUpgradePasswordManagerSub","GenerateIdentityFillScriptRefactor","EnableNewCardCombinedExpiryAutofill","DelayFido2PageScriptInitWithinMv2","AccountDeprovisioning","NotificationBarAddLoginImprovements","AC2476_DeprecateStripeSourcesAPI","CipherKeyEncryption","OrganizationApiKeyType","OrganizationConnectionType","OrganizationUserStatusType","OrganizationUserType","PolicyType","ProviderType","ProviderUserStatusType","ProviderUserType","ScimProviderType","ProviderStatusType","DefaultLockService","vaultTimeoutService","lockAll","activeAccount","otherAccounts","accountId","otherAccount","OrganizationData","enabled","usePolicies","useGroups","useDirectory","useEvents","useTotp","use2fa","useApi","useSso","useKeyConnector","useScim","useCustomPermissions","useResetPassword","useSecretsManager","usePasswordManager","useActivateAutofillPolicy","selfHost","usersGetPremium","seats","maxCollections","maxStorageGb","ssoBound","permissions","resetPasswordEnrolled","organizationUserId","hasPublicAndPrivateKeys","providerId","providerName","providerType","familySponsorshipFriendlyName","familySponsorshipAvailable","productTierType","keyConnectorEnabled","familySponsorshipLastSyncDate","familySponsorshipValidUntil","familySponsorshipToDelete","accessSecretsManager","limitCollectionCreationDeletion","allowAdminAccessToAllCollectionItems","isMember","isProviderUser","Organization","canAccess","isOwner","Confirmed","isAdmin","Admin","Owner","canAccessEventLogs","accessEventLogs","canAccessImportExport","accessImportExport","canAccessReports","accessReports","canCreateNewCollections","createNewCollections","canEditAnyCollection","Custom","editAnyCollection","canEditUnmanagedCollections","canEditUnassignedCiphers","restrictProviderAccessFlagEnabled","canEditAllCiphers","canDeleteAnyCollection","deleteAnyCollection","canViewAllCollections","canManageGroups","manageGroups","canManageSso","manageSso","canManageDomainVerification","canManageScim","manageScim","canManagePolicies","managePolicies","canManageUsers","manageUsers","canManageUsersPassword","manageResetPassword","canManageDeviceApprovals","isExemptFromPolicies","canViewSubscription","canEditSubscription","hasProvider","Msp","canEditPaymentMethods","canViewBillingHistory","hasReseller","Reseller","canAccessSecretsManager","isFreeOrg","canManageSponsorships","ORGANIZATIONS","mapToBooleanHasAnyOrganizations","orgs","mapToSingleOrganization","organizationId","find","o","OrganizationService","organizations$","getOrganizationsFromState$","memberOrganizations$","canManageSponsorships$","get$","getAll$","getAll","hasOrganizations","upsert","organization","stateFor","existingOrganizations","organizations","getFromState","mapOrganizationRecordToArray","values","t","dr","continuationToken","PolicyData","fromPolicy","Policy","fromListResponse","d","PolicyResponse","PolicyApiService","policyService","getPolicy","send","getPolicies","getPoliciesByToken","getMasterPasswordPolicyResponseForOrgUser","getMasterPasswordPolicyOptsForOrgUser","masterPasswordPolicyResponse","masterPasswordPolicyOptions$","NotFound","putPolicy","request","ResetPasswordPolicyOptions","autoEnrollEnabled","policyRecordToArray","policiesMap","f","POLICIES","policyData","PolicyService","organizationService","activeUserPolicyState","activeUserPolicies$","policies$","policyType","filteredPolicies$","policies","enforcedPolicyFilter","at","policyAppliesToActiveUser$","policyAppliesToUser","orgDict","Accepted","isExemptFromPolicy","obsPolicies","enforcedOptions","filteredPolicies","MasterPassword","currentPolicy","evaluateMasterPassword","passwordStrength","newPassword","enforcedPolicyOptions","toLocaleLowerCase","toLocaleUpperCase","getResetPasswordPolicyOptions","resetPasswordPolicyOptions","ResetPassword","MaximumVaultTimeout","PasswordGenerator","PersonalOwnership","Provider","providerStatus","isProviderAdmin","canCreateOrganizations","ProviderAdmin","PROVIDERS","mapToSingleProvider","providers","ProviderService","providers$","activeUserId$","take","mapProviderRecordToArray","save","accountInfoEqual","ACCOUNT_ACCOUNTS","accountInfo","ACCOUNT_ACTIVE_ACCOUNT_ID","ACCOUNT_ACTIVITY","activity","LOGGED_OUT_INFO","emailVerified","AccountServiceImplementation","messagingService","accountsState","activeAccountIdState","bufferSize","refCount","accountActivity$","sortedUserIds$","lastActive","sort","nextUpAccount$","sortedUserIds","nextId","addAccount","accountData","setAccountActivity","setAccountName","setAccountInfo","setAccountEmail","setAccountEmailVerified","clean","removeAccountActivity","switchAccount","updateActivity","combineLatestWith","lastActivity","oldActivity","newAccountInfo","oldAccountInfo","AuthService","messageSender","tokenService","activeAccountStatus$","account","authStatusFor$","authStatuses$","statuses","reduce","acc","getInMemoryUserKeyFor$","hasAccessToken$","hasAccessToken","Unlocked","Locked","LoggedOut","getAuthStatus","logOut","callback","UpdateAvatarRequest","avatarColor","AVATAR_COLOR","AvatarService","avatarColor$","setAvatarColor","putAvatar","setSyncAvatarColor","getUserAvatarColor$","SecretVerificationRequest","UpdateDevicesTrustRequest","DeviceKeysUpdateRequest","DEVICE_KEY","deviceKey","SHOULD_TRUST_DEVICE","shouldTrustDevice","DeviceTrustService","devicesApiService","secureStorageService","userDecryptionOptionsService","configService","platformSupportsSecureStorage","supportsSecureStorage","deviceKeySecureStorageKey","supportsDeviceTrust$","getShouldTrustDevice","setShouldTrustDevice","trustDeviceIfRequired","trustDevice","makeDeviceKey","devicePublicKey","devicePrivateKey","rsaGenerateKeyPair","devicePublicKeyEncryptedUserKey","userKeyEncryptedDevicePublicKey","deviceKeyEncryptedDevicePrivateKey","updateTrustedDeviceKeys","setDeviceKey","showToast","rotateDevicesTrust","newUserKey","getDeviceKey","oldUserKey","userKey$","secretVerificationRequest","currentDeviceKeys","getDeviceKeys","decryptedDevicePublicKey","encryptedPublicKey","encryptedNewUserKey","encryptedDevicePublicKey","currentDeviceUpdateRequest","trustRequest","currentDevice","otherDevices","updateTrust","deviceKeyB64","getSecureStorageOptions","createKey","decryptUserKeyWithDeviceKey","encryptedDevicePrivateKey","recordDeviceTrustLoss","getFeatureFlag","postDeviceTrustLoss","Disk","useSecureStorage","DeviceView","DevicesServiceImplementation","getDevices$","defer","getDevices","deviceResponses","getDeviceByIdentifier$","getDeviceByIdentifier","isDeviceKnownForUser$","getKnownDevice","updateTrustedDeviceKeys$","DeviceResponse","creationDate","revisionDate","ProtectedDeviceResponse","TrustedDeviceKeysRequest","DevicesApiServiceImplementation","result","updateDevicesTrustRequestModel","KDF_CONFIG","KdfConfigService","setKdfConfig","KeyConnectorUserKeyRequest","SetKeyConnectorKeyRequest","orgIdentifier","USES_KEY_CONNECTOR","usesKeyConnector","CONVERT_ACCOUNT_TO_KEY_CONNECTOR","convertAccountToKeyConnector","KeyConnectorService","logoutCallback","usesKeyConnectorState","convertAccountToKeyConnectorState","setUsesKeyConnector","getUsesKeyConnector","userNeedsMigration","loggedInUsingSso","getIsExternal","requiredByOrganization","getManagingOrganization","userIsNotUsingKeyConnector","migrateUser","keyConnectorRequest","postUserKeyToKeyConnector","handleKeyConnectorError","postConvertToKeyConnector","setMasterKeyFromUrl","masterKeyResponse","getMasterKeyFromKeyConnector","keyArr","convertNewSsoUserToKeyConnector","tokenResponse","legacyKeyConnectorUrl","makeMasterKey","getEmail","makeUserKey","setMasterKeyEncryptedUserKey","privKey","makeKeyPair","setPasswordRequest","postSetKeyConnectorKey","setConvertAccountRequired","getConvertAccountRequired","removeConvertAccountRequired","MASTER_KEY","MASTER_KEY_HASH","MASTER_KEY_ENCRYPTED_USER_KEY","FORCE_SET_PASSWORD_REASON","reason","MasterPasswordService","forceSetPasswordReason$","getMasterKeyEncryptedUserKey","clearMasterKey","clearMasterKeyHash","setForceSetPasswordReason","deprecatedKey","decUserKey","newKey","CODE_VERIFIER","SSO_STATE","USER_ORGANIZATION_SSO_IDENTIFIER","organizationIdentifier","GLOBAL_ORGANIZATION_SSO_IDENTIFIER","SSO_EMAIL","SsoLoginService","codeVerifierState","getGlobal","ssoState","orgSsoIdentifierState","ssoEmailState","activeUserOrgSsoIdentifierState","getCodeVerifier","setCodeVerifier","getSsoState","setSsoState","getOrganizationSsoIdentifier","setOrganizationSsoIdentifier","getSsoEmail","setSsoEmail","getActiveUserOrganizationSsoIdentifier","setActiveUserOrganizationSsoIdentifier","VaultTimeoutAction","VaultTimeoutStringType","SetTokensResult","clientIdSecretPair","ACCESS_TOKEN_DISK","ACCESS_TOKEN_MEMORY","REFRESH_TOKEN_DISK","REFRESH_TOKEN_MEMORY","EMAIL_TWO_FACTOR_TOKEN_RECORD_DISK_LOCAL","emailTwoFactorTokenRecord","API_KEY_CLIENT_ID_DISK","apiKeyClientId","API_KEY_CLIENT_ID_MEMORY","API_KEY_CLIENT_SECRET_DISK","apiKeyClientSecret","API_KEY_CLIENT_SECRET_MEMORY","SECURITY_STAMP_MEMORY","securityStamp","TokenStorageLocation","TokenService","singleUserStateProvider","accessTokenKeySecureStorageKey","refreshTokenSecureStorageKey","initializeState","disk","emailTwoFactorTokenRecordGlobalState","activeUserIdGlobalState","setTokens","vaultTimeoutAction","vaultTimeout","clientIdClientSecret","getUserIdFromAccessToken","newAccessToken","_setAccessToken","newTokens","setRefreshToken","setClientId","setClientSecret","getAccessTokenKey","accessTokenKeyB64","createAndSaveAccessTokenKey","newAccessTokenKey","clearAccessTokenKey","getOrCreateAccessTokenKey","accessTokenKey","encryptAccessToken","decryptAccessToken","encryptedAccessToken","determineStorageLocation","SecureStorage","decryptedAccessToken","Memory","setAccessToken","clearAccessToken","getAccessToken","accessTokenMemory","getStateValueByUserIdAndKeyDef","accessTokenDisk","encryptedAccessTokenEncString","decryptedRefreshToken","saveStringToSecureStorage","refreshTokenSecureStorage","getStringFromSecureStorage","getRefreshToken","refreshTokenMemory","refreshTokenDisk","clearRefreshToken","getClientId","apiKeyClientIdMemory","clearClientId","getClientSecret","apiKeyClientSecretMemory","clearClientSecret","setTwoFactorToken","getTwoFactorToken","clearTwoFactorToken","clearTokens","decodeAccessToken","tokenOrUserId","jwtToken","encodedPayload","decodedPayloadJSON","decodingError","parse","jsonError","decodeJwtTokenToJson","getTokenExpirationDate","decoded","exp","expirationDate","setUTCSeconds","tokenSecondsRemaining","offsetSeconds","date","msRemaining","valueOf","round","tokenNeedsRefresh","minutes","getUserId","sub","getEmailVerified","email_verified","getName","getIssuer","iss","amr","includes","getSecurityStamp","setSecurityStamp","LogOut","VerificationType","UserVerificationApiService","postAccountVerifyOTP","postAccountRequestOTP","postAccountVerifyPassword","VerifyOTPRequest","OTP","UserVerificationService","userVerificationApiService","pinService","vaultTimeoutSettingsService","getAvailableVerificationOptions","verificationType","userHasMasterPassword","biometricsLockSet","biometricsUserKeyStored","hasMasterPasswordAndMasterKeyHash","isBiometricLockSet","hasUserKeyStored","Biometric","client","masterPassword","biometrics","server","otp","buildRequest","verification","requestClass","alreadyHashed","validateSecretInput","secret","hashMasterKey","verifyUser","verificationHasSecret","verifyUserByOTP","verifyUserByMasterPassword","PIN","verifyUserByPIN","Biometrics","verifyUserByBiometrics","policyOptions","compareAndUpdateKeyHash","serverKeyHash","ServerAuthorization","localKeyHash","LocalAuthorization","getUserKeyFromStorage","requestOTP","ClearClipboardDelay","AUTOFILL_CARD_ID","AUTOFILL_ID","SHOW_AUTOFILL_BUTTON","AUTOFILL_IDENTITY_ID","COPY_IDENTIFIER_ID","COPY_PASSWORD_ID","COPY_USERNAME_ID","COPY_VERIFICATION_CODE_ID","CREATE_CARD_ID","CREATE_IDENTITY_ID","CREATE_LOGIN_ID","GENERATE_PASSWORD_ID","NOOP_COMMAND_SUFFIX","ROOT_ID","SEPARATOR_ID","NOTIFICATION_BAR_LIFESPAN_MS","AutofillOverlayVisibility","ExtensionCommand","AUTOFILL_ON_PAGE_LOAD","AUTOFILL_ON_PAGE_LOAD_DEFAULT","AUTOFILL_ON_PAGE_LOAD_CALLOUT_DISMISSED","AUTOFILL_ON_PAGE_LOAD_POLICY_TOAST_HAS_DISPLAYED","AUTO_COPY_TOTP","INLINE_MENU_VISIBILITY","ENABLE_CONTEXT_MENU","CLEAR_CLIPBOARD_DELAY","AutofillSettingsService","autofillOnPageLoadState","autofillOnPageLoad$","autofillOnPageLoadDefaultState","autofillOnPageLoadDefault$","autofillOnPageLoadCalloutIsDismissedState","autofillOnPageLoadCalloutIsDismissed$","activateAutofillOnPageLoadFromPolicy$","ActivateAutofill","autofillOnPageLoadPolicyToastHasDisplayedState","autofillOnPageLoadPolicyToastHasDisplayed$","autoCopyTotpState","autoCopyTotp$","inlineMenuVisibilityState","inlineMenuVisibility$","enableContextMenuState","enableContextMenu$","clearClipboardDelayState","clearClipboardDelay$","setAutofillOnPageLoad","newValue","setAutofillOnPageLoadDefault","setAutofillOnPageLoadCalloutIsDismissed","setAutofillOnPageLoadPolicyToastHasDisplayed","setAutoCopyTotp","setInlineMenuVisibility","setEnableContextMenu","setClearClipboardDelay","ENABLE_BADGE_COUNTER","BadgeSettingsService","enableBadgeCounterState","enableBadgeCounter$","setEnableBadgeCounter","UriMatchStrategy","SHOW_FAVICONS","NEVER_DOMAINS","EQUIVALENT_DOMAINS","DEFAULT_URI_MATCH_STRATEGY","DefaultDomainSettingsService","showFaviconsState","showFavicons$","neverDomainsState","neverDomains$","equivalentDomainsState","equivalentDomains$","defaultUriMatchStrategyState","defaultUriMatchStrategy$","setShowFavicons","setNeverDomains","setEquivalentDomains","setDefaultUriMatchStrategy","getUrlEquivalentDomains","equivalentDomains","equivalents","ed","flat","ENABLE_ADDED_LOGIN_PROMPT","ENABLE_CHANGED_PASSWORD_PROMPT","UserNotificationSettingsService","enableAddedLoginPromptState","enableAddedLoginPrompt$","enableChangedPasswordPromptState","enableChangedPasswordPrompt$","setEnableAddedLoginPrompt","setEnableChangedPasswordPrompt","BILLING_ACCOUNT_PROFILE_KEY_DEFINITION","billingAccountProfile","DefaultBillingAccountProfileStateService","billingAccountProfileState","billingAccountProfileOrNull","hasPremiumFromAnyOrganization$","hasPremiumFromAnyOrganization","hasPremiumPersonally$","hasPremiumPersonally","hasPremiumFromAnySource$","setHasPremium","BIOMETRIC_UNLOCK_ENABLED","REQUIRE_PASSWORD_ON_START","ENCRYPTED_CLIENT_KEY_HALF","DISMISSED_REQUIRE_PASSWORD_ON_START_CALLOUT","PROMPT_CANCELLED","PROMPT_AUTOMATICALLY","FINGERPRINT_VALIDATED","DefaultBiometricStateService","biometricUnlockEnabledState","biometricUnlockEnabled$","requirePasswordOnStartState","requirePasswordOnStart$","encryptedClientKeyHalfState","encryptedClientKeyHalf$","encryptedClientKeyHalfToEncString","dismissedRequirePasswordOnStartCalloutState","dismissedRequirePasswordOnStartCallout$","promptCancelledState","promptCancelled$","promptAutomaticallyState","promptAutomatically$","fingerprintValidatedState","fingerprintValidated$","setBiometricUnlockEnabled","getBiometricUnlockEnabled","setRequirePasswordOnStart","currentActiveId","combinedState$","removeEncryptedClientKeyHalf","setEncryptedClientKeyHalf","encryptedKeyHalf","getRequirePasswordOnStart","getEncryptedClientKeyHalf","resetUserPromptCancelled","setDismissedRequirePasswordOnStartCallout","activeUserId","setUserPromptCancelled","resetAllPromptCancelled","setPromptAutomatically","prompt","setFingerprintValidated","validated","AccountFactory","accountConstructor","args","GlobalStateFactory","globalStateConstructor","StateFactory","globalStateFactory","accountFactory","createGlobal","createAccount","MessageListener","messageStream","allMessages$","messages$","commandDefinition","msg","command","EMPTY","MultiMessageSender","innerMessageSenders","payload","MessageSender","combine","messageSenders","CommandDefinition","getCommand","EXTERNAL_SOURCE_TAG","isExternalMessage","SubjectMessageSender","messagesSubject","Lazy","factory","_value","_isCreated","caches","sequentialize","cacheKey","propertyKey","descriptor","originalMethod","cache","getCache","argsCacheKey","onFinally","size","catch","GlobalState","AppIdService","storageService","getEnsuredValue","getAnonymousAppId","ServerConfigResponse","featureStates","version","gitHash","ThirdPartyServerConfigResponse","environment","EnvironmentServerConfigResponse","cloudRegion","vault","api","identity","notifications","ConfigApiService","authed","ServerConfig","serverConfigData","utcDate","getAgeInMilliseconds","isValid","Region","ServerConfigData","serverConfigResponse","ThirdPartyServerConfigData","toISOString","EnvironmentServerConfigData","USER_SERVER_CONFIG","GLOBAL_SERVER_CONFIGURATIONS","DefaultConfigService","configApiService","environmentService","authService","failedFetchFallbackSubject","userId$","authStatus$","serverConfig$","environment$","authStatus","globalConfigFor$","getApiUrl","config","userConfigFor$","tap","rec","existingConfig","olderThanRetrievalInterval","renewConfig","mergeWith","cloudRegion$","US","getFeatureFlag$","serverConfig","getFeatureFlagValue","flag","userCachedFeatureFlag$","checkServerMeetsVersionRequirement$","minimumRequiredServerVersion","SemVer","ensureConfigFetched","handle","newConfig","setCloudRegion","configs","apiUrl","ContainerService","attachToGlobal","InitializerKey","CipherType","CipherRepromptType","FieldType","LoginLinkedId","CardLinkedId","IdentityLinkedId","SecureNoteType","AttachmentData","fileName","sizeName","CardData","cardholderName","brand","number","expMonth","expYear","FieldData","linkedId","IdentityData","title","firstName","middleName","lastName","address1","address2","address3","city","postalCode","country","company","phone","ssn","passportNumber","licenseNumber","Fido2CredentialData","credentialId","keyType","keyAlgorithm","keyCurve","keyValue","rpId","userName","counter","rpName","userDisplayName","discoverable","LoginUriData","uri","uriChecksum","LoginData","passwordRevisionDate","totp","autofillOnPageLoad","uris","u","fido2Credentials","PasswordHistoryData","lastUsedDate","SecureNoteData","CipherData","collectionIds","folderId","edit","viewPassword","organizationUseTotp","favorite","notes","deletedDate","reprompt","Login","login","SecureNote","secureNote","Card","card","Identity","fields","attachments","passwordHistory","ph","AttachmentView","fileSize","LinkedMetadata","attributes","_i18nKey","i18nKey","sortPosition","linkedFieldOption","linkedFieldOptions","normalizeExpiryYearFormat","yearInput","yearInputIsEmpty","expirationYear","paddedYear","getFullYear","ItemView","CardView","_brand","_number","_subTitle","maskedCode","repeat","maskedNumber","subTitle","count","expiration","normalizedYear","getCardBrandByPatterns","cardNum","re","CardholderName","ExpMonth","ExpYear","Code","Brand","FieldView","newField","showValue","showCount","maskedValue","IdentityView","_firstName","_lastName","fullAddress","address","fullAddressPart2","addressPart2","fullAddressForCopy","Title","MiddleName","Address1","Address2","Address3","City","State","PostalCode","Country","Company","Email","Phone","Ssn","Username","PassportNumber","LicenseNumber","FirstName","LastName","FullName","Fido2CredentialView","CanLaunchWhitelist","SafeUrls","canLaunch","LoginUriView","_uri","_domain","_hostname","_host","_canLaunch","hostnameOrUri","hostOrUri","isWebsite","launchUri","matchesUri","targetUri","defaultUriMatch","matchType","targetDomain","matchDomains","add","matchesDomain","urlHost","domainUrlHost","LoginView","l","hasUris","maskedPassword","some","hasTotp","hasFido2Credentials","Password","PasswordHistoryView","SecureNoteView","n","CipherView","initializerKey","localData","hasPasswordHistory","hasAttachments","hasOldAttachments","hasFields","passwordRevisionDisplayDate","isDeleted","isUnassigned","linkedFieldValue","linkedFieldI18nKey","view","Attachment","decryptAttachmentKey","decValue","toAttachmentData","toCardData","Field","toFieldData","toIdentityData","Fido2Credential","toFido2CredentialData","LoginUri","validateChecksum","clearTextUri","localChecksum","toLoginUriData","bypassValidation","toLoginData","toPasswordHistoryData","toSecureNoteData","Cipher","model","promise","attachment","decAttachment","field","decField","decPh","toCipherData","classInitializers","getClassInitializer","className","BulkEncryptServiceImplementation","workers","clear$","decryptItems","items","results","getDecryptedItemsFromWorkers","hardwareConcurrency","numberOfWorkers","Worker","itemsPerWorker","worker","start","end","itemsForWorker","postMessage","fromEvent","jsonItem","initializer","defaultIfEmpty","decryptedItems","restartTimeout","clear","terminate","timeout","EncArrayBuffer","encBytes","minimumLength","ENC_TYPE_LENGTH","throwDecryptionError","fromB64","b64","EncryptedObject","EncryptServiceImplementation","logMacFailures","plainValue","plainBuf","encObj","aesEncrypt","encryptToBytes","encValue","macLen","encString","resolveLegacyKey","fastParams","aesDecryptFastParameters","computedMac","hmacFast","macData","logMacFailed","aesDecryptFast","encThing","hmac","aesDecrypt","algorithm","hashArray","randomBytes","FallbackBulkEncryptService","featureFlagEncryptService","setFeatureFlagEncryptService","MultithreadEncryptServiceImplementation","Fido2ActiveRequestEvents","Fido2AlgorithmIdentifier","Fido2AuthenticatorErrorCode","activeRequests$","BehaviorSubject","getActiveRequest$","tabId","requests","startWith","getActiveRequest","newActiveRequest","abortController","newRequest","subject","updateRequests","existingRequests","abortListener","abortActiveRequest","signal","addEventListener","requestResult","removeEventListener","removeActiveRequest","newRequests","removeAllActiveRequests","DOMException","updateFunction","Fido2AuthenticatorError","errorCode","POW_2_32","POW_2_53","TaggedValue","tag","CBOR","decode","tagger","simpleValue","dataView","DataView","ta","offset","tagValueFunction","simpleValFunction","commitRead","readArrayBuffer","readUint8","readUint16","getUint16","readUint32","getUint32","readBreak","readLength","additionalInformation","readIndefiniteStringLength","majorType","initialByte","appendUtf16Data","utf16data","ret","decodeItem","tempArrayBuffer","tempDataView","sign","exponent","fraction","setUint32","getFloat32","readFloat16","getFloat64","elements","fullArrayLength","fullArray","fullArrayOffset","string","retArray","retObject","encode","lastLength","byteView","prepareWrite","newByteLength","requiredLength","oldDataView","uint32count","commitWrite","writeUint8","setUint8","writeUint8Array","writeUint16","setUint16","writeUint32","writeUint64","low","high","writeTypeAndLength","encodeItem","y","is","setFloat64","writeFloat64","utf8data","charCode","converted","isView","SharedArrayBuffer","mod","writeVarUint","retView","getUint8","getParamSize","keySize","paramBytesForAlg","ES256","ES384","ES512","MAX_OCTET","ENCODED_TAG_SEQ","TAG_SEQ","ENCODED_TAG_INT","countPadding","buf","padding","needs0x00","p1363ToDer","alg","paramBytes","getParamBytesForAlg","signatureBytes","TypeError","rPadding","rNeeds0x00","sPadding","sNeeds0x00","rActualLength","sActualLength","rLength","sLength","rsBytes","shortLength","dst","subarray","Fido2Utils","bufferToString","bufferSource","stringToBuffer","bufferSourceToUint8Array","isArrayBuffer","byteToHex","guidToRawFormat","guid","isValidGuid","guidToStandardFormat","AAGUID","KeyUsages","cipherService","userInterface","syncService","makeCredential","params","tab","userInterfaceSession","newSession","fallbackSupported","credTypesAndPubKeyAlgs","every","requestedAlgorithms","NotSupported","requireResidentKey","Unknown","requireUserVerification","ensureUnlockedVault","fullSync","existingCipherIds","findExcludedCredentials","excludeCredentialDescriptorList","informExcludedCredential","NotAllowed","cipher","fido2Credential","keyPair","pubKeyDer","userVerified","confirmNewCredential","credentialName","rpEntity","userEntity","userVerification","cipherId","crypto","subtle","generateKey","namedCurve","createKeyPair","exportKey","getKeyForCipherKeyDecryption","pkcs8Key","displayName","createKeyView","reencrypted","updateWithServer","clearCache","authData","generateAuthData","userPresence","attestationObject","fmt","attStmt","publicKeyAlgorithm","close","getAssertion","cipherOptions","allowCredentialDescriptorList","findCredentialsById","findCredentialsByRp","informCredentialNotFound","masterPasswordRepromptRequired","requiresUserVerificationPrompt","pickCredential","cipherIds","assumeUserPresence","selectedCipherId","selectedCipher","selectedFido2Credential","selectedCredentialId","sigBase","clientDataHash","generateSignature","getPrivateKeyFromFido2Credential","selectedCredential","silentCredentialDiscovery","ids","getAllDecrypted","keyBuffer","importKey","rpIdHash","digest","flags","extensionData","attestationData","backupEligibility","backupState","authDataFlags","attestedCredentialData","credentialIdLength","publicKeyJwk","keyX","keyY","coseBytes","UserRequestedFallbackAbortReason","FallbackRequestedError","fallbackRequested","isValidRpId","origin","parsedOrigin","parsedRpId","subdomain","endsWith","authenticator","vaultSettingsService","domainSettingsService","taskSchedulerService","requestManager","TIMEOUTS","NO_VERIFICATION","DEFAULT","MIN","MAX","WITH_VERIFICATION","setAbortTimeout","clampedTimeout","timeoutAbortController","abort","isFido2FeatureEnabled","neverDomains","enablePasskeys$","createCredential","AbortController","sameOriginWithAncestors","user","rp","pubKeyCredParams","kp","collectedClientData","challenge","crossOrigin","clientDataJSONBytes","makeCredentialParams","excludeCredentials","transports","authenticatorSelection","residentKey","enterpriseAttestationPossible","attestation","mapToMakeCredentialParams","aborted","timeoutSubscription","makeCredentialResult","credProps","InvalidState","rk","unsubscribe","assertCredential","mediation","handleMediatedConditionalRequest","getAssertionParams","mapToGetAssertionParams","getAssertionResult","generateAssertCredentialResult","availableCredentials","allowedCredentialIds","AzureFileUploadService","upload","renewalCallback","azureUploadBlob","azureUploadBlocks","urlObject","Headers","toUTCString","searchParams","Request","body","method","blobResponse","fetch","baseUrl","blockSize","getMaxBlockSize","blockIndex","numBlocks","ceil","blocksStaged","renewUrlIfNecessary","blockUrl","blockId","encodedBlockId","append","blockData","blockHeaders","blockRequest","blockResponse","blockListUrl","blockListXml","expiry","setTime","utfBlockId","blockIdList","xml","Version","year","month","day","compareTo","BitwardenFileUploadService","encryptedFileName","encryptedFileData","apiCall","fd","FormData","blob","Blob","filepath","contentType","FileUploadService","azureFileUploadService","bitwardenFileUploadService","uploadData","fileUploadMethods","fileUploadType","Direct","postDirect","Azure","renewFileUploadUrl","rollback","KeyGenerationService","bitLength","aesGenerateKey","createKeyWithPurpose","purpose","material","hkdf","derivedKey","deriveKeyFromMaterial","pbkdf2","saltHash","argon2","hkdfExpand","MigrationBuilder","migrations","migrate","addMigrator","helper","migrator","runMigrator","direction","newMigration","shouldMigrate","toVersion","bind","updateVersion","IRREVERSIBLE","Migrator","fromVersion","startVersion","currentVersion","endVersion","USER_EVER_HAD_USER_KEY","EverHadUserKeyMigrator","getAccounts","everHadUserKey","setToUser","migrateAccount","getFromUser","rollbackAccount","USER_ENCRYPTED_ORGANIZATION_KEYS","OrganizationKeyMigrator","organizationKeys","ENVIRONMENT_STATE","REGION_KEY","URLS_KEY","MoveEnvironmentStateToProviders","legacyGlobal","region","setToGlobal","environmentUrls","legacyAccounts","settings","updatedLegacyGlobal","globalRegion","getFromGlobal","globalUrls","updatedAccount","userRegion","userUrls","rollbackUser","USER_ENCRYPTED_PROVIDER_KEYS","ProviderKeyMigrator","providerKeys","CLIENT_KEY_HALF","MoveBiometricClientKeyHalfToStateProviders","biometricEncryptionClientKeyHalf","userKeyHalf","USER_ENCRYPTED_FOLDERS","FolderMigrator","folders","LAST_SYNC_KEY","LastSyncMigrator","lastSync","USER_ENABLE_PASSKEYS","EnablePasskeysMigrator","enablePasskeys","globalEnablePasskeys","autofillSettingsStateDefinition","AutofillSettingsKeyMigrator","globalState","autoFillOverlayVisibility","updateAccount","accountSettings","autoFillOnPageLoadDefault","enableAutoFillOnPageLoad","dismissedAutoFillOnPageLoadCallout","disableAutoTotpCopy","activateAutoFillOnPageLoadFromPolicy","inlineMenuVisibility","autoCopyTotp","RequirePasswordOnStartMigrator","requirePasswordOnStart","requirePassword","USER_ENCRYPTED_PRIVATE_KEY","PrivateKeyMigrator","USER_ENCRYPTED_COLLECTIONS","CollectionMigrator","collections","COLLAPSED_GROUPINGS","CollapsedGroupingsMigrator","collapsedGroupings","DISMISSED_BIOMETRIC_REQUIRE_PASSWORD_ON_START_CALLOUT","MoveBiometricPromptsToStateProviders","dismissedBiometricRequirePasswordOnStartCallout","disableAutoBiometricsPrompt","userDismissed","userPromptAutomatically","SM_ONBOARDING_TASKS","SmOnboardingTasksMigrator","smOnboardingTasks","autofillSettingsLocalStateDefinition","ClearClipboardDelayMigrator","clearClipboard","clearClipboardDelay","RevertLastSyncMigrator","enableBadgeCounterKeyDefinition","BadgeSettingsMigrator","disableBadgeCounter","enableBadgeCounter","MoveBiometricUnlockToStateProviders","biometricUnlock","UserNotificationSettingsKeyMigrator","disableAddLoginNotification","disableChangedPasswordNotification","enableAddedLoginPrompt","enableChangedPasswordPrompt","POLICIES_KEY","PolicyMigrator","enableContextMenuKeyDefinition","EnableContextMenuMigrator","disableContextMenuItem","enableContextMenu","LOCALE_KEY","PreferredLanguageMigrator","locale","APP_ID_STORAGE_KEY","ANONYMOUS_APP_ID_STORAGE_KEY","AppIdMigrator","anonymousAppId","defaultUriMatchStrategyDefinition","equivalentDomainsDefinition","neverDomainsDefinition","DomainSettingsMigrator","defaultUriMatchStrategy","THEME_SELECTION","MoveThemeToStateProviderMigrator","legacyGlobalState","theme","removeFromGlobal","vaultSettingsStateDefinition","VaultSettingsKeyMigrator","dontShowCardsCurrentTab","dontShowIdentitiesCurrentTab","showCardsCurrentTab","showIdentitiesCurrentTab","AVATAR_COLOR_KEY","AvatarColorMigrator","userAvatarColor","TOKEN_STATE_DEF_LIKE","TokenServiceStateProviderMigrator","globalData","globalTwoFactorToken","existingAccessToken","tokens","existingRefreshToken","existingApiKeyClientId","existingApiKeyClientSecret","migratedTwoFactorToken","updatedLegacyAccount","migratedAccessToken","migratedRefreshToken","migratedApiKeyClientId","migratedApiKeyClientSecret","MoveBillingAccountProfileMigrator","hasPremiumFromOrganization","RemoveEverBeenUnlockedMigrator","everBeenUnlocked","removeEverBeenUnlocked","stateVersion","ProductType","USER_ORGANIZATIONS","OrganizationMigrator","EVENT_COLLECTION","EventCollectionMigrator","eventCollection","ShowFaviconDefinition","EnableFaviconMigrator","disableFavicon","showFavicons","AUTO_CONFIRM_FINGERPRINTS","AutoConfirmFingerPrintsMigrator","autoConfirmFingerPrints","UserDecryptionOptionsMigrator","ENVIRONMENT_REGION","ENVIRONMENT_URLS","ENVIRONMENT_ENVIRONMENT","MergeEnvironmentState","urls","removeFromUser","DeleteBiometricPromptCancelledData","DESKTOP_SETTINGS_STATE","WINDOW_KEY","CLOSE_TO_TRAY_KEY","MINIMIZE_TO_TRAY_KEY","START_TO_TRAY_KEY","TRAY_ENABLED_KEY","OPEN_AT_LOGIN_KEY","ALWAYS_SHOW_DOCK_KEY","ALWAYS_ON_TOP_KEY","MoveDesktopSettingsMigrator","updatedGlobal","enableCloseToTray","enableMinimizeToTray","enableStartToTray","enableTray","openAtLogin","alwaysShowDock","enableAlwaysOnTop","DDG_KEY","MoveDdgToStateProviderMigrator","enableDuckDuckGoBrowserIntegration","enableDdg","AccountServerConfigMigrator","AddKeyTypeToOrgKeysMigrator","encryptedOrgKeys","newOrgKeys","updateOrgKey","usesKeyConnectorKeyDefinition","convertAccountToKeyConnectorKeyDefinition","KeyConnectorMigrator","RememberedEmailMigrator","rememberedEmail","globalStoredEmail","DeleteInstalledVersion","installedVersion","DeviceTrustServiceStateProviderMigrator","existingDeviceKey","existingShouldTrustDevice","trustDeviceChoiceForDecryption","migratedDeviceKey","migratedShouldTrustDevice","SendType","ENCRYPTED_SENDS","SendMigrator","sends","FORCE_SET_PASSWORD_REASON_DEFINITION","MASTER_KEY_HASH_DEFINITION","MASTER_KEY_ENCRYPTED_USER_KEY_DEFINITION","MoveMasterKeyStateToProviderMigrator","forceSetPasswordReason","keyHash","masterKeyEncryptedUserKey","ACCEPT_AUTH_REQUESTS_KEY","AuthRequestMigrator","existingAdminAuthRequest","adminAuthRequest","existingApproveLoginRequests","approveLoginRequests","migratedAdminAuthRequest","migratedAcceptAuthRequest","CipherServiceMigrator","ciphers","REFRESH_TOKEN_MIGRATED_TO_SECURE_STORAGE","RemoveRefreshTokenMigratedFlagMigrator","kdfConfigKeyDefinition","KdfConfigMigrator","RemoveLegacyEtmKeyMigrator","legacyEtmKey","KnownAccountsMigrator","migrateAuthenticatedAccounts","migrateActiveAccountId","migrateAccountActivity","userIds","getKnownUserIds","activeAccountId","accountActivity","toStore","agg","dateString","authenticatedAccounts","accountsToStore","stored","dateMs","PIN_STATE","PinStateMigrator","protectedPin","pinProtected","accountPinKeyEncryptedUserKeyPersistent","accountUserKeyEncryptedPin","accountOldPinKeyEncryptedMasterKey","VAULT_TIMEOUT_SETTINGS_STATE_DEF_LIKE","VAULT_TIMEOUT","VAULT_TIMEOUT_ACTION","vaultTimeoutTypeMigrateRecord","null","vaultTimeoutTypeRollbackRecord","never","onRestart","onLocked","onSleep","onIdle","VaultTimeoutSettingsServiceStateProviderMigrator","existingVaultTimeout","clientType","Cli","newVaultTimeout","existingVaultTimeoutAction","migratedVaultTimeout","migratedVaultTimeoutAction","NAVIGATION","PASSWORD","PASSPHRASE","PasswordOptionsMigrator","legacyOptions","passwordGenerationOptions","ambiguous","uppercase","minUppercase","lowercase","minLowercase","minNumber","special","minSpecial","passphrase","numWords","wordSeparator","capitalize","includeNumber","convertSettings","existing","updated","storeSettings","deleteSettings","HISTORY","GeneratorHistoryMigrator","passwordGenerationHistory","CATCHALL","EFF_USERNAME","SUBADDRESS","ADDY_IO","DUCK_DUCK_GO","FASTMAIL","FIREFOX_RELAY","FORWARD_EMAIL","SIMPLE_LOGIN","ForwarderOptionsMigrator","usernameGenerationOptions","forwarders","addyIo","forwardedAnonAddyBaseUrl","forwardedAnonAddyApiToken","forwardedAnonAddyDomain","duckDuckGo","forwardedDuckDuckGoToken","fastmail","forwardedFastmailApiToken","firefoxRelay","forwardedFirefoxApiToken","forwardEmail","forwardedForwardEmailApiToken","forwardedForwardEmailDomain","simpleLogin","forwardedSimpleLoginApiKey","forwardedSimpleLoginBaseUrl","forwarder","forwardedService","algorithms","effUsername","wordCapitalize","wordIncludeNumber","subaddress","subaddressType","subaddressEmail","catchall","catchallType","catchallDomain","BROWSER_INTEGRATION_ENABLED","BROWSER_INTEGRATION_FINGERPRINT_ENABLED","MINIMIZE_ON_COPY","MoveFinalDesktopSettingsMigrator","enableBrowserIntegrationValue","enableBrowserIntegration","enableBrowserIntegrationFingerprintValue","enableBrowserIntegrationFingerprint","minimizeOnCopyToClipboardValue","minimizeOnCopyToClipboard","browserIntegrationEnabledValue","browserIntegrationFingerprintEnabled","SHOW_BANNER","RemoveUnassignedItemsBannerDismissed","MoveLastSyncDate","MoveBiometricAutoPromptToAccount","noAutoPromptBiometrics","MoveStateVersionMigrator","MoveBrowserSettingsToGlobal","tryAddSetting","accountSelector","globalSetter","globalNeverDomainsValue","accumulator","normalizedNeverDomains","targetGlobalState","MinVersionMigrator","MIN_VERSION","MigrationBuilderService","build","migrationBuilderCache","with","MigrationHelper","getGlobalKey","knownAccountUserIdsBuilderPre60","knownAccountUserIdsBuilder","userKeyBuilderPre9","userKeyBuilder","globalKeyBuilderPre9","MigrationRunner","diskStorage","migrationBuilderService","run","migrationHelper","migrationBuilder","waitForCompletion","isReady","wait","time","nextTime","waitForMigrations","globals","accountDeserializer","buildAccountMapFromJSON","jsonAccounts","partialKeys","DDG_SHARED_KEY","StateService","memoryStorageService","stateFactory","migrationRunner","hasBeenInited","isRecoveredSession","initOptions","runMigrations","setState","createGlobals","initAccountState","updateState","syncAccountFromDisk","diskAccount","getAccountFromDisk","seedUserEnvironment","scaffoldNewAccountStorage","reconcileOptions","defaultInMemoryOptions","deAuthenticateAccount","removeAccountFromDisk","removeAccountFromMemory","getUserKeyAutoUnlock","keySuffix","defaultSecureStorageOptions","setUserKeyAutoUnlock","saveSecureStorageKey","getUserKeyBiometric","hasUserKeyBiometric","setUserKeyBiometric","setCryptoMasterKeyAuto","getCryptoMasterKeyB64","setCryptoMasterKeyB64","getDuckDuckGoSharedKey","setDuckDuckGoSharedKey","setEnableDuckDuckGoBrowserIntegration","getGlobals","defaultOnDiskOptions","saveGlobals","getAccount","getIsAuthenticated","useMemory","getGlobalsFromMemory","useDisk","getGlobalsFromDisk","saveGlobalsToMemory","saveGlobalsToDisk","getAccountFromMemory","htmlStorageLocation","Local","Both","saveAccount","saveAccountToMemory","saveAccountToDisk","deepClone","scaffoldNewAccountLocalStorage","scaffoldNewAccountSessionStorage","scaffoldNewAccountMemoryStorage","defaultOnDiskLocalOptions","defaultOnDiskMemoryOptions","requestedOptions","defaultOptions","Session","getActiveUserIdFromStorage","removeAccountFromLocalStorage","storedAccount","resetAccount","removeAccountFromSessionStorage","removeAccountFromSecureStorage","valuesRequireDeserialization","stateUpdater","updatedState","SystemService","reloadCallback","autofillSettingsService","biometricStateService","reloadInterval","clearClipboardTimeoutFunction","clearPendingClipboard","startProcessReload","cancelProcessReload","executeProcessReload","getVaultTimeoutActionByUserId$","nextUser","clipboardValue","timeoutMs","clearClipboardTimeoutSubscription","taskTimeoutInMs","clearClipboardDelayInSeconds","clipboardValueNow","readFromClipboard","copyToClipboard","clearing","UserAutoUnlockKeyService","setUserKeyInMemoryIfAutoUserKeySet","autoUserKey","Auto","DecryptParameters","WebCryptoFunctionService","globalContext","wasmSupported","checkIfWasmSupported","wcLen","passwordBuf","toBuf","pbkdf2Params","toWebCryptoAlgorithm","impKey","deriveBits","passwordArr","saltArr","pass","mem","hashLen","ArgonType","unloadRuntime","ikm","outputByteSize","hkdfParams","prk","infoBuf","infoArr","runningOkmLength","previousT","okm","md","md5","valueBytes","toByteString","valueBuf","signingAlgorithm","mac1","mac2","arr1","arr2","getBytes","rand","Uint32Array","createBuffer","putInt32","meta","encKeyByteString","macKeyByteString","decode64","parameters","mode","decipher","createDecipher","toWebCryptoAesMode","dataBuffer","finish","rsaParams","rsaExtractPublicKey","impPrivateKey","jwkPrivateKey","jwkPublicKeyParams","kty","ext","impPublicKey","key1","key2","aesParams","rawKey","modulusLength","publicExponent","getRandomValues","encodeUtf8","WebAssembly","instantiate","module","Module","Instance","DefaultActiveUserState","_userId","configureState","first","throwError","DefaultActiveUserStateProvider","DEFAULT_OPTIONS","msTimeout","getStoredValue","storage","StateBase","storageUpdate$","updates$","storageUpdate","updateType","share","connector","ReplaySubject","resetOnRefCountZero","timer","populateOptionsWithDefault","updatePromise","internalUpdate","currentState","getStateForUpdate","combinedDependencies","newState","doStorageSave","oldState","DefaultGlobalState","chosenLocation","globalKeyBuilder","DefaultGlobalStateProvider","globalStateCache","existingGlobalState","newGlobalState","DefaultSingleUserState","stateEventRegistrarService","DefaultSingleUserStateProvider","existingUserState","newUserState","DefaultStateProvider","activeUserStateProvider","derivedStateProvider","getDerived","userKeyDefinition","getUserStateOrDefault$","InlineDerivedStateProvider","parentState$","deriveDefinition","dependencies","InlineDerivedState","concatMap","forceValue","PrimarySecondaryStorageService","primaryStorageService","secondaryStorageService","primaryValue","allSettled","WindowStorageService","updatesSubject","getItem","setItem","removeItem","getKeys","ProviderData","SendFileData","SendTextData","text","hidden","SendData","accessId","maxAccessCount","accessCount","deletionDate","disabled","disable","hideEmail","Text","File","file","SelectionReadOnlyResponse","readOnly","hidePasswords","manage","CollectionResponse","externalId","CollectionDetailsResponse","assigned","CollectionAccessDetailsResponse","groups","users","unmanaged","CollectionData","FolderData","LAST_SYNC_DATE","CoreSyncService","folderService","folderApiService","collectionService","sendService","sendApiService","syncInProgress","getLastSync","lastSync$","activeUserLastSync$","setLastSync","syncUpsertFolder","isEdit","syncStarted","localFolder","remoteFolder","syncCompleted","syncDeleteFolder","syncUpsertCipher","localCipher","checkCollections","remoteCipher","getFullCipherDetails","syncDeleteCipher","syncUpsertSend","localSend","remoteSend","getSend","sendId","syncDeleteSend","successfully","DefaultSyncService","keyConnectorService","providerService","avatarService","billingAccountProfileStateService","forceSync","allowThrowOnError","needsSync","needsSyncing","refreshIdentityToken","getSync","syncProfile","syncFolders","syncCollections","syncCiphers","syncSends","syncSettings","domains","syncPolicies","getAccountRevisionDate","stamp","setPrivateKey","setProviderKeys","setOrgKeys","providerOrganizations","premiumPersonally","premiumFromOrganization","setForceSetPasswordReasonIfNeeded","syncProfileOrganizations","profileResponse","AdminForcePasswordReset","org","TdeUserWithoutPasswordHasPasswordResetPermission","eqDomains","concat","globalEquivalentDomains","DefaultThemeStateService","defaultTheme","System","selectedThemeState","selectedTheme$","setSelectedTheme","currentTheme","OrganizationConnectionResponse","configType","rawConfig","CardApi","FieldApi","IdentityApi","Fido2CredentialApi","LoginUriApi","LoginApi","SecureNoteApi","AttachmentResponse","PasswordHistoryResponse","CipherResponse","h","OrganizationExportResponse","OrganizationSponsorshipSyncStatusResponse","lastSyncDate","ProviderOrganizationResponse","userCount","occupiedSeats","remainingSeats","plan","ProviderOrganizationOrganizationDetailsResponse","organizationName","PermissionsApi","editAssignedCollections","deleteAssignedCollections","manageCiphers","ProviderUserBulkPublicKeyResponse","ProviderUserBulkResponse","ProviderUserResponse","ProviderUserUserDetailsResponse","ApiKeyResponse","apiKey","AuthRequestResponse","requestDeviceType","requestIpAddress","responseDate","requestDate","requestDateUTC","UTC","getUTCFullYear","getUTCMonth","getDate","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","dateNow","dateNowUTC","isExpired","isAnswered","DeviceVerificationResponse","isDeviceVerificationSectionEnabled","unknownDeviceVerificationEnabled","KeyConnectorUserKeyResponse","PreloginResponse","RegisterResponse","captchaBypassToken","SsoPreValidateResponse","TwoFactorAuthenticatorResponse","userVerificationToken","TwoFactorDuoResponse","TwoFactorEmailResponse","TwoFactorProviderResponse","TwoFactorRecoverResponse","TwoFactorWebAuthnResponse","KeyResponse","migrated","ChallengeResponse","TwoFactorYubiKeyResponse","key3","key4","key5","nfc","BillingSourceResponse","cardBrand","description","needsVerification","BillingInvoiceResponse","pdfUrl","paid","amount","BillingTransactionResponse","createdDate","refunded","partiallyRefunded","refundedAmount","paymentMethodType","details","BillingHistoryResponse","invoices","transactions","hasNoHistory","BillingPaymentResponse","balance","paymentSource","ProfileOrganizationResponse","familySponsorshipLastSyncDateString","familySponsorshipValidUntilString","ProfileProviderOrganizationResponse","ProfileProviderResponse","ProfileResponse","culture","twoFactorEnabled","PaymentResponse","userProfile","paymentIntentClientSecret","success","PlanResponse","productTier","isAnnual","nameLocalizationKey","descriptionLocalizationKey","canBeUsedByBusiness","trialPeriodDays","hasSelfHost","hasPolicies","hasGroups","hasDirectory","hasEvents","has2fa","hasApi","hasSso","hasResetPassword","upgradeSortOrder","displaySortOrder","legacyYear","passwordManager","secretsManager","PasswordManager","PasswordManagerPlanFeaturesResponse","SecretsManager","SecretsManagerPlanFeaturesResponse","stripeSeatPlanId","baseSeats","basePrice","seatPrice","hasAdditionalSeatsOption","maxAdditionalSeats","maxSeats","stripeServiceAccountPlanId","additionalPricePerServiceAccount","baseServiceAccount","maxServiceAccount","hasAdditionalServiceAccountOption","maxAdditionalServiceAccounts","maxProjects","stripePlanId","stripeProviderPortalSeatPlanId","stripeStoragePlanId","stripePremiumAccessPlanId","providerPortalSeatPrice","premiumAccessOptionPrice","additionalStoragePricePerGb","baseStorageGb","hasAdditionalStorageOption","maxAdditionalStorage","hasPremiumAccessOption","SubscriptionResponse","storageName","storageGb","license","subscription","upcomingInvoice","BillingSubscriptionResponse","BillingSubscriptionUpcomingInvoiceResponse","trialStartDate","trialEndDate","periodStartDate","periodEndDate","cancelledDate","cancelAtEndDate","cancelled","BillingSubscriptionItemResponse","collectionMethod","suspensionDate","unpaidPeriodEndDate","gracePeriod","productId","quantity","interval","sponsoredSubscriptionItem","addonSubscriptionItem","TaxInfoResponse","taxId","taxIdType","line1","line2","TaxRateResponse","rate","CollectionBulkDeleteRequest","BreachAccountResponse","addedDate","breachDate","dataClasses","isActive","isVerified","logoPath","modifiedDate","pwnCount","GlobalDomainResponse","excluded","DomainsResponse","EventResponse","collectionId","groupId","policyId","providerUserId","providerOrganizationId","actingUserId","ipAddress","installationId","systemUser","domainName","secretId","serviceAccountId","UserKeyResponse","SendFileApi","SendTextApi","SendResponse","FolderResponse","SyncResponse","AttachmentUploadDataResponse","attachmentId","cipherResponse","cipherMiniResponse","OptionalCipherResponse","unavailable","ApiService","refreshAccessTokenErrorCallback","customUserAgent","isWebClient","isDesktopClient","IEBrowser","ChromeBrowser","EdgeBrowser","FirefoxBrowser","OperaBrowser","SafariBrowser","UnknownBrowser","VivaldiBrowser","postIdentityToken","Accept","identityToken","getClientType","env","getIdentityUrl","qsStringify","getCredentials","responseJson","isJsonResponse","TwoFactorProviders2","reject","postAuthRequest","postAdminAuthRequest","getAuthResponse","path","getAuthRequest","getAuthRequests","getLastAuthRequest","activeRequests","m","getProfile","getUserSubscription","getTaxInfo","putProfile","putTaxInfo","postPrelogin","postEmailToken","postEmail","postPassword","setPassword","postSecurityStamp","postPasswordHint","postRegister","postPremium","postReinstatePremium","postAccountStorage","postAccountPayment","postAccountLicense","postAccountKeys","postAccountVerifyEmail","postAccountVerifyEmailToken","postAccountRecoverDelete","postAccountRecoverDeleteToken","postAccountKdf","deleteSsoUser","getSsoUserIdentifier","postUserApiKey","postUserRotateApiKey","putUpdateTempPassword","putUpdateTdeOffboardingPassword","getUserBillingHistory","getUserBillingPayment","getCipher","getCipherAdmin","getCiphersOrganization","postCipher","postCipherCreate","postCipherAdmin","putCipher","putPartialCipher","putCipherAdmin","deleteCipher","deleteCipherAdmin","deleteManyCiphers","deleteManyCiphersAdmin","putMoveCiphers","putShareCipher","putShareCiphers","putCipherCollections","putCipherCollectionsAdmin","postPurgeCiphers","putDeleteCipher","putDeleteCipherAdmin","putDeleteManyCiphers","putDeleteManyCiphersAdmin","putRestoreCipher","putRestoreCipherAdmin","putRestoreManyCiphers","putRestoreManyCiphersAdmin","getAttachmentData","emergencyAccessId","postCipherAttachment","postCipherAttachmentLegacy","postCipherAttachmentAdminLegacy","deleteCipherAttachment","deleteCipherAttachmentAdmin","postShareCipherAttachment","renewAttachmentUploadUrl","postAttachmentFile","getCollectionAccessDetails","getUserCollections","getCollections","getManyCollectionsWithAccessDetails","getCollectionUsers","postCollection","putCollection","putCollectionUsers","deleteCollection","deleteManyCollections","deleteCollectionUser","getGroupUsers","deleteGroupUser","getPlans","getTaxRates","getSettingsDomains","putSettingsDomains","getTwoFactorProviders","getTwoFactorOrganizationProviders","getTwoFactorAuthenticator","getTwoFactorEmail","getTwoFactorDuo","getTwoFactorOrganizationDuo","getTwoFactorYubiKey","getTwoFactorWebAuthn","getTwoFactorWebAuthnChallenge","getTwoFactorRecover","putTwoFactorAuthenticator","deleteTwoFactorAuthenticator","putTwoFactorEmail","putTwoFactorDuo","putTwoFactorOrganizationDuo","putTwoFactorYubiKey","putTwoFactorWebAuthn","getClientExtensionResults","AttestationObject","clientDataJson","deleteTwoFactorWebAuthn","putTwoFactorDisable","putTwoFactorOrganizationDisable","postTwoFactorRecover","postTwoFactorEmailSetup","postTwoFactorEmail","getDeviceVerificationSettings","putDeviceVerificationSettings","getCloudCommunicationsEnabled","getOrganizationConnection","createOrganizationConnection","updateOrganizationConnection","organizationConnectionId","deleteOrganizationConnection","getProviderUsers","getProviderUser","postProviderUserInvite","postProviderUserReinvite","postManyProviderUserReinvite","postProviderUserBulkConfirm","deleteManyProviderUsers","postProviderUserAccept","postProviderUserConfirm","postProviderUsersPublicKey","putProviderUser","deleteProviderUser","getProviderClients","postProviderAddOrganization","postProviderCreateOrganization","deleteProviderOrganization","getEvents","addEventParameters","getEventsCipher","getEventsOrganization","getEventsOrganizationUser","getEventsProvider","getEventsProviderUser","postEventsCollect","authHeader","Authorization","getEventsUrl","getUserPublicKey","getHibpBreach","postBitPayInvoice","postSetupPayment","getActiveBearerToken","handleError","getKeyConnectorAlive","getOrganizationExport","getApplicationVersionNumber","nativeFetch","preValidateSso","postCreateSponsorship","sponsoredOrgId","isSelfHost","getSponsorshipSyncStatus","deleteRevokeSponsorship","sponsoringOrganizationId","deleteRemoveSponsorship","sponsoringOrgId","postPreValidateSponsorshipToken","sponsorshipToken","postRedeemSponsorship","postResendSponsorshipOffer","refreshAccessToken","refreshApiToken","decodedToken","getVaultTimeoutByUserId$","deviceRequest","hasResponse","alterHeaders","pathParts","requestUrl","requestInit","responseType","responseIsJson","responseIsCsv","tokenError","isTextResponse","Message","hasBaseUrl","base","typeHeader","AuditService","passwordLeaked","hashBytes","hashStart","hashEnding","breachedAccounts","limit","throttleKey","allThrottles","throttles","getThrottles","argsThrottleKey","queue","exec","splice","EventData","EventCollectionService","eventUploadService","orgIds$","collectMany","eventType","uploadImmediately","eventStore","events$","currentEvents","newEvents","uploadEvents","collect","events","cipher$","orgIds","zip","User_ClientExportedVault","EventRequest","EventUploadService","checkOnInterval","takeEvents","req","taken","current","NotificationResponse","contextId","SyncCipherCreate","SyncCipherDelete","SyncCipherUpdate","SyncLoginDelete","SyncCipherNotification","SyncFolderCreate","SyncFolderDelete","SyncFolderUpdate","SyncFolderNotification","SyncVault","SyncCiphers","SyncOrganizations","SyncOrgKeys","SyncSettings","UserNotification","SyncSendCreate","SyncSendUpdate","SyncSendDelete","SyncSendNotification","AuthRequestPushNotification","NotificationsService","connected","inactive","isSyncingOnReconnect","reconnect","subscribe","getNotificationsUrl","signalrConnection","off","stop","withUrl","accessTokenFactory","skipNegotiation","transport","WebSockets","withHubProtocol","on","processNotification","onclose","isAuthedAndUnlocked","updateConnection","sync","reconnectFromActivity","disconnectFromInactivity","isAuthenticated","payloadUserId","UserId","myUserId","notificationId","reconnectTimerSubscription","LUNR_SEARCH_INDEX","LUNR_SEARCH_INDEXED_ENTITY_ID","LUNR_SEARCH_INDEXING","SearchService","searchIndexState","index$","searchIndex","lunr","Index","load","searchIndexEntityIdState","indexedEntityId$","searchIsIndexingState","searchIsIndexing$","indexing","immediateSearchLocales","defaultSearchableMinLength","searchableMinLength","locale$","registeredPipeline","Pipeline","registerFunction","normalizeAccentsPipelineFunction","clearIndex","isSearchable","query","normalizeSearchQuery","index","getIndexForSearch","indexCiphers","indexedEntityId","getIsIndexing","setIsIndexing","setIndexedEntityIdForSearch","builder","Builder","pipeline","ref","boost","extractor","uriExtractor","fieldExtractor","attachmentExtractor","setIndexForSearch","searchCiphers","searchCiphersBasic","ciphersMap","searchResults","soWild","Query","wildcard","LEADING","TRAILING","q","tokenizer","term","deleted","loginUri","searchSends","sendsMatched","lowPriorityMatched","joined","protocolIndex","queryIndex","searchableFields","metadata","normalize","VaultTimeoutSettingsService","defaultVaultTimeout","setVaultTimeoutOptions","action","setVaultTimeout","setVaultTimeoutAction","refreshAdditionalKeys","availableVaultTimeoutActions$","getAvailableVaultTimeoutActions","canLock","availableVaultTimeoutActions","Lock","biometricUnlockPromise","getMaxVaultTimeoutPolicyByUserId$","currentVaultTimeout","maxVaultTimeoutPolicy","determineVaultTimeout","catchError","maxVaultTimeoutPolicyData","currentVaultTimeoutAction","determineVaultTimeoutAction","availableActions","clearPinKeys","PasswordStrengthService","getPasswordStrength","emailInput","userInputs","globalUserInputs","emailToUserInputs","finalUserInputs","atPosition","SendRequest","fileLength","SendAccessResponse","creatorIdentifier","SendFileDownloadDataResponse","SendFileUploadDataResponse","sendResponse","SendApiService","fileUploadService","postSendAccess","getSendFileDownloadData","getSends","postSend","postFileTypeSend","renewSendFileUploadUrl","fileId","postSendFile","postSendFileLegacy","putSend","putSendRemovePassword","deleteSend","sendData","removePassword","uploadDataResponse","generateMethods","legacyServerSendFileUpload","generatePostDirectCallback","generateRenewFileUploadUrlCallback","generateRollbackCallback","renewResponse","SEND_USER_ENCRYPTED","SEND_USER_DECRYPTED","SendStateProvider","activeUserEncryptedState","encryptedState$","activeUserDecryptedState","decryptedState$","getEncryptedSends","setEncryptedSends","getDecryptedSends","setDecryptedSends","SendFileView","SendTextView","maskedText","SendView","urlB64Key","maxAccessCountReached","expired","pendingDelete","cryptoKey","SendFile","SendText","Send","makeSendKey","SendWithIdRequest","SendService","sendKeySalt","sendKeyPurpose","sends$","sendViews$","decryptSends","fileData","passwordKey","encryptFileData","parseFile","oldSends","newSends","oldSend","newSend","getAllDecryptedFromState","decSends","hasUserKey","currentSends","getRotatedData","originalUserKey","toRotatedKeyRequestMap","rotateUserKey","sendKey","reader","FileReader","readAsArrayBuffer","onload","evt","onerror","decryptSendPromises","decryptedSends","SortedCiphersCache","comparator","sortedCiphersByUrl","timeouts","isCached","addCiphers","Ciphers","resetTimer","getLastUsed","getLastLaunched","getNext","updateLastUsedIndex","lastUsedIndex","usedCiphers","lastLaunched","getNextIndex","CipherBulkDeleteRequest","CipherBulkMoveRequest","CipherBulkRestoreRequest","AttachmentRequest","CipherRequest","lastKnownRevisionDate","keyApi","attachments2","attachmentRequest","CipherWithIdRequest","CipherBulkShareRequest","CipherBulkUpdateCollectionsRequest","removeCollections","CipherCollectionsRequest","CipherCreateRequest","CipherPartialRequest","CipherShareRequest","ENCRYPTED_CIPHERS","DECRYPTED_CIPHERS","LOCAL_DATA_KEY","ADD_EDIT_CIPHER_INFO_KEY","addEditCipherInfo","CIPHER_KEY_ENC_MIN_SERVER_VER","CipherService","viewFor$","cipherViews$","views","searchService","bulkEncryptService","cipherFileUploadService","sortedCiphersCache","sortCiphersByLastUsed","localDataState","encryptedCiphersState","decryptedCiphersState","addEditCipherInfoState","ciphersExpectingUpdate","localData$","ciphers$","skipWhile","expectingUpdate","addEditCipherInfo$","setDecryptedCipherCache","setDecryptedCiphers","cipherViews","clearDecryptedCiphersState","keyForEncryption","keyForCipherKeyDecryption","originalCipher","updateModelfromExistingCipher","adjustPasswordHistoryLength","getCipherKeyEncryptionEnabled","userOrOrgKey","encryptCipherWithCipherKey","encryptCipher","encryptAttachments","attachmentsModel","encAttachments","encryptObjProperty","encryptFields","fieldsModel","encFields","encField","encryptField","fieldModel","encryptPasswordHistories","phModels","encPhs","encPh","encryptPasswordHistory","phModel","decCiphers","getDecryptedCiphers","reindexCiphers","decryptCiphers","cipherDecryptionKeys$","orgKeys","grouped","groupedCiphers","getLocaleSortingFunction","getAllDecryptedForGrouping","groupingId","folder","getAllDecryptedForUrl","includeOtherTypes","defaultMatch","filterCiphersForUrl","cipherIsLogin","getAllDecryptedCiphersOfType","sortCiphersByLastUsedThenName","getAllFromApiForOrganization","decryptOrganizationCiphersResponse","getManyFromApiForOrganization","cr","getLastUsedForUrl","getCipherForUrl","getLastLaunchedForUrl","getNextCipherForUrl","getNextCardCipher","getNextIdentityCipher","updateLastUsedIndexForUrl","updateLastUsedDate","ciphersLocalData","decryptedCipherCache","cached","updateLastLaunchedDate","saveNeverDomain","createWithServer","orgAdmin","isNotClone","shareWithServer","attachmentPromises","shareAttachmentWithServer","encCipher","encryptSharedCipher","shareManyWithServer","encCiphers","saveAttachmentWithServer","unencryptedFile","admin","cData","saveAttachmentRawWithServer","filename","cipherKeyEncryptionEnabled","cipherEncKey","encFileName","dataEncKey","makeDataEncKey","encData","saveCollectionsWithServer","bulkUpdateCollectionsWithServer","cid","updateEncryptedCipherState","clearEncryptedCiphersState","moveManyWithServer","deleteWithServer","asAdmin","deleteManyWithServer","deleteAttachment","deleteAttachmentWithServer","aLastUsed","bLastUsed","bothNotNull","aName","bName","softDelete","setDeletedDate","softDeleteWithServer","softDeleteManyWithServer","restore","clearDeletedDate","restoreWithServer","restoreManyWithServer","restores","setAddEditCipherInfo","encryptedCiphers","userCiphers","encryptedCipher","existingCipher","existingHiddenFields","Hidden","hiddenFields","ef","matchedField","attachmentView","attachmentResponse","encBuf","decBuf","decryptFromBytes","theObj","modelProp","encryptCipherData","uriHash","viewKey","domainKey","getAutofillOnPageLoadDefault","lastUsed","autofillOnPageLoadDefault","clearSortedCiphers","keyForCipherKeyEncryption","decryptedCipherKey","makeCipherKey","featureEnabled","meetsServerVersion","CollectionView","Collection","canEditItems","restrictProviderAccess","canEdit","canDelete","canViewCollectionInfo","orgKey","TreeNode","node","parent","children","ServiceUtils","nestedTraverse","nodeTree","partIndex","delimiter","partName","newPartName","getTreeNodeObject","getTreeNodeObjectFromList","ENCRYPTED_COLLECTION_DATA_KEY","jsonData","DECRYPTED_COLLECTION_DATA_KEY","collection","decryptMany","CollectionService","decryptedCollectionViews$","decryptedCollections$","encryptedCollectionDataState","encryptedCollections$","decryptedCollectionDataState","clearActiveUserCache","decCollections","activeUserOrgKeys$","cs","getAllNested","nodes","collectionCopy","getNested","toUpdate","CipherFileUploadService","adminRequest","legacyServerAttachmentFileUpload","FolderRequest","FolderApiService","postFolder","putFolder","deleteFolder","deleteAll","FolderView","Folder","FolderWithIdRequest","FOLDER_ENCRYPTED_FOLDERS","FOLDER_DECRYPTED_FOLDERS","decryptFolders","FolderService","encryptedFoldersState","decryptedFoldersState","folders$","folderData","folderViews$","getDecrypted$","getAllFromState","updates","cId","decryptFolderPromises","decryptedFolders","noneFolder","encryptedFolders","encryptedFolder","B32Chars","SteamChars","TotpService","getCode","period","digits","keyB32","isOtpAuth","isSteamAuth","digitParams","periodParam","algParam","epoch","timeHex","leftPad","decToHex","timeBytes","keyBytes","b32ToBytes","fullCode","trunc","pow","getTimeInterval","b32ToHex","cleanedInput","bits","hex","byteIndex","chunk","SHOW_CARDS_CURRENT_TAB","SHOW_IDENTITIES_CURRENT_TAB","VaultSettingsService","enablePasskeysState","showCardsCurrentTabState","showCardsCurrentTab$","showIdentitiesCurrentTabState","showIdentitiesCurrentTab$","setShowCardsCurrentTab","setShowIdentitiesCurrentTab","setEnablePasskeys","PASSWORD_SETTINGS","PASSPHRASE_SETTINGS","EFF_USERNAME_SETTINGS","CATCHALL_SETTINGS","SUBADDRESS_SETTINGS","DefaultPassphraseBoundaries","freeze","initializeBoundaries","DefaultPassphraseGenerationOptions","DefaultPasswordBoundaries","minDigits","minSpecialCharacters","DefaultPasswordGenerationOptions","DefaultPolicyEvaluator","policyInEffect","applyPolicy","sanitize","PassphraseGeneratorOptionsEvaluator","defaultBoundary","structuredClone","minNumberWords","boundaries","withUpperBound","fitToBounds","PasswordGeneratorOptionsEvaluator","createBoundary","numberCount","specialCount","minConsistentLength","minPolicyLength","useUppercase","useLowercase","useNumbers","useSpecial","cascade","enabledResult","disabledValue","createEvaluator","createEvaluatorV2","useUpper","useLower","minNumbers","Policies","Passphrase","initial","constraints","maxLength","DefaultCatchallOptions","website","DefaultEffUsernameOptions","DefaultSubaddressOptions","Forwarders","AddyIo","validForSelfHosted","DuckDuckGo","Fastmail","FirefoxRelay","ForwardEmail","SimpleLogin","BufferedKeyDefinition","toKeyDefinition","shouldOverwrite","dependency","input","defaultSettings","createForwardingEmail","_request","context","emailDomain","generatedBy","hasJsonPayload","processJson","importBuffer","extends","authenticate","authenticationToken","_context","getAccountId","primaryAccounts","missingAccountIdCause","using","methodCalls","forDomain","emailPrefix","methodResponses","created","notCreated","generated_for","full_address","labels","base64","suffix","endpoint","note","alias","Authentication","Integrations","UsernameDigits","PasswordTypes","pick","list","uniform","pickWord","word","titleCase","randomNumber","shuffle","shuffled","copy","j","chars","charSet","randomCharIndex","DefaultGeneratorService","strategy","_evaluators$","options$","durableState","defaults$","saveOptions","evaluator$","toEvaluator","enforcePolicy","evaluated","generate","Observable","previous","isDistinct","mapPolicyToEvaluator","configuration","newDefaultEvaluator","IntegrationContext","i18n","setting","descriptionId","ForwarderContext","EFFLongWordList","toCharacterSet","characters","SpecialCharacters","Ascii","Full","Uppercase","Lowercase","Digit","Special","Unmistakable","SUBADDRESS_PARSER","EmailRandomizer","randomAsciiSubaddress","subaddressLength","parsed","randomAsciiCatchall","Infinity","randomWordsCatchall","numberOfWords","wordList","words","EmailCalculator","appendToSubaddress","appendText","concatenate","emailWebsite","PasswordRandomizer","randomizer","randomAscii","sets","allocate","fill","allSet","active","toAsciiSets","generating","flatMap","randomEffLongWords","luckyNumber","separator","UsernameRandomizer","randomWords","selectCase","casing","digit","BufferedState","dependency$","bufferedState","hasValue$","overwriteDependency$","overwrite$","hasValue","overwriteOutput","output$","emit","bufferedState$","buffered","normalized","DataPacker","DATA_PACKING","divider","hasInvalidPadding","PaddedDataPacker","frameSize","pack","separatorLength","payloadLength","paddingLength","unpack","frameEndIndex","dataStartIndex","dataEndIndex","paddingStartIndex","SecretKeyDefinition","classifier","deconstruct","reconstruct","toEncryptedStateKey","inner","SecretState","$encryptor","encryptedState","encryptor","declassifyAll","encryptor$","declassifyItem","disclosed","declassified","declassify","decryptTasks","classifyItem","classified","classify","classifyAll","classifyTasks","latestClassified","latestCombined","latestEncryptor","latest","combined","latestDeclassified","updatedDeclassified","updatedClassified","UserEncryptor","UserKeyEncryptor","dataPacker","assertHasValue","packed","unpacked","GeneratorStrategy","CreateForwardingAddressRpc","requestor","toRequest","redirect","toBody","GetAccountIdRpc","observe$PerUserId","_subjects","initialValue","sharedStateByUserId","OptionsClassifier","_disclosed","ForwarderGeneratorStrategy","keyService","sharedByUserId","getUserSecrets","requestOptions","fetchJson","createForwardingAddress","rolloverKey","packer","secretState","canDecrypt$","createContext","PassphraseGeneratorStrategy","requestWords","PasswordGeneratorStrategy","defaultEnabled","defaultQuantity","required","sum","remaining","CatchallGeneratorStrategy","emailCalculator","emailRandomizer","SubaddressGeneratorStrategy","EffUsernameGeneratorStrategy","GeneratedPasswordHistory","GeneratedCredential","category","generationDate","GeneratorHistoryService","SecretClassifier","allSecret","disclose","newDisclosed","exclude","excludedPropertyName","newExcluded","excludedProp","disclosedProp","cleaned","merged","GENERATOR_HISTORY","GENERATOR_HISTORY_BUFFER","history","decryptor","LegacyPasswordHistoryDecryptor","LocalGeneratorHistoryService","maxTotal","_credentialStates","track","getCredentialState","unshift","removeAt","credentialIndex","credentials$","createSecretState","decryptor$","DefaultGeneratorNavigation","GeneratorNavigationEvaluator","overridePasswordType","preferPassword","DisabledGeneratorNavigationPolicy","GENERATOR_SETTINGS","DefaultGeneratorNavigationService","evaluator","applied","PasswordGeneratorPolicyOptions","inEffect","clone","LegacyPasswordGenerationService","navigation","passwords","passphrases","generatePassword","generatePassphrase","getRawOptions$","withSequenceNumber","observable$","activeUser","pairwise","passwordPrevious","passphrasePrevious","generatorPrevious","passwordOptions","passwordDefaults","passwordEvaluator","passwordCurrent","passphraseOptions","passphraseDefaults","passphraseEvaluator","passphraseCurrent","generatorOptions","generatorDefaults","generatorEvaluator","generatorCurrent","getOptions$","policyUpdated","passwordOptionsWithPolicy","passphraseOptionsWithPolicy","generatorOptionsWithPolicy","toPasswordGeneratorOptions","getOptions","enforcePasswordGeneratorPoliciesOnOptions","navigationEvaluator","navigationApplied","navigationSanitized","sanitized","toStoredOptions","navigationOptions$","defaults","navigationOptions","getHistory","each","toGeneratedPasswordHistory","addHistory","history$","RestClient","rpc","errorKey","commonError","detectCommonErrors","tryGetErrorMessage","tryFindErrorAsJson","tryFindErrorAsText","statusText","LegacyUsernameGenerationService","generateUsername","generateCatchall","generateSubaddress","generateForwarded","generateWord","catchallOptions","catchallDefaults","effUsernameOptions","effUsernameDefaults","subaddressOptions","subaddressDefaults","addyIoOptions","addyIoDefaults","duckDuckGoOptions","duckDuckGoDefaults","fastmailOptions","fastmailDefaults","firefoxRelayOptions","firefoxRelayDefaults","forwardEmailOptions","forwardEmailDefaults","simpleLoginOptions","simpleLoginDefaults","toUsernameOptions","saveGeneratorOptions","saveForwarderOptions","saveNavigationOptions","ImportApiService","postImportCiphers","postImportOrganizationCiphers","ImportCiphersRequest","folderRelationships","ImportOrganizationCiphersRequest","collectionRelationships","KvpRequest","CollectionRequest","CollectionWithIdRequest","newLineRegex","passwordFieldNames","usernameFieldNames","notesFieldNames","uriFieldNames","parseCsvOptions","encoding","skipEmptyLines","parseXml","validateNoExternalEntities","doc","DOMParser","parseFromString","querySelector","parseCsv","header","parseOptions","splitNewLine","errors","row","parseSingleRowCsv","rowData","parsedRow","makeUriArray","fixUri","returnArr","nameFromUrl","getValueOrDefault","setCardExpiration","expiryRegex","expiryMatch","moveFoldersToCollections","querySelectorDirectChild","parentEl","els","querySelectorAllDirectChild","querySelectorAll","el","parentNode","initLoginCipher","cleanupCipher","processKvp","processFolder","folderName","addRelationship","folderIndex","addFolder","convertToNoteIfNeeded","Generic","processFullName","nameParts","AscendoCsvImporter","fieldLower","AvastCsvImporter","AvastJsonImporter","logins","custName","pwd","loginName","label","cards","holderName","cardNumber","cvv","AviraCsvImporter","secondary_username","BlackBerryCsvImporter","grouping","fav","extra","ChromeCsvImporter","androidPatternRegex","BitwardenCsvImporter","col","addCollection","collectionIndex","delimPosition","login_totp","login_username","login_password","login_uri","safeGetString","CardExport","template","toView","toDomain","FieldExport","IdentityExport","Fido2CredentialExport","LoginUriExport","LoginExport","PasswordHistoryExport","SecureNoteExport","CipherExport","CipherWithIdExport","CollectionExport","CollectionWithIdExport","FolderExport","FolderWithIdExport","BitwardenJsonImporter","parseEncrypted","parseDecrypted","encKeyValidation_DO_NOT_EDIT","encKeyValidation","groupingsMap","parseCollections","parseFolders","folderView","collectionView","BitwardenPasswordProtectedImporter","promptForPassword_callback","parsedData","passwordProtected","cannotParseFile","checkPassword","clearTextData","jdoc","BlurCsvImporter","OfficialProps","ButtercupCsvImporter","processingCustomFields","ClipperzHtmlImporter","textarea","textContent","entry","property","actionType","labelLower","CodebookCsvImporter","Category","Favorite","Entry","Note","TOTP","Website","_mappedCredentialsColumns","_mappedPersonalInfoAsIdentityColumns","_mappedSecureNoteColumns","DashlaneCsvImporter","parsePersonalInformationRecordAsIdentity","rowKeys","parseCredentialsRecord","parsePaymentRecord","parseIdRecord","parsePersonalInformationRecord","parseSecureNoteRecords","otpSecret","importUnmappedFields","account_name","mappedValues","cc_number","expiration_month","expiration_year","account_holder","account_number","first_name","middle_name","last_name","item_name","dataRow","phone_number","HandledResults","DashlaneJsonImporter","ADDRESS","processAddress","AUTHENTIFIANT","processAuth","BANKSTATEMENT","processNote","IDCARD","PAYMENTMEANS_CREDITCARD","processCard","IDENTITY","processIdentity","secondaryLogin","pseudo","addressName","addressFull","zipcode","bank","owner","nameProperty","EncryptrCsvImporter","Label","Notes","CVV","Expiry","expParts","EnpassCsvImporter","firstRow","containsField","fieldValue","fieldName","fieldNameLower","androidUrlRegex","EnpassJsonImporter","foldersMap","foldersIndexMap","folderTree","buildFolderTree","flattenFolderTree","template_type","processLogin","cleanedValue","sensitive","uuid","parent_uuid","titlePrefix","tree","FirefoxCsvImporter","FskEntryTypesEnum","FSecureFskImporter","parseEntry","handleLoginEntry","CreditCard","handleCreditCardEntry","creditNumber","creditCvv","creditExpiry","GnomeJsonImporter","keyRing","display_name","username_value","attr","NotesHeader","ApplicationsHeader","WebsitesHeader","Delimiter","KasperskyTxtImporter","notesData","applicationsData","websitesData","workingData","parseDataCategory","applications","websites","w","nameKey","itemComment","itemCommentKey","colonIndex","KeePass2XmlImporter","KeePassFileNode","RootNode","rootGroup","traverse","isRootNode","groupPrefixName","groupName","nameEl","cipherIndex","entryString","valueEl","keyEl","attrs","ProtectInMemory","group","KeePassXCsvImporter","Group","KeeperCsvImporter","LastPassCsvImporter","hasFolder","buildBaseCipher","parseSecureNote","parseCard","parseIdentity","ccnum","cardCipher","profilename","firstname","lastname","ccname","cccsc","ccexp","ccexpParts","middlename","extraParts","processedNote","typeParts","mappedData","parseSecureNoteMapping","monthString","getMonth","processingNotes","extraPart","LogMeOnceCsvImporter","MeldiumCsvImporter","DisplayName","UserName","Url","MSecureCsvImporter","splitValueRetainingLastPart","pop","mappedBaseColumns","_mappedUserAccountColumns","_mappedCreditCardColumns","_mappedIdentityColumns","_mappedIdCardColumns","_mappedTwoFaColumns","_mappedUserNoteColumns","MykiCsvImporter","nickname","additionalInfo","twofaSecret","authToken","cardName","exp_month","exp_year","firstAddressLine","secondAddressLine","zipCode","idType","idName","idCountry","idNumber","content","NordPassCsvImporter","recordType","evaluateType","custom_fields","customFieldsParsed","fieldType","additional_urls","additionalUrlsParsed","cardholdername","cardnumber","cvc","expirydate","full_name","OnePassword1PifImporter","line","trashed","processStandardItem","processWinOpVaultItem","overview","URLs","parsePasswordHistory","notesPlain","parseFields","sections","section","openContents","faveIndex","typeName","secureContents","maxSize","designationKey","valueKey","fieldDesignation","street","CategoryEnum","LoginFieldTypeEnum","OnePassword1PuxImporter","vaults","categoryUuid","Database","WirelessRouter","Server","API_Credential","BankAccount","SoftwareLicense","EmailAccount","MedicalRecord","DriversLicense","OutdoorLicense","Membership","Passport","RewardsProgram","SocialSecurityNumber","favIndex","processOverview","processLoginFields","processDetails","processSections","tags","inputString","loginFields","loginField","designation","CheckBox","parseSectionFields","sectionTitle","anyField","getFieldName","extractValue","fillLogin","fillApiCredentials","fillCreditCard","fillBankAccount","fillIdentity","fillDriversLicense","fillOutdoorLicense","fillMembership","fillPassport","fillRewardsProgram","fillSSN","email_address","guarded","monthYear","historyItems","CipherImportContext","importRecord","lowerProperty","IgnoredProperties","OnePasswordCsvImporter","loginPropertyParsers","setLoginUsername","setLoginPassword","setLoginUris","creditCardPropertyParsers","setCreditCardNumber","setCreditCardVerification","setCreditCardCardholderName","setCreditCardExpiry","identityPropertyParsers","setIdentityFirstName","setIdentityInitial","setIdentityLastName","setIdentityUserName","setIdentityEmail","setIdentityPhone","setIdentityCompany","quoteChar","escapeChar","getProp","setNotes","setCipherType","altUsername","setKnownLoginValue","setKnownCreditCardValue","setKnownIdentityValue","setUnknownValue","getPropByRegexp","regexp","matchingKeys","getPropIncluding","includesMap","func","readableDate","OnePasswordMacCsvImporter","OnePasswordWinCsvImporter","setIdentityAddress","expSplit","PadlockCsvImporter","PassKeepCsvImporter","getValue","PasskyJsonImporter","passkyExport","PassmanJsonImporter","customField","field_type","PasspackCsvImporter","tagsJson","Tags","tagJson","__parsed_extra","fieldsJson","extraFields","fieldJson","PasswordAgentCsvImporter","newVersion","altFormat","PasswordBossJsonImporter","login_url","identifiers","valObj","expDate","cf","PasswordDragonXmlImporter","records","categoryText","accountName","tagName","PasswordSafeXmlImporter","passwordSafe","notesDelimiter","getAttribute","groupText","PasswordWalletTxtImporter","ProtonPassItemState","ProtonPassJsonImporter","TRASHED","pinned","loginContent","itemUsername","itemEmail","totpUri","extraField","creditCardContent","verificationNumber","PsonoJsonImporter","WEBSITE_mappedValues","APP_PWD_mappedValues","BOOKMARK_mappedValues","NOTES_mappedValues","TOTP_mappedValues","ENV_VARIABLES_mappedValues","GPG_mappedValues","psonoExport","handleItemParsing","parentName","folderHasItems","folderHasSubfolders","parsePsonoItem","parseWebsiteLogins","parseApplicationPasswords","parseEnvironmentVariables","parseTOTP","parseBookmarks","parseNotes","website_password_title","website_password_notes","website_password_username","website_password_password","website_password_url","website_password_auto_submit","website_password_url_filter","application_password_title","application_password_notes","application_password_username","application_password_password","bookmark_title","bookmark_notes","bookmark_url","note_title","note_notes","totp_title","totp_notes","totp_code","environment_variables_title","environment_variables_notes","environment_variables_variables","KvPair","parseGPG","mail_gpg_own_key_title","mail_gpg_own_key_public","mail_gpg_own_key_name","mail_gpg_own_key_email","mail_gpg_own_key_private","RememBearCsvImporter","trash","cardholder","expiryMonth","expMonthNumber","expiryYear","expYearNumber","RoboFormCsvImporter","Name","Pwd","Rf_fields","SafariCsvImporter","OTPAuth","SafeInCloudXmlImporter","labelEl","cardEl","labelIdEl","labelId","fieldEl","notesEl","candidates","choice","SaferPassCsvImporter","SecureSafeCsvImporter","urlField","Comment","SplashIdCsvImporter","parseFieldsToNotes","startIndex","StickyPasswordXmlImporter","loginNodes","loginNode","usernameText","passwordText","titleText","linkText","notesText","accountLogin","parentElement","buildGroupText","PropertiesToIgnore","TrueKeyCsvImporter","memo","kind","expiryDate","document_content","UpmCsvImporter","YotiCsvImporter","ZohoVaultCsvImporter","ChamberName","parseData","SecretData","CustomData","featuredImportOptions","regularImportOptions","ImportService","importApiService","getImportOptions","import","importer","fileContents","selectedImportTarget","importResult","SyntaxError","halfway","last","badData","setImportTarget","handleOrganizationalImport","handleIndividualImport","errorResponse","handleServerError","getImporter","format","getImporterInstance","itemType","importTarget","noCollectionRelationShips","cipherPos","relationships","noFolderRelationShips","newFolderName","ExportHelper","getFileName","extension","padNumber","getHours","getMinutes","getSeconds","num","width","padCharacter","numString","VaultExportService","individualVaultExportService","organizationVaultExportService","getExport","getPasswordProtectedExport","onlyManagedCollections","BaseVaultExportService","buildPasswordExport","clearText","encText","jsonDoc","buildCommonCipher","OrganizationVaultExportService","getEncryptedManagedExport","getOrganizationEncryptedExport","getDecryptedManagedExport","getOrganizationDecryptedExport","exportData","exportPromises","decCol","decCipher","buildCsvExport","buildJsonExport","BuildEncryptedExport","allDecCiphers","dC","allCiphers","encCollections","eC","collectionsMap","exportCiphers","IndividualVaultExportService","getEncryptedExport","getDecryptedExport","decFolders","SafariApp","sendMessageToApp","resolveNow","isSafariApi","messageId","MAX_SAFE_INTEGER","runtime","sendNativeMessage","responseData","BrowserClipboardService","isClipboardApiSupported","clipboard","writeText","consoleLogService","useLegacyCopyMethod","read","useLegacyReadMethod","readText","isLegacyClipboardMethodSupported","textareaElement","document","createElement","style","position","appendChild","select","execCommand","removeChild","focus","queryCommandSupported","BrowserPlatformUtilsService","clipboardWriteCallback","offscreenDocumentService","deviceCache","isFirefox","FirefoxExtension","isOpera","OperaExtension","isEdge","EdgeExtension","isVivaldi","VivaldiExtension","isChrome","ChromeExtension","isSafari","SafariExtension","Browser","chrome","opr","addons","safariVersion","shouldApplySafariHeightFix","isIE","isMacAppStore","isViewOpen","isPopupOpen","sendMessageWithResponse","lockTimeout","createNewTab","extensionPage","getApplicationVersion","manifest","getManifest","version_name","supportsWebAuthn","PublicKeyCredential","supportsDuo","windowContext","clearMs","handleClipboardWriteCallback","isManifestVersion","offscreenApiSupported","triggerOffscreenCopyToClipboard","triggerOffscreenReadFromClipboard","getAutofillKeyboardShortcut","autofillCommand","commands","shortcut","getPlatformInfo","os","withDocument","offscreen","Reason","CLIPBOARD","registerContentScripts","registerContentScriptsPolyfill","contentScriptOptions","chromeProxy","NestedProxy","patternValidationRegex","gotScripting","scripting","gotNavigation","Proxy","arguments_","lastError","assertValidPattern","matchPattern","isValidPattern","getRawPatternRegex","protocol","pathname","replaceAll","patternToRegex","matchPatterns","castAllFramesTarget","allFrames","frameId","castArray","possibleArray","arrayOrUndefined","insertCSS","files","matchAboutBlank","runAt","ignoreTargetErrors","everyInsertion","frameIds","css","tabs","catchTargetInjectionErrors","assertNoCode","executeScript","normalizedFiles","injection","executions","injectContentScript","where","scripts","targets","injectContentScriptInSpecificTarget","injections","script","match_about_blank","run_at","js","isOriginPermitted","contains","origins","matches","excludeMatches","pattern","matchesRegex","excludeMatchesRegex","inject","tabListener","navListener","addListener","webNavigation","onCommitted","onUpdated","registeredContentScript","unregister","removeListener","buildRegisterContentScriptsPolyfill","manifestVersion","manifest_version","expectedVersion","getWindow","windowId","getWindowById","getCurrentWindow","windows","getCurrent","populate","createWindow","removeWindow","updateWindowProperties","focusWindow","focused","getTabFromCurrentWindowId","tabsQueryFirst","WINDOW_ID_CURRENT","getTab","getTabFromCurrentWindow","currentWindow","getActiveTabs","tabsQuery","tabSendMessageData","tabSendMessage","sendMessage","sendTabsMessage","responseCallback","onWindowCreated","onCreated","getBackgroundPage","isBackgroundPage","getExtensionViews","fetchProperties","getViews","getFrameDetails","getFrame","getAllFrameDetails","getAllFrames","messageListener","onMessage","messageListener$","subscriber","storageChangeListener","onChanged","trackedChromeEventListeners","setupUnloadListeners","_event","eventListener","arg","focusTab","highlighted","closePopup","isWebExtensionsApi","isFirefoxOnAndroid","finally","gaFilter","getUILanguage","reloadExtension","reload","reloadOpenWindows","exemptCurrentHref","currentHref","href","connectNative","application","isChromeApi","requestPermission","permission","permissionsGranted","getBrowserAction","browserAction","getSidebarAction","sidebarAction","captureVisibleTab","executeScriptInTab","scriptingApiDetails","injectImmediately","world","browserAutofillSettingsOverridden","checkOverrideStatus","levelOfControl","autofillAddressOverridden","privacy","services","autofillAddressEnabled","autofillCreditCardOverridden","autofillCreditCardEnabled","passwordSavingOverridden","passwordSavingEnabled","updateDefaultBrowserAutofillSettings","registerContentScriptsMv2","contentScripts","register","registerContentScriptsMv3","unregisterContentScriptsMv3","unregisterContentScripts","AutoSubmitLoginBackground","autofillService","scriptInjectorService","validIdpHosts","validAutoSubmitHosts","mostRecentIdpHost","currentAutoSubmitHostData","isSafariBrowser","extensionMessageHandlers","triggerAutoSubmitLogin","sender","multiStepAutoSubmitLoginComplete","handleMultiStepAutoSubmitLoginComplete","handleAutoSubmitLoginPolicySubscription","applyPolicyToActiveUser","destroy","AutomaticAppLogIn","setupAutoSubmitLoginListeners","parseIpdHostsFromPolicy","idpHost","handleExtensionMessage","webRequest","onBeforeRequest","handleOnBeforeRequest","types","onBeforeRedirect","handleWebRequestOnBeforeRedirect","initSafari","getUrlHost","requestInitiator","getRequestInitiator","isValidInitiator","postRequestEncounteredAfterSubmission","requestRedirectsToInvalidHost","clearAutoSubmitHostData","shouldRouteTriggerAutoSubmit","setupAutoSubmitFlow","disableAutoSubmitFlow","isRequestInMainFrame","isValidAutoSubmitHost","autoSubmitHost","onCompleted","handleAutoSubmitHostNavigationCompleted","hostEquals","urlContainsAutoFillParam","injectAutoSubmitLoginScript","injectDetails","frame","redirectUrl","isValidIdpHost","removeUrlFromAutoSubmitHosts","initiator","triggerAutoSubmitAfterRedirectOnSafari","parsedUrl","originUrl","doAutoFillOnTab","pageDetails","handleSafariTabOnActivated","activeInfo","setMostRecentIdpHost","handleSafariTabOnUpdated","changeInfo","handleSafariWebNavigationOnCompleted","onRemoved","handleSafariTabOnRemoved","messageResponse","currentTab","onActivated","ContextMenusBackground","contextMenuClickedHandler","contextMenus","onClicked","cipherAction","commandToRetry","contextMenuOnClickData","inSidebar","urlContainsSearchParams","inPopout","inSingleActionPopout","popoutKey","inPopup","getContentScrollY","scrollingContainer","getElementsByTagName","scrollTop","setContentScrollY","scrollYAmount","containerSelector","container","backgroundInitializationRequired","openPopout","extensionUrlPath","senderWindowId","singleActionKey","forceCloseExistingWindows","windowOptions","defaultPopoutWindowOptions","height","popupWidth","senderWindow","popoutWindowOptions","left","top","buildPopoutUrl","isSingleActionPopoutOpen","closeSingleActionPopout","delayClose","extensionUrl","getURL","openCurrentPagePopout","popoutUrl","hashRoute","windowInfo","popoutTabs","shift","searchParam","searchValue","AuthPopoutType","extensionUnlockUrls","openUnlockPopout","senderTab","skipNotification","windowType","VaultPopoutType","viewVaultItem","addEditVaultItem","fido2Popout","openViewVaultItemPopout","promptWindowPath","queryParamToken","formatQueryString","queryString","openVaultItemPasswordRepromptPopout","openAddEditVaultItemPopout","cipherType","addEditCipherUrl","NotificationQueueMessageType","NotificationBackground","userNotificationSettingsService","themeStateService","notificationQueue","allowedRetryCommands","unlockCompleted","handleUnlockCompleted","bgGetFolderData","getFolderData","bgCloseNotificationBar","handleCloseNotificationBarMessage","bgAdjustNotificationBar","handleAdjustNotificationBarMessage","bgAddLogin","addLogin","bgChangedPassword","changedPassword","bgRemoveTabFromNotificationQueue","removeTabFromNotificationQueue","bgSaveCipher","handleSaveCipherMessage","bgNeverSave","saveNever","collectPageDetailsResponse","handleCollectPageDetailsResponseMessage","bgUnlockPopoutOpened","unlockVault","checkNotificationQueue","bgReopenUnlockPopout","bgGetEnableChangedPasswordPrompt","getEnableChangedPasswordPrompt","bgGetEnableAddedLoginPrompt","getEnableAddedLoginPrompt","bgGetExcludedDomains","getExcludedDomains","bgGetActiveUserServerConfig","getActiveUserServerConfig","getWebVaultUrlForNotification","getWebVaultUrl","setupExtensionMessageListener","cleanupNotificationQueue","doNotificationQueueCheck","expires","tabDomain","queueMessage","sendNotificationQueueMessage","notificationQueueMessage","notificationType","typeData","isVaultLocked","wasVaultLocked","launchTimestamp","removeIndividualVault","importType","loginInfo","normalizedUsername","loginDomain","addLoginIsEnabled","pushAddLoginToQueue","usernameMatches","pushChangePasswordToQueue","changeData","currentPassword","passwordMatches","forms","getFormsWithPasswordFields","pushUnlockVaultToQueue","requestFilelessImport","pushRequestFilelessImportToQueue","saveOrUpdateCredentials","cipherView","getDecryptedCipherById","updatePassword","folderExists","newCipher","convertAddLoginQueueMessageToCipherView","editItem","messageData","retryCommand","retryHandler","fadeOutNotification","uriView","loginView","OverlayNotificationsBackground","notificationBackground","websiteOriginsWithFields","activeFormSubmissionRequests","modifyLoginCipherFormData","clearLoginCipherFormDataSubject","formSubmissionRequestMethods","formFieldSubmitted","storeModifiedLoginFormData","handleCollectPageDetailsResponse","formData","existingModifyLoginData","handleOnBeforeRequestEvent","isPostSubmissionFormRedirection","setupNotificationInitTrigger","requestId","isValidFormSubmissionRequest","notificationDataIncompleteOnBeforeRequest","getFormFieldDataFromTab","modifyLoginData","shouldTriggerAddLoginNotification","shouldTriggerChangePasswordNotification","requestHostIsInvalid","handleOnCompletedRequestEvent","isInvalidStatusCode","triggerNotificationInit","delayNotificationInitUntilTabIsComplete","handleWebNavigationOnCompleted","clearCompletedWebRequest","setupWebRequestsListeners","handleTabRemoved","handleTabUpdated","setupExtensionListeners","shouldInitAddLoginOrChangePasswordNotification","getSenderUrlMatchPatterns","isAddLoginOrChangePasswordNotificationEnabled","isSenderFromExcludedDomain","generateMatchPatterns","originMatchPattern","senderOrigin","excludedDomains","requestFilter","generateRequestFilter","websiteOrigins","buildCipherIcon","iconsServerUrl","showFavicon","icon","image","fallbackImage","cardIcons","Visa","Mastercard","Amex","Discover","JCB","Maestro","UnionPay","RuPay","hostnameUri","imageEnabled","AutofillOverlayElement","AutofillOverlayPort","generateRandomChars","randomChars","byte","OverlayBackground","fido2ActiveRequestManager","storeInlineMenuFido2CredentialsSubject","pageDetailsForTab","subFrameOffsetsForTab","portKeyForTab","expiredPorts","inlineMenuCiphers","inlineMenuFido2Credentials","inlineMenuPosition","cardAndIdentityCiphers","currentInlineMenuCiphersCount","startInlineMenuFadeInSubject","cancelInlineMenuFadeInSubject","startUpdateInlineMenuPositionSubject","cancelUpdateInlineMenuPositionSubject","repositionInlineMenuSubject","rebuildSubFrameOffsetsSubject","addNewVaultItemSubject","isFieldCurrentlyFocused","isFieldCurrentlyFilling","isInlineMenuButtonVisible","isInlineMenuListVisible","showPasskeysLabelsWithinInlineMenu","autofillOverlayElementClosed","overlayElementClosed","autofillOverlayAddNewVaultItem","addNewVaultItem","triggerAutofillOverlayReposition","triggerOverlayReposition","checkIsInlineMenuCiphersPopulated","updateFocusedFieldData","setFocusedFieldData","updateIsFieldCurrentlyFocused","checkIsFieldCurrentlyFocused","updateIsFieldCurrentlyFilling","checkIsFieldCurrentlyFilling","getAutofillInlineMenuVisibility","getInlineMenuVisibility","openAutofillInlineMenu","openInlineMenu","closeAutofillInlineMenu","closeInlineMenu","checkAutofillInlineMenuFocused","checkInlineMenuFocused","focusAutofillInlineMenuList","focusInlineMenuList","updateAutofillInlineMenuPosition","updateInlineMenuPosition","getAutofillInlineMenuPosition","getInlineMenuPosition","updateAutofillInlineMenuElementIsVisibleStatus","updateInlineMenuElementIsVisibleStatus","checkIsAutofillInlineMenuButtonVisible","checkIsInlineMenuButtonVisible","checkIsAutofillInlineMenuListVisible","checkIsInlineMenuListVisible","getCurrentTabFrameId","getSenderFrameId","updateSubFrameData","triggerSubFrameFocusInRebuild","destroyAutofillInlineMenuListeners","triggerDestroyInlineMenuListeners","subFrameData","storePageDetails","doFullSync","updateOverlayCiphers","addedCipher","addEditCipherSubmitted","editedCipher","deletedCipher","fido2AbortRequest","abortFido2ActiveRequest","inlineMenuButtonPortMessageHandlers","triggerDelayedAutofillInlineMenuClosure","triggerDelayedInlineMenuClosure","autofillInlineMenuButtonClicked","port","handleInlineMenuButtonClicked","autofillInlineMenuBlurred","checkInlineMenuListFocused","redirectAutofillInlineMenuFocusOut","redirectInlineMenuFocusOut","updateAutofillInlineMenuColorScheme","updateInlineMenuButtonColorScheme","inlineMenuListPortMessageHandlers","checkAutofillInlineMenuButtonFocused","checkInlineMenuButtonFocused","fillAutofillInlineMenuCipher","fillInlineMenuCipher","getNewVaultItemDetails","viewSelectedCipher","updateAutofillInlineMenuListHeight","updateInlineMenuListHeight","repositionInlineMenu","cancelInlineMenuFadeInAndPositionUpdate","closeInlineMenuAfterReposition","focusedFieldData","handleWebNavigationOnCommitted","subFrames","removePageDetails","handlePortOnConnect","isInlineMenuListMessageConnector","isInlineMenuButtonMessageConnector","handleOverlayElementPortMessage","isInlineMenuListPort","isInlineMenuButtonPort","storeOverlayPort","onDisconnect","handlePortOnDisconnect","iframeUrl","pageTitle","getMessage","styleSheetUrl","translations","getInlineMenuTranslations","getInlineMenuCipherData","portKey","portName","filledByCipherType","showInlineMenuAccountCreation","showPasskeysLabels","overlayElement","tabPortKey","inlineMenuListPort","inlineMenuButtonPort","button","initOverlayEventObservables","getIconsUrl","availablePasskeyAuthCredentials$","storeInlineMenuFido2Credentials","debounceTime","throttleTime","rebuildSubFrameOffsets","addNewItemData","buildCipherAndOpenAddEditVaultItemPopout","updateInlineMenuPositionAfterRepositionEvent","cancelSignal","triggerInlineMenuFadeIn","updateAllCipherTypes","closeInlineMenuAfterCiphersUpdate","ciphersViews","getCipherViews","getAllCipherTypeViews","inlineMenuCiphersArray","inlineMenuCipherData","buildInlineMenuAccountCreationCiphers","buildInlineMenuCiphers","accountCreationLoginCiphers","inlineMenuCipherId","buildCipherData","accountCreationFieldType","getIdentityCipherData","identityData","passkeyCipherData","domainExclusionsSet","passkeysEnabled","showCipherAsPasskey","hasPasskey","domainExclusions","showPasskeys","inlineMenuData","passkey","focusedFieldTab","forceCloseInlineMenu","buildSubFrameOffsets","pageDetailsMap","forceRebuild","subFrameDepth","parentFrameIds","frameDetails","parentFrameId","subFrameOffset","subFrameUrl","subFrameId","documentId","clearDelayedInlineMenuClosure","tabFrameIds","toggleInlineMenuHidden","isInlineMenuHidden","setTransparentInlineMenu","mostRecentlyFocusedFieldHasValue","usePasskey","authenticatePasskeyCredential","updateLastUsedInlineMenuCipher","isPasswordRepromptRequired","totpCode","doAutoFill","fillNewPassword","allowTotpAutofill","senderTabHasFocusedField","sendOptions","delayedCloseTimeout","disconnect","subFrameOffsets","styles","getInlineMenuButtonPosition","startInlineMenuFadeIn","getInlineMenuListPosition","isVisible","cancelInlineMenuFadeIn","cancelFadeIn","subFrameTopOffset","subFrameLeftOffset","focusedFieldRects","paddingRight","paddingLeft","focusedFieldStyles","elementOffset","fieldPaddingRight","elementHeight","elementTopPosition","elementLeftPosition","senderFrameHasFocusedField","previousFocusedFieldData","updateIdentityCiphersOnLoginField","display","opacity","portMessage","isFocusingFieldElement","isOpeningFullInlineMenu","updateInlineMenuButtonAuthStatus","retryMessage","inlineMenuPageTranslations","opensInANewWindow","translate","buttonPageTitle","toggleBitwardenVaultOverlay","listPageTitle","unlockYourAccount","unlockAccount","unlockAccountAria","fillCredentialsFor","noItemsToShow","newItem","newLogin","addNewLoginItem","newCard","addNewCardItem","newIdentity","addNewIdentityItem","cardNumberEndsWith","passkeys","logInWithPasskey","addNewCipherType","currentAddNewItemData","isAddingNewLogin","updateCurrentAddNewItemLogin","isAddingNewCard","updateCurrentAddNewItemCard","isAddingNewIdentity","updateCurrentAddNewItemIdentity","partialLoginDataFoundInSubFrame","currentLoginData","currentCardData","expirationMonth","currentIdentityData","buildNewVaultItemCipherView","buildLoginCipherView","buildCardCipherView","buildIdentityCipherView","cardView","identityView","buildIdentityNameParts","fullNameParts","parsedHeight","checkShouldRepositionInlineMenu","resetFocusedFieldSubFrameOffsets","onConnect","storeExpiredOverlayPort","TabsBackground","main","overlayBackground","handleWindowOnFocusChanged","focusedWindowId","updateCurrentTabData","handleTabOnActivated","handleTabOnReplaced","onReplacedRan","handleTabOnUpdated","overlayImprovementsFlag","removePageDetailsStatus","onUpdatedRan","refreshBadge","refreshMenu","handleTabOnRemoved","setupTabEventListeners","onFocusChanged","onReplaced","WebRequestBackground","pendingAuthRequests","startListening","onAuthRequired","resolveAuthCredentials","completeAuthRequest","onErrorOccurred","authCredentials","MainContextMenuHandler","initRunning","initContextMenuItems","parentId","checkPremiumAccess","noCardsContextMenuItems","noIdentitiesContextMenuItems","noLoginsContextMenuItems","removeAll","contexts","menuItemId","loadOptions","optionId","sanitizedTitle","sanitizeContextMenuTitle","createChildItem","noAccess","noCards","option","noIdentities","noLogins","CipherContextMenuHandler","mainContextMenuHandler","ciphersByType","existingCiphersOfType","updateForCipher","ContextMenuClickedHandler","generatePasswordToClipboard","autofillAction","totpService","eventCollectionService","userVerificationService","getIdentifier","isCreateCipherAction","additionalCiphersToGet","parentMenuItemId","getCipherCreationType","Cipher_ClientCopiedPassword","overlayLoginCiphers","userAuthStatus","openAutofillOverlay","openOverlay","getAutofillOverlayVisibility","getOverlayVisibility","checkAutofillOverlayFocused","checkOverlayFocused","focusAutofillOverlayList","focusOverlayList","updateAutofillOverlayPosition","updateOverlayPosition","updateAutofillOverlayHidden","updateOverlayHidden","overlayButtonPortMessageHandlers","overlayButtonClicked","handleOverlayButtonClicked","closeAutofillOverlay","closeOverlay","forceCloseAutofillOverlay","overlayPageBlurred","checkOverlayListFocused","redirectOverlayFocusOut","overlayListPortMessageHandlers","checkAutofillOverlayButtonFocused","checkOverlayButtonFocused","fillSelectedListItem","fillSelectedOverlayListItem","isOverlayListPort","isOverlayButtonPort","getTranslations","getOverlayCipherData","setupExtensionMessageListeners","overlayListPort","isOverlayCiphersPopulated","overlayCiphersArray","overlayCipherData","loginCipherIcon","overlayCipherId","overlayButtonPort","forceCloseOverlay","getOverlayListPosition","getOverlayButtonPosition","isOpeningFullOverlay","formerAuthStatus","updateOverlayButtonAuthStatus","overlayPageTranslations","partialUsername","AbortManager","abortControllers","runWithAbortController","runner","Fido2ContentScript","Fido2ContentScriptId","Fido2PortName","Fido2Background","fido2ClientService","abortManager","fido2ContentScriptPortsSet","sharedInjectionDetails","sharedRegistrationOptions","abortRequest","fido2RegisterCredentialRequest","registerCredentialRequest","fido2GetCredentialRequest","getCredentialRequest","handleCredentialRequest","handleInjectedScriptPortConnection","handleInjectScriptPortOnDisconnect","handleEnablePasskeysUpdate","injectFido2ContentScriptsInAllTabs","injectFido2ContentScripts","previousEnablePasskeysSetting","updateContentScriptRegistration","destroyLoadedFido2ContentScripts","updateMv2ContentScriptsRegistration","updateMv3ContentScriptsRegistration","isPasskeySettingEnabled","registeredContentScripts","getFido2PageScriptAppendFileName","mv2Details","mv3Details","abortedRequestId","BrowserFido2MessageTypes","SessionClosedError","BrowserFido2UserInterfaceService","BrowserFido2UserInterfaceSession","abortPopout","sessionId","confirmNewCredentialResponse","closed","connected$","destroy$","windowClosed$","fromEventPattern","receive","connect","closeFido2Popout","complete","fallback","EmptyError","connectPromise","popoutId","openFido2Popout","AutofillMessageCommand","AutofillMessageSender","AutofillScript","properties","COLLECT_PAGE_DETAILS_RESPONSE_COMMAND","AutoFillConstants","EmailFieldNames","UsernameFieldNames","TotpFieldNames","SearchFieldNames","FieldIgnoreList","PasswordFieldExcludeList","ExcludedAutofillLoginTypes","ExcludedAutofillTypes","ExcludedInlineMenuTypes","ExcludedIdentityAutocompleteTypes","CreditCardAutoFillConstants","CardAttributes","CardAttributesExtended","CardHolderFieldNames","CardHolderFieldNameValues","CardNumberFieldNames","CardNumberFieldNameValues","CardExpiryFieldNames","CardExpiryFieldNameValues","ExpiryMonthFieldNames","ExpiryYearFieldNames","CVVFieldNames","CardBrandFieldNames","CardExpiryDateDelimiters","CardExpiryDateFormats","Month","MonthShort","Year","YearShort","MonthAbbr","YearAbbrShort","YearAbbrLong","IdentityAutoFillConstants","IdentityAttributes","FullNameFieldNames","FullNameFieldNameValues","TitleFieldNames","FirstnameFieldNames","MiddlenameFieldNames","LastnameFieldNames","AddressFieldNames","AddressFieldNameValues","Address1FieldNames","Address2FieldNames","Address3FieldNames","PostalCodeFieldNames","CityFieldNames","StateFieldNames","CountryFieldNames","PhoneFieldNames","UserNameFieldNames","CompanyFieldNames","IsoCountries","afghanistan","albania","algeria","andorra","angola","anguilla","antarctica","argentina","armenia","aruba","australia","austria","azerbaijan","bahamas","bahrain","bangladesh","barbados","belarus","belgium","belize","benin","bermuda","bhutan","bolivia","botswana","brazil","bulgaria","burundi","cambodia","cameroon","canada","chad","chile","china","colombia","comoros","congo","croatia","cuba","cyprus","denmark","djibouti","dominica","ecuador","egypt","eritrea","estonia","ethiopia","fiji","finland","france","gabon","gambia","georgia","germany","ghana","gibraltar","greece","greenland","grenada","guadeloupe","guam","guatemala","guernsey","guinea","guyana","haiti","honduras","hungary","iceland","india","indonesia","iraq","ireland","israel","italy","jamaica","japan","jersey","jordan","kazakhstan","kenya","kiribati","kuwait","kyrgyzstan","latvia","lebanon","lesotho","liberia","liechtenstein","lithuania","luxembourg","macao","macedonia","madagascar","malawi","malaysia","maldives","mali","malta","martinique","mauritania","mauritius","mayotte","mexico","moldova","monaco","mongolia","montenegro","montserrat","morocco","mozambique","myanmar","namibia","nauru","nepal","netherlands","nicaragua","niger","nigeria","niue","norway","oman","pakistan","palau","panama","paraguay","peru","philippines","pitcairn","poland","portugal","qatar","reunion","romania","rwanda","samoa","senegal","serbia","seychelles","singapore","slovakia","slovenia","somalia","spain","sudan","suriname","swaziland","sweden","switzerland","taiwan","tajikistan","tanzania","thailand","togo","tokelau","tonga","tunisia","turkey","turkmenistan","tuvalu","uganda","ukraine","uruguay","uzbekistan","vanuatu","venezuela","vietnam","yemen","zambia","zimbabwe","IsoStates","alabama","alaska","arizona","arkansas","california","colorado","connecticut","delaware","florida","hawaii","idaho","illinois","indiana","iowa","kansas","kentucky","louisiana","maine","maryland","massachusetts","michigan","minnesota","mississippi","missouri","montana","nebraska","nevada","ohio","oklahoma","oregon","pennsylvania","tennessee","texas","utah","vermont","virginia","washington","wisconsin","wyoming","IsoProvinces","alberta","manitoba","ontario","quebec","saskatchewan","currentlyOpeningPasswordRepromptPopout","autofillScriptPortsSet","collectPageDetailsFromTab$","pageDetailsFromTab$","scan","webExtSender","loadAutofillScriptsOnInstall","injectAutofillScriptsInAllTabs","previousSetting","currentSetting","handleInlineMenuVisibilityChange","reloadAutofillScripts","injectAutofillScripts","triggeringOnPageLoad","accountIsUnlocked","autoFillOnPageLoadIsEnabled","addLoginImprovementsFlagActive","injectedScripts","getBootstrapAutofillContentScript","getAutofillOnPageLoad","injectedScript","isNotificationBarEnabled","passwordFields","loadPasswordFields","passwordFieldsWithoutForm","pf","form","formKeys","formCount","soloFormKey","formKey","formPasswordFields","uf","findUsernameField","getShouldAutoCopyTotp","getDefaultUriMatchStrategy","canAccessPremium","didAutofill","pd","fillScript","generateFillScript","skipUsernameOnlyFill","onlyEmptyFields","onlyVisibleFields","autoSubmitLogin","tabUrl","untrustedIframe","allowUntrustedIframe","delay_between_operations","skipLastUsed","pageDetailsUrl","shouldAutoCopyTotp","Cipher_ClientAutofilled","fromCommand","lastLaunchedCipher","userHasMasterPasswordAndKeyHash","isDebouncingPasswordRepromptPopout","doAutoFillActiveTab","getActiveTab","setAutoFillOnPageLoadOrgPolicy","filledFields","fieldNames","opid","viewable","isSearchField","matchingIndex","findMatchingFieldIndex","matchingField","Linked","fillByOpid","generateLoginFillScript","generateCardFillScript","generateIdentityFillScript","usernames","totps","savedUrls","inUntrustedIframe","passField","findTotpField","elementNumber","fieldIsFuzzyMatch","autoCompleteType","formElementsSet","autosubmit","totpValue","setFillScriptForFocus","fillFields","isExcludedFieldType","isFieldMatch","makeScriptAction","selectInfo","siOptions","fieldAttrsContain","combinedExpiryFillValue","generateCombinedExpiryValue","fullMonth","fullYear","partYear","makeScriptActionWithValue","pageUrl","containsValue","doesContainValue","attributeName","useMonthPadding","useYearFull","orderByYear","currentCentury","expectedExpiryDateFormat","expiryDateFormatPatterns","getExpectedExpiryDateFormat","expiryDateDelimitersPattern","expectedDateFormat","dateFormatPatterns","dateFormat","dateFormatPattern","fieldAttributeValue","fieldAttributeMatch","irrelevantExpiryCharactersPattern","_generateIdentityFillScript","filledState","stateLower","isoState","filledCountry","countryLower","isoCountry","fieldsIndex","excludeFieldFromIdentityFill","keywordsList","getIdentityAutofillFieldKeywords","keywordsCombined","shouldMakeIdentityTitleFillScript","shouldMakeIdentityNameFillScript","makeIdentityNameFillScript","shouldMakeIdentityFirstNameFillScript","shouldMakeIdentityMiddleNameFillScript","shouldMakeIdentityLastNameFillScript","shouldMakeIdentityEmailFillScript","shouldMakeIdentityAddressFillScript","makeIdentityAddressFillScript","shouldMakeIdentityAddress1FillScript","shouldMakeIdentityAddress2FillScript","shouldMakeIdentityAddress3FillScript","shouldMakeIdentityPostalCodeFillScript","shouldMakeIdentityCityFillScript","shouldMakeIdentityStateFillScript","makeIdentityStateFillScript","shouldMakeIdentityCountryFillScript","makeIdentityCountryFillScript","shouldMakeIdentityPhoneFillScript","shouldMakeIdentityUserNameFillScript","shouldMakeIdentityCompanyFillScript","keywords","attribute","keyword","isExcludedType","excludedTypes","matchFieldAttributeValues","htmlName","htmlID","placeholder","attrIndex","attributeKeywords","keywordIndex","searchFieldNamesSet","forCustomFieldsOnly","containsOptions","checkValueContains","cipherData","dataProp","fieldProp","dataValue","doFill","valueIsLikePassword","fieldHasDisqualifyingAttributeValue","checkedAttributeValues","valueIsOnExclusionList","checkedAttributeValue","canBeHidden","canBeReadOnly","mustBeEmpty","isPassword","readonly","testedValues","isLikePassword","passwordField","withoutForm","usernameField","totpField","names","fieldPropertyIsPrefixMatch","fieldPropertyIsMatch","sepIndex","fieldVal","regexParts","csvParts","csvVals","fuzzyMatch","lastField","lastPasswordField","openPasswordRepromptPopoutDebounce","UpdateBadge","badgeAction","badgeSettingsService","opts","setBadgeBackgroundColor","setLoggedOut","setLocked","setUnlocked","setBadgeIcon","clearBadgeText","setBadgeText","countText","isOperaSidebar","setActionText","setSideBarText","iconSuffix","setActionIcon","setSidebarActionIcon","setTitle","setIcon","useSyncApiCalls","lastFocusedWindow","HANDLED_ERRORS","logger","ChromeMessageSender","errorHandler","DefaultOffscreenDocumentService","workerCount","reasons","justification","documentExists","createDocument","closeDocument","hasDocument","BiometricsService","BrowserBiometricsService","supportsBiometric","platformInfo","BackgroundBrowserBiometricsService","nativeMessagingBackground","authenticateBiometric","responsePromise","getResponse","isBiometricUnlockAvailable","biometricsNeedsSetup","biometricsSupportsAutoSetup","biometricsSetup","BaseEncryptedOrganizationKey","fromData","EncryptedOrganizationKey","ProviderEncryptedOrganizationKey","isProviderEncrypted","toData","encryptedOrganizationKey","UserPrivateKeyDecryptionFailedError","USER_KEY","platformUtilService","activeUserEverHadUserKey","everHadUserKey$","orgKeys$","storeAdditionalKeys","setUserKeys","encPrivateKey","decryptPrivateKey","isLegacyUser","validateUserKey","getKeyFromStorage","clearAllStoredUserKeys","hasUserKeyInMemory","buildProtectedSymmetricKey","clearUserKey","clearStoredUserKey","clearDeprecatedKeys","Pin","userKeyMasterKey","getOrDeriveMasterKey","resolvedUserId","KdfConfig","encryptUserKeyWithMasterKey","hashPurpose","storedPasswordHash","providerOrgs","encOrgKeyData","newSymKey","clearOrgKeys","encProviderKeys","getProviderKey","providerKeys$","clearProviderKeys","makeOrgKey","shareKey","userPublicKey$","getPrivateKey","userPrivateKey$","fingerprintMaterial","keyFingerprint","userFingerprint","hashPhrase","clearKeyPair","keyMaterial","clearKeys","rval","range","bitsNeeded","log2","bytesNeeded","mask","byteArray","derivePublicKey","initAccount","shouldStoreKey","noPreExistingPersistentKey","minimumEntropy","entropyPerWord","hashArr","phrase","hashNumber","remainder","divide","encryptionKey","protectedSymKey","stretchedEncryptionKey","encBuffer","userKeyWithLegacySupport$","pk","userPrivateKeyHelper$","userPrivateKey","userPrivateKeyWithLegacySupport$","legacySupport","providerKeysHelper$","project","inputRecord","encryptedProviderKeys","forkJoin","userKeys","BrowserCryptoService","biometricsService","EnvironmentState","GLOBAL_ENVIRONMENT_KEY","USER_ENVIRONMENT_KEY","GLOBAL_CLOUD_REGION_KEY","USER_CLOUD_REGION_KEY","PRODUCTION_REGIONS","icons","webVault","scim","EU","DEFAULT_REGION","DEFAULT_REGION_CONFIG","DefaultEnvironmentService","activeAccountId$","globalCloudRegionState","account$","oldUserId","newUserId","buildEnvironment","cloudWebVaultUrl$","getRegionConfig","availableRegions","additionalRegions","ADDITIONAL_REGIONS","setEnvironment","SelfHosted","isEmpty","formatUrl","keyConnector","regionConfig","CloudEnvironment","SelfHostedEnvironment","getEnvironment","getEnvironmentState","UrlEnvironment","getRegion","getUrls","getKeyConnectorUrl","getScimUrl","getSendUrl","isCloud","baseSuffix","BrowserEnvironmentService","hasManagedEnvironment","getManagedEnvironment","settingsHaveChanged","managedEnv","managed","setUrlsToManagedEnvironment","fromChromeEvent","serializationIndicator","AbstractChromeStorageService","chromeStorageApi","changes","change","processGetObject","objToStore","keyedObj","isSerialized","asSerialized","BrowserLocalStorageService","local","fillBuffer","fakeData","fake_data_1","fake_data_2","fake_data_3","fake_data_4","BrowserMemoryStorageService","session","ScriptInjectorService","BrowserScriptInjectorService","getScriptFile","injectionDetails","buildInjectionDetails","TranslationService","systemLanguage","localesDirectory","getLocalesJson","supportedTranslationLocales","defaultLocale","localeNames","defaultMessages","localeMessages","translationLocale","Intl","Collator","numeric","sensitivity","loadMessages","p1","p2","p3","messagesObj","formattedLocale","locales","placeholders","placeProp","replaceToken","replaceContent","translationLocaleState","userSetLocale$","setLocale","storedLocale","I18nService","AbstractStorageService","LocalBackedSessionStorageService","sessionKey","localStorage","ports","listenerCallback","onMessageFromForeground","sendMessageTo","broadcastMessage","getLocalSessionValue","existingValue","compareValues","updateLocalSessionValue","sessionStorageKey","valueJson","originator","value1","value2","BackgroundPlatformUtilsService","popupClosedPortName","POPUP_VIEW_CACHE_KEY","POPUP_ROUTE_HISTORY_KEY","SAVE_VIEW_CACHE_COMMAND","PopupViewCacheBackgroundService","popupViewCacheState","popupRouteHistoryState","startObservingTabChanges","tabInfo","pendingUrl","clearState","objNotEmpty","BrowserTaskSchedulerPortName","BrowserTaskSchedulerPortActions","ACTIVE_ALARMS","BrowserTaskSchedulerServiceImplementation","handleOnAlarm","alarm","periodInMinutes","activeAlarmsState","activeAlarms$","activeAlarms","setupOnAlarmListener","delayInMinutes","scheduleAlarm","getUpperBoundDelayInMinutes","clearScheduledAlarm","initialDelayInMs","intervalInMinutes","initialDelayInMinutes","setupSteppedIntervalAlarms","alarmMinDelayInMinutes","getAlarmMinDelayInMinutes","numberOfAlarmsToCreate","steppedAlarmPeriodInMinutes","steppedAlarmNames","alarmIndex","steppedAlarmName","elapsedMs","alarmName","clearAllScheduledTasks","clearAllAlarms","updateActiveAlarms","verifyAlarmsState","currentTime","getActiveAlarms","startTime","createInfo","getAlarm","shouldAlarmHaveBeenTriggered","when","hasSetTimeoutAlarmExceededDelay","createAlarm","setActiveAlarm","filteredAlarms","deleteActiveAlarm","clearAlarm","alarms","onAlarm","getTaskFromAlarmName","isNonChromeEnvironment","clearAll","BackgroundTaskSchedulerService","handlePortMessage","isTaskSchedulerPort","ForegroundTaskSchedulerService","sendPortMessage","MemoryStorageService","store","BackgroundMemoryStorageService","_ports","StorageServiceProvider","diskStorageService","defaultLocation","overrides","BrowserStorageServiceProvider","limitedMemoryStorageService","largeObjectMemoryStorageService","diskBackupLocalStorage","ForegroundMemoryStorageService","partitionName","_port","_backgroundResponses$","handleInitialize","handleSubjectUpdate","delegateToBackground","OffscreenStorageService","LOCAL_STORAGE","FULL_SYNC_FINISHED","SyncServiceListener","listener$","DO_FULL_SYNC","ForegroundSyncService","syncCompletedPromise","fromChromeRuntimeMessaging","stateEventRunnerService","lockedCallback","loggedOutCallback","checkVaultTimeout","startCheck","userIdString","shouldLock","executeTimeoutAction","currentUserId","lockingUserId","lockPromise","vaultTimeoutSeconds","VaultTimeoutService","checkSafari","FilelessImporterInjectedScriptsConfig","LpSuppressImportDownload","mv2","mv3","FilelessImportType","FilelessImportPort","FilelessImporterBackground","importService","importNotificationsPortMessageHandlers","startFilelessImport","cancelFilelessImport","lpImporterPortMessageHandlers","displayLpImportNotification","displayFilelessImportNotification","startLpImport","triggerLpImport","filelessImporterPortNames","filelessImportFeatureFlagEnabled","filelessImportEnabled","handleImporterPortMessage","handleImporterPortDisconnect","lpImporterPort","importNotificationsPort","setupPortMessageListeners","triggerLpImporterCsvDownload","importErrorMessage","VaultFilter","selectedCollection","selectedFolder","myVaultOnly","refreshCollectionsAndFolders","resetFilter","selectedCollectionId","selectedFolderId","resetOrganization","selectedOrganizationId","buildFilter","cipherPassesFilter","DynamicTreeNode","hasId","fullList","collapsedGroupingsState","collapsedGroupings$","storeCollapsedFilterNodes","collapsedFilterNodes","buildCollapsedFilterNodes","buildOrganizations","buildNestedFolders","transformation","storedFolders","orgCiphers","oc","nestedFolders","getAllFoldersNested","nestedList","buildCollections","storedCollections","nestedCollections","checkForSingleOrganizationPolicy","SingleOrg","checkForPersonalOwnershipPolicy","folderCopy","getFolderNested","VaultFilterService","vaultFilter","allVaults","myVault","setVaultFilter","getVaultFilter","filterCipherForSelectedVault","CommandsBackground","passwordGenerationService","processCommand","onCommand","triggerAutofillCommand","openPopup","commandSender","collectPageDetailsForContentScript","IdleBackground","notificationsService","idleTimer","idleState","idle","idleHandler","onStateChanged","setDetectionInterval","pollIdle","allUsers","queryState","NativeMessagingBackground","runtimeBackground","resolver","rejecter","secureSetupResolve","onAdded","connecting","connectedCallback","sharedSecret","validatingFingerprint","showFingerprintDialog","timestamp","encryptMessage","secureCommunication","resp","rawMessage","abs","userKeyB64","processMessage","sendUnencrypted","fingerprint","RuntimeBackground","systemService","fido2Background","lockService","pageDetailsToAutoFill","onInstalledReason","lockedVaultPendingNotifications","onInstalled","checkOnInstalled","processMessageWithSender","autofillTimeout","autofillPage","initOverlayAndTabsBackground","sendBwInstalledMessageToVault","closeUnlockPopout","reseedStorage","vaultUrl","referrer","lastpass","resultData","authResultUrl","openSsoAuthResultPopout","twoFactorAuthData","twoFactorUrl","openTwoFactorAuthPopout","acceptButtonText","cancelButtonText","tabToAutoFill","loginToAutoFill","urlObj","runHeartbeat","startHeartbeat","bitwardenMain","popupOnlyContext","logoutReason","intraprocessMessagingSubject","sessionStorage","existingKey","memoryStorageForStateProviders","largeObjectMemoryStorageForStateProviders","mv3MemoryStorageCreator","localStorageStorageService","popupViewCacheBackgroundService","policyApiService","passwordStrengthService","passwordRandomizer","legacyPasswordGenerationServiceFactory","deviceTrustService","devicesService","authRequestService","ssoLoginService","vaultFilterService","containerService","sendStateProvider","syncServiceListener","auditService","exportService","fido2UserInterfaceService","fido2AuthenticatorService","commandsBackground","overlayNotificationsBackground","filelessImporterBackground","autoSubmitLoginBackground","_tab","contextMenusBackground","idleBackground","usernameGenerationService","restClient","usernameRandomizer","legacyUsernameGenerationServiceFactory","cipherContextMenuHandler","webRequestBackground","userAutoUnlockKeyService","bootstrap","setUserKeyInMemoryPromises","nextUpAccount","forLocked","nextAccountStatus","switchPromise","userBeingLoggedOut","newActiveUser","logoutPromise","authenticationStatus","needStorageReseed","needsStorageReseed","override","syncInternal","lastSyncAgo","tabsBackground","inlineMenuPositioningImprovementsEnabled","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","exports","loaded","__webpack_modules__","O","chunkIds","fn","priority","notFulfilled","fulfilled","getPrototypeOf","__proto__","__esModule","ns","def","getOwnPropertyNames","defineProperty","enumerable","chunkId","Function","toStringTag","nmd","paths","scriptUrl","importScripts","currentScript","src","baseURI","installedChunks","webpackJsonpCallback","parentChunkLoadingFunction","moreModules","chunkLoadingGlobal","__webpack_exports__"],"sourceRoot":""}